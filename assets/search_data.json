{
  
  
    

    "bcd-1-0-bcd-controller-docker-image-cli": {
      "title": "BCD Command Line Interface",
      "content"     : "Bonita Continuous Delivery CLIThis is a command-line tool for Bonita Continuous Delivery.InstallUsageExamplesMulti command chainingInstallThe CLI is provided as a Python package. Install the package locally as follows:$ cd cli$ pip install --user .This will make the bcd command available under $HOME/.local/bin.Basically make sure to add $HOME/.local/bin to your PATH environment variable in order to make your environment aware of the bcd command.UsageThe bcd command takes a mandatory option called scenario through the -s / --scenario command line option.Then the bcd command provides the following subcommands in order to drive Bonita Continuous Delivery module:Usage: bcd [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...  Bonita Continuous Delivery CLI.Options:  -s, --scenario PATHYAML scenario file (required)  -y, --yes  Execute action without confirmation prompt  -v, --verbose  Enable Ansible verbose mode  --nocolor  Turn output colorization off  -e, --extra-vars TEXT  Extra vars for Ansible (multiple) - Variables are passed using the key=value syntax.  -h, --help Show this help messageCommands:  statusShow the platform status  createCreate AWS instances  deployDeploy Bonita stack  undeploy  Undeploy Bonita stack  destroy   Destroy AWS machines (EC2 instances)Examples$ bcd -s scenarios/uswest2_cluster.yml create$ bcd -s scenarios/vagrant_single.yml -e mail_notification=no -y deploy$ bcd -s scenarios/uswest2_performance.yml destroy --dry-runMulti command chainingThe BCD CLI allows to invoke more than one command in one go. This is useful to chain commands as a pipeline. If one command fails then bcd stops executing any subsequent command it may have.For example:$ bcd -s scenarios/uswest2_cluster.yml -y create deploy",
      "url": " /bcd/1.0/bcd-controller-docker-image/cli",
      "author": "",
      "categories": "BCD Controller Docker image"
    }
    ,
  

    "bcd-1-0-bcd-controller-docker-image-docker": {
      "title": "Docker image overview",
      "content"     : "BCD controller Docker imageThis Docker image provides a ready-to-use environment to launch Bonita Continuous Delivery Ansible playbooks.Install the imageFrom pre-built imageFrom sourceUse the imageConfigure AWS credentialsStart a containerInstall the imageFrom pre-built imageA pre-built BCD controller image is provided with BCD deliverable as a bcd-controller_&amp;lt;version&amp;gt;.tar.gz archive. It is located in the bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker directory.Load this image into Docker engine as follows:$ cd bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker$ gunzip -c bcd-controller_&amp;lt;version&amp;gt;.tar.gz | docker loadLoaded image: bonitasoft/bcd-controller:&amp;lt;version&amp;gt;Loaded image: bonitasoft/bcd-controller:latestFrom sourceYou can also build the image from source. Its Dockerfile is provided with BCD deliverable in the bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker directory.Build the image as follows:$ cd bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker$ docker build -t bonitasoft/bcd-controller .Use the imageConfigure AWS credentialsDynamic Amazon EC2 inventory management for Ansible runs on top of Boto.Boto’s configuration requires the following .boto file to exist in the Docker container’s /home/bonita directory.[Credentials]aws_access_key_id = &amp;lt;YOUR_AWS_ACCESS_KEY&amp;gt;aws_secret_access_key = &amp;lt;YOUR_AWS_SECRET_ACCESS_KEY&amp;gt;Start a container$ docker run --rm -t -i --name bcd-controller -v &amp;lt;local_path_to_.boto&amp;gt;:/home/bonita/.boto -v &amp;lt;local_path_to_bonita-continuous-delivery_folder&amp;gt;:/home/bonita/bonita-continuous-delivery -v &amp;lt;local_path_to_ssh_private_key&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt; bonitasoft/bcd-controller /bin/bash$ cd /home/bonita/bonita-continuous-delivery",
      "url": " /bcd/1.0/bcd-controller-docker-image/docker",
      "author": "",
      "categories": "BCD Controller Docker image"
    }
    ,
  

    "bcd-1-0-index": {
      "title": "index",
      "content"     : "Bonita Continuous Delivery Add-onThis add-on provides a solution to use Continuous Delivery practice for your Bonita Living Application development and deployment.It is composed of two main parts:  First a solution for Bonita stack provisioning on Cloud or on-premise.  Second a framework for continuous integration of Living Application. This CI framework will be delivered in future versions of the add-on.This documentation focus on the first part: the solution and tooling for provisioning of a Bonita stack.The tool is composed of a set of scripts to deploy a full Bonita stack automatically (database and Bonita Tomcat application server).This toolkit is compatible with Amazon EC2 cloud platform (AWS), on premises servers and local virtual machines via Vagrant.These scripts are powered by Ansible. Short note from Wikipedia:Ansible is a free software platform for configuring and managing computers. It combines multi-node software deployment, ad hoc task execution, and configuration management. It manages nodes over SSH or PowerShell and requires Python (2.4 or later) to be installed on them. Modules work over JSON and standard output and can be written in any programming language. The system uses YAML to express reusable descriptions of systems.The Bonita Continuous Delivery (BCD) tooling is provided through a Docker container called BCD Controller. In this controller you’ll find all useful tooling to manage your provisioning of Bonita platform and more. This controller should be installed on your local machine.  A “Host” can be an EC2 instance or a dedicated server.  Files organization on the local machine:  ~/.boto = should contains all credential to your AWS account (if any)  ~/bonita-continuous-delivery = used as a work directory for the scripts.  ~/.ssh/private_key = used to allow access to hosts  AWS PrerequisitesBonita Licensing PrerequisitesQuickstartHow to useEC2 instances creationDeployment and TestEC2 Instances DeletionAdvanced usageInstalling a custom BCD ControllerDive into the scenariosKnown issuesAWS PrerequisitesIn order to be able to deploy on Amazon Web Services please start to read the AWS Prerequisites section.Bonita Licensing PrerequisitesTo use this tool, you must have an active Bonitasoft Subscription and a dedicated access to the license service. please contact your Sales representative for more information.To automatically retrieve the Bonita licenses for your platforms please take a look at the Licensing Prerequisites section.QuickstartIf you have fulfilled all the prerequisites then you can follow the Quickstart guide.How to useThe nominal usage of BCD can de described as the following workflow:  (Optional) Amazon EC2 instance creation  Bonita platform deployment in EC2 or on premises  (Optional) Amazon EC2 instance deletionThe user must specify the bcd_stack_id variable for each command in order to identify its infrastructure. Multiple tests with different bcd_stack_id can be used simultaneously even on AWS. The bcd_stack_id variable should contain only letters, digits or underscore characters (see https://github.com/ansible/ansible/blob/v2.3.1.0-1/contrib/inventory/ec2.py#L1555).In order to describe a new infrastructure and software configuration (aka. scenario), you need to prepare the following files:  scenarios/&amp;lt;scenario_name&amp;gt;.yml: this YAML file should gather all relevant variables which describe the scenario  inventory/&amp;lt;inventory_file&amp;gt;: this folder should describe the target infrastructure - Dynamic EC2 inventory is automatically used when provisioning AWS instances.Finally start Bonita stack provisioning by invoking the bcd Command Line Interface (BCD CLI).The BCD CLI is directly available as a bcd command when using the BCD Controller Docker image (@see the Quickstart guide).Examples:$ bcd -s scenarios/uswest_performance.yml create$ bcd -s scenarios/uswest_performance.yml --yes deploy$ bcd -s scenarios/uswest_performance.yml destroy --dry-run$ bcd -s scenarios/vagrant_cluster.yml deploy$ bcd -s scenarios/vagrant_cluster.yml --yes undeploy$ bcd -s scenarios/uswest2_cluster.yml -y create deployEC2 instances creationThe create_aws.yml playbook goal is to create EC2 instances.Example: Create 3 x t2.micro EC2 instancesOne t2.micro for the database, one for Bonita.$ bcd -s scenarios/uswest_performance.yml createDeployment and TestDynamic EC2 InventoryOnce EC2 instances are created, you can continue with deployment as follows:$ bcd -s scenarios/uswest_performance.yml deployThis command will read the scenarios/uswest_performance.yml configuration file and provision existing EC2 instances accordingly.Static On-premises InventoryAssuming a server is already up and running (eg. perf-host), you can use these scripts to deploy a Bonita stack on a static infrastructure.$ bcd -s scenarios/perf-host_cluster.yml deployThis command will read the scenarios/perf-host_cluster.yml configuration file and provision an existing server accordingly.VagrantWe provide 2 sample Vagrant layouts - 1-machine and 2-machines - which you can find in the vagrant directory.  Create the machine infrastructure with vagrant up.  Start provisioning by invoking the bcd CLI.Examples:$ bcd -s scenarios/vagrant_performance.yml deploy$ bcd -s scenarios/vagrant_cluster.yml deploy$ bcd -s scenarios/vagrant_performance.yml -e &quot;bcd_inventory=inventory/vagrant/2-machines/inventory&quot; deploy# The latter syntax allows to override the bcd_inventory variable from the command line.EC2 Instances DeletionThe destroy_aws.yml playbook goal is to delete EC2 instances. When tests have finished, you may delete every related EC2 instances like this:$ bcd -s scenarios/uswest_performance.yml destroy --dry-run$ bcd -s scenarios/uswest_performance.yml --yes destroyAdvanced usageInstalling a custom BCD ControllerIn order to setup your own environment without the BCD Controller Docker image, you can follow the installation procedure described in its Dockerfile.The BCD controller Dockerfile is provided with BCD deliverable in the bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker directory.Dive into the scenariosFor further details see this section.Known issuesFor further details see this section.",
      "url": " /bcd/1.0/index",
      "author": "",
      "categories": ""
    }
    ,
  

    "bcd-1-0-release-notes": {
      "title": "Release notes",
      "content"     : "Release notesLimitations and known issuesWhat&#39;s new in 1.0.5 (2018-05-04)BugfixesWhat&#39;s new in 1.0.4 (2018-04-05)BugfixesWhat&#39;s new in 1.0.3 (2018-03-08)BugfixesInternal refactoringWhat&#39;s new in 1.0.2 (2018-02-02)BugfixesWhat&#39;s new in 1.0.1 (2018-01-05)BugfixesLimitations and known issues  The same BCD stack cannot be managed with multiple BCD controller instances due to the use of Terraform “local” backend.What’s new in 1.0.5 (2018-05-04)Bugfixes  BCD-200 Database container is not created with provided Vagrant inventories  BCD-241 ‘Install license modules’ task fails  BCD-243 vagrant failed to download ubuntu box: 404 Not FoundWhat’s new in 1.0.4 (2018-04-05)Bugfixes  BCD-234 ‘Install python modules’ task fails due to pip 10What’s new in 1.0.3 (2018-03-08)Bugfixes  BCD-204 Hibernate cache is not disabled on cluster deploymentsInternal refactoring  BCD-171 Refactor license request script using bonita_license module  Set bcd_cli module version to 1.0.2What’s new in 1.0.2 (2018-02-02)Bugfixes  BCD-142 Failures while loading Docker images do not stop BCD command  BCD-189 Database instance (AWS) and container (Docker) is created although ‘bonita_db_host’ is set  BCD-190 boto file is required for Vagrant deployments  BCD-191 ‘bcd status’ command fails when docker is not installed yet on target hosts  BCD-192 Timestamp is not displayed in BCD CLI stdout  BCD-196 ‘–nocolor’ is not a recognized BCD CLI optionWhat’s new in 1.0.1 (2018-01-05)Bugfixes  BCD-104 An EC2 instance is created for database even when rds=”true”  BCD-141 Undeploy doesn’t free disk space of docker volumes",
      "url": " /bcd/1.0/release_notes",
      "author": "",
      "categories": ""
    }
    ,
  

    "bcd-1-0-scenarios": {
      "title": "Scenario variables reference",
      "content"     : "Bonita Platform Provisioning scenariosWith scenarios, you can define your infrastructure, Bonita installation and potential tests you want to execute. A scenario is a YAML Ansible variable file injected in Ansible with the command -e &quot;@/path/to/scenario.yml&quot;. The variables described in a scenario have precedence over those defined in the playbooks or the group vars. It is possible to overload these variables with a declaration of additional variables after this, in order to test multiple alternatives (for instance overloading bonita_version can be interesting if one wants to test multiple versions of Bonita.The format is flat as shows this sample :bcd_stack_id: vagrantconfiguration: vagrant_varsbonita_cluster_mode: falsebonita_cluster_qty: 1The following sections describe the main and mandatory variables.Infrastructure and misc.Vagrant scenariosOn-premises scenariosAWS Cloud scenariosBonitaEmail notificationInfrastructure and misc.Some parameters are mandatory for general provisioning and test description.Name  Mandatory  Default  Description  Sample  bcd_stack_id  Y     Bonita stack identifier used to group machines by stack membership. For AWS deployments the characters allowed are limited to letters, numbers and underscore.  uswest2_test  configuration  Y     Configuration filename. Initialize main variables. Choose between aws_vars, vagrant_vars  aws_vars  ansible_ssh_user  N  ubuntu  SSH user  ubuntu  ansible_private_key_file  Y  -  Path for the private SSH key.  ~/.ssh/jenkins_ansible_us-west-2.pem  Vagrant scenariosIn case of Vagrant scenario, for testing purposes. The configuration file value should be vagrant_vars.On-premises scenariosIn case of on-premises scenario. An inventory with all the corresponding machines should be used. A configuration file similar to vagrant_vars can be used.AWS Cloud scenariosIn case of AWS deployments. The configuration file value should be  aws_vars in this case.Name  Mandatory  Default  Description  Sample  ec2_region  Y     AWS region.  us-west-2  ec2_security_group  Y     Security group id for the target instances  sg-944888f1  ec2_security_group_name  Y     Security group name for the target instances  default  ec2_subnet_ids  Y     Subnet id for the target instances  subnet-aa14e0cf  ec2_keypair  Y     Key pair name for the target instances. Linked to ansible_private_key_file.  jenkins_ansible_us-west-2  boto_path  N  ~/.boto  Path to the Boto file with the AWS credentials.     rds  N  false  Precises if we use RDS for the Bonita BPM databases or if we use a Docker container deployed in an EC2 instance instead (default)  true  The following figure describes for each tier the important variables.Name  Mandatory  Default  Description  Sample  aws_ami  Y     Common AMI for all EC2 instances. Depends on region. Should be Ubuntu 14.04 (trusty) and ebs-ssd type.  ami-fc4f5e85  aws_database_instance_type  Y     Instance type for the database instance  t2.micro  aws_bonita_instance_type  Y     Instance type for the Bonita instance  t2.micro  aws_load_balancer_instance_type  Y     Instance type for the load balancer instance  t2.micro  BonitaSome parameters should be precised for Bonita. The corresponding Docker tar files should be present in docker directory.Name  Mandatory  Default  Description  Sample  bonita_version  Y     Bonita version. Used for the Docker tar.gz filename  7.5.0  bonita_edition  N  yes  performance edition of Bonita by default, other values: teamwork, efficiency, community. Docker tar filename depends on this.  performance  bonita_cluster_mode  N  false  Activates cluster mode for Bonita  false  bonita_cluster_qty  N  1  Number of instances for Bonita. This variable is also used in EC2 mode for the number of Bonita EC2 instance.  1  bonita_port  N  8081  Bonita HTTP port  8081  bonita_db_vendor  N  postgres  Database vendor (postgres, mysql, oracle)  postgres  bonita_db_host  N     Database host (usually retrieved from inventory)  postgres.a1bac2defghi.us-west-2.rds.amazonaws.com  bonita_db_port  N  5432  Database port  5432  bonita_db_admin_user  N  postgres  Admin user on database instance  root  bonita_db_admin_pass  N  mysecretpassword  Admin password on database instance  password  Email notificationAn email can be sent automatically with Bonita stack details at the end of the deployment phase. This feature uses Ansible mail module.Name  Mandatory  Default  Description  Sample  mail_notification  N  false  Enable email notification or not.  false  mail_host  N  -  The SMTP server host.  smtp.gmail.com  mail_port  N  -  The SMTP port.  465  mail_username  N  -  The SMTP username.  john.doe@acme.com  mail_password  N  -  The SMTP password.  SomePassword  mail_from  N  -  The email-address the mail is sent from. May contain address and phrase.  john.doe@acme.com (John Doe)  mail_to  N  -  The email-address(es) the mail is being sent to. This is a comma-separated list, which may contain address and phrase portions.  John Doe &amp;lt;john.doe@acme.com&amp;gt;, Suzie Something &amp;lt;sue@example.com&amp;gt;  ",
      "url": " /bcd/1.0/scenarios",
      "author": "",
      "categories": ""
    }
    ,
  

    "bcd-1-0-tutorials-aws-prerequisites": {
      "title": "AWS prerequisites",
      "content"     : "AWS prerequisitesSign Up for AWSAWS Setup for BCDDynamic EC2 inventory configurationSign Up for AWSIf you do not have an Amazon Web Services (AWS) account yet, first sign up as described in this AWS user guide: Sign Up for AWS.AWS Setup for BCDIn order to use Amazon EC2 instances, some configuration steps need to be performed as a prerequisite.The following steps are required to set up AWS credentials for Ansible automation.  Create an IAM Policy to grant full access to Amazon EC2 on a specific region (eg. us-west-2)  Policy name: EC2FullAccess_us-west-2  Policy document: {  &quot;Version&quot;: &quot;2012-10-17&quot;,  &quot;Statement&quot;: [  {  &quot;Action&quot;: &quot;ec2:*&quot;,  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Resource&quot;: &quot;*&quot;,  &quot;Condition&quot;: {  &quot;StringEquals&quot;: {  &quot;ec2:Region&quot;: &quot;us-west-2&quot;  }  }  }  ] }  Create an IAM Policy to allow to describe DB instances and list tags (mandatory for dynamic inventory script).  Policy name: RDSDescribeDBInstances  Policy document: {  &quot;Version&quot;: &quot;2012-10-17&quot;,  &quot;Statement&quot;: [  {  &quot;Sid&quot;: &quot;Stmt1498730873000&quot;,  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Action&quot;: [  &quot;rds:DescribeDBInstances&quot;,  &quot;rds:ListTagsForResource&quot;  ],  &quot;Resource&quot;: [  &quot;*&quot;  ]  }  ] }  Create an IAM Policy to grant full access to Amazon RDS on a specific region (eg. us-west-2). In order to do it you will need your account id (eg. 012345678901)  Policy name: RDSFullAccess_us-west-2  Policy document: {  &quot;Version&quot;: &quot;2012-10-17&quot;,  &quot;Statement&quot;: [  {  &quot;Action&quot;: [  &quot;rds:*&quot;  ],  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Resource&quot;: &quot;arn:aws:rds:us-west-2:012345678901:*&quot;  }  ] }  Create an IAM Group  Group name: bonita-provisioning  Select the IAM Policies created previouslyCreate an IAM User  Access type: Programmatic access  Add user to the IAM group created previously  Download as .csv (or copy) Access key information (Access key ID and Secret access key) for later useNow let’s assume you are using an EC2 region which supports the EC2-VPC platform.Therefore a default VPC and default subnets should already be available.  Create an EC2 Security Group  Security group name: sg_bonita-provisioning  Add an Inbound rule to allow communication between Bonita stack components  Type: All Traffic, Source: &amp;lt;security_group_id_of_sg_bonita-provisioning&amp;gt;Add an Inbound rule to allow Ansible to connect via SSH  Type: SSH, Source: My IPAdd an Inbound rule to allow remote connection to Bonita Tomcat via HTTP  Type: Custom TCP Rule, Port Range: 8081, Source: My IPAdd an Inbound rule to allow remote connection to Bonita databases  Type: Custom TCP Rule, Source: My IP  with bonita_db_vendor: postgres - Port Range: 5432  with bonita_db_vendor: mysql - Port Range: 3306  with bonita_db_vendor: oracle - Port Range: 1521Create an EC2 Key Pair  Note: A key pair is linked to an AWS region  Download the .pem private key file  Ensure private key file permissions: $ chmod 400 &amp;lt;keyfile_basename&amp;gt;.pem  Bonita Provisioning solution uses official Ubuntu cloud images as EC2 AMI (Amazon Machine Images).Use the Amazon EC2 AMI Locator tools to identify IDs of such images.Dynamic EC2 inventory configurationWhen deploying to AWS, BCD uses dynamic Amazon EC2 inventory with a ec2_wrapper.sh script.This ec2_wrapper.sh script can be further configured with the ec2.ini.j2 template.For instance, if you are running the BCD controller from outside EC2, the vpc_destination_variable parameter should be set to ip_address. If you are running the BCD controller from within EC2, the vpc_destination_variable parameter should be set to private_ip_address.This parameter is managed by the ec2_vpc_destination_variable BCD variable.More information on dynamic EC2 inventory management can be found in this blog post.",
      "url": " /bcd/1.0/tutorials/aws_prerequisites",
      "author": "",
      "categories": "Tutorials"
    }
    ,
  

    "bcd-1-0-tutorials-bonita-container-custom-initialization-custom-init": {
      "title": "Custom initialization overview",
      "content"     : "Bonita Container Custom InitializationThe Bonita Docker container deployed by BCD can be further customized thanks to a custom initialization mechanism.This feature relies on the ability to extend the Bonita Docker image through custom *.sh shell scripts.Where should I put custom initialization scripts?Static initialization filesDynamic initialization filesWhen are custom initialization scripts invoked?In which order are custom initialization scripts invoked?Examples1. config-workers.sh2. config-cluster.sh.j23. register-event-handler.sh4. deploy-probe.sh5. More examples about REST API authorizationWhere should I put custom initialization scripts?Custom initialization files can be static or they can be dynamic while relying on runtime variables. Dynamic initialization files then leverage the Jinja2 templating framework used by Ansible.Static initialization filesStatic custom initialization files must be placed in BCD’s roles/bonita/files/custom-init.d folder. All files from this folder will be uploaded to the target host regardless their extension. However only the files with a .sh extension will be executed.Here’s the directory layout for a register-event-handler.sh custom script:roles├── bonita│   ├── files│   │   ├── custom-init.d│   │   │   ├── bonita-tenant-sp-custom.xml│   │   │   ├── config-workers.sh│   │   │   ├── event-handler-example-1.0.0-SNAPSHOT.jar│   │   │   └── register-event-handler.shDynamic initialization filesDynamic custom initialization files must be placed in BCD’s roles/bonita/templates/custom-init.d folder. All files with a .j2 extension will be uploaded to the target host and stripped from the .j2 suffix. However only the files with a .sh.j2 extension will be executed.Here’s the directory layout for the provided config-cluster.sh.j2 initialization script:roles├── bonita│   └── templates│   └── custom-init.d│   ├── bonita-platform-sp-cluster-custom.properties.j2│   ├── config-cluster.sh.j2When are custom initialization scripts invoked?Custom initialization scripts are invoked once the database has been initialized and the Tomcat server has been configured with Bonita Platform setup tool.Hence the Bonita Docker image startup sequence can be described as follows:  Initialize database: setup.sh init  Configure Tomcat server: setup.sh configure  Execute custom initialization *.sh scripts found in the container’s /opt/custom-init.d folder  Start Tomcat serverWarning: all custom scripts are re-executed each time the Bonita Docker container is restarted.If you want your script to be executed only once, you need to handle the conditional execution in your custom script itself.For example:#!/bin/bashindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fi## Do some interesting stuff# [...]# Create indicator filetouch ${indicator_path}In which order are custom initialization scripts invoked?Custom scripts are executed in natural sort order as implemented by the ls shell command. It is also referred as natural sort of (version) numbers within text.More precisely scripts are executed in the order returned by this command: ls -v /opt/custom-init.d/*.sh.Examples1. config-workers.shThe config-workers.sh script is provided as part of BCD’s core scripts.In particular it shows how to further configure the server using Bonita Platform setup tool.2. config-cluster.sh.j2The config-cluster.sh.j2 script template is provided as part of BCD’s core scripts.In particular it shows how to conditionally configure a cluster deployment on AWS using BCD variables and Jinja2 templating engine.3. register-event-handler.shThis sample script deploys and registers a Bonita engine Event handler as described in Event handlers Documentation.Assuming the following files:  roles/bonita/files/custom-init.d/event-handler-example-1.0.0-SNAPSHOT.jar (event handler JAR file)  roles/bonita/files/custom-init.d/bonita-tenant-sp-custom.xml (tenant configuration file where the event handler is registered)Here’s a sample register-event-handler.sh script:#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;EVENT_HANDLER_FILENAME=event-handler-example-1.0.0-SNAPSHOT.jarwar_path=$(find &quot;${BONITA_PATH}/Bonita&quot;*&quot;Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/server/webapps&quot; -name bonita.war)script_dir=&quot;$(cd &quot;$(dirname &quot;${BASH_SOURCE[0]}&quot;)&quot; &amp;amp;&amp;amp; pwd)&quot;workdir=&quot;${BONITA_FILES}/register-event-handler&quot;rm -rf ${workdir} &amp;amp;&amp;amp; mkdir -p ${workdir}pushd ${workdir}# copy event handler jarmkdir -p WEB-INF/libcp ${script_dir}/${EVENT_HANDLER_FILENAME} WEB-INF/lib/# repackage warzip -r &quot;${war_path}&quot; &quot;WEB-INF/lib/${EVENT_HANDLER_FILENAME}&quot;# register event handler${BONITA_SETUP_SH} pullcp /opt/custom-init.d/bonita-tenant-sp-custom.xml ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_engine/${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}4. deploy-probe.shThis sample script deploys PSI Probe (an Advanced manager and monitor for Apache Tomcat) along with Bonita in the Tomcat bundle.In particular, it shows how to reference BCD variables in custom initialization files. All custom referenced variables can be defined at BCD scenario level.With this example, PSI Probe will be available at this URL: http://&amp;lt;bonita_host&amp;gt;:8081/probe. To connect to PSI Probe, use the credentials defined with the custom_manager_username and custom_manager_password variables. By default: custom_manager_username=admin and custom_manager_password=t0psecret.deploy-probe.sh.j2#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}script_dir=&quot;$(cd &quot;$(dirname &quot;${BASH_SOURCE[0]}&quot;)&quot; &amp;amp;&amp;amp; pwd)&quot;pushd ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}# Allow Tomcat Manager from different hostcp ${script_dir}/manager-context.xml server/conf/Catalina/localhost/manager.xml# PSI Probecurl -sSL -o server/webapps/probe.war https://github.com/psi-probe/psi-probe/releases/download//probe.warcp ${script_dir}/tomcat-users.xml server/conf/tomcat-users.xml# Create indicator filetouch ${indicator_path}manager-context.xml.j2&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;Context antiResourceLocking=&quot;false&quot; privileged=&quot;true&quot; &amp;gt;  &amp;lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;&quot; /&amp;gt;  &amp;lt;Manager sessionAttributeValueClassNameFilter=&quot;java.lang.(?:Boolean|Integer|Long|Number|String)|org.apache.catalina.filters.CsrfPreventionFilter$LruCache(?:$1)?|java.util.(?:Linked)?HashMap&quot;/&amp;gt;&amp;lt;/Context&amp;gt;tomcat-users.xml.j2&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;tomcat-users xmlns=&quot;http://tomcat.apache.org/xml&quot;  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  xsi:schemaLocation=&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;  version=&quot;1.0&quot;&amp;gt;  &amp;lt;role rolename=&quot;probeuser&quot; /&amp;gt;  &amp;lt;role rolename=&quot;poweruser&quot; /&amp;gt;  &amp;lt;role rolename=&quot;poweruserplus&quot; /&amp;gt;&amp;lt;role rolename=&quot;manager-gui&quot; /&amp;gt;  &amp;lt;user username=&quot;&quot; password=&quot;&quot; roles=&quot;manager-gui&quot; /&amp;gt;&amp;lt;/tomcat-users&amp;gt;5. More examples about REST API authorizationSee how to configure REST API authorization.",
      "url": " /bcd/1.0/tutorials/bonita-container-custom-initialization/custom_init",
      "author": "",
      "categories": "Tutorials, Bonita container custom initialization"
    }
    ,
  

    "bcd-1-0-tutorials-bonita-container-custom-initialization-how-to-configure-rest-api-authorization": {
      "title": "How to configure REST API authorization",
      "content"     : "How to configure REST API authorizationThe Bonita container is launched with REST_API_DYN_AUTH_CHECKS flag set to true by default.It means that all dynamic permissions checks are activated.In the sections below we will manipluate configuration into templates and not at a specific tenant. Indeed the default tenant (1) will be created during the first startup of bonita.Deactivating dynamic permissions checksAdding custom permissionsEnabling debug modeDeactivating dynamic permissions checksBCD 1.0.x, doesn’t manage directly the REST_API_DYN_AUTH_CHECKS environment variable.So to deactivate dynamic permissions checks you will need to use the custom initialization mechanism by adding this kind of script roles/bonita/files/custom-init.d/deactivate-dynamic-permissions-checks.sh#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;# deactivate dynamic permissions checks${BONITA_SETUP_SH} pullrm ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_portal/dynamic-permissions-checks-custom.properties${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}Adding custom permissionsAs described in Bonita documentation, the custom-permissions-mapping.properties file contains custom rules that supplement the resource permissions and compound permissions. By default, this file is empty, because the compound permissions definitions automatically manage the permissions needed for default and custom profiles, and for default and custom pages.If you want to override the default behavior, you can add rules to this file by adding this kind of script roles/bonita/files/custom-init.d/add-custom-permissions.sh#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;# define custom permissions# the profile User have now the permission Organization management and Organization visualization${BONITA_SETUP_SH} pullecho -e &quot;nprofile|User=[organization_management, organization_visualization]&quot; &amp;gt;&amp;gt; ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_portal/custom-permissions-mapping.properties${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}For a more advanced configuration you can also provide directly a file roles/bonita/files/custom-init.d/custom-permissions-mapping.properties and push it with a script like roles/bonita/files/custom-init.d/add-custom-permissions-file.sh#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;# define custom permissions${BONITA_SETUP_SH} pullcp /opt/custom-init.d/custom-permissions-mapping.properties ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_portal/${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}Enabling debug modeIf debug mode is activated, whenever you update a configuration file or a dynamic check script, the changes take effect immediately.To activate debug mode you can create a script like roles/bonita/files/custom-init.d/activate-debug-mode.sh#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;# activate debug mode${BONITA_SETUP_SH} pullsed -i &#39;s/security.rest.api.authorizations.check.debug.*/security.rest.api.authorizations.check.debug true/&#39; ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_portal/security-config.properties${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}",
      "url": " /bcd/1.0/tutorials/bonita-container-custom-initialization/how_to_configure_rest_api_authorization",
      "author": "",
      "categories": "Tutorials, Bonita container custom initialization"
    }
    ,
  

    "bcd-1-0-tutorials-licensing-prerequisites": {
      "title": "Licensing prerequisites",
      "content"     : "Licensing PrerequisitesIn order that your deployment retrieves a license for Bonita automatically, you need to set the following variables in your scenario:Name  Description  Sample  lic_ws_login  Login to Bonitasoft license webservice.  acme  lic_ws_password  Password to Bonitasoft license webservice.  Secr3t  lic_sub_login  Subscription Login provided by Bonitasoft. It has an email address format.  john.doe@acme.com  lic_sub_password  Subscription Password provided by Bonitasoft.  SomePassword  lic_sub_id  Subscription ID provided by Bonitasoft. It’s a string of 15 characters.  a0bA0000001B2Cd  lic_type  Type of license in [production|development|qualification|trial].  trial  lic_name  Full name of the licensee. This field can only contain alphanumeric characters, dashes, underscores and spaces.  John Doe  lic_company  Company name.  ACME Inc  lic_email  Email address where the license will be sent.  john.doe@acme.com  ",
      "url": " /bcd/1.0/tutorials/licensing_prerequisites",
      "author": "",
      "categories": "Tutorials"
    }
    ,
  

    "bcd-1-0-tutorials-quickstart": {
      "title": "Quick start",
      "content"     : "Bonita Continuous Delivery Quick StartBonita Continuous Delivery (BCD) solution is provided as a bonita-continuous-delivery_&amp;lt;version&amp;gt;.tar.gz archive.This page describes how to use this archive to quickly start using Bonita Continuous Delivery solution.Prepare your workstationStep-by-step installationComplete installation exampleUse Bonita Continuous Delivery solutionPrepare your workstationStep-by-step installationIn order to ease your environment setup, we provide a Docker image which contains all required dependencies and tools for the Control Machine (ie. the machine from which Bonita Continuous Delivery commands are launched).Follow these installation steps on your workstation.  Make sure Docker is installed as described in the Install Docker documentation.Extract the bonita-continuous-delivery_&amp;lt;version&amp;gt;.tar.gz archive: $ tar xzf bonita-continuous-delivery_&amp;lt;version&amp;gt;.tar.gzThis step creates a bonita-continuous-delivery_&amp;lt;version&amp;gt; directory which contains:  Bonita Continuous Delivery Ansible playbooks and roles.  A pre-built Docker image for the Control Machine. This Docker image is provided as a bcd-controller_&amp;lt;version&amp;gt;.tar.gz archive located in the bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker directory.Load the bcd-controller_&amp;lt;version&amp;gt;.tar.gz Docker image: $ cd bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker $ gunzip -c bcd-controller_&amp;lt;version&amp;gt;.tar.gz | docker load Loaded image: bonitasoft/bcd-controller:&amp;lt;version&amp;gt; Loaded image: bonitasoft/bcd-controller:latestThe bonitasoft/bcd-controller Docker image is now available. To use the image, it is recommended to prepare the following local files which will be shared as Docker volumes in the next step:  .boto (mounted as /home/bonita/.boto) - The .boto file contains AWS credentials used to make programmatic calls to AWS. The content of a .boto file is as follows:  [Credentials]  aws_access_key_id = &amp;lt;YOUR_AWS_ACCESS_KEY&amp;gt;  aws_secret_access_key = &amp;lt;YOUR_AWS_SECRET_ACCESS_KEY&amp;gt;ssh_private_key (mounted as /home/bonita/.ssh/ssh_private_key) - The ssh_private_key file is the SSH private key used to connect to your target machines. For AWS, this is the private part of your EC2 key pair. This file should only be accessible from your user (chmod 600 ~/.ssh/ssh_private_key).  /local/path/to/bonita-continuous-delivery_&amp;lt;version&amp;gt; (mounted as /home/bonita/bonita-continuous-delivery) - The provided bonita-continuous-delivery directory contains Ansible playbooks for Bonita Continuous Delivery.Start a Docker container for the Control Machine: $ docker run --rm -ti --hostname control_machine --name bcd-controller  -v &amp;lt;local_path_to_.boto_file&amp;gt;:/home/bonita/.boto  -v &amp;lt;local_path_to_bonita-continuous-delivery_directory&amp;gt;:/home/bonita/bonita-continuous-delivery  -v &amp;lt;local_path_to_ssh_private_key_file&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt;  bonitasoft/bcd-controller /bin/bash  Complete installation exampleHere is a complete example of how to install the Control Machine Docker image for Bonita Continuous Delivery.Warning: This example uses fake AWS credentials and SSH private key… :-)Assuming you have a bonita-continuous-delivery_1.0.0.tar.gz archive in your $HOME directory:$ cd $HOME$ tar xzf bonita-continuous-delivery_1.0.0.tar.gz$ cd bonita-continuous-delivery_1.0.0/docker$ gunzip -c bcd-controller_1.0.0.tar.gz | docker load[...]Loaded image: bonitasoft/bcd-controller:1.0.0Loaded image: bonitasoft/bcd-controller:latest$ cd $HOME$ ls -nhtotal 418Mdrwxrwxr-x 12 1000 1000 4,0K juil.  6 11:34 bonita-continuous-delivery_1.0.0-rw-rw-r--  1 1000 1000 418M juil.  6 11:34 bonita-continuous-delivery_1.0.0.tar.gz$ cat ~/.boto[Credentials]aws_access_key_id = AKO9PHAI7YOSHAEMOHS6aws_secret_access_key = aicheeChe8Koh4aeSh3quum4tah8cohku3Hi8Eir$ ls -n ~/.ssh/bonita_us-west-2.pem-rw------- 1 1000 1000 1692 jul. 6 11:36 ~/.ssh/bonita_us-west-2.pem$ docker run --rm -ti --hostname control_machine --name bcd-controller -v ~/.boto:/home/bonita/.boto -v ~/bonita-continuous-delivery_1.0.0:/home/bonita/bonita-continuous-delivery -v ~/.ssh/bonita_us-west-2.pem:/home/bonita/.ssh/bonita_us-west-2.pem bonitasoft/bcd-controller /bin/bashbonita@control_machine:~$bonita@control_machine:~$ cd bonita-continuous-deliverybonita@control_machine:~/bonita-continuous-delivery$Use Bonita Continuous Delivery solutionWe provide a BCD Command Line Interface (CLI) to execute Bonita Continuous Delivery commands.The BCD CLI is directly available as a bcd command when using the bonitasoft/bcd-controller Docker image.The bcd command must be launched from the bonita-continuous-delivery directory where Bonita Continuous Delivery Ansible playbooks are located.You can call the bcd command with the --help option to get available options and commands:bonita@control_machine:~$bonita@control_machine:~$ cd bonita-continuous-deliverybonita@control_machine:~/bonita-continuous-delivery$ bcd --helpUsage: bcd [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...  Bonita Continuous Delivery CLI.Options:  -s, --scenario PATHYAML scenario file (required)  -y, --yes  Execute action without confirmation prompt  -v, --verbose  Enable Ansible verbose mode  --nocolor  Turn output colorization off  -e, --extra-vars TEXT  Extra vars for Ansible (multiple) - Variables are passed using the key=value syntax.  -h, --help Show this help messageCommands:  statusShow the platform status  createCreate AWS instances  deployDeploy Bonita stack  undeploy  Undeploy Bonita stack  destroy   Destroy AWS machines (EC2 instances)",
      "url": " /bcd/1.0/tutorials/quickstart",
      "author": "",
      "categories": "Tutorials"
    }
    ,
  

    "bcd-1-0-tutorials-troubleshooting-guide": {
      "title": "Troubleshooting guide",
      "content"     : "Troubleshooting guideIf you encounter issues during the usage of BCD due to a bad configuration or a network problem, it’s interesting to know that you could be able to simply relaunch your command (create, deploy) after fixing the configuration or the network and it should resume from where it was.Common issuesInvalidAMIID.NotFound and InvalidSubnetID.NotFoundAccessing Bonita logsDebugging Ansible FactsAccessing Ansible LogsCommon issuesInvalidAMIID.NotFound and InvalidSubnetID.NotFoundIf while you launch a create command in order to create instances on AWS you get errors like these:[...]InvalidAMIID.NotFound: The image id &#39;[ami-fc4f5e85]&#39; does not exist[...]Error launching source instance: InvalidSubnetID.NotFound: The subnet ID &#39;subnet-ab123456&#39; does not exist[...]You should check that ec2_subnet_ids and aws_ami correspond to the region set into ec2_region.You may also check that rights linked to your AWS credentials (.boto or .aws) correspond to the actions in your scenario.Accessing Bonita logsIn order to troubleshoot issues you may need to consult Bonita logs.To do so, first you need to identify the target server where the Bonita container is running.It’s possible through the bcd status command:bcd -y -s scenarios/myscenario.yml status[...][10:44:12.802] TASK [List Docker containers.] **************************************************************************************************[...]IP: 54.191.90.85FQDN: ec2-54-191-90-85.us-west-2.compute.amazonaws.comDocker running containers--CONTAINER IDIMAGE  CREATED STATUS  NAMES5d73a2446245bonitasoft/bonita-subscription:7.6.2   6 minutes ago   Up 6 minutesbonita8081[...]Then you will need to connect on this server (either through the IP or FQDN) using ssh.ssh -i ~/.ssh/my_key.pem ubuntu@54.191.90.85You can now display the logs using:docker logs bonita8081If you want to copy all the logs (bonita, catalina) you can use docker cp:docker cp bonita8081:/opt/bonita/BonitaSubscription-7.6.2-Tomcat-8.5.23/server/logs/ /tmp/Then you will be able to retrieve all the files through a scp:scp -i ~/.ssh/my_key.pem ubuntu@54.191.90.85:/tmp/logs /tmp/Debugging Ansible FactsAnsible facts are local variables registered in hosts. It is possible to save them in JSON files with the setup command.$ cd bonita-continuous-delivery$ bcd -y -s scenarios/myscenario.yml create deploy$ ansible all -vv -i inventory/ec2/ec2_wrapper.sh -m setup -u ubuntu --private-key=~/.ssh/my_key.pem --tree tmp_facts/This command will identify every EC2 instance (depending of bcd_stack_id set into ec2.ini by the last bcd deploy command) and put its facts into the tmp_facts directory.Accessing Ansible LogsIn order to troubleshoot issues, you may need to consult Ansible logs.By default, the path of the log is /var/log/ansible.log in your Docker container. You can change this location modifying the variable log_path in the Ansible configuration file located in ansible.cfg.If you want to persist the log, you can add a volume in when you run docker run command like$ docker run --rm -t -i --name bcd-controller -v &amp;lt;local_path_to_.boto&amp;gt;:/home/bonita/.boto -v &amp;lt;local_path_to_bonita-continuous-delivery_folder&amp;gt;:/home/bonita/bonita-continuous-delivery -v &amp;lt;local_path_to_ssh_private_key&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt; -v &amp;lt;local_path_to_your_ansible_log&amp;gt;:/var/log/ansible.log bonitasoft/bcd-controller /bin/bash",
      "url": " /bcd/1.0/tutorials/troubleshooting_guide",
      "author": "",
      "categories": "Tutorials"
    }
    ,
  

    "bcd-2-0-bcd-services-and-scenarios-bcd-cli": {
      "title": "Command-line interface",
      "content"     : "BCD command-line interfaceOn this page you will find detailed information about the BCD CLI with usage examples and reference.  RequirementsUsage examplesMulti command chainingCommand-line referenceRequirements  First, the bcd command requires that the BCD_HOME environment variable is set.By default BCD_HOME is set to /home/bonita/bonita-continuous-delivery in the controller container.  Next, the bcd command takes a mandatory option called scenario through the -s / --scenario command line option.This option expects an existing relative or absolute path to a BCD YAML scenario file.The BCD scenario path can also be specified through the BCD_SCENARIO environment variable, hence allowing to skip the -s / --scenario command line option.  Finally, the BCD CLI expects to find Bonita version-specific dependencies in the $BCD_HOME/dependencies directory. This directory must contain:  bonita-subscription_*.tar.gz - (Mandatory) The Bonita Docker image archive  bonita-la-builder-*-exec.jar - (Mandatory) The Bonita Living Application Builder library  bonita-sp-*-maven-repository.zip - (Optional) The Bonita Maven repository zip if required by your Living Application workspace.  Usage examplesRunning the create subcommand of the stack command with scenario command-line option:$ bcd -s scenarios/uswest2_cluster.yml stack createRunning the deploy subcommand of the stack command with scenario command-line option and overridden mail_notification variable:$ bcd -s scenarios/vagrant_single.yml -e mail_notification=no -y stack deployRunning the destroy subcommand of the stack command with BCD_SCENARIO environment variable and subcommand --dry-run option:$ export BCD_SCENARIO=scenarios/uswest2_performance.yml$ bcd stack destroy --dry-runRunning the build subcommand of the livingapp command with BCD_SCENARIO environment variable and subcommand -p and -e options:$ export BCD_SCENARIO=scenarios/euwest1_performance.yml$ bcd livingapp build -p path/to/livingapp-repo -e QualificationRunning the version command which does not require a scenario file:$ bcd versionMulti command chainingThe BCD CLI allows to invoke more than one command in one go. This is useful to chain commands as a pipeline.If one command fails then bcd stops executing any subsequent command it may have.Examples:Running create then deploy subcommands of the stack command:$ bcd -s scenarios/uswest2_cluster.yml -y stack create deployRunning build then deploy subcommands of the livingapp command:$ bcd -s scenarios/vagrant_single.yml --yes livingapp build -p path/to/livingapp-repo -e Qualification deployCommand-line referenceThis section describes the comprehensive usage information for the bcd command.You can also see this information by running bcd --help and bcd [SUBCOMMAND] --help - where SUBCOMMAND is in [livingapp, stack] - from the command line.  bcd  Bonita Continuous Delivery CLI.bcd [OPTIONS] COMMAND [ARGS]...Options  -v, --verbose  Enable Ansible verbose mode-y, --yes  Execute action without confirmation prompt--nocolor  Turn output colorization off-s, --scenario &amp;lt;scenario&amp;gt;  YAML scenario file path - Optional if BCD_SCENARIO environment variable is defined.-e, --extra-vars &amp;lt;extra_vars&amp;gt;  Extra vars for Ansible (multiple) - Variables are passed using the key=value syntax.-h, --help  Show this help message--version  Show the version and exit.livingappManage Bonita Living Application  bcd livingapp [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...  Options  -h, --help  Show this help messagebuild  Build Bonita Living Applicationbcd livingapp build [OPTIONS]Options  -p, --path &amp;lt;path&amp;gt;  Bonita Living Application workspace path-e, --environment &amp;lt;environment&amp;gt;  Name of the process configuration environment as defined in Bonita Studio-X, --debug  Enable debug mode-h, --help  Show this help messagedeploy  Deploy Bonita Living Applicationbcd livingapp deploy [OPTIONS]Options  -p, --path &amp;lt;path&amp;gt;  Bonita Living Application file path-X, --debug  Enable debug mode-h, --help  Show this help message  stackManage Bonita stack (infrastructure)  bcd stack [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...  Options  -h, --help  Show this help messagecreate  Create AWS instancesbcd stack create [OPTIONS]Options  -d, --dry-run  Show an execution plan only-h, --help  Show this help messagedeploy  Deploy Bonita stack (creates Docker containers)bcd stack deploy [OPTIONS]Options  -h, --help  Show this help messagedestroy  Destroy AWS machines (EC2 instances)bcd stack destroy [OPTIONS]Options  -d, --dry-run  Show an execution plan only-h, --help  Show this help messagestatus  Show the platform statusbcd stack status [OPTIONS]Options  -h, --help  Show this help messageundeploy  Undeploy Bonita stack (removes Docker containers)bcd stack undeploy [OPTIONS]Options  -h, --help  Show this help message  versionShow BCD version information  bcd version [OPTIONS]  Options  -h, --help  Show this help message",
      "url": " /bcd/2.0/bcd-services-and-scenarios/bcd_cli",
      "author": "",
      "categories": "BCD services and scenarios"
    }
    ,
  

    "bcd-2-0-bcd-services-and-scenarios-bcd-controller": {
      "title": "Controller Docker image",
      "content"     : "BCD controller Docker imageThe BCD controller image provides a ready-to-use environment to launch Bonita Continuous Delivery CLI and Ansible playbooks.  InstallationUsageStarting a BCD controller with docker runStarting a BCD controller with docker-compose runInstallationA pre-built BCD controller image is provided with BCD deliverable as a bcd-controller_&amp;lt;version&amp;gt;.tar.zip archive. It is located in the bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker directory.Load this image into Docker engine as follows:$ cd bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker$ unzip bcd-controller_&amp;lt;version&amp;gt;.tar.zip$ docker load -i bcd-controller_&amp;lt;version&amp;gt;.tarLoaded image: bonitasoft/bcd-controller:&amp;lt;version&amp;gt;Loaded image: bonitasoft/bcd-controller:latestUsageTo enter the BCD controller environment, a Docker container has to be started on your control host using the BCD controller image.Besides the following files have to be bind mounted from the control host to make them available to the BCD controller container:  /host/path/to/bonita-continuous-delivery_&amp;lt;version&amp;gt; (mounted as /home/bonita/bonita-continuous-delivery) - This directory provides BCD Ansible playbooks and is known as the BCD_HOME directory.This file is required for Provisioning. It is not required for Living App management.&amp;lt;/div&amp;gt;  ssh_private_key (mounted as /home/bonita/.ssh/ssh_private_key) - The ssh_private_key file is the SSH private key used to connect to your target machines. For AWS, this is the private part of your EC2 key pair. This file should only be accessible from your user (chmod 600 ~/.ssh/ssh_private_key).  AWS credentials are required for Provisioning on AWS. It is not required for Living App management.&amp;lt;/div&amp;gt;  .boto (mounted as /home/bonita/.boto) - The .boto file contains AWS credentials used to make programmatic calls to AWS. Indeed dynamic Amazon EC2 inventory management for Ansible runs on top of Boto. The content of a .boto file is as follows:[Credentials]  aws_access_key_id = &amp;lt;YOUR_AWS_ACCESS_KEY&amp;gt;  aws_secret_access_key = &amp;lt;YOUR_AWS_SECRET_ACCESS_KEY&amp;gt;  However AWS credentials can be provided in other ways, for instance with AWS single sign-on.Once the required files are prepared, the BCD controller container can be started in different ways described hereafter.Starting a BCD controller with docker runThe first method to start a BCD Controller Docker container on the control host is to use the docker run command.Example:$ docker run --rm -t -i --name bcd-controller -v &amp;lt;host_path_to_.boto&amp;gt;:/home/bonita/.boto -v &amp;lt;host_path_to_bonita-continuous-delivery_folder&amp;gt;:/home/bonita/bonita-continuous-delivery -v &amp;lt;host_path_to_ssh_private_key&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt; bonitasoft/bcd-controller /bin/bashStarting a BCD controller with docker-compose runThe BCD controller container can also be created and started using Docker Compose. This method enables to configure bind mount volumes in a docker-compose.yml file instead of through command-line options.Example:Here is a docker-compose.yml file example that you can create in your BCD_HOME directory.version: &quot;3.2&quot;services:  bcd:image: bonitasoft/bcd-controllerhostname: bcd-controllerstdin_open: truetty: truecommand: /bin/bashworking_dir: /home/bonita/bonita-continuous-deliveryvolumes:  - .:/home/bonita/bonita-continuous-delivery  - &amp;lt;host_path_to_.boto&amp;gt;:/home/bonita/.boto  - &amp;lt;host_path_to_ssh_private_key&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt;Then start the BCD controller container interactively with:$ docker-compose run --rm bcd",
      "url": " /bcd/2.0/bcd-services-and-scenarios/bcd_controller",
      "author": "",
      "categories": "BCD services and scenarios"
    }
    ,
  

    "bcd-2-0-bcd-services-and-scenarios-scenarios": {
      "title": "Scenario file reference",
      "content"     : "BCD Scenario referenceScenarios enable you to define your infrastructure and Bonita stack. A scenario is a YAML Ansible variable file that BCD injects to the underlying Ansible playbooks. Its syntax basically follows Ansible’s YAML syntax.The variables described in a scenario have precedence over those defined in the playbooks or the group vars. It is still possible to overload scenario variables with --extra-vars declaration in the bcd command line. For instance overloading bonita_version can be interesting if you want to test multiple versions of Bonita without duplicating scenario files.An example scenario file named uswest_performance.yml.EXAMPLE is provided in the scenarios directory. Use this example to customize your scenario and save it with a .yml file extension.Core variablesAWS provider variablesBonita variablesLicensing variablesEmail notification variablesCore variablesThese are general variables used while provisioning your platform.Name  Mandatory  Default  Description  Sample  bcd_provider  Y  -  Infrastructure provider. Choose between aws and static_inventory. With aws provider, BCD may create and destroy EC2 instances of the Bonita stack.  aws  bcd_stack_id  Y  -  Bonita stack identifier used to group machines by stack membership. For AWS deployments the characters allowed are limited to letters, numbers and underscore.  uswest2_test  bcd_inventory  N  -  Ansible inventory path required when bcd_provider is static_inventory. Example static inventories are provided in the ansible/inventory/vagrant directory.  ansible/inventory/vagrant/1-machine/inventory  bonita_on_single_host  N  false  Set to True when all containers of the Bonita stack is deployed on a single host.  true  configuration  Y  -  Configuration filename used to group variables for common deployment types. The corresponding YAML file must exist in the ansible/vars directory.  aws_vars  ansible_ssh_user  N  ubuntu  SSH user used to connect to target hosts.  ubuntu  ansible_private_key_file  Y  -  Path to the private SSH key used to connect to target hosts.  ~/.ssh/ABC_us-west-2.pem  AWS provider variablesThe following variables are specific to AWS deployments ie. when bcd_provider is set to aws.Name  Mandatory  Default  Description  Sample  ec2_region  Y  -  AWS region.  us-west-2  ec2_security_group  Y  -  Security group id for the target instances.  sg-944888f1  ec2_security_group_name  Y  -  Security group name for the target instances.  default  ec2_subnet_ids  Y  -  Subnet id for the target instances.  subnet-aa14e0cf  ec2_keypair  Y  -  Key pair name for the target instances. Linked to ansible_private_key_file.  jenkins_ansible_us-west-2  ec2_discovery_iam_role  N  -  Name of the IAM role to attach to EC2 instances to allow Hazelcast EC2 auto-discovery. This is MANDATORY when deploying a Bonita cluster on AWS with BCD.  ClusterBCD  ec2_vpc_destination_variable  N  -  Type of network address the EC2 dynamic inventory script should use. For instance, if you are running the BCD controller from outside EC2, the vpc_destination_variable parameter should be set to ip_address. If you are running the BCD controller from within EC2, the vpc_destination_variable parameter should be set to private_ip_address.  ip_address  boto_path  N  ~/.boto  Path to the Boto file with the AWS credentials.  ~/.boto  rds  N  false  Use an existing AWS RDS database instance. By default this parameter is set to false to create an EC2 instance for Bonita database.  true  aws_ami  Y  -  Common AMI for all EC2 instances. Depends on AWS region. Should be Ubuntu 14.04 (trusty) or Ubuntu 16.04 (xenial) and ebs-ssd type.  ami-fc4f5e85  aws_database_instance_type  Y  -  EC2 instance type for the database instance.  t2.micro  aws_bonita_instance_type  Y  -  EC2 instance type for the Bonita instances.  t2.micro  aws_load_balancer_instance_type  Y  -  EC2 instance type for the load balancer instance.  t2.micro  aws_assumed_iam_role  N  -  An IAM role can be assumed, so all requests are run as that role. This can be useful for connecting across different accounts, or to limit user access. Set this parameter if you want to assume an IAM role while deploying on AWS. It is useful in an AWS organization with IAM users and multiple AWS accounts. See AWS Organizations  arn:aws:iam::123456789012:role/BCD  Bonita variablesThe following parameters are specific to the Bonita instances.Name  Mandatory  Default  Description  Sample  bonita_version  Y  -  Bonita version. Used for the Docker tar.gz filename  7.7.0  bonita_edition  N  performance  Allowed values: teamwork, efficiency, performancen, community. Used while generating Bonita licenses.  performance  bonita_cluster_mode  N  false  Activates cluster mode for Bonita.  false  bonita_cluster_qty  N  1  Number of instances for Bonita. This variable is also used in EC2 mode for the number of Bonita EC2 instance.  1  bonita_port  N  8081  Bonita HTTP port.  8081  bonita_db_vendor  N  postgres  Database vendor (postgres, mysql, oracle).  postgres  bonita_db_host  N  -  Database host (usually retrieved from inventory).  postgres.a1bac2defghi.us-west-2.rds.amazonaws.com  bonita_db_port  N  5432  Database port.  5432  bonita_db_admin_user  N  postgres  Admin user on database instance.  root  bonita_db_admin_pass  N  mysecretpassword  Admin password on database instance.  password  bonita_http_api  N  false  Activates the Bonita HTTP API.  true  bonita_rest_api_dyn_auth_checks  N  true  Activates dynamic authorization checking on REST API.  false  bonita_published_ports_extra  N  []  A list of additional host-to-container port mappings (&amp;lt;host_port&amp;gt;:&amp;lt;container_port&amp;gt;) to publish.  [ ‘9020:9010’, ‘2222:1111’ ]  Licensing variablesIn order that BCD retrieves Bonita licenses during the deployment of your platform, you need to set the following variables in your scenario:These information are provided by Bonitasoft when you purchase the BCD add-on. Contact your sales representative for further details.Name  Description  Sample  lic_ws_login  Login to Bonitasoft license webservice.  acme  lic_ws_password  Password to Bonitasoft license webservice.  Secr3t  lic_sub_login  Subscription Login provided by Bonitasoft. It has an email address format.  john.doe@acme.com  lic_sub_password  Subscription Password provided by Bonitasoft.  SomePassword  lic_sub_id  Subscription ID provided by Bonitasoft. It’s a string of 15 characters.  a0bA0000001B2Cd  lic_type  Type of license in [production|development|qualification|trial].  trial  lic_name  Full name of the licensee. This field can only contain alphanumeric characters, dashes, underscores and spaces.  John Doe  lic_company  Company name.  ACME Inc  lic_email  Email address where the license will be sent.  john.doe@acme.com  Email notification variablesAn email can be sent automatically with Bonita stack details at the end of the deployment phase. This feature uses Ansible mail module.Name  Mandatory  Default  Description  Sample  mail_notification  N  false  Enable email notification or not.  false  mail_host  N  -  The SMTP server host.  smtp.gmail.com  mail_port  N  -  The SMTP port.  465  mail_username  N  -  The SMTP username.  john.doe@acme.com  mail_password  N  -  The SMTP password.  SomePassword  mail_from  N  -  The email-address the mail is sent from. May contain address and phrase.  john.doe@acme.com (John Doe)  mail_to  N  -  The email-address(es) the mail is being sent to. This is a comma-separated list, which may contain address and phrase portions.  John Doe &amp;lt;john.doe@acme.com&amp;gt;, Suzie Something &amp;lt;sue@example.com&amp;gt;  ",
      "url": " /bcd/2.0/bcd-services-and-scenarios/scenarios",
      "author": "",
      "categories": "BCD services and scenarios"
    }
    ,
  

    "bcd-2-0-getting-started": {
      "title": "Getting started",
      "content"     : "Getting startedThe BCD add-on is provided as a bonita-continuous-delivery_&amp;lt;version&amp;gt;.zip archive.This page describes how to use this archive to start your journey with Bonita Continuous Delivery.Installation guideCommon installation stepsAdditional steps for ProvisioningComplete installation exampleUsing Bonita Continuous Delivery add-onCommand Line InterfaceScenariosInstallation guideIn order to ease your environment setup, we provide a Docker image called BCD Controller image which contains all required dependencies and tools for BCD.Then a BCD Controller container has to be started on the control host, ie. the host from which Bonita Continuous Delivery commands are launched.Common installation stepsFollow these installation steps on your control host.  Make sure Docker is installed as described in the Install Docker documentation.Extract the bonita-continuous-delivery_&amp;lt;version&amp;gt;.zip archive:$ unzip bonita-continuous-delivery_&amp;lt;version&amp;gt;.zipThis step creates a bonita-continuous-delivery_&amp;lt;version&amp;gt; directory which contains:  Bonita Continuous Delivery Ansible playbooks and roles.  A pre-built Docker image for the control host. This Docker image is provided as a bcd-controller_&amp;lt;version&amp;gt;.tar.zip archive located in the bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker directory.Load the bcd-controller_&amp;lt;version&amp;gt;.tar.zip Docker image:$ cd bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker$ unzip bcd-controller_&amp;lt;version&amp;gt;.tar.zip$ docker load -i bcd-controller_&amp;lt;version&amp;gt;.tarLoaded image: bonitasoft/bcd-controller:&amp;lt;version&amp;gt;Loaded image: bonitasoft/bcd-controller:latestThe bonitasoft/bcd-controller Docker image is now available on the control host.Make sure BCD dependencies are present.BCD expects Bonita version-specific dependencies to be present in the bonita-continuous-delivery_&amp;lt;version&amp;gt;/dependencies directory. BCD dependencies are provided separately as a bonita-continuous-delivery-dependencies_&amp;lt;bonita_version&amp;gt;.zip archive.Basically, the following artifacts must be extracted from the bonita-continuous-delivery-dependencies_&amp;lt;bonita_version&amp;gt;.zip archive into the dependencies directory:  bonita-subscription_&amp;lt;bonita_version&amp;gt;.tar.gz  bonita-la-builder-&amp;lt;bonita_version&amp;gt;-exec.jar  bonita-sp-&amp;lt;bonita_version&amp;gt;-maven-repository.zipStart a BCD Controller Docker container on the control host:$ docker run --rm -ti --hostname bcd-controller --name bcd-controller -v &amp;lt;host_path_to_bonita-continuous-delivery_directory&amp;gt;:/home/bonita/bonita-continuous-delivery bonitasoft/bcd-controller /bin/bashThis command bind mounts the bonita-continuous-delivery directory on the control host into the BCD controller container.  You may also start a BCD Controller container using Docker Compose as described in the BCD Controller image detailed documentation.Additional steps for ProvisioningThe following installation steps are required when using BCD for Provisioning Bonita stacks. They are not required for Living Application Management.Licensing prerequisitesWhile provisioning Bonita stacks, BCD automatically retrieves and installs Bonita licenses for the Bonita platform. Therefore, you must have an active Bonitasoft Subscription and a dedicated access to Bonitasoft license service in order to use BCD for Provisioning.Contact your sales representative for more information.AWS PrerequisitesIf you consider deploying to Amazon Web Services (AWS) platform, first read the AWS prerequisites tutorial which describes how to configure AWS for BCD.BCD can create and delete AWS EC2 instances automatically by making programmatic calls to AWS. In order to use this feature, you must provide AWS credentials, for example through a .boto file. The content of a .boto file is as follows:[Credentials]aws_access_key_id = &amp;lt;YOUR_AWS_ACCESS_KEY&amp;gt;aws_secret_access_key = &amp;lt;YOUR_AWS_SECRET_ACCESS_KEY&amp;gt;Then the .boto file has to be mounted from the control host into the BCD controller while starting the container. Add the following option to the docker run command:-v &amp;lt;host_path_to_.boto_file&amp;gt;:/home/bonita/.botoSSH key fileBCD uses SSH to communicate with target machines. Therefore the BCD controller must have access to the related SSH private key file. For AWS, this is the private part of your EC2 key pair. This file must only be accessible from your user (chmod 600 &amp;lt;host_path_to_ssh_private_key_file&amp;gt;).Then the SSH key file has to be mounted from the control host into the BCD controller while starting the container. Add the following option to the docker run command:-v &amp;lt;host_path_to_ssh_private_key_file&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt;Complete installation exampleHere is a complete example of how to install the BCD Controller Docker image.Warning: This example uses fake AWS credentials and SSH private key… :-)Assuming you have a bonita-continuous-delivery_2.0.0.zip archive in your $HOME directory:$ cd $HOME$ unzip bonita-continuous-delivery_2.0.0.zip[...]$ cd bonita-continuous-delivery_2.0.0/docker$ unzip bcd-controller_2.0.0.tar.zip[...]$ docker load -i bcd-controller_2.0.0.tarLoaded image: bonitasoft/bcd-controller:2.0.0Loaded image: bonitasoft/bcd-controller:latestAssuming you have a bonita-continuous-delivery-dependencies_7.7.0.zip archive in your $HOME/bonita-continuous-delivery_2.0.0/dependencies directory:$ cd $HOME/bonita-continuous-delivery_2.0.0/dependencies$ unzip bonita-continuous-delivery-dependencies_7.7.0.zip[...]The next steps of this example are required when using BCD to provision a Bonita stack on AWS.$ cat ~/.boto[Credentials]aws_access_key_id = AKO9PHAI7YOSHAEMOHS6aws_secret_access_key = aicheeChe8Koh4aeSh3quum4tah8cohku3Hi8Eir$ ls -n ~/.ssh/bonita_us-west-2.pem-rw------- 1 1000 1000 1692 jul. 6 11:36 ~/.ssh/bonita_us-west-2.pemFinally here is a sample command to start a BCD controller container:$ docker run --rm -ti --hostname bcd-controller --name bcd-controller -v ~/bonita-continuous-delivery_2.0.0:/home/bonita/bonita-continuous-delivery -v ~/.boto:/home/bonita/.boto -v ~/.ssh/bonita_us-west-2.pem:/home/bonita/.ssh/bonita_us-west-2.pem bonitasoft/bcd-controller /bin/bashbonita@bcd-controller:~$bonita@bcd-controller:~$ cd bonita-continuous-deliverybonita@bcd-controller:~/bonita-continuous-delivery$Using Bonita Continuous Delivery add-onAt this stage of the Getting started guide, you should have a BCD controller container up and running.Command Line InterfaceFrom your BCD controller container, you can now run the bcd command to manage your Bonita stack and Living Application.You can call bcd with the --help option to get available options and commands as follows:bonita@bcd-controller:~/bonita-continuous-delivery$ bcd --helpUsage: bcd [OPTIONS] COMMAND [ARGS]...  Bonita Continuous Delivery CLI.Options:  -v, --verbose  Enable Ansible verbose mode  -y, --yes  Execute action without confirmation prompt  --nocolor  Turn output colorization off  -s, --scenario PATHYAML scenario file path - Optional if `BCD_SCENARIO` environment variable is defined.  -e, --extra-vars TEXT  Extra vars for Ansible (multiple) - Variables are passed using the key=value syntax.  -h, --help Show this help message  --version  Show the version and exit.Commands:  livingapp  Manage Bonita Living Application  stack  Manage Bonita stack (infrastructure)  versionShow BCD version informationRead the BCD Command-line interface page for further information about the BCD CLI usage.ScenariosBCD requires a YAML configuration file called Scenario which describes your infrastructure and the Bonita stack to deploy.An example scenario file named uswest_performance.yml.EXAMPLE is provided in the scenarios directory. Use this example to customize your scenario and save it with a .yml file extension.Read the BCD Scenario reference page for a comprehensive description of scenario variables.",
      "url": " /bcd/2.0/getting_started",
      "author": "",
      "categories": ""
    }
    ,
  

    "bcd-2-0-howtos-how-to-use-bcd-with-data-encrypted": {
      "title": "Use BCD with sensitive data encrypted",
      "content"     : "How to use BCD with sensitive data encryptedBCD involves providing sensitive data like passwords or private credentials through YAML Scenario files. Although you may restrict access to scenario files using file system permissions, it may be advisable to encrypt these sensitive data for even more security.Therefore BCD supports Ansible Vault to encrypt sensitive data. BCD automatically decrypts Vault-encrypted content at runtime when the decryption password is provided.In this tutorial, we will explain how to encrypt files with ansible-vault and how to configure BCD to decrypt these Vault-encrypted data.  Create a Vault password fileA password is required to encrypt/decrypt your sensitive data. BCD requires this password to be stored in a file which path is set in the ANSIBLE_VAULT_PASSWORD_FILE environment variable.  &amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;{:.fa .fa-exclamation-triangle} **Password file permissions**  Ensure permissions on the file are such that no one else can access your password and do not add your password file to source control.The password should be a string stored as a single line in the file.**Example**:  In your BCD controller, create a `vault_pass` file with a **MyV@ultPa55** password and set the `ANSIBLE_VAULT_PASSWORD_FILE` accordingly:```bonita@bcd-controller:~/bonita-continuous-delivery$ echo &quot;MyV@ultPa55&quot; &amp;gt; vault_passbonita@bcd-controller:~/bonita-continuous-delivery$ chmod 600 vault_passbonita@bcd-controller:~/bonita-continuous-delivery$ ls -l $(pwd)/vault_pass -rw-------1 bonita   bonita  12 Apr 30 09:40 /home/bonita/bonita-continuous-delivery/vault_passbonita@bcd-controller:~/bonita-continuous-delivery$ export ANSIBLE_VAULT_PASSWORD_FILE=/home/bonita/bonita-continuous-delivery/vault_pass```  Encrypt your BCD scenario fileAssuming your BCD scenario file contains sensitive data, we are now going to encrypt this file using the ansible-vault encrypt command.Example: In your BCD controller, encrypt your scenarios/myscenario.yml file using the Vault password defined in previous step: bonita@bcd-controller:~/bonita-continuous-delivery$ ansible-vault encrypt scenarios/myscenario.yml Encryption successfulAs a result, the scenarios/myscenario.yml file is Vault-encrypted. It may be safely added to source control as long as the Vault password remains confidential.  &amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;{:.fa .fa-info-circle} **View / Edit / Decrypt**  If you need to view or edit the scenario content, you may use the `ansible-vault view` and `ansible-vault edit` commands respectively.  You may also decrypt your scenario file using the `ansible-vault decrypt` command.  Refer to the [Ansible Vault](https://docs.ansible.com/ansible/latest/user_guide/vault.html) documentation for detailed information about this feature.  Run BCD commands as usualYou may now run BCD commands without any change. BCD and Ansible will automatically decrypt your Vault-encrypted data.  Caveats   You may encrypt several files but the password must be the same for all files you wish to use together at the same time.  Although Ansible supports prompting for a password, BCD only supports a password to be provided through a password file defined by the ANSIBLE_VAULT_PASSWORD_FILE environment variable.",
      "url": " /bcd/2.0/howtos/how_to_use_bcd_with_data_encrypted",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bcd-2-0-howtos-jenkins-example": {
      "title": "Integrate BCD with Jenkins",
      "content"     : "How to integrate BCD with JenkinsThe BCD controller can not only be run interactively, but also within standard Continuous Delivery servers such as Jenkins automation server.The bonita-continuous-delivery_&amp;lt;version&amp;gt;.zip archive provides a jenkins-example directory which contains a minimal working example of a Continuous Delivery platform with Jenkins and BCD.This example will start a pre-configured Jenkins server with a BCD-aware Jenkins slave and ready-to-use Jenkins jobs.It is provided as a Docker Compose project.Therefore you should have Docker and Docker Compose installed on the target host to run this example.This example is provided with Compose file version 3.2 which requires Docker Compose 1.12.0+ and Docker Engine 17.04.0+. Refer to Compose and Docker compatibility matrix and Compose release notes for further details.In this example, a Jenkins slave is created from a Docker image which extends the BCD Controller image. Then an example job is defined as a Jenkins Pipeline job in which bcd commands are invoked.This allows you to easily re-use parts of this example in your own Jenkins instance.Step-by-step run guidePre-configured Jenkins jobsStep-by-step run guideHere is a step-by-step guide to run this example.The following commands are to be executed on the target host where Jenkins is to be installed.  Configure the Docker Compose project.  Rename the docker-compose.override.yml.EXAMPLE file to docker-compose.override.yml (remove the .EXAMPLE extension).  Configure environment and volumes sections and save.Configure initial secrets used by Jenkins and BCD.  Rename the secrets/*Password.EXAMPLE files to secrets/*Password (remove the .EXAMPLE extension).With most Linux distributions, you can do this with the rename command line tool as follows: rename &#39;s/.EXAMPLE//&#39; *.EXAMPLE).  Configure each *Password file with appropriate credentials.Make sure the BCD Controller Docker image is loaded as described in the installation section of the BCD controller Docker image page.  Create and start containers with Docker Compose.$ cd jenkins_example$ docker-compose up -d  As a result Jenkins is up and running on port 9090 of the target host.You can now log-in to Jenkins using one of the pre-configured users:  admin - User with administration rights. Password has been initialized with secrets/adminPassword.  bonita - User with limited rights. Password has been initialized with secrets/bonitaPassword.Important Note: Prepare your BCD scenario and dependencies as usual before using the pre-configured Jenkins jobs.Pre-configured Jenkins jobsOnce authenticated to Jenkins you can now launch pre-configured jobs.This example project provides the following jobs:  bcd-pipeline - this job shows how the BCD CLI can be used to build a Continuous Delivery pipeline for a Bonita Living Application.  bcd-destroy - this job allows to destroy AWS EC2 machines when using BCD with AWS cloud provider.",
      "url": " /bcd/2.0/howtos/jenkins_example",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-living-applications-livingapp-build": {
      "title": "Build a Living App repository",
      "content"     : "How to build a Living App repositoryThis tutorial describes how to build a Bonita Living Application repository from the command line using BCD.A Living Application repository (or Living App repository) contains the artifacts developed in Bonita Studio and the UI Designer. Its content is further described in Bonita’s Workspaces and repositories documentation page.The repository build process allows to generate Bonita deployable artifacts (for instance process .bar files, UI Designer pages .zip files, REST API extensions .zip files).Step-by-step tutorial1. Prepare the repository2. Provide the repository&#39;s build dependencies3. Build the repositoryRepository vs. Builder version compatibilityComplete exampleStep-by-step tutorial1. Prepare the repositoryA Living App repository can be created using Bonita Studio and it can be shared with Git or SVN.So first ensure you have your Living App repository available on your filesystem.For this tutorial, we will use the Bonita Vacation Management example repository publicly available on GitHub.$ cd bonita-continuous-delivery$ git clone https://github.com/bonitasoft/bonita-vacation-management-exampleThis step creates a bonita-continuous-delivery/bonita-vacation-management-example directory which is the Living App repository we are going to build.2. Provide the repository’s build dependenciesThe next step is to provide all dependencies required to build your repository. Hence the following artifatcs must be present in the bonita-continuous-delivery/dependencies directory:bonita-la-builder-&amp;lt;bonita_version&amp;gt;-exec.jarThe Bonita Living Application Builder library. Its version must correspond to the bonita_version variable defined in your BCD scenario. This is the version of the Bonita stack where generated artifacts will be deployed.For instance the bonita-la-builder-7.7.0-exec.jar file must be present to build artifacts meant to be deployed on a Bonita 7.7.0 stack.bonita-sp-*-maven-repository.zipBonita Maven repository zip files if your repository contains REST API extensions. These zip files can be downloaded with your Bonita Subscription on Customer Portal. The version of the Maven repository zip must correspond to the bonita.version property defined in your REST API extension’s pom.xml.3. Build the repositoryBCD is now ready to build your repository using the bcd livingapp build command. From your BCD Controller container, run these commands:$ cd bonita-continuous-delivery$ bcd -s scenarios/euwest1_performance.yml --yes livingapp build -p bonita-vacation-management-example -e QualificationThe build process finally generates a zip package located in the repository’s target repository. The generated archive is named after the repository’s root directory name.For instance with the bonita-vacation-management-example example, a bonita-vacation-management-example/target/bonita-vacation-management-example_&amp;lt;timestamp&amp;gt;.zip file is generated.Refer to the BCD Command-line reference for a complete list of available options for the bcd livingapp build command.Repository vs. Builder version compatibilityThe version of your repository must exactly match the version of the builder library.If versions do not match, the bcd livingapp build command will exit with such a message:[ERROR] Project version (7.7.0) does not match builder version (7.7.1)[13:46:34.469] ERROR: Aborting! Command &amp;lt;livingapp-build&amp;gt; returned non-zero exit code &amp;lt;1&amp;gt;The bcd livingapp build command does not allow to migrate your repository to the builder’s version. Your repository has to be migrated to the appropriate version using Bonita Studio.Complete exampleHere is a complete example of how to build the Bonita Vacation Management example repository for Bonita version 7.7.0.In this example, the REST API extension has a dependency on Bonita 7.6.3.On the control host$ cd bonita-continuous-delivery_2.0.0$ git clone https://github.com/bonitasoft/bonita-vacation-management-example$ ls -nh bonita-vacation-management-exampletotal 60Kdrwxrwxr-x  2 1000 1000 4,0K Mar 29 16:17 applicationsdrwxrwxr-x  2 1000 1000 4,0K Mar 29 16:17 bdmdrwxrwxr-x  2 1000 1000 4,0K Mar 29 16:17 diagramsdrwxrwxr-x  2 1000 1000 4,0K Mar 29 16:17 environementsdrwxrwxr-x  2 1000 1000 4,0K Mar 29 23:29 libdrwxrwxr-x  2 1000 1000 4,0K Mar 29 16:17 organizationsdrwxrwxr-x  2 1000 1000 4,0K Mar 29 16:17 process_configurationsdrwxrwxr-x  2 1000 1000 4,0K Mar 29 16:17 profiles-rw-rw-r--  1 1000 1000  486 Mar 29 16:17 README.mddrwxrwxr-x  3 1000 1000 4,0K Mar 29 16:17 restAPIExtensionsdrwxr-xr-x  6 1000 1000 4,0K Mar 29 23:29 targetdrwxr-xr-x  2 1000 1000 4,0K Mar 29 16:19 web_fragmentsdrwxrwxr-x 11 1000 1000 4,0K Mar 29 16:19 web_pagedrwxr-xr-x 26 1000 1000 4,0K Mar 29 16:19 web_widgetsdrwxrwxr-x  2 1000 1000 4,0K Mar 29 16:17 xsd$ grep &quot;&amp;lt;bonita.version&amp;gt;&quot; bonita-vacation-management-example/restAPIExtensions/tahitiRestApiExtension/pom.xml&amp;lt;bonita.version&amp;gt;7.6.3&amp;lt;/bonita.version&amp;gt;$ ls -nh dependencies total 337M-rw-r--r-- 1 1000 1000  85M Mar 29 12:00 bonita-la-builder-7.7.0-exec.jar-rw-rw-r-- 1 1000 1000 8,7M Mar 29 16:16 bonita-sp-7.6.3-maven-repository.zip-rw-r--r-- 1 1000 1000 253M Mar 29 12:00 bonita-subscription_7.7.0.tar.gz-rw-r--r-- 1 1000 1000  157 Mar 29 11:57 README.md$ grep &quot;bonita_version&quot; scenarios/euwest1_performance.ymlbonita_version: 7.7.0In the BCD controller containerbonita@bcd-controller:~$ cd bonita-continuous-deliverybonita@bcd-controller:~/bonita-continuous-delivery$ bcd -s scenarios/euwest1_performance.yml --yes livingapp build -p bonita-vacation-management-example -e Qualificationbonita@bcd-controller:~/bonita-continuous-delivery$ ls -nh bonita-vacation-management-example/target total 8,1Mdrwxr-xr-x 9 1000 1000 4,0K Mar 29 16:29 bonita-vacation-management-example-rw-r--r-- 1 1000 1000 8,1M Mar 29 16:29 bonita-vacation-management-example_20180329162901.zipdrwxr-xr-x 3 1000 1000 4,0K Mar 29 16:29 bpmndrwxr-xr-x 2 1000 1000 4,0K Mar 29 16:29 generated-jarsdrwxr-xr-x 3 1000 1000 4,0K Mar 29 16:29 ui-designer",
      "url": " /bcd/2.0/howtos/manage-bonita-living-applications/livingapp_build",
      "author": "",
      "categories": "Howtos, Manage Bonita Living Applications"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-living-applications-livingapp-build-and-deploy": {
      "title": "Build and deploy (Best Practices)",
      "content"     : "How to build and deploy Living Apps (Best Practices)Bonita Continuous Delivery enables you to easily build and deploy a Bonita Living Applications on a running Bonita platform.It uses the Bonita Living Application Builder and the Bonita Living Application Deployer.In the following, we present best practices and various uses cases to let you easily build and deploy your Bonita Living Application repository.All examples assume that:  you have cloned the demo Bonita Vacation Management example repositoryGitHub repository as described in the Bonita Living Application Builder documentation  you have already defined a scenario file called build_and_deploy.yml stored in the BCD scenarios directory  you already have a Bonita stack up and running, defined by the build_and_deploy.yml scenario fileIf you want to deploy into a Bonita platform running on an existing machine, you can find an example of a scenario file bonita-continuous-delivery_2.0.0/scenario/build_and_deploy.yml.EXAMPLE with its inventory file in bonita-continuous-delivery_2.0.0/ansible/inventory/static-inventory/livingapp-build-deploy-static-inventory.EXAMPLE.Best practices about repositoriesOne repository per projectUse versioning to manage your historyBuild and deploy straightBuild and select what to deployBuild and select how to deploy parts of the Application ArchiveBest practices about repositoriesThe Bonita Living Application Builder is made to build an entire Bonita repository.It is usually pretty fast, but depending on the size of your repository, the amount of artifacts to build, it can become longer. To avoid such situations, there is some best practices about Bonita repositories that you should respect.One repository per projectA Bonita repository should only contain artifacts related to a given project.For example, if you want to use Bonita to build a loan application and a leave request application, we strongly advise you to manage those two projects in two different repositories. It will allow you to build, deploy and test each project separately easily using Bonita Continuous Delivery.A repository should only contain the resources and the dependencies required to build and deploy the Living Applications of the project. Resources not used by the Living Applications should not be in the repository of the project.Use versioning to manage your historyDuring the life-cycle of a project, resources are brought to evolve. You may need to perform important changes on a process or on a Rest API extension for example. The best way to track the evolution is to use versioning.Before to perform an important change on a resource, make sure to save the current state of your repository by creating a tag for example if you are using Git. Then you can increase the version of your resource and perform the change, knowing that you can easily do a rollback if needed.We do not recommend to duplicate the resource in your repository. If you start to manage your versions this way, your repository will get bigger and bigger, and the time required by the Bonita Living Application Builder to build your repository will increase. Moreover, it is really painful to work on a repository containing all the history of a project, it can lead to many confusions and errors during the development ( dependency issues …).The recommended way is definitively to keep the latest version of each resources in the working repository, and the history on your Version Control System.Since the version 7.7.0 of Bonita, the popular Version Control System Git is integrated in Bonita Studio. It is a fine way to manage properly the versioning of your projects. The Bonita documentation provides an example on how to share a repository on GitHub.Build and deploy straightThis is the simplest use case: you want to build a Bonita repository and deploy all associated resources.To do so, you only have to pass the repository path to the build command and chain a deploy command without path parameterlike in the following:$ bcd -y -s &amp;lt;path/to/scenario&amp;gt; livingapp build -p &amp;lt;path/to/bonita/repository&amp;gt; deployThis command will first build the Bonita repository. The output of the build is a zip file. It is located in the target directory, created by the builder. This zip file corresponds to the Application Archive used by the deployer. It contains all the resources built from the input repository.In a second time, the deployer deploys all those resources on the running Bonita platform.Build and select what to deploySometimes, you may need to perform some actions between the build phase and the deploy phase. You may want to deploy only a subpart of the repository that has been built, or add some external resources in the application archive to deploy. Here are some hints on how to do it.The idea is always the same:  Build a Bonita repository with BCD  Update the application archive created by the builder  Deploy the updated application archiveFirst, we build the Bonita repository:bcd -y -s &amp;lt;path/to/scenario&amp;gt; livingapp build -p &amp;lt;path/to/bonita/repository&amp;gt;The build operation creates a target directory in the Bonita repository. Let’s move to this directory:cd &amp;lt;path/to/bonita/repository&amp;gt;/targetThis directory contains built artifacts, including the application archive we want to update. Keep in mind that the deployer can take a zip file or a directory as input. So, we are going to unzip the raw application archive, in a to-deploy directory:unzip -d to-deploy &amp;lt;bonita-repository-name&amp;gt;_&amp;lt;timestamp&amp;gt;.zipA new directory to-deploy has been createda and it contains all the built artifacts from your Bonita repository.You can perform some actions on the content of this directory to customize your deployment. Here are some use cases:Example 1: I only want to deploy the Business Data Model from my Bonita repositoryIn this example, we only want to deploy the BDM. The to-deploy directory should contain a subfolder bdm. We simply need to tell the deployer to deploy this subfolder as follows:bcd -y -s &amp;lt;path/to/scenario&amp;gt; livingapp deploy -p &amp;lt;path/to/bonita/repository&amp;gt;/target/to-deploy/bdmExample 2: I only want to deploy all the resources from my Bonita repository except applicationsThe to-deploy directory should contain a subfolder applications. We simply need to delete this subfolder, then tell the deployer to deploy the to-deploy directory as follows:rm -rf &amp;lt;path/to/bonita/repository&amp;gt;/target/to-deploy/applications/bcd -y -s &amp;lt;path/to/scenario&amp;gt; livingapp deploy -p &amp;lt;path/to/bonita/repository&amp;gt;/target/to-deployExample 3: I want to add some custom pages in the resources to deployThis use case is a bit more advanced. Imagine that your Bonita repository is stored on a given Git repository and your custom pages used by your applications in an other Git repository. You will have to build your Bonita repository as described above, then to retrieve your custom pages (Git clone…) and to add them to the application archive to deploy.Build and select how to deploy parts of the Application ArchiveAs described in the Bonita Living Application Deployer documentation, it is possible to pass to the deployer a deployment descriptor file. This file must be called deploy.json and be at the root of the application archive.The deployment descriptor file is used to specify which resources have to be deployed, and with which policy. It is an alternative way to select a sub part of the application archive to deploy.An interesting way to use it is to store some deployment descriptor files in your Bonita repository, one for each ‘build and deploy’ scenario you want to perform. Between the build and the deploy  phase, just move the fine deployment descriptor at the root of your application archive, as described above.The format of the deployment descriptor file is not friendly to use. It might evolve in further versions.",
      "url": " /bcd/2.0/howtos/manage-bonita-living-applications/livingapp_build_and_deploy",
      "author": "",
      "categories": "Howtos, Manage Bonita Living Applications"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-living-applications-livingapp-deploy": {
      "title": "Deploy Living App artifacts",
      "content"     : "How to deploy Living App artifactsThis tutorial describes how to deploy Bonita Living Application artifacts from the command line using BCD.  How it worksDeployment conceptsApplication Archive structureDeployment Descriptor fileSupported PoliciesCaveatsHow to useHow it worksThis section provides detailed information of Bonita artifacts deployment with BCD.Deployment conceptsFirst, here are the types of artifacts that can be deployed:  applications  business data model  business data model access controls  layouts  organizations  pages  processes  profiles  REST API extensions  themesThe deployment entry point is called an Application Archive. It consists of all artifacts to be deployed and an optional configuration file called Deployment Descriptor. This file describes which Policy should be applied while deploying each artifact.Application Archive structureThe Application Archive can be a directory or a zip file. It may contain a Deployment Descriptor in the form of a deploy.json file. If not provided, then a Deployment Descriptor is generated in-memory using the following rules:  the type of artifact is determined from the nature of each file  a default policy is applied for each supported artifact to deployHere is an example of Application Archive structure:bonita-vacation-management-example├── applications│   └── Application_Data.xml├── bdm│   └── bdm.zip├── deploy.json├── extensions│   └── tahitiRestApiExtension-1.0.0.zip├── organizations│   └── ACME.xml├── pages│   └── page_ExampleVacationManagement.zip├── processes│   ├── Cancel Vacation Request--1.4.1.bar│   ├── Initiate Vacation Available--1.4.1.bar│   ├── Modify Pending Vacation Request--1.4.1.bar│   ├── New Vacation Request--1.4.1.bar│   └── Remove All Business Data--1.4.1.bar└── profiles└── default_profile.xml  Note: if you provide several artifacts for a resource which is supposed to be single (for instance Business Data Model, Organization), only one of the artifacts will be deployed. There is no guaranty about which file is kept so please avoid this situation to ensure deployment reproducibility.Deployment Descriptor fileThe Deployment Descriptor file must be a valid JSON file named deploy.json and it must be located at the root of the Application Archive.Each artifact to deploy must be defined with the following attributes:  file: (Mandatory) the relative path to the artifact in the Application Archive  policy: (Optional) the name of the policy to apply in case the same artifact is already present in the target Bonita platform. If omitted, then the default policy of the artifact’s type will be applied.Example of Deployment Descriptor file{  &quot;organization&quot;: {&quot;file&quot;: &quot;organizations/ACME.xml&quot;,&quot;policy&quot;: &quot;MERGE_DUPLICATES&quot;  },  &quot;profiles&quot;: [{  &quot;file&quot;: &quot;profiles/default_profile.xml&quot;,  &quot;policy&quot;: &quot;REPLACE_DUPLICATES&quot;},{  &quot;file&quot;: &quot;profiles/custom_profile.xml&quot;,  &quot;policy&quot;: &quot;REPLACE_DUPLICATES&quot;}  ],  &quot;processes&quot;: [{  &quot;file&quot;: &quot;processes/New Vacation Request--1.4.1.bar&quot;,  &quot;policy&quot;: &quot;IGNORE_DUPLICATES&quot;},{  &quot;file&quot;: &quot;processes/Initiate Vacation Available--1.4.1.bar&quot;}  ],  &quot;restAPIExtensions&quot;: [{  &quot;file&quot;: &quot;extensions/tahitiRestApiExtension-1.0.0.zip&quot;,}  ],  &quot;pages&quot;: [{  &quot;file&quot;: &quot;pages/page_ExampleVacationManagement.zip&quot;}  ],  &quot;layouts&quot;: [{  &quot;file&quot;: &quot;layouts/customLayout1.zip&quot;},{  &quot;file&quot;: &quot;layouts/customLayout2.zip&quot;}  ],  &quot;themes&quot;: [  {&quot;file&quot;: &quot;themes/customTheme1.zip&quot;  },  {&quot;file&quot;: &quot;themes/customTheme2.zip&quot;  }],  &quot;applications&quot;: [{  &quot;file&quot;: &quot;applications/Application_Data.xml&quot;,  &quot;policy&quot;: &quot;REPLACE_DUPLICATES&quot;}  ],  &quot;businessDataModel&quot;: {&quot;file&quot;: &quot;bdm/bdm.zip&quot;  },  &quot;bdmAccessControl&quot;: {&quot;file&quot;: &quot;bdm/bdm-access-control.xml&quot;  }}Supported Policies  Applications:  FAIL_ON_DUPLICATES: deployment fails if the Application or ApplicationPage already existsREPLACE_DUPLICATES: (default) if the Application or ApplicationPage already exists, the existing one is deleted and the new one is deployed  Organization:  FAIL_ON_DUPLICATES: if an item already exists, the deployment fails and is reverted to the previous stateIGNORE_DUPLICATES: existing items are keptMERGE_DUPLICATES: (default) existing items in the current organization are updated to have the values of the item in the imported organization  Processes:  FAIL_ON_DUPLICATES: if the process already exists (same name and version), the deployment failsIGNORE_DUPLICATES: only deploys a process when it does not already exist (same name and version)REPLACE_DUPLICATES: (default) if the process already exists (same name and version), the existing one is deleted and the new one is deployed. As a reminder, deleting a process means: disable the process, delete all related cases and delete the process  The following artifacts are used with implicit policies. It means that you do not have to declare those policies in the Deployment Descriptor file. There is no other policy available for those artifacts.  Business Data Model: REPLACE_DUPLICATESBDM access control: REPLACE_DUPLICATESLayouts: REPLACE_DUPLICATESPages: REPLACE_DUPLICATESProfiles: REPLACE_DUPLICATESREST API extensions: REPLACE_DUPLICATESThemes: REPLACE_DUPLICATES  Caveats  Prior to deploying a Business Data Model, the Bonita tenant is paused. So a downtime of the tenant occurs. The tenant is resumed after the deployment of the BDM.  REST API extension authorizations are not configured as part of the deployment process. They have to be configured while provisioning the Bonita platform. See how to configure REST API authorization with BCD.How to useUse the bcd livingapp deploy command to deploy Living App artifacts:bcd -s &amp;lt;scenario&amp;gt; livingapp deploy -p &amp;lt;path&amp;gt;where:  &amp;lt;scenario&amp;gt; is the path to the BCD scenario which defines the target Bonita stack. Artifacts will be deployed using tenant credentials defined by this scenario (bonita_tenant_login and bonita_tenant_password variables).  &amp;lt;path&amp;gt; is the path to the Application Archive to deploy (file or directory).You can add a –debug option to enable debug mode and increase verbosity.  Refer to the BCD Command-line reference for a complete list of available options for the bcd livingapp deploy command.Complete example:Here is how to deploy artifacts of the Bonita Vacation Management example Living App.Assuming that:  artifacts have been built and that a bonita-vacation-management-example_20180329162901.zip Application Archive zip file has been generated in the bonita-vacation-management-example/target directory  a Bonita stack is up and running as defined in a scenarios/euwest1_performance.yml scenario fileIn the BCD controller container:bonita@bcd-controller:~$ cd bonita-continuous-deliverybonita@bcd-controller:~/bonita-continuous-delivery$ ls -nh bonita-vacation-management-example/target total 8,1Mdrwxr-xr-x 9 1000 1000 4,0K Mar 29 16:29 bonita-vacation-management-example-rw-r--r-- 1 1000 1000 8,1M Mar 29 16:29 bonita-vacation-management-example_20180329162901.zipdrwxr-xr-x 3 1000 1000 4,0K Mar 29 16:29 bpmndrwxr-xr-x 2 1000 1000 4,0K Mar 29 16:29 generated-jarsdrwxr-xr-x 3 1000 1000 4,0K Mar 29 16:29 ui-designerThen artifacts can be deployed using the generated zip file as follows:bonita@bcd-controller:~/bonita-continuous-delivery$ bcd -s scenarios/euwest1_performance.yml --yes livingapp deploy -p bonita-vacation-management-example/target/bonita-vacation-management-example_20180329162901.zipArtifacts can also be deployed providing the Application Archive directory as follows:bonita@bcd-controller:~/bonita-continuous-delivery$ bcd -s scenarios/euwest1_performance.yml --yes livingapp deploy -p bonita-vacation-management-example/target/bonita-vacation-management-example",
      "url": " /bcd/2.0/howtos/manage-bonita-living-applications/livingapp_deploy",
      "author": "",
      "categories": "Howtos, Manage Bonita Living Applications"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-stacks-aws-organizations": {
      "title": "Assume IAM role within AWS Organizations",
      "content"     : "Assume IAM role within AWS OrganizationsAWS Organizations offers policy-based management for multiple AWS accounts.If you use an Organization with IAM users (for SSO, see Single Sign-On to AWS Using G Suite), you will have to assume a specific role on the target account. To do so you will still put your aws_access_key_id and aws_secret_access_key into the .boto or .aws/credentials file.Then you will just have to modify the scenario in order to set the corresponding role arn, for example :aws_assumed_iam_role: arn:aws:iam::123456789012:role/BCDNote:  123456789012 represents here the target account  BCD represents here the role on this accountIt implies that you should have created the corresponding role with proper rights. To do so you just have to follow the How to configure Amazon Web Services (AWS) for BCD and in AWS Setup for BCD section replace the point 5 Create an IAM Group by a creation of the corresponding role attached to the IAM Policies created previously.",
      "url": " /bcd/2.0/howtos/manage-bonita-stacks/aws_organizations",
      "author": "",
      "categories": "Howtos, Manage Bonita stacks"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-stacks-aws-prerequisites": {
      "title": "Configure Amazon Web Services (AWS) for BCD",
      "content"     : "How to configure Amazon Web Services (AWS) for BCDThis tutorial describes how to configure Amazon Web Services (AWS) for BCD.These configuration steps are required to allow BCD to programmatically manage your AWS instances and to be able to connect to your Bonita stack.Sign Up for AWSAWS Setup for BCDDynamic EC2 inventory configurationSign Up for AWSIf you do not have an Amazon Web Services account yet, first sign up as described in this AWS user guide: Sign Up for AWS.AWS Setup for BCDIn order to use Amazon EC2 instances, some configuration steps need to be performed as a prerequisite.The following steps are the basic requirements to set up AWS credentials for Ansible automation.Further configuration instructions for AWS single sign-on can be found on this page.  Create an IAM Policy to grant full access to Amazon EC2 on a specific region (eg. us-west-2)  Policy name: EC2FullAccess_us-west-2  Policy document:{ &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [  {  &quot;Action&quot;: &quot;ec2:*&quot;,  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Resource&quot;: &quot;*&quot;,  &quot;Condition&quot;: {  &quot;StringEquals&quot;: {  &quot;ec2:Region&quot;: &quot;us-west-2&quot;  }  }  } ]}  Create an IAM Policy to allow to describe DB instances and list tags (mandatory for dynamic inventory script).  Policy name: RDSDescribeDBInstances  Policy document:{ &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [  {  &quot;Sid&quot;: &quot;Stmt1498730873000&quot;,  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Action&quot;: [  &quot;rds:DescribeDBInstances&quot;,  &quot;rds:ListTagsForResource&quot;  ],  &quot;Resource&quot;: [  &quot;*&quot;  ]  } ]}  Create an IAM Policy to grant full access to Amazon RDS on a specific region (eg. us-west-2). In order to do it you will need your account id (eg. 012345678901)  Policy name: RDSFullAccess_us-west-2  Policy document:{ &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [  {  &quot;Action&quot;: [  &quot;rds:*&quot;  ],  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Resource&quot;: &quot;arn:aws:rds:us-west-2:012345678901:*&quot;  } ]}  Create an IAM Policy to give PassRole permission in order to be able to associate a specific role with the EC2 instances of a cluster.  Policy name: IAMPassRole  Policy document:{ &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [  {  &quot;Action&quot;: &quot;iam:PassRole&quot;,  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Resource&quot;: &quot;*&quot;  } ]}  Create an IAM Group  Group name: bonita-provisioning  Select the IAM Policies created previouslyFor some usage you may be interested to create a role and attach to it the corresponding policies, see Configure AWS single sign-on or Assume IAM role within AWS Organizations.Create an IAM Policy to allow ec2 instances of a cluster to autodiscover themselves on a specific region (eg. us-west-2).  Policy name: ClusterBCD_us-west-2  Policy document:{ &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [  {  &quot;Action&quot;: [  &quot;ec2:DescribeInstances&quot;  ],  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Resource&quot;: &quot;*&quot;,  &quot;Condition&quot;: {  &quot;StringEquals&quot;: {  &quot;ec2:Region&quot;: &quot;us-west-2&quot;  }  }  } ]} Pay attention that for security reasons, pushing AWS user credentials to EC2 instances (as done with BCD 1.0.x) is no longer supported.  Create an IAM Role for an AWS service  Select EC2 to “Allows EC2 instances to call AWS services on your behalf.”  Select the IAM Policy created previously (ClusterBCD_us-west-2)  Role name: ClusterBCDCreate an IAM User  Access type: Programmatic access  Add user to the IAM group created previously  Download as .csv (or copy) Access key information (Access key ID and Secret access key) for later useNow let’s assume you are using an EC2 region which supports the EC2-VPC platform.Therefore a default VPC and default subnets should already be available.  Create an EC2 Security Group  Security group name: sg_bonita-provisioning  Add an Inbound rule to allow communication between Bonita stack components  Type: All Traffic, Source: &amp;lt;security_group_id_of_sg_bonita-provisioning&amp;gt;Add an Inbound rule to allow Ansible to connect via SSH  Type: SSH, Source: My IPAdd an Inbound rule to allow remote connection to Bonita Tomcat via HTTP  Type: Custom TCP Rule, Port Range: 8081, Source: My IPAdd an Inbound rule to allow remote connection to Bonita databases  Type: Custom TCP Rule, Source: My IP  with bonita_db_vendor: postgres - Port Range: 5432  with bonita_db_vendor: mysql - Port Range: 3306  with bonita_db_vendor: oracle - Port Range: 1521Create an EC2 Key Pair  Note: A key pair is linked to an AWS region  Download the .pem private key file  Ensure private key file permissions: $ chmod 400 &amp;lt;keyfile_basename&amp;gt;.pem  BCD is compatible with official Ubuntu cloud images as EC2 AMI (Amazon Machine Images).Use the Amazon EC2 AMI Locator tools to identify IDs of such images.Dynamic EC2 inventory configurationWhen deploying to AWS, BCD uses dynamic Amazon EC2 inventory with a ec2_wrapper.sh script.This ec2_wrapper.sh script can be further configured with the ec2.ini.j2 template.For instance, if you are running the BCD controller from outside EC2, the vpc_destination_variable parameter should be set to ip_address. If you are running the BCD controller from within EC2, the vpc_destination_variable parameter should be set to private_ip_address.This parameter is managed by the ec2_vpc_destination_variable BCD variable.More information on dynamic EC2 inventory management can be found in this blog post.",
      "url": " /bcd/2.0/howtos/manage-bonita-stacks/aws_prerequisites",
      "author": "",
      "categories": "Howtos, Manage Bonita stacks"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-stacks-aws-sso": {
      "title": "Configure AWS single sign-on",
      "content"     : "How to configure AWS single sign-onAWS allows to integrate numerous Third-Party SAML Solution Providers to implement single sign-on.If you implement this kind of authentication, when you start the BCD Controller container it will no longer be necessary to mount the boto file.$ docker run --rm -t -i --name bcd-controller -v &amp;lt;host_path_to_bonita-continuous-delivery_folder&amp;gt;:/home/bonita/bonita-continuous-delivery -v &amp;lt;host_path_to_ssh_private_key&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt; bonitasoft/bcd-controller /bin/bashIndeed you will use ~/.aws directory instead.Single Sign-On to AWS Using G Suite In this step we will provide you an example using G Suite from Google.First, set up a Single Sign-On to AWS using G Suite as described in AWS website.In this previous documentation you have seen how to create an IAM role in your AWS account. It implies that for BCD usage you should have created the corresponding role with proper rights. To do so you just have to follow the How to configure Amazon Web Services (AWS) for BCD and in AWS Setup for BCD section replace the point 5 Create an IAM Group by a creation of the corresponding role attached to the IAM Policies created previously.The BCD Controller already embeds aws-google-auth to manage the authentication.You will need to know Google’s assigned Identity Provider ID (idp-id) and the ID assigned to the SAML service provider (sp-id).idp-id can be found on Google Admin Security &amp;gt; Set up single sign-on (SSO) page in the SSO url provided. For instance: https://accounts.google.com/o/saml2/idp?idpid=123456789012sp-id can be found into the URL of your browser when viewing Google Admin Apps &amp;gt; SAML Apps &amp;gt; Amazon Web Services page. For instance: #AppDetails:service=123456789012After launching the BCD Controller you will have to authenticate yourself as below:aws-google-auth --idp-id Abc012345 --sp-id 123456789012 -p default -u john.doe@acme.comaws-google-auth will store the credentials into ~/.aws directory through the default AWS profileIf you want to use a different profile, you will have to export the variable accordingly:aws-google-auth --idp-id Abc012345 --sp-id 123456789012 -p test -u john.doe@acme.comexport AWS_PROFILE=test",
      "url": " /bcd/2.0/howtos/manage-bonita-stacks/aws_sso",
      "author": "",
      "categories": "Howtos, Manage Bonita stacks"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-stacks-customize-the-bonita-container-custom-init": {
      "title": "Using initialization scripts",
      "content"     : "How to customize the Bonita container using initialization scriptsThe Bonita Docker container deployed by BCD can be further customized thanks to a custom initialization mechanism.This feature relies on the ability to extend the Bonita Docker image through custom *.sh shell scripts.Where should I put custom initialization scripts?Static initialization filesDynamic initialization filesWhen are custom initialization scripts invoked?In which order are custom initialization scripts invoked?Examples1. config-workers.sh2. config-cluster.sh.j23. register-event-handler.sh4. deploy-probe.sh5. More examples about REST API authorizationWhere should I put custom initialization scripts?Custom initialization files can be static or they can be dynamic while relying on runtime variables. Dynamic initialization files then leverage the Jinja2 templating framework used by Ansible.Static initialization filesStatic custom initialization files must be placed in BCD’s roles/bonita/files/custom-init.d folder. All files from this folder will be uploaded to the target host regardless their extension. However only the files with a .sh extension will be executed.Here’s the directory layout for a register-event-handler.sh custom script:roles├── bonita│   ├── files│   │   ├── custom-init.d│   │   │   ├── bonita-tenant-sp-custom.xml│   │   │   ├── config-workers.sh│   │   │   ├── event-handler-example-1.0.0-SNAPSHOT.jar│   │   │   └── register-event-handler.shDynamic initialization filesDynamic custom initialization files must be placed in BCD’s roles/bonita/templates/custom-init.d folder. All files with a .j2 extension will be uploaded to the target host and stripped from the .j2 suffix. However only the files with a .sh.j2 extension will be executed.Here’s the directory layout for the provided config-cluster.sh.j2 initialization script:roles├── bonita│   └── templates│   └── custom-init.d│   ├── bonita-platform-sp-cluster-custom.properties.j2│   ├── config-cluster.sh.j2When are custom initialization scripts invoked?Custom initialization scripts are invoked once the database has been initialized and the Tomcat server has been configured with Bonita Platform setup tool.Hence the Bonita Docker image startup sequence can be described as follows:  Initialize database: setup.sh init  Configure Tomcat server: setup.sh configure  Execute custom initialization *.sh scripts found in the container’s /opt/custom-init.d folder  Start Tomcat serverWarning: all custom scripts are re-executed each time the Bonita Docker container is restarted.If you want your script to be executed only once, you need to handle the conditional execution in your custom script itself.For example:#!/bin/bashindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fi## Do some interesting stuff# [...]# Create indicator filetouch ${indicator_path}In which order are custom initialization scripts invoked?Custom scripts are executed in natural sort order as implemented by the ls shell command. It is also referred as natural sort of (version) numbers within text.More precisely scripts are executed in the order returned by this command: ls -v /opt/custom-init.d/*.sh.Examples1. config-workers.shThe config-workers.sh script is provided as part of BCD’s core scripts.In particular it shows how to further configure the server using Bonita Platform setup tool.2. config-cluster.sh.j2The config-cluster.sh.j2 script template is provided as part of BCD’s core scripts.In particular it shows how to conditionally configure a cluster deployment on AWS using BCD variables and Jinja2 templating engine.3. register-event-handler.shThis sample script deploys and registers a Bonita engine Event handler as described in Event handlers Documentation.Assuming the following files:  roles/bonita/files/custom-init.d/event-handler-example-1.0.0-SNAPSHOT.jar (event handler JAR file)  roles/bonita/files/custom-init.d/bonita-tenant-sp-custom.xml (tenant configuration file where the event handler is registered)Here’s a sample register-event-handler.sh script:#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;EVENT_HANDLER_FILENAME=event-handler-example-1.0.0-SNAPSHOT.jarwar_path=$(find &quot;${BONITA_PATH}/Bonita&quot;*&quot;Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/server/webapps&quot; -name bonita.war)script_dir=&quot;$(cd &quot;$(dirname &quot;${BASH_SOURCE[0]}&quot;)&quot; &amp;amp;&amp;amp; pwd)&quot;workdir=&quot;${BONITA_FILES}/register-event-handler&quot;rm -rf ${workdir} &amp;amp;&amp;amp; mkdir -p ${workdir}pushd ${workdir}# copy event handler jarmkdir -p WEB-INF/libcp ${script_dir}/${EVENT_HANDLER_FILENAME} WEB-INF/lib/# repackage warzip -r &quot;${war_path}&quot; &quot;WEB-INF/lib/${EVENT_HANDLER_FILENAME}&quot;# register event handler${BONITA_SETUP_SH} pullcp /opt/custom-init.d/bonita-tenant-sp-custom.xml ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_engine/${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}4. deploy-probe.shThis sample script deploys PSI Probe (an Advanced manager and monitor for Apache Tomcat) along with Bonita in the Tomcat bundle.In particular, it shows how to reference BCD variables in custom initialization files. All custom referenced variables can be defined at BCD scenario level.With this example, PSI Probe will be available at this URL: http://&amp;lt;bonita_host&amp;gt;:8081/probe. To connect to PSI Probe, use the credentials defined with the custom_manager_username and custom_manager_password variables. By default: custom_manager_username=admin and custom_manager_password=t0psecret.deploy-probe.sh.j2#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}script_dir=&quot;$(cd &quot;$(dirname &quot;${BASH_SOURCE[0]}&quot;)&quot; &amp;amp;&amp;amp; pwd)&quot;pushd ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}# Allow Tomcat Manager from different hostcp ${script_dir}/manager-context.xml server/conf/Catalina/localhost/manager.xml# PSI Probecurl -sSL -o server/webapps/probe.war https://github.com/psi-probe/psi-probe/releases/download//probe.warcp ${script_dir}/tomcat-users.xml server/conf/tomcat-users.xml# Create indicator filetouch ${indicator_path}manager-context.xml.j2&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;Context antiResourceLocking=&quot;false&quot; privileged=&quot;true&quot; &amp;gt;  &amp;lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;&quot; /&amp;gt;  &amp;lt;Manager sessionAttributeValueClassNameFilter=&quot;java.lang.(?:Boolean|Integer|Long|Number|String)|org.apache.catalina.filters.CsrfPreventionFilter$LruCache(?:$1)?|java.util.(?:Linked)?HashMap&quot;/&amp;gt;&amp;lt;/Context&amp;gt;tomcat-users.xml.j2&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;tomcat-users xmlns=&quot;http://tomcat.apache.org/xml&quot;  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  xsi:schemaLocation=&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;  version=&quot;1.0&quot;&amp;gt;  &amp;lt;role rolename=&quot;probeuser&quot; /&amp;gt;  &amp;lt;role rolename=&quot;poweruser&quot; /&amp;gt;  &amp;lt;role rolename=&quot;poweruserplus&quot; /&amp;gt;&amp;lt;role rolename=&quot;manager-gui&quot; /&amp;gt;  &amp;lt;user username=&quot;&quot; password=&quot;&quot; roles=&quot;manager-gui&quot; /&amp;gt;&amp;lt;/tomcat-users&amp;gt;5. More examples about REST API authorizationSee how to configure REST API authorization.",
      "url": " /bcd/2.0/howtos/manage-bonita-stacks/customize-the-bonita-container/custom_init",
      "author": "",
      "categories": "Howtos, Manage Bonita stacks, Customize the Bonita container"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-stacks-customize-the-bonita-container-how-to-configure-rest-api-authorization": {
      "title": "Configuring REST API authorization",
      "content"     : "How to configure REST API authorizationThe Bonita container is launched with REST_API_DYN_AUTH_CHECKS flag set to true by default.It means that all dynamic permissions checks are activated.In the sections below we will manipluate configuration into templates and not at a specific tenant. Indeed the default tenant (1) will be created during the first startup of bonita.Deactivating dynamic permissions checksAdding custom permissionsEnabling debug modeDeactivating dynamic permissions checksSince 2.0.x, BCD manages the REST_API_DYN_AUTH_CHECKS environment through the scenario variable bonita_rest_api_dyn_auth_checks.So to deactivate dynamic permissions checks you will just have to add the following line into your scenario:bonita_rest_api_dyn_auth_checks: falseAdding custom permissionsAs described in Bonita documentation, the custom-permissions-mapping.properties file contains custom rules that supplement the resource permissions and compound permissions. By default, this file is empty, because the compound permissions definitions automatically manage the permissions needed for default and custom profiles, and for default and custom pages.If you want to override the default behavior, you can add rules to this file by adding this kind of script roles/bonita/files/custom-init.d/add-custom-permissions.sh#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;# define custom permissions# the profile User have now the permission Organization management and Organization visualization${BONITA_SETUP_SH} pullecho -e &quot;nprofile|User=[organization_management, organization_visualization]&quot; &amp;gt;&amp;gt; ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_portal/custom-permissions-mapping.properties${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}For a more advanced configuration you can also provide directly a file roles/bonita/files/custom-init.d/custom-permissions-mapping.properties and push it with a script like roles/bonita/files/custom-init.d/add-custom-permissions-file.sh#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;# define custom permissions${BONITA_SETUP_SH} pullcp /opt/custom-init.d/custom-permissions-mapping.properties ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_portal/${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}Enabling debug modeIf debug mode is activated, whenever you update a configuration file or a dynamic check script, the changes take effect immediately.To activate debug mode you can create a script like roles/bonita/files/custom-init.d/activate-debug-mode.sh#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;# activate debug mode${BONITA_SETUP_SH} pullsed -i &#39;s/security.rest.api.authorizations.check.debug.*/security.rest.api.authorizations.check.debug true/&#39; ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_portal/security-config.properties${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}",
      "url": " /bcd/2.0/howtos/manage-bonita-stacks/customize-the-bonita-container/how_to_configure_rest_api_authorization",
      "author": "",
      "categories": "Howtos, Manage Bonita stacks, Customize the Bonita container"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-stacks-customize-the-bonita-container-how-to-enable-remote-monitoring-jmx": {
      "title": "Enabling remote monitoring with JMX",
      "content"     : "How to enable remote monitoring with JMXThe Java virtual machine (Java VM) has built-in instrumentation that enables you to monitor and manage it using the Java Management Extensions (JMX) technology.To enable and configure the ready-to-use JMX agent so that it can monitor and manage the Java VM of the Bonita container, certain system properties must be set and an additional port must be exposed.Adding JMX system propertiesExposing additional portsAdding JMX system propertiesBCD enables you to set system properties to the Java VM through the bonita_java_opts variable. Hence JMX system properties must be set in your YAML scenario as in the following example:bonita_java_opts: &amp;gt;-  -Djava.awt.headless=true  -Xms1024m  -Xmx1024m  -XX:PermSize=128m  -XX:MaxPermSize=128m  -XX:+UseConcMarkSweepGC  -Dcom.sun.management.jmxremote=true  -Dcom.sun.management.jmxremote.port=9010  -Dcom.sun.management.jmxremote.rmi.port=9010  -Dcom.sun.management.jmxremote.local.only=false  -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false  -Djava.rmi.server.hostname=This example configures port 9010 as JMX remote port.Exposing additional portsBy default the Bonita container exposes ports 8080 (Tomcat HTTP port) and 5701 (Hazelcast cluster communication port) to the Docker host. Then BCD publish these 2 ports as follows:  Port 8080 is always published and mapped to the host port defined by bonita_port variable  Port 5701 is only mapped to the host port defined by bonita_hazelcast_port variable when bonita_cluster_mode is enabledAdditionally BCD enables you to publish extra ports through the bonita_published_ports_extra variable. Hence additional port mappings must be added to your YAML scenario as in the following example:bonita_published_ports_extra:  - &quot;9020:9010&quot;As a result you can now connect monitoring tools like JConsole or Java VisualVM using the JMX URL &amp;lt;bonita_docker_host_fqdn_or_ip&amp;gt;:9020.",
      "url": " /bcd/2.0/howtos/manage-bonita-stacks/customize-the-bonita-container/how_to_enable_remote_monitoring_jmx",
      "author": "",
      "categories": "Howtos, Manage Bonita stacks, Customize the Bonita container"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-stacks-deploy-with-static-inventory": {
      "title": "Deploy with a static inventory",
      "content"     : "How to deploy Bonita on existing serverBCD can not only deploy your Bonita Stack in the cloud. You can also deploy your stack on your existing hosts.On this page, you will find detailed information about the usage of BCD with your existing hosts and finally, you will see an example, creating virtual machines with Vagrant and deploying your Bonita application with BCD.Preparing configuration filesInventoryScenarioDeploy with VagrantRequirementsStep-by-step tutorial1. Prepare and start your host2. Launch your BCD controller and deploy3. Open bonita urlCleaning up your environmentPreparing configuration filesThere is two main files to configure:InventoryThis file defines the hosts and groups of hosts upon which BCD will operates. The location of the inventory files isbonita-continuous-delivery_x.x.x/ansible/inventory/.and static-inventory-1-machine.EXAMPLE in the static-inventory directory.In this file, there are two group names, database and bonita that must appear and under each one you have to describeyour machines, and a group with the same name of your bonita stack id grouping the database and bonita groups.Also, you have to specify a group variables for bonita group with:  bonita_address, that is the IP of Bonita host  bonita_db_host, that is the IP of your databaseYou can see an example in bonita-continuous-delivery_x.x.x/ansible/inventory/static-inventory/ for one or two machines.It is recommended to have a clear understanding on Ansible InventoriesScenarioThe scenarios follows the same rules as described in the Scenario file reference. There are fiveparameters that you don’t have to forget to set-up:  bcd_provider: Infrastructure provider. It has to be set with static-inventory  ansible_ssh_user: The ssh user to use.  ansible_ssh_private_key_file: Private key file used by ssh.  bcd_inventory: Ansible inventory path required when bcd_provider is static-inventory  configuration: Configuration filename used to group variables for common deployment types.You can see an example of scenario in bonita-continuous-delivery_x.x.x/scenarios/static_inventory.yml.EXAMPLEDeploy with VagrantYou will see a complete example of deploying on existing virtual machines created with Vagrant.For this tutorial it is highly recommended to have a clear understanding of Vagrant prior to reading this documentation.This tutorial is adapted only to the Linux and Mac environment.Requirements  First, Vagrant and Virtualbox as a hypervisor, installed on your host.  Second, you will need to create and configure your host machine using your Vagrantfile.An example of Vagrantfile is provided in your bonita-continuous-delivery_&amp;lt;version&amp;gt;/vagrant/ directory. You can find anexample for one machine or two.  Third, you need to define your infrastructure and Bonita stack with a scenario. An example scenario file named vagrant_single.yml.EXAMPLE is provided in the bonita-continuous-delivery_x.x.x/scenarios. For moreinformation you can read the BCD Scenario reference  Finally, the virtual machine that you will create must have access to the Internet because some packages will be updated/installed.Step-by-step tutorialHere is a complete example using the configuration files provided.This example uses an insecure private key. See more…Assuming you have a bonita-continuous-delivery_2.0.0 directory in your $HOME directory.1. Prepare and start your hostThis step will create and configure a single virtual machine with an IP 192.168.10.10 defined in VagrantfileIn your host machine:$ cd $HOME/bonita-continuous-delivery_2.0.0/vagrant/1-machine/$ vagrant upBringing machine &#39;bonita-stack&#39; up with &#39;virtualbox&#39; provider...==&amp;gt; bonita-stack: Importing base box &#39;ubuntu/xenial64&#39;...[...]==&amp;gt; bonita-stack: Setting up libpython-stdlib:amd64 (2.7.12-1~16.04) ...==&amp;gt; bonita-stack: Setting up python (2.7.12-1~16.04) ...$ VBoxManage list runningvms&quot;1-machine_bonita-stack_1525085617284_45644&quot; {553ff7af-4d9a-4325-a902-ae17edce1e54}2. Launch your BCD controller and deploy$ docker run --rm -t -i --name bcd-controller -v $HOME/bonita-continuous-delivery_2.0.0/:/home/bonita/bonita-continuous-delivery -v ~/.vagrant.d/insecure_private_key:/home/bonita/.vagrant.d/insecure_private_key bonitasoft/bcd-controller /bin/bashbonita@bcd-controller:~$ cd bonita-continuous-deliverybonita@bcd-controller:~/bonita-continuous-delivery$bonita@bcd-controller:~/bonita-continuous-delivery$bcd -s scenario/vagrant_single.yml stack deploy3. Open bonita urlYou should now be able to access Bonita Portal at  http://192.168.10.10:8081/bonitaCleaning up your environmentIt is recommended to undeploy your Bonita application with the BCD controller like in the following:$ bcd -y -s &amp;lt;path/to/scenario&amp;gt; stack undeployAfter, you can destroy your virtual machine vagrant destroy command in the same path of your Vagrantfile.You can read more about the Vagrant CLI",
      "url": " /bcd/2.0/howtos/manage-bonita-stacks/deploy_with_static_inventory",
      "author": "",
      "categories": "Howtos, Manage Bonita stacks"
    }
    ,
  

    "bcd-2-0-index": {
      "title": "index",
      "content"     : "Bonita Continuous Delivery Add-on  Welcome to Bonita Continuous Delivery documentation website!The Bonita Continuous Delivery (BCD) add-on provides a solution to use Continuous Delivery practice for your Bonita Living Application development and deployment.It is composed of two parts:  First, a framework for Continuous Integration of Living Applications.BCD lets you build a Living Application repository and deploy the generated artifacts from the command line. Besides, a pre-configured standalone Jenkins CI environment is also provided with BCD.  Second, a solution for Provisioning of Bonita stacks on cloud or on-premises hosts.BCD lets you deploy Bonita on existing servers using Docker containers. Furthermore, when used with the Amazon Web Services (AWS) cloud platform, BCD enables you to create and delete AWS EC2 instances automatically.Highlights  Find out what’s new in Bonita Continuous Delivery add-on! Read the release notes.   » What’s new in BCD?Getting started  Follow this guide with step-by-step instructions to start using Bonita Continuous Delivery solution.   Getting started with BCDHowtos  Check out the tutorials for practical guides about using Bonita Continuous Delivery add-on.Basic concepts This add-on provides a bcd command-line interface (BCD CLI) which enables to:  Build and deploy Bonita Living Applications  Deploy a full Bonita stack - A Bonita stack is formed by a database service, Bonita Docker containers running Tomcat application servers and a HAProxy load balancer when deploying a multi-node Bonita cluster.The BCD CLI is provided within a ready-to-use environment called BCD Controller. This environment is packaged as a Docker image.Then a controller container will have to be started interactively on your control host from which bcd commands will be issued.  It is highly recommended to have a clear understanding of Docker essential concepts prior to reading this documentation.",
      "url": " /bcd/2.0/index",
      "author": "",
      "categories": ""
    }
    ,
  

    "bcd-2-0-release-notes": {
      "title": "Release notes",
      "content"     : "Release notesBreaking changesLimitations and known issuesWhat&#39;s new in 2.0.0 (2018-06-07)New featuresEnhancementsTechnology updatesBugfixesBreaking changesThe following changes introduce incompatibility with BCD 1.0:  For security reasons, pushing AWS user credentials to EC2 instances (as done with BCD 1.0) for cluster autodiscovery is no longer supported. It is replaced by an IAM role assignment on EC2 instances. See ec2_discovery_iam_role in the Scenarios documentation.  bonita_http_api variable is now set to false by default.  For a better understanding, the on-premises value for bcd_provider variable has been replaced with static_inventory. You may have to update your BCD scenarios accordingly.  Bonita Docker images have been moved from roles/bonita/files/docker directory to dependencies directory.  BCD commands for Provisioning are invoked with bcd stack parent command.Limitations and known issues  The same BCD stack cannot be managed with multiple BCD controller instances due to the use of Terraform “local” backend.  Due to Ansible issue #35255 the warning message “could not match supplied host pattern” is displayed when there is no load balancer required for a noncluster deployment:[WARNING]: Could not match supplied host pattern, ignoring: load_balancer  What’s new in 2.0.0 (2018-06-07) This version is compatible with Bonita 7.7.0.New features  BCD commands for Living Application Management (bcd livingapp)  Add Google G Suite Single Sign-On (SSO) support  BCD command to show BCD environment version (bcd version)  Jenkins standalone example with sample BCD pipeline  Scenario encryption capabilityEnhancements  Handle REST_API_DYN_AUTH_CHECKS environment variable of Bonita Docker image  Deactivate by default Bonita HTTP API  Ports published by the Bonita stack are configurableTechnology updates  Upgrade BCD controller with Terraform v0.11.3  Upgrade BCD controller with Ansible 2.5.0  Support Provisioning of Ubuntu 16.04 hosts in addition to Ubuntu 14.04Bugfixes  BCD-199 Stack undeploy command fails when Docker is not yet installed on target hosts",
      "url": " /bcd/2.0/release_notes",
      "author": "",
      "categories": ""
    }
    ,
  

    "bcd-2-0-requirements-and-compatibility": {
      "title": "Requirements and compatibility",
      "content"     : "Requirements and compatibilityThis page describes which system requirements need to be met in order to use the Bonita Continuous Delivery Add-On.You will also find information about BCD and Bonita version compatibility.  System requirementsControl hostBonita stack hostsJenkins serverVersion compatibilitySystem requirementsThere are different environments where requirements are to be met for BCD:  Control host - the host where your BCD controller will run.  Bonita stack hosts - the target hosts where your Bonita stack will be deployed using BCD.  Jenkins server - the server where BCD commands are executed by Jenkins Continuous Integration platform.Control hostThe Docker Engine must be up and running on your control host prior to using BCD. BCD is compatible with Docker version 17.04.0 and above.You may have Docker Community Edition (Docker CE) or Docker Enterprise Edition (Docker EE) installed on your host to start using BCD.  The Docker Engine may be installed on Linux, MacOS, Microsoft Windows or Cloud platforms as described in Docker installation guide.Bonita stack hosts  These requirements must be fulfilled when using BCD for Provisioning. They apply to target hosts where the Bonita stack will be deployed.The system requirements for the target hosts are as follows:  Minimum hardware requirements: 1 CPU / 1GiB RAM / 8GiB storage (Equivalent to AWS EC2 t2.micro instance)  Supported operating systems: Ubuntu-14.04, Ubuntu-16.04Besides, the following technical requirements must be met:  Target hosts must have Internet access in order to communicate with Bonitasoft License webservice.It is also required to install packages and to pull Docker public images for the database instance when applicable.  Target hosts must be accessible from the BCD controller using SSH public-key authentication.  The user configured to connect to the target hosts must have sudo or root privileges in order to install the Bonita stack.Basically, here are the steps to manually install a target host for BCD:  Install one of the supported operating systems.  Create a user and grant sudo or root privileges.  Generate SSH keys for this user.The SSH private key has to be retrieved on your BCD controller and its path configured in your BCD scenario.Jenkins serverBCD commands may be executed by a Jenkins agent (slave) which runs the BCD controller Docker container.Therefore the Jenkins server shall meet the same requirements as the Control host.Version compatibilityThe following table shows which BCD versions support specific Bonita releases.This compatibility information is also specified in the Release notes for each version of BCD.BCD versionBonita release2.0.07.7.0  If a Bonita release is not listed in the previous table, then it is not supported by the BCD Add-On.",
      "url": " /bcd/2.0/requirements-and-compatibility",
      "author": "",
      "categories": ""
    }
    ,
  

    "bcd-2-0-troubleshooting-guide": {
      "title": "Troubleshooting guide",
      "content"     : "Troubleshooting guideIf you encounter issues during the usage of BCD due to a bad configuration or a network problem, it’s interesting to know that you could be able to simply relaunch your command (create, deploy) after fixing the configuration or the network and it should resume from where it was.Common issuesInvalidAMIID.NotFound and InvalidSubnetID.NotFoundAccessing Bonita logsDebugging Ansible FactsAccessing Ansible LogsCommon issuesInvalidAMIID.NotFound and InvalidSubnetID.NotFoundIf while you launch a create command in order to create instances on AWS you get errors like these:[...]InvalidAMIID.NotFound: The image id &#39;[ami-fc4f5e85]&#39; does not exist[...]Error launching source instance: InvalidSubnetID.NotFound: The subnet ID &#39;subnet-ab123456&#39; does not exist[...]You should check that ec2_subnet_ids and aws_ami correspond to the region set into ec2_region.You may also check that rights linked to your AWS credentials (.boto or .aws) correspond to the actions in your scenario.Accessing Bonita logsIn order to troubleshoot issues you may need to consult Bonita logs.To do so, first you need to identify the target server where the Bonita container is running.It’s possible through the bcd stack status command:bcd -y -s scenarios/myscenario.yml stack status[...][10:44:12.802] TASK [List Docker containers.] **************************************************************************************************[...]IP: 54.191.90.85FQDN: ec2-54-191-90-85.us-west-2.compute.amazonaws.comDocker running containers--CONTAINER IDIMAGE  CREATED STATUS  NAMES5d73a2446245bonitasoft/bonita-subscription:7.6.2   6 minutes ago   Up 6 minutesbonita8081[...]Then you will need to connect on this server (either through the IP or FQDN) using ssh.ssh -i ~/.ssh/my_key.pem ubuntu@54.191.90.85You can now display the logs using:docker logs bonita8081If you want to copy all the logs (bonita, catalina) you can use docker cp:docker cp bonita8081:/opt/bonita/BonitaSubscription-7.6.2-Tomcat-8.5.23/server/logs/ /tmp/Then you will be able to retrieve all the files through a scp:scp -i ~/.ssh/my_key.pem ubuntu@54.191.90.85:/tmp/logs /tmp/Debugging Ansible FactsAnsible facts are local variables registered in hosts. It is possible to save them in JSON files with the setup command.$ cd bonita-continuous-delivery$ bcd -y -s scenarios/myscenario.yml stack create deploy$ ansible all -vv -i ansible/inventory/ec2/ec2_wrapper.sh -m setup -u ubuntu --private-key=~/.ssh/my_key.pem --tree tmp_facts/This command will identify every EC2 instance (depending of bcd_stack_id set into ec2.ini by the last bcd stack deploy command) and put its facts into the tmp_facts directory.Accessing Ansible LogsIn order to troubleshoot issues, you may need to consult Ansible logs.By default, the path of the log is /var/log/ansible.log in your Docker container. You can change this location modifying the variable log_path in the Ansible configuration file located in /home/bonita/bonita-continuous-delivery/ansible/ansible.cfg.If you want to persist the log, you can add a volume in when you run docker run command like$ docker run --rm -t -i --name bcd-controller -v &amp;lt;host_path_to_.boto&amp;gt;:/home/bonita/.boto -v &amp;lt;host_path_to_bonita-continuous-delivery_folder&amp;gt;:/home/bonita/bonita-continuous-delivery -v &amp;lt;host_path_to_ssh_private_key&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt; -v &amp;lt;host_path_to_your_ansible_log&amp;gt;:/var/log/ansible.log bonitasoft/bcd-controller /bin/bash",
      "url": " /bcd/2.0/troubleshooting_guide",
      "author": "",
      "categories": ""
    }
    
  
 
    
 
    
 
    

    "welcome-to-jekyll": {
      "title": "Welcome to Jekyll!",
      "content"     : "You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.Jekyll also offers powerful support for code snippets:def print_hi(name)  puts &quot;Hi, #{name}&quot;endprint_hi(&#39;Tom&#39;)#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.",
      "url": " /welcome-to-jekyll/",
      "author": "",
      "categories": "jekyll, update"
    }
    
  
 
}