{
  
  
    

    "bcd-1-0-bcd-controller-docker-image-cli": {
      "title": "BCD Command Line Interface",
      "content"     : "Bonita Continuous Delivery CLIThis is a command-line tool for Bonita Continuous Delivery.InstallUsageExamplesMulti command chainingInstallThe CLI is provided as a Python package. Install the package locally as follows:$ cd cli$ pip install --user .This will make the bcd command available under $HOME/.local/bin.Basically make sure to add $HOME/.local/bin to your PATH environment variable in order to make your environment aware of the bcd command.UsageThe bcd command takes a mandatory option called scenario through the -s / --scenario command line option.Then the bcd command provides the following subcommands in order to drive Bonita Continuous Delivery module:Usage: bcd [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...  Bonita Continuous Delivery CLI.Options:  -s, --scenario PATHYAML scenario file (required)  -y, --yes  Execute action without confirmation prompt  -v, --verbose  Enable Ansible verbose mode  --nocolor  Turn output colorization off  -e, --extra-vars TEXT  Extra vars for Ansible (multiple) - Variables are passed using the key=value syntax.  -h, --help Show this help messageCommands:  statusShow the platform status  createCreate AWS instances  deployDeploy Bonita stack  undeploy  Undeploy Bonita stack  destroy   Destroy AWS machines (EC2 instances)Examples$ bcd -s scenarios/uswest2_cluster.yml create$ bcd -s scenarios/vagrant_single.yml -e mail_notification=no -y deploy$ bcd -s scenarios/uswest2_performance.yml destroy --dry-runMulti command chainingThe BCD CLI allows to invoke more than one command in one go. This is useful to chain commands as a pipeline. If one command fails then bcd stops executing any subsequent command it may have.For example:$ bcd -s scenarios/uswest2_cluster.yml -y create deploy",
      "url": " /bcd/1.0/bcd-controller-docker-image/cli",
      "author": "",
      "categories": "BCD Controller Docker image"
    }
    ,
  

    "bcd-1-0-bcd-controller-docker-image-docker": {
      "title": "Docker image overview",
      "content"     : "BCD controller Docker imageThis Docker image provides a ready-to-use environment to launch Bonita Continuous Delivery Ansible playbooks.Install the imageFrom pre-built imageFrom sourceUse the imageConfigure AWS credentialsStart a containerInstall the imageFrom pre-built imageA pre-built BCD controller image is provided with BCD deliverable as a bcd-controller_&amp;lt;version&amp;gt;.tar.gz archive. It is located in the bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker directory.Load this image into Docker engine as follows:$ cd bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker$ gunzip -c bcd-controller_&amp;lt;version&amp;gt;.tar.gz | docker loadLoaded image: bonitasoft/bcd-controller:&amp;lt;version&amp;gt;Loaded image: bonitasoft/bcd-controller:latestFrom sourceYou can also build the image from source. Its Dockerfile is provided with BCD deliverable in the bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker directory.Build the image as follows:$ cd bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker$ docker build -t bonitasoft/bcd-controller .Use the imageConfigure AWS credentialsDynamic Amazon EC2 inventory management for Ansible runs on top of Boto.Boto’s configuration requires the following .boto file to exist in the Docker container’s /home/bonita directory.[Credentials]aws_access_key_id = &amp;lt;YOUR_AWS_ACCESS_KEY&amp;gt;aws_secret_access_key = &amp;lt;YOUR_AWS_SECRET_ACCESS_KEY&amp;gt;Start a container$ docker run --rm -t -i --name bcd-controller -v &amp;lt;local_path_to_.boto&amp;gt;:/home/bonita/.boto -v &amp;lt;local_path_to_bonita-continuous-delivery_folder&amp;gt;:/home/bonita/bonita-continuous-delivery -v &amp;lt;local_path_to_ssh_private_key&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt; bonitasoft/bcd-controller /bin/bash$ cd /home/bonita/bonita-continuous-delivery",
      "url": " /bcd/1.0/bcd-controller-docker-image/docker",
      "author": "",
      "categories": "BCD Controller Docker image"
    }
    ,
  

    "bcd-1-0-index": {
      "title": "index",
      "content"     : "Bonita Continuous Delivery Add-onThis add-on provides a solution to use Continuous Delivery practice for your Bonita Living Application development and deployment.It is composed of two main parts:  First a solution for Bonita stack provisioning on Cloud or on-premise.  Second a framework for continuous integration of Living Application. This CI framework will be delivered in future versions of the add-on.This documentation focus on the first part: the solution and tooling for provisioning of a Bonita stack.The tool is composed of a set of scripts to deploy a full Bonita stack automatically (database and Bonita Tomcat application server).This toolkit is compatible with Amazon EC2 cloud platform (AWS), on premises servers and local virtual machines via Vagrant.These scripts are powered by Ansible. Short note from Wikipedia:Ansible is a free software platform for configuring and managing computers. It combines multi-node software deployment, ad hoc task execution, and configuration management. It manages nodes over SSH or PowerShell and requires Python (2.4 or later) to be installed on them. Modules work over JSON and standard output and can be written in any programming language. The system uses YAML to express reusable descriptions of systems.The Bonita Continuous Delivery (BCD) tooling is provided through a Docker container called BCD Controller. In this controller you’ll find all useful tooling to manage your provisioning of Bonita platform and more. This controller should be installed on your local machine.  A “Host” can be an EC2 instance or a dedicated server.  Files organization on the local machine:  ~/.boto = should contains all credential to your AWS account (if any)  ~/bonita-continuous-delivery = used as a work directory for the scripts.  ~/.ssh/private_key = used to allow access to hosts  AWS PrerequisitesBonita Licensing PrerequisitesQuickstartHow to useEC2 instances creationDeployment and TestEC2 Instances DeletionAdvanced usageInstalling a custom BCD ControllerDive into the scenariosKnown issuesAWS PrerequisitesIn order to be able to deploy on Amazon Web Services please start to read the AWS Prerequisites section.Bonita Licensing PrerequisitesTo use this tool, you must have an active Bonitasoft Subscription and a dedicated access to the license service. please contact your Sales representative for more information.To automatically retrieve the Bonita licenses for your platforms please take a look at the Licensing Prerequisites section.QuickstartIf you have fulfilled all the prerequisites then you can follow the Quickstart guide.How to useThe nominal usage of BCD can de described as the following workflow:  (Optional) Amazon EC2 instance creation  Bonita platform deployment in EC2 or on premises  (Optional) Amazon EC2 instance deletionThe user must specify the bcd_stack_id variable for each command in order to identify its infrastructure. Multiple tests with different bcd_stack_id can be used simultaneously even on AWS. The bcd_stack_id variable should contain only letters, digits or underscore characters (see https://github.com/ansible/ansible/blob/v2.3.1.0-1/contrib/inventory/ec2.py#L1555).In order to describe a new infrastructure and software configuration (aka. scenario), you need to prepare the following files:  scenarios/&amp;lt;scenario_name&amp;gt;.yml: this YAML file should gather all relevant variables which describe the scenario  inventory/&amp;lt;inventory_file&amp;gt;: this folder should describe the target infrastructure - Dynamic EC2 inventory is automatically used when provisioning AWS instances.Finally start Bonita stack provisioning by invoking the bcd Command Line Interface (BCD CLI).The BCD CLI is directly available as a bcd command when using the BCD Controller Docker image (@see the Quickstart guide).Examples:$ bcd -s scenarios/uswest_performance.yml create$ bcd -s scenarios/uswest_performance.yml --yes deploy$ bcd -s scenarios/uswest_performance.yml destroy --dry-run$ bcd -s scenarios/vagrant_cluster.yml deploy$ bcd -s scenarios/vagrant_cluster.yml --yes undeploy$ bcd -s scenarios/uswest2_cluster.yml -y create deployEC2 instances creationThe create_aws.yml playbook goal is to create EC2 instances.Example: Create 3 x t2.micro EC2 instancesOne t2.micro for the database, one for Bonita.$ bcd -s scenarios/uswest_performance.yml createDeployment and TestDynamic EC2 InventoryOnce EC2 instances are created, you can continue with deployment as follows:$ bcd -s scenarios/uswest_performance.yml deployThis command will read the scenarios/uswest_performance.yml configuration file and provision existing EC2 instances accordingly.Static On-premises InventoryAssuming a server is already up and running (eg. perf-host), you can use these scripts to deploy a Bonita stack on a static infrastructure.$ bcd -s scenarios/perf-host_cluster.yml deployThis command will read the scenarios/perf-host_cluster.yml configuration file and provision an existing server accordingly.VagrantWe provide 2 sample Vagrant layouts - 1-machine and 2-machines - which you can find in the vagrant directory.  Create the machine infrastructure with vagrant up.  Start provisioning by invoking the bcd CLI.Examples:$ bcd -s scenarios/vagrant_performance.yml deploy$ bcd -s scenarios/vagrant_cluster.yml deploy$ bcd -s scenarios/vagrant_performance.yml -e &quot;bcd_inventory=inventory/vagrant/2-machines/inventory&quot; deploy# The latter syntax allows to override the bcd_inventory variable from the command line.EC2 Instances DeletionThe destroy_aws.yml playbook goal is to delete EC2 instances. When tests have finished, you may delete every related EC2 instances like this:$ bcd -s scenarios/uswest_performance.yml destroy --dry-run$ bcd -s scenarios/uswest_performance.yml --yes destroyAdvanced usageInstalling a custom BCD ControllerIn order to setup your own environment without the BCD Controller Docker image, you can follow the installation procedure described in its Dockerfile.The BCD controller Dockerfile is provided with BCD deliverable in the bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker directory.Dive into the scenariosFor further details see this section.Known issuesFor further details see this section.",
      "url": " /bcd/1.0/index",
      "author": "",
      "categories": ""
    }
    ,
  

    "bcd-1-0-release-notes": {
      "title": "Release notes",
      "content"     : "Release notesLimitations and known issuesWhat&#39;s new in 1.0.5 (2018-05-04)BugfixesWhat&#39;s new in 1.0.4 (2018-04-05)BugfixesWhat&#39;s new in 1.0.3 (2018-03-08)BugfixesInternal refactoringWhat&#39;s new in 1.0.2 (2018-02-02)BugfixesWhat&#39;s new in 1.0.1 (2018-01-05)BugfixesLimitations and known issues  The same BCD stack cannot be managed with multiple BCD controller instances due to the use of Terraform “local” backend.What’s new in 1.0.5 (2018-05-04)Bugfixes  BCD-200 Database container is not created with provided Vagrant inventories  BCD-241 ‘Install license modules’ task fails  BCD-243 vagrant failed to download ubuntu box: 404 Not FoundWhat’s new in 1.0.4 (2018-04-05)Bugfixes  BCD-234 ‘Install python modules’ task fails due to pip 10What’s new in 1.0.3 (2018-03-08)Bugfixes  BCD-204 Hibernate cache is not disabled on cluster deploymentsInternal refactoring  BCD-171 Refactor license request script using bonita_license module  Set bcd_cli module version to 1.0.2What’s new in 1.0.2 (2018-02-02)Bugfixes  BCD-142 Failures while loading Docker images do not stop BCD command  BCD-189 Database instance (AWS) and container (Docker) is created although ‘bonita_db_host’ is set  BCD-190 boto file is required for Vagrant deployments  BCD-191 ‘bcd status’ command fails when docker is not installed yet on target hosts  BCD-192 Timestamp is not displayed in BCD CLI stdout  BCD-196 ‘–nocolor’ is not a recognized BCD CLI optionWhat’s new in 1.0.1 (2018-01-05)Bugfixes  BCD-104 An EC2 instance is created for database even when rds=”true”  BCD-141 Undeploy doesn’t free disk space of docker volumes",
      "url": " /bcd/1.0/release_notes",
      "author": "",
      "categories": ""
    }
    ,
  

    "bcd-1-0-scenarios": {
      "title": "Scenario variables reference",
      "content"     : "Bonita Platform Provisioning scenariosWith scenarios, you can define your infrastructure, Bonita installation and potential tests you want to execute. A scenario is a YAML Ansible variable file injected in Ansible with the command -e &quot;@/path/to/scenario.yml&quot;. The variables described in a scenario have precedence over those defined in the playbooks or the group vars. It is possible to overload these variables with a declaration of additional variables after this, in order to test multiple alternatives (for instance overloading bonita_version can be interesting if one wants to test multiple versions of Bonita.The format is flat as shows this sample :bcd_stack_id: vagrantconfiguration: vagrant_varsbonita_cluster_mode: falsebonita_cluster_qty: 1The following sections describe the main and mandatory variables.Infrastructure and misc.Vagrant scenariosOn-premises scenariosAWS Cloud scenariosBonitaEmail notificationInfrastructure and misc.Some parameters are mandatory for general provisioning and test description.Name  Mandatory  Default  Description  Sample  bcd_stack_id  Y     Bonita stack identifier used to group machines by stack membership. For AWS deployments the characters allowed are limited to letters, numbers and underscore.  uswest2_test  configuration  Y     Configuration filename. Initialize main variables. Choose between aws_vars, vagrant_vars  aws_vars  ansible_ssh_user  N  ubuntu  SSH user  ubuntu  ansible_private_key_file  Y  -  Path for the private SSH key.  ~/.ssh/jenkins_ansible_us-west-2.pem  Vagrant scenariosIn case of Vagrant scenario, for testing purposes. The configuration file value should be vagrant_vars.On-premises scenariosIn case of on-premises scenario. An inventory with all the corresponding machines should be used. A configuration file similar to vagrant_vars can be used.AWS Cloud scenariosIn case of AWS deployments. The configuration file value should be  aws_vars in this case.Name  Mandatory  Default  Description  Sample  ec2_region  Y     AWS region.  us-west-2  ec2_security_group  Y     Security group id for the target instances  sg-944888f1  ec2_security_group_name  Y     Security group name for the target instances  default  ec2_subnet_ids  Y     Subnet id for the target instances  subnet-aa14e0cf  ec2_keypair  Y     Key pair name for the target instances. Linked to ansible_private_key_file.  jenkins_ansible_us-west-2  boto_path  N  ~/.boto  Path to the Boto file with the AWS credentials.     rds  N  false  Precises if we use RDS for the Bonita BPM databases or if we use a Docker container deployed in an EC2 instance instead (default)  true  The following figure describes for each tier the important variables.Name  Mandatory  Default  Description  Sample  aws_ami  Y     Common AMI for all EC2 instances. Depends on region. Should be Ubuntu 14.04 (trusty) and ebs-ssd type.  ami-fc4f5e85  aws_database_instance_type  Y     Instance type for the database instance  t2.micro  aws_bonita_instance_type  Y     Instance type for the Bonita instance  t2.micro  aws_load_balancer_instance_type  Y     Instance type for the load balancer instance  t2.micro  BonitaSome parameters should be precised for Bonita. The corresponding Docker tar files should be present in docker directory.Name  Mandatory  Default  Description  Sample  bonita_version  Y     Bonita version. Used for the Docker tar.gz filename  7.5.0  bonita_edition  N  yes  performance edition of Bonita by default, other values: teamwork, efficiency, community. Docker tar filename depends on this.  performance  bonita_cluster_mode  N  false  Activates cluster mode for Bonita  false  bonita_cluster_qty  N  1  Number of instances for Bonita. This variable is also used in EC2 mode for the number of Bonita EC2 instance.  1  bonita_port  N  8081  Bonita HTTP port  8081  bonita_db_vendor  N  postgres  Database vendor (postgres, mysql, oracle)  postgres  bonita_db_host  N     Database host (usually retrieved from inventory)  postgres.a1bac2defghi.us-west-2.rds.amazonaws.com  bonita_db_port  N  5432  Database port  5432  bonita_db_admin_user  N  postgres  Admin user on database instance  root  bonita_db_admin_pass  N  mysecretpassword  Admin password on database instance  password  Email notificationAn email can be sent automatically with Bonita stack details at the end of the deployment phase. This feature uses Ansible mail module.Name  Mandatory  Default  Description  Sample  mail_notification  N  false  Enable email notification or not.  false  mail_host  N  -  The SMTP server host.  smtp.gmail.com  mail_port  N  -  The SMTP port.  465  mail_username  N  -  The SMTP username.  john.doe@acme.com  mail_password  N  -  The SMTP password.  SomePassword  mail_from  N  -  The email-address the mail is sent from. May contain address and phrase.  john.doe@acme.com (John Doe)  mail_to  N  -  The email-address(es) the mail is being sent to. This is a comma-separated list, which may contain address and phrase portions.  John Doe &amp;lt;john.doe@acme.com&amp;gt;, Suzie Something &amp;lt;sue@example.com&amp;gt;  ",
      "url": " /bcd/1.0/scenarios",
      "author": "",
      "categories": ""
    }
    ,
  

    "bcd-1-0-tutorials-aws-prerequisites": {
      "title": "AWS prerequisites",
      "content"     : "AWS prerequisitesSign Up for AWSAWS Setup for BCDDynamic EC2 inventory configurationSign Up for AWSIf you do not have an Amazon Web Services (AWS) account yet, first sign up as described in this AWS user guide: Sign Up for AWS.AWS Setup for BCDIn order to use Amazon EC2 instances, some configuration steps need to be performed as a prerequisite.The following steps are required to set up AWS credentials for Ansible automation.  Create an IAM Policy to grant full access to Amazon EC2 on a specific region (eg. us-west-2)  Policy name: EC2FullAccess_us-west-2  Policy document: {  &quot;Version&quot;: &quot;2012-10-17&quot;,  &quot;Statement&quot;: [  {  &quot;Action&quot;: &quot;ec2:*&quot;,  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Resource&quot;: &quot;*&quot;,  &quot;Condition&quot;: {  &quot;StringEquals&quot;: {  &quot;ec2:Region&quot;: &quot;us-west-2&quot;  }  }  }  ] }  Create an IAM Policy to allow to describe DB instances and list tags (mandatory for dynamic inventory script).  Policy name: RDSDescribeDBInstances  Policy document: {  &quot;Version&quot;: &quot;2012-10-17&quot;,  &quot;Statement&quot;: [  {  &quot;Sid&quot;: &quot;Stmt1498730873000&quot;,  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Action&quot;: [  &quot;rds:DescribeDBInstances&quot;,  &quot;rds:ListTagsForResource&quot;  ],  &quot;Resource&quot;: [  &quot;*&quot;  ]  }  ] }  Create an IAM Policy to grant full access to Amazon RDS on a specific region (eg. us-west-2). In order to do it you will need your account id (eg. 012345678901)  Policy name: RDSFullAccess_us-west-2  Policy document: {  &quot;Version&quot;: &quot;2012-10-17&quot;,  &quot;Statement&quot;: [  {  &quot;Action&quot;: [  &quot;rds:*&quot;  ],  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Resource&quot;: &quot;arn:aws:rds:us-west-2:012345678901:*&quot;  }  ] }  Create an IAM Group  Group name: bonita-provisioning  Select the IAM Policies created previouslyCreate an IAM User  Access type: Programmatic access  Add user to the IAM group created previously  Download as .csv (or copy) Access key information (Access key ID and Secret access key) for later useNow let’s assume you are using an EC2 region which supports the EC2-VPC platform.Therefore a default VPC and default subnets should already be available.  Create an EC2 Security Group  Security group name: sg_bonita-provisioning  Add an Inbound rule to allow communication between Bonita stack components  Type: All Traffic, Source: &amp;lt;security_group_id_of_sg_bonita-provisioning&amp;gt;Add an Inbound rule to allow Ansible to connect via SSH  Type: SSH, Source: My IPAdd an Inbound rule to allow remote connection to Bonita Tomcat via HTTP  Type: Custom TCP Rule, Port Range: 8081, Source: My IPAdd an Inbound rule to allow remote connection to Bonita databases  Type: Custom TCP Rule, Source: My IP  with bonita_db_vendor: postgres - Port Range: 5432  with bonita_db_vendor: mysql - Port Range: 3306  with bonita_db_vendor: oracle - Port Range: 1521Create an EC2 Key Pair  Note: A key pair is linked to an AWS region  Download the .pem private key file  Ensure private key file permissions: $ chmod 400 &amp;lt;keyfile_basename&amp;gt;.pem  Bonita Provisioning solution uses official Ubuntu cloud images as EC2 AMI (Amazon Machine Images).Use the Amazon EC2 AMI Locator tools to identify IDs of such images.Dynamic EC2 inventory configurationWhen deploying to AWS, BCD uses dynamic Amazon EC2 inventory with a ec2_wrapper.sh script.This ec2_wrapper.sh script can be further configured with the ec2.ini.j2 template.For instance, if you are running the BCD controller from outside EC2, the vpc_destination_variable parameter should be set to ip_address. If you are running the BCD controller from within EC2, the vpc_destination_variable parameter should be set to private_ip_address.This parameter is managed by the ec2_vpc_destination_variable BCD variable.More information on dynamic EC2 inventory management can be found in this blog post.",
      "url": " /bcd/1.0/tutorials/aws_prerequisites",
      "author": "",
      "categories": "Tutorials"
    }
    ,
  

    "bcd-1-0-tutorials-bonita-container-custom-initialization-custom-init": {
      "title": "Custom initialization overview",
      "content"     : "Bonita Container Custom InitializationThe Bonita Docker container deployed by BCD can be further customized thanks to a custom initialization mechanism.This feature relies on the ability to extend the Bonita Docker image through custom *.sh shell scripts.Where should I put custom initialization scripts?Static initialization filesDynamic initialization filesWhen are custom initialization scripts invoked?In which order are custom initialization scripts invoked?Examples1. config-workers.sh2. config-cluster.sh.j23. register-event-handler.sh4. deploy-probe.sh5. More examples about REST API authorizationWhere should I put custom initialization scripts?Custom initialization files can be static or they can be dynamic while relying on runtime variables. Dynamic initialization files then leverage the Jinja2 templating framework used by Ansible.Static initialization filesStatic custom initialization files must be placed in BCD’s roles/bonita/files/custom-init.d folder. All files from this folder will be uploaded to the target host regardless their extension. However only the files with a .sh extension will be executed.Here’s the directory layout for a register-event-handler.sh custom script:roles├── bonita│   ├── files│   │   ├── custom-init.d│   │   │   ├── bonita-tenant-sp-custom.xml│   │   │   ├── config-workers.sh│   │   │   ├── event-handler-example-1.0.0-SNAPSHOT.jar│   │   │   └── register-event-handler.shDynamic initialization filesDynamic custom initialization files must be placed in BCD’s roles/bonita/templates/custom-init.d folder. All files with a .j2 extension will be uploaded to the target host and stripped from the .j2 suffix. However only the files with a .sh.j2 extension will be executed.Here’s the directory layout for the provided config-cluster.sh.j2 initialization script:roles├── bonita│   └── templates│   └── custom-init.d│   ├── bonita-platform-sp-cluster-custom.properties.j2│   ├── config-cluster.sh.j2When are custom initialization scripts invoked?Custom initialization scripts are invoked once the database has been initialized and the Tomcat server has been configured with Bonita Platform setup tool.Hence the Bonita Docker image startup sequence can be described as follows:  Initialize database: setup.sh init  Configure Tomcat server: setup.sh configure  Execute custom initialization *.sh scripts found in the container’s /opt/custom-init.d folder  Start Tomcat serverWarning: all custom scripts are re-executed each time the Bonita Docker container is restarted.If you want your script to be executed only once, you need to handle the conditional execution in your custom script itself.For example:#!/bin/bashindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fi## Do some interesting stuff# [...]# Create indicator filetouch ${indicator_path}In which order are custom initialization scripts invoked?Custom scripts are executed in natural sort order as implemented by the ls shell command. It is also referred as natural sort of (version) numbers within text.More precisely scripts are executed in the order returned by this command: ls -v /opt/custom-init.d/*.sh.Examples1. config-workers.shThe config-workers.sh script is provided as part of BCD’s core scripts.In particular it shows how to further configure the server using Bonita Platform setup tool.2. config-cluster.sh.j2The config-cluster.sh.j2 script template is provided as part of BCD’s core scripts.In particular it shows how to conditionally configure a cluster deployment on AWS using BCD variables and Jinja2 templating engine.3. register-event-handler.shThis sample script deploys and registers a Bonita engine Event handler as described in Event handlers Documentation.Assuming the following files:  roles/bonita/files/custom-init.d/event-handler-example-1.0.0-SNAPSHOT.jar (event handler JAR file)  roles/bonita/files/custom-init.d/bonita-tenant-sp-custom.xml (tenant configuration file where the event handler is registered)Here’s a sample register-event-handler.sh script:#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;EVENT_HANDLER_FILENAME=event-handler-example-1.0.0-SNAPSHOT.jarwar_path=$(find &quot;${BONITA_PATH}/Bonita&quot;*&quot;Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/server/webapps&quot; -name bonita.war)script_dir=&quot;$(cd &quot;$(dirname &quot;${BASH_SOURCE[0]}&quot;)&quot; &amp;amp;&amp;amp; pwd)&quot;workdir=&quot;${BONITA_FILES}/register-event-handler&quot;rm -rf ${workdir} &amp;amp;&amp;amp; mkdir -p ${workdir}pushd ${workdir}# copy event handler jarmkdir -p WEB-INF/libcp ${script_dir}/${EVENT_HANDLER_FILENAME} WEB-INF/lib/# repackage warzip -r &quot;${war_path}&quot; &quot;WEB-INF/lib/${EVENT_HANDLER_FILENAME}&quot;# register event handler${BONITA_SETUP_SH} pullcp /opt/custom-init.d/bonita-tenant-sp-custom.xml ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_engine/${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}4. deploy-probe.shThis sample script deploys PSI Probe (an Advanced manager and monitor for Apache Tomcat) along with Bonita in the Tomcat bundle.In particular, it shows how to reference BCD variables in custom initialization files. All custom referenced variables can be defined at BCD scenario level.With this example, PSI Probe will be available at this URL: http://&amp;lt;bonita_host&amp;gt;:8081/probe. To connect to PSI Probe, use the credentials defined with the custom_manager_username and custom_manager_password variables. By default: custom_manager_username=admin and custom_manager_password=t0psecret.deploy-probe.sh.j2#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}script_dir=&quot;$(cd &quot;$(dirname &quot;${BASH_SOURCE[0]}&quot;)&quot; &amp;amp;&amp;amp; pwd)&quot;pushd ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}# Allow Tomcat Manager from different hostcp ${script_dir}/manager-context.xml server/conf/Catalina/localhost/manager.xml# PSI Probecurl -sSL -o server/webapps/probe.war https://github.com/psi-probe/psi-probe/releases/download//probe.warcp ${script_dir}/tomcat-users.xml server/conf/tomcat-users.xml# Create indicator filetouch ${indicator_path}manager-context.xml.j2&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;Context antiResourceLocking=&quot;false&quot; privileged=&quot;true&quot; &amp;gt;  &amp;lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;&quot; /&amp;gt;  &amp;lt;Manager sessionAttributeValueClassNameFilter=&quot;java.lang.(?:Boolean|Integer|Long|Number|String)|org.apache.catalina.filters.CsrfPreventionFilter$LruCache(?:$1)?|java.util.(?:Linked)?HashMap&quot;/&amp;gt;&amp;lt;/Context&amp;gt;tomcat-users.xml.j2&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;tomcat-users xmlns=&quot;http://tomcat.apache.org/xml&quot;  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  xsi:schemaLocation=&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;  version=&quot;1.0&quot;&amp;gt;  &amp;lt;role rolename=&quot;probeuser&quot; /&amp;gt;  &amp;lt;role rolename=&quot;poweruser&quot; /&amp;gt;  &amp;lt;role rolename=&quot;poweruserplus&quot; /&amp;gt;&amp;lt;role rolename=&quot;manager-gui&quot; /&amp;gt;  &amp;lt;user username=&quot;&quot; password=&quot;&quot; roles=&quot;manager-gui&quot; /&amp;gt;&amp;lt;/tomcat-users&amp;gt;5. More examples about REST API authorizationSee how to configure REST API authorization.",
      "url": " /bcd/1.0/tutorials/bonita-container-custom-initialization/custom_init",
      "author": "",
      "categories": "Tutorials, Bonita container custom initialization"
    }
    ,
  

    "bcd-1-0-tutorials-bonita-container-custom-initialization-how-to-configure-rest-api-authorization": {
      "title": "How to configure REST API authorization",
      "content"     : "How to configure REST API authorizationThe Bonita container is launched with REST_API_DYN_AUTH_CHECKS flag set to true by default.It means that all dynamic permissions checks are activated.In the sections below we will manipluate configuration into templates and not at a specific tenant. Indeed the default tenant (1) will be created during the first startup of bonita.Deactivating dynamic permissions checksAdding custom permissionsEnabling debug modeDeactivating dynamic permissions checksBCD 1.0.x, doesn’t manage directly the REST_API_DYN_AUTH_CHECKS environment variable.So to deactivate dynamic permissions checks you will need to use the custom initialization mechanism by adding this kind of script roles/bonita/files/custom-init.d/deactivate-dynamic-permissions-checks.sh#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;# deactivate dynamic permissions checks${BONITA_SETUP_SH} pullrm ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_portal/dynamic-permissions-checks-custom.properties${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}Adding custom permissionsAs described in Bonita documentation, the custom-permissions-mapping.properties file contains custom rules that supplement the resource permissions and compound permissions. By default, this file is empty, because the compound permissions definitions automatically manage the permissions needed for default and custom profiles, and for default and custom pages.If you want to override the default behavior, you can add rules to this file by adding this kind of script roles/bonita/files/custom-init.d/add-custom-permissions.sh#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;# define custom permissions# the profile User have now the permission Organization management and Organization visualization${BONITA_SETUP_SH} pullecho -e &quot;nprofile|User=[organization_management, organization_visualization]&quot; &amp;gt;&amp;gt; ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_portal/custom-permissions-mapping.properties${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}For a more advanced configuration you can also provide directly a file roles/bonita/files/custom-init.d/custom-permissions-mapping.properties and push it with a script like roles/bonita/files/custom-init.d/add-custom-permissions-file.sh#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;# define custom permissions${BONITA_SETUP_SH} pullcp /opt/custom-init.d/custom-permissions-mapping.properties ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_portal/${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}Enabling debug modeIf debug mode is activated, whenever you update a configuration file or a dynamic check script, the changes take effect immediately.To activate debug mode you can create a script like roles/bonita/files/custom-init.d/activate-debug-mode.sh#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;# activate debug mode${BONITA_SETUP_SH} pullsed -i &#39;s/security.rest.api.authorizations.check.debug.*/security.rest.api.authorizations.check.debug true/&#39; ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_portal/security-config.properties${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}",
      "url": " /bcd/1.0/tutorials/bonita-container-custom-initialization/how_to_configure_rest_api_authorization",
      "author": "",
      "categories": "Tutorials, Bonita container custom initialization"
    }
    ,
  

    "bcd-1-0-tutorials-licensing-prerequisites": {
      "title": "Licensing prerequisites",
      "content"     : "Licensing PrerequisitesIn order that your deployment retrieves a license for Bonita automatically, you need to set the following variables in your scenario:Name  Description  Sample  lic_ws_login  Login to Bonitasoft license webservice.  acme  lic_ws_password  Password to Bonitasoft license webservice.  Secr3t  lic_sub_login  Subscription Login provided by Bonitasoft. It has an email address format.  john.doe@acme.com  lic_sub_password  Subscription Password provided by Bonitasoft.  SomePassword  lic_sub_id  Subscription ID provided by Bonitasoft. It’s a string of 15 characters.  a0bA0000001B2Cd  lic_type  Type of license in [production|development|qualification|trial].  trial  lic_name  Full name of the licensee. This field can only contain alphanumeric characters, dashes, underscores and spaces.  John Doe  lic_company  Company name.  ACME Inc  lic_email  Email address where the license will be sent.  john.doe@acme.com  ",
      "url": " /bcd/1.0/tutorials/licensing_prerequisites",
      "author": "",
      "categories": "Tutorials"
    }
    ,
  

    "bcd-1-0-tutorials-quickstart": {
      "title": "Quick start",
      "content"     : "Bonita Continuous Delivery Quick StartBonita Continuous Delivery (BCD) solution is provided as a bonita-continuous-delivery_&amp;lt;version&amp;gt;.tar.gz archive.This page describes how to use this archive to quickly start using Bonita Continuous Delivery solution.Prepare your workstationStep-by-step installationComplete installation exampleUse Bonita Continuous Delivery solutionPrepare your workstationStep-by-step installationIn order to ease your environment setup, we provide a Docker image which contains all required dependencies and tools for the Control Machine (ie. the machine from which Bonita Continuous Delivery commands are launched).Follow these installation steps on your workstation.  Make sure Docker is installed as described in the Install Docker documentation.Extract the bonita-continuous-delivery_&amp;lt;version&amp;gt;.tar.gz archive: $ tar xzf bonita-continuous-delivery_&amp;lt;version&amp;gt;.tar.gzThis step creates a bonita-continuous-delivery_&amp;lt;version&amp;gt; directory which contains:  Bonita Continuous Delivery Ansible playbooks and roles.  A pre-built Docker image for the Control Machine. This Docker image is provided as a bcd-controller_&amp;lt;version&amp;gt;.tar.gz archive located in the bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker directory.Load the bcd-controller_&amp;lt;version&amp;gt;.tar.gz Docker image: $ cd bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker $ gunzip -c bcd-controller_&amp;lt;version&amp;gt;.tar.gz | docker load Loaded image: bonitasoft/bcd-controller:&amp;lt;version&amp;gt; Loaded image: bonitasoft/bcd-controller:latestThe bonitasoft/bcd-controller Docker image is now available. To use the image, it is recommended to prepare the following local files which will be shared as Docker volumes in the next step:  .boto (mounted as /home/bonita/.boto) - The .boto file contains AWS credentials used to make programmatic calls to AWS. The content of a .boto file is as follows:  [Credentials]  aws_access_key_id = &amp;lt;YOUR_AWS_ACCESS_KEY&amp;gt;  aws_secret_access_key = &amp;lt;YOUR_AWS_SECRET_ACCESS_KEY&amp;gt;ssh_private_key (mounted as /home/bonita/.ssh/ssh_private_key) - The ssh_private_key file is the SSH private key used to connect to your target machines. For AWS, this is the private part of your EC2 key pair. This file should only be accessible from your user (chmod 600 ~/.ssh/ssh_private_key).  /local/path/to/bonita-continuous-delivery_&amp;lt;version&amp;gt; (mounted as /home/bonita/bonita-continuous-delivery) - The provided bonita-continuous-delivery directory contains Ansible playbooks for Bonita Continuous Delivery.Start a Docker container for the Control Machine: $ docker run --rm -ti --hostname control_machine --name bcd-controller  -v &amp;lt;local_path_to_.boto_file&amp;gt;:/home/bonita/.boto  -v &amp;lt;local_path_to_bonita-continuous-delivery_directory&amp;gt;:/home/bonita/bonita-continuous-delivery  -v &amp;lt;local_path_to_ssh_private_key_file&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt;  bonitasoft/bcd-controller /bin/bash  Complete installation exampleHere is a complete example of how to install the Control Machine Docker image for Bonita Continuous Delivery.Warning: This example uses fake AWS credentials and SSH private key… :-)Assuming you have a bonita-continuous-delivery_1.0.0.tar.gz archive in your $HOME directory:$ cd $HOME$ tar xzf bonita-continuous-delivery_1.0.0.tar.gz$ cd bonita-continuous-delivery_1.0.0/docker$ gunzip -c bcd-controller_1.0.0.tar.gz | docker load[...]Loaded image: bonitasoft/bcd-controller:1.0.0Loaded image: bonitasoft/bcd-controller:latest$ cd $HOME$ ls -nhtotal 418Mdrwxrwxr-x 12 1000 1000 4,0K juil.  6 11:34 bonita-continuous-delivery_1.0.0-rw-rw-r--  1 1000 1000 418M juil.  6 11:34 bonita-continuous-delivery_1.0.0.tar.gz$ cat ~/.boto[Credentials]aws_access_key_id = AKO9PHAI7YOSHAEMOHS6aws_secret_access_key = aicheeChe8Koh4aeSh3quum4tah8cohku3Hi8Eir$ ls -n ~/.ssh/bonita_us-west-2.pem-rw------- 1 1000 1000 1692 jul. 6 11:36 ~/.ssh/bonita_us-west-2.pem$ docker run --rm -ti --hostname control_machine --name bcd-controller -v ~/.boto:/home/bonita/.boto -v ~/bonita-continuous-delivery_1.0.0:/home/bonita/bonita-continuous-delivery -v ~/.ssh/bonita_us-west-2.pem:/home/bonita/.ssh/bonita_us-west-2.pem bonitasoft/bcd-controller /bin/bashbonita@control_machine:~$bonita@control_machine:~$ cd bonita-continuous-deliverybonita@control_machine:~/bonita-continuous-delivery$Use Bonita Continuous Delivery solutionWe provide a BCD Command Line Interface (CLI) to execute Bonita Continuous Delivery commands.The BCD CLI is directly available as a bcd command when using the bonitasoft/bcd-controller Docker image.The bcd command must be launched from the bonita-continuous-delivery directory where Bonita Continuous Delivery Ansible playbooks are located.You can call the bcd command with the --help option to get available options and commands:bonita@control_machine:~$bonita@control_machine:~$ cd bonita-continuous-deliverybonita@control_machine:~/bonita-continuous-delivery$ bcd --helpUsage: bcd [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...  Bonita Continuous Delivery CLI.Options:  -s, --scenario PATHYAML scenario file (required)  -y, --yes  Execute action without confirmation prompt  -v, --verbose  Enable Ansible verbose mode  --nocolor  Turn output colorization off  -e, --extra-vars TEXT  Extra vars for Ansible (multiple) - Variables are passed using the key=value syntax.  -h, --help Show this help messageCommands:  statusShow the platform status  createCreate AWS instances  deployDeploy Bonita stack  undeploy  Undeploy Bonita stack  destroy   Destroy AWS machines (EC2 instances)",
      "url": " /bcd/1.0/tutorials/quickstart",
      "author": "",
      "categories": "Tutorials"
    }
    ,
  

    "bcd-1-0-tutorials-troubleshooting-guide": {
      "title": "Troubleshooting guide",
      "content"     : "Troubleshooting guideIf you encounter issues during the usage of BCD due to a bad configuration or a network problem, it’s interesting to know that you could be able to simply relaunch your command (create, deploy) after fixing the configuration or the network and it should resume from where it was.Common issuesInvalidAMIID.NotFound and InvalidSubnetID.NotFoundAccessing Bonita logsDebugging Ansible FactsAccessing Ansible LogsCommon issuesInvalidAMIID.NotFound and InvalidSubnetID.NotFoundIf while you launch a create command in order to create instances on AWS you get errors like these:[...]InvalidAMIID.NotFound: The image id &#39;[ami-fc4f5e85]&#39; does not exist[...]Error launching source instance: InvalidSubnetID.NotFound: The subnet ID &#39;subnet-ab123456&#39; does not exist[...]You should check that ec2_subnet_ids and aws_ami correspond to the region set into ec2_region.You may also check that rights linked to your AWS credentials (.boto or .aws) correspond to the actions in your scenario.Accessing Bonita logsIn order to troubleshoot issues you may need to consult Bonita logs.To do so, first you need to identify the target server where the Bonita container is running.It’s possible through the bcd status command:bcd -y -s scenarios/myscenario.yml status[...][10:44:12.802] TASK [List Docker containers.] **************************************************************************************************[...]IP: 54.191.90.85FQDN: ec2-54-191-90-85.us-west-2.compute.amazonaws.comDocker running containers--CONTAINER IDIMAGE  CREATED STATUS  NAMES5d73a2446245bonitasoft/bonita-subscription:7.6.2   6 minutes ago   Up 6 minutesbonita8081[...]Then you will need to connect on this server (either through the IP or FQDN) using ssh.ssh -i ~/.ssh/my_key.pem ubuntu@54.191.90.85You can now display the logs using:docker logs bonita8081If you want to copy all the logs (bonita, catalina) you can use docker cp:docker cp bonita8081:/opt/bonita/BonitaSubscription-7.6.2-Tomcat-8.5.23/server/logs/ /tmp/Then you will be able to retrieve all the files through a scp:scp -i ~/.ssh/my_key.pem ubuntu@54.191.90.85:/tmp/logs /tmp/Debugging Ansible FactsAnsible facts are local variables registered in hosts. It is possible to save them in JSON files with the setup command.$ cd bonita-continuous-delivery$ bcd -y -s scenarios/myscenario.yml create deploy$ ansible all -vv -i inventory/ec2/ec2_wrapper.sh -m setup -u ubuntu --private-key=~/.ssh/my_key.pem --tree tmp_facts/This command will identify every EC2 instance (depending of bcd_stack_id set into ec2.ini by the last bcd deploy command) and put its facts into the tmp_facts directory.Accessing Ansible LogsIn order to troubleshoot issues, you may need to consult Ansible logs.By default, the path of the log is /var/log/ansible.log in your Docker container. You can change this location modifying the variable log_path in the Ansible configuration file located in ansible.cfg.If you want to persist the log, you can add a volume in when you run docker run command like$ docker run --rm -t -i --name bcd-controller -v &amp;lt;local_path_to_.boto&amp;gt;:/home/bonita/.boto -v &amp;lt;local_path_to_bonita-continuous-delivery_folder&amp;gt;:/home/bonita/bonita-continuous-delivery -v &amp;lt;local_path_to_ssh_private_key&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt; -v &amp;lt;local_path_to_your_ansible_log&amp;gt;:/var/log/ansible.log bonitasoft/bcd-controller /bin/bash",
      "url": " /bcd/1.0/tutorials/troubleshooting_guide",
      "author": "",
      "categories": "Tutorials"
    }
    ,
  

    "bcd-2-0-bcd-controller-docker-image-cli": {
      "title": "BCD Command Line Interface",
      "content"     : "Bonita Continuous Delivery CLIThis is a command-line tool for Bonita Continuous Delivery.InstallUsageExamplesMulti command chainingInstallThe CLI is provided as a Python package. Install the package locally as follows:$ cd cli$ pip install --user .This will make the bcd command available under $HOME/.local/bin.Basically make sure to add $HOME/.local/bin to your PATH environment variable in order to make your environment aware of the bcd command.UsageThe bcd command takes a mandatory option called scenario through the -s / --scenario command line option.Then the bcd command provides the following subcommands in order to drive Bonita Continuous Delivery module:Usage: bcd [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...  Bonita Continuous Delivery CLI.Options:  -s, --scenario PATHYAML scenario file (required)  -y, --yes  Execute action without confirmation prompt  -v, --verbose  Enable Ansible verbose mode  --nocolor  Turn output colorization off  -e, --extra-vars TEXT  Extra vars for Ansible (multiple) - Variables are passed using the key=value syntax.  -h, --help Show this help messageCommands:  statusShow the platform status  createCreate AWS instances  deployDeploy Bonita stack  undeploy  Undeploy Bonita stack  destroy   Destroy AWS machines (EC2 instances)Examples$ bcd -s scenarios/uswest2_cluster.yml create$ bcd -s scenarios/vagrant_single.yml -e mail_notification=no -y deploy$ bcd -s scenarios/uswest2_performance.yml destroy --dry-runMulti command chainingThe BCD CLI allows to invoke more than one command in one go. This is useful to chain commands as a pipeline. If one command fails then bcd stops executing any subsequent command it may have.For example:$ bcd -s scenarios/uswest2_cluster.yml -y create deploy",
      "url": " /bcd/2.0/bcd-controller-docker-image/cli",
      "author": "",
      "categories": "BCD Controller Docker image"
    }
    ,
  

    "bcd-2-0-bcd-controller-docker-image-docker": {
      "title": "Docker image overview",
      "content"     : "BCD controller Docker imageThis Docker image provides a ready-to-use environment to launch Bonita Continuous Delivery Ansible playbooks.Install the imageFrom pre-built imageFrom sourceUse the imageConfigure AWS credentialsStart a containerInstall the imageFrom pre-built imageA pre-built BCD controller image is provided with BCD deliverable as a bcd-controller_&amp;lt;version&amp;gt;.tar.gz archive. It is located in the bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker directory.Load this image into Docker engine as follows:$ cd bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker$ gunzip -c bcd-controller_&amp;lt;version&amp;gt;.tar.gz | docker loadLoaded image: bonitasoft/bcd-controller:&amp;lt;version&amp;gt;Loaded image: bonitasoft/bcd-controller:latestFrom sourceYou can also build the image from source. Its Dockerfile is provided with BCD deliverable in the bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker directory.Build the image as follows:$ cd bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker$ docker build -t bonitasoft/bcd-controller .Use the imageConfigure AWS credentialsDynamic Amazon EC2 inventory management for Ansible runs on top of Boto.Boto’s configuration requires the following .boto file to exist in the Docker container’s /home/bonita directory.[Credentials]aws_access_key_id = &amp;lt;YOUR_AWS_ACCESS_KEY&amp;gt;aws_secret_access_key = &amp;lt;YOUR_AWS_SECRET_ACCESS_KEY&amp;gt;Start a container$ docker run --rm -t -i --name bcd-controller -v &amp;lt;local_path_to_.boto&amp;gt;:/home/bonita/.boto -v &amp;lt;local_path_to_bonita-continuous-delivery_folder&amp;gt;:/home/bonita/bonita-continuous-delivery -v &amp;lt;local_path_to_ssh_private_key&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt; bonitasoft/bcd-controller /bin/bash$ cd /home/bonita/bonita-continuous-delivery",
      "url": " /bcd/2.0/bcd-controller-docker-image/docker",
      "author": "",
      "categories": "BCD Controller Docker image"
    }
    ,
  

    "bcd-2-0-bcd-services-and-scenarios-bcd-cli": {
      "title": "Command-line interface",
      "content"     : "BCD command-line interfaceOn this page you will find detailed information about the BCD CLI with usage examples and reference.  RequirementsUsage examplesMulti command chainingCommand-line referenceRequirements  First, the bcd command requires that the BCD_HOME environment variable is set.By default BCD_HOME is set to /home/bonita/bonita-continuous-delivery in the controller container.  Next, the bcd command takes a mandatory option called scenario through the -s / --scenario command line option.This option expects an existing relative or absolute path to a BCD YAML scenario file.The BCD scenario path can also be specified through the BCD_SCENARIO environment variable, hence allowing to skip the -s / --scenario command line option.  Finally, the BCD CLI expects to find Bonita version-specific dependencies in the $BCD_HOME/dependencies directory. This directory must contain:  bonita-subscription_*.tar.gz - (Mandatory) The Bonita Docker image archive  bonita-la-builder-*-exec.jar - (Mandatory) The Bonita Living Application Builder library  bonita-sp-*-maven-repository.zip - (Optional) The Bonita Maven repository zip if required by your Living Application workspace.  Usage examplesRunning the create subcommand of the stack command with scenario command-line option:$ bcd -s scenarios/uswest2_cluster.yml stack createRunning the deploy subcommand of the stack command with scenario command-line option and overridden mail_notification variable:$ bcd -s scenarios/vagrant_single.yml -e mail_notification=no -y stack deployRunning the destroy subcommand of the stack command with BCD_SCENARIO environment variable and subcommand --dry-run option:$ export BCD_SCENARIO=scenarios/uswest2_performance.yml$ bcd stack destroy --dry-runRunning the build subcommand of the livingapp command with BCD_SCENARIO environment variable and subcommand -p and -e options:$ export BCD_SCENARIO=scenarios/euwest1_performance.yml$ bcd livingapp build -p path/to/livingapp-repo -e QualificationRunning the version command which does not require a scenario file:$ bcd versionMulti command chainingThe BCD CLI allows to invoke more than one command in one go. This is useful to chain commands as a pipeline.If one command fails then bcd stops executing any subsequent command it may have.Examples:Running create then deploy subcommands of the stack command:$ bcd -s scenarios/uswest2_cluster.yml -y stack create deployRunning build then deploy subcommands of the livingapp command:$ bcd -s scenarios/vagrant_single.yml --yes livingapp build -p path/to/livingapp-repo -e Qualification deployCommand-line referenceThis section describes the comprehensive usage information for the bcd command.You can also see this information by running bcd --help and bcd [SUBCOMMAND] --help - where SUBCOMMAND is in [livingapp, stack] - from the command line.  bcd  Bonita Continuous Delivery CLI.bcd [OPTIONS] COMMAND [ARGS]...Options  -v, --verbose  Enable Ansible verbose mode-y, --yes  Execute action without confirmation prompt--nocolor  Turn output colorization off-s, --scenario &amp;lt;scenario&amp;gt;  YAML scenario file path - Optional if BCD_SCENARIO environment variable is defined.-e, --extra-vars &amp;lt;extra_vars&amp;gt;  Extra vars for Ansible (multiple) - Variables are passed using the key=value syntax.-h, --help  Show this help message--version  Show the version and exit.livingappManage Bonita Living Application  bcd livingapp [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...  Options  -h, --help  Show this help messagebuild  Build Bonita Living Applicationbcd livingapp build [OPTIONS]Options  -p, --path &amp;lt;path&amp;gt;  Bonita Living Application workspace path-e, --environment &amp;lt;environment&amp;gt;  Name of the process configuration environment as defined in Bonita Studio-X, --debug  Enable debug mode-h, --help  Show this help messagedeploy  Deploy Bonita Living Applicationbcd livingapp deploy [OPTIONS]Options  -p, --path &amp;lt;path&amp;gt;  Bonita Living Application file path-X, --debug  Enable debug mode-h, --help  Show this help message  stackManage Bonita stack (infrastructure)  bcd stack [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...  Options  -h, --help  Show this help messagecreate  Create AWS instancesbcd stack create [OPTIONS]Options  -d, --dry-run  Show an execution plan only-h, --help  Show this help messagedeploy  Deploy Bonita stack (creates Docker containers)bcd stack deploy [OPTIONS]Options  -h, --help  Show this help messagedestroy  Destroy AWS machines (EC2 instances)bcd stack destroy [OPTIONS]Options  -d, --dry-run  Show an execution plan only-h, --help  Show this help messagestatus  Show the platform statusbcd stack status [OPTIONS]Options  -h, --help  Show this help messageundeploy  Undeploy Bonita stack (removes Docker containers)bcd stack undeploy [OPTIONS]Options  -h, --help  Show this help message  versionShow BCD version information  bcd version [OPTIONS]  Options  -h, --help  Show this help message",
      "url": " /bcd/2.0/bcd-services-and-scenarios/bcd_cli",
      "author": "",
      "categories": "BCD services and scenarios"
    }
    ,
  

    "bcd-2-0-bcd-services-and-scenarios-bcd-controller": {
      "title": "Controller Docker image",
      "content"     : "BCD controller Docker imageThe BCD controller image provides a ready-to-use environment to launch Bonita Continuous Delivery CLI and Ansible playbooks.  InstallationUsageStarting a BCD controller with docker runStarting a BCD controller with docker-compose runInstallationA pre-built BCD controller image is provided with BCD deliverable as a bcd-controller_&amp;lt;version&amp;gt;.tar.zip archive. It is located in the bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker directory.Load this image into Docker engine as follows:$ cd bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker$ unzip bcd-controller_&amp;lt;version&amp;gt;.tar.zip$ docker load -i bcd-controller_&amp;lt;version&amp;gt;.tarLoaded image: bonitasoft/bcd-controller:&amp;lt;version&amp;gt;Loaded image: bonitasoft/bcd-controller:latestUsageTo enter the BCD controller environment, a Docker container has to be started on your control host using the BCD controller image.Besides the following files have to be bind mounted from the control host to make them available to the BCD controller container:  /host/path/to/bonita-continuous-delivery_&amp;lt;version&amp;gt; (mounted as /home/bonita/bonita-continuous-delivery) - This directory provides BCD Ansible playbooks and is known as the BCD_HOME directory.This file is required for Provisioning. It is not required for Living App management.&amp;lt;/div&amp;gt;  ssh_private_key (mounted as /home/bonita/.ssh/ssh_private_key) - The ssh_private_key file is the SSH private key used to connect to your target machines. For AWS, this is the private part of your EC2 key pair. This file should only be accessible from your user (chmod 600 ~/.ssh/ssh_private_key).  AWS credentials are required for Provisioning on AWS. It is not required for Living App management.&amp;lt;/div&amp;gt;  .boto (mounted as /home/bonita/.boto) - The .boto file contains AWS credentials used to make programmatic calls to AWS. Indeed dynamic Amazon EC2 inventory management for Ansible runs on top of Boto. The content of a .boto file is as follows:[Credentials]  aws_access_key_id = &amp;lt;YOUR_AWS_ACCESS_KEY&amp;gt;  aws_secret_access_key = &amp;lt;YOUR_AWS_SECRET_ACCESS_KEY&amp;gt;  However AWS credentials can be provided in other ways, for instance with AWS single sign-on.Once the required files are prepared, the BCD controller container can be started in different ways described hereafter.Starting a BCD controller with docker runThe first method to start a BCD Controller Docker container on the control host is to use the docker run command.Example:$ docker run --rm -t -i --name bcd-controller -v &amp;lt;host_path_to_.boto&amp;gt;:/home/bonita/.boto -v &amp;lt;host_path_to_bonita-continuous-delivery_folder&amp;gt;:/home/bonita/bonita-continuous-delivery -v &amp;lt;host_path_to_ssh_private_key&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt; bonitasoft/bcd-controller /bin/bashStarting a BCD controller with docker-compose runThe BCD controller container can also be created and started using Docker Compose. This method enables to configure bind mount volumes in a docker-compose.yml file instead of through command-line options.Example:Here is a docker-compose.yml file example that you can create in your BCD_HOME directory.version: &quot;3.2&quot;services:  bcd:image: bonitasoft/bcd-controllerhostname: bcd-controllerstdin_open: truetty: truecommand: /bin/bashworking_dir: /home/bonita/bonita-continuous-deliveryvolumes:  - .:/home/bonita/bonita-continuous-delivery  - &amp;lt;host_path_to_.boto&amp;gt;:/home/bonita/.boto  - &amp;lt;host_path_to_ssh_private_key&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt;Then start the BCD controller container interactively with:$ docker-compose run --rm bcd",
      "url": " /bcd/2.0/bcd-services-and-scenarios/bcd_controller",
      "author": "",
      "categories": "BCD services and scenarios"
    }
    ,
  

    "bcd-2-0-bcd-services-and-scenarios-scenarios": {
      "title": "Scenario file reference",
      "content"     : "BCD Scenario referenceScenarios enable you to define your infrastructure and Bonita stack. A scenario is a YAML Ansible variable file that BCD injects to the underlying Ansible playbooks. Its syntax basically follows Ansible’s YAML syntax.The variables described in a scenario have precedence over those defined in the playbooks or the group vars. It is still possible to overload scenario variables with --extra-vars declaration in the bcd command line. For instance overloading bonita_version can be interesting if you want to test multiple versions of Bonita without duplicating scenario files.An example scenario file named uswest_performance.yml.EXAMPLE is provided in the scenarios directory. Use this example to customize your scenario and save it with a .yml file extension.Core variablesAWS provider variablesBonita variablesLicensing variablesEmail notification variablesCore variablesThese are general variables used while provisioning your platform.Name  Mandatory  Default  Description  Sample  bcd_provider  Y  -  Infrastructure provider. Choose between aws and static_inventory. With aws provider, BCD may create and destroy EC2 instances of the Bonita stack.  aws  bcd_stack_id  Y  -  Bonita stack identifier used to group machines by stack membership. For AWS deployments the characters allowed are limited to letters, numbers and underscore.  uswest2_test  bcd_inventory  N  -  Ansible inventory path required when bcd_provider is static_inventory. Example static inventories are provided in the ansible/inventory/vagrant directory.  ansible/inventory/vagrant/1-machine/inventory  bonita_on_single_host  N  false  Set to True when all containers of the Bonita stack is deployed on a single host.  true  configuration  Y  -  Configuration filename used to group variables for common deployment types. The corresponding YAML file must exist in the ansible/vars directory.  aws_vars  ansible_ssh_user  N  ubuntu  SSH user used to connect to target hosts.  ubuntu  ansible_private_key_file  Y  -  Path to the private SSH key used to connect to target hosts.  ~/.ssh/ABC_us-west-2.pem  AWS provider variablesThe following variables are specific to AWS deployments ie. when bcd_provider is set to aws.Name  Mandatory  Default  Description  Sample  ec2_region  Y  -  AWS region.  us-west-2  ec2_security_group  Y  -  Security group id for the target instances.  sg-944888f1  ec2_security_group_name  Y  -  Security group name for the target instances.  default  ec2_subnet_ids  Y  -  Subnet id for the target instances.  subnet-aa14e0cf  ec2_keypair  Y  -  Key pair name for the target instances. Linked to ansible_private_key_file.  jenkins_ansible_us-west-2  ec2_discovery_iam_role  N  -  Name of the IAM role to attach to EC2 instances to allow Hazelcast EC2 auto-discovery. This is MANDATORY when deploying a Bonita cluster on AWS with BCD.  ClusterBCD  ec2_vpc_destination_variable  N  -  Type of network address the EC2 dynamic inventory script should use. For instance, if you are running the BCD controller from outside EC2, the vpc_destination_variable parameter should be set to ip_address. If you are running the BCD controller from within EC2, the vpc_destination_variable parameter should be set to private_ip_address.  ip_address  boto_path  N  ~/.boto  Path to the Boto file with the AWS credentials.  ~/.boto  rds  N  false  Use an existing AWS RDS database instance. By default this parameter is set to false to create an EC2 instance for Bonita database.  true  aws_ami  Y  -  Common AMI for all EC2 instances. Depends on AWS region. Should be Ubuntu 14.04 (trusty) or Ubuntu 16.04 (xenial) and ebs-ssd type.  ami-fc4f5e85  aws_database_instance_type  Y  -  EC2 instance type for the database instance.  t2.micro  aws_bonita_instance_type  Y  -  EC2 instance type for the Bonita instances.  t2.micro  aws_load_balancer_instance_type  Y  -  EC2 instance type for the load balancer instance.  t2.micro  aws_assumed_iam_role  N  -  An IAM role can be assumed, so all requests are run as that role. This can be useful for connecting across different accounts, or to limit user access. Set this parameter if you want to assume an IAM role while deploying on AWS. It is useful in an AWS organization with IAM users and multiple AWS accounts. See AWS Organizations  arn:aws:iam::123456789012:role/BCD  Bonita variablesThe following parameters are specific to the Bonita instances.Name  Mandatory  Default  Description  Sample  bonita_version  Y  -  Bonita version. Used for the Docker tar.gz filename  7.7.0  bonita_edition  N  performance  Allowed values: teamwork, efficiency, performancen, community. Used while generating Bonita licenses.  performance  bonita_cluster_mode  N  false  Activates cluster mode for Bonita.  false  bonita_cluster_qty  N  1  Number of instances for Bonita. This variable is also used in EC2 mode for the number of Bonita EC2 instance.  1  bonita_port  N  8081  Bonita HTTP port.  8081  bonita_db_vendor  N  postgres  Database vendor (postgres, mysql, oracle).  postgres  bonita_db_host  N  -  Database host (usually retrieved from inventory).  postgres.a1bac2defghi.us-west-2.rds.amazonaws.com  bonita_db_port  N  5432  Database port.  5432  bonita_db_admin_user  N  postgres  Admin user on database instance.  root  bonita_db_admin_pass  N  mysecretpassword  Admin password on database instance.  password  bonita_http_api  N  false  Activates the Bonita HTTP API.  true  bonita_rest_api_dyn_auth_checks  N  true  Activates dynamic authorization checking on REST API.  false  bonita_published_ports_extra  N  []  A list of additional host-to-container port mappings (&amp;lt;host_port&amp;gt;:&amp;lt;container_port&amp;gt;) to publish.  [ ‘9020:9010’, ‘2222:1111’ ]  Licensing variablesIn order that BCD retrieves Bonita licenses during the deployment of your platform, you need to set the following variables in your scenario:These information are provided by Bonitasoft when you purchase the BCD add-on. Contact your sales representative for further details.Name  Description  Sample  lic_ws_login  Login to Bonitasoft license webservice.  acme  lic_ws_password  Password to Bonitasoft license webservice.  Secr3t  lic_sub_login  Subscription Login provided by Bonitasoft. It has an email address format.  john.doe@acme.com  lic_sub_password  Subscription Password provided by Bonitasoft.  SomePassword  lic_sub_id  Subscription ID provided by Bonitasoft. It’s a string of 15 characters.  a0bA0000001B2Cd  lic_type  Type of license in [production|development|qualification|trial].  trial  lic_name  Full name of the licensee. This field can only contain alphanumeric characters, dashes, underscores and spaces.  John Doe  lic_company  Company name.  ACME Inc  lic_email  Email address where the license will be sent.  john.doe@acme.com  Email notification variablesAn email can be sent automatically with Bonita stack details at the end of the deployment phase. This feature uses Ansible mail module.Name  Mandatory  Default  Description  Sample  mail_notification  N  false  Enable email notification or not.  false  mail_host  N  -  The SMTP server host.  smtp.gmail.com  mail_port  N  -  The SMTP port.  465  mail_username  N  -  The SMTP username.  john.doe@acme.com  mail_password  N  -  The SMTP password.  SomePassword  mail_from  N  -  The email-address the mail is sent from. May contain address and phrase.  john.doe@acme.com (John Doe)  mail_to  N  -  The email-address(es) the mail is being sent to. This is a comma-separated list, which may contain address and phrase portions.  John Doe &amp;lt;john.doe@acme.com&amp;gt;, Suzie Something &amp;lt;sue@example.com&amp;gt;  ",
      "url": " /bcd/2.0/bcd-services-and-scenarios/scenarios",
      "author": "",
      "categories": "BCD services and scenarios"
    }
    ,
  

    "bcd-2-0-getting-started": {
      "title": "Getting started",
      "content"     : "Getting startedThe BCD add-on is provided as a bonita-continuous-delivery_&amp;lt;version&amp;gt;.zip archive.This page describes how to use this archive to start your journey with Bonita Continuous Delivery.Installation guideCommon installation stepsAdditional steps for ProvisioningComplete installation exampleUsing Bonita Continuous Delivery add-onCommand Line InterfaceScenariosInstallation guideIn order to ease your environment setup, we provide a Docker image called BCD Controller image which contains all required dependencies and tools for BCD.Then a BCD Controller container has to be started on the control host, ie. the host from which Bonita Continuous Delivery commands are launched.Common installation stepsFollow these installation steps on your control host.  Make sure Docker is installed as described in the Install Docker documentation.Extract the bonita-continuous-delivery_&amp;lt;version&amp;gt;.zip archive:$ unzip bonita-continuous-delivery_&amp;lt;version&amp;gt;.zipThis step creates a bonita-continuous-delivery_&amp;lt;version&amp;gt; directory which contains:  Bonita Continuous Delivery Ansible playbooks and roles.  A pre-built Docker image for the control host. This Docker image is provided as a bcd-controller_&amp;lt;version&amp;gt;.tar.zip archive located in the bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker directory.Load the bcd-controller_&amp;lt;version&amp;gt;.tar.zip Docker image:$ cd bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker$ unzip bcd-controller_&amp;lt;version&amp;gt;.tar.zip$ docker load -i bcd-controller_&amp;lt;version&amp;gt;.tarLoaded image: bonitasoft/bcd-controller:&amp;lt;version&amp;gt;Loaded image: bonitasoft/bcd-controller:latestThe bonitasoft/bcd-controller Docker image is now available on the control host.Make sure BCD dependencies are present.BCD expects Bonita version-specific dependencies to be present in the bonita-continuous-delivery_&amp;lt;version&amp;gt;/dependencies directory. BCD dependencies are provided separately as a bonita-continuous-delivery-dependencies_&amp;lt;bonita_version&amp;gt;.zip archive.Basically, the following artifacts must be extracted from the bonita-continuous-delivery-dependencies_&amp;lt;bonita_version&amp;gt;.zip archive into the dependencies directory:  bonita-subscription_&amp;lt;bonita_version&amp;gt;.tar.gz  bonita-la-builder-&amp;lt;bonita_version&amp;gt;-exec.jar  bonita-sp-&amp;lt;bonita_version&amp;gt;-maven-repository.zipStart a BCD Controller Docker container on the control host:$ docker run --rm -ti --hostname bcd-controller --name bcd-controller -v &amp;lt;host_path_to_bonita-continuous-delivery_directory&amp;gt;:/home/bonita/bonita-continuous-delivery bonitasoft/bcd-controller /bin/bashThis command bind mounts the bonita-continuous-delivery directory on the control host into the BCD controller container.  You may also start a BCD Controller container using Docker Compose as described in the BCD Controller image detailed documentation.Additional steps for ProvisioningThe following installation steps are required when using BCD for Provisioning Bonita stacks. They are not required for Living Application Management.Licensing prerequisitesWhile provisioning Bonita stacks, BCD automatically retrieves and installs Bonita licenses for the Bonita platform. Therefore, you must have an active Bonitasoft Subscription and a dedicated access to Bonitasoft license service in order to use BCD for Provisioning.Contact your sales representative for more information.AWS PrerequisitesIf you consider deploying to Amazon Web Services (AWS) platform, first read the AWS prerequisites tutorial which describes how to configure AWS for BCD.BCD can create and delete AWS EC2 instances automatically by making programmatic calls to AWS. In order to use this feature, you must provide AWS credentials, for example through a .boto file. The content of a .boto file is as follows:[Credentials]aws_access_key_id = &amp;lt;YOUR_AWS_ACCESS_KEY&amp;gt;aws_secret_access_key = &amp;lt;YOUR_AWS_SECRET_ACCESS_KEY&amp;gt;Then the .boto file has to be mounted from the control host into the BCD controller while starting the container. Add the following option to the docker run command:-v &amp;lt;host_path_to_.boto_file&amp;gt;:/home/bonita/.botoSSH key fileBCD uses SSH to communicate with target machines. Therefore the BCD controller must have access to the related SSH private key file. For AWS, this is the private part of your EC2 key pair. This file must only be accessible from your user (chmod 600 &amp;lt;host_path_to_ssh_private_key_file&amp;gt;).Then the SSH key file has to be mounted from the control host into the BCD controller while starting the container. Add the following option to the docker run command:-v &amp;lt;host_path_to_ssh_private_key_file&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt;Complete installation exampleHere is a complete example of how to install the BCD Controller Docker image.Warning: This example uses fake AWS credentials and SSH private key… :-)Assuming you have a bonita-continuous-delivery_2.0.0.zip archive in your $HOME directory:$ cd $HOME$ unzip bonita-continuous-delivery_2.0.0.zip[...]$ cd bonita-continuous-delivery_2.0.0/docker$ unzip bcd-controller_2.0.0.tar.zip[...]$ docker load -i bcd-controller_2.0.0.tarLoaded image: bonitasoft/bcd-controller:2.0.0Loaded image: bonitasoft/bcd-controller:latestAssuming you have a bonita-continuous-delivery-dependencies_7.7.0.zip archive in your $HOME/bonita-continuous-delivery_2.0.0/dependencies directory:$ cd $HOME/bonita-continuous-delivery_2.0.0/dependencies$ unzip bonita-continuous-delivery-dependencies_7.7.0.zip[...]The next steps of this example are required when using BCD to provision a Bonita stack on AWS.$ cat ~/.boto[Credentials]aws_access_key_id = AKO9PHAI7YOSHAEMOHS6aws_secret_access_key = aicheeChe8Koh4aeSh3quum4tah8cohku3Hi8Eir$ ls -n ~/.ssh/bonita_us-west-2.pem-rw------- 1 1000 1000 1692 jul. 6 11:36 ~/.ssh/bonita_us-west-2.pemFinally here is a sample command to start a BCD controller container:$ docker run --rm -ti --hostname bcd-controller --name bcd-controller -v ~/bonita-continuous-delivery_2.0.0:/home/bonita/bonita-continuous-delivery -v ~/.boto:/home/bonita/.boto -v ~/.ssh/bonita_us-west-2.pem:/home/bonita/.ssh/bonita_us-west-2.pem bonitasoft/bcd-controller /bin/bashbonita@bcd-controller:~$bonita@bcd-controller:~$ cd bonita-continuous-deliverybonita@bcd-controller:~/bonita-continuous-delivery$Using Bonita Continuous Delivery add-onAt this stage of the Getting started guide, you should have a BCD controller container up and running.Command Line InterfaceFrom your BCD controller container, you can now run the bcd command to manage your Bonita stack and Living Application.You can call bcd with the --help option to get available options and commands as follows:bonita@bcd-controller:~/bonita-continuous-delivery$ bcd --helpUsage: bcd [OPTIONS] COMMAND [ARGS]...  Bonita Continuous Delivery CLI.Options:  -v, --verbose  Enable Ansible verbose mode  -y, --yes  Execute action without confirmation prompt  --nocolor  Turn output colorization off  -s, --scenario PATHYAML scenario file path - Optional if `BCD_SCENARIO` environment variable is defined.  -e, --extra-vars TEXT  Extra vars for Ansible (multiple) - Variables are passed using the key=value syntax.  -h, --help Show this help message  --version  Show the version and exit.Commands:  livingapp  Manage Bonita Living Application  stack  Manage Bonita stack (infrastructure)  versionShow BCD version informationRead the BCD Command-line interface page for further information about the BCD CLI usage.ScenariosBCD requires a YAML configuration file called Scenario which describes your infrastructure and the Bonita stack to deploy.An example scenario file named uswest_performance.yml.EXAMPLE is provided in the scenarios directory. Use this example to customize your scenario and save it with a .yml file extension.Read the BCD Scenario reference page for a comprehensive description of scenario variables.",
      "url": " /bcd/2.0/getting_started",
      "author": "",
      "categories": ""
    }
    ,
  

    "bcd-2-0-howtos-how-to-use-bcd-with-data-encrypted": {
      "title": "Use BCD with sensitive data encrypted",
      "content"     : "How to use BCD with sensitive data encryptedBCD involves providing sensitive data like passwords or private credentials through YAML Scenario files. Although you may restrict access to scenario files using file system permissions, it may be advisable to encrypt these sensitive data for even more security.Therefore BCD supports Ansible Vault to encrypt sensitive data. BCD automatically decrypts Vault-encrypted content at runtime when the decryption password is provided.In this tutorial, we will explain how to encrypt files with ansible-vault and how to configure BCD to decrypt these Vault-encrypted data.  Create a Vault password fileA password is required to encrypt/decrypt your sensitive data. BCD requires this password to be stored in a file which path is set in the ANSIBLE_VAULT_PASSWORD_FILE environment variable.  &amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;{:.fa .fa-exclamation-triangle} **Password file permissions**  Ensure permissions on the file are such that no one else can access your password and do not add your password file to source control.The password should be a string stored as a single line in the file.**Example**:  In your BCD controller, create a `vault_pass` file with a **MyV@ultPa55** password and set the `ANSIBLE_VAULT_PASSWORD_FILE` accordingly:```bonita@bcd-controller:~/bonita-continuous-delivery$ echo &quot;MyV@ultPa55&quot; &amp;gt; vault_passbonita@bcd-controller:~/bonita-continuous-delivery$ chmod 600 vault_passbonita@bcd-controller:~/bonita-continuous-delivery$ ls -l $(pwd)/vault_pass -rw-------1 bonita   bonita  12 Apr 30 09:40 /home/bonita/bonita-continuous-delivery/vault_passbonita@bcd-controller:~/bonita-continuous-delivery$ export ANSIBLE_VAULT_PASSWORD_FILE=/home/bonita/bonita-continuous-delivery/vault_pass```  Encrypt your BCD scenario fileAssuming your BCD scenario file contains sensitive data, we are now going to encrypt this file using the ansible-vault encrypt command.Example: In your BCD controller, encrypt your scenarios/myscenario.yml file using the Vault password defined in previous step: bonita@bcd-controller:~/bonita-continuous-delivery$ ansible-vault encrypt scenarios/myscenario.yml Encryption successfulAs a result, the scenarios/myscenario.yml file is Vault-encrypted. It may be safely added to source control as long as the Vault password remains confidential.  &amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;{:.fa .fa-info-circle} **View / Edit / Decrypt**  If you need to view or edit the scenario content, you may use the `ansible-vault view` and `ansible-vault edit` commands respectively.  You may also decrypt your scenario file using the `ansible-vault decrypt` command.  Refer to the [Ansible Vault](https://docs.ansible.com/ansible/latest/user_guide/vault.html) documentation for detailed information about this feature.  Run BCD commands as usualYou may now run BCD commands without any change. BCD and Ansible will automatically decrypt your Vault-encrypted data.  Caveats   You may encrypt several files but the password must be the same for all files you wish to use together at the same time.  Although Ansible supports prompting for a password, BCD only supports a password to be provided through a password file defined by the ANSIBLE_VAULT_PASSWORD_FILE environment variable.",
      "url": " /bcd/2.0/howtos/how_to_use_bcd_with_data_encrypted",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bcd-2-0-howtos-jenkins-example": {
      "title": "Integrate BCD with Jenkins",
      "content"     : "How to integrate BCD with JenkinsThe BCD controller can not only be run interactively, but also within standard Continuous Delivery servers such as Jenkins automation server.The bonita-continuous-delivery_&amp;lt;version&amp;gt;.zip archive provides a jenkins-example directory which contains a minimal working example of a Continuous Delivery platform with Jenkins and BCD.This example will start a pre-configured Jenkins server with a BCD-aware Jenkins slave and ready-to-use Jenkins jobs.It is provided as a Docker Compose project.Therefore you should have Docker and Docker Compose installed on the target host to run this example.This example is provided with Compose file version 3.2 which requires Docker Compose 1.12.0+ and Docker Engine 17.04.0+. Refer to Compose and Docker compatibility matrix and Compose release notes for further details.In this example, a Jenkins slave is created from a Docker image which extends the BCD Controller image. Then an example job is defined as a Jenkins Pipeline job in which bcd commands are invoked.This allows you to easily re-use parts of this example in your own Jenkins instance.Step-by-step run guidePre-configured Jenkins jobsStep-by-step run guideHere is a step-by-step guide to run this example.The following commands are to be executed on the target host where Jenkins is to be installed.  Configure the Docker Compose project.  Rename the docker-compose.override.yml.EXAMPLE file to docker-compose.override.yml (remove the .EXAMPLE extension).  Configure environment and volumes sections and save.Configure initial secrets used by Jenkins and BCD.  Rename the secrets/*Password.EXAMPLE files to secrets/*Password (remove the .EXAMPLE extension).With most Linux distributions, you can do this with the rename command line tool as follows: rename &#39;s/.EXAMPLE//&#39; *.EXAMPLE).  Configure each *Password file with appropriate credentials.Make sure the BCD Controller Docker image is loaded as described in the installation section of the BCD controller Docker image page.  Create and start containers with Docker Compose.$ cd jenkins_example$ docker-compose up -d  As a result Jenkins is up and running on port 9090 of the target host.You can now log-in to Jenkins using one of the pre-configured users:  admin - User with administration rights. Password has been initialized with secrets/adminPassword.  bonita - User with limited rights. Password has been initialized with secrets/bonitaPassword.Important Note: Prepare your BCD scenario and dependencies as usual before using the pre-configured Jenkins jobs.Pre-configured Jenkins jobsOnce authenticated to Jenkins you can now launch pre-configured jobs.This example project provides the following jobs:  bcd-pipeline - this job shows how the BCD CLI can be used to build a Continuous Delivery pipeline for a Bonita Living Application.  bcd-destroy - this job allows to destroy AWS EC2 machines when using BCD with AWS cloud provider.",
      "url": " /bcd/2.0/howtos/jenkins_example",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-living-applications-livingapp-build": {
      "title": "Build a Living App repository",
      "content"     : "How to build a Living App repositoryThis tutorial describes how to build a Bonita Living Application repository from the command line using BCD.A Living Application repository (or Living App repository) contains the artifacts developed in Bonita Studio and the UI Designer. Its content is further described in Bonita’s Workspaces and repositories documentation page.The repository build process allows to generate Bonita deployable artifacts (for instance process .bar files, UI Designer pages .zip files, REST API extensions .zip files).Step-by-step tutorial1. Prepare the repository2. Provide the repository&#39;s build dependencies3. Build the repositoryRepository vs. Builder version compatibilityComplete exampleStep-by-step tutorial1. Prepare the repositoryA Living App repository can be created using Bonita Studio and it can be shared with Git or SVN.So first ensure you have your Living App repository available on your filesystem.For this tutorial, we will use the Bonita Vacation Management example repository publicly available on GitHub.$ cd bonita-continuous-delivery$ git clone https://github.com/bonitasoft/bonita-vacation-management-exampleThis step creates a bonita-continuous-delivery/bonita-vacation-management-example directory which is the Living App repository we are going to build.2. Provide the repository’s build dependenciesThe next step is to provide all dependencies required to build your repository. Hence the following artifatcs must be present in the bonita-continuous-delivery/dependencies directory:bonita-la-builder-&amp;lt;bonita_version&amp;gt;-exec.jarThe Bonita Living Application Builder library. Its version must correspond to the bonita_version variable defined in your BCD scenario. This is the version of the Bonita stack where generated artifacts will be deployed.For instance the bonita-la-builder-7.7.0-exec.jar file must be present to build artifacts meant to be deployed on a Bonita 7.7.0 stack.bonita-sp-*-maven-repository.zipBonita Maven repository zip files if your repository contains REST API extensions. These zip files can be downloaded with your Bonita Subscription on Customer Portal. The version of the Maven repository zip must correspond to the bonita.version property defined in your REST API extension’s pom.xml.3. Build the repositoryBCD is now ready to build your repository using the bcd livingapp build command. From your BCD Controller container, run these commands:$ cd bonita-continuous-delivery$ bcd -s scenarios/euwest1_performance.yml --yes livingapp build -p bonita-vacation-management-example -e QualificationThe build process finally generates a zip package located in the repository’s target repository. The generated archive is named after the repository’s root directory name.For instance with the bonita-vacation-management-example example, a bonita-vacation-management-example/target/bonita-vacation-management-example_&amp;lt;timestamp&amp;gt;.zip file is generated.Refer to the BCD Command-line reference for a complete list of available options for the bcd livingapp build command.Repository vs. Builder version compatibilityThe version of your repository must exactly match the version of the builder library.If versions do not match, the bcd livingapp build command will exit with such a message:[ERROR] Project version (7.7.0) does not match builder version (7.7.1)[13:46:34.469] ERROR: Aborting! Command &amp;lt;livingapp-build&amp;gt; returned non-zero exit code &amp;lt;1&amp;gt;The bcd livingapp build command does not allow to migrate your repository to the builder’s version. Your repository has to be migrated to the appropriate version using Bonita Studio.Complete exampleHere is a complete example of how to build the Bonita Vacation Management example repository for Bonita version 7.7.0.In this example, the REST API extension has a dependency on Bonita 7.6.3.On the control host$ cd bonita-continuous-delivery_2.0.0$ git clone https://github.com/bonitasoft/bonita-vacation-management-example$ ls -nh bonita-vacation-management-exampletotal 60Kdrwxrwxr-x  2 1000 1000 4,0K Mar 29 16:17 applicationsdrwxrwxr-x  2 1000 1000 4,0K Mar 29 16:17 bdmdrwxrwxr-x  2 1000 1000 4,0K Mar 29 16:17 diagramsdrwxrwxr-x  2 1000 1000 4,0K Mar 29 16:17 environementsdrwxrwxr-x  2 1000 1000 4,0K Mar 29 23:29 libdrwxrwxr-x  2 1000 1000 4,0K Mar 29 16:17 organizationsdrwxrwxr-x  2 1000 1000 4,0K Mar 29 16:17 process_configurationsdrwxrwxr-x  2 1000 1000 4,0K Mar 29 16:17 profiles-rw-rw-r--  1 1000 1000  486 Mar 29 16:17 README.mddrwxrwxr-x  3 1000 1000 4,0K Mar 29 16:17 restAPIExtensionsdrwxr-xr-x  6 1000 1000 4,0K Mar 29 23:29 targetdrwxr-xr-x  2 1000 1000 4,0K Mar 29 16:19 web_fragmentsdrwxrwxr-x 11 1000 1000 4,0K Mar 29 16:19 web_pagedrwxr-xr-x 26 1000 1000 4,0K Mar 29 16:19 web_widgetsdrwxrwxr-x  2 1000 1000 4,0K Mar 29 16:17 xsd$ grep &quot;&amp;lt;bonita.version&amp;gt;&quot; bonita-vacation-management-example/restAPIExtensions/tahitiRestApiExtension/pom.xml&amp;lt;bonita.version&amp;gt;7.6.3&amp;lt;/bonita.version&amp;gt;$ ls -nh dependencies total 337M-rw-r--r-- 1 1000 1000  85M Mar 29 12:00 bonita-la-builder-7.7.0-exec.jar-rw-rw-r-- 1 1000 1000 8,7M Mar 29 16:16 bonita-sp-7.6.3-maven-repository.zip-rw-r--r-- 1 1000 1000 253M Mar 29 12:00 bonita-subscription_7.7.0.tar.gz-rw-r--r-- 1 1000 1000  157 Mar 29 11:57 README.md$ grep &quot;bonita_version&quot; scenarios/euwest1_performance.ymlbonita_version: 7.7.0In the BCD controller containerbonita@bcd-controller:~$ cd bonita-continuous-deliverybonita@bcd-controller:~/bonita-continuous-delivery$ bcd -s scenarios/euwest1_performance.yml --yes livingapp build -p bonita-vacation-management-example -e Qualificationbonita@bcd-controller:~/bonita-continuous-delivery$ ls -nh bonita-vacation-management-example/target total 8,1Mdrwxr-xr-x 9 1000 1000 4,0K Mar 29 16:29 bonita-vacation-management-example-rw-r--r-- 1 1000 1000 8,1M Mar 29 16:29 bonita-vacation-management-example_20180329162901.zipdrwxr-xr-x 3 1000 1000 4,0K Mar 29 16:29 bpmndrwxr-xr-x 2 1000 1000 4,0K Mar 29 16:29 generated-jarsdrwxr-xr-x 3 1000 1000 4,0K Mar 29 16:29 ui-designer",
      "url": " /bcd/2.0/howtos/manage-bonita-living-applications/livingapp_build",
      "author": "",
      "categories": "Howtos, Manage Bonita Living Applications"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-living-applications-livingapp-build-and-deploy": {
      "title": "Build and deploy (Best Practices)",
      "content"     : "How to build and deploy Living Apps (Best Practices)Bonita Continuous Delivery enables you to easily build and deploy a Bonita Living Applications on a running Bonita platform.It uses the Bonita Living Application Builder and the Bonita Living Application Deployer.In the following, we present best practices and various uses cases to let you easily build and deploy your Bonita Living Application repository.All examples assume that:  you have cloned the demo Bonita Vacation Management example repositoryGitHub repository as described in the Bonita Living Application Builder documentation  you have already defined a scenario file called build_and_deploy.yml stored in the BCD scenarios directory  you already have a Bonita stack up and running, defined by the build_and_deploy.yml scenario fileIf you want to deploy into a Bonita platform running on an existing machine, you can find an example of a scenario file bonita-continuous-delivery_2.0.0/scenario/build_and_deploy.yml.EXAMPLE with its inventory file in bonita-continuous-delivery_2.0.0/ansible/inventory/static-inventory/livingapp-build-deploy-static-inventory.EXAMPLE.Best practices about repositoriesOne repository per projectUse versioning to manage your historyBuild and deploy straightBuild and select what to deployBuild and select how to deploy parts of the Application ArchiveBest practices about repositoriesThe Bonita Living Application Builder is made to build an entire Bonita repository.It is usually pretty fast, but depending on the size of your repository, the amount of artifacts to build, it can become longer. To avoid such situations, there is some best practices about Bonita repositories that you should respect.One repository per projectA Bonita repository should only contain artifacts related to a given project.For example, if you want to use Bonita to build a loan application and a leave request application, we strongly advise you to manage those two projects in two different repositories. It will allow you to build, deploy and test each project separately easily using Bonita Continuous Delivery.A repository should only contain the resources and the dependencies required to build and deploy the Living Applications of the project. Resources not used by the Living Applications should not be in the repository of the project.Use versioning to manage your historyDuring the life-cycle of a project, resources are brought to evolve. You may need to perform important changes on a process or on a Rest API extension for example. The best way to track the evolution is to use versioning.Before to perform an important change on a resource, make sure to save the current state of your repository by creating a tag for example if you are using Git. Then you can increase the version of your resource and perform the change, knowing that you can easily do a rollback if needed.We do not recommend to duplicate the resource in your repository. If you start to manage your versions this way, your repository will get bigger and bigger, and the time required by the Bonita Living Application Builder to build your repository will increase. Moreover, it is really painful to work on a repository containing all the history of a project, it can lead to many confusions and errors during the development ( dependency issues …).The recommended way is definitively to keep the latest version of each resources in the working repository, and the history on your Version Control System.Since the version 7.7.0 of Bonita, the popular Version Control System Git is integrated in Bonita Studio. It is a fine way to manage properly the versioning of your projects. The Bonita documentation provides an example on how to share a repository on GitHub.Build and deploy straightThis is the simplest use case: you want to build a Bonita repository and deploy all associated resources.To do so, you only have to pass the repository path to the build command and chain a deploy command without path parameterlike in the following:$ bcd -y -s &amp;lt;path/to/scenario&amp;gt; livingapp build -p &amp;lt;path/to/bonita/repository&amp;gt; deployThis command will first build the Bonita repository. The output of the build is a zip file. It is located in the target directory, created by the builder. This zip file corresponds to the Application Archive used by the deployer. It contains all the resources built from the input repository.In a second time, the deployer deploys all those resources on the running Bonita platform.Build and select what to deploySometimes, you may need to perform some actions between the build phase and the deploy phase. You may want to deploy only a subpart of the repository that has been built, or add some external resources in the application archive to deploy. Here are some hints on how to do it.The idea is always the same:  Build a Bonita repository with BCD  Update the application archive created by the builder  Deploy the updated application archiveFirst, we build the Bonita repository:bcd -y -s &amp;lt;path/to/scenario&amp;gt; livingapp build -p &amp;lt;path/to/bonita/repository&amp;gt;The build operation creates a target directory in the Bonita repository. Let’s move to this directory:cd &amp;lt;path/to/bonita/repository&amp;gt;/targetThis directory contains built artifacts, including the application archive we want to update. Keep in mind that the deployer can take a zip file or a directory as input. So, we are going to unzip the raw application archive, in a to-deploy directory:unzip -d to-deploy &amp;lt;bonita-repository-name&amp;gt;_&amp;lt;timestamp&amp;gt;.zipA new directory to-deploy has been createda and it contains all the built artifacts from your Bonita repository.You can perform some actions on the content of this directory to customize your deployment. Here are some use cases:Example 1: I only want to deploy the Business Data Model from my Bonita repositoryIn this example, we only want to deploy the BDM. The to-deploy directory should contain a subfolder bdm. We simply need to tell the deployer to deploy this subfolder as follows:bcd -y -s &amp;lt;path/to/scenario&amp;gt; livingapp deploy -p &amp;lt;path/to/bonita/repository&amp;gt;/target/to-deploy/bdmExample 2: I only want to deploy all the resources from my Bonita repository except applicationsThe to-deploy directory should contain a subfolder applications. We simply need to delete this subfolder, then tell the deployer to deploy the to-deploy directory as follows:rm -rf &amp;lt;path/to/bonita/repository&amp;gt;/target/to-deploy/applications/bcd -y -s &amp;lt;path/to/scenario&amp;gt; livingapp deploy -p &amp;lt;path/to/bonita/repository&amp;gt;/target/to-deployExample 3: I want to add some custom pages in the resources to deployThis use case is a bit more advanced. Imagine that your Bonita repository is stored on a given Git repository and your custom pages used by your applications in an other Git repository. You will have to build your Bonita repository as described above, then to retrieve your custom pages (Git clone…) and to add them to the application archive to deploy.Build and select how to deploy parts of the Application ArchiveAs described in the Bonita Living Application Deployer documentation, it is possible to pass to the deployer a deployment descriptor file. This file must be called deploy.json and be at the root of the application archive.The deployment descriptor file is used to specify which resources have to be deployed, and with which policy. It is an alternative way to select a sub part of the application archive to deploy.An interesting way to use it is to store some deployment descriptor files in your Bonita repository, one for each ‘build and deploy’ scenario you want to perform. Between the build and the deploy  phase, just move the fine deployment descriptor at the root of your application archive, as described above.The format of the deployment descriptor file is not friendly to use. It might evolve in further versions.",
      "url": " /bcd/2.0/howtos/manage-bonita-living-applications/livingapp_build_and_deploy",
      "author": "",
      "categories": "Howtos, Manage Bonita Living Applications"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-living-applications-livingapp-deploy": {
      "title": "Deploy Living App artifacts",
      "content"     : "How to deploy Living App artifactsThis tutorial describes how to deploy Bonita Living Application artifacts from the command line using BCD.  How it worksDeployment conceptsApplication Archive structureDeployment Descriptor fileSupported PoliciesCaveatsHow to useHow it worksThis section provides detailed information of Bonita artifacts deployment with BCD.Deployment conceptsFirst, here are the types of artifacts that can be deployed:  applications  business data model  business data model access controls  layouts  organizations  pages  processes  profiles  REST API extensions  themesThe deployment entry point is called an Application Archive. It consists of all artifacts to be deployed and an optional configuration file called Deployment Descriptor. This file describes which Policy should be applied while deploying each artifact.Application Archive structureThe Application Archive can be a directory or a zip file. It may contain a Deployment Descriptor in the form of a deploy.json file. If not provided, then a Deployment Descriptor is generated in-memory using the following rules:  the type of artifact is determined from the nature of each file  a default policy is applied for each supported artifact to deployHere is an example of Application Archive structure:bonita-vacation-management-example├── applications│   └── Application_Data.xml├── bdm│   └── bdm.zip├── deploy.json├── extensions│   └── tahitiRestApiExtension-1.0.0.zip├── organizations│   └── ACME.xml├── pages│   └── page_ExampleVacationManagement.zip├── processes│   ├── Cancel Vacation Request--1.4.1.bar│   ├── Initiate Vacation Available--1.4.1.bar│   ├── Modify Pending Vacation Request--1.4.1.bar│   ├── New Vacation Request--1.4.1.bar│   └── Remove All Business Data--1.4.1.bar└── profiles└── default_profile.xml  Note: if you provide several artifacts for a resource which is supposed to be single (for instance Business Data Model, Organization), only one of the artifacts will be deployed. There is no guaranty about which file is kept so please avoid this situation to ensure deployment reproducibility.Deployment Descriptor fileThe Deployment Descriptor file must be a valid JSON file named deploy.json and it must be located at the root of the Application Archive.Each artifact to deploy must be defined with the following attributes:  file: (Mandatory) the relative path to the artifact in the Application Archive  policy: (Optional) the name of the policy to apply in case the same artifact is already present in the target Bonita platform. If omitted, then the default policy of the artifact’s type will be applied.Example of Deployment Descriptor file{  &quot;organization&quot;: {&quot;file&quot;: &quot;organizations/ACME.xml&quot;,&quot;policy&quot;: &quot;MERGE_DUPLICATES&quot;  },  &quot;profiles&quot;: [{  &quot;file&quot;: &quot;profiles/default_profile.xml&quot;,  &quot;policy&quot;: &quot;REPLACE_DUPLICATES&quot;},{  &quot;file&quot;: &quot;profiles/custom_profile.xml&quot;,  &quot;policy&quot;: &quot;REPLACE_DUPLICATES&quot;}  ],  &quot;processes&quot;: [{  &quot;file&quot;: &quot;processes/New Vacation Request--1.4.1.bar&quot;,  &quot;policy&quot;: &quot;IGNORE_DUPLICATES&quot;},{  &quot;file&quot;: &quot;processes/Initiate Vacation Available--1.4.1.bar&quot;}  ],  &quot;restAPIExtensions&quot;: [{  &quot;file&quot;: &quot;extensions/tahitiRestApiExtension-1.0.0.zip&quot;,}  ],  &quot;pages&quot;: [{  &quot;file&quot;: &quot;pages/page_ExampleVacationManagement.zip&quot;}  ],  &quot;layouts&quot;: [{  &quot;file&quot;: &quot;layouts/customLayout1.zip&quot;},{  &quot;file&quot;: &quot;layouts/customLayout2.zip&quot;}  ],  &quot;themes&quot;: [  {&quot;file&quot;: &quot;themes/customTheme1.zip&quot;  },  {&quot;file&quot;: &quot;themes/customTheme2.zip&quot;  }],  &quot;applications&quot;: [{  &quot;file&quot;: &quot;applications/Application_Data.xml&quot;,  &quot;policy&quot;: &quot;REPLACE_DUPLICATES&quot;}  ],  &quot;businessDataModel&quot;: {&quot;file&quot;: &quot;bdm/bdm.zip&quot;  },  &quot;bdmAccessControl&quot;: {&quot;file&quot;: &quot;bdm/bdm-access-control.xml&quot;  }}Supported Policies  Applications:  FAIL_ON_DUPLICATES: deployment fails if the Application or ApplicationPage already existsREPLACE_DUPLICATES: (default) if the Application or ApplicationPage already exists, the existing one is deleted and the new one is deployed  Organization:  FAIL_ON_DUPLICATES: if an item already exists, the deployment fails and is reverted to the previous stateIGNORE_DUPLICATES: existing items are keptMERGE_DUPLICATES: (default) existing items in the current organization are updated to have the values of the item in the imported organization  Processes:  FAIL_ON_DUPLICATES: if the process already exists (same name and version), the deployment failsIGNORE_DUPLICATES: only deploys a process when it does not already exist (same name and version)REPLACE_DUPLICATES: (default) if the process already exists (same name and version), the existing one is deleted and the new one is deployed. As a reminder, deleting a process means: disable the process, delete all related cases and delete the process  The following artifacts are used with implicit policies. It means that you do not have to declare those policies in the Deployment Descriptor file. There is no other policy available for those artifacts.  Business Data Model: REPLACE_DUPLICATESBDM access control: REPLACE_DUPLICATESLayouts: REPLACE_DUPLICATESPages: REPLACE_DUPLICATESProfiles: REPLACE_DUPLICATESREST API extensions: REPLACE_DUPLICATESThemes: REPLACE_DUPLICATES  Caveats  Prior to deploying a Business Data Model, the Bonita tenant is paused. So a downtime of the tenant occurs. The tenant is resumed after the deployment of the BDM.  REST API extension authorizations are not configured as part of the deployment process. They have to be configured while provisioning the Bonita platform. See how to configure REST API authorization with BCD.How to useUse the bcd livingapp deploy command to deploy Living App artifacts:bcd -s &amp;lt;scenario&amp;gt; livingapp deploy -p &amp;lt;path&amp;gt;where:  &amp;lt;scenario&amp;gt; is the path to the BCD scenario which defines the target Bonita stack. Artifacts will be deployed using tenant credentials defined by this scenario (bonita_tenant_login and bonita_tenant_password variables).  &amp;lt;path&amp;gt; is the path to the Application Archive to deploy (file or directory).You can add a –debug option to enable debug mode and increase verbosity.  Refer to the BCD Command-line reference for a complete list of available options for the bcd livingapp deploy command.Complete example:Here is how to deploy artifacts of the Bonita Vacation Management example Living App.Assuming that:  artifacts have been built and that a bonita-vacation-management-example_20180329162901.zip Application Archive zip file has been generated in the bonita-vacation-management-example/target directory  a Bonita stack is up and running as defined in a scenarios/euwest1_performance.yml scenario fileIn the BCD controller container:bonita@bcd-controller:~$ cd bonita-continuous-deliverybonita@bcd-controller:~/bonita-continuous-delivery$ ls -nh bonita-vacation-management-example/target total 8,1Mdrwxr-xr-x 9 1000 1000 4,0K Mar 29 16:29 bonita-vacation-management-example-rw-r--r-- 1 1000 1000 8,1M Mar 29 16:29 bonita-vacation-management-example_20180329162901.zipdrwxr-xr-x 3 1000 1000 4,0K Mar 29 16:29 bpmndrwxr-xr-x 2 1000 1000 4,0K Mar 29 16:29 generated-jarsdrwxr-xr-x 3 1000 1000 4,0K Mar 29 16:29 ui-designerThen artifacts can be deployed using the generated zip file as follows:bonita@bcd-controller:~/bonita-continuous-delivery$ bcd -s scenarios/euwest1_performance.yml --yes livingapp deploy -p bonita-vacation-management-example/target/bonita-vacation-management-example_20180329162901.zipArtifacts can also be deployed providing the Application Archive directory as follows:bonita@bcd-controller:~/bonita-continuous-delivery$ bcd -s scenarios/euwest1_performance.yml --yes livingapp deploy -p bonita-vacation-management-example/target/bonita-vacation-management-example",
      "url": " /bcd/2.0/howtos/manage-bonita-living-applications/livingapp_deploy",
      "author": "",
      "categories": "Howtos, Manage Bonita Living Applications"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-stacks-aws-organizations": {
      "title": "Assume IAM role within AWS Organizations",
      "content"     : "Assume IAM role within AWS OrganizationsAWS Organizations offers policy-based management for multiple AWS accounts.If you use an Organization with IAM users (for SSO, see Single Sign-On to AWS Using G Suite), you will have to assume a specific role on the target account. To do so you will still put your aws_access_key_id and aws_secret_access_key into the .boto or .aws/credentials file.Then you will just have to modify the scenario in order to set the corresponding role arn, for example :aws_assumed_iam_role: arn:aws:iam::123456789012:role/BCDNote:  123456789012 represents here the target account  BCD represents here the role on this accountIt implies that you should have created the corresponding role with proper rights. To do so you just have to follow the How to configure Amazon Web Services (AWS) for BCD and in AWS Setup for BCD section replace the point 5 Create an IAM Group by a creation of the corresponding role attached to the IAM Policies created previously.",
      "url": " /bcd/2.0/howtos/manage-bonita-stacks/aws_organizations",
      "author": "",
      "categories": "Howtos, Manage Bonita stacks"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-stacks-aws-prerequisites": {
      "title": "Configure Amazon Web Services (AWS) for BCD",
      "content"     : "How to configure Amazon Web Services (AWS) for BCDThis tutorial describes how to configure Amazon Web Services (AWS) for BCD.These configuration steps are required to allow BCD to programmatically manage your AWS instances and to be able to connect to your Bonita stack.Sign Up for AWSAWS Setup for BCDDynamic EC2 inventory configurationSign Up for AWSIf you do not have an Amazon Web Services account yet, first sign up as described in this AWS user guide: Sign Up for AWS.AWS Setup for BCDIn order to use Amazon EC2 instances, some configuration steps need to be performed as a prerequisite.The following steps are the basic requirements to set up AWS credentials for Ansible automation.Further configuration instructions for AWS single sign-on can be found on this page.  Create an IAM Policy to grant full access to Amazon EC2 on a specific region (eg. us-west-2)  Policy name: EC2FullAccess_us-west-2  Policy document:{ &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [  {  &quot;Action&quot;: &quot;ec2:*&quot;,  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Resource&quot;: &quot;*&quot;,  &quot;Condition&quot;: {  &quot;StringEquals&quot;: {  &quot;ec2:Region&quot;: &quot;us-west-2&quot;  }  }  } ]}  Create an IAM Policy to allow to describe DB instances and list tags (mandatory for dynamic inventory script).  Policy name: RDSDescribeDBInstances  Policy document:{ &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [  {  &quot;Sid&quot;: &quot;Stmt1498730873000&quot;,  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Action&quot;: [  &quot;rds:DescribeDBInstances&quot;,  &quot;rds:ListTagsForResource&quot;  ],  &quot;Resource&quot;: [  &quot;*&quot;  ]  } ]}  Create an IAM Policy to grant full access to Amazon RDS on a specific region (eg. us-west-2). In order to do it you will need your account id (eg. 012345678901)  Policy name: RDSFullAccess_us-west-2  Policy document:{ &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [  {  &quot;Action&quot;: [  &quot;rds:*&quot;  ],  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Resource&quot;: &quot;arn:aws:rds:us-west-2:012345678901:*&quot;  } ]}  Create an IAM Policy to give PassRole permission in order to be able to associate a specific role with the EC2 instances of a cluster.  Policy name: IAMPassRole  Policy document:{ &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [  {  &quot;Action&quot;: &quot;iam:PassRole&quot;,  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Resource&quot;: &quot;*&quot;  } ]}  Create an IAM Group  Group name: bonita-provisioning  Select the IAM Policies created previouslyFor some usage you may be interested to create a role and attach to it the corresponding policies, see Configure AWS single sign-on or Assume IAM role within AWS Organizations.Create an IAM Policy to allow ec2 instances of a cluster to autodiscover themselves on a specific region (eg. us-west-2).  Policy name: ClusterBCD_us-west-2  Policy document:{ &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [  {  &quot;Action&quot;: [  &quot;ec2:DescribeInstances&quot;  ],  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Resource&quot;: &quot;*&quot;,  &quot;Condition&quot;: {  &quot;StringEquals&quot;: {  &quot;ec2:Region&quot;: &quot;us-west-2&quot;  }  }  } ]} Pay attention that for security reasons, pushing AWS user credentials to EC2 instances (as done with BCD 1.0.x) is no longer supported.  Create an IAM Role for an AWS service  Select EC2 to “Allows EC2 instances to call AWS services on your behalf.”  Select the IAM Policy created previously (ClusterBCD_us-west-2)  Role name: ClusterBCDCreate an IAM User  Access type: Programmatic access  Add user to the IAM group created previously  Download as .csv (or copy) Access key information (Access key ID and Secret access key) for later useNow let’s assume you are using an EC2 region which supports the EC2-VPC platform.Therefore a default VPC and default subnets should already be available.  Create an EC2 Security Group  Security group name: sg_bonita-provisioning  Add an Inbound rule to allow communication between Bonita stack components  Type: All Traffic, Source: &amp;lt;security_group_id_of_sg_bonita-provisioning&amp;gt;Add an Inbound rule to allow Ansible to connect via SSH  Type: SSH, Source: My IPAdd an Inbound rule to allow remote connection to Bonita Tomcat via HTTP  Type: Custom TCP Rule, Port Range: 8081, Source: My IPAdd an Inbound rule to allow remote connection to Bonita databases  Type: Custom TCP Rule, Source: My IP  with bonita_db_vendor: postgres - Port Range: 5432  with bonita_db_vendor: mysql - Port Range: 3306  with bonita_db_vendor: oracle - Port Range: 1521Create an EC2 Key Pair  Note: A key pair is linked to an AWS region  Download the .pem private key file  Ensure private key file permissions: $ chmod 400 &amp;lt;keyfile_basename&amp;gt;.pem  BCD is compatible with official Ubuntu cloud images as EC2 AMI (Amazon Machine Images).Use the Amazon EC2 AMI Locator tools to identify IDs of such images.Dynamic EC2 inventory configurationWhen deploying to AWS, BCD uses dynamic Amazon EC2 inventory with a ec2_wrapper.sh script.This ec2_wrapper.sh script can be further configured with the ec2.ini.j2 template.For instance, if you are running the BCD controller from outside EC2, the vpc_destination_variable parameter should be set to ip_address. If you are running the BCD controller from within EC2, the vpc_destination_variable parameter should be set to private_ip_address.This parameter is managed by the ec2_vpc_destination_variable BCD variable.More information on dynamic EC2 inventory management can be found in this blog post.",
      "url": " /bcd/2.0/howtos/manage-bonita-stacks/aws_prerequisites",
      "author": "",
      "categories": "Howtos, Manage Bonita stacks"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-stacks-aws-sso": {
      "title": "Configure AWS single sign-on",
      "content"     : "How to configure AWS single sign-onAWS allows to integrate numerous Third-Party SAML Solution Providers to implement single sign-on.If you implement this kind of authentication, when you start the BCD Controller container it will no longer be necessary to mount the boto file.$ docker run --rm -t -i --name bcd-controller -v &amp;lt;host_path_to_bonita-continuous-delivery_folder&amp;gt;:/home/bonita/bonita-continuous-delivery -v &amp;lt;host_path_to_ssh_private_key&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt; bonitasoft/bcd-controller /bin/bashIndeed you will use ~/.aws directory instead.Single Sign-On to AWS Using G Suite In this step we will provide you an example using G Suite from Google.First, set up a Single Sign-On to AWS using G Suite as described in AWS website.In this previous documentation you have seen how to create an IAM role in your AWS account. It implies that for BCD usage you should have created the corresponding role with proper rights. To do so you just have to follow the How to configure Amazon Web Services (AWS) for BCD and in AWS Setup for BCD section replace the point 5 Create an IAM Group by a creation of the corresponding role attached to the IAM Policies created previously.The BCD Controller already embeds aws-google-auth to manage the authentication.You will need to know Google’s assigned Identity Provider ID (idp-id) and the ID assigned to the SAML service provider (sp-id).idp-id can be found on Google Admin Security &amp;gt; Set up single sign-on (SSO) page in the SSO url provided. For instance: https://accounts.google.com/o/saml2/idp?idpid=123456789012sp-id can be found into the URL of your browser when viewing Google Admin Apps &amp;gt; SAML Apps &amp;gt; Amazon Web Services page. For instance: #AppDetails:service=123456789012After launching the BCD Controller you will have to authenticate yourself as below:aws-google-auth --idp-id Abc012345 --sp-id 123456789012 -p default -u john.doe@acme.comaws-google-auth will store the credentials into ~/.aws directory through the default AWS profileIf you want to use a different profile, you will have to export the variable accordingly:aws-google-auth --idp-id Abc012345 --sp-id 123456789012 -p test -u john.doe@acme.comexport AWS_PROFILE=test",
      "url": " /bcd/2.0/howtos/manage-bonita-stacks/aws_sso",
      "author": "",
      "categories": "Howtos, Manage Bonita stacks"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-stacks-customize-the-bonita-container-custom-init": {
      "title": "Using initialization scripts",
      "content"     : "How to customize the Bonita container using initialization scriptsThe Bonita Docker container deployed by BCD can be further customized thanks to a custom initialization mechanism.This feature relies on the ability to extend the Bonita Docker image through custom *.sh shell scripts.Where should I put custom initialization scripts?Static initialization filesDynamic initialization filesWhen are custom initialization scripts invoked?In which order are custom initialization scripts invoked?Examples1. config-workers.sh2. config-cluster.sh.j23. register-event-handler.sh4. deploy-probe.sh5. More examples about REST API authorizationWhere should I put custom initialization scripts?Custom initialization files can be static or they can be dynamic while relying on runtime variables. Dynamic initialization files then leverage the Jinja2 templating framework used by Ansible.Static initialization filesStatic custom initialization files must be placed in BCD’s roles/bonita/files/custom-init.d folder. All files from this folder will be uploaded to the target host regardless their extension. However only the files with a .sh extension will be executed.Here’s the directory layout for a register-event-handler.sh custom script:roles├── bonita│   ├── files│   │   ├── custom-init.d│   │   │   ├── bonita-tenant-sp-custom.xml│   │   │   ├── config-workers.sh│   │   │   ├── event-handler-example-1.0.0-SNAPSHOT.jar│   │   │   └── register-event-handler.shDynamic initialization filesDynamic custom initialization files must be placed in BCD’s roles/bonita/templates/custom-init.d folder. All files with a .j2 extension will be uploaded to the target host and stripped from the .j2 suffix. However only the files with a .sh.j2 extension will be executed.Here’s the directory layout for the provided config-cluster.sh.j2 initialization script:roles├── bonita│   └── templates│   └── custom-init.d│   ├── bonita-platform-sp-cluster-custom.properties.j2│   ├── config-cluster.sh.j2When are custom initialization scripts invoked?Custom initialization scripts are invoked once the database has been initialized and the Tomcat server has been configured with Bonita Platform setup tool.Hence the Bonita Docker image startup sequence can be described as follows:  Initialize database: setup.sh init  Configure Tomcat server: setup.sh configure  Execute custom initialization *.sh scripts found in the container’s /opt/custom-init.d folder  Start Tomcat serverWarning: all custom scripts are re-executed each time the Bonita Docker container is restarted.If you want your script to be executed only once, you need to handle the conditional execution in your custom script itself.For example:#!/bin/bashindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fi## Do some interesting stuff# [...]# Create indicator filetouch ${indicator_path}In which order are custom initialization scripts invoked?Custom scripts are executed in natural sort order as implemented by the ls shell command. It is also referred as natural sort of (version) numbers within text.More precisely scripts are executed in the order returned by this command: ls -v /opt/custom-init.d/*.sh.Examples1. config-workers.shThe config-workers.sh script is provided as part of BCD’s core scripts.In particular it shows how to further configure the server using Bonita Platform setup tool.2. config-cluster.sh.j2The config-cluster.sh.j2 script template is provided as part of BCD’s core scripts.In particular it shows how to conditionally configure a cluster deployment on AWS using BCD variables and Jinja2 templating engine.3. register-event-handler.shThis sample script deploys and registers a Bonita engine Event handler as described in Event handlers Documentation.Assuming the following files:  roles/bonita/files/custom-init.d/event-handler-example-1.0.0-SNAPSHOT.jar (event handler JAR file)  roles/bonita/files/custom-init.d/bonita-tenant-sp-custom.xml (tenant configuration file where the event handler is registered)Here’s a sample register-event-handler.sh script:#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;EVENT_HANDLER_FILENAME=event-handler-example-1.0.0-SNAPSHOT.jarwar_path=$(find &quot;${BONITA_PATH}/Bonita&quot;*&quot;Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/server/webapps&quot; -name bonita.war)script_dir=&quot;$(cd &quot;$(dirname &quot;${BASH_SOURCE[0]}&quot;)&quot; &amp;amp;&amp;amp; pwd)&quot;workdir=&quot;${BONITA_FILES}/register-event-handler&quot;rm -rf ${workdir} &amp;amp;&amp;amp; mkdir -p ${workdir}pushd ${workdir}# copy event handler jarmkdir -p WEB-INF/libcp ${script_dir}/${EVENT_HANDLER_FILENAME} WEB-INF/lib/# repackage warzip -r &quot;${war_path}&quot; &quot;WEB-INF/lib/${EVENT_HANDLER_FILENAME}&quot;# register event handler${BONITA_SETUP_SH} pullcp /opt/custom-init.d/bonita-tenant-sp-custom.xml ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_engine/${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}4. deploy-probe.shThis sample script deploys PSI Probe (an Advanced manager and monitor for Apache Tomcat) along with Bonita in the Tomcat bundle.In particular, it shows how to reference BCD variables in custom initialization files. All custom referenced variables can be defined at BCD scenario level.With this example, PSI Probe will be available at this URL: http://&amp;lt;bonita_host&amp;gt;:8081/probe. To connect to PSI Probe, use the credentials defined with the custom_manager_username and custom_manager_password variables. By default: custom_manager_username=admin and custom_manager_password=t0psecret.deploy-probe.sh.j2#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}script_dir=&quot;$(cd &quot;$(dirname &quot;${BASH_SOURCE[0]}&quot;)&quot; &amp;amp;&amp;amp; pwd)&quot;pushd ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}# Allow Tomcat Manager from different hostcp ${script_dir}/manager-context.xml server/conf/Catalina/localhost/manager.xml# PSI Probecurl -sSL -o server/webapps/probe.war https://github.com/psi-probe/psi-probe/releases/download//probe.warcp ${script_dir}/tomcat-users.xml server/conf/tomcat-users.xml# Create indicator filetouch ${indicator_path}manager-context.xml.j2&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;Context antiResourceLocking=&quot;false&quot; privileged=&quot;true&quot; &amp;gt;  &amp;lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;&quot; /&amp;gt;  &amp;lt;Manager sessionAttributeValueClassNameFilter=&quot;java.lang.(?:Boolean|Integer|Long|Number|String)|org.apache.catalina.filters.CsrfPreventionFilter$LruCache(?:$1)?|java.util.(?:Linked)?HashMap&quot;/&amp;gt;&amp;lt;/Context&amp;gt;tomcat-users.xml.j2&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;tomcat-users xmlns=&quot;http://tomcat.apache.org/xml&quot;  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  xsi:schemaLocation=&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;  version=&quot;1.0&quot;&amp;gt;  &amp;lt;role rolename=&quot;probeuser&quot; /&amp;gt;  &amp;lt;role rolename=&quot;poweruser&quot; /&amp;gt;  &amp;lt;role rolename=&quot;poweruserplus&quot; /&amp;gt;&amp;lt;role rolename=&quot;manager-gui&quot; /&amp;gt;  &amp;lt;user username=&quot;&quot; password=&quot;&quot; roles=&quot;manager-gui&quot; /&amp;gt;&amp;lt;/tomcat-users&amp;gt;5. More examples about REST API authorizationSee how to configure REST API authorization.",
      "url": " /bcd/2.0/howtos/manage-bonita-stacks/customize-the-bonita-container/custom_init",
      "author": "",
      "categories": "Howtos, Manage Bonita stacks, Customize the Bonita container"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-stacks-customize-the-bonita-container-how-to-configure-rest-api-authorization": {
      "title": "Configuring REST API authorization",
      "content"     : "How to configure REST API authorizationThe Bonita container is launched with REST_API_DYN_AUTH_CHECKS flag set to true by default.It means that all dynamic permissions checks are activated.In the sections below we will manipluate configuration into templates and not at a specific tenant. Indeed the default tenant (1) will be created during the first startup of bonita.Deactivating dynamic permissions checksAdding custom permissionsEnabling debug modeDeactivating dynamic permissions checksSince 2.0.x, BCD manages the REST_API_DYN_AUTH_CHECKS environment through the scenario variable bonita_rest_api_dyn_auth_checks.So to deactivate dynamic permissions checks you will just have to add the following line into your scenario:bonita_rest_api_dyn_auth_checks: falseAdding custom permissionsAs described in Bonita documentation, the custom-permissions-mapping.properties file contains custom rules that supplement the resource permissions and compound permissions. By default, this file is empty, because the compound permissions definitions automatically manage the permissions needed for default and custom profiles, and for default and custom pages.If you want to override the default behavior, you can add rules to this file by adding this kind of script roles/bonita/files/custom-init.d/add-custom-permissions.sh#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;# define custom permissions# the profile User have now the permission Organization management and Organization visualization${BONITA_SETUP_SH} pullecho -e &quot;nprofile|User=[organization_management, organization_visualization]&quot; &amp;gt;&amp;gt; ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_portal/custom-permissions-mapping.properties${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}For a more advanced configuration you can also provide directly a file roles/bonita/files/custom-init.d/custom-permissions-mapping.properties and push it with a script like roles/bonita/files/custom-init.d/add-custom-permissions-file.sh#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;# define custom permissions${BONITA_SETUP_SH} pullcp /opt/custom-init.d/custom-permissions-mapping.properties ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_portal/${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}Enabling debug modeIf debug mode is activated, whenever you update a configuration file or a dynamic check script, the changes take effect immediately.To activate debug mode you can create a script like roles/bonita/files/custom-init.d/activate-debug-mode.sh#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;# activate debug mode${BONITA_SETUP_SH} pullsed -i &#39;s/security.rest.api.authorizations.check.debug.*/security.rest.api.authorizations.check.debug true/&#39; ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_portal/security-config.properties${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}",
      "url": " /bcd/2.0/howtos/manage-bonita-stacks/customize-the-bonita-container/how_to_configure_rest_api_authorization",
      "author": "",
      "categories": "Howtos, Manage Bonita stacks, Customize the Bonita container"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-stacks-customize-the-bonita-container-how-to-enable-remote-monitoring-jmx": {
      "title": "Enabling remote monitoring with JMX",
      "content"     : "How to enable remote monitoring with JMXThe Java virtual machine (Java VM) has built-in instrumentation that enables you to monitor and manage it using the Java Management Extensions (JMX) technology.To enable and configure the ready-to-use JMX agent so that it can monitor and manage the Java VM of the Bonita container, certain system properties must be set and an additional port must be exposed.Adding JMX system propertiesExposing additional portsAdding JMX system propertiesBCD enables you to set system properties to the Java VM through the bonita_java_opts variable. Hence JMX system properties must be set in your YAML scenario as in the following example:bonita_java_opts: &amp;gt;-  -Djava.awt.headless=true  -Xms1024m  -Xmx1024m  -XX:PermSize=128m  -XX:MaxPermSize=128m  -XX:+UseConcMarkSweepGC  -Dcom.sun.management.jmxremote=true  -Dcom.sun.management.jmxremote.port=9010  -Dcom.sun.management.jmxremote.rmi.port=9010  -Dcom.sun.management.jmxremote.local.only=false  -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false  -Djava.rmi.server.hostname=This example configures port 9010 as JMX remote port.Exposing additional portsBy default the Bonita container exposes ports 8080 (Tomcat HTTP port) and 5701 (Hazelcast cluster communication port) to the Docker host. Then BCD publish these 2 ports as follows:  Port 8080 is always published and mapped to the host port defined by bonita_port variable  Port 5701 is only mapped to the host port defined by bonita_hazelcast_port variable when bonita_cluster_mode is enabledAdditionally BCD enables you to publish extra ports through the bonita_published_ports_extra variable. Hence additional port mappings must be added to your YAML scenario as in the following example:bonita_published_ports_extra:  - &quot;9020:9010&quot;As a result you can now connect monitoring tools like JConsole or Java VisualVM using the JMX URL &amp;lt;bonita_docker_host_fqdn_or_ip&amp;gt;:9020.",
      "url": " /bcd/2.0/howtos/manage-bonita-stacks/customize-the-bonita-container/how_to_enable_remote_monitoring_jmx",
      "author": "",
      "categories": "Howtos, Manage Bonita stacks, Customize the Bonita container"
    }
    ,
  

    "bcd-2-0-howtos-manage-bonita-stacks-deploy-with-static-inventory": {
      "title": "Deploy with a static inventory",
      "content"     : "How to deploy Bonita on existing serverBCD can not only deploy your Bonita Stack in the cloud. You can also deploy your stack on your existing hosts.On this page, you will find detailed information about the usage of BCD with your existing hosts and finally, you will see an example, creating virtual machines with Vagrant and deploying your Bonita application with BCD.Preparing configuration filesInventoryScenarioDeploy with VagrantRequirementsStep-by-step tutorial1. Prepare and start your host2. Launch your BCD controller and deploy3. Open bonita urlCleaning up your environmentPreparing configuration filesThere is two main files to configure:InventoryThis file defines the hosts and groups of hosts upon which BCD will operates. The location of the inventory files isbonita-continuous-delivery_x.x.x/ansible/inventory/.and static-inventory-1-machine.EXAMPLE in the static-inventory directory.In this file, there are two group names, database and bonita that must appear and under each one you have to describeyour machines, and a group with the same name of your bonita stack id grouping the database and bonita groups.Also, you have to specify a group variables for bonita group with:  bonita_address, that is the IP of Bonita host  bonita_db_host, that is the IP of your databaseYou can see an example in bonita-continuous-delivery_x.x.x/ansible/inventory/static-inventory/ for one or two machines.It is recommended to have a clear understanding on Ansible InventoriesScenarioThe scenarios follows the same rules as described in the Scenario file reference. There are fiveparameters that you don’t have to forget to set-up:  bcd_provider: Infrastructure provider. It has to be set with static-inventory  ansible_ssh_user: The ssh user to use.  ansible_ssh_private_key_file: Private key file used by ssh.  bcd_inventory: Ansible inventory path required when bcd_provider is static-inventory  configuration: Configuration filename used to group variables for common deployment types.You can see an example of scenario in bonita-continuous-delivery_x.x.x/scenarios/static_inventory.yml.EXAMPLEDeploy with VagrantYou will see a complete example of deploying on existing virtual machines created with Vagrant.For this tutorial it is highly recommended to have a clear understanding of Vagrant prior to reading this documentation.This tutorial is adapted only to the Linux and Mac environment.Requirements  First, Vagrant and Virtualbox as a hypervisor, installed on your host.  Second, you will need to create and configure your host machine using your Vagrantfile.An example of Vagrantfile is provided in your bonita-continuous-delivery_&amp;lt;version&amp;gt;/vagrant/ directory. You can find anexample for one machine or two.  Third, you need to define your infrastructure and Bonita stack with a scenario. An example scenario file named vagrant_single.yml.EXAMPLE is provided in the bonita-continuous-delivery_x.x.x/scenarios. For moreinformation you can read the BCD Scenario reference  Finally, the virtual machine that you will create must have access to the Internet because some packages will be updated/installed.Step-by-step tutorialHere is a complete example using the configuration files provided.This example uses an insecure private key. See more…Assuming you have a bonita-continuous-delivery_2.0.0 directory in your $HOME directory.1. Prepare and start your hostThis step will create and configure a single virtual machine with an IP 192.168.10.10 defined in VagrantfileIn your host machine:$ cd $HOME/bonita-continuous-delivery_2.0.0/vagrant/1-machine/$ vagrant upBringing machine &#39;bonita-stack&#39; up with &#39;virtualbox&#39; provider...==&amp;gt; bonita-stack: Importing base box &#39;ubuntu/xenial64&#39;...[...]==&amp;gt; bonita-stack: Setting up libpython-stdlib:amd64 (2.7.12-1~16.04) ...==&amp;gt; bonita-stack: Setting up python (2.7.12-1~16.04) ...$ VBoxManage list runningvms&quot;1-machine_bonita-stack_1525085617284_45644&quot; {553ff7af-4d9a-4325-a902-ae17edce1e54}2. Launch your BCD controller and deploy$ docker run --rm -t -i --name bcd-controller -v $HOME/bonita-continuous-delivery_2.0.0/:/home/bonita/bonita-continuous-delivery -v ~/.vagrant.d/insecure_private_key:/home/bonita/.vagrant.d/insecure_private_key bonitasoft/bcd-controller /bin/bashbonita@bcd-controller:~$ cd bonita-continuous-deliverybonita@bcd-controller:~/bonita-continuous-delivery$bonita@bcd-controller:~/bonita-continuous-delivery$bcd -s scenario/vagrant_single.yml stack deploy3. Open bonita urlYou should now be able to access Bonita Portal at  http://192.168.10.10:8081/bonitaCleaning up your environmentIt is recommended to undeploy your Bonita application with the BCD controller like in the following:$ bcd -y -s &amp;lt;path/to/scenario&amp;gt; stack undeployAfter, you can destroy your virtual machine vagrant destroy command in the same path of your Vagrantfile.You can read more about the Vagrant CLI",
      "url": " /bcd/2.0/howtos/manage-bonita-stacks/deploy_with_static_inventory",
      "author": "",
      "categories": "Howtos, Manage Bonita stacks"
    }
    ,
  

    "bcd-2-0-index": {
      "title": "index",
      "content"     : "Bonita Continuous Delivery Add-onThis add-on provides a solution to use Continuous Delivery practice for your Bonita Living Application development and deployment.It is composed of two main parts:  First a solution for Bonita stack provisioning on Cloud or on-premise.  Second a framework for continuous integration of Living Application. This CI framework will be delivered in future versions of the add-on.This documentation focus on the first part: the solution and tooling for provisioning of a Bonita stack.The tool is composed of a set of scripts to deploy a full Bonita stack automatically (database and Bonita Tomcat application server).This toolkit is compatible with Amazon EC2 cloud platform (AWS), on premises servers and local virtual machines via Vagrant.These scripts are powered by Ansible. Short note from Wikipedia:Ansible is a free software platform for configuring and managing computers. It combines multi-node software deployment, ad hoc task execution, and configuration management. It manages nodes over SSH or PowerShell and requires Python (2.4 or later) to be installed on them. Modules work over JSON and standard output and can be written in any programming language. The system uses YAML to express reusable descriptions of systems.The Bonita Continuous Delivery (BCD) tooling is provided through a Docker container called BCD Controller. In this controller you’ll find all useful tooling to manage your provisioning of Bonita platform and more. This controller should be installed on your local machine.  A “Host” can be an EC2 instance or a dedicated server.  Files organization on the local machine:  ~/.boto = should contains all credential to your AWS account (if any)  ~/bonita-continuous-delivery = used as a work directory for the scripts.  ~/.ssh/private_key = used to allow access to hosts  AWS PrerequisitesBonita Licensing PrerequisitesQuickstartHow to useEC2 instances creationDeployment and TestEC2 Instances DeletionAdvanced usageInstalling a custom BCD ControllerDive into the scenariosKnown issuesAWS PrerequisitesIn order to be able to deploy on Amazon Web Services please start to read the AWS Prerequisites section.Bonita Licensing PrerequisitesTo use this tool, you must have an active Bonitasoft Subscription and a dedicated access to the license service. please contact your Sales representative for more information.To automatically retrieve the Bonita licenses for your platforms please take a look at the Licensing Prerequisites section.QuickstartIf you have fulfilled all the prerequisites then you can follow the Quickstart guide.How to useThe nominal usage of BCD can de described as the following workflow:  (Optional) Amazon EC2 instance creation  Bonita platform deployment in EC2 or on premises  (Optional) Amazon EC2 instance deletionThe user must specify the bcd_stack_id variable for each command in order to identify its infrastructure. Multiple tests with different bcd_stack_id can be used simultaneously even on AWS. The bcd_stack_id variable should contain only letters, digits or underscore characters (see https://github.com/ansible/ansible/blob/v2.3.1.0-1/contrib/inventory/ec2.py#L1555).In order to describe a new infrastructure and software configuration (aka. scenario), you need to prepare the following files:  scenarios/&amp;lt;scenario_name&amp;gt;.yml: this YAML file should gather all relevant variables which describe the scenario  inventory/&amp;lt;inventory_file&amp;gt;: this folder should describe the target infrastructure - Dynamic EC2 inventory is automatically used when provisioning AWS instances.Finally start Bonita stack provisioning by invoking the bcd Command Line Interface (BCD CLI).The BCD CLI is directly available as a bcd command when using the BCD Controller Docker image (@see the Quickstart guide).Examples:$ bcd -s scenarios/uswest_performance.yml create$ bcd -s scenarios/uswest_performance.yml --yes deploy$ bcd -s scenarios/uswest_performance.yml destroy --dry-run$ bcd -s scenarios/vagrant_cluster.yml deploy$ bcd -s scenarios/vagrant_cluster.yml --yes undeploy$ bcd -s scenarios/uswest2_cluster.yml -y create deployEC2 instances creationThe create_aws.yml playbook goal is to create EC2 instances.Example: Create 3 x t2.micro EC2 instancesOne t2.micro for the database, one for Bonita.$ bcd -s scenarios/uswest_performance.yml createDeployment and TestDynamic EC2 InventoryOnce EC2 instances are created, you can continue with deployment as follows:$ bcd -s scenarios/uswest_performance.yml deployThis command will read the scenarios/uswest_performance.yml configuration file and provision existing EC2 instances accordingly.Static On-premises InventoryAssuming a server is already up and running (eg. perf-host), you can use these scripts to deploy a Bonita stack on a static infrastructure.$ bcd -s scenarios/perf-host_cluster.yml deployThis command will read the scenarios/perf-host_cluster.yml configuration file and provision an existing server accordingly.VagrantWe provide 2 sample Vagrant layouts - 1-machine and 2-machines - which you can find in the vagrant directory.  Create the machine infrastructure with vagrant up.  Start provisioning by invoking the bcd CLI.Examples:$ bcd -s scenarios/vagrant_performance.yml deploy$ bcd -s scenarios/vagrant_cluster.yml deploy$ bcd -s scenarios/vagrant_performance.yml -e &quot;bcd_inventory=inventory/vagrant/2-machines/inventory&quot; deploy# The latter syntax allows to override the bcd_inventory variable from the command line.EC2 Instances DeletionThe destroy_aws.yml playbook goal is to delete EC2 instances. When tests have finished, you may delete every related EC2 instances like this:$ bcd -s scenarios/uswest_performance.yml destroy --dry-run$ bcd -s scenarios/uswest_performance.yml --yes destroyAdvanced usageInstalling a custom BCD ControllerIn order to setup your own environment without the BCD Controller Docker image, you can follow the installation procedure described in its Dockerfile.The BCD controller Dockerfile is provided with BCD deliverable in the bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker directory.Dive into the scenariosFor further details see this section.Known issuesFor further details see this section.",
      "url": " /bcd/2.0/index",
      "author": "",
      "categories": ""
    }
    ,
  

    "bcd-2-0-release-notes": {
      "title": "Release notes",
      "content"     : "Release notesLimitations and known issuesWhat&#39;s new in 1.0.5 (2018-05-04)BugfixesWhat&#39;s new in 1.0.4 (2018-04-05)BugfixesWhat&#39;s new in 1.0.3 (2018-03-08)BugfixesInternal refactoringWhat&#39;s new in 1.0.2 (2018-02-02)BugfixesWhat&#39;s new in 1.0.1 (2018-01-05)BugfixesLimitations and known issues  The same BCD stack cannot be managed with multiple BCD controller instances due to the use of Terraform “local” backend.What’s new in 1.0.5 (2018-05-04)Bugfixes  BCD-200 Database container is not created with provided Vagrant inventories  BCD-241 ‘Install license modules’ task fails  BCD-243 vagrant failed to download ubuntu box: 404 Not FoundWhat’s new in 1.0.4 (2018-04-05)Bugfixes  BCD-234 ‘Install python modules’ task fails due to pip 10What’s new in 1.0.3 (2018-03-08)Bugfixes  BCD-204 Hibernate cache is not disabled on cluster deploymentsInternal refactoring  BCD-171 Refactor license request script using bonita_license module  Set bcd_cli module version to 1.0.2What’s new in 1.0.2 (2018-02-02)Bugfixes  BCD-142 Failures while loading Docker images do not stop BCD command  BCD-189 Database instance (AWS) and container (Docker) is created although ‘bonita_db_host’ is set  BCD-190 boto file is required for Vagrant deployments  BCD-191 ‘bcd status’ command fails when docker is not installed yet on target hosts  BCD-192 Timestamp is not displayed in BCD CLI stdout  BCD-196 ‘–nocolor’ is not a recognized BCD CLI optionWhat’s new in 1.0.1 (2018-01-05)Bugfixes  BCD-104 An EC2 instance is created for database even when rds=”true”  BCD-141 Undeploy doesn’t free disk space of docker volumes",
      "url": " /bcd/2.0/release_notes",
      "author": "",
      "categories": ""
    }
    ,
  

    "bcd-2-0-requirements-and-compatibility": {
      "title": "Requirements and compatibility",
      "content"     : "Requirements and compatibilityThis page describes which system requirements need to be met in order to use the Bonita Continuous Delivery Add-On.You will also find information about BCD and Bonita version compatibility.  System requirementsControl hostBonita stack hostsJenkins serverVersion compatibilitySystem requirementsThere are different environments where requirements are to be met for BCD:  Control host - the host where your BCD controller will run.  Bonita stack hosts - the target hosts where your Bonita stack will be deployed using BCD.  Jenkins server - the server where BCD commands are executed by Jenkins Continuous Integration platform.Control hostThe Docker Engine must be up and running on your control host prior to using BCD. BCD is compatible with Docker version 17.04.0 and above.You may have Docker Community Edition (Docker CE) or Docker Enterprise Edition (Docker EE) installed on your host to start using BCD.  The Docker Engine may be installed on Linux, MacOS, Microsoft Windows or Cloud platforms as described in Docker installation guide.Bonita stack hosts  These requirements must be fulfilled when using BCD for Provisioning. They apply to target hosts where the Bonita stack will be deployed.The system requirements for the target hosts are as follows:  Minimum hardware requirements: 1 CPU / 1GiB RAM / 8GiB storage (Equivalent to AWS EC2 t2.micro instance)  Supported operating systems: Ubuntu-14.04, Ubuntu-16.04Besides, the following technical requirements must be met:  Target hosts must have Internet access in order to communicate with Bonitasoft License webservice.It is also required to install packages and to pull Docker public images for the database instance when applicable.  Target hosts must be accessible from the BCD controller using SSH public-key authentication.  The user configured to connect to the target hosts must have sudo or root privileges in order to install the Bonita stack.Basically, here are the steps to manually install a target host for BCD:  Install one of the supported operating systems.  Create a user and grant sudo or root privileges.  Generate SSH keys for this user.The SSH private key has to be retrieved on your BCD controller and its path configured in your BCD scenario.Jenkins serverBCD commands may be executed by a Jenkins agent (slave) which runs the BCD controller Docker container.Therefore the Jenkins server shall meet the same requirements as the Control host.Version compatibilityThe following table shows which BCD versions support specific Bonita releases.This compatibility information is also specified in the Release notes for each version of BCD.BCD versionBonita release2.0.07.7.0  If a Bonita release is not listed in the previous table, then it is not supported by the BCD Add-On.",
      "url": " /bcd/2.0/requirements-and-compatibility",
      "author": "",
      "categories": ""
    }
    ,
  

    "bcd-2-0-scenarios": {
      "title": "Scenario variables reference",
      "content"     : "Bonita Platform Provisioning scenariosWith scenarios, you can define your infrastructure, Bonita installation and potential tests you want to execute. A scenario is a YAML Ansible variable file injected in Ansible with the command -e &quot;@/path/to/scenario.yml&quot;. The variables described in a scenario have precedence over those defined in the playbooks or the group vars. It is possible to overload these variables with a declaration of additional variables after this, in order to test multiple alternatives (for instance overloading bonita_version can be interesting if one wants to test multiple versions of Bonita.The format is flat as shows this sample :bcd_stack_id: vagrantconfiguration: vagrant_varsbonita_cluster_mode: falsebonita_cluster_qty: 1The following sections describe the main and mandatory variables.Infrastructure and misc.Vagrant scenariosOn-premises scenariosAWS Cloud scenariosBonitaEmail notificationInfrastructure and misc.Some parameters are mandatory for general provisioning and test description.Name  Mandatory  Default  Description  Sample  bcd_stack_id  Y     Bonita stack identifier used to group machines by stack membership. For AWS deployments the characters allowed are limited to letters, numbers and underscore.  uswest2_test  configuration  Y     Configuration filename. Initialize main variables. Choose between aws_vars, vagrant_vars  aws_vars  ansible_ssh_user  N  ubuntu  SSH user  ubuntu  ansible_private_key_file  Y  -  Path for the private SSH key.  ~/.ssh/jenkins_ansible_us-west-2.pem  Vagrant scenariosIn case of Vagrant scenario, for testing purposes. The configuration file value should be vagrant_vars.On-premises scenariosIn case of on-premises scenario. An inventory with all the corresponding machines should be used. A configuration file similar to vagrant_vars can be used.AWS Cloud scenariosIn case of AWS deployments. The configuration file value should be  aws_vars in this case.Name  Mandatory  Default  Description  Sample  ec2_region  Y     AWS region.  us-west-2  ec2_security_group  Y     Security group id for the target instances  sg-944888f1  ec2_security_group_name  Y     Security group name for the target instances  default  ec2_subnet_ids  Y     Subnet id for the target instances  subnet-aa14e0cf  ec2_keypair  Y     Key pair name for the target instances. Linked to ansible_private_key_file.  jenkins_ansible_us-west-2  boto_path  N  ~/.boto  Path to the Boto file with the AWS credentials.     rds  N  false  Precises if we use RDS for the Bonita BPM databases or if we use a Docker container deployed in an EC2 instance instead (default)  true  The following figure describes for each tier the important variables.Name  Mandatory  Default  Description  Sample  aws_ami  Y     Common AMI for all EC2 instances. Depends on region. Should be Ubuntu 14.04 (trusty) and ebs-ssd type.  ami-fc4f5e85  aws_database_instance_type  Y     Instance type for the database instance  t2.micro  aws_bonita_instance_type  Y     Instance type for the Bonita instance  t2.micro  aws_load_balancer_instance_type  Y     Instance type for the load balancer instance  t2.micro  BonitaSome parameters should be precised for Bonita. The corresponding Docker tar files should be present in docker directory.Name  Mandatory  Default  Description  Sample  bonita_version  Y     Bonita version. Used for the Docker tar.gz filename  7.5.0  bonita_edition  N  yes  performance edition of Bonita by default, other values: teamwork, efficiency, community. Docker tar filename depends on this.  performance  bonita_cluster_mode  N  false  Activates cluster mode for Bonita  false  bonita_cluster_qty  N  1  Number of instances for Bonita. This variable is also used in EC2 mode for the number of Bonita EC2 instance.  1  bonita_port  N  8081  Bonita HTTP port  8081  bonita_db_vendor  N  postgres  Database vendor (postgres, mysql, oracle)  postgres  bonita_db_host  N     Database host (usually retrieved from inventory)  postgres.a1bac2defghi.us-west-2.rds.amazonaws.com  bonita_db_port  N  5432  Database port  5432  bonita_db_admin_user  N  postgres  Admin user on database instance  root  bonita_db_admin_pass  N  mysecretpassword  Admin password on database instance  password  Email notificationAn email can be sent automatically with Bonita stack details at the end of the deployment phase. This feature uses Ansible mail module.Name  Mandatory  Default  Description  Sample  mail_notification  N  false  Enable email notification or not.  false  mail_host  N  -  The SMTP server host.  smtp.gmail.com  mail_port  N  -  The SMTP port.  465  mail_username  N  -  The SMTP username.  john.doe@acme.com  mail_password  N  -  The SMTP password.  SomePassword  mail_from  N  -  The email-address the mail is sent from. May contain address and phrase.  john.doe@acme.com (John Doe)  mail_to  N  -  The email-address(es) the mail is being sent to. This is a comma-separated list, which may contain address and phrase portions.  John Doe &amp;lt;john.doe@acme.com&amp;gt;, Suzie Something &amp;lt;sue@example.com&amp;gt;  ",
      "url": " /bcd/2.0/scenarios",
      "author": "",
      "categories": ""
    }
    ,
  

    "bcd-2-0-troubleshooting-guide": {
      "title": "Troubleshooting guide",
      "content"     : "Troubleshooting guideIf you encounter issues during the usage of BCD due to a bad configuration or a network problem, it’s interesting to know that you could be able to simply relaunch your command (create, deploy) after fixing the configuration or the network and it should resume from where it was.Common issuesInvalidAMIID.NotFound and InvalidSubnetID.NotFoundAccessing Bonita logsDebugging Ansible FactsAccessing Ansible LogsCommon issuesInvalidAMIID.NotFound and InvalidSubnetID.NotFoundIf while you launch a create command in order to create instances on AWS you get errors like these:[...]InvalidAMIID.NotFound: The image id &#39;[ami-fc4f5e85]&#39; does not exist[...]Error launching source instance: InvalidSubnetID.NotFound: The subnet ID &#39;subnet-ab123456&#39; does not exist[...]You should check that ec2_subnet_ids and aws_ami correspond to the region set into ec2_region.You may also check that rights linked to your AWS credentials (.boto or .aws) correspond to the actions in your scenario.Accessing Bonita logsIn order to troubleshoot issues you may need to consult Bonita logs.To do so, first you need to identify the target server where the Bonita container is running.It’s possible through the bcd stack status command:bcd -y -s scenarios/myscenario.yml stack status[...][10:44:12.802] TASK [List Docker containers.] **************************************************************************************************[...]IP: 54.191.90.85FQDN: ec2-54-191-90-85.us-west-2.compute.amazonaws.comDocker running containers--CONTAINER IDIMAGE  CREATED STATUS  NAMES5d73a2446245bonitasoft/bonita-subscription:7.6.2   6 minutes ago   Up 6 minutesbonita8081[...]Then you will need to connect on this server (either through the IP or FQDN) using ssh.ssh -i ~/.ssh/my_key.pem ubuntu@54.191.90.85You can now display the logs using:docker logs bonita8081If you want to copy all the logs (bonita, catalina) you can use docker cp:docker cp bonita8081:/opt/bonita/BonitaSubscription-7.6.2-Tomcat-8.5.23/server/logs/ /tmp/Then you will be able to retrieve all the files through a scp:scp -i ~/.ssh/my_key.pem ubuntu@54.191.90.85:/tmp/logs /tmp/Debugging Ansible FactsAnsible facts are local variables registered in hosts. It is possible to save them in JSON files with the setup command.$ cd bonita-continuous-delivery$ bcd -y -s scenarios/myscenario.yml stack create deploy$ ansible all -vv -i ansible/inventory/ec2/ec2_wrapper.sh -m setup -u ubuntu --private-key=~/.ssh/my_key.pem --tree tmp_facts/This command will identify every EC2 instance (depending of bcd_stack_id set into ec2.ini by the last bcd stack deploy command) and put its facts into the tmp_facts directory.Accessing Ansible LogsIn order to troubleshoot issues, you may need to consult Ansible logs.By default, the path of the log is /var/log/ansible.log in your Docker container. You can change this location modifying the variable log_path in the Ansible configuration file located in /home/bonita/bonita-continuous-delivery/ansible/ansible.cfg.If you want to persist the log, you can add a volume in when you run docker run command like$ docker run --rm -t -i --name bcd-controller -v &amp;lt;host_path_to_.boto&amp;gt;:/home/bonita/.boto -v &amp;lt;host_path_to_bonita-continuous-delivery_folder&amp;gt;:/home/bonita/bonita-continuous-delivery -v &amp;lt;host_path_to_ssh_private_key&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt; -v &amp;lt;host_path_to_your_ansible_log&amp;gt;:/var/log/ansible.log bonitasoft/bcd-controller /bin/bash",
      "url": " /bcd/2.0/troubleshooting_guide",
      "author": "",
      "categories": ""
    }
    ,
  

    "bcd-2-0-tutorials-aws-prerequisites": {
      "title": "AWS prerequisites",
      "content"     : "AWS prerequisitesSign Up for AWSAWS Setup for BCDDynamic EC2 inventory configurationSign Up for AWSIf you do not have an Amazon Web Services (AWS) account yet, first sign up as described in this AWS user guide: Sign Up for AWS.AWS Setup for BCDIn order to use Amazon EC2 instances, some configuration steps need to be performed as a prerequisite.The following steps are required to set up AWS credentials for Ansible automation.  Create an IAM Policy to grant full access to Amazon EC2 on a specific region (eg. us-west-2)  Policy name: EC2FullAccess_us-west-2  Policy document: {  &quot;Version&quot;: &quot;2012-10-17&quot;,  &quot;Statement&quot;: [  {  &quot;Action&quot;: &quot;ec2:*&quot;,  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Resource&quot;: &quot;*&quot;,  &quot;Condition&quot;: {  &quot;StringEquals&quot;: {  &quot;ec2:Region&quot;: &quot;us-west-2&quot;  }  }  }  ] }  Create an IAM Policy to allow to describe DB instances and list tags (mandatory for dynamic inventory script).  Policy name: RDSDescribeDBInstances  Policy document: {  &quot;Version&quot;: &quot;2012-10-17&quot;,  &quot;Statement&quot;: [  {  &quot;Sid&quot;: &quot;Stmt1498730873000&quot;,  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Action&quot;: [  &quot;rds:DescribeDBInstances&quot;,  &quot;rds:ListTagsForResource&quot;  ],  &quot;Resource&quot;: [  &quot;*&quot;  ]  }  ] }  Create an IAM Policy to grant full access to Amazon RDS on a specific region (eg. us-west-2). In order to do it you will need your account id (eg. 012345678901)  Policy name: RDSFullAccess_us-west-2  Policy document: {  &quot;Version&quot;: &quot;2012-10-17&quot;,  &quot;Statement&quot;: [  {  &quot;Action&quot;: [  &quot;rds:*&quot;  ],  &quot;Effect&quot;: &quot;Allow&quot;,  &quot;Resource&quot;: &quot;arn:aws:rds:us-west-2:012345678901:*&quot;  }  ] }  Create an IAM Group  Group name: bonita-provisioning  Select the IAM Policies created previouslyCreate an IAM User  Access type: Programmatic access  Add user to the IAM group created previously  Download as .csv (or copy) Access key information (Access key ID and Secret access key) for later useNow let’s assume you are using an EC2 region which supports the EC2-VPC platform.Therefore a default VPC and default subnets should already be available.  Create an EC2 Security Group  Security group name: sg_bonita-provisioning  Add an Inbound rule to allow communication between Bonita stack components  Type: All Traffic, Source: &amp;lt;security_group_id_of_sg_bonita-provisioning&amp;gt;Add an Inbound rule to allow Ansible to connect via SSH  Type: SSH, Source: My IPAdd an Inbound rule to allow remote connection to Bonita Tomcat via HTTP  Type: Custom TCP Rule, Port Range: 8081, Source: My IPAdd an Inbound rule to allow remote connection to Bonita databases  Type: Custom TCP Rule, Source: My IP  with bonita_db_vendor: postgres - Port Range: 5432  with bonita_db_vendor: mysql - Port Range: 3306  with bonita_db_vendor: oracle - Port Range: 1521Create an EC2 Key Pair  Note: A key pair is linked to an AWS region  Download the .pem private key file  Ensure private key file permissions: $ chmod 400 &amp;lt;keyfile_basename&amp;gt;.pem  Bonita Provisioning solution uses official Ubuntu cloud images as EC2 AMI (Amazon Machine Images).Use the Amazon EC2 AMI Locator tools to identify IDs of such images.Dynamic EC2 inventory configurationWhen deploying to AWS, BCD uses dynamic Amazon EC2 inventory with a ec2_wrapper.sh script.This ec2_wrapper.sh script can be further configured with the ec2.ini.j2 template.For instance, if you are running the BCD controller from outside EC2, the vpc_destination_variable parameter should be set to ip_address. If you are running the BCD controller from within EC2, the vpc_destination_variable parameter should be set to private_ip_address.This parameter is managed by the ec2_vpc_destination_variable BCD variable.More information on dynamic EC2 inventory management can be found in this blog post.",
      "url": " /bcd/2.0/tutorials/aws_prerequisites",
      "author": "",
      "categories": "Tutorials"
    }
    ,
  

    "bcd-2-0-tutorials-bonita-container-custom-initialization-custom-init": {
      "title": "Custom initialization overview",
      "content"     : "Bonita Container Custom InitializationThe Bonita Docker container deployed by BCD can be further customized thanks to a custom initialization mechanism.This feature relies on the ability to extend the Bonita Docker image through custom *.sh shell scripts.Where should I put custom initialization scripts?Static initialization filesDynamic initialization filesWhen are custom initialization scripts invoked?In which order are custom initialization scripts invoked?Examples1. config-workers.sh2. config-cluster.sh.j23. register-event-handler.sh4. deploy-probe.sh5. More examples about REST API authorizationWhere should I put custom initialization scripts?Custom initialization files can be static or they can be dynamic while relying on runtime variables. Dynamic initialization files then leverage the Jinja2 templating framework used by Ansible.Static initialization filesStatic custom initialization files must be placed in BCD’s roles/bonita/files/custom-init.d folder. All files from this folder will be uploaded to the target host regardless their extension. However only the files with a .sh extension will be executed.Here’s the directory layout for a register-event-handler.sh custom script:roles├── bonita│   ├── files│   │   ├── custom-init.d│   │   │   ├── bonita-tenant-sp-custom.xml│   │   │   ├── config-workers.sh│   │   │   ├── event-handler-example-1.0.0-SNAPSHOT.jar│   │   │   └── register-event-handler.shDynamic initialization filesDynamic custom initialization files must be placed in BCD’s roles/bonita/templates/custom-init.d folder. All files with a .j2 extension will be uploaded to the target host and stripped from the .j2 suffix. However only the files with a .sh.j2 extension will be executed.Here’s the directory layout for the provided config-cluster.sh.j2 initialization script:roles├── bonita│   └── templates│   └── custom-init.d│   ├── bonita-platform-sp-cluster-custom.properties.j2│   ├── config-cluster.sh.j2When are custom initialization scripts invoked?Custom initialization scripts are invoked once the database has been initialized and the Tomcat server has been configured with Bonita Platform setup tool.Hence the Bonita Docker image startup sequence can be described as follows:  Initialize database: setup.sh init  Configure Tomcat server: setup.sh configure  Execute custom initialization *.sh scripts found in the container’s /opt/custom-init.d folder  Start Tomcat serverWarning: all custom scripts are re-executed each time the Bonita Docker container is restarted.If you want your script to be executed only once, you need to handle the conditional execution in your custom script itself.For example:#!/bin/bashindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fi## Do some interesting stuff# [...]# Create indicator filetouch ${indicator_path}In which order are custom initialization scripts invoked?Custom scripts are executed in natural sort order as implemented by the ls shell command. It is also referred as natural sort of (version) numbers within text.More precisely scripts are executed in the order returned by this command: ls -v /opt/custom-init.d/*.sh.Examples1. config-workers.shThe config-workers.sh script is provided as part of BCD’s core scripts.In particular it shows how to further configure the server using Bonita Platform setup tool.2. config-cluster.sh.j2The config-cluster.sh.j2 script template is provided as part of BCD’s core scripts.In particular it shows how to conditionally configure a cluster deployment on AWS using BCD variables and Jinja2 templating engine.3. register-event-handler.shThis sample script deploys and registers a Bonita engine Event handler as described in Event handlers Documentation.Assuming the following files:  roles/bonita/files/custom-init.d/event-handler-example-1.0.0-SNAPSHOT.jar (event handler JAR file)  roles/bonita/files/custom-init.d/bonita-tenant-sp-custom.xml (tenant configuration file where the event handler is registered)Here’s a sample register-event-handler.sh script:#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;EVENT_HANDLER_FILENAME=event-handler-example-1.0.0-SNAPSHOT.jarwar_path=$(find &quot;${BONITA_PATH}/Bonita&quot;*&quot;Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/server/webapps&quot; -name bonita.war)script_dir=&quot;$(cd &quot;$(dirname &quot;${BASH_SOURCE[0]}&quot;)&quot; &amp;amp;&amp;amp; pwd)&quot;workdir=&quot;${BONITA_FILES}/register-event-handler&quot;rm -rf ${workdir} &amp;amp;&amp;amp; mkdir -p ${workdir}pushd ${workdir}# copy event handler jarmkdir -p WEB-INF/libcp ${script_dir}/${EVENT_HANDLER_FILENAME} WEB-INF/lib/# repackage warzip -r &quot;${war_path}&quot; &quot;WEB-INF/lib/${EVENT_HANDLER_FILENAME}&quot;# register event handler${BONITA_SETUP_SH} pullcp /opt/custom-init.d/bonita-tenant-sp-custom.xml ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_engine/${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}4. deploy-probe.shThis sample script deploys PSI Probe (an Advanced manager and monitor for Apache Tomcat) along with Bonita in the Tomcat bundle.In particular, it shows how to reference BCD variables in custom initialization files. All custom referenced variables can be defined at BCD scenario level.With this example, PSI Probe will be available at this URL: http://&amp;lt;bonita_host&amp;gt;:8081/probe. To connect to PSI Probe, use the credentials defined with the custom_manager_username and custom_manager_password variables. By default: custom_manager_username=admin and custom_manager_password=t0psecret.deploy-probe.sh.j2#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}script_dir=&quot;$(cd &quot;$(dirname &quot;${BASH_SOURCE[0]}&quot;)&quot; &amp;amp;&amp;amp; pwd)&quot;pushd ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}# Allow Tomcat Manager from different hostcp ${script_dir}/manager-context.xml server/conf/Catalina/localhost/manager.xml# PSI Probecurl -sSL -o server/webapps/probe.war https://github.com/psi-probe/psi-probe/releases/download//probe.warcp ${script_dir}/tomcat-users.xml server/conf/tomcat-users.xml# Create indicator filetouch ${indicator_path}manager-context.xml.j2&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;Context antiResourceLocking=&quot;false&quot; privileged=&quot;true&quot; &amp;gt;  &amp;lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;&quot; /&amp;gt;  &amp;lt;Manager sessionAttributeValueClassNameFilter=&quot;java.lang.(?:Boolean|Integer|Long|Number|String)|org.apache.catalina.filters.CsrfPreventionFilter$LruCache(?:$1)?|java.util.(?:Linked)?HashMap&quot;/&amp;gt;&amp;lt;/Context&amp;gt;tomcat-users.xml.j2&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;tomcat-users xmlns=&quot;http://tomcat.apache.org/xml&quot;  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  xsi:schemaLocation=&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;  version=&quot;1.0&quot;&amp;gt;  &amp;lt;role rolename=&quot;probeuser&quot; /&amp;gt;  &amp;lt;role rolename=&quot;poweruser&quot; /&amp;gt;  &amp;lt;role rolename=&quot;poweruserplus&quot; /&amp;gt;&amp;lt;role rolename=&quot;manager-gui&quot; /&amp;gt;  &amp;lt;user username=&quot;&quot; password=&quot;&quot; roles=&quot;manager-gui&quot; /&amp;gt;&amp;lt;/tomcat-users&amp;gt;5. More examples about REST API authorizationSee how to configure REST API authorization.",
      "url": " /bcd/2.0/tutorials/bonita-container-custom-initialization/custom_init",
      "author": "",
      "categories": "Tutorials, Bonita container custom initialization"
    }
    ,
  

    "bcd-2-0-tutorials-bonita-container-custom-initialization-how-to-configure-rest-api-authorization": {
      "title": "How to configure REST API authorization",
      "content"     : "How to configure REST API authorizationThe Bonita container is launched with REST_API_DYN_AUTH_CHECKS flag set to true by default.It means that all dynamic permissions checks are activated.In the sections below we will manipluate configuration into templates and not at a specific tenant. Indeed the default tenant (1) will be created during the first startup of bonita.Deactivating dynamic permissions checksAdding custom permissionsEnabling debug modeDeactivating dynamic permissions checksBCD 1.0.x, doesn’t manage directly the REST_API_DYN_AUTH_CHECKS environment variable.So to deactivate dynamic permissions checks you will need to use the custom initialization mechanism by adding this kind of script roles/bonita/files/custom-init.d/deactivate-dynamic-permissions-checks.sh#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;# deactivate dynamic permissions checks${BONITA_SETUP_SH} pullrm ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_portal/dynamic-permissions-checks-custom.properties${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}Adding custom permissionsAs described in Bonita documentation, the custom-permissions-mapping.properties file contains custom rules that supplement the resource permissions and compound permissions. By default, this file is empty, because the compound permissions definitions automatically manage the permissions needed for default and custom profiles, and for default and custom pages.If you want to override the default behavior, you can add rules to this file by adding this kind of script roles/bonita/files/custom-init.d/add-custom-permissions.sh#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;# define custom permissions# the profile User have now the permission Organization management and Organization visualization${BONITA_SETUP_SH} pullecho -e &quot;nprofile|User=[organization_management, organization_visualization]&quot; &amp;gt;&amp;gt; ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_portal/custom-permissions-mapping.properties${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}For a more advanced configuration you can also provide directly a file roles/bonita/files/custom-init.d/custom-permissions-mapping.properties and push it with a script like roles/bonita/files/custom-init.d/add-custom-permissions-file.sh#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;# define custom permissions${BONITA_SETUP_SH} pullcp /opt/custom-init.d/custom-permissions-mapping.properties ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_portal/${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}Enabling debug modeIf debug mode is activated, whenever you update a configuration file or a dynamic check script, the changes take effect immediately.To activate debug mode you can create a script like roles/bonita/files/custom-init.d/activate-debug-mode.sh#!/bin/bashset -euxo pipefailindicator_path=/opt/$(basename $BASH_ARGV)-executedif [ -f ${indicator_path} ]; then  echo &quot;Custom script already executed&quot; &amp;amp;&amp;amp; return 0fiBONITA_PATH=${BONITA_PATH:-/opt/bonita}BONITA_FILES=${BONITA_FILES:-/opt/files}BONITA_SETUP_SH=&quot;${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/setup.sh&quot;# activate debug mode${BONITA_SETUP_SH} pullsed -i &#39;s/security.rest.api.authorizations.check.debug.*/security.rest.api.authorizations.check.debug true/&#39; ${BONITA_PATH}/Bonita*Subscription-${BONITA_VERSION}-Tomcat-${TOMCAT_VERSION}/setup/platform_conf/current/tenant_template_portal/security-config.properties${BONITA_SETUP_SH} push# Create indicator filetouch ${indicator_path}",
      "url": " /bcd/2.0/tutorials/bonita-container-custom-initialization/how_to_configure_rest_api_authorization",
      "author": "",
      "categories": "Tutorials, Bonita container custom initialization"
    }
    ,
  

    "bcd-2-0-tutorials-licensing-prerequisites": {
      "title": "Licensing prerequisites",
      "content"     : "Licensing PrerequisitesIn order that your deployment retrieves a license for Bonita automatically, you need to set the following variables in your scenario:Name  Description  Sample  lic_ws_login  Login to Bonitasoft license webservice.  acme  lic_ws_password  Password to Bonitasoft license webservice.  Secr3t  lic_sub_login  Subscription Login provided by Bonitasoft. It has an email address format.  john.doe@acme.com  lic_sub_password  Subscription Password provided by Bonitasoft.  SomePassword  lic_sub_id  Subscription ID provided by Bonitasoft. It’s a string of 15 characters.  a0bA0000001B2Cd  lic_type  Type of license in [production|development|qualification|trial].  trial  lic_name  Full name of the licensee. This field can only contain alphanumeric characters, dashes, underscores and spaces.  John Doe  lic_company  Company name.  ACME Inc  lic_email  Email address where the license will be sent.  john.doe@acme.com  ",
      "url": " /bcd/2.0/tutorials/licensing_prerequisites",
      "author": "",
      "categories": "Tutorials"
    }
    ,
  

    "bcd-2-0-tutorials-quickstart": {
      "title": "Quick start",
      "content"     : "Bonita Continuous Delivery Quick StartBonita Continuous Delivery (BCD) solution is provided as a bonita-continuous-delivery_&amp;lt;version&amp;gt;.tar.gz archive.This page describes how to use this archive to quickly start using Bonita Continuous Delivery solution.Prepare your workstationStep-by-step installationComplete installation exampleUse Bonita Continuous Delivery solutionPrepare your workstationStep-by-step installationIn order to ease your environment setup, we provide a Docker image which contains all required dependencies and tools for the Control Machine (ie. the machine from which Bonita Continuous Delivery commands are launched).Follow these installation steps on your workstation.  Make sure Docker is installed as described in the Install Docker documentation.Extract the bonita-continuous-delivery_&amp;lt;version&amp;gt;.tar.gz archive: $ tar xzf bonita-continuous-delivery_&amp;lt;version&amp;gt;.tar.gzThis step creates a bonita-continuous-delivery_&amp;lt;version&amp;gt; directory which contains:  Bonita Continuous Delivery Ansible playbooks and roles.  A pre-built Docker image for the Control Machine. This Docker image is provided as a bcd-controller_&amp;lt;version&amp;gt;.tar.gz archive located in the bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker directory.Load the bcd-controller_&amp;lt;version&amp;gt;.tar.gz Docker image: $ cd bonita-continuous-delivery_&amp;lt;version&amp;gt;/docker $ gunzip -c bcd-controller_&amp;lt;version&amp;gt;.tar.gz | docker load Loaded image: bonitasoft/bcd-controller:&amp;lt;version&amp;gt; Loaded image: bonitasoft/bcd-controller:latestThe bonitasoft/bcd-controller Docker image is now available. To use the image, it is recommended to prepare the following local files which will be shared as Docker volumes in the next step:  .boto (mounted as /home/bonita/.boto) - The .boto file contains AWS credentials used to make programmatic calls to AWS. The content of a .boto file is as follows:  [Credentials]  aws_access_key_id = &amp;lt;YOUR_AWS_ACCESS_KEY&amp;gt;  aws_secret_access_key = &amp;lt;YOUR_AWS_SECRET_ACCESS_KEY&amp;gt;ssh_private_key (mounted as /home/bonita/.ssh/ssh_private_key) - The ssh_private_key file is the SSH private key used to connect to your target machines. For AWS, this is the private part of your EC2 key pair. This file should only be accessible from your user (chmod 600 ~/.ssh/ssh_private_key).  /local/path/to/bonita-continuous-delivery_&amp;lt;version&amp;gt; (mounted as /home/bonita/bonita-continuous-delivery) - The provided bonita-continuous-delivery directory contains Ansible playbooks for Bonita Continuous Delivery.Start a Docker container for the Control Machine: $ docker run --rm -ti --hostname control_machine --name bcd-controller  -v &amp;lt;local_path_to_.boto_file&amp;gt;:/home/bonita/.boto  -v &amp;lt;local_path_to_bonita-continuous-delivery_directory&amp;gt;:/home/bonita/bonita-continuous-delivery  -v &amp;lt;local_path_to_ssh_private_key_file&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt;  bonitasoft/bcd-controller /bin/bash  Complete installation exampleHere is a complete example of how to install the Control Machine Docker image for Bonita Continuous Delivery.Warning: This example uses fake AWS credentials and SSH private key… :-)Assuming you have a bonita-continuous-delivery_1.0.0.tar.gz archive in your $HOME directory:$ cd $HOME$ tar xzf bonita-continuous-delivery_1.0.0.tar.gz$ cd bonita-continuous-delivery_1.0.0/docker$ gunzip -c bcd-controller_1.0.0.tar.gz | docker load[...]Loaded image: bonitasoft/bcd-controller:1.0.0Loaded image: bonitasoft/bcd-controller:latest$ cd $HOME$ ls -nhtotal 418Mdrwxrwxr-x 12 1000 1000 4,0K juil.  6 11:34 bonita-continuous-delivery_1.0.0-rw-rw-r--  1 1000 1000 418M juil.  6 11:34 bonita-continuous-delivery_1.0.0.tar.gz$ cat ~/.boto[Credentials]aws_access_key_id = AKO9PHAI7YOSHAEMOHS6aws_secret_access_key = aicheeChe8Koh4aeSh3quum4tah8cohku3Hi8Eir$ ls -n ~/.ssh/bonita_us-west-2.pem-rw------- 1 1000 1000 1692 jul. 6 11:36 ~/.ssh/bonita_us-west-2.pem$ docker run --rm -ti --hostname control_machine --name bcd-controller -v ~/.boto:/home/bonita/.boto -v ~/bonita-continuous-delivery_1.0.0:/home/bonita/bonita-continuous-delivery -v ~/.ssh/bonita_us-west-2.pem:/home/bonita/.ssh/bonita_us-west-2.pem bonitasoft/bcd-controller /bin/bashbonita@control_machine:~$bonita@control_machine:~$ cd bonita-continuous-deliverybonita@control_machine:~/bonita-continuous-delivery$Use Bonita Continuous Delivery solutionWe provide a BCD Command Line Interface (CLI) to execute Bonita Continuous Delivery commands.The BCD CLI is directly available as a bcd command when using the bonitasoft/bcd-controller Docker image.The bcd command must be launched from the bonita-continuous-delivery directory where Bonita Continuous Delivery Ansible playbooks are located.You can call the bcd command with the --help option to get available options and commands:bonita@control_machine:~$bonita@control_machine:~$ cd bonita-continuous-deliverybonita@control_machine:~/bonita-continuous-delivery$ bcd --helpUsage: bcd [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...  Bonita Continuous Delivery CLI.Options:  -s, --scenario PATHYAML scenario file (required)  -y, --yes  Execute action without confirmation prompt  -v, --verbose  Enable Ansible verbose mode  --nocolor  Turn output colorization off  -e, --extra-vars TEXT  Extra vars for Ansible (multiple) - Variables are passed using the key=value syntax.  -h, --help Show this help messageCommands:  statusShow the platform status  createCreate AWS instances  deployDeploy Bonita stack  undeploy  Undeploy Bonita stack  destroy   Destroy AWS machines (EC2 instances)",
      "url": " /bcd/2.0/tutorials/quickstart",
      "author": "",
      "categories": "Tutorials"
    }
    ,
  

    "bcd-2-0-tutorials-troubleshooting-guide": {
      "title": "Troubleshooting guide",
      "content"     : "Troubleshooting guideIf you encounter issues during the usage of BCD due to a bad configuration or a network problem, it’s interesting to know that you could be able to simply relaunch your command (create, deploy) after fixing the configuration or the network and it should resume from where it was.Common issuesInvalidAMIID.NotFound and InvalidSubnetID.NotFoundAccessing Bonita logsDebugging Ansible FactsAccessing Ansible LogsCommon issuesInvalidAMIID.NotFound and InvalidSubnetID.NotFoundIf while you launch a create command in order to create instances on AWS you get errors like these:[...]InvalidAMIID.NotFound: The image id &#39;[ami-fc4f5e85]&#39; does not exist[...]Error launching source instance: InvalidSubnetID.NotFound: The subnet ID &#39;subnet-ab123456&#39; does not exist[...]You should check that ec2_subnet_ids and aws_ami correspond to the region set into ec2_region.You may also check that rights linked to your AWS credentials (.boto or .aws) correspond to the actions in your scenario.Accessing Bonita logsIn order to troubleshoot issues you may need to consult Bonita logs.To do so, first you need to identify the target server where the Bonita container is running.It’s possible through the bcd status command:bcd -y -s scenarios/myscenario.yml status[...][10:44:12.802] TASK [List Docker containers.] **************************************************************************************************[...]IP: 54.191.90.85FQDN: ec2-54-191-90-85.us-west-2.compute.amazonaws.comDocker running containers--CONTAINER IDIMAGE  CREATED STATUS  NAMES5d73a2446245bonitasoft/bonita-subscription:7.6.2   6 minutes ago   Up 6 minutesbonita8081[...]Then you will need to connect on this server (either through the IP or FQDN) using ssh.ssh -i ~/.ssh/my_key.pem ubuntu@54.191.90.85You can now display the logs using:docker logs bonita8081If you want to copy all the logs (bonita, catalina) you can use docker cp:docker cp bonita8081:/opt/bonita/BonitaSubscription-7.6.2-Tomcat-8.5.23/server/logs/ /tmp/Then you will be able to retrieve all the files through a scp:scp -i ~/.ssh/my_key.pem ubuntu@54.191.90.85:/tmp/logs /tmp/Debugging Ansible FactsAnsible facts are local variables registered in hosts. It is possible to save them in JSON files with the setup command.$ cd bonita-continuous-delivery$ bcd -y -s scenarios/myscenario.yml create deploy$ ansible all -vv -i inventory/ec2/ec2_wrapper.sh -m setup -u ubuntu --private-key=~/.ssh/my_key.pem --tree tmp_facts/This command will identify every EC2 instance (depending of bcd_stack_id set into ec2.ini by the last bcd deploy command) and put its facts into the tmp_facts directory.Accessing Ansible LogsIn order to troubleshoot issues, you may need to consult Ansible logs.By default, the path of the log is /var/log/ansible.log in your Docker container. You can change this location modifying the variable log_path in the Ansible configuration file located in ansible.cfg.If you want to persist the log, you can add a volume in when you run docker run command like$ docker run --rm -t -i --name bcd-controller -v &amp;lt;local_path_to_.boto&amp;gt;:/home/bonita/.boto -v &amp;lt;local_path_to_bonita-continuous-delivery_folder&amp;gt;:/home/bonita/bonita-continuous-delivery -v &amp;lt;local_path_to_ssh_private_key&amp;gt;:/home/bonita/.ssh/&amp;lt;ssh_private_key&amp;gt; -v &amp;lt;local_path_to_your_ansible_log&amp;gt;:/var/log/ansible.log bonitasoft/bcd-controller /bin/bash",
      "url": " /bcd/2.0/tutorials/troubleshooting_guide",
      "author": "",
      "categories": "Tutorials"
    }
    
  
 
    

    "bonita-7-7-application-and-process-design-application-and-process-design-overview-comparison-of-7-x-and-6-x": {
      "title": "Comparison of 7.x and 6.x",
      "content"     : "Comparison of 7.x and 6.xPackaging comparisonConcept comparisonFeature improvements in Bonita StudioFeature improvements in Bonita PortalFeature improvements in Bonita EnginePackaging comparisonIn Bonita 6.x, two versions are available for download:  the Bonita Subscription Pack edition version for the Enterprise, Performance, Efficiency, and Teamwork editions  and the Bonita Community edition version for the Community editionFor each version, there are several packaging options.See the Installation overview.Concept comparisonFeature  Bonita 6.x  Bonita 7.x  Contract  Not in 6.x  A contract defines a clear separation between the process and the forms, making it possible to update the process user interface on the live system. See Contracts  Live update  Not in 6.x  A live update is a change that is applied to a process or application on the live system, without needing to pause the platform or take a process out of service. See Live update  Form mapping  Not in 6.x  A form is mapped to process instantiation, to case overview, or to a task. Any form that respects the relevant contract can be used. This separation between the process and the forms makes it possible to to the live update feature  Business data  A process or application can use business data managed by the Bonita Platform. (Subscription editions only)  Now available in all editions. See BDM  Actor mapping  Each actor in a process can be mapped to a Group, Role, Membership or User within an organization. The mapping can be refined using an actor filter.  No change. See Actor mapping and Actor filtering  Environments  An Environment is a set of configuration information for a particular process. It contains the following information:  actor mapping, actor filters, parameters, connector implementations, dependencies for processes and applications. By having these Environments set up in the Studio, the developer can export processes that are ready to be run for a specific target platform. At any point in time, there is only one active Environment in Studio  No change. See Environments  Parameters  A Parameter is configuration information that can be attached to a process. Parameters are configured for an Environment. Parameter values can be updated at runtime.  Now available in all editions. See Parameters and Environments  Workspace API  The Workspace API is provided to generate .bar files from the command line, ready for production. .BAR files are for deployment only and cannot be read by the Studio. .BOS files are for Studio interchange only and cannot be deployed to production. Each file format is optimal in term of content and is optimized for the target use case  No change. The Workspace API can export pages that are mapped to process instantiation, process overview, or to tasks. It cannot export application pages that are not elements of a process. See Automating process builds  Feature improvements in Bonita StudioFeature  Bonita  6.x  Bonita 7.x  UI designer  Not in 6.x  A new development environment for creating sophisticated, data-driven pages and forms for process-based applications. The UI designer is accessed through the Studio. See live update. The 6.x form tooling is still supported, so that you can continue to run 6.x processes and to ease migration  Process migration  A process exported from Bonita Open Solution 5.9 or 5.10 must be modified to run in Bonita. When you import a process from 5.9 or 5.10 into Bonita Studio, you see a report that guides you through the changes that are necessary. See Migrate a process from Bonita Open Solution 5.9 or 5.10  A process created in Bonita 6.x will run in 7.x without any modification. However, to take advantage of the new features in Bonita 7.x, you need to add contracts and migrate the forms. See Contracts and Migrate a form from 6.x  Application theme and layout  Not in 6.x  You can create custom layout and theme for a process-based application constructed from UI designer pages and forms. See Appearance  REST API extensions  Not in 6.x  You can create custom REST API extensions, to supplement the standard REST API interfaces or to optimize REST API calls used UI designer pages and forms. See REST API extensions  Improved UI  Not in 6.x  Improvements to the Details panel so that tab structure reflects typical worksflow  Variable definition  Easy variable definition for process data, using the expression editor to set the initial or default values  Easy variable definition for both business data and process data. See Business data model and Process variables  Expression Editor  This expression editor enables a developer to define a constant, an expression, a comparison or a Groovy script. Very often, there is no need to resort to a Groovy script, a constant, a comparison or an expression being enough. A number of predefined expressions are provided.  Convenience Groovy functions are provided to help write scripts more quickly. These functions provide simple access to frequently used information, such as information on the current user and the process initiator. It is now very easy to retrieve the manager or the email of the current user or the process initiator  No changes to the expression editor. It is not available from the UI designer. See Using expressions and scripts  Validation  The validation view shows all validation errors in the same location in the Studio. This enables developers to quickly locate validation errors wherever they appear  The existence of mapped forms is verified, but the form definition is not validated for forms created with the UI designer. See Process testing overview  Iteration  Iteration can be by loop or by multi-instantiation. Multi-instantiation no longer requires a specific Bonita connector nor implementation of a specific java class. You can use a variable of type Collection or specify the cardinality using an expression. The completion condition is a simple expression  No change. See Iteration  Connectors  A number of standard connector are provided, and it is possible to create your own custom connectors  No change. See Connectivity  Organization for testing  Several organizations can be defined in the Studio, for test purposes. The organization can be then pushed to the Portal (published) for testing, or exported and imported into the Portal for deployment  No change. See Organization overview  Anonymous user  You can define a process that has an unknown initiator. See Start a process as an anonymous user  Not supported  Feature improvements in Bonita Portal| Feature  | Bonita 6.x  | Bonita 7.x  | | ——– | ————— | ————— | | Dynamic reconfiguration  | The process configuration is defined in Bonita Studio. With the Enterprise or the Performance Edition, you can modify the configuration in Bonita Portal after the process is deployed. You can dynamically update the following configuration items: actor mapping (all editions), parameters (Enterprise or Performance edition), connector implementation (Enterprise or Performance edition), dependencies (Enterprise or Performance edition), actor filter replay by Java call (Enterprise or Performance edition) | New live update feature expands the dynamic reconfiguration to other editions and to other items. The following items can be updated “live”: Groovy scripts (Efficiency, Performance and Enterprise editions), process forms (Efficiency, Performance and Enterprise editions), actor mapping (all editions), parameters (all editions), connector implementation (all editions), dependencies (all editions), actor filter replay by Java call (Enterprise or Performance edition). See Live update  || User interface  | For users, a simple interface for starting cases and performing tasks. For administrators, an interface for managing processes and applications, and the organization, with views for monitoring process and case status  | No change for users. For adminsitrators, the case process and case monitoring views have been improved, new live update features have been added, and the application editor has been improved. See Bonita Portal interface overview  || Task management  | Users can choose how to manage tasks. They can perform one task after another in list order, or select my tasks for themselves then perform them in the order they choose.  | No change for users. An administrator or process manager (or a user with an appropriate custom profile) can see at a glance that status of all tasks in a case, and can perform a task for a user. See Manage a task  || Mobile web portal  | A specially designed mobile interface to Bonita Portal enables users to carry out tasks from a browser on mobile devices  | No change. See Mobile overview  || Subtasks  | A Subtask is a part of a self-assigned existing task. A Subtask must be assigned to a specific person, by name. The assignee can be the creator  | No change. See Manage a subtask  || Replay tasks and connectors in error  | It is now possible for the administrator to replay a task or a connector that is in error. This enables a resolution of failed tasks and better service to end users. and connectors in error  | No change. See Process configuration overview and Mobile overview  || Anonymous user  | You can now complete a task as an anonymous user, that is, without being registered in the organization. For example, on an e-commerce site, a new user can browse stock and save items to a basket, then register with the site if they want to save their basket for later or to buy something  | Not supported  |Feature improvements in Bonita Engine| Feature  | Bonita 6.x  | Bonita 7.0/1/2  | Bonita 7.3 | | ——– | ————— | ——————- | ————– | | bonita_home  | A separate bonita_home for each edition and for cluster  | A common  bonita_home used for all editions, simplifying download and installation. Improved structure for bonita_home/server that is easier to maintain and customize. See Bonita Home  | No more bonita_home. See  platform setup",
      "url": " /bonita/7.7/application-and-process-design/application-and-process-design-overview/comparison-of-7-x-and-6-x",
      "author": "",
      "categories": "Application and Process Design, Application and process design overview"
    }
    ,
  

    "bonita-7-7-application-and-process-design-application-and-process-design-overview-design-methodology": {
      "title": "Design methodology",
      "content"     : "Design methodologyThis page presents a summary of the phases in creating a process-based application using Bonita:Setting objectivesDefining application scopeDrawing the process diagramDefining the process detailsDesigning the applicationTestingDeploymentSpecifying the organizationMonitoring and improvementSetting objectivesObjectives are a vital part of any project to implement or improve a business application or process. If you set measurable objectives, you can set performance indicators in a process to monitor how well it meets objectives.Objectives can be qualitative or quantitative, and should cover the expected lifecycle of the process. For example, if you want to create an automated process to replace an existing process that uses paper forms, you could define objectives for how long it takes to fill out a form in the initial roll-out period, and after 6 months when users have become familiar with the new system. You could also define an objective for the savings achieved by no longer storing paper documents, or quality objectives that the process mustmeet before deployment.Bonita will not help you to define the objectives for a project, but it will help you create metrics to check that your objectives are met.Defining application scopeDefining the application scope means defining the people who use it and their usage patterns, the information concerned, the level of security needed, and connections to external systems.  Application or process: Is the process completely automatic with no human users? Does the process interact with other processes that have human users? If there is no human interaction, there is no need to create an application.  People: Who owns the application? Who owns the processes in the application? Who uses the application and processes? Who are the keyusers? Who just needs to know the application exists? When and how is it used? Is it used frequently, on a schedule, in emergencies? Isit used by just one person or by many people at the same time?  Information: What business information does the application need, and what information does it deliver? What are the expected results of the processes, and of the application?  Security: What kind of controls are needed for people using the application? Is a simple login sufficient?  Connections: What connections to external systems are needed? Does the application need to access information in a database, to send email, or to use some other business application? Do these external systems have APIs accessible by Java?Drawing the process diagramUsing Bonita Studio, you can quickly sketch out the process flow, and create a diagram of the starting points, main steps, branches, decision points, and end points. Do this for each process in the application. At this stage, get agreement from the process owner and the key users before going further.Things to think about:  Most business processes have a single start and a single end, but it is possible to have multiple starts and ends.  If there are activities that happen in parallel, use symmetric gates to map out the beginning and end of the parallel phases of the process.There is no requirement to create a diagram for an application, because it is not executable in the same way as a process.However, you should create a specification so that you can get agreement from the application owner and key users. One option is to use the Bonita Studio to create a diagram showing the usage patterns.This diagram would not be executable, and should not be exported as a /bar file, nor deployed.Defining the process detailsIn the development phase of each process in an application, there are several aspects to define:  Data. Define the inputs and outputs of each step. Define the data model, sourcing and storage, and data types.  Step details. Make sure each step is the correct type, and has a descriptive name.  Transition and flow details. Make sure all transitions have a descriptive label. Make sure there is always a default path at each branch in the process. If the process contains a loop on a step, make sure there is a maximum number of iterations defined.  Connectors. Attach connectors to the relevant steps. Note that it can be more efficient to split steps with both user activity and connector activity into two steps, a human task for the user and a system task for the connector. Configure each connector.  Actors. Define the actor for each step, applying an actor filter where necessary.  Monitoring: Specify the key performance indicators (KPIs) to be collected. These will enable you to monitor the application using a business activity monitoring (BAM) application. Make sure that the KPIs will provide the data required to monitor the objectives you defined for the process.  Exception handling: Plan for how errors and unexpected events will be handled. Consider whether it is necessary to stop the case or process, or whether the case can take an alternate path. Decide whether to use event sub-processes.  Process maintainability. Add annotations to explain the process. Make sure all elements have descriptive labels. Generate the process document and check it.Designing the applicationWhen the application definition and process definitions are complete, you will have defined what interaction users have with application pages and with each process task. Create the pages and forms needed.Use the Bonita Studio UI designer to create pages and forms by manipulating widgets.You can add, remove, and reorder widgets, and you can change the appearance of a form.TestingTest each process individually before testing the application as a whole.You can validate a process definition in Bonita Studio, in teh Details panel, Validation status tab. The validation status indicates any errors or omissions in the definition. Correct any errors flagged in validation before testing the process.Bonita Studio includes an environment for testing a process locally, before deployment. You can test the process without connectors by clicking Debug, test each connector independently using teh connector wizard Test button, then run the process by clicking Debug to test it with connectors. You need to configure the process before testing it locally.Bonita Studio contains an example organization, ACME, which you can use for testing a process or application.When local testing is complete, depending on the environment where the application will run, you might also need to test the processes in a realistic system before putting the application into production, or perhaps to put it into production but for a limited number of users or cases.DeploymentWhen testing is complete, the processes are ready to be deployed in Bonita Portal and the application is ready to be put into production. You need to configure each process for deployment before putting it into production.Specifying the organizationBefore you can run a process in production, you need to define your organization with entries for all process users, groups, and roles. You also need to map the process actors to the real people who will carry out process steps. You can manage your organization in Bonita Portal for a production system. While you are in the testing phase, you can manage the organization in Bonita Studio.Monitoring and improvementAfter deployment, you can monitor usage and collect key performance indicators, to assess how well the process is meeting the objectives you defined.",
      "url": " /bonita/7.7/application-and-process-design/application-and-process-design-overview/design-methodology",
      "author": "",
      "categories": "Application and Process Design, Application and process design overview"
    }
    ,
  

    "bonita-7-7-application-and-process-design-application-and-process-design-overview-getting-started-tutorial": {
      "title": "Getting started tutorial",
      "content"     : "Getting started tutorialThis tutorial explains how to create an application that includes a process. The application is created using the Bonita Community Edition, and uses features that are available in all editions. The example application is a business travel tool.Important: these instructions are also available as a video. The complete solution is available on GitHub.Here is the use-case: An employee opens the Travel Tool application to view their pending and approved travel requests. They create a new travel request. Then the request is sent to the employee’s manager.The manager reviews the request and approves or refuses it.In a real travel management application, there would be several process steps after approval: estimating costs, possibly getting a second level of approval if the cost passes a certain threshold, submitting an expenses claim after the travel, reviewing the expenses claim, escalating anything out of policy, and authorizing payment. However, for this tutorial you will consider only the first part of the process, where a travel request is submitted and then reviewed.This tutorial assumes that you are a developer using Bonita for the first time.It gives instructions for using Bonita Studio, the UI Designer, and Bonita Portal. It assumes you are familiar with JavaScript, JSON and REST APIs.Use Bonita Studio to define your process, including using the UI Designer to create pages and forms. Then use Bonita Portal to build the application.This is the recommended sequence for creating an application, but generally application pages, data model and processes are defined in parallel and evolve as you go deeper in the application details:Design application pagesCreate the data modelCreate the process definitionCreate formsRun processBuild the applicationDesign application pagesThe first step in creating an application is to design the application pages in the UI Designer using dummy data, creating a prototype application as seen by users. This enables you to review the application with the stakeholders and get validation of the application design before proceeding to more complex tasks.The Bonita Studio UI Designer is an environment for creating application pages and forms. To start the UI Designer, click the UI Designer icon in the Bonita Studio coolbar (at the top of the screen). The UI Designer opens in a browser.The travel tool has a home page that displays a list of pending and approved travel requests to the current user. It contains a button for starting a new travel request.There are also some forms that are associated with the travel management process:  Create a travel request  Review a travel request and approve or refuse itThe easiest way to create these forms is from the process definition, so that is what you will do later in the tutorial.The following sections explain how to create the application page and then populate it with dummy data. At any stage, you can click Preview and see a preview of the layout of the page as it will appear to users.Remember to click Save to save your work frequently.Create travel tool home pageIn Bonita Studio, start the UI Designer by clicking the icon in the coolbar. This opens the UI Designer in your browser, at the home page.  In the UI Designer home page, click on the Create button. This brings a pop-up.  In the pop-up, set the type to Application page and name to TravelTool. The name must not contain spaces or special characters. This name is used in Bonita to identify the page. It is not displayed to the application user.  Click on Create. This opens the new page in the Page editor.Create the page structure by dragging widgets from the palette on the left and dropping them on the whiteboard (the central panel).Specify the characteristics of a widget by selecting it and updating the properties in the panel on the right. Add the following widgets:  A TEXT widget, with the Text property set to username.  A TITLE widget, with the Text property set to Travel tool.  A TEXT widget, with text introducing the application: This page lists your pending and approved travel requests.  A CONTAINER for the user pending requests, with the following widgets:  A TITLE widget with a lower title level than the page title (for example, “Level 3”), with the text My pending requests.  A TABLE widget for listing pending travel requests, with the following properties:  Headers set to Departure date, Number of nights, Hotel needed, Destination, Reason  Columns key set to departureDate, numberOfNights, hotelNeeded, destination, reasonA LINK widget with text Create new travel request and Style property set to primary.A CONTAINER for the user approved requests, with the following widgets:  A TITLE widget with a lower title level than the page title (for example, “Level 3”), with the text My approved requests.  A TABLE widget for listing approved travel requests, with the following properties:  Headers set to Departure date, Number of nights, Hotel needed, Destination, Reason.  Columns key set to departureDate, numberOfNights, hotelNeeded, destination, reason.When you have added the widgets, click Preview to see how the page displays. Change the arrangement of the widgets in the whiteboard using drag and drop and using the Width property, until you are happy with the result.Remember to click the topmost Save button, or type Ctrl+S to save your work.Add dummy dataNow use some dummy data to see how the tables will look when there is data. First create a variable containing the data, and then bind the variable to the widget Value property. In the application, the real data will be business data retrieved by a REST API call. The dummy data for the travel requests is in JSON. You need two JSON variables, myPendingRequests and myApprovedRequests.To create myPendingRequests:  In the Variables panel (at the bottom of the page), click Create a new variable.  Enter the variable name, myPendingRequests.  Select the JSON type.  Enter this value:  [  {  &quot;userId&quot;: 3,  &quot;destination&quot;: &quot;Grenoble&quot;,  &quot;departureDate&quot;: &quot;2016-02-09&quot;,  &quot;numberOfNights&quot;: 1,  &quot;hotelNeeded&quot;: true,  &quot;reason&quot;: &quot;Bonita 7.2 launch&quot;,  &quot;status&quot;: &quot;pending&quot;,  &quot;refusalReason&quot;: &quot;&quot;  },  {  &quot;userId&quot;: 3,  &quot;departureDate&quot;: &quot;2016-10-09&quot;,  &quot;numberOfNights&quot;: 3,  &quot;hotelNeeded&quot;: false,  &quot;destination&quot;: &quot;Paris&quot;,  &quot;reason&quot;: &quot;Open source conference&quot;,  &quot;status&quot;: &quot;pending&quot;,  &quot;refusalReason&quot;: &quot;&quot;  },  {  &quot;userId&quot;: 3,  &quot;departureDate&quot;: &quot;2016-07-07&quot;,  &quot;numberOfNights&quot;: 4,  &quot;hotelNeeded&quot;: false,  &quot;destination&quot;: &quot;San Francisco&quot;,  &quot;reason&quot;: &quot;BPAD training&quot;,  &quot;status&quot;: &quot;pending&quot;,  &quot;refusalReason&quot;: &quot;&quot;  }  ]  Click Save.  Select the table widget for the pending requests.  In the Content property, click the link icon at the right (“fx”), then click in the box and choose myPendingRequests from the list of variables (start typing the variable name to get auto-completion).  Click Preview to see the page with data for pending requests.  Now follow the same steps to create myApprovedRequests with the following content:  [   {   &quot;userId&quot;: 3,   &quot;destination&quot;: &quot;Tokyo&quot;,   &quot;departureDate&quot;: &quot;2016-10-10&quot;,   &quot;numberOfNights&quot;: 5,   &quot;hotelNeeded&quot;: true,   &quot;reason&quot;: &quot;BPM for HR conference&quot;,   &quot;status&quot;: &quot;approved&quot;,   &quot;refusalReason&quot;: &quot;&quot;   },   {   &quot;userId&quot;: 3,   &quot;departureDate&quot;: &quot;2015-12-11&quot;,   &quot;numberOfNights&quot;: 3,   &quot;hotelNeeded&quot;: false,   &quot;destination&quot;: &quot;San Francisco&quot;,   &quot;reason&quot;: &quot;Meetings with team&quot;,   &quot;status&quot;: &quot;approved&quot;,   &quot;refusalReason&quot;: &quot;&quot;   }  ]  When you have defined this variable, select the table widget for the approved requests and set the value of the Content property to myApprovedRequests (remember to click on the “fx” icon).Review and improve the pageYou now have a prototype of the TravelTool page with dummy data. View the prototype, and adjust the arrangement of the widgets until you are happy with the appearance of the page. You can drag and drop widgets to reorder them, and you can change properties including Width and Alignment. For example, to improve this page, you could make the following changes:  Select the username widget, and change the Alignment to right.  Select the “Travel Tool” title and drag it beside the username. The size of the username widget will automatically adjust, so that both widgets are in the same row.  Select the “Create new travel request” link widget and change the Alignment to center.Create the data modelThere are two stages to defining variables: first you define the business data model, and then you specify how the process handles objects of the model. The model is defined as a set of Java classes, and the process uses instances of these classes. If you are not familiar with the terminology, all you need to remember is that the model is the global definition, with a collection of structured variables.For your process, you select the subset that is relevant.First, we will create the business data model, which will then be available for all processes. We will use a model with one object:  TravelRequest contains the details of the travel that is being requested and its approval status.To define the business data model:  Go to the Development menu, choose Business Data Model, and then choose Manage…. This opens the dialog to manage the business data model.  Beside the list of business object types, click Add. A temporary type name, such as BusinessObject1 is added to the list.  Click on the temporary name, and change it to TravelRequest.  Select the TravelRequest business object type, and add its attributes. This table shows the attributes and their types:Variable  Data type  Mandatory  userId  Long  yes  departureDate  Date Only  yes  numberOfNights  Integer  yes  hotelNeeded  Boolean  yes  destination  String  yes  reason  String  yes  status  String  yes  refusalReason  String  noTo add each attribute:  In the Attributes tab, click Add. A temporary attribute name (“attribute1”) is added to the Name column.  Change the temporary name to the attribute name.  Select the type from the drop-down list. To display the list, click at the right end of the Type column.  There are no Multiple attributes in this object, so you can ignore this column.  In the Mandatory column, check the box for the attributes that are mandatory.  Add a custom query that you will use to search for data using both the userId and the status:  In the Queries tab, select Custom.  Click Add. A temporary query name (“query1”) is added to the Name column.  Change the temporary name to findByUserIdAndStatus.  Click in the query column, and then click the edit icon at the right. This opens a popup with a proposed custom query that uses all the attributes.  In the JPQL Query field, remove these lines:AND t.departureDate = :departureDateAND t.numberOfNights = :numberOfNightsAND t.hotelNeeded = :hotelNeededAND t.destination = :destinationAND t.reason = :reasonAND t.refusalReason = :refusalReason  In the Parameters list, delete all the attributes except userId and status.  Click OK to save the query.Click Finish to save the business data model.Create the process definitionCreate the diagramThe first stage is to create the new diagram, which you do using Bonita Studio. While you are working on a diagram, save your work from time to time, by clicking the Save icon in the coolbar (at the top of the screen) or typing CTRL+S.Create the diagram as follows:  Click New diagram on the Bonita Studio Welcome page. This creates an almost empty diagram for you to start updating:  The large rectangle with a name at the left is the pool.  Inside the pool there is a lane, which is also a rectangle. You can see the border of the lane at the left side, beside the pool name. The other borders of the lane coincide with the pool border so are not visible.  The green circle in the lane is a start event.  The blue box in the lane is a human task.The first thing to do is to give the diagram a more descriptive name. Click on the diagram outside the pool, then go to the Details panel. This is the area on the bottom-right of the screen.  In the General tab, Diagram pane, click Edit… next to the Name field.  Enter the new diagram name, Simple Travel Request, in the popup and click OK. You can see in the tab at the top of the whiteboard that the diagram name has changed.  Now give the Pool a more descriptive name. Select the pool by clicking in the space between the pool border and the lane border at the left side of the diagram.Then go to the Details panel, General tab, Pool pane, and click Edit… next to the Name field. Enter the new pool name, Travel Request, in the popup.When you have renamed the diagram and the pool, the diagram looks like this:  This process starts when an employee fills in a travel request form. You do not need to create a task for this because it is this action that triggers the process to start. This is known as process instantiation. A form for process instantiation is defined at the pool level.  Define what happens after the user submits a request form: the manager reviews the travel request and approves or refuses it. You can use the example task that was added to the diagram automatically. Click on the task name and change it to Manager review.  In a future evolution of this process, the next task would be to send the travel request details to the admin team so they can handle the booking. For now, though we are just interested in getting the first part of the process working, so add an end after the review task. You can do this by dragging the end icon (red circle) from the palette to the whiteboard, and then connecting to the Manager review task with a flow element.When you have finished, your diagram should look like this:Define business variablesYou have already defined the data model, but now you need to specify how the model is applied to this process.Define a travelRequest business variable, which is an instance of the TravelRequest object type. Follow these steps:  Select the pool.  Go to the Details panel, Data tab, Pool variables pane and click Add… beside the Business variables box.  In the Name field, type travelRequest.  Add a description to document your development if you want to.  From the Business Object list, choose TravelRequest.  Do not configure the default value. The default value uses information that is in the contract, so you will define it later.  Click Finish to save the definition.The attributes of travelRequest are the information that is used in the process. There are no other variables to define.Create contractsA contract is the specification of what a form must return to the process instance. Define a contract for process instantiation, and for each human task.The contract does not need to include information that is sent from the process instance to the form. This is included in the context, which is the set of information passed to the form. You cannot configure the context.The information that you specify in the contract is a subset of the information used in the process.To specify the process instantiation contract, select the pool and follow these steps:  Go to the Details panel, Execution tab, Contract pane.  In the Inputs tab, click Add from data…. This opens a popup for creating the contract using the business data variables that are defined for the process.  Select travelRequest and click Next.  Specify the attributes to include. By default, all the attributes are checked, so uncheck those that are not relevant: userId, status and refusalReason.  Leave the radio button on automatic generation of initialization script.  Click Finish and safely ignore the warning related to contract generation as we will take care of those in time.Now that the case instantiation contract is set up, we will add two constraints on its values. The first one will ensure that the departure date is in the future and the second will validate that the number of nights is greater or equal to zero.  Still in the Contract pane, switch to the Constraints tab and click Add. This adds a placeholder constraint.  Click on the placeholder name and change it to departureInFuture.  Click in the Expression field, then click on the icon that appears at the right of the field. This opens a popup where you can enter the constraint expression.  Define the constraint with this script:travelRequestInput.departureDate.isAfter(java.time.LocalDate.now())  In the Error message column, add this text: Departure date must be in the future.  Add a second constraint as following:  Name: zeroOrMoreNights  Expression: travelRequestInput.numberOfNights &amp;gt;= 0  Error message: Number of nights must be greater or equal to zero.  In the Details panel, Execution tab, Contract pane, Inputs tab click the arrow next to travelRequestInput to expand the list of attributes.For each attribute, add a Description. The description is displayed in the automatically generated form used for process testing, so include information that will help the user complete the form correctly, as follows:Attribute  Description  departureDate  Specify the date that the travel starts  numberOfNights  Enter the number of nights  hotelNeeded  Specify if you need a hotel reservation  destination  Enter the destination city  reason  Explain the reason for this travel. Give the business justification  The process instantiation contract is now complete.The contract for the Manager review task only has two inputs, status and refusalReason, so you can create it directly instead of from data.It also has a constraint: a refusalReason must be specified if the manager refuses the request. To define this contract:  Select the Manager review task.  Go to the Details panel, Execution tab, Contract pane.  In the Inputs tab, click Add and specify the following attributes:Name  Type  Multiple  Description  status  Text  No  Indicate whether you approve or refuse this request  refusalReason  Text  No  If you refuse a request, you must give a reason  Go to the Constraints tab and click Add. This adds a placeholder constraint.  Click on the placeholder name and change it to reasonRequired.  Click in the Expression field, then click on the icon that appears at the right of the field. This opens a popup where you can enter the constraint expression.  Define the constraint with this script:status == &quot;approved&quot; || (status == &quot;refused&quot; &amp;amp;&amp;amp; refusalReason?.trim())  In the Error message column, add this text: If you refuse a request, you must give a reason.Define business object initial valuesNow that the contract is defined, you can configure the initial value of travelRequest, as follows:  Select the pool and go to the Details panel, Data tab, Pool variables pane.  Double-click travelRequest to edit it.  Click the pencil icon beside the Default value field. This opens the expression editor.  An initTravelRequest() script was automatically generated to initialize our data with the contract. We will complete this script by setting up the userId and status attributes.Insert the following code after the first line:travelRequestVar.userId = BonitaUsers.getProcessInstanceInitiator(apiAccessor, processInstanceId).idtravelRequestVar.status = &quot;pending&quot;Click OK to save the expression.  Click OK again to save the updated object definition.Update business object with review dataYou need to define operations to update the business object with the values entered for status and refusalReason in the Manager review form.Select the Manager review task, and go to the Details panel, Execution tab, Operations pane. First define the operation for status, as follows:  Create a new operation by clicking Add.  In the first field, click the down-arrow to display a list of variables on which an operation can be performed, and double-click travelRequest.  Click the Takes value of link. This opens a popup listing the available operations. Choose Use a Java method. The popup displays a list of available methods. Click setStatus(String) - void, and then click OK.  In the last field, click the down-arrow to display a list of variables, and double-click status.Repeat these steps to define the operation for refusalReason.When both of the operations are defined, the Details panel should look like this:Specify actorsThe next stage is to define who carries out the steps in the process. This is done by assigning actors. An actor is a placeholder for the person who will do a task. When you configure a process, you make the connection between the actors defined in the process definition and the real-world people who will do process steps. Bonita Studio comes with a test organization, called ACME, which you can use for testing. In this example, we have two people, the employee who initiates the process, and the employee’s manager.The managers are also employees, so you can use the same actor for process instantiation and for the review task, but use a filter to specify who does the approval step. This is how it works:  In the diagram, select the pool and go to the Details panel, General tab, Actors pane. This is where you define all the actors for the process.By default, there is already an Employee actor, which is defined for testing. You can change the organization and the actors later, but for initial testing, this will work fine.The default settings mean that any employee in the organization can start a case of the travel request process. You do not need to change anything.  Next, select the Manager review step and define who can do this. This step will be done by the manager of the person who initiated the request.All the managers are also employees, and the employee actor is defined for the lane, so check the button for Use the actor defined in the lane.  To make sure that the review task is sent to the right manager, use an actor filter:  Click the actor filter Set… button.  Open up the list of process actor filters.  Select Initiator manager. This means that the review task is to be done by the manager of the person who submitted the request that initiated the process. Click Next  Specify a name for the actor filter definition, requestersManager, and click Finish.  The process is now defined. The next section shows you how to configure and run it to verify that the process definition is correct before you define forms and create the application.Run process with temporary formsYou can run a process that is in development before you create forms, by using temporary forms that are created automatically.This section explains how to configure the process and run it from Bonita Studio.Before you can run the process, you need to configure it. For the first run we will use the default setting.You can run the process and see the temporary forms, to check that the process definition is correct.  Click Run in the coolbar. This opens a browser window, logs you in to Bonita Portal as Walter Bates (user used for authentication in the default process configuration), and displays the travel request form.  Fill out the form. Make sure that you use the right format for each field in the temporary forms (“yyyy-mm-dd” format for dates and either “true” or “false” value for booleans).  When you have filled out the form, click Start. This submits the form and starts the process instance.  At the top-right of the Portal window, click the arrow beside Walter’s name and choose Logout.  Log in as Walter’s manager, Helen Kelly, with username helen.kelly and password bpm. The Tasks view is displayed, where there is a task called Manager review.  Select the Manager review task. The temporary form for the manager review is displayed in the right hand panel.It contains fields for the items defined in the contract for this step, but not the information that Walter entered in the request.When you create your own forms, you will add this information, so that the manager can see the details of the request before approving or refusing it.For now, you can see the form, so you have verified that the process definition is correct.Create formsThe easiest way to create a process form is to generate it automatically from the contract. This automatically creates a mapping between the process and the form and defines form data. You can then update the form manually to add or remove field, and to change the layout.While using the UI Designer, click Save frequently to save your work.To create the process instantiation form:  In Bonita Studio, select the pool and go to the Details panel, Execution tab, Contract pane.  At the top-right of the Details panel, click the UI Designer icon. This opens the UI Designer in a browser window, with the automatically generated form.  Change the form name. All forms that are generated automatically are called newForm, so you must rename them to avoid confusion.To do this, double-click on the name in the top bar, and then specify a new form name, submitTravelRequest.The form is now created. A form is a UI Designer page that is mapped to a process and a contract. A page is a collection of widgets, and each field is defined by a widget.Widgets are arranged in rows and each row is divided into 12 columns. Each widget has a width that spans across one or more column. In addition to their width, widgets have a set of editable properties that can be set on the right side of the window.To change the appearance and behavior of a page, you update the widgets. At any time, you can click Preview to see how the page will look to a user.To have more space to update the page, you can hide the Variables and Assets tabs, by clicking on the down-arrow.Before improving the look of the form, we will enforce some validation rules on the different fields:  Select the Number Of Nights widget and set its Min value property to 0.  Preview the form and try to enter some values to make sure that the validation works. Submit button should be disabled until all widgets contain valid values.The form should now look like this in the page editor:Now that the form is functional, we are going to improve its appearance to make it more user-friendly:  Select the title widget, and change the Text property to Submit a new travel request.  Make the Departure date widget narrower. To do this, select it and change the value of the Width property to 4 columns.  Move the Destination widget up to the top of the form (below the title).  Move the Number of nights and Hotel needed widgets to the same row as the Departure date, and reduce the widths.Note: when you add a widget to a row, it automatically takes all the remaining columns, so set the width after you move the widgets.  Clear the initial value for Number of nights to show the placeholder at run time:  In the Variables panel (at the bottom of the page), locate the row containing the formInput variable.  Click on the pencil icon located at the right side of this row.  Change the value of the numberOfNights attribute from 0 to null.  Click on Save.  When you have finished, the preview of the form looks like this:Now define the form for the Manager review task. Start by automatically generating the form from the context, then add widgets to display the request details for the manager to review. Follow these steps:  In Bonita Studio, select the Manager review task and go to the Details panel, Execution tab, Contract pane.  At the top-right of the Details panel, click the UI Designer icon. This generates a form and opens it in the UI Designer.  Change the form name to reviewTravelRequest.  Add a variable to get the information that the user enters in the request form. To do this:  In the Variables tab, click Create a new variable.  Specify the name, request.  Set the Type to External API.  Set the value to ../.  Click Save.Add a variable to hold the different request status values:Name  Type  Value  statusValues  JSON  [{&quot;label&quot;: &quot;Approve request&quot;, &quot;value&quot;: &quot;approved&quot;},{&quot;label&quot;: &quot;Refuse request&quot;, &quot;value&quot;: &quot;refused&quot;}]  Edit the formInput variable and set the value for the status attribute to “approved”.  All of the other widgets you will add will be placed inside the form container (identified with a dashed border).  Add a title widget and set its text property to Review travel request. Set the Level property to Level 4, so it is the same size as the title of the form for creating a request.  Add read-only widgets to display the details of the travel request, using the following information:Label  Widget type  Value binding  Read-only  Destination  Input  request.destination  yes  Departure date  Date picker  request.departureDate  yes  Number of nights  Input  request.numberOfNights  yes  Hotel needed  Checkbox  request.hotelNeeded  yes  Reason for travel  Text area  request.reason  yes  Remove the “Refusal reason” widget that was added automatically, we will replace it by something more user-friendly in the next step.  Add a Text area widget with the following properties:Property  Value  Hidden  formInput.status === &#39;approved&#39; (click on “fx”/”bind” icon first)  Label  Refusal reason  Value  formInput.refusalReason  Required  yes  The dynamic Hidden property will hide the widget when the request status is set to ‘approved’.Otherwise, the field will be marked as required and the form validation will prevent the user from refusing a request without a reason.Remove the Status widget that was added automatically.  Add a Radio buttons widget with the following properties:Property  Value  Label  Review decision  Available values (click on the “fx” binding icon next to the input field first)  statusValues  Displayed keys  label  Returned keys  value  Selected Value  formInput.status  Preview the form to test the validation and rearrange the widgets until it looks like this in the editor:Run processYou can now run the process using the forms that you created. Make sure that you have saved everything in the UI Designer. Then click Run in the Studio coolbar.Fill out the request form as Walter, then log in as Helen and do the review task.When the review form is displayed, it contains the information that Walter entered in the request form. You can approve or refuse the request.Once process is finished you can see the request information as stored in the business data database in Bonita Studio:  From the menu bar, choose Development menu, choose Business Data Model, and then choose Brows data (h2 console)…. This opens the h2 (business data database) web interface in a web browser.  In the left tree menu click on TRAVELREQUEST. This will generate an SQL select query.  Click on Run (Ctrl+Enter) button. You should view all the requests created by running the Travel Request process.You process is now complete, so you can include it in an application.Build the applicationThis section explains how to build the application from the pages and process that you have already created. There are the following steps:  In the UI Designer, update the application page to use business data instead of the dummy JSON data and to specify the connection between the page and the process.  In Bonita Portal, create the application.Update the TravelTool application pageIn the UI Designer edit the TravelTool page and create the following variables:Name  Type  Value  session  External API  ../API/system/session/unusedId  processDef  External API  ../API/bpm/process?p=0&amp;amp;c=1&amp;amp;f=name=Travel%20Request  Update (edit) the following variables:Name  Type  Value  myPendingRequests  External API  ../API/bdm/businessData/com.company.model.TravelRequest?q=findByUserIdAndStatus&amp;amp;p=0&amp;amp;c=10&amp;amp;f=userId=&amp;amp;f=status=pending  myApprovedRequests  External API  ../API/bdm/businessData/com.company.model.TravelRequest?q=findByUserIdAndStatus&amp;amp;p=0&amp;amp;c=10&amp;amp;f=userId=&amp;amp;f=status=approved  Now update the widgets to use the new variables:  Select the username widget at the top of the page, and update the Text to this value: ``.  For both pending and approved requests, set the Column keys to departureDate | date, numberOfNights, hotelNeeded, destination, reason, to set the date format.Link button to processWhen the user clicks the button on the Travel Tool page for creating a travel request, the application displays the form for creating a request.This is the instantiation form for the Travel Request process.To configure this, select the button and set the target URL property by first clicking on the change to bind to an expression button (‘fx’ to the right of the field) and then updating the expression to  &quot;/bonita/portal/resource/process/Travel%20Request/1.0/content/?id=&quot;+processDef[0].id.After the user submits the form, the Tasks view of Bonita Portal is displayed.Build applicationTo build the Travel Tool application, you need to export the page from the UI Designer, deploy the process, and then create the application in Bonita Portal.To export the page, click the Export icon in the Page editor (next to the Save button) or on the home page. The page is exported as a zip file in your default browser download location.To deploy the process, you can simply run it from Bonita Studio. If you have no changed the process since you last ran it, it is already deployed.To create your application in Bonita Portal:  Log in to Bonita Portal by clicking the Portal icon in the coolbar and click the arrow beside “User” and select “Administrator” to switch to Administrator profile .  From the menu bar, choose Resources, and then click Add and import the TravelTool page that you exported from the UI Designer.  Go to Applications and click New.  Name your application Travel App, set its URL to travel, and click Create. The application is created.  In the list of applications, click the edit (triple dot) icon to configure your new application.  In the Pages section, click Add.  Select the Travel tool page you imported. Set its URL to requests. Click Add.  Make this page the application home page by clicking on the home icon that appears when hovering on it.  Delete the default home page.  Check that the application is correctly defined, by clicking the URL. The travel requests summary page is displayed, with a link to the form to create a new request.When you click the link, the form for submitting a new travel requests is displayed.Congratulations, you have just created your first Living Application!",
      "url": " /bonita/7.7/application-and-process-design/application-and-process-design-overview/getting-started-tutorial",
      "author": "",
      "categories": "Application and Process Design, Application and process design overview"
    }
    ,
  

    "bonita-7-7-application-and-process-design-application-and-process-design-overview-key-concepts": {
      "title": "Key concepts",
      "content"     : "Key conceptsThis page introduces some of the key concepts related to designing an application or process with Bonita, and the terminology used in Bonita Studio.Applications and processesProcess definitionBusiness dataBusiness Data ModellingConnectorsOrganizationActorsEnvironments and parametersApplications and processesAn application is a collection of processes, user interfaces (called pages) and shared data. A page that is a user interface to a process is called a form.You can use Bonita to create a process-based application or a process that is accessed only through Bonita Portal. A process that is in an application is also visible in the Portal.Process definitionA process is a sequence of tasks performed by people (human tasks) or automatically (service tasks). The sequence has a start and an end, and can contain decision points, known as gateways. A process definition is constructed in Bonita Studio as a flow diagram. You add data, gateways, connectors, scripts and expressions to control the process flow, and configure the process components and dependencies. The diagram uses the Business Process Model and Notation, which is the standard for defining a business process. Version 2.0, BPMN 2.0, was published in January 2011.If a process is visible to users, you can use the UI designer to design forms to input data and forms to display information.The result is a process that can be deployed to Bonita Portal.Business dataA business application exists to support a business goal, either a specific goal related to your business, such as parts reordering in a manufacturing plant, or a generic goal, such as improving efficiency through an automated expense reporting system.The key data in any application or process is business data. Because this data is probably used by more than one process, it needs to be stored at a global level, with two options:  If business data is not used by other applications than Bonita,  you can store it in Bonita Business Data database, that provides fast access and easy exchange between process and User Interfaces.  If it is global company data, Bonita can access it in your data source, so you do not need to copy or duplicate the data.Some processes also manipulate data that is only useful within the process itself. In this case, Bonita stores it in its local database or in memory.Business Data ModellingBonita supports modelling and persistence of business objects that applications and processes interact with. Such data can either be automatically stored in a database dedicated to business data, or can reside in existing information system databases, in which case the interaction is by connector.ConnectorsA connector is a link between a process and an external information system such as a database or information service. A number of standard connectors are provided, and you can create additional connectors if required. Separating the connector configuration and implementation from the process means it is easier to update or replace the connector without having to modify the process. You can use the same connector in more than one process.See the Connectivity overview for details.OrganizationYour organization is the set of all the users who play a part in all the applications and processes that your business uses. The organization is stored in Bonita Engine and can be managed in Bonita Portal. Typically, the organization corresponds to the hierarchy of teams within your business.If your clients and suppliers have access to your processes, those users must also be included in the organization. You can also feed Bonita Portal by synchronizing with an external LDAP directory. During process modelling, you need to create a draft organization in Bonita Studio with the main entities (groups, roles) to map it to process actors.See the Organization overview for details.ActorsAn actor is a placeholder specified in the process definition for the users. Using an actor instead of specifying real people directly makes the process definition more flexible: when the list of users changes, you change only the process configuration, which can be done while the process is running. You can also use the same process definition with completely different sets of users, for example, if a service business sells a process to several clients. Making the connection between the actor definition and the set of users is called actor mapping.See Configure a test organization and actors for details.Environments and parametersAn environment (available in the Bonita Enterprise, Performance, Efficiency, and Teamwork editions) is the context in which a process will run.There are three standard environments: Local, Qualification, and Production. You can define additional environments that are useful when designing and deploying a process for your business.A parameter is a piece of information in a process that has a value specific to the environment. See Environments and Parameters for more details.",
      "url": " /bonita/7.7/application-and-process-design/application-and-process-design-overview/key-concepts",
      "author": "",
      "categories": "Application and Process Design, Application and process design overview"
    }
    ,
  

    "bonita-7-7-application-and-process-design-application-and-process-design-overview-lifecycle-and-profiles": {
      "title": "Lifecycle and profiles",
      "content"     : "Lifecycle and profilesThis page explains the lifecycle of creating an application or a process using Bonita and putting it into production. At different stages in the lifecycle, different people with different knowledge and skills play roles. These people are identified by profiles.There are three major phases in the lifecycle.This page introduces these three phases, and explains how the Bonita components use components to manage the features presented to users.Application creation phaseSystem creation phaseProduction phaseProfiles and Bonita componentsApplication creation phaseDuring this phase, the business analyst specifies the processes that are in the application and creates the process diagrams. The application developer takes the specification of each process and creates a running process, adding forms, scripts or Java code if required. Each process is tested and debugged. When a process is complete, it is exported ready for deployment.This phase needs only the Bonita Studio component of Bonita. See the Bonita Studio installation overview for details of how to install Bonita Studio for process creation.The application developer also creates the application pages. When the pages are complete, they are exported and deployed in Bonita Portal. The application developer then builds the application, specifying the menus and navigation.System creation phaseDuring this phase, which typically runs in parallel with the end of the application creation phase, the platform administrator preparesthe infrastructure needed to support the deployed application. This infrastructure includes Bonita, and prerequisites such as adatabase and an application server. There are many options for how Bonita can be installed: see the Installation overview for details.Preparing the system also includes defining the organization, with all the users, groups, and roles required for running processes and applications. Bonita Studio contains an example organization, ACME, which you can use for testing.When configuration is complete, the system is ready for application deployment. The administrator deploys the processes and the application pages, and updates the configuration as needed, including mapping process actors to users in the organization.Production phaseTo deploy a process, you import it into Bonita Portal and start it. After the process is started, process instances can be started. The details of how process instances are started depend on the process definition.To deploy an application, you import pages into Bonita Portal and then use the application builder to specify the application menus and navigation.After deployment, you can use the Bonita Portal live update options to update an application or process that is in production.Profiles and Bonita componentsBonita Studio and Bonita Portal manage the features available according to the profile of the user.In Bonita Studio, a user selects a profile at login, and can change profile at any time. The application developer profile gives access to all features of Bonita Studio. You can also configure the features that are visible to your profile, hiding items that are not relevant to your activity, to make the interface cleaner and easier to navigate.In Bonita Portal, a profile is associated to a login, and by default only a user with the administrator profile can change the profile of a user. A user can have any number of profiles. It is also possible to define custom profiles.",
      "url": " /bonita/7.7/application-and-process-design/application-and-process-design-overview/lifecycle-and-profiles",
      "author": "",
      "categories": "Application and Process Design, Application and process design overview"
    }
    ,
  

    "bonita-7-7-application-and-process-design-applicationcreation": {
      "title": "Application descriptor",
      "content"     : "Application descriptorOverviewDefinition Create and build an Application DescriptorOverviewIn Bonita 7.5, we introduced the possibility to manage application descriptors from the Studio.It accounts for an additional step to ease the management of Living Applications in Bonita, since our objective is to offer a unique application deployment artifact, managed from the Studio.Then, all resources used by applications will be centralized and shared by the Bonita development suite: Bonita Studio and the UI Designer.DefinitionBasically, an application descriptor is an XML file. It represents the skeleton of an application, as it contains references to resources installed in Bonita Portal and used by a given application.An application descriptor must be imported onto the portal (Administrator profile), in the Applications tab, to enable the application.Before Bonita 7.5, this portal tab was the only way to create and manage applications.For development purposes, the Studio can deploy applications descriptors onto the portal for you (only for Enterprise, Performance and Efficiency editions).Application descriptors are packaged in application files.An application file is an XML file containing one or more application descriptors.&amp;lt;!--  Application File --&amp;gt;&amp;lt;applications&amp;gt;	&amp;lt;application&amp;gt;		&amp;lt;!--  First Application Descriptor --&amp;gt;	&amp;lt;/application&amp;gt;	&amp;lt;application&amp;gt;		&amp;lt;!--  Second Application Descriptor --&amp;gt;	&amp;lt;/application&amp;gt;&amp;lt;/applications&amp;gt;However, application descriptors in a given application file are totally independent.The purpose of grouping application descriptors in one file is to manage together applications with the same company purpose, each of them dedicated to a different user profile.For example, the four leave management applications for employees, managers, Human Resources officers, and Administrators should be managed together, therefore grouped in the same application file.Create and build an Application DescriptorNote: All Bonita editions come with an .xml editor for this feature. Only Enterprise, Performance and Efficiency editions also come with a graphical UI.From Bonita Studio, click on Development -&amp;gt; Application Descriptor -&amp;gt; New…It will create an empty application file with a default name and open an editor. You can rename this application file from the graphical UI or from the menu Open.Here is the application descriptor graphical UI provided. It is bound to the XML source, so you can use it to build your application descriptor without writing xml.You can switch from the graphical UI to the xml source at any moment, using the tabs Editor and Source at the bottom of the editor.A toolbar is embedded to the editor, use it to:  Add an application descriptor to this application file  Deploy this application file (i.e all the application descriptors in this file). ⚠  For development purposes, it also deploys their referenced pages and layout, but if those resources use REST API Extensions, you have to deploy those manually. In production environment, you still need to deploy pages, layouts and REST API Extensions manually before to deploy the application descriptor.  Rename this application file  Export this application file (download the .xml)  Delete this application file from your current workspaceThe application Token is the identifier of your Application Descriptor; it has to be unique. It is used to define the URL root of your Application:  ../apps/APPLICATIONTOKEN/..The fields Profile, Layout, Theme, Application Page and Home page token come with an auto complete feature.Be aware that we only suggest options known by Bonita Studio and the UI Designer.It means that custom themes, or custom pages and layouts created with another editor than the UI Designer will not appear as options, since they are only known by Bonita Portal.You can still reference such an “unknown” resource, but you will have to write the exact identifier by yourself, and make sure the resource is imported onto the portal before you deploy/install the application descriptor.Since Bonita 7.6, and for Enterprise, Performance and Efficiency editions only, custom profiles can be created in the studio.Therefore, such profiles will be suggested. Those created in the portal will not, but you can still export them from the portal and import them in the studio to get them in the suggested options.There are two ways to reference pages used by your application. In the Navigation table or in the Orphan pages table.Use the Navigation table to create the application menus/submenus, and bind those menus to pages.A page needs a unique token (unique in the context of the application descriptor). It will be use to define the URL to reach this page: ../apps/applicationToken/PAGETOKENUse the Orphan pages table to reference pages that will be accessed using the associated URL, but won’t be attached to a menu. It can be the application home page, or pages accessible from other pages but not from a menu.⚠ You don’t need to define your pages twice. If a page is accessed both from a menu and from another page, you only need to reference it in the Navigation table: pages defined in the Navigation table will be accessible in the whole application.A preview link is also provided, at the top of the Overview section. Clicking on the link will first deploy the selected application descriptor, and then open the application home page in your browser.",
      "url": " /bonita/7.7/application-and-process-design/applicationCreation",
      "author": "",
      "categories": "Application and Process Design"
    }
    ,
  

    "bonita-7-7-application-and-process-design-bonita-bpm-overview": {
      "title": "Bonita overview",
      "content"     : "Bonita overviewBonita 7 is a powerful BPM-based application platform for building highly engaging, personalized, process-based business applications to get things done, take full advantage of BPM, and adapt to business changes in real time.Bonita has two parts: the development environment, Bonita Studio, and the runtime environment, Bonita Platform.Bonita StudioBonita PlatformEditionsGetting startedBonita StudioBonita Studio is a graphical environment for creating processes, applications, data models, and users views (pages and forms). It contains three major design tools:  the whiteboard, for drawing a process flow diagram and defining the detail of steps, transitions, decision points and other process elements  the Development menu, to extend the Studio capabilities and create your data models  the UI Designer, which is used to create application pages and process formsBonita Studio is the development tool for the Business Analyst and Application Developer. Back-end java developers work in Bonita Studio and collaborate with front-end developers working in the UI Designer.You can install Bonita Studio on your computer, then create and test processes, create data models, applications and application views (pages and forms).Bonita Studio contains a Bonita Platform (Tomcat, UI Designer, Bonita Portal, Bonita Engine, and an h2 database), suitable for testing an application that is in development. When you run a process, it is automatically deployed onto the development platform.Process forms, used to complete the human tasks, are created in the UI Designer, and use the data models created in the Studio.Users can use Bonita Portal (User profile) to view and complete the process tasks for all processes. You can also build personalized process-based applications. To do so, use the UI Designer to create application pages that display business data from the data models, link the pages to processes thanks to action buttons, then use the Bonita Portal application builder to construct the application piece by piece.Bonita PlatformBonita Engine is the execution engine of Bonita.As mentioned before, Bonita Portal is the part of Bonita that is visible to process users, who use it to view tasks and take actions thanks to a generic task list for all processes they are involved in.But Bonita Portal is also the tool used by the tenant administrator to install, deploy and manage processes and to build applications. We use the word “tenant” here, in case the platform would be made of several tenants.To install Bonita Engine and Bonita Portal in a qualification or production environment, install Bonita Platform.In Bonita Studio, once a process is ready, you can build it and deploy it on your Bonita qualification or production platform.EditionsBonita is provided in five different editions: Community, Teamwork, Efficiency, Performance and Enterprise.Getting startedI’m currently using Bonita 6.x. Will 7.x be a big change?Bonita 7.x provides new and improved features, including the UI Designer for creating application pages and forms, as well as contracts and context to create a clear split between the process logic, the data, and the user views. You will also find lots of familiar features, which continue to work as they did in 6.x.Tell me about the documentation.We’re continually updating the documentation. There are four main information categories: Application and process design, Installation, Portal administration, and Development.Tell me about using Bonita.See Lifecycle and profiles.Can I migrate an existing process into Bonita 7.x?You can import a process from any earlier Bonita release. You can also migrate a process from Bonita Open Solution 5.9 or 5.10 to this release. A 6.x process will continue to run unchanged in 7.x, but to take advantage of the new features, you will need to update the process and migrate the forms.Tell me about creating an application.An application is a collection of related processes, user interfaces, and shared data. See design methodology.Tell me about creating a process.A process can be included in an application or can be accessed through Bonita Portal. See design methodology.Tell me about creating a diagram.See diagrams.How can I get started?Download and install Bonita 7.x: see the installation instructions.",
      "url": " /bonita/7.7/application-and-process-design/bonita-bpm-overview",
      "author": "",
      "categories": "Application and Process Design"
    }
    ,
  

    "bonita-7-7-application-and-process-design-bonita-bpm-studio-hints-and-tips": {
      "title": "Bonita Studio hints and tips",
      "content"     : "Bonita Studio hints and tipsThis page contains some information about smart ways to use Bonita Studio.Adding items to a diagramUsing the tree view and searchChanging the diagram name and versionChanging the diagram appearanceOpen a recently modified diagramAdding items to a diagramThere are several ways to add an item to the diagram:  Click-and-hold on a icon in the BPMN elements menu and drag it to where you want the item in the whiteboard.  Click-and-release on an icon in the BPMN elements then click where you want it to appear in the whiteboard.  Select the previous item in the flow, and drag the item from the context menu to where you want it in the whiteboard.  Copy and paste an item from another pool.The advantage of selecting items from the BPMN elements menu is that you can choose precisely the item you want.The advantage of using the content menu is that the transition is automatically created.If you add an icon to the diagram over a transition, the transition will be broken into two parts and the new item inserted between them. This is called break-and-insert, and can be used with any BPMN flow element except text annotations. You can also use break-and-insert when moving an item to a different place in a pool, if the transitions can be resolved.Using the tree view and searchThe tree view shows all the information that is in a diagram, arranged in a hierarchical structure. It can be a useful way to see all the information related to a particular step or form, or to find where a specific item is configured. For example, you can see the step where a variable is defined without having to check all the steps.To find a term in your diagram, go to the Tree View panel (by default, at the bottom-left of the screen), enter the term in the filter field and press return.The tree view is updated to show only the items that match the term.Changing the diagram name and versionClick on the background (outside of a pool) and go to the Diagram tab in the Details panel. Click on Edit… then specify the new name and version number.You can use the same dialog to change the name and version of any pools in the diagram.Changing the diagram appearanceYou can modify the appearance of an item in the diagram by selecting it and going to the Appearance tab in the Details panel.In addition to changing the appearance of individual items in the diagram, there are some tools that you can use to make the layout clearer, by selecting a group of items and making the vertical or horizontal alignment regular. If a diagram is being developed or maintained by more than one person, it is important to keep the layout clear, to prevent misunderstanding.The alignment tools, and others, are accessed from the icons at the bottom-left of the whiteboard.Open a recently modified diagramTo see a list of recently modified diagrams without having to go to the Welcome page, go to the Diagram menu and choose Recently modified.A submenu of the last ten diagrams you have modified is displayed. Click the name of a diagram to open it.",
      "url": " /bonita/7.7/application-and-process-design/bonita-bpm-studio-hints-and-tips",
      "author": "",
      "categories": "Application and Process Design"
    }
    ,
  

    "bonita-7-7-application-and-process-design-bonita-bpm-studio-preferences": {
      "title": "Bonita Studio preferences",
      "content"     : "Bonita Studio preferencesThis page provides information about Bonita Studio preferences and the Bonita Studio embedded Tomcat configuration.Bonita Studio preferencesGeneral preferencesDeployment preferencesWeb preferencesOther preferencesBonita Studio embedded Tomcat configurationDefault configurationChanging the configurationBonita Studio preferencesTo configure Bonita Studio preferences, click Preferences in the Cool bar.General preferencesDatabase   Database clean-up: by default, the database (used by Bonita Engine) is purged when Bonita Studio exits, which is useful when you are testing processes. You can override this in order to preserve all data.   Organization load: by default, the default organization is loaded with Bonita Studio starts. You can override this.AppearanceCoolbar size: Normal (default) or small. Grid options for process diagrams. You can choose to use a grid positioning for all new process diagramsLanguage   Bonita Studio language.   Web applications language: the language to use by default when loading process forms and Bonita PortalJava   The JRE (Java Runtime Environment) to used by default. JRE will be used when compiling and running Java codeDeployment preferencesRun mode   Validation: whether to validate the process before it runs. We recommend to keep this option enabled.   The default look &amp;amp; feel for application forms. Will be applied to any newly created process.Server settings   Port number: Studio embedded Tomcat HTTP listening port.   Log in: the username and password of the user who will be logged when Bonita Portal or an application is started from Bonita Studio. The password can be obscured.The default look &amp;amp; feel for the PortalDatabase connectors   Manage the JDBC drivers associated with database connectors. You should use that to include JDBC drivers for commercial DBMS (e.g. DB2)Web preferencesBrowser   Specify the web browser used when a web page is displayed. Note that some application might override this setting and use a different browserProxy   HTTP Proxy settings for web accessOther preferencesAdvanced   SVN connector: the SVN connector used if you are using a remote SVN “repository. Note: if you change this your local working copy might become unstable. To avoid this, commit any outstanding changes before you modify the connector setting, and reinitialize your local working copy after the update6.x legacy   Controls whether the 6.x legacy features are shown are hiddenEclipse   Give access to all Eclipse settings (Bonita Studio is based on Eclipse)Bonita Studio embedded Tomcat configurationDefault configuration  Embedded Tomcat listens on the following ports:  8080: HTTP. This value can be modified using Bonita Studio preferences (see above).  8006: shutdown.  8009: AJP.  9091: embedded h2 database server.Bonita Studio also uses the following port:  6969: watchdog  Changing the configurationYou might need to edit the Tomcat configuration files for example to:  Configure logging  Change listening ports (shutdown, AJP, h2) to prevent conflicts  Declare a datasource to connect to a business databaseThe Tomcat configuration files are located in the Bonita Studio workspace/tomcat/conf folder.  To change a port number, edit server.xml.  To add a data source, edit context.xml or workspace/tomcat/conf/Catalina/localhost/bonita.xml.For more details, see the Tomcat documentation.",
      "url": " /bonita/7.7/application-and-process-design/bonita-bpm-studio-preferences",
      "author": "",
      "categories": "Application and Process Design"
    }
    ,
  

    "bonita-7-7-application-and-process-design-build-a-process-for-deployment": {
      "title": "Build a process for deployment",
      "content"     : "Build a process for deploymentWhen a process is ready for deployment, build an archive file in Bonita Studio that can be installed in Bonita Portal.You also need to initialize the organization information needed in Bonita Portal.Build a process for deploymentInitialize the organization in Bonita PortalBuild a process for deploymentA process is deployed by installing a business archive (.bar) file in Bonita Portal.To create the business archive:  Choose Build… from the Server menu.  Select the process to be exported.  Specify whether you want to export a configuration with the process. Exporting a configuration will export all the information and other items that you configured, including connectors and dependencies.  Specify the location where the .bar file will be created. The filename is determined by the process name and cannot be changed at this stage.  Click Finish. The business archive is created.You can now install the process in Bonita Portal.Initialize the organization in Bonita PortalTo prepare your production system (unless you are using a Subscription editions and the LDAP synchronizer), you must create the organization that you need for all the processes that will be deployed, export it from Bonita Studio,and import it into Bonita Portal.To export the organization, go to the Organization menu and choose Export…. Youcan then import the organization into Bonita Portal. After the organization is imported into Bonita Portal, you can manage the groups, roles, and users in the organization.",
      "url": " /bonita/7.7/application-and-process-design/build-a-process-for-deployment",
      "author": "",
      "categories": "Application and Process Design"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-alfresco": {
      "title": "Alfresco",
      "content"     : "AlfrescoBonita Studio contains connectors for Alfresco 3.4 and Alfresco 4.2. For each version, there are the following connectors:  Delete an item by ID (folder, file, etc)  Delete folder by path (delete a folder and its contents)  Create a folder by path  Upload a file to a destination folderNotes for using these connectors:  Warning:There is a conflict between libraries provided with the Alfresco connector and libraries provided by other connectors or the platform itself if you use a data of type Object.When you configure a process that uses the Alfresco connector, you must manage the jar files.  To delete a folder, it must be empty.  In the path, all parameters have to be URL Encoded. Spaces are not allowed. For example: /User Homes/user has to be written /User%20Homes/user.",
      "url": " /bonita/7.7/application-and-process-design/connectivity/alfresco",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-cmis": {
      "title": "CMIS",
      "content"     : "CMISOverviewAlfresco specific configuration for document versioningExample: How to upload a documentExample: Creating a folder on AlfrescoOverviewContent Management Interoperability Services (CMIS) is an open standard that allows different content management systems to inter-operate over the Internet.CMIS provides a common data model covering typed files and folders with generic properties that can be set or read. There is a set of services for adding and retrieving documents (‘objects’). There may be an access control system, a checkout and version control facility, and the ability to define generic relations.Two protocol bindings are defined, one using WSDL and SOAP and another using REST, using the AtomPub convention. The model is based on common architectures of document management systems.Bonita Studio contains the following CMIS connectors:  Upload a new version  Upload a document  Create a folder  Delete a document version  Delete a folder  Delete a documentNote: If you have processes that use CMIS connectors from previous versions, these connectors will no longer work. You need to update the configuration of each connector, including any scripts that construct the URLs used.Alfresco specific configuration for document versioningDocument versioning is disabled by default in Alfresco.If you wish to use the “Upload a new version” connector to upload a new document version, you will have to enable document versioning following the official Alfresco documentation.If this configuration is not set, new versions of documents will overwrite previous ones.Example: How to upload a document  In the Connector list window:  Select the CMS/CMIS connector category.  Select the Upload a document connector.  Click Next.In the General window:  Enter a name.  Click Next.In the Server window, enter the information necessary to connect to the repository:  Username and password  Repository name (for example Main Repository)  Binding type: webservices (or atompub)  The URL (server address) for the atompub binding if it is used  If using webservices, there are four new URLs:  RepositoryService, for example https://localhost:12345/alfresco/cmis/RepositoryService?wsdl  RepositoryService endpoint  ObjectService, for example https://localhost:12345/alfresco/cmis/ObjectService?wsdl  ObjectService endpoint  * Click Next.In the Document window:  Enter the Document name of the document to upload.  Enter the relative or absolute path to the Parent folder that contains the document.  Enter the Destination name to be assigned to the document after it is uploaded.  Click Next.In the Output operations window:  You can store the returned document_id in a variable.  Click Finish.  Example: Creating a folder on AlfrescoThis example presents the creation of a folder on a local installation of Alfresco 5.0 with a CMIS connector configured with AtomPub.  In the Connector list window:  Select the CMS/CMIS connector category.  Select the Create a folder connector.  Click Next.In the General window:  Enter a name.  Click Next.In the Server window, enter the information necessary to connect to the repository:  Username and password  Repository name: -default-  Binding type: atompub  URL: http://localhost:8080/alfresco/api/-default-/public/cmis/versions/1.1/atom/  Click Next.In the Folder window, enter the location and name of the folder you wish to create:  Parent folder: / (root folder)  Folder name: bonita  Click Next.In the Output operations window:  You can store the returned folder_id in a variable.  Click Finish.  ",
      "url": " /bonita/7.7/application-and-process-design/connectivity/cmis",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-connectivity-overview": {
      "title": "Connectivity overview",
      "content"     : "Connectivity overviewOverviewAdd a connectorConnectors and formsEdit a connectorOverviewA connector is an element in a process that accesses an external system to read or write information. By extension, it also accounts for tools that modify data within a process like Office connectors that modify Bonita documents.Bonita contains a set of standard connectors. You can also create custom connectors using the connector development toolkit.A connector consists of a definition, an implementation, and a configuration.  The definition specifies the external interfaces for input and output, including the configuration wizard.  The implementation is the Java code that acts on the inputs, interacts with the external system, and returns outputs to the process. There can be any number of implementations for a given definition.  The configuration is the specification of how the connector is used in a specific process or task. The main part or connector configuration is done at pool and tasks levels, through a wizard. The choice of connector implementation though is done when you configure the process.You can add a connector to a pool or a task, at the start (connector in) or at the end (connector out).A pool connector in is executed when the process is instantiated. A pool connector out is executed when the process instance terminates, regardless of the reason for termination. If a process has more than one terminate end event or flow leading to the end of the process instance, make sure that it is always appropriate for the pool connector out to be executed. If it is not, use task connectors instead.A task connector in is executed before the task executes. This means it can be used to retrieve information that will be presented in a task form. A task connector out is executed after the task has been executed and after any operation defined on the task. This means that information entered in a form by a user can be an input to the connector.Add a connectorTo add a connector to a pool or task:  Select the pool or task.  Go to the Details panel, Execution tab.  Go to the Connectors in or Connectors out panel, depending on whether you want to add a connector at the start or the end of the pool or task.  Click Add.  Choose the category.  Choose the connector from the list.  Follow the wizard to configure the connector. For details, see the connector-specific documentation pages.Connectors and formsIn Bonita 6.x, you could add a connector to a form. This is no longer possible with forms created with the UI Designer. To achieve the same result, create a REST API extension. There is an example showing how to execute SQL queries on a external database.Edit a connectorTo change the implementation of a connector for a process, update the process configuration.The implementation can also be changed after deployment:  In versions 7.0.x, if you are using the Enterprise or Performance edition  In versions 7.1.0 and above, if you are using the Enterprise, Performance or Efficiency editionTo change connector configuration for a pool or task, use the connector wizard:  Select the pool or task.  Go to the Details panel, Execution tab.  Go to the Connectors in panel or the Connectors out panel, depending on whether you want to update a connector at the start or the end of the pool or task. A list of the connectors already defined is displayed.  Choose the connector you want to edit, and click Edit.  Follow the wizard to modify the configuration. For details, see the connector-specific documentation pages.",
      "url": " /bonita/7.7/application-and-process-design/connectivity/connectivity-overview",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-database-database-connector-configuration": {
      "title": "Database connector configuration",
      "content"     : "Database connector configurationThere are two types of configuration for database connectors:  A JDBC connector is a point-to-point connection configured with information to access the database directly.  A datasource connector is a connection to a datasource that is an intermediate point between the user (the Bonita process) and the database. The advantage of using a datasource is that it can use a connection pool. The details of how the datasource retrieves information and the database it uses are hidden from the connector.How to configure a JDBC connectorHow to configure a datasource connectorHow to configure a JDBC connectorThese configuration steps are the same for all database connectors except the datasource connector.  Select the Database connector, for example, JDBC 4 database query. Click Next.  Enter the Name, description, event anderror message (if any). Click Next.  Select the .jar file of the database driver. Click Next.  Enter the Access information. Click Next.  Enter the Input query. This is a query to send to the database. You can put single or multiple queries separated by a separator. You can also use the graphical query builder to specify the query. Click Next.  Choose how you want to specify the operations on connector outputs. Choose Graphical mode or Scripting mode. The Graphical mode does not require scripting. Click Next.  Specify the output operations, using the Graphical mode or using expressions.  In the Edit expression window, set the provided variable to get data from the external database.  Click Finish.Note: in the return type, the type of the variable from the database must match the type of variable which is saved to the process variable.How to configure a datasource connectorBefore you can configure the datasource connector, you need to configure the datasource itself, which is done in the application server.Follow the instructions in your application server documentation. See here for an example using Tomcat with PostgreSQL.Configure the connections of the datasource to be created with auto commit set to true.Make sure that all elements using connections return them to the pool with auto commit still set to true.A datasource connector can be used in a Database Connection Pool (DBCP). A DBCP is a group of connections. Multiple connections are “reserved” and used as needed.To configure the datasource connector, you need the following information:  The datasource name (for example java:/comp/env/yourDataSource).  Optionally, depending on how the datasource is configured, the properties needed to access it. These are specified as name-value pairs.To configure the datasource connector, follow these steps:  Select the Datasource database query connector. Click Next.  Enter the Name, Description, Event and error message (if any). Click Next.  Specify the datasource name and, optionally, properties. Click Next.  Enter the Input query. This is a query to send to the database. You can put single or multiple queries separated by a separator. You can also use the graphical query builder to specify the query. Click Next.  Choose how you want to specify the operations on connector outputs. Choose Graphical mode or Scripting mode. The Graphical mode does not require scripting. Click Next.  Specify the output operations, using the Graphical mode or using expressions.  In the Edit expression window, set the provided variable to get data from the external database.  Click Finish.",
      "url": " /bonita/7.7/application-and-process-design/connectivity/database/database-connector-configuration",
      "author": "",
      "categories": "Application and Process Design, Connectivity, Database"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-database-graphical-query-builder": {
      "title": "Graphical query builder",
      "content"     : "Graphical query builderNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.The graphical query builder helps you configure a database connector by showing you the structure of database content to help you construct the database query.Connect to the databaseBuild a queryCreate a select queryCreate an update queryCreate an insert queryCreate a Delete queryConnect to the databaseIn the Database access information screen, check Use the graphical query builder and click Connect.In the popup, enter the information needed to connect to the database. A popup tells you when the connection is established.The graphical query builder connects to a database and retrieves information that you can use to construct the query graphically.The first time you provide the connection information, it is for the connection used by the graphical query builder.Subsequently, you may be asked to give the connection information again: this is to configure the connector for the running process.It is possible to use one database with the graphical query builder and a different database when running the process, provided that the structure of the data in the two databases is the same.When the database access information is configured, click Next to go to the graphical query builder.Build a queryWith the graphical query builder you can construct a select, update, insert, or delete query.At any point, you can switch from the graphical query builder to entering the SQL query directly, by clicking on the Query tab.From the Query tab, you can go back to the graphical view by clicking on the Designer tab.Create a select queryUse a select query to get information out of the database. To define a select query:  Specify the table, by clicking Add a table… and selecting the table from the list in the popup. The query builder shows the columns of the database table.  Check the column or columns from which you want to retrieve the values.  If you want to ignore duplicate values and retrieve only the distinct values, check the DISTINCT box.  Optionally, set a condition on the values to be retrieved. If you do not set a condition, you will get all the values from the selected columns (with or without duplicates, depending on the DISTINCT setting).Setting a condition is a way of choosing the rows from which you want to get the value from the specified column.You can also specify groups to group the selected values, and group conditions to filter the results based on the value of a database element.Create an update queryAn update query modifies a value in the database. To define an update query:  Specify the table, by clicking Add a table… and selecting the table from the list in the popup. The query builder shows the columns of the database table.  Check the column or columns where you want to update the values.  Optionally, go to the Where tab and specify a condition to identify the specific row to be updated.  Go to the Set tab and specify how the identified value is to be updated:  In the left-hand list, select the item to be updated.  Click the right-arrow to move it to the Update Column list.  In the Expression column, specify the new value for the item. This can be a constant entered directly, the value of a field, or the value of a process variable.You can also specify DEFAULT to set the value to the default defined in the database.Create an insert queryAn insert query adds a new entry to the database. To define an insert query:  Specify the table, by clicking Add a table… and selecting the table from the list in the popup. The query builder shows the columns of the database table.  Check the column or columns to include in the new entry. They are added to the Column column in the table. The default value, if one is defined, is shown in the Value column.In the Value column, specify the value to be added for each item. A value can be specified directly as a constant, or can be a process variable or a field value.Create a Delete queryA delete query removes an entry from the database. To define a delete query:  Specify the table, by clicking Add a table… and selecting the table from the list in the popup. The query builder shows the columns of the database table.  Specify a condition to identify the entry or entries to be deleted:  In the Column column, specify the column name. This can be specified directly, or can be a field value or a variable.  In the Operator column, choose the logical operator.  In the Value column, specify the value as a constant, field value, or variable.You can combine conditions by specifying AND or OR operators in the last column of the table.",
      "url": " /bonita/7.7/application-and-process-design/connectivity/database/graphical-query-builder",
      "author": "",
      "categories": "Application and Process Design, Connectivity, Database"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-database-initialize-a-variable-from-a-database-without-scripting-or-java-code": {
      "title": "Initialize a variable from a database without scripting or Java code",
      "content"     : "Initialize a variable from a database without scripting or Java codeThis page explains how to set the value of a variable using the output of a database connector without using scripts or Java code.You can initialize single valued items and multivalued items. The connector automatically populates the data structure of the variable.Before you configure the database connector, define the pool-level variable to be initialized. If you do not define the variable first, you can define it from inside the wizard but only at the level when the connector is defined. This means that if you define the connector on a service task, which is recommended, the variable is only available in that service task.To configure the database connector to initialize the variable, add the connector as usual and follow the steps in the wizard until you get to the Output operations definition screen.Then complete the following instructions:  In the Output operations definition screen, check Graphical mode, then specify the structure of the output result that corresponds to the data you specified in the query builder:  single value if you selected one cell to initialize a single-valued variable  1 row x n columns if you selected all or part of a row to initialize a list variable  n rows x 1 column if you selected all or part of a column to initialize a list variable  n rows x n columns if you selected items from more than one row and more than one column to initialize a table (list of lists)Then click Next.  Specify the name of the variable being initialized. The variable type must be compatible with the structure you specified.  Then click Finish.When the process runs, the variable is initialized with the value from the database.",
      "url": " /bonita/7.7/application-and-process-design/connectivity/database/initialize-a-variable-from-a-database-without-scripting-or-java-code",
      "author": "",
      "categories": "Application and Process Design, Connectivity, Database"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-database-list-of-database-connectors": {
      "title": "List of database connectors",
      "content"     : "List of database connectorsThis page lists the database connectors provided with Bonita. For some connectors there are special considerations, included in a section below.If you are configuring a connector to a database that is the same type of database used by Bonita Engine, you are recommended to use the same driver for both, to limit possible conflicts.Here is the list of database connectors. The links take you to sections of this page giving dedicated best practice information.  Ingres 10.1  MySQL 5.5  Teradata 14  Informix 11  DB2 9.7  HSQL 2.2  Microsoft SQL Server  PostgreSQL 8.4 or 9.2  h2 1.3  Oracle 10G or 11G  JDBC 4  AS 400  Sybase ASE 15  Datasource db queryTo configure a database connector, follow the instructions in the wizard.MySQL 5.5It is not possible to execute more than one SELECT command in a single script.Teradata 14If you are using the terajdbc4.jar, you also need the tdgssconfig.jar file.Import both terajdbc4.jar and tdgssconfig.jar into Bonita Studio and add them to the connector configuration.Specify terajdbc4.jar as the active driver. To test the connector, you must specify both files. When you configure the process, specify both files in the process dependencies.HSQL 2.2Allows only one connection per destination at a timeMicrosoft SQL ServerSupported versions: This connector supports SQL Server 2008, 2012, 2014 and 2016.Language encoding: MS SQL Server uses only one encoding at a time. To avoid errors when creating the database, please do the following when using alternative languages:Define the encoding:  Option collation  Choose the language from the list  Save the configurationUsing a named instance: To use a named instance with your connector, you need to retrieve some information from the SQL Server Configuration Manager.  Go to MS SQL Server network configuration.  Go to Protocols for instance (where instance the name of the instance).  Open TCP/IP.  In the TCP properties, get the port number.When you configure the connector, use this port number in the URL. For example: jdbc:sqlserver://localhost:53165.Sybase ASE 15Two driver jar files are available, and the Driver and URL values to specify in the configuration wizard depend on which jar you use:  For jconn4.jar:Driver: com.sybase.jdbc4.jdbc.SybDriverURL: jdbc:sybase:Tds:host:port/database  For jtds-1.3.1.jar:Driver: net.sourceforge.jtds.jdbc.DriverURL: jdbc:jtds:sybase://host:port/database",
      "url": " /bonita/7.7/application-and-process-design/connectivity/database/list-of-database-connectors",
      "author": "",
      "categories": "Application and Process Design, Connectivity, Database"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-generate-pdf-from-an-office-document": {
      "title": "Generate PDF from an Office document",
      "content"     : "Generate PDF from an Office documentNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.The Generate PDF from and Office document connector converts a document from .odt or .docx format to PDF.It can be used in conjunction with the Insert data in a .docx/.odt template connector. The generated document can then be sent by email or stored in an external information system using the relevant connector.For proper conversion, you must specify the character encoding that is used in the source document. On most Windows configurations, encoding “windows-1252” is used.UTF-8 is assumed if you do not specify the encoding (that is, if the field is left blank in the connector configuration wizard).Warning: As an example when using special characters like ‘€’ with an invalid encoding will generate a PDF without those characters.Known limitations  Warning: there are known issues when adding an image in a docx using drag’n drop instead of copy/paste. The image is not rendered properly when converted into PDF.Rendering issues (at worst the element will not be visible in the generated PDF; at best, it will be visible but not exactly as in the Office document):  Bullet points  Strike-through (text with this formatting will not be visible in the generated PDF)  Exponents (text with this formatting will not be visible in the generated PDF)  Indexes (text with this formatting will not be visible in the generated PDF)  Highlighting (text with this formatting will not be visible in the generated PDF)  Asian characters  PDF Conversion of documents using asian fonts does not work  Asian fonts support need a specific iText jar that has a non-compliant license, so it cannot be provided by defaultImage positioning  Drawing shapes  Alignment of some text elements  HTML conversion generates a single html file. For that matter, linked resources (like images, …) are not supported. If you have images, use PDF conversion instead.This connector is build upon XdocReport third party library, for more information check their Wiki at https://github.com/opensagres/xdocreport/wiki",
      "url": " /bonita/7.7/application-and-process-design/connectivity/generate-pdf-from-an-office-document",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-google-calendar": {
      "title": "Google Calendar",
      "content"     : "Google CalendarOverviewCreate a service accountConfigure client in your domainSpecify connector connection parametersOverviewThe Google Calendar (API v3) connectors enable client applications to view and update calendar events by using Google Data API feeds. For details of the API, see the Google Developer’s Guide.Your business application, or set of processes, can create new Google calendar events, can edit, move, or delete existing events, and can query for events that match particular criteria. The connectors available are as follows:  Get event  Create event  Update event  Delete event  Move eventThis page describes how to create a Google Apps service account and get connection credentials, then how to configure the calendar client in your domain. You only need to get one set of credentials, and configure the client once, and then you can configure any number of Google calendar connectors. Use the connector wizard as usual to configure a Google Calendar connector. For each connector, you need to provide the parameters specific to the connector actions, and you need to specify the connection parameters.Create a service accountThe Google Calendar connectors use a service account, which calls the Google APIs on behalf of the process user. You need to create a Google Apps account and configure it as a service account with the necessary credentials. Complete these steps:  Create a project:  Go to the Google Developer’s Console.  Click Create Project and create a project that identifies your business application or set of processes.  Create the client Id that is used to identify your application when accessing the Google APIs:  In the left-hand menu, select APIs &amp;amp; auth then Credentials. The credentials page is displayed.  Click Create New Client ID.  In the popup list of Application types, select Service Account. Then click Create Client ID. The Google console generates the Client Id and a private key, which is stored in a file with the extension .p12.  Copy the .p12 file to a place where the connectors can use it. If your project name contains spaces, the filename will contains spaces. Rename the file to remove the spaces. Make a note the full path to this file because it is an input parameter, p12key, of the connectors.  Make a note of the CLIENT ID, which is needed for configuring your Google domain to authorize the client.  Make a note of the EMAIL ADDRESS, which is an input parameter, Service account ID, required when you configure connection parameters for a connector.  Make sure that the Calendar APis are enabled for your project:  In the left-hand menu, select APIs &amp;amp; auth then APIs. The APIs page is displayed.  Select the Calendar API row.  If the API is not already active, click on it and change the activation state from OFF to ON.The client application is now registered and your have the credentials needed to run a connector. If you need more information about the Developer’s Console, see the Google Developer documentation.Configure client in your domainYou need to authorize the client application to manage calendar events in your Google domain. To do this:  Go to the Google admin console, then go to the Security section.  Go to Advanced setting, and then click Manage API client access.  Enter the Client Id, which you obtained from the Developer Console.  In the API Scopes input text box, enter https://www.googleapis.com/auth/calendar.  Click Authorize.The configuration in your domain is now complete. You can now configure Google Calendar connectors.Specify connector connection parametersWhen you add a Google Calendar connector to a process diagram, you need to specify connection parameters in the wizard. The table below explains what to specify:Parameter name  Required information  Application name  A unique name that identifies the calling application in the Google reporting and statistics  Calendar ID  The email address that identifies the calendar that the created event will belong to. Typically, this will be a process or business variable  Service Account ID  The email address of the Google client, which you noted earlier from the Credentials page  Service Account P12 file  The full path to the private key file, which you noted earlier  Service Account User  The email address of the user who is creating the event. This user must have appropriate access rights to create or modify events in your domain  ",
      "url": " /bonita/7.7/application-and-process-design/connectivity/google-calendar",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-insert-data-in-a-docx-odt-template": {
      "title": "Insert data in a .docx/.odt template",
      "content"     : "Insert data in a .docx/.odt templateNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.The insert data in a .docx/.odt template connector allows to fill a specified template file by inserting values coming from the current process instance, for example from a form attached to a human task.The template is a LibreOffice/OpenOffice .odt file or a Microsoft Word.docx file with special placeholders called keys.A key is a replaceable element in the template that is identified with a dollar sign and surrounded by braces, (eg. ${element}), following the Velocity Template Language.To configure the connector for a task, add a connector (in or out) to the task, choose the “Office” category, and select “insert data in a .dox/odt template”.In the connector configuration, the keys are mapped to variables from the process or from any other data source.At some point in the process instance, the template file must be set as the content of a document created at pool level.When the connector runs, it creates a file based on the template and inserts the current values of the relevant variables into the appropriate placeholders (keys) in the file.The generated file can replace the template in the same document or be stored in another document of the process. A common usage is to send the document by email or store it in an external information system using another connector.How to insert `keys` in a template fileUsing Word (docx)Using LibreOffice (odt)ExampleBusiness Data ModelConnector configurationHow to insert keys in a template fileUsing Word (docx)Note: Tested versions are Microsoft Word 2007/2010. This connector may work with later versions.Create a field  Insertion &amp;gt; QuickPart &amp;gt; Field…  Select FusionField (or MergeField in some Word versions) and use a template (see Velocity templating language) as field name (eg: ${name}, ${user.Name}…etc)  Click OKUpdating an existing key  Right click on the Fusionfield to edit  Click on Update field…Using LibreOffice (odt)  Insert &amp;gt; Fields &amp;gt; More fields…  Go to Variables tab, select UserField and use a template (see Velocity templating language) as value (eg: ${name}, ${user.Name}…etc)  Choose Text format  Click InsertFor further information about the template design, click hereWarning: there is a known issue when adding an image in a .docx using drag’n’drop instead of a copy/paste. The image is not rendered properly if you convert the generated file into PDF.ExampleThis example uses key values taken from a business variable.Business Data ModelHere is a template example for Leave Request submission and approval.  for Leave Request submission and approval. This .docx file uses keys, most of which will be replaced by values from business variables created from the following Business Data Model:Connector configurationThe configuration is as follows:In this example, the key named user is mapped to the business variable user, the key named leave is mapped to the business variable studyLeave, and the key named today is mapped to a groovy script expression with the following content:import java.text.SimpleDateFormat;new SimpleDateFormat(&quot;yyyy/MM/dd&quot;).format(new Date())  If the keys are mapped with complex objects, pass the high level object to the mapping (eg. ‘user’). The connector will handle the sub-structure of this complex object (eg. ${user.firstName})  When using business variables, relations “loaded when needed” (lazy mode) are not loaded in a connector execution context. To use such relations, create new keys, like “userAddress” in the above example.  If the replacement value is null, then the field key will be rendered (eg. ${userAddress.line2}). Use a “!” mark to render blank value, like $!{userAddress.line2} if userAddress.line2 may be null.And the output file mapping:In this business example, the requesting user enters personal information in a process form. In a subsequent step, the reviewing user adds Approval information. The entered values are then provided as inputs to the insert data in a .docx/.odt template connector to replace the keys.The generated output file is then stored in a document of the process.This connector is built upon XdocReport third party library, for more information check their Wiki at https://github.com/opensagres/xdocreport/wikiYou will find out advanced report design documentation:  Loop for keys in table rows  Use a MS Word macro to design the report  Report samples  …",
      "url": " /bonita/7.7/application-and-process-design/connectivity/insert-data-in-a-docx-odt-template",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-ldap": {
      "title": "LDAP",
      "content"     : "LDAPThe LDAP connector searches in an LDAP directory and returns a list.Configuring an LDAP connector with the wizard:  In the General screen:  Enter a name and description for the connector.  Specify whether the connector runs at the start or the end of the step.  Specify the behavior if the connector fails.  Click Next.Specify the LDAP server information:Input  Description  Type  Host  IP address or name of server hosting LDAP directory  string  Port  LDAP directory port number  number  Protocol  LDAP directory port number  select  user  LDAP user name  string  password  LDAP user password  string  Then click Next.  Specify the search criteria:Input  Description  Type  Base DN  the Distinguished Name at which to start search  string  Filter  specify a subset, e.g. (&amp;amp;(objectClass=person)(givenname=John))  string in accordance with LDAP syntax  Attributes  define attributes to return in result entries using LDAP syntax  string of strings separated by “,”  Scope  subtree: entire subtree starting as the base DN, one level: entries immediately below the base DN, base: search just the named entry  select  Size limit  maximum number of entries to return  number  Time limit (in seconds)  maximum time to allow search to run  number  Referral handling  ignore or follow referrals  select  Alias dereferencing  always: always dereference aliases, searching: dereference aliases only after name resolution, never: never dereference aliases, finding: dereference aliases only during name resolution  select  Then click Next.  Specify the output operations. The connector returns a list object.  Click Finish.",
      "url": " /bonita/7.7/application-and-process-design/connectivity/ldap",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-messaging": {
      "title": "Messaging",
      "content"     : "MessagingThis connector will send an email message when activated. There is no output returned.Note: There is no way to set proxy server settings in this wizard.If there is a Proxy server setup in the company, ask the IT department for the specific configuration.Use the wizard and the information below to configure the connector.You can use the expression editor to specify an expression to provide the value, including scripts or variables. The expression must return a value of the required type. To specify the message content, you can also use a rich text editor.Connection information:Input  Description  Type  SMTP Host  IP address or name of email server  String  SMTP Port  Port defined for email system  Number  Security &amp;gt; SSL (not required)  Check the box if SSL security authorization is required     Security &amp;gt; STARTTLS (not required)  Check the box if STARTTLS security authorization is required     Authentication &amp;gt; Username  User name for the host account  String  Authentication &amp;gt; Password  User password for the host account  String  Addressing information:Input  Description  Type  From  Sender email address  String  To  Receiver email address  String  Other &amp;gt; Reply to  Email address to use when user tries to reply  String  Other &amp;gt; CC  Email address to use for a copy  String  Other &amp;gt; BCC (hidden copy)  Email address to use for a hidden copy  String  Message content:Input  Description  Type  Subject  Text  String  Message  Message content, which can be specified with the expression editor or with a WYSIWYG editor  String  Attachments  Include email attachments defined as a variables or expressions  String  Character set and additional header information (optional):Input  Description  Type  Character set  Character set  String  Headers  Add optional header information  String  ",
      "url": " /bonita/7.7/application-and-process-design/connectivity/messaging",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-salesforce": {
      "title": "Salesforce",
      "content"     : "SalesforceSalesforce version 24.0.0Available Salesforce connectors are:  Create Object - Create a Salesforce object (e.g.: Account, Contact)  Delete Object(s) - Delete one or several Salesforce object with list of objects identifiers in parameters  Query Object - Execute query on Salesforce objects (e.g.: SELECT Name FROM Account)  Retrieve Object(s) - Retrieve one or several Salesforce objects  Update Object(s) - Updates one Salesforce object with a list of objects identifiers in parametersParameters are:  Type of object you want to retrieve (e.g.: Account)  List of objects identifiers  List of fields of the object (e.g.: Name, Phone)  Update object - Update a Salesforce object.Parameters are:  Type of object you want to update (e.g.: Account)  Object identifier  Map of fields of the object to update (e.g.: Name = MyNewName, Phone = 1234)A Salesforce account is necessary. See the Salesforce web site for details.All connectors have these required parameters in common:  Username  Password  Security Token (it could be obtained via the Salesforce user interface)There are also optional parameters:  Endpoint: Endpoint URL  Authentication endpoint: Endpoint configuration  Service endpoint: Service endpoint URL  REST endpoint: REST endpoint URL  Proxy (if you use a proxy)  Proxy port  Proxy name  Proxy password  Timeout: timeout  Read timeout",
      "url": " /bonita/7.7/application-and-process-design/connectivity/salesforce",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-sap-jco-2": {
      "title": "SAP JCo 2",
      "content"     : "SAP JCo 2Note: For Enterprise, Performance, Efficiency, and Teamwork editions only.The SAP Java Connector (SAP JCo 2) is a toolkit that allows a Java application to communicate with any SAP system.It combines an easy to use API with unprecedented flexibility and performance.The package supports both Java to SAP System as well as SAP System to Java calls.  The SAP Jco2 connector can be used to call a SAP function (BAPI, RFC or ZBAPI)  High-performance JNI-based RFC middleware  Supports R/3 3.1H and higher  Supports inbound (Java client calls BAPI or RFM) and outbound (ABAP calls Java server) calls  Supports synchronous, transactional (important for IDocs), and queued RFC  Supports client pooling (good for web servers)  JCO 2.1.x is no longer supported by SAP since 31.03.2013PrerequisiteDownload and install the SAP connector.zip filesHow to use the contents of the zip fileInstallation of system filesHow to import the SAP JCo2 libraryHow to configure the SAP JCo2 connectorThe resultAdvanced features in Subscription EditionsPrerequisiteYou must have an SAP license and an SAP server to use the connector.Download and install the SAP connector.zip filesTo connect to an SAP system from Bonita Studio, and have the correct graphic display, you must install the SAP .dll and .jar files onto your (Windows) machine.You must have a SAP User ID and password to enter the SAP Support Portal to download the files. Go to the SAP Service marketplace (you will need to log in first with an account login and password).JCo2: sapjco-ntamd64-2.1.9Contents of sapjco-ntamd64-2.1.9.zip  demo folder: contains some demos; not needed  docs folder: contains the HTML help pages for installation and librfc32.dll: must be installed in the System32 directory  Readme.txt: contains instructions  sapjco.jar: must be installed in the libraries directory /endorsed of your var-studio install directory  sapjcorfc.dll: must be installed in the System32 directoryHow to use the contents of the zip fileNote: The indications below are found in the Readme.txt.  Unzip the contents of the .zip file into a temporary directory, for example: C:tempsapjco-ntamd64-2.1.9.  In docsjco, click on installation.html.Installation of system filesFor Windows:There are different distribution packages for various JRE versions and hardware processors available:  sapjco-ntintel-2.1.9.zip for a 32-bit JRE running on a 32-bit INTEL x86 or a 64-bit INTEL Itanium processor  sapjco-ntia64-2.1.9.zip for a 64-bit JRE running on a 64-bit INTEL Itanium processor  sapjco-ntamd64-2.1.9.tgz for a 64-bit JRE running on a 64-bit AMD or INTEL x86 processorTo install JCo for Windows:  Unzip the appropriate distribution package into an arbitrary directory {sapjco-install-path}.Important: Do not forget to install the .dll files in the System32 directory for the approptiate Jc0 version.If you already have an older librfc32.dll in the {windows-dir}system32 directory, replace it with the one that comes with JCo.  Add {sapjco-install-path} to the PATH environment variable.  Add {sapjco-install-path}sapjco.jar to your CLASSPATH environment variable.For Linux:There are different distribution packages for various JRE versions and hardware processors available:  sapjco-linuxintel-2.1.9.tgz for a 32-bit JRE running on a 32-bit INTEL x86 processor  sapjco-linuxia64-2.1.9.tgz for a 64-bit JRE running on a 64-bit INTEL Itanium processor  sapjco-linuxppc64-2.1.9.tgz for a 64-bit JRE running on a 64-bit PowerPC processor  sapjco-linuxx86_64-2.1.9.tgz for a 64-bit JRE running on a 64-bit AMD or INTEL x86 processor  sapjco-linuxs390x-2.1.9.tgz for a 64-bit JRE running on a 64-bit IBM eServer zSeries processorTo install JCo for Linux:  Copy the appropriate distribution package into an arbitrary directory {sapjco-install-path}.  Change to the installation directory: cd {sapjco-install-path}  Extract the archive: tar zxvf sapjco-linux*2.1.9.tgz   Add {sapjco-install-path} to the LD_LIBRARY_PATH environment variable.  Add {sapjco-install-path}/sapjco.jar to your CLASSPATH environment variable.How to import the SAP JCo2 libraryIn the Teamwork, Efficiency, Performance, and Enterprise editions, import of the jar file by clicking on the Import sapjco.jar button in the connection configuration window. Then restart Bonita Studio.In the Community edition, there is no import button. The JCo2 library must be imported into the /endorsed directory of your Bonita Studio installation by hand. Then restart Bonita Studio.How to configure the SAP JCo2 connectorUse the wizard to configure the connector. Note the following:  In the **Function definition window, only the function name is required. Enter the name of the function e.g. GET_SYSTEM_NAME  No parameters are needed in the Input parameters window.  In the Output parameters window, the function name is displayed to confirm that the input is this function. Note:You can create a blank .html file on your C: drive, which will be filled with the output information from the SAP connector.  In the Output results window, you can specify an expression, by clicking the pencil to open the Expression editor.Set the expression type to Script, and enter outputResults.get(0). In the Return type, enter string.The resultThe result will be shown in the Bonita Portal as a value in a field and in the .html file as a table containing the value or values.Note: if you have already created a SAP connector and saved the settings, you can simply click on load, to automatically load the connection settings.Advanced features in Subscription EditionsIn the Bonita Teamwork, Efficiency, Performance, and Enterprise editions, the SAP wizard has advanced features: You do not need to know the names of the functions by heart, as the functions are suggested in a dropdown menu.  Filter functions by group: a dropdown list listing all the functions by group  Function description: a dropdown list listing all the functions, with auto-complete (just type the first letter e.g. G to give a list of Get functions  Function name: dropdown list  Input parameters: click on a button More information to show a graphic display in the form of a table, of the chosen function",
      "url": " /bonita/7.7/application-and-process-design/connectivity/sap-jco-2",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-sap-jco-3": {
      "title": "SAP JCo 3",
      "content"     : "SAP JCo3Note: For Enterprise, Performance and Efficiency editions only.The SAP Java Connector is a toolkit that allows a Java application to communicate with any SAP system. It combines an easy to use API with unprecedented flexibility and performance. The package supports both Java to SAP System and SAP System to Java calls.Prerequisite You must have an SAP license and an SAP server to use the connector.JCo 3  The SAP JCo3 connector can be used to call a SAP function (BAPI, RFC or ZBAPI).  High-performance JNI-based RFC middleware.  Supports R/3 3.1H and higher.  Supports inbound (Java client calls BAPI or RFM) and outbound (ABAP calls Java server) calls.  Supports synchronous, transactional (important for IDocs), and queued RFC.  Supports client pooling (good for web servers).  Has monitoring capabilities.Download and install the SAP connector .zip filesTo connect to an SAP system from Bonita Studio, and have the correct graphic display, you must install the SAP .dll and .jar files onto your (Windows) machine. You must have an SAP User ID and password to enter the SAP Support Portal to download the files.Go here (you will need to login first) SAP Service marketplace.JCo 3: sapjco3-ntamd64-3.0.3Contents of sapjco-ntamd64-3.0.3.zip  Readme.txt: contains instructions  sapjco3.jar: must be installed in the /endorsed directory of your Bonita Studio installation and in the webapp libraries directory of the application server.  sapjcorfc.dll (sapjcorfc.so): must be installed in the native library search path:  Windows: usually the dll file is stored in C:windowssystem32  Linux: usually the dll file is stored in /usr/libjavadoc: contains the .html help pages for installation  examples: contains some examplesHow to use the contents of the .zip file with an application server  Extract the contents of the .zip file into a temporary directory, for example: C:tempsapijco3.  Read the installation page provided with the sapjco distribution and follow the instructions.  Put the sapjco3.jar file in the webapp libraries directory of the application server, so that the jar is in the classloader used by the Bonita Engine.  Put the sapjco.dll or .so libraries in the native library search path: C:windowssystem32 for windows, or /usr/lib for Linux.Studio: How to import the SAP JCo3 library and make a request with an example function using the graphic displayThere is below a step by step procedure on Windows. It is assumed that the Studio had been started at least once successfully.  Store the sapjco.dll in the C:windowssystem32 directory  Reboot  Store the sapjco3.jar in the bonita webpapp library directory, deployed in the tomcat embedded with the Studio: e.g. C:BonitaSubscription-7.6.3workspacetomcatwebappsbonitaWEB-INFlib  Store the sapjco3.jar in the endorsed directory of your Bonita Studio installation: e.g. C:BonitaSubscription-7.6.3endorsed.  Start the Studio  Open a diagram  Select a Service task  Add a SAP JCo 3 connector  Fill in all the connection fields with the correct settings. Note that the SAP JCo 3 connector supports a single destination for all connector instances in Bonita Engine.  Once all the fields are filled, test the connection by clicking on the _**test **_button.  In the function definition window, only the function name is required.  Click on the arrow at the end of the field to display a dropdown list of functions.  Click on GET_SYSTEM_NAME for example  Click Next  This will display the Input Parameters window  Click Next  This will display the Output Parameters window  The GET_SYSTEM_NAME is displayed to confirm the input is this function. Note: You can create a blank .html file on your c: drive, which will be filled with the output information from the SAP connector  Enter the path to the .html file in the field called “HTML File”  Click Next  This will display an Ouput operations window  Click FinishAdvanced features in Subscription EditionsAdvanced features in Subscription EditionsIn the Efficiency, Performance and Enterprise editions, the SAP wizard has advanced features: You do not need to know the names of the functions by heart, as the functions are suggested in a dropdown menu.  Filter functions by group: a dropdown list listing all the functions by group  Function description: a dropdown list listing all the functions. Auto complete (just type the first letter e.g. G to give a list of Get functions  Function name: dropdown list",
      "url": " /bonita/7.7/application-and-process-design/connectivity/sap-jco-3",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-script": {
      "title": "Script",
      "content"     : "ScriptThese are the following script connectors:  Groovy 1.8 which executes a Groovy 1.8 script.  Groovy 1.8 (deprecated), which is provided for backward compatibility only so that you can continue to run processes with this connector. Do not use this for new connector instances.  System script, which executes a command or script, generally a shell script (bash for Linux or cmd for Windows).How to configure the system script connectorHow to configure the Groovy script connectorHow to configure the system script connectorFollow the steps in the wizard to configure the connector. For the Parameters of the script, enter this information:  In the first field, enter the script interpreter e.g. /bin/sh  In the second field, enter the execution parameter e.g. -c  In the third field, enter the script e.g. find /home/ -name &quot;*.xml&quot;How to configure the Groovy script connectorFollow the steps in the wizard to configure the connector. When you have entered the script, click Evaluate to test the validity of the script. If the script is not valid, a popup window will display an error message.",
      "url": " /bonita/7.7/application-and-process-design/connectivity/script",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-twitter": {
      "title": "Twitter",
      "content"     : "TwitterThis page explains how to configure the Twitter connectors in Bonita Studio.The following Twitter connectors are available:  Update Twitter status: to publish your own Tweet  Send a tweet: to send a “Direct Message”To publish Tweets or send direct messages, you need to register your application with Twitter. When you register, you will get authorization credentials:  Consumer key  Consumer secret  Access token  Access token secretYou need to provide these when you configure a Twitter connector.To add a Twitter connector, follow the steps in the wizard, and use the following information:  After you specify the authorization credentials, you can check that the connection will work by clicking Test connection. If your application is protected by a firewall, you can also specify the proxy to be used.  For theUpdate Twitter status connector (i.e. “Send a Tweet”), you can enter the Tweet content directly in the wizard for a fixed status, or you can click Switch editor and enter the text using the expression editor.  For theSend a Tweet connector (i.e. “Direct message”), specify the message and the recipient using the expression editor.",
      "url": " /bonita/7.7/application-and-process-design/connectivity/twitter",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-web-service-web-service-connector-overview": {
      "title": "Web service connector overview",
      "content"     : "Web service connector overviewGeneric configurationInputOutputResultGeneric configuration  Go to Web services in the connectors list.  SelectWeb Service Client.  Click on Next  Enter a name and description for the connector.  Click on Next.To format your entries according to SOAP specifications, go to SOAP!See a working example of a web service connector in this tutorial.Warning: this connector uses the StAX API. StAX libraries cannot be loaded in more than one classloader but must instead be placed in a single location where they can be called by all the items that use them.When you configure a process that uses this connector, you must manage the jar files.InputInput type  Description  Type  Target NS  Target NS (URL)  String  Service name  Name of web service  String  Port name  Web service port name  String  Request  Request entity  String  End point address  URL  String  Binding  Specify protocol and data format  String  Password  Password of user authorized to access  String  Service NS  Target namespace (URL)  String  Service name  Name of web service  String  Port name  Web service port name  String  End point address  URL  String  Binding  Specify protocol and data format  String  Output| Output type  | Description  | Type  || ———— | ———— | —– || Response  | Result of execution  | Source  |ResultThe connector will locate and execute the specific web service and return and output in the form of a Java object.",
      "url": " /bonita/7.7/application-and-process-design/connectivity/web-service/web-service-connector-overview",
      "author": "",
      "categories": "Application and Process Design, Connectivity, Web service"
    }
    ,
  

    "bonita-7-7-application-and-process-design-connectivity-web-service-web-service-tutorial": {
      "title": "Web service connector tutorial",
      "content"     : "Web service connector tutorialNote: This example uses the 6.x Application legacy forms.This example process will use a Web Service connector to call a sample Web Service to display a weather report.  Create the diagram (as shown in the example above)  Select the Pool &amp;gt; Data and click on the Variables tab and add the following process variables:  city (text)  country (text)  weatherData (Java Object of type java.util.Map)Create a case start form for the Pool. Select the pool and go to the Details panel, 6.x Application tab, Pageflow pane, Forms tab and add the following widgets:  City (text field)  Country (text field)  Get weather forecast (submit button)Set the : transition conditions on the gateway  Select the transition to Display Weather and check Default Flow  Select the transition to No Result Found and edit the condition by clicking on the Pencil icon  Select script in the edit window and enter the following Groovy to evaluate the condition:   return (weatherData==null)  set a name and click OKSelect the Get weather service task  Add a WebService 1.2 connector to this task and configure it using the wizard.In the Connection parameters window:  For the Community edition, provide these settings:  Service NS: GlobalWeather  Service name: http://www.webserviceX.NET  * For the Teamwork, Efficiency, Performance, or Enterprise edition. provide these settings:  Enter the WDSL URL http://www.webservicex.net/globalweather.asmx?WSDL and click on the Introspect button, then leave the login info fields empty  Set the Port: GlobalWheatherSoap12 and leave other parameters with default values  * In the Request parameters window (for all editions), provide these settings:  SOAP action: http://www.webserviceX.net/GetWeather  Port name: GlobalWeatherSoap12  End point address: http://www.webservicex.net/globalweather.asmx  Binding: http://www.w3.org/2003/05/soap/bindings/HTTP/  Envelope &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;env:Envelope xmlns:env=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&amp;gt; &amp;lt;env:Body&amp;gt;   &amp;lt;tns:GetWeather xmlns:tns=&quot;http://www.webserviceX.NET&quot;&amp;gt; &amp;lt;tns:CityName&amp;gt;${city}&amp;lt;/tns:CityName&amp;gt; &amp;lt;tns:CountryName&amp;gt;${country}&amp;lt;/tns:CountryName&amp;gt;   &amp;lt;/tns:GetWeather&amp;gt; &amp;lt;/env:Body&amp;gt;&amp;lt;/env:Envelope&amp;gt;  In the Response configuration window, check the Returns body checkbox to use the response body in the output operations.  In the Output operations window, edit the first output operation:  Select the weatherData variable as the connector output target  Click on the pencil icon to edit. Edit the expression of the data to be saved and enter the following Groovy script (the script parses the XML output of the Web Service):  In Expression type, click on Script  The script should be as follows:import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import org.w3c.dom.Document;import org.w3c.dom.Element;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import org.xml.sax.InputSource;// Clean response xml documentresponseDocumentBody.normalizeDocument();// Get result nodeNodeList resultList = responseDocumentBody.getElementsByTagName(&quot;GetWeatherResult&quot;);Element resultElement = (Element) resultList.item(0);String weatherDataAsXML = resultElement.getTextContent();// Check for empty resultif (&quot;Data Not Found&quot;.equalsIgnoreCase(weatherDataAsXML))return null;// Parse embedded XML of resultDocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();InputSource inputSource = new InputSource();inputSource.setCharacterStream(new StringReader(weatherDataAsXML));Document weatherDataDocument = documentBuilder.parse(inputSource);Node weatherNode = weatherDataDocument.getDocumentElement();// Save weather dataMap&amp;lt;String,String&amp;gt; data = new HashMap&amp;lt;String,String&amp;gt;();NodeList childNodes = weatherNode.getChildNodes();for (int i=0; i&amp;lt;childNodes.getLength(); i++) {Node node = childNodes.item(i);if (node.getNodeType() == Node.ELEMENT_NODE) {String key = node.getNodeName();String value = node.getTextContent();data.put(key, value);}}return data;  In Return type enter java.util.Map  Select the Display weather task and add a blank form (without any widget) by going into the Application &amp;gt; Pageflow tab  In the form builder, drag and drop a table widget to create a table  Select the table widget, click on the Data tab  Click on Edit as an expression, then click on the pencil next to the first field (initial value)  Use the following Script:List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; table = new ArrayList&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;();Set&amp;lt;Entry&amp;lt;String,String&amp;gt;&amp;gt; weatherDataEntries = weatherData.entrySet();for (Entry&amp;lt;String,String&amp;gt; entry : weatherDataEntries) {List&amp;lt;String&amp;gt; row = new ArrayList&amp;lt;String&amp;gt;();row.add(entry.getKey());row.add(entry.getValue());table.add(row);}return table;  In Return type enter: java.util.list  Create a submit button called Close  Select the **No result found task **and add a blank form by going into the Application &amp;gt; Pageflow tab  Add a message widget and sets its initial value to “Sorry, no result found.”  Add a submit button and name it “Close”Once you have finished creating the diagram and configuring the tasks, the script and form fields, click Run to deploy and run the process in Bonita Portal.  In the first form, enter a country and a city e.g. France, Grenoble  Click Get Weather Forecast  Click Display weatherThe ResultThe result is a form displaying all the weather information retrieved, for Grenoble.Weather forecastStatus  Success  Time  Jan 02, 2014 - 08:00 AM EST / 2014.01.02 1300 UTC  RelativeHumidity  81%  Temperature  51 F (11 C)  Location  Grenoble / St. Geoirs, France (LFLS) 45-22N 005-20E 386M  DewPoint  46 F (8 C)  Visibility  greater than 7 mile(s):0  Pressure  29.85 in. Hg (1011 hPa)  Wind  from the SSW (200 degrees) at 8 MPH (7 KT) (direction variable):0  ",
      "url": " /bonita/7.7/application-and-process-design/connectivity/web-service/web-service-tutorial",
      "author": "",
      "categories": "Application and Process Design, Connectivity, Web service"
    }
    ,
  

    "bonita-7-7-application-and-process-design-data-data-handling-overview": {
      "title": "Data handling overview",
      "content"     : "Data handling overviewIn a BPM-based application, use:  Business variables for information that:  is mostly used by Bonita  has meaning after a process instance is archived  is used at several places in the process  is read by a process to orientate its flow  is shared across several process instances  is displayed in an application pageTask-level process variables for:  intermediate computation results (for example a connector result to be used as input of the next connector)  information that is private to the process, not used elsewhere in the applicationPool-level process variables for information that:  can be read by the process to orientate its flow  can be used at several places in the process  is private to the process, not used elsewhere in the applicationExternal databases, with connectors and custom data types, for information that:  is used by multiple applications besides Bonita  Key benefits of using business data:  Control of indexing strategy  Definition of custom queries to efficiently read the data  Full control of lifecycle of the data through the set of processes that handle it (add, update and delete)  Improved performance compared with process variables or external databases  Easier application maintenanceAn application page accesses business data using the bdm REST API. A page also contains page variables, which have no meaning outside the page.The data that is passed from a form to a process is defined using a contract. Define a contract for process instantiation and for each human task. These contracts are part of the process definition. A form has access to business data and documents using the context](/bonita_doc/bonita/7.7/application-and-process-design/define-access-control-on-business-objects/contracts-and-contexts) and the . A form also contains form variables, which have no meaning outside the form.",
      "url": " /bonita/7.7/application-and-process-design/data/data-handling-overview",
      "author": "",
      "categories": "Application and Process Design, Data"
    }
    ,
  

    "bonita-7-7-application-and-process-design-data-define-and-deploy-the-bdm": {
      "title": "Define and deploy the BDM",
      "content"     : "Define and deploy the Business Data Model (BDM)The business data model is the definition of the business data that is shared by processes and process-based applications in a tenant. This page explains how to define the business data model and how to deploy it. After the model is defined, you can use it to specify the business data used in a process.Business data model (BDM)Business data storageBDM specificationDefine the BDMExport the BDMBusiness objects in processesBusiness data model (BDM)Your business data is the information that is shared between your processes and applications. It is defined as a set of business object in a business data model (BDM). There is one BDM that is used by all processes and applications in a tenant.  A BDM is defined at tenant level. It means you can have different BDM per tenant on the same Bonita platform. See BDM data storage for more information on how to configure a business data model per tenant.When you define a process, you specify the business objects that are relevant to the process. When a process is instantiated (a case is started), the specified business objects are instantiated as required, becoming variables within the process instance.You are recommended to use business data instead of process data for any data that has meaning outside of one single process. The business data objects are stored in a database that can be accessed by all applications and processes in a tenant. There is no need to import data from an external system or write it back after a change. The data is automatically stored persistently. It is simple to specify the business objects relevant to a process or task, using Bonita Studio. You can also access a business object programmatically by its data access object (DAO).To design your BDM, you need to consider the following:  In a BDM, you create predefined business object definitions that represent key concepts which are manipulated by your processes. For example, Orders, Invoices, and Leave requests are be shared by all processes when running in the Bonita Engine during production.  A BDM is composed of simple and complex business objects, and the composition and aggregation relationships between them.  There is one BDM for a tenant, so it must include all the objects needed. Updating a model must be done with care, so that the changes do not cause problems for deployed processes or applications.  Business objects are instantiated at diagram or process level, not at task or form level.The BDM specification explains the details of what you must configure in a BDM. Use Bonita Studio to define a BDM.Business data storageThe business data specified in the BDM is stored in a database. It requires two datasources, BusinessDataDS and NotManagedBizDataDS. When you define the BDM in Bonita Studio, the built-in H2 database and the datasources are created automatically in your development environment.During development, you can use the tools in the h2-1.3.170.jar in the workspace Tomcat library to view the business data in the h2 database. If you modify database content manually, there is risk of losing data and losing synchronization with business objects in a process instance. However, it can be useful to view the database for debugging processes. If you change the BDM during development, this can also cause problems in existing process definitions.When you are ready to go to production, you need to configure a database and datasources for business data in your production environment.BDM specificationA BDM is a structured hierarchy of business objects. It is identified by a package name.A business object definition consists of the following:  An object name. This must be a Java class name, because a business object is implemented as a Java class. The fully-qualified object name must be unique.  Attributes. These are the components of the object. There can be any number of attributes. For each attribute, you can specify:  A name  The data type  The length, when relevant for the data type  Whether it is mandatory  Whether the object can contain multiple instances  Any unique constraintsA set of default queries, created automatically, and optionally some custom queries  Indexes for some attributes (optional)  A persistenceId, created automaticallyBusiness objects can be combined using composition or aggregation relationships. They are managed using standard create, read, update, delete actions. A business object can be read directly using the Engine Java API specifying the Java DAO, or using the REST API. To read a business object in a Groovy expression, use the DAO. A business object can be updated only in a process, using an operation.MultipleIn some processes, user interfaces or system activities might need to handle multiple instances of a business object. Use cases include the ability to modify data on mass (for example, approving several leave requests from a list in a user form), and initializing a set of data coming from an external system (for example, loading a list of products from an external datasource and saving each of them in a business object instance).To support handling of multiple instances of a business objects:  Specify that a given business data is multiple, using a checkbox in the new business data wizard.  Use a java.util.list of objects when accessing multi-instance business data from a Groovy expression.  Set the list of business object instances in an operation using takes value of with a right operand that consists of a list of existing (possibly modified) and new business object instances.  Delete all instances from a list of business object instances with an Is Deleted operation.Unique constraintAn SQL UNIQUE constraint is a single field or a combination of fields that uniquely defines an entry in a database. A unique constraint on a single field means that every entry has a different value for this field. A unique constraint for a combination of fields means that this combination is unique, even though some of the component field values might be common or null.You can specify a unique constraint for an attribute, to require that every value of the attribute is unique. This means that you can use this attribute in data queries knowing that it is not possible for two entries to have the same value.QueriesJPQL queries are used to get information about data objects stored in the database. A set of default queries is defined automatically for each object in the BDM. You can also create custom queries.The default queries are find and find_by queries. There are three types:  based on unique constraints (which returns a single result)  based on simple attributes (with = criterion)  based on Select All (which returns all Business data on the Business Object)To create a custom query, use the query tab of the Expression editor to write a query script. You can use one of the default queries as an example. A custom query can be on multiple attributes. Only SELECT queries are supported.To use paged results with a custom query on a business object, you need to define a related query that counts the total number of results that the query would return without paging. The count query name is based on the custom query name; for example, for a query named query1, the count query must be named countForQuery1. For a default query, the count query is created automatically.When you call a query via the REST API, the relevant count query is automatically called in the background to get the total count, which can be used to calculate the number of pages necessary to retrieve all matching results. The result of the count query is visible in the HTTP response header, in the Content-Range field.To call a query, use the DAO instance. For a Groovy expression, there is a provided variable that implements the business object DAO class.Example: When handling business objects in a form, you want to reload business objects from a query and use a Groovy script to repopulate the form accordingly. Suppose that a form shows a list of contracts that can be filtered according to the choice of client in a selection widget. When the user selects a client, this triggers the execution of a business object query, Contracts.findByClient(). A script parses the resulting list of Contracts and repopulates the contract list widget. This scenario requires DAO objects to be called from a Groovy script expression.IndexesThe purpose of an index is to retrieve data more rapidly. You can specify indexes on business objects to optimize performance of application. For example, for a process to modify purchase orders with an instantiation form used to search for the appropriate purchase order, define an index on purchase order number.When you view a business object in the Bonita Studio business data model wizard, you can see the attributes that can be indexed. You can define an index on a single attribute or on an ordered list of attributes. An index is automatically created on the PersistenceID, as a primary key. This index is not visible in the BDM wizard. The BDM defines the indexes needed for all applications and processes that use business data. There is no limit to the number of indexes you can define. However, if you define a large number of indexes and have a high volume of business data, it takes longer to build the indexes.Note: If you are using an Oracle database, do not define an index on a unique constraint attribute. The database creates indexes automatically for unique constraint attributes, so there are problems during execution if you also specify an index on a unique constraint attribute.In a production environment, indexes are built when a tenant starts or after a new BDM is deployed. In a development environment, indexes are built when Bonita Studio starts and when the Studio BDM wizard is closed.Composition and aggregationComposition and aggregation are two ways in which you can define a composite business object that includes relationships with other business objects in the BDM.  In a composition relationship, a child object cannot exist independently of the parent. The composite business object contains attributes that are business objects. It can also contain attributes with simple data types. For example, a room object that is a child of a house object cannot exist if there is no house object.  In an aggregation relationship, a child object can exist independently of the parent. The composite business object refers to other business objects, as well as containing simple attributes.Example: A Purchase Order object consists of a set of primitive attribute variables (such as PO number, client, creation date), and a set of order item objects. The order items have no meaning outside the order, so have a composition relationship with the purchase order. An order item contains a product object and a simple attribute for quantity. The product object has an existence outside the order item (it is used in the product catalog), so has an aggregation relationship with the order item.In the Bonita Studio BDM wizard, you can specify the objects that are related by composition and aggregation, as well as the simple attributes. A child object can be mandatory or optional. A child object can be multiple, which means that the composite object contains zero or more (if optional) or one or more (if mandatory) instances of the child object. You cannot set a unique constraint on a child object. The default relationship is composition.When you configure an object in the Bonita Studio BDM wizard, the attribute dropdown list contains the names of the objects that can be included by composition or aggregation. You cannot specify the object you are configuring or its parent.A composed object is automatically saved to the database using an appropriate schema. For a composition relationship, the child object contains the id of the parent object as a foreign key. For an aggregation relationship, if the child object is not multiple, the parent object contains the id of the child object as a foreign key. If the child object is multiple, the child object ids are stored in a dedicated association table.When you create a process that uses a business object with a composition or aggregation relationship, treat the object as a typical business object, with the following exceptions:  A composite object cannot be automatically mapped to page widgets or groups of widgets.  To set the value of a composite object, either use a Groovy expression or directly assign the value to the child object from an existing class instance.  You can use getter and setter methods in process or activity operations to set the composed objects as a single instance or as a java.util.list for a list of instances.  If your process uses a query from a Groovy expression or uses DAO objects from a client Java application, load the complete composite objects including the child objects.LoadingThere are two options for loading complex business objects, lazy or eager.With lazy loading, the parent object instance is loaded, but child object instances are loaded only when they are needed.With eager loading, child object instances are loaded when the parent object instance is loaded.The default is lazy loading. You can override this for any business object by configuring it to use eager loading when you specifythe object relationship properties. This means that the specified object and all objects related to it by composition or aggregationrelationships are loaded.There is an overhead for the additional data load and maintenance of the information in memory, but there is a saving in data access time because the data is already loaded.Multi-instantiation using business object variables in a listThe list can be a multiple business data variable, a multivalued process variable, or any type of list.You can use a list business object or variable to create multiple instances of a task. The MultiInstanceIterator reference created at task level uses each item of the list to create an instance of the task.Define the BDMYou define the BDM using Bonita Studio. It is automatically deployed to the built-in Bonita Engine and available to processes being run from Studio.This means that you can have a different BDM in each Studio during development, which enables you to test the BDM before deploying it in your tenant.However, if you are sharing diagrams and other artifacts in development, you need to synchronize BDM definitions, either by exporting your BDM manually for importinto other development systems, or by using a shared repository (not available in the Community edition).To define the BDM, go to the Bonita Studio Development menu, BDM, and choose Manage. The current BDM definition is displayed. Specify the package name for the BDM in the field below the List of Business Objects.To add an object:  Go to the List of Business Objects and click Add.  The newly created object is added to the list, with a temporary name.  Click the name of the new object to select it, and specify the name you want to use by typing over the temporary name.  Then modify the object to specify the details.To modify a new or existing object:  Select the object in the List of Business Objects. The details are displayed on the right-hand side of the popup.  Enter a description for the object. This is optional, but recommended for maintenance and for communicating with other developers using the same BDM.  In the Attributes tab, specify the attributes of the object. For each attribute:  Specify a name. This must be unique within the object.  Specify the type, by clicking on the exiting type and choosing the new type from the drop-down list.  If the attribute is multi-valued, check the box in the Multiple column.  If the attribute is mandatory, check the box in the Mandatory column.  If the attribute is of type String, set the attribute length in the field below the attribute list.  If the attribute is of type of a BDM object, set type the Relationship (Aggregation or Composition) and the loading configuration (for lazy, select Only load related objects when needed, for eager, select Always load related objects)In the Unique constraints tab, specify the attributes and sets of attributes that have a uniqueness constraint.  Click Add to add a constraint. The constraint is added to the list with a temporary name.  Click the name of the new constraint to select it, and specify the name you want to use by typing over the temporary name.  Click in the Attribute column of the constraint, and click the icon at the right end of the file to open the Select attributes popup.  In the popup, check the boxes to select the combination of attributes that must be unique. You can specify a single attribute or a set.  Click OK to close the popup. The attributes are shown in the constraints list.In the Queries tab, you can view the default queries and manage custom queries. To add a custom query:  Click the Custom radio button.  Click Add to add a constraint. The query is added to the list with a temporary name.  Click the name of the new query to select it, and specify the name you want to use by typing over the temporary name.  Click in the Query column, and click the icon at the right end of the file to open the Create query popup.  In the popup, specify the query in JPQL. All the parameters used in the query must be specified in the list.  Select the result type from the drop-down list.  Click OK to close the popup. The query is saved.In the Indexes tab, specify the indexes for the object.  Click Add to add an index. The index is added to the list with a temporary name.  Click the name of the new index to select it, and specify the name you want to use by typing over the temporary name.  Click in the Attribute column of the index, and click the icon at the right end of the file to open the Select attributes popup.  In the popup, specify the attributes that you want indexed. To specify an attribute to index, select the attribute in the Available attributes list and click Add.  Use the Add, Remove, Up and Down buttons to specify the index attributes in order.Click OK to close the popup. The index is saved.  Click Finish to save the business data model, which saves all the objects and create BDM database structure. A confirmation dialog will ask to optionally reset BDM database. Reset database is required when changes impact the mandatory or multiple setting for an attribute, a unique constraint, or when a non primitive attribute type is modified.Export the BDMThere are two ways to export a business data model: in a ZIP file for deployment, or in a BOS file for sharing with other Bonita Studios.Export the BDM for deploymentTo deploy the BDM, you export it as a ZIP file from Bonita Studio and then import it into Bonita Portal. Warning: Before deploying the business data model, you must pause the BPM services, so that the update can be performed without affecting ongoing processes. Important: You are recommended Back up your platform and database before deploying a new BDM in case of problems during the update.Follow these steps:  In Bonita Studio, open the Development menu in the cool bar.  Click Business Data Model &amp;gt; Export.  Select a destination folder.  Click Export. A file called bdm.zip is written to the folder that you specified.  Log in to Bonita Portal as the technical user.  Go to the BPM Services page.  Click Pause.  When the BPM services are paused, go to the Business Data Model menu (and, for Efficiency, Performance and Enterprise editions, choose Definition).  Specify the file containing the business data model that you exported from Bonita Studio.  Click Activate. A warning is displayed, reminding you that installing this new BDM will overwrite the existing BDM.  Click on Install to complete the deployment. Bonita Portal loads the file, and retrieves the object definition enabling processes to use them at runtime. It also creates or updates the database schema in the business database, to store business objects appropriately when modified by processes. When the deployment is complete, a message is displayed. If deployment fails, use the Engine logs to analyze the problem.  Go to the BPM Services page.  Click Resume. BPM services are resumed.Warning: the database model is automatically updated when you deploy a new BDM. Avoid changing the database schema manually as it may jeopardize the persistence of business objects and cause errors at process runtime.Export the BDM to share with another Bonita StudioThe bdm.zip exported from the Bonita Studio Development menu is designed for import into the Portal, and cannot be imported into another Bonita Studio. Instead, create a .bos file, as follows:  Choose Export from the Diagram menu or click Export in the Cool bar.  In the popup of exportable items, select only the Business Data Model.  Specify the filename and location or use the default suggested.  Click Finish.The resulting .bos file can be imported into any Bonita Studio with a Subscription license.Warning: Bonita Studio can contain only one business data model. When you import a .bos file that contains a business data model, it overwrites the model that is already in the Studio.View the BDMThe BDM ZIP file contains a business object model file, bom.xml. You can open this file in a text editor to view the BDM definition.Example contents of the bom.xml file:&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;&amp;lt;businessObjectModel&amp;gt;&amp;lt;businessObjects&amp;gt;&amp;lt;businessObject qualifiedName=&quot;com.company.model.LeaveRequest&quot;&amp;gt;&amp;lt;fields&amp;gt;&amp;lt;field id=&quot;startDate&quot; type=&quot;DATE&quot; nullable=&quot;false&quot; length=&quot;255&quot; collection=&quot;false&quot;/&amp;gt;&amp;lt;field id=&quot;endDate&quot; type=&quot;DATE&quot; nullable=&quot;false&quot; length=&quot;255&quot; collection=&quot;false&quot;/&amp;gt;&amp;lt;field id=&quot;returnDate&quot; type=&quot;DATE&quot; nullable=&quot;false&quot; length=&quot;255&quot; collection=&quot;false&quot;/&amp;gt;&amp;lt;field id=&quot;daysOff&quot; type=&quot;DOUBLE&quot; nullable=&quot;false&quot; length=&quot;255&quot; collection=&quot;false&quot;/&amp;gt;&amp;lt;field id=&quot;leaveType&quot; type=&quot;STRING&quot; nullable=&quot;false&quot; length=&quot;255&quot; collection=&quot;false&quot;/&amp;gt;&amp;lt;field id=&quot;approved&quot; type=&quot;BOOLEAN&quot; nullable=&quot;true&quot; length=&quot;255&quot; collection=&quot;false&quot;/&amp;gt;&amp;lt;/fields&amp;gt;&amp;lt;uniqueConstraints/&amp;gt;&amp;lt;queries&amp;gt;&amp;lt;query id=&quot;query1&quot; content=&quot;SELECT l.daysOffFROM LeaveRequest lWHEREl.leaveType = &#39;Test&#39;&quot; returnType=&quot;java.lang.Double&quot;&amp;gt;&amp;lt;queryParameters/&amp;gt;&amp;lt;/query&amp;gt;&amp;lt;/queries&amp;gt;&amp;lt;/businessObject&amp;gt;&amp;lt;/businessObjects&amp;gt;&amp;lt;/businessObjectModel&amp;gt;Business objects in processesWhen you design a process, you specify the variables to be used in the process. These can include variables that are instances of business objects defined in the BDM. You define a business object variable in Bonita Studio in a similar way to defining other process variables.persistenceIDEach object created in the database has a unique read-only ID called a persistenceID. For each new persistenceID created, the number is incremented. The persistenceID is invisible to the end user in Bonita Portal. A developer can recover this Id by using the method getPersistenceID.When you declare a persisted business object instance in a process, there are two ways you can initialize it:  as a new instance: it is created automatically at runtime when the process is instantiated, with the structure defined for the object in the BDM (for example, a process designed to manage employee leave requests will create a new instance of the Leave Request business object). The initial value of each BDM attribute can be set via a groovy script. This way, you may set the process instantiation contract inputs to attributes. Go to Update BDM attributes from contract inputs for more information.  as an existing instance: the data is loaded by identifying a business object instance that already exists (for example, a process designed to let employees modify unapproved leave requests will modify an existing instance of the Leave Request business object).After it is declared in the process, a business object instance can be adapted by reading or modifying its data attributes. The Engine will handle the persistence of the modification.Initialize BDM attributes from process instantiation contract inputsIn the contract definition panel of the Studio (Details panel, Execution tab, Contract pane), you can import contract inputs from a BDM definition using the Add from data… button. It creates a complex input mapping the BDM class attributes (if an attribute is not a primitive Java element, another complex input is created and it goes on).By selecting Auto-generate the initialization script, the default value of the selected business data will be automatically initialized with an auto-generated script when clicking on finish.If you select No, thanks. I’ll manually define how to use the contract, you will need to create a Groovy script that will set input to BDM attribute.For instance, with the above com.company.model.LeaveRequest class, using the Add from data… action in the Details panel, Execution tab, Contract pane will create the following complex input :  leaveRequestInput : COMPLEX  startDate : DATE  endDate: DATE  returnDate: DATE  daysOff: DECIMAL  leaveType: TEXT  approved: BOOLEANThen, you need to go back to the process variable list (Details panel, Data tab, Parameters pane) and add a new variable of type com.company.model.LeaveRequest or edit an existing one of the com.company.model.LeaveRequest type and click on the Pencil to open the Groovy script editor.  Enter the following code snippet to have a new BDM com.company.model.LeaveRequest instance set with the contract inputs:var leaveRequest = new com.company.model.LeaveRequest();leaveRequest.setStartDate(leaveRequestInput.getStartDate());leaveRequest.setEndDate(leaveRequestInput.getEndDate());leaveRequest.setReturnDate(leaveRequestInput.getReturnDate());leaveRequest.setDaysOff(leaveRequestInput.getDaysOff());leaveRequest.setLeaveType(leaveRequestInput.getLeaveType());leaveRequest.setApproved(leaveRequestInput.getApproved());return leaveRequest;Initialize BDM attributes from contract inputs in task operationsIn the case where a business object has to be initialized from task level inputs, you can set contract inputs from the Add from data… action like in previous section and generate automatically operations by selectionning Auto-generate the initialization script. The operations will be generated for business data attributes you selected. You can manage it inside the Details panel, Execution tab, Operations pane.If you select No, thanks. I’ll manually define how to use the contract or create inputs manually, you can go to operation pane and add a new operation using the Add button.In the first select box, choose the variable of type com.company.model.LeaveRequest, then, click on Takes value of link and select Instantiate with in Operator type and click OK.Then, click on the pencil button to open the Edit Expression editor. Choose the Script expression type and enter the same code snippet than the one above to have a new BDM com.company.model.LeaveRequest instance set with the contract inputs.Business Objects and connectorsYou can use business data in a Java program by using the DAO. DAO gives read access to business objects. Warning: In a connector, code is executed outside a transaction, so retrieving or updating business data by DAO is not supported.You can however manipulate the business object outside the connector, and use business objects as connector input or output:  For a read, retrieve the business object with an expression (for example, employeeDAO.findByFirstNameAndLastName(&quot;William&quot;,&quot;Jobs&quot;). Then use the object as input to the connector.  For a create or update, return the new or updated business object as output of the connector.Then use the business object (which is stored only in memory at this point) in an operation to update the business object in the business database, persisting the change.BDM and custom REST APIsBe aware that a poor implementation of a custom REST API accessing BDM objects can lead to poor performance results. See the best practice on this matter.Handle BDM database schema manuallyThis section is for advanced usage. You should fully understand the database changes made when you update the Business Data Model before considering usingthis alternative.You can use an alternative database SchemaManager implementation. A SchemaManager is responsible for updating the BDM Database schema, according to the changes you have made to yourBusiness Data Model. As our third-party persistence layer Hibernate does not support all type of schema updates, you may want to use a SchemaManager that does not update the databasetables directly, but rather let you (or your Database Administrator) update the database “manually”.For that, you can use the alternative we provide, by uncommenting the following lines in file platform_conf/current/tenants/[TENANT_ID]/tenant_engine//bonita-tenants-custom.xml using setup tool.&amp;lt;!-- Schema Manager that avoids to update the database schema when updating BDM --&amp;gt;&amp;lt;!--&amp;lt;bean id=&quot;schemaManager&quot; class=&quot;org.bonitasoft.engine.business.data.impl.SchemaManagerReadOnly&quot;&amp;gt;&amp;lt;constructor-arg name=&quot;loggerService&quot; ref=&quot;tenantTechnicalLoggerService&quot; /&amp;gt;&amp;lt;/bean&amp;gt;--&amp;gt;With this alternative, you should carefully update the database before deploying the new BDM version. Otherwise, there are a number of pitfals you may fall into.Errors you can get if you:  use a business object without updating the database schema:15-May-2018 12:04:12.106 ERROR [http-nio-52162-exec-8] org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logExceptions Table &quot;BUSINESSOBJECT1&quot; not found; SQL statement:insert into BUSINESSOBJECT1 (persistenceId, ATTRIBUT1, ATTRIBUT2, ATTRIBUT3, persistenceVersion) values (null, ?, ?, ?, ?) [42102-175]15-May-2018 12:04:12.113 GRAVE [http-nio-52162-exec-8] org.restlet.resource.ServerResource.doCatch Exception or error caught in server resource org.bonitasoft.engine.exception.BonitaRuntimeException: USERNAME=walter.bates | org.bonitasoft.engine.commons.exceptions.SRetryableException: javax.persistence.PersistenceException: org.hibernate.exception.SQLGrammarException: could not prepare statementextend the length of a business object attribute without updating the database column:15-May-2018 16:09:28.066 WARN [http-nio-52162-exec-4] org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logExceptions SQL Error: 22001, SQLState: 2200115-May-2018 16:09:28.067 ERROR [http-nio-52162-exec-4] org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logExceptions Value too long for column &quot;ATTRIBUT1 VARCHAR_IGNORECASE(20)&quot;: &quot;CAST(STRINGDECODE(&#39;   30 caractu00e8res__________&#39;) AS VARCHAR_IGNORECASE) (30)&quot;; SQL statement:insert into BUSINESSOBJECT1 (persistenceId, ADDEDCOLUMN, ATTRIBUT1, ATTRIBUT2, NEWBOOLEAN, persistenceVersion, RENAMEDCOLUMN) values (null, ?, ?, ?, ?, ?, ?) [22001-175]15-May-2018 16:09:28.075 GRAVE [http-nio-52162-exec-4] org.restlet.resource.ServerResource.doCatch Exception or error caught in server resource org.bonitasoft.engine.exception.BonitaRuntimeException: USERNAME=walter.bates | org.bonitasoft.engine.commons.exceptions.SRetryableException: javax.persistence.PersistenceException: org.hibernate.exception.DataException: could not execute statementchange the type of a business object attribute without updating the database column:15-May-2018 17:00:08.083 WARN [http-nio-52162-exec-5] org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logExceptions SQL Error: 22018, SQLState: 2201815-May-2018 17:00:08.084 ERROR [http-nio-52162-exec-5] org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logExceptions Data conversion error converting &quot;&#39;now is a String&#39; (BUSINESSOBJECT1: NEWBOOLEAN BOOLEAN)&quot;; SQL statement:insert into BUSINESSOBJECT1 (persistenceId, ADDEDCOLUMN, ATTRIBUT1, ATTRIBUT2, NEWBOOLEAN, persistenceVersion, RENAMEDCOLUMN) values (null, ?, ?, ?, ?, ?, ?) -- (NULL, ?1, ?2, ?3, ?4, ?5, ?6) [22018-175]15-May-2018 17:00:08.085 GRAVE [http-nio-52162-exec-5] org.restlet.resource.ServerResource.doCatch Exception or error caught in server resource org.bonitasoft.engine.exception.BonitaRuntimeException: USERNAME=walter.bates | org.bonitasoft.engine.commons.exceptions.SRetryableException: javax.persistence.PersistenceException: org.hibernate.exception.DataException: could not execute statementchange a relation between two business objects without updating the database / constraints:[...]Caused by: groovy.lang.MissingMethodException: No signature of method: com.company.model.Invoice.addToLines() is applicable for argument types: (com.company.model.InvoiceLine) values: [com.company.model.InvoiceLine@623c31c]remove a composition relation without removing the foreign key in database:16-May-2018 10:25:01.030 WARN [http-nio-52162-exec-10] org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logExceptions SQL Error: 23502, SQLState: 2350216-May-2018 10:25:01.030 ERROR [http-nio-52162-exec-10] org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logExceptions NULL not allowed for column &quot;INVOICE_PID&quot;; SQL statement:insert into INVOICELINE (persistenceId, persistenceVersion, TITLE) values (null, ?, ?) [23502-175]16-May-2018 10:25:01.038 GRAVE [http-nio-52162-exec-10] org.restlet.resource.ServerResource.doCatch Exception or error caught in server resource org.bonitasoft.engine.exception.BonitaRuntimeException: USERNAME=walter.bates | org.bonitasoft.engine.commons.exceptions.SRetryableException: javax.persistence.PersistenceException: org.hibernate.exception.ConstraintViolationException: could not execute statement  ",
      "url": " /bonita/7.7/application-and-process-design/data/define-and-deploy-the-bdm",
      "author": "",
      "categories": "Application and Process Design, Data"
    }
    ,
  

    "bonita-7-7-application-and-process-design-define-access-control-on-business-objects-contracts-and-contexts": {
      "title": "Contracts and contexts",
      "content"     : "Contracts and contextsOverviewContract purpose and valueContract definitionContextOverviewThe notion of contract is available at two levels: process instantiation and human task execution. A contract is composed of inputs and constraints. Inputs are pieces of information that must be provided to the process or the human task. The constraints are applied to the input to check that the values of the inputs are valid.As an example, a Leave Request Process could declare the following contract:  Inputs:  Start Date  End Date  Leave typeConstraints:  End Date after Start Date  Start Date in the future  Leave type in (“Annual Leave”, “Unpaid Leave”)  Contract purpose and valueA contract specifies the pieces of information the process requires to be started. Without this information the process cannot execute its business logic, and it is not useful to try to start an instance of the process. That is to say, if you try to start an instance of the process without providing the expected input, the system will refuse to start the process. The same is true for a human task: if you try to perform the task without providing the expected input, the system will refuse to execute the task. A contract protects the process from malformed external interaction. After validation, the inputs are used to initialize business data, or process data, or are passed through connectors.Contract definitionIn Bonita Studio select the pool to create the process instantiation contract, or select a human task to create a task contract.Go to the Details panel, Execution tab, Contract pane. In the Inputs tab, declare each expected input and its type. You have two options: declare the input manually or from a business variable using the Add from data option. Defining an input based on a variable saves you time, and is the preferred option if the aim of the input is to initialize (or update) the business variable. In addition, using Add from data on a task contract automatically generates operations to update the selected business variables with the task inputs. In the Constraints tab, declare expressions that check the validity of the value of each input. A constraint has a name, a content, and a error message. The message is logged if the constraint is not met. Make sure to provide a meaningful name and message to help process users understand why the system rejected the order to start the process or execute a task.In the Leave Request Process example, the contract inputs and the constraints would be similar to the following:Stacktrace example in case of contract violation:  Supported input types:  Boolean: accepts true or false values  complex: a tree structure that is equivalent to a key-value map where keys are fixed (e.g. if an input named user with children attributes firstname and lastname)  date: a date respecting the following pattern : yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss or yyyy-MM-ddTHH:mm:ssZ or yyyy-MM-ddTHH:mm:ss.SSSz (ISO_8601)  decimal: a decimal value (e.g. 5.128)  file: a document  integer: a numeric value (e.g. 4)  long: a long value (e.g. 3 000 000 000). Can be used at pool-level only (not at task-level). In called processes, this is helpful to receive IDs from call activities.  text: a stringCheck multiple to specify that the input is a list of its primary type (for example, a list of integers).  The type long can be used in a POST with JSON without precision lost. However, it is important to keep in mind that while manipulating numbers in javascript the max integer is 2^53-1 which is a smaller subset of Java max long type (2^63-1). Example:  If your value is in JavaScript safe integer range: Text widget (number) &amp;gt; JavaScript number &amp;gt; JSON number &amp;gt; Contract java.lang.Long  If value is out of JavaScript safe integer range: Text widget (text) &amp;gt; JavaScript String &amp;gt; JSON String &amp;gt; Contract java.lang.LongConstraintsA constraint is a Groovy expression that returns a Boolean. If the value is false, the constraint is not met, so the contract not fulfilled and the system will not execute the instantiation or task.Note: the constraint scope is limited to contract input and cannot reference external systems (such as connectors, databases or bonita APIs).When is the contract validated ?Whatever means is used to submit information to process or human task, the system will validate the contract. If the contract is not satisfied, an exception is thrown and the process or human task is untouched. Information can be submitted by Java API call, REST API call, Bonita form, or an external system including a third-party form.Best practice: Define the contract prior to creating your forms. This will save you time during development phase as auto-generated forms enable you to submit information and validate that your contract definition is stable. After the contract is defined, you can go to UI Designer using top-right pencil icon of the Details panel. It will generate a form with the appropriate widget for each contract input to enable the user to provide the expected value.ContextTo display contextual information of the task or the process instance in a form, you can leverage the business data and document references made publicly available through the context. The notion of context is available at two levels : process instance and human task. The context is a list of references to the business data and documents manipulated by the process instance during its execution.Currently, context is the same for a human task and its process instance. All the business data and documents defined are public.Limitation : there is currently no way to customize which business data or document are public.",
      "url": " /bonita/7.7/application-and-process-design/define-access-control-on-business-objects/contracts-and-contexts",
      "author": "",
      "categories": "Application and Process Design, Define access control on business objects"
    }
    ,
  

    "bonita-7-7-application-and-process-design-define-access-control-on-business-objects-create-a-complex-data-type": {
      "title": "Complex data types",
      "content"     : "Complex data typesNote: For Bonita Enterprise, Performance, Efficiency, and Teamwork editions only.If the standard data types are not suitable for a variable in your process, you can create a new custom complex data type. It is useful for example to reference data from an external database.A complex data type is a collection of attributes, each attribute having a data type. Complex data types are defined in a JAR or XSD file. Each file can contain more than one definition. To add a new complex data type, create a new JAR or XSD file.If you are using the Enterprise, Performance, Efficiency, or Teamwork edition, you can also use Bonita Studio to add a new data type:  From the Development menu, choose Data types, then choose New data type…. In the dialog box that opens, you can define a set of data types.  At the top of the dialog box, specify a name for the set of data types.  For each type, specify a name, and the set of attributes. Each attribute has a name, a type, and can be either single or multiple.  When you have defined all the data types required, click OK.  Click Create as JAR or Create as XSD, then click Finish.When the new data type has been defined, as a JAR or XSD definition, it can be used to define a variable.Warning: Java data types (defined in a JAR file) use the STAX API. Stax libraries cannot be loaded in more than one classloader but must instead be placed in a single location where they can be called by all the items that use them. When you configure a process that uses Java data types, you must manage the jar files.",
      "url": " /bonita/7.7/application-and-process-design/define-access-control-on-business-objects/create-a-complex-data-type",
      "author": "",
      "categories": "Application and Process Design, Define access control on business objects"
    }
    ,
  

    "bonita-7-7-application-and-process-design-define-access-control-on-business-objects-define-a-search-index": {
      "title": "Define a search key",
      "content"     : "Define a search keyNote: For Bonita Enterprise, Performance and Efficiency editions only.A search key is data that is attached to a process and is used to distinguish between cases of the process in Bonita Portal.You can define up to five search keys for a process.For example, in a process handling insurance claims, you could define the claim number that is automatically assigned from a database to be a search key, so that you can search in Bonita Portal and find the case associated with a given claim. The value of this search key would be fixed for the entire lifetime of a case. You could also define a claimState search key that is updated at certain milestones while the claim is being handled, and could be used to find all your cases that are in a given state.You can define a search key using any valid expression in the expression editor (constant, script, parameter, or variable). In most cases, a search key is a variable, either visible to users (like the claim number) or not. It can be initialized from a form field (typically on the initialization form), from the business data repository, or from an external database, or it can be assigned a default value in the definition. The value is initialized when the case is created.The search key value can be fixed for the lifetime of a case or it can be updated with an operation during the process instance lifetime. If you define a search key whose value is a variable (or an expression including a variable), the search key value is not automatically updated when the variable value changes. You must use an operation to update the search key value at all points in the process definition where the variable value might change. Note that you cannot update a search key in a form field operation, action, Groovy script or Connector.To configure a search key:  In a process diagram, select a pool.  Go to the Details panel, General tab, Search pane.  In the Label column, enter a label for the search key. You can use the expression editor to specify the label, but as it is a constant, you can just type the label into the field. The label is used to identify the search key in Bonita Studio and in Bonita Engine.  In the Value column, open the expression editor by clicking the pencil icon.  Define the search key value using an expression.In Enterprise, Performance and Efficiency editions, search keys are displayed in the Bonita Portal case list and in the case more details view.In this way, you can use search keys for adding business information to your cases. You can search on search keys typing the value of a search key in the Search field. For example, if you have a process called Issue E111 that uses the applicant social security number as a search key, you can type the number of an applicant into the search field and see the status of the tasks in the case.",
      "url": " /bonita/7.7/application-and-process-design/define-access-control-on-business-objects/define-a-search-index",
      "author": "",
      "categories": "Application and Process Design, Define access control on business objects"
    }
    ,
  

    "bonita-7-7-application-and-process-design-define-access-control-on-business-objects-documents": {
      "title": "Documents",
      "content"     : "DocumentsMany business processes require documents, or exist because of documents. For example:  A process to claim travel expenses includes scanned copies of receipts, a company credit card statement, and a list of currency exchange rates.  A process for considering candidates for a position includes CVs and a job description.  A process for approving a document for publication includes the document itself and a quality checklist.Documents can also be attached to processes to provide supplementary information. For example, a travel expense claim process could have an attached document detailing the expense policy of the company. Users have the option to download the document if required.Document definitionDocuments storageDefine a document in a process definitionDocuments and called processesSpecify a document in a process formConnectors and documentsDocument definitionA document is a self-contained structured set of information that is attached to a process instance. It is created and updated by a tool that is not part of the process. It can have a lifecycle that begins before the process instance is created and continues after the process instance is completed and archived.  Create: The lifecycle of a document begins before the process instance is created. A document is created in an external system.  Add to process instance: When a process instance is created, the document instances defined for the process are initialized, in the form of document objects.At this point, the documents have the content specified in the document definition (which might be no content).  Update in process instance: A document in a process instance is updated by an automatic action in the process definition or following information specified by a user in a form. Updating a document creates a new object.  Delete from process instance: A document object can be deleted from an active process instance but not from an archived process instance.A document in a process instance is a Java object. When you update a document in a process instance, you create a new object. A document has the following:  Name: the name of the document, defined in the process definition  Description: a description of the document, defined in the process definition (optional)  Content: the content of the document, set from a file or URL. The initial content source is specified in the process definition. The content does not have to be initialized when the process instance is created. The content can be initialized or updated in a process task by the system or as a result of user action.  MIME type: the type of content of the document. This is defined for the initial content in the process definition. A browser (or your computer) uses the MIME type to select the best application to use to display the document content. If you do not specify the MIME type, the browser reads the beginning of the file to discover the MIME type.  Submitter: the name of the user who uploaded the content.  Creation date: the date and time when the content was uploaded.Document listsA document list is a collection of related documents attached to a process. Each component of the list is itself a document object, but it is not necessary to define each one separately. The number of components in the list does not have to be fixed. For example, a process to claim travel expenses includes a document list for the scanned copies of receipts. When the process instance is created, the number of receipts is unknown and the receipts can be in any image format.In a process definition, you can specify multiple documents or document lists. Use a document list if you have several documents that you need to handle as a set as well as individually. Use multiple documents if you have documents that have independent lifecycles. For example, a process to claim travel expenses could have a document list for expenses receipts and a document with the expenses policy.To initialize a document list, use a script that returns a list of DocumentValue objects. For example:import org.bonitasoft.engine.bpm.document.DocumentValue[  new DocumentValue(&quot;http://url.to.my.cms.document&quot;),//External  new DocumentValue(&quot;exampleContentType&quot;.getBytes(), &quot;text/plain&quot;, &quot;example.txt&quot;)//Internal]  To update a document list, you need to specify the whole list again using a script,. You cannot just add or replace one component of the list.Documents storageThe decision about where to store a document is critical to your process definition. There are three options:  CMS  File  Resource  The table below shows the possible interactions between each storage option and a process.Storage option  Update process instance from storage  Update storage from process instance  CMS  URL (in process definition or form widget), connector (in process definition)  Connector (in process definition)  File  URL (in process definition or form), file (in process definition or form widget)  File (in form widget)  Resource  Resource name (in process definition)  Cannot update resource from process instance  For most use cases, we recommend storing documents in a CMS.CMSTypically, business documents are stored in an external system such as a CMS, and accessed by other applications in addition to Bonita. Bonita is not iteself a CMS, and it is more efficient for performance to store documents in an external system and store only links in the process instance. This is particularly true if you have many documents attached to a process instance.You can initialize a document object in a process instance by specifying a URL that identifies the document. The document object stores a reference to the URL, not the content itself. The document can be updated in the process instance when the user specifies a URL in a form, or using a connector. You can also use a connector to push an update to the CMS.If the document is stored in a CMS, you need to consider the lifecycle of the content in the CMS when you are designing your process.For example, the content might be updated by some other applications after you have initialized the document object in the process instance, so you need to be sure that the content that is referenced in the CMS is the relevant version. If your process requires the latest version of the content, you should minimize the time between getting the content from the CMS and making it available in the process instance. Also, if your process updates a document and sends new content to the CMS, consider whether you need to handle multiple concurrent updates to the CMS. This might be handled automatically by the CMS itself, or might need to be managed by the connector.For example, in a process to approve a document for publication, the document exists in an external file store or CMS before the process is instantiated. At a step in the process, the document is approved for external publication, and a new revision of the file is created with a “Confidential” watermark removed. This new revision is uploaded to the CMS by connector, and continues to exist after the process instance is completed and archived.FileA document that is stored as a file can be used to initialize or update the document object in a process instance. This is done when the user specifies the file in a form. Typically, this is useful for information that does not have to be stored outside the process, where the file can be deleted after the document object is created. For example, a file containing a scanned copy of a travel receipt does not need to be kept after the receipt object has been added to a travel expense claim process instance.ResourceThe Bonita Studio Document Repository contains documents that have been imported from the file system. After a document is imported, it is called a resource. When you build a process bar file for deployment, the resources used in the process are automatically included. A resource is available to all processes in an installation of Studio. A resource cannot be updated directly in Studio, but is updated by uploading a new file. Typically, resources are used for information that is stable and common to all instances of a process, or is used in several processes. The resource is used to initialize the document object in the process instance. You cannot use a resource to update a document object.When you export a process in a bos file for import into another Studio, you must select the resources that are used so that they are included.The dialog for adding a resource to the document repository is inside the dialog for adding a resource to a process definition.   However, you can add a resource without updating the process definition, as follows:  Open any process diagram and select the pool. This definition will not be updated.  Go to the Details panel, Data tab, Documents pane.  Select any document, and check From local file. If there are no documents defined for the process, click Add and specify a name for the document.  Click Browse…. A popup shows the list of resources in the repository.  Click Import…. A file selector popup is displayed.  Select the file that you want to import. The filename is added to the list of resources.  Click Cancel to close the list of resources in the repository.  Click Cancel to close the document editor or creator. The process diagram and document definition are not updated.When you deploy a process, the documents included in the bar file are stored in the local Bonita database. They are used to initialize document objects when a process instance is created or when a form is initialized.Document maximum size settingBy default, the maximum size of a document is 25Mb. You can reduce or increase this in your production environment by modifying the value of the form.attachment.max.size property in the console-config.properties file of your tenant.For the V6 forms, you also need to change the form.attachment.max.size property of the forms-config.properties file. Those modifications will be applied after a server restart.The maximum document size cannot exceed the capacity of the database column. This value depends on your database. This setting applies to all processes in the tenant.This maximum document size will also depend on your web server configuration, it can’t be more than the maximum post size of the web server.Document versioning in a process instanceIn a process instance, there is no specific versioning. When a document is updated, a new object is created. These objects are archived with the associated activity instance, and can be retrieved using Bonita Engine API.Document archivesWhen a process element is archived the associated documents are also archived. It is possible to delete the archived documents using the Engine API or REST API when they are no longer needed, to save space. You can delete an archived document from a live process instance or from an archived process instance. When you delete an archived document, only the content is deleted. The metadata, such as the name, last updated date, and uploader, is kept so that it can be retrieved if needed for audit.Define a document in a process definitionThis section explains how to specify a document or document list in a process definition.Add a documentA document is added to a process definition at pool level. It is similar to defining a pool-level process variable. You must define at pool level all the documents that will be used in the process.To define a document in Bonita Studio:  In your process diagram, select the pool.  Go to the Details panel, Data tab, Documents pane.  Click Add. A popup for defining a document is displayed.  In the popup, specify the following:  The name of the document, used to identify it in the Studio. This must be a valid Java identifier.  A description of the document. This is optional, but we recommend that you add a description stating the document purpose in the process, for collaboration and maintenance.  Whether the document is single or multiple. Specify multiple to define a document list.  The source of the initial content of the document. For a document, there are the following options:  Choose None if there is no initial content for the document when the process instance is created.  Choose From contract if the document content is to be retrieved from the contract input.  Choose From local file if the document content is to be retrieved from a resource.  Choose From an external system if the document content is to be retrieved from an external system by URLFor a document list, initial content is defined using a script. The script must return a java.util.List.  * Optionally, for a local file, you can specify the media type of the content, by setting the MIME type of the document.If you want to specify the MIME type, click Manage MIME type…, and then specify the MIME type in the field that is displayed.  When you have provided all the information for the document, click either Finish &amp;amp; Add to define another document or Finish if you have no more documents to define for this pool.Edit a document in the process definition  In your process diagram, select the pool.  Go to the Details panel, Data tab, Documents pane. The list of documents defined for the pool is displayed.  Click the name of the document that you want to edit, and click Edit.  Update the document information in the popup.  Click OK to save your changes.Remove a document from a process definition  In your process diagram, select the pool.  Go to the Details panel, Data tab, Documents pane. The list of documents defined for the pool is displayed.  Click the name of the document that you want to edit, and click Remove.Documents and called processesA document is defined in a pool. You can map documents to other pools similarly to how you map variables.To map a document when using a call activity:  Define a document in the main process, for example “mainDoc”.  Define a document in the called process, for example “subDoc”.  In the call activity of the main process, add a task variable of type long (for example called “docId”) that will contain the id of the instance of mainDoc. Set the default value of docId with the following code: apiAccessor.getProcessAPI().getLastDocument(processInstanceId, &quot;mainDoc&quot;).getId();  In the called process, add a pool-level variable of type long (for example called docId).  Define the variable mapping in the call activity so that docId in the call activity is mapped to docId in the called process.  In the called process, as the first task add an automatic task that will get the mainDoc, create a DocumentValue object with the content of mainDoc, and use it to update the content of subDoc.To do this, define an operation in the automatic task as follows:  In the first field, select subDoc.  Set the operator type to Set document.  Open the expression editor for the second field and create a script expression with the following content:```javaimport org.bonitasoft.engine.bpm.document.Document;import org.bonitasoft.engine.bpm.document.DocumentValue;Document doc=apiAccessor.getProcessAPI().getDocument(sub_docId);DocumentValue docValue=new DocumentValue(apiAccessor.getProcessAPI().getDocumentContent(doc.getContentStorageId()), doc.getContentMimeType(), doc.getContentFileName());return docValue;```  Specify a document in a process formWhen you have specified the documents in the process definition, you need to define how they are handled in the process tasks.A document is represented in a form definition by the upload widget.Connectors and documentsDuring a process instance, you can use connectors to manipulate documents. In addition to the connectors that interact with content management systems (such as the Alfrecso and CMIS connectors), some other connectors can also manipulate documents. For example:  A task that uses the Email connector to send a message can attach a document to the message.  A task that uses the Google Calendar connector to create a calendar event can attach a document as content.Note that connectors handle single documents. If your process contains a document list, you can manipulate component documents using connectors.The standard connectors provided with Bonita (CMIS, Alfresco) take a document as input. They cannot handle document lists. The email connector can handle a document list that specifies the attachments to be added to a message. The standard connectors do not provide a documentValue as output. This means that you cannot use a connector to get a document. Instead, specify the URL of the document, as you would for initialization.",
      "url": " /bonita/7.7/application-and-process-design/define-access-control-on-business-objects/documents",
      "author": "",
      "categories": "Application and Process Design, Define access control on business objects"
    }
    ,
  

    "bonita-7-7-application-and-process-design-define-access-control-on-business-objects-expressions-and-scripts": {
      "title": "Expressions and scripts",
      "content"     : "Expressions and scriptsExpressions and scripts are used in Bonita Studio for many purposes, including setting the initial or default value of a variable.An expression is a simple statement; a script is a sequence of expressions, and has a program-like structure.This page explains the features of Bonita Studio that enable you to use expressions and scripts.Note that the expression editor cannot be used in the UI Designer, which has a different concept model for data.Start the expression editorManage Groovy scriptsUse variables in a script expressionProcess variablesProvided variablesLog messages in a Groovy scriptStart the expression editorThe expression editor is used throughout Bonita Studio to create and modify expressions or scripts.To start the expression editor, click the crayon icon next to the field where you want to enter an expression.There are different types of expression:  Comparison: compares the value of a variable, parameter, or constant using the operators !, ==, !=, &amp;lt;, &amp;gt;:, &amp;lt;:= or &amp;gt;=.  Constant: sets the expression to a constant (fixed) value.  Parameter: sets the expression to the value of the parameter at the time the expression is evaluated.  Script: the result of the script sets the value of the expression.  Variable: sets the expression to the value of the variable at the time the expression is evaluated.The types available differ depending on the context of the expression. For example, comparison expressions are available only for transitions.Manage Groovy scriptsYou can create a Groovy function and store it in Bonita Studio separate from the definition of a process. You can then use the function in any process definitions. This feature is available if you are using Bonita Studio with the Application Developer profile.To create a function, choose Manage Groovy scripts… from the Development menu, and click Create…. Enter a name for the new function.To edit the content of a function (or to create it), select the function name and click Open. This opens the expression editor.Enter the function details in the pop-up window. For a function to be included in the Expression editor list of user-defined functions, it must be declared as static and it must have suitable visibility. To validate the function, click Evaluate. To save the function, click OK.Note that you can use this feature to save any Groovy script, not just a function. However, only a predefined script that defines a function can be used in an expression. You can declare a method in a Groovy script, but must not declare a class.In addition to any user-defined functions, there are a number of standard functions, in the Bonita, Collection, Number, String, and Others categories. Click a function name to see a description in the Documentation box of the Expression editor.To add a user-defined or standard function to an expression:  In the Expression editor, Expression type list, select Script.  Enter your script, and position the cursor where you want to include the function.  In the Categories list, select User defined. The function list will show the user-defined functions that are available.  In the Function list, double-click the function you want to include in your expression. The function is inserted in the script at the point where the cursor was positioned.At concatenation points in the script, the expression editor displays a popup with a list of possible terms. In the popup, you can toggle between Groovy terms and process variables. For example, if you select activityInstanceId from the list of provided variables then type a period, the expression editor displays a list of terms available. This is known as autocompletion.Use variables in a script expressionYou can use a variable in an expression. When the expression is evaluated during process execution, the current value of the variable is used in the expression.Process variablesWhen you define an expression in the context of a step, the expression can contain a variable that is defined at process level in the pool containing the step. The expression cannot contain a variable that was defined for this step or in another step in the process. To add a process variable to an expression, select the variable from the Select a process variable… drop-down list.Provided variablesYou can also use a variable that is provided by Bonita Engine that is executing the process. For example, an expression can include the id of the user performing a task in the process. To add a provided variable to an expression, select the variable from the Select a provided variable… drop-down list.The provided variables are:  activityInstanceId: the identifier of the activity instance (not available for a process-level expression)  loggedUserId: the identifier of the user who is performing an activity at the time when the expression is evaluated  processDefinitionId: the identifier of the process  processInstanceId: the identifier of the process instance  rootProcessInstanceId: for a called process or an event subprocess, the identifier of the root process (note that if there are multiple layers of called processes or subprocesses, this is the root of the hierarchy, not the parent called process or subprocesses)The provided variables list also contains a special variable, apiAccessor. This enables you to construct API calls in a script using autocompletion. For example, to get the number of overdue open tasks, choose apiAccessor from the list of provided variable, then add the processAPI, and then add getNumberOfOverdueOpenTasks.Log messages in a Groovy scriptYou can add logging to Groovy scripts or Java code that you develop.",
      "url": " /bonita/7.7/application-and-process-design/define-access-control-on-business-objects/expressions-and-scripts",
      "author": "",
      "categories": "Application and Process Design, Define access control on business objects"
    }
    ,
  

    "bonita-7-7-application-and-process-design-define-access-control-on-business-objects-operations": {
      "title": "Operations",
      "content"     : "OperationsAn operation is an action that updates the value of a variable (using an expression) when a task is performed. You can specify any number of operations on a task. Operations are executed in the order they are listed.Define operations at task levelOperation typesBusiness object (BO)Simple data and List of optionsJava ObjectXML ObjectDocumentDefine operations at task levelAn operation at task level updates the value of a variable defined for the task or at process level. You can also use an operation at a task to update the value of a search index.To define an operation at task level:  Select the relevant task and go to the Details panel, General tab, Operations pane.  Click Add to add an operation.  From the drop-down list, choose the variable to be updated.  Launch the Expression Editor, by clicking the crayon icon.  Using the Expression Editor, enter the expression to define the new value of the variable. If you define the expression with a script, you can use the current value of the variable being updated in the script, so, for example, you can increment a counter. Make sure that the return type matches the type of the variable being updated.You can define a sequence of operations at a task. The operations are performed in the order in which they are listed, at the end of the task. You cannot re-order operations after they are defined, so you need to define the operations in the order they are to be performed.Operation typesBusiness object (BO)  takes value of : the value of the right operand variable is used to update the value of the left operand (the BO) using the “=” operator  Java method: the left BO is updated with the value from the right operand using an invoked Java method  instantiate with: at runtime, when the operator is called, the business data variable points to the selected BO instance if it uses a Query expression type. The BO instance must exist in the business data database; otherwise the operator throws an exception.  The BO instance is not modified during the operation but from that point onward, any expression or operation in the process can reference this object instance to make changes.   If it uses a Script expression type, you can use the contract inputs to fill in the BO attributes.  Go to Initialize BDM attributes from contract inputs in task operations for more information.  isDeleted: an operator ‘Is Deleted’ can be called on a business data variable. The BO instance that the business data references is deleted from the database, at runtime, after the task is completed.Warning: Calling other operations (including instantiate with) after calling isDeleted on the same Business Object, in the same task, is not supported. If you want to re instantiate your Business Object, and perform operations on it, you should do it in a separate task.Warning: Operations on business objects can be done only at task level.Simple data and List of options  takes value of: the value of the right operand variable is used to update the value of the left operand using the “=” operatorJava Object  takes value of: the value of the right operand variable is used to update the value of the left operand using the “=” operator  Java method: the left object is updated with the value from the right operand using an invoked Java methodXML Object  takes value of: the value of the right operand variable is used to update the value of the left operand using the “=” operator  **XPath update **: the left object is updated with the value from the right operand using an XPath expressionDocument  set document: the value of the right operand document is used to create a new version of the document",
      "url": " /bonita/7.7/application-and-process-design/define-access-control-on-business-objects/operations",
      "author": "",
      "categories": "Application and Process Design, Define access control on business objects"
    }
    ,
  

    "bonita-7-7-application-and-process-design-define-access-control-on-business-objects-parameters": {
      "title": "Parameters",
      "content"     : "ParametersYou can use a parameter to store a value that differs between deployments but is fixed for all cases of a deployed process. The value is set when you configure the process. For example, if you have a process for approving expense reports, you could define a parameter for the approver’s email address that is set at deployment.The value can also be changed after deployment: - In versions 7.0.x, if you are using the Enterprise or the Performance edition - In versions 7.1.0 and above, if you are using the Enterprise, Performance or Efficiency editionDefining a process parameterConfiguring parameter valuesParameter usage in formsDefining a process parameterYou can define a parameter for a pool or for a lane. A parameter can be of type text, Boolean, integer, or double.To define a parameter:  Open the process diagram and select the pool or lane.  In the Data tab, go to the Parameters pane. A table of the parameters already define is displayed.  Click Add, enter the parameter name, choose the type from the drop-down list, and optionally add a description of the parameter.To modify a parameter (for example to change its type), click on the existing type on in the table of parameters and choose the new type from the drop-down list.To remove a parameter, select it in the table of parameters and click Remove.Configuring parameter valuesParameter values are set in Bonita Studio when the process is configured (see the process configuration overview for other details of how to configure a process).To set a parameter value:  Open the process diagram in Bonita Studio.  Choose an environment from Configure menu in the cool bar.  Click Parameters in the left-hand menu of the configuration wizard. A table of process parameters and their current values is displayed.  Select the table cell for the parameter value you want to set or modify, and enter the new value.  When all the parameters values have been set, click Finish.You can export the parameter values to a file by clicking Export parameters as file…. The default file name is process_name_Parameters.properties. You can also set parameter values by importing a parameter.properties file. The values in the file are used to set the values of the corresponding parameters. Note that importing a parameters.properties file does not create parameters in the process, just sets the values of those that exist if they are present in the file.When you build a process for deployment (see Import and export a process), the .bar archive that is created also contains a parameters.properties file.You can edit a parameters.properties file to change the value of a parameter before importing it into Bonita Studio or before deploying the .bar. You can also edit the file after process deployment, but this is not recommended if the process is running. If you need to change a parameter value for a process that is in production, update the process configuration in Bonita Portal).Parameter usage in formsFrom 7.x, to use parameters in forms, you need to retrieve them using the REST API.",
      "url": " /bonita/7.7/application-and-process-design/define-access-control-on-business-objects/parameters",
      "author": "",
      "categories": "Application and Process Design, Define access control on business objects"
    }
    ,
  

    "bonita-7-7-application-and-process-design-define-access-control-on-business-objects-specify-data-in-a-process-definition": {
      "title": "Specify data in a process definition",
      "content"     : "Specify data in a process definitionBy data, we mean variables and documents.This page explains how to handle data in a process, including specifying process and task-level data.Variable scopeTransient dataSubprocess dataExternal dataDefine a variableData typesVariable namingDefine a simple data type variableDefine a Java object variableDefine an XML variableDefine a variable as a list of optionsDefine the default valueDefine available valuesVariable scopeYou can define a variable at process, task, or form level:  A process variable is available throughout the life of a process. Process variables can be uses to store data for transition conditions, and identifiers for business data stored in an external database. They are typically items of data which affect the path of the process, or are used at several steps of the process, but which become redundant, once the process instance has completed.  A task variable is available for the task and its outgoing transitions. It can be used to pass data to a connector in the same step. Activity variables are similar to Process variables, but exist only within the life of a process instance activity.  A form variable is available only in the form, and is used to store data used in the form. You can also use form variables with connectors that are associated with the form.See also:Data types and defining a variableComplex data typesData handling in a formBest practice:  Use XREFbusiness data for information that is shared between applications or processes.  For external data that is stored in a database or other information system, use a connector to read or write the data when required, and use transient form variables to hold the value temporarily while it is displayed or updated in a form. ***check still true for Page Designer***  Define a variable at the lowest level possible, using a process variable only when required for the process flow.  Use the minimum number of variables possible; having an unnecessarily large set of variables has an impact on performance.There are also a number of variables that are provided by default in a process, such as the id of the current user. They are available through the expression editor.Transient dataA variable can be transient or persistent. A transient variable is stored only in memory, saving database transactions. A persistent variable is stored in the Bonita Engine database.It is possible to update the value of a transient variable in a task, but this is not recommended. The value of a transient variable in a task is not preserved when the app server restarts. The value is reset to the initial value. When deciding whether to use a transient or persistent variable, consider whether the the variable is used in an operation. In particular, if a operation script does several things, one of which is to update a transient variable and the app server restarts after the script has run but before the end of the task, the transient variable is reset but the other changes made by the script survive the restart.  Task variables can be transient or persistent.  Form variables are transient.Best practice:  Use transient variables to store information temporarily in a process step or form.  Do not update the value of a transient variable.If the value of a transient variable is updated, this triggers a warning message in the log. You can deactivate these warnings by editing logging.properties and uncommenting the relvant section of the file.Subprocess dataAn event subprocess has access to the data in the parent process. This includes parameters and process-level variables. A subprocess called from a call activity is in fact an independent process, defined in a separate pool. It does not have direct access to the data in the calling process. When you define a call activity, you can define mappings that make copies of the data in the calling process available in the subprocess.External dataA process or application can use data that is stored in an external database and accessed using a database connector. For example, in a process for requesting annual leave, there could be a step that uses a connector to retrieve the number of days available for an employee and stores this in a transient variable. This variable is thencompared with the number of days requested to see whether the employee is entitled to take the requested number of days. In a later step, another connector is used to update the number of available days after this request is approved, by subtracting the number of days requested.You can also use data stored in external information system components, such as a CRM document storage system. These systems are also accessed using a connector.Define a variableWhen you define a variable, you specify a name and the data type. Optionally, you can specify a default value or a list of available values.  Data types  Variable naming  Define a simple data type variable  Define a Java object variable  Define an XML variable  Define a variable as a list of options  Define the default value  Define the available valuesData typesBonita has a number of predefined data types: Boolean, date, integer, long, double, text, Java object, XML schema (XSD) and option list. You can also define a variable as multiple, that is, an array or collection of values of the specified type.Note that since 7.0, Business data is now available. For a detailed explanation, see the Business Data overview.You can also define additional complex data types as Java objects or as XML objects.Variable namingYou are recommended to use meaningful names for variables. This make process debugging and maintenance easier, particularly if more than one person is working on a process. It can be useful to use a system of prefixes to identify the context in which a variable is used, or the task it is associated with. For example, you could label all transient data variables with the prefix trans_, or you could label variables defined on a task called getData with the prefix task_getData_. Java language keywords cannot be used as variable names.Define a simple data type variableThe simple data types are Boolean, date, integer, long, double, and text. To define a variable with one of these types:  Open your process diagram in Bonita Studio.  Select the process pool or the step where you want the variable.  Go to the Details panel, General view, Data pane. A list of the variables already defined is displayed.  Choose if you want to add Process data or Business data. Click Add….Note: if you add Business data, only add it at the pool/lane level. See this tutorial as a guide for the next stepsHow to add Business data to a process.  Specify a name for the variable. The name must be unique within the scope of the variable. For easier process maintenance, it is a good idea to make all variable names unique within the process, even though this is not strictly necessary for variables defined in a step.  Optionally, add a description of the variable.  Select the data type from the drop down list.  If you are defining a date variable, you can pick an initial date.  Optionally, set a default value. You can use the expression editor to set the value, or type directly in the field.  To define the variable as multiple, check the box.  To define the variable as transient, check the box. This option is not available for process-level variables.  To automatically add a widget corresponding to this variable when you generate a form for this step, check the box.  Save the definition: if you want to continue on and define another variable, click Create &amp;amp; New, otherwise click Finish.Define a Java object variableYou can define a variable whose data type is Java object. Before you define the variable, you must create the data type definition.To add a Java object variable:  Open your process diagram in Bonita Studio.  Select the process pool or the step where you want the variable.  Go to the Details panel, General view, Data pane. A list of the variables already defined is displayed.  Click Add….  Specify a name for the variable. The name must be unique within the scope of the variable. For easier process maintenance, it is a good idea to make all variable names unique within the process, even though this is not strictly necessary for variables defined in a step.  Optionally, add a description of the variable.  Select Java Object from the drop down list of data types.  Specify the class that defines the Java object.  Optionally, set a default value. You can use the expression editor to set the value, or type directly in the field.  To define the variable as multiple, check the box.  To define the variable as transient, check the box. This option is not available for process-level variables.  To automatically add a widget corresponding to this variable when you generate a form for this step, check the box.  Save the definition: if you want to continue on and define another variable, click Create &amp;amp; New, otherwise click Finish.When you configure the process, add the JAR file that contains the data type definition to the application or process dependencies.Define an XML variableAn XML variable has a data type that is defined by an XML schema file. Before you define the variable, you must create the XML schema that contains the data type definition.The data type definition is stored in an XML schema (XSD) file that belongs to a namespace.To add an XML variable:  Open your process diagram in Bonita Studio.  Select the process pool or the step where you want the variable.  Go to the Details panel, General view, Data pane. A list of the variables already defined is displayed.  Click Add….  Specify a name for the variable. The name must be unique within the scope of the variable. For easier process maintenance, it is a good idea to make all variable names unique within the process, even though this is not strictly necessary for variables defined in a step.  Optionally, add a description of the variable.  Select XML from the drop down list of data types.  In the XML namespace field, select the XSD file that contains the data type definition.  In the Namespace element field, specify the element in the XSD file that defines the data type for the variable you are defining.  Optionally, set a default value. You can use the expression editor to set the value, or type directly in the field.  To define the variable as multiple, check the box.  To define the variable as transient, check the box. This option is not available for process-level variables.  To automatically add a widget corresponding to this variable when you generate a form for this step, check the box.  Save the definition: if you want to continue on and define another variable, click Create &amp;amp; New, otherwise click Finish.Define a variable as a list of optionsYou can use a list of options when the value of a variable is one or more of a fixed set of possible values. If the possible values change frequently, or are related to business data, this method is not recommended. Instead, for business data, you should use a connector to retrieve the possible values from a database.To add a static list of options variable:  Open your process diagram in Bonita Studio.  Select the process pool or the step where you want the variable.  Go to the Details panel, General view, Data pane. A list of the variables already defined is displayed.  Click Add….  Specify a name for the variable. The name must be unique within the scope of the variable. For easier process maintenance, it is a good idea to make all variable names unique within the process, even though this is not strictly necessary for variables defined in a step.  Optionally, add a description of the variable.  In the Data type line, click List of options…. The dialog box that opens shows the option lists that are already defined.  Click Add to add a new list of options, specify a name and, optionally, a description.  Specify and sort the options in the list, using the Add, Remove, Up, and Down buttons.  Click OK. The list of options is saved.  Optionally, set a default value. You can use the expression editor to set the value, or type directly in the field.  To define the variable as multiple, check the box. This means that more than one option from the list can be selected.  To define the variable as transient, check the box. This option is not available for process-level variables.  To automatically add a widget corresponding to this variable when you generate a form for this step, check the box.  Save the definition: if you want to continue on and define another variable, click Create &amp;amp; New, otherwise click Finish.After a list of options has been defined, you can define another variable that uses the same list of options, by choosing the list name from the Data type menu.Define the default valueYou can specify a default value for a variable either by entering it directly, or by using the expression editor. To launch the expression editor, click the crayon icon beside the Default value field.When a form widget related to the variable is displayed, the default value you defined is used as the initial value of the widget in the form.Define available valuesThe set of available values for a checkbox, checkbox list, dropdown list, radio button set, select list, or suggestion box is set using either a connector or a list of options.If you do not want to define a set of available values but need to specify constraints on the value, you can use a validator.",
      "url": " /bonita/7.7/application-and-process-design/define-access-control-on-business-objects/specify-data-in-a-process-definition",
      "author": "",
      "categories": "Application and Process Design, Define access control on business objects"
    }
    ,
  

    "bonita-7-7-application-and-process-design-import-and-export-a-process": {
      "title": "Import and export a process",
      "content"     : "Import and export a processImport a process diagram into Bonita StudioWhat is supported or compatible?Export a process diagram as a BPMN 2.0 archiveExport process elementsBuild a process for deploymentExport a process diagram as an imageImport a process diagram into Bonita StudioTo import a diagram:  From a .bos archive (a diagram from another Bonita studio)  Choose Import -&amp;gt; BOS archive from the Diagram menu or click Import in the Cool bar.  Specify the archive to be imported.  Manage eventual conflicts  Click Import, the .bos archive is imported, a new diagram is created.From an other format  Choose Import -&amp;gt; other from the Diagram menu.  Select the input format.  Specify the file to be imported.  Click Import. A new diagram is created.  You can import diagrams that were exported from the following tools:  Bonita  BPMN 2.0  Microsoft Visio 2010  ARIS BPM 7.x  XPDL 1.0  jBPM 3.2You can also migrate a process diagram from Bonita Open Solution 5.x.What is supported or compatible?A diagram that was exported from the same edition of Bonita, or a lower edition, can be imported successfully. You cannot import a diagram from a higher edition. For example, you can import a diagram created with the Community edition into an Enterprise edition Bonita Studio, but you cannot import a diagram that was created with the Enterprise edition into a Community edition Bonita Studio.If the format to be imported is BPMN 2.0 compatible, any of the BPMN 2.0 elements displayed in the Bonita Studio BPMN elements menu, can be imported successfully. However, if the element to be imported is not displayed **in the **BPMN elements menu, it is not supported by Bonita, so Bonita Studio will interpret the element and create the closest BPMN elementthat is supported. The following specific changes are made for all import formats:  If a task in an imported process is not recognised, Bonita Studio will create an abstract task for it by default.  A task format can be redimensioned (Height/width) when it is imported.  If a multiple event is not recognised, Bonita Studio takes the first element in order that it can interpret.  If a gateway is not supported, it will be interpreted by default as an AND gateway.  If there are **multiple pools **in a *.bar file, they will all be imported into a single process diagram.The following sections list restrictions for specific import formats.BPMN 2.0 (*.bpmn)Most BPM applications export in the BPMN 2.0 file format. This format is the most compatible with Bonita Studio. See here for a list of applications which export in the .bpmn format.Microsoft Visio 2010 (*.vdx)This feature is available in the Enterprise, Performance, Efficiency, and Teamwork editions.  The Visio import format must be .vdx. The .vsd format is not supported in Bonita Studio.  Only horizontal display is supported.  The vertical display will be converted and interpreted as a mirror image of the process.  Visio supports all shapes defined in the BPMN 1.2 standard. See here for more info about Visio compatibility.Aris BPM 7.x (*.xml)  This feature is available in the Enterprise, Performance, Efficiency, and Teamwork editions.See the Aris website for more information about exporting in the BPMN 2.0 format ready for importing into Bonita Studio.XPDL from Bonita 4 (*.xpdl)The .xpdl format will only be compatible if it was created in Bonita 4.x. If the .xpdl file was created by an application other than Bonita 4.x, it cannot be imported into Bonita Studio.jBPM 3.2 (processdefinition.xml)jBPM uses the BPMN 2.0 standard.Export a process diagram as a BPMN 2.0 archiveIf you export a process diagram as a BPMN 2.0 archive you can import it into any BPM application that supports this format, including Bonita Studio.To export a diagram in BPMN 2.0 format from Bonita Studio:  Open the diagram.  Choose Export as… from the Diagram menu and select BPMN2… from the drop-down list.  Specify the location and filename for the exported diagram, and click OK.Export process elementsYou can export files related to elements of the processes in the Bonita Studio repository. The files are exported into a .bos archive that can be imported into another Bonita Studio.You can export the following:  Application resources  Business Data Model  Configurations  Dependencies  Diagrams  Environments  Organizations  XSD filesTo create a .bos archive:  Choose Export from the Diagram menu or click Export in the Cool bar.  Select the items to be exported.  Specify the filename and location or use the default suggested.  Click Finish.The resulting .bos file can be imported into Bonita Studio.Build a process for deploymentWhen a process is ready for deployment, you must create an executable business archive (.bar file) for deployment.To create the business archive:  Choose Build… from the Server menu.  Select the process to be exported.  Specify whether you want to export a configuration with the process. Exporting a configuration will export all the information and other items that you configured, including connectors and dependencies.  Specify the location where the .bar file will be created. The filename is determined by the process name and cannot be changed at this stage.  Click Finish. The business archive is created.Export a process diagram as an imageThis section explains how to export a diagram as an image.To export a diagram from Bonita Studio:  Open the diagram.  Choose Export as… from the Diagram menu and select Image… from the drop-down list.  Specify the image format and quality.  Specify the location and filename for the exported diagram, and click OK.",
      "url": " /bonita/7.7/application-and-process-design/import-and-export-a-process",
      "author": "",
      "categories": "Application and Process Design"
    }
    ,
  

    "bonita-7-7-application-and-process-design-organization-approaches-to-managing-organizations-and-actor-mapping": {
      "title": "Approaches to managing organizations and actor mapping",
      "content"     : "Approaches to managing organizations and actor mappingThere are several possible approaches to managing the organization information required by Bonita. The most appropriate approach for your organization depends on many factors, including the size and stability of your organization, the actors that are defined in the processes you are using, and whether you have a central repository for user data that is LDAP-compatible.If your organization structure is maintained in LDAP, to avoid duplication of the organization data and its maintenance, you are recommended to use the LDAP synchronizer, which is available with the Bonita Enterprise, Performance, Efficiency, and Teamwork editions.The next three sections describe typical approaches, two using LDAP and one maintaining the organization data manually:Maintain organization in LDAP and map actors to groupsMaintain organization in LDAP and map actors to roles or membershipsMaintain organization manuallyOther considerationsMaintain organization in LDAP and map actors to groupsIf the groups within your organization are suitable for mapping to the actors in your processes, you can use these groups when mapping actors.If you are using the Bonita Enterprise, Performance, Efficiency, or Teamwork edition, you can define the actor mapping in Bonita Portal after a process is deployed.For the Community edition, you specify the actor mapping in Bonita Studio, so you need to define the groups in Bonita Studio. However, you only need to create the groups that are used in actor mappings, not your whole organization hierarchy.Maintain organization in LDAP and map actors to roles or membershipsIf the groups within your organization are not suitable for mapping to actors in your processes, you can use roles or memberships when mapping actors.A membership is a combination of a group and a role.If you are using the Bonita Enterprise, Performance, Efficiency, or Teamwork edition, you can define the actor mapping in Bonita Portal after a process is deployed.For the Community edition, you specify the actor mapping in Bonita Studio, so you need to define the roles and memberships in Bonita Studio. However, you only need to create the roles and memberships that are used in actor mappings.In Bonita Portal, define the roles and memberships used in the actor mappings, and specify the roles of the users. User roles are specified using a membership.Maintain organization manuallyFor smaller organizations that do not use LDAP, or if you are using the Community edition, you can maintain your organization manually.Typically, you manage an organization manually using Bonita Studio, and then import it into Bonita Portal. This means that the organization management and actor mapping are carried out in the same tool, from a single set of data.Alternatively, you can initialize the organization in Bonita Studio with just the elements needed for actor mapping. Then export this to Bonita Portal and manage the users in the Bonita Portal.Other considerations  If you are specifying actor mapping in Bonita Studio, you do not need to duplicate the whole organization structure in Bonita Studio, only the elements that are used in actor mapping.However, you can choose to have the whole structure in the Studio. In this way, you can manage all the information in one place, then load it into Bonita Portal using the organization export/import features.  It is possible to map an actor to an individual user. This is not generally recommended, but in rare cases it can be useful, typically for solving a problem or escalating an issue.  When deciding how to map actors for a process, you also need to take into account the actor filters that are specified in the process definition.  If you are using the LDAP synchronizer, consider using LDAP authentication.",
      "url": " /bonita/7.7/application-and-process-design/organization/approaches-to-managing-organizations-and-actor-mapping",
      "author": "",
      "categories": "Application and Process Design, Organization"
    }
    ,
  

    "bonita-7-7-application-and-process-design-organization-custom-user-information-in-bonita-bpm-studio": {
      "title": "Custom User Information in Bonita Studio",
      "content"     : "Custom User Information in Bonita StudioYou can use custom user information to assign task to users based on information that is specific to your organization and not included in the standard organization definition. You define the attributes that you want to store, and then add the values for the users.ValueDefine custom user informationAdd custom user information values for each userSet an actor filter on custom user informationValueFor example, you may want to create a security badge with an individual value (number) for each user, or an office skill for a user, a special professional activity, or geographical details. All these types of information are not displayed in standard information tabs but you may want to filter candidates to a human task thanks to those attributes.Define custom user informationIn the Organization menu &amp;gt; Manage organizations &amp;gt; Organization users, the second tab User information management offers a summary of the default information and allows to create custom user information. Use “Add” to create your own, with a name and an optional description.  In Bonita Studio, go to Organization in the cool bar  Click on Manage in the dropdown menu  Click on Next 3 times to get to the Organization users window  Click on the User information management tab  In the Custom information pane on the right hand side of the window, click on Add  This will put a default name Information1 in the Name column  Add a description (if needed). This will only appear in Bonita Studio.  Double click on the default name Information1, to modify it to your needs  Click on Finish  A message is displayed: The Organization has been modified. It is recommended to re-publish it. Do you want to do it now?  Click on Yes  A confirmation message is displayed showing the organization was successfully re-published  Click on Ok  A new custom tab is applied to all users.If the value is changed in Bonita Portal by the admin, and the filter value does not exist in the organizationAdd custom user information values for each userIn the Organization menu &amp;gt; Manage organizations &amp;gt; Organization users, the first tab List of users shows detail information for each user on the right hand-side panel, spread over five tabs:  General (Title, First and last name, Job title)  Membership (Group/role)  Personal (Email, phone, website, address etc.)  Business card (Email, phone, website, address etc.)  CustomTo add custom user information values for a user, select a user in the List of users, click on the Custom tab, and enter the value for each relevant information. You also see a link Manage custom information, to go back and manage the list of custom user information. Note: this value can be changed by a user with the Admin profile in the Bonita Portal. See How to edit Custom information for a single userSet an actor filter on custom user informationA task or a lane is linked to an actor. An actor is mapped to a list of users. An actor filter applies to the set of users mapped to the actor. The actor filter configuration can be added to an actor at lane or human task level.When all relevant users have their Custom User Information set, you can add an actor filter:  In a process diagram, select a lane or a task  In the Details panel, Go to General &amp;gt; Actors and select an actor to apply the filter (actors are defined at pool level)  At Actor filter level, click Set  In the Actor filters window &amp;gt; Categories, click on Organization and choose  Users with Custom information  Click on Next  Enter a name and a description for the filter configuration  Click on Next  Enter a custom user information Name or click on the drop down list to select the one you need  Enter a value for the information  To filter on several values using the same string, click **Partial match **  If you expect the filter to return only one user, then it’s good that the task is assigned to her automatically. In this case, click the Assign tasks automatically checkbox.  Click on FinishThe filter is set for the actor and is displayed in the actor filter field. Users from the actor and with the relevant value for the custom information chosen will become candidates to perform the task, or all the tasks in the lane if you set it at lane level.Note that the filter will not work if you change values in the organization but do not re-publish the organization. This will throw a synchronization error.",
      "url": " /bonita/7.7/application-and-process-design/organization/custom-user-information-in-bonita-bpm-studio",
      "author": "",
      "categories": "Application and Process Design, Organization"
    }
    ,
  

    "bonita-7-7-application-and-process-design-organization-ldap-synchronizer": {
      "title": "LDAP synchronizer",
      "content"     : "LDAP synchronizerNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.The LDAP synchronizer is a service for synchronizing Bonita and LDAP directory users and groups in a single direction, LDAP to Bonita.The LDAP synchronization service keeps the Bonita organization information synchronized with an external LDAP directory, by creating, updating, or removingusers and groups in the organizationto match as closely as possible the user list attributes defined in LDAP. It does not modify the LDAP directory.The LDAP Synchronizer connects to both the LDAP server and Bonita Engine to read the data from the LDAP server and modify the organization in the Bonita Engine database using the API.Both the Engine and the LDAP server must be running when the LDAP Synchronizer tool is run.The synchronizer program runs in the background. There is no user interface: all configuration settings are specified in files andall output is written to a log file.LDAP objects supportedInstallationConfiguration filesbonita.propertiesldap.propertieslogger.propertiesmapper.propertiessync.propertiesRunning the synchronizerUsing the LDAP synchronizer in a non-default tenantLDAP objects supportedThe synchronizer will synchronize LDAP objects that inherit from the “person” class as users in Bonita.The synchronizer application does not support user meta data and cannot synchronize passwords. A new user password is initialized with the user name.The tool supports LDAP groups of the following classes:  group  groupOfURLs  groupOfNames  groupOfUniqueNames  ds-virtual-static-groupInstallationTo install the synchronizer, unzip the provided deploy.zip file and configure the files located under the conf directory. This directory contains a sample configuration in the conf/default subfolder which is used to perform LDAP synchronizationon the default tenant. This is also possible to perform the synchronization on a non default tentantwhich requires dedicated configuration.Two way to connect the Bonita Engine is possible:1/ Connection using the Environment variables:Set the API access mode used by the LDAP Synchronizer, by editing the &amp;lt;LDAP_SYNCHRONIZER&amp;gt;BonitaSubscription-&amp;lt;version&amp;gt;-LDAP-Synchronizer.(bat or sh) file.Add between java and -classpath:-Dorg.bonitasoft.engine.api-type=HTTP -Dorg.bonitasoft.engine.api-type.server.url=http://localhost:8080 -Dorg.bonitasoft.engine.api-type.application.name=bonitaThe LDAP Synchronizer can use the HTTP, or EJB3 modes, but not local access. For more information about API access modes,see the Engine API overview.2/ Connection using Bonita.properties files:See bonita.properties sectionCustomize the configuration for your system, by editing the configuration files. There are some additional considerations for using the LDAP synchronizer in a non-default tenant.Configuration filesThere are five properties files:  bonita.properties defines the Bonita connection settings and specifies the account used for user synchronization (requires administration privileges).  ldap.properties defines the LDAP connection settings and specifies the account used for user browsing.  logger.properties provides the settings for the logger. Default settings should be fine for most uses.  mapper.properties specifies the translation between Bonita and LDAP directory user attributes.  sync.properties defines the synchronization settings.All configurations files can be found in the conf directory.Note: to use a special character in a properties file, use the Unicode equivalent. For example, for à use u00E0. You can use a tool such as native2ascii to convert any special characters in the configuration files to Unicode.You also need to configure connection on Bonita Engine for the LDAP Synchronizer.bonita.propertiesThis file defines the connection settings and specifies the account used for user synchronization (requires administration privileges).Item  Description  Default  bonita_home  The path to the Bonita Home folder of the LDAP Synchronizer. (deprecated)     apiType  The API Type to access the Bonita Engine: HTTP or EJB3  (1)  serverUrl  Url to access the Bonita Server (http://myHost:8080)  (1)  applicationName  Application name (bonita is the general name)  (1)  ejbReference  Ejb reference when Bonita Server is deployed on an Application server  (1)  login  The login to provide is a userName.  install  password  Password of the Bonita account used for synchronization.  install  technicalUser  This is the username of the platform adminstrator.  platformAdmin  technicalPassword  This is the password of the platform adminstrator.  platform  (1): if apiType properties is not defined, then the variable environment mechanism is used to connect to the Bonita Engine.ldap.propertiesThis file defines the LDAP connection settings and specifies the account used for user browsing.Item  Description  Default  host_url  LDAP server URL  ldap://localhost:389  auth_type  LDAP authentication type (supported values: none, simple or strong)  simple  principal_dn  distinguished name (DN) of the user account used for browsing through the LDAP users  cn=Directory Manager  principal_password  password of the LDAP ?browser account  root  directory_user_type  type of the user object (“user” for an Active Directory, “person” for an LDAP)  person  logger.propertiesThis file provides the settings for the logger. Default settings should be fine for most uses.Item  Description  Default  log_dir_path  directory path where the log files will be stored. The log files are named on the following template: log_file_date_prefix_LDAP-BOS_Synchronizer.log  logs/  log_file_date_prefix  date format used for prefixing the log file name  yyyy=MM=dd  log_level  level of reporting of the logger (relevant values are INFO for production use, FINE for debug use)  INFO  The date format in log file names follows the syntax of the Java SimpleDateFormat class. This is useful to control the number of log file create as the logger will append information to an existing log file if the file name already exists. Example: if you set the format to “?yyyy-mm”, you will get one new log file per month.mapper.propertiesThis file specifies the translation between Bonita and LDAP directory user attributes such as:bonita_property = ldap_propertyThe only mandatory property is user_name, which is the key defined for matching users. All other properties are optional.An LDAP property may be used several times in the configuration file but each Bonita property should be defined only once. Unused properties should be commented out.These are the supported Bonita user properties:General information  Professional information  Personal information  Custom User Information  user_name   first_name   last_name   title   job_title   manager  pro_email   pro_phone   pro_mobile   pro_fax   pro_website   pro_room   pro_building   pro_address   pro_city   pro_zip_code   pro_state   pro_country  perso_email   perso_phone   perso_mobile   perso_fax   perso_website   perso_room   perso_building   perso_address   perso_city   perso_zip_code   perso_state   perso_country  custom_&amp;lt;Custom User Information&amp;gt;  The following items are configured by default:Item  Default  user_name  uid  last_name  sn  title  title  pro_email  mail  pro_phone  telephoneNumber  pro_mobile  mobile  perso_phone  homePhone  Custom User InformationThe prefix ‘‘custom_’’ is used to map any ‘Custom User Information’. For example, to map the ‘Custom User Information’ “skypeId” and “room”from LDAP property “skype” and “roomNumber”, the syntax is:custom_skypeId = skypecustom_room = roomNumber sync.propertiesThis file defines the synchronization settings.  error_level_upon_failing_to_get_related_user: optional parameter that specifies whether an error should be blocking upon getting related users (manager)Supported values: ignore, warn or fatalDefault value: warn  bonita_username_case: optional parameter that specifies whether the LDAP user names should be converted to a given case upon being imported in Bonita.Supported values: mixed, uppercase or lowercaseDefault value: mixed (conserves the current LDAP user name case)  ldap_watched_directories: defines the LDAP directories to watch.Supported values: list of LDAP watched directory object identifiers separated by commas.The syntax for watched directory object properties is detailed in the next section.  bonita_nosync_users: specifies the list of users who should not be synchronized.Supported values: user names separated by commas.  bonita_user_role: specifies the role assigned to Bonita users.Default value: user  bonita_deactivate_users: optional parameter that specifies whether the tool should deactivate Bonita users who are not present in LDAP. When bonita_deactivate_users is set to true, a Bonita user who is not present in LDAP is deactivated. The user are not removed from Bonita, but they cannot start process instances or do tasks.  bonita_reactivate_users: optional parameter that specifies whether the tool should reactivate Bonita users who are deactivated in bonita but present in LDAP.Supported values: true or falseDefault value: true  allow_recursive_groups: optional parameter that specifies whether sub-groups should also be synchronized. The operation does not preserve the group hierarchy however, and the LDAP sub-groups will be created at root level in Bonita organization.Supported values: true or falseDefault value: true  ldap_groups: optional parameter that specifies the LDAP groups that should be synchronized.Supported values: list of LDAP Group object identifiers separated by commas.The syntax for group object properties is detailed in a later section.bonita_user_custominfo_policy: Define the policy to synchronize the ‘Custom User Information’. The different policy is detailed in a later section.Default value: noneallow_custominfo_creation: define the strategy when a Custom User Information is detected in the mapper.properties configuration, and not exist in the Bonita database. If this property is true, then the Custom User Information is created.Default value: falsePolicy to synchronize the Custom User InformationIn Bonita, you can defined a set of Custom User Information attributes. Then, each user has a value for each attribute.A policy named  bonita_user_custominfo_policy gives the strategy to synchronize this information.All examples are based on  Two Custom User Information exist in the Bonita database : badgeId and roomThe mapper.properties contains  custom_badgeId = ldapBadgeIdentificationThe room is not declared in the mapper.properties.  none:bonita_user_custominfo_policy = noneno ‘Custom User Information’ is synchronized.  partial :bonita_user_custominfo_policy = partialSynchronize only ‘Custom User Information’ declared in the mapper.properties.A ‘Custom User Information’ not declared in mapper.properties will not be modified. When the Ldap Object doesn’t have a property, it will not be modified.LDAP object  LDAP property  Synchronization  WalterBates  ldapBadgeIdentification== ‘walterSid’  (Synchronized) badgeId==’walterSid’  HelenKelly  no property ldapBadgeIdentification defined  (No synchronization)scope:bonita_user_custominfo_policy = scopeSame as partial, plus if the Ldap Object doesn’t have a property, it will be set to null   (all the scope is synchronized)LDAP object  LDAP property  Synchronization  WalterBates  ldapBadgeIdentification== ‘walterSid’  (Synchronized) badgeId==’walterSid’  HelenKelly  no property ldapBadgeIdentification defined  (Set to null) badgeId==nullfull:bonita_user_custominfo_policy = fullSynchronize all ‘Custom User Information’. If a ‘Custom User Information’ is not declared in mapper.properties, or the Ldap doesn’t have the property, it is set to nullLDAP object  LDAP property  Synchronization  WalterBates  ldapBadgeIdentification== ‘walterSid’  (Synchronized) badgeId==’walterSid’room==null  null        LDAP Watched directory object properties syntaxA watched directory is defined by an id that is declared in the “ldap_watched_directories” list. This id provides access to the object properties with this syntax: object_id.property.Here are the available object properties:      ldap_search_dn  DN of the LDAP watched directory that will be used to get the list of the LDAP users.  ldap_search_filter  LDAP user search filter (mandatory attribute, but can be a wide filter such as “cn=*”).  Example of a watched directory declaration:# Declare a list of LDAP watched directoriesldap_watched_directories = dir1,dir2# Specify dir1 settingsdir1.ldap_search_dn =   ou=People,dc=example,dc=comdir1.ldap_search_filter =   cn=*# Specify dir2 settingsdir2.ldap_search_dn =   ou=OtherPeople,dc=example,dc=comdir2.ldap_search_filter =   cn=*LDAP Group object properties syntaxThe tool will automatically detect the group class from LDAP. Here are the LDAP group classes supported by the LDAPSynchronizer:  group  groupOfURLs  groupOfNames  groupOfUniqueNames  ds-virtual-static-groupThe tool can determine the list of users belonging to a group by looking these properties, depending on the group’s objectClass:  member: group objectclass  memberURL: groupOfURLs objectclass  member: groupOfNames objectclass  uniqueMember: groupOfUniqueNames objectclass  ds-target-group-dn: ds-virtual-static-group objectclassThere are two ways (they can be configured individually or at the same time) to synchronize groups  declare a list of groups  perform a LDAP searches to find the list of groups to synchronizeSynchronize a list of groupsAn LDAP group is defined by an id which is declared in the “ldap_groups” list. This id provides access to the object properties with this syntax: object_id.property.You can also specify groups with a search: all groups that match the search are synchronized.Groups will be synchronized based on the matching of their LDAP common name (CN) and their Bonita BPM names.Groups can be declared individually in the configuration file with the following properties :ldap_group_dnmandatory attribute that specifies the DN of the LDAP group.forced_bonita_group_nameoptional attribute that renames the Bonita group instead of using the original LDAP group name.force_add_non_existing_usersoptional Boolean attribute (true by default) that defines whether group members that are not present in Bonita should be imported (if false, these users are ignored).Example of group declarations:# List of groups to synchronizeldap_groups = group1, group2# Specify group1 settingsgroup1.ldap_group_dn  =  cn=group1,ou=groups,dc=bonita,dc=comgroup1.forced_bonita_group_name  =  forced group1# Specify group2 settings: # sync the group with specified dn but not the users inside this groupgroup2.ldap_group_dn  =  cn=group2,ou=groups,dc=bonita,dc=comgroup2.force_add_non_existing_users  =  falseSynchronize a list of groups retrieved using a LDAP searchIn combination or as an alternative, groups can be declared using the result of an LDAP search that is defined in the configuration file with the following properties :      ldap_group_search_dn  DN of the LDAP watched directory that will be used to get the list of the LDAP groups.  ldap_group_search_filter  LDAP group search filter (mandatory attribute, but can be a wide filter such as “cn=*”).  force_add_non_existing_users  optional boolean attribute (true by default) that defines whether group members that are not present in Bonita should be imported (if false, these users are ignored).  Example of group searches:#Specify search of groupsldap_search_filter_groups  =  search1,search2# Specify search1 settings: # sync all groups under ou=people,dc=bonita,dc=com with cn starting with &quot;A_&quot;search1.ldap_group_search_dn  =  ou=people,dc=bonita,dc=comsearch1.ldap_group_search_filter  =  cn=A_*# Specify search2 settings: # sync all groups under ou=people,dc=bonita,dc=com with cn starting with &quot;B_&quot; # but without importing new users inside these groupssearch2.ldap_group_search_dn  =  ou=people,dc=bonita,dc=comsearch2.ldap_group_search_filter  =  cn=B_*search2.force_add_non_existing_users  =  falseRunning the synchronizerBelow are all the actions completed by the LDAP synchronizer tool:  Reads all Users in the source LDAP directory  Creates all Users in the bonita engine db  Reads all Groups in the source LDAP directory  Creates all Groups in the Bonita Engine db  Retrieves all Users that are belonging to the groups in the source LDAP directory  Retrieves all Users that are belonging to the groups in the Bonita Engine db  For all Users belonging to the groups in the Bonita Engine db and not in the groups in the source LDAP directory, do Delete membership (user, role-in-ldap-tool-config, group)  Creates all memberships for all users and groups with a configured role (user, role-in-ldap-tool-config, group)To run the LDAP synchronizer, execute the script BonitaSubscription-x.y.z-LDAP-Synchronizer.bat (for Windows) or BonitaSubscription-x.y.z-LDAP-Synchronizer.sh (for Linux), where x.y.z is the version of Bonita you are running.Warning: Do not modify the Organization from the Bonita Portal while the tool is running, as this will cause a synchronization error.Using the LDAP synchronizer in a non-default tenantInstallation: The LDAP Synchronizer is installed on the platform as described above. After installation, Check that the “User” profile is defined for the tenant. The default tenant has a “User” profile by default, but it must be created manually when a tenant is created. The LDAP synchronizer will fail if this profile is not defined.Configuration: To configure the LDAP synchronizer for a tenant that is not the default tenant:  Create a new folder in $BonitaSynchronizerFolder/conf with the same name as the name of the tenant (not the id) that was set when the tenant was created.  Copy the contents of the default folder from $BonitaSynchronizerFolder/conf to this new tenant-specific folder.  Configure the LDAP synchronizer for the tenant by editing the configuration files in the tenant-specific folder, as described above.Running: To run the LDAP Synchronizer on a tenant, give the name of the tenant as a parameter of the script.",
      "url": " /bonita/7.7/application-and-process-design/organization/ldap-synchronizer",
      "author": "",
      "categories": "Application and Process Design, Organization"
    }
    ,
  

    "bonita-7-7-application-and-process-design-organization-organization-management-in-bonita-bpm-studio": {
      "title": "Organization management in Bonita Studio",
      "content"     : "Organization management in Bonita StudioIn Bonita, the organization is the set of users who performs tasks in your business processes.Within Bonita Studio, more than one organization can be defined. This is useful if you are developing a process that will be deployed in several different organizations. It is also useful for testing, because you can create a reduced version of your organization that has the same structure but fewer users, saving time in managing your test environment.The ACME example organizationCreating an organizationExporting and importing an organizationModifying an organizationDeploying an organization to Bonita PortalProfile managementThe ACME example organizationBonita Studio includes a sample organization, called ACME. This organization contains a small number of users, who belong to different groups, with realistic roles.You can use this example organization to explore how to manage an organization in Bonita Studio, for example by adding a user, or changing the role of a user.You can also use this sample organization to test a process that you develop.Creating an organizationYou must load an organization into Bonita Engine before running a process. There are two ways to do this:  Create the organization in Bonita Studio, export it, and then import it into Bonita Portal.  If you have a Subscription edition, use the LDAP synchronizer to automatically load information from your LDAP directory into Bonita Engine.To specify an organization manually, you create the organization, create the group hierarchy, specify roles, and then add users and their memberships.  Start Bonita Studio.  Go to the Organization menu and select Manage….  Add a new organization:  Click Add. A line will be added to the table of organizations, with a placeholder name such as Organization1.  Change the placeholder name to the name of your organization, and add a description.Add groups to your organization:  Select the name of your organization and click Next.  Click Add to add a group. You can specify the following:  the group Name, which is used internally by the Bonita software.	**NB:** Bonita doesn&#39;t support the &#39;/&#39; character in the group name field. A group name that contains a &#39;/&#39; may lead to unstable behaviour and may be forbidden in the future. * the Display name, which is the name displayed in Bonita Portal * the Path, which shows the hierarchical relationship between groups * a Description of the group* Click **_Add_** to add the next group, and continue until you have added all the groups required. Note that each time you add a group, it is added as a subgroup of the group that is currently selected (by default this is the last group added). You can change the group hierarchy by specifying the Path.* When you have added all the groups you need, click **_Next_**. 1. Specify roles in your organization:* Click **_Add_**, and add a role called _member_. This will be the default role for users within a group.* Click **_Add_** and add the other roles you require. Typically, most organizations have a Manager role so the group manager can be easily identified, but the specific roles you require will depend on your processes. Remember that it is not necessary to copy all the role information from your business organization into your Bonita organization, but instead you should just create the roles that are useful in processes.* When you have specified all the roles the processes/applications require, click **_Next_**. 1. Add users to your organization.* Click **_Add_**. A default username is added to the list of users. * You can change the username, but the value must be in a format Bonita can use: only unaccented alphanumeric characters are permitted plus a period (.).   One option is to use the personal part of the user&#39;s email address, that is, the part before the @ sign.* Specify a password for the user. The password characters are not displayed, so keep note of the password you choose.* Specify the manager of the user. * In the **General** tab, specify the Title, First name, Last name, and Job title of the user.* In the **Membership** tab, specify the groups that the user belongs to, and what role they have in each group.* You can also specify **Personal contact** and **Professional contact** information for the user.  1. Add all the users needed to test your processes and applications.  1. When you have finished, click **_Finish_**.Exporting and importing an organizationYou can export an organization definition from Bonita Studio. The exported file is in XML, so can be modified.You can import an organization definition in this XML format that was exported from another Bonita Studio running the same version of Bonita, or that was constructed by some other method but has the same format.Choose Export… or Import… from the Organization menu.To prepare your production system (unless you are using the LDAP synchronizer), you must create the organization that you need for all the processes that will be deployed, export it from Bonita Studio, and import it into Bonita Portal. After the organization is imported into Bonita Portal, you can manage groups, roles, and users in the organization.Modifying an organizationTo modify an organization, choose Manage… from the Organization menu and use the same dialogs that you used to create the organization.To modify an item in an organization, select it in the item list and modify the information on the right-hand side of the list.To delete an item, select and it click Remove.Deploying an organization to Bonita PortalDeploying an organization means uploading the organization data to Bonita Portal temporarily so that you can test your process.The organization that you deploy overwrites one in Bonita Portal.Importing an organization overwrites the existing organization in Bonita Portal, which could have an impact on deployed processes.To deploy the organization data:  Choose Deploy… from the Organization menu.  Click the organization to be deployed, and  Specify the username of the user that will beused to log in to Bonita Portal when a process is started fromBonita Studio. This user must be in the organization you haveselected.  Click Deploy.Profile managementIn order to log in to bonita UIs (Portal, applications…), a user must have at least one profile (User, Adminstrator…etc).In Community, only provided profiles are supported (User and Adminstrator). When deploying an organization from the Studio, each user is automatically mapped to all those profiles.In Teamwork edition, 3 provided profiles (User, Process Manager and Adminstrator) can be edited in the Studio using an XML editor (Go to Organization &amp;gt; Profiles &amp;gt; Open). For development purposes, all users mapped to role member (cf ACME organization) will benefit from all profiles in the Portal to let you log in with any of those users and test your processes.This will not be true for other environments.In Efficiency, Performance and Enterprise editions, in addition to provided profiles it is possible to defined custom profiles in the Studio using the Profile Editor.When creating or importing other organizations, you need to make sure that all users are mapped to at least one profile, through a group, a role, a membership, or as a user, to grant them access to Bonita Portal or applications.",
      "url": " /bonita/7.7/application-and-process-design/organization/organization-management-in-bonita-bpm-studio",
      "author": "",
      "categories": "Application and Process Design, Organization"
    }
    ,
  

    "bonita-7-7-application-and-process-design-organization-organization-overview": {
      "title": "Organization overview",
      "content"     : "Organization overviewThere are two stages to specifying who will perform a step in a process:  When the process is designed, the designer designates an actor for the step. An actor is a placeholder that defines the theoretical user who will perform the step.  Before a process is deployed, the actors are mapped to the real users in an organization.This page explains the concepts of actors and organizations in Bonita.Actors and usersWhat is an organization?Tools for managing an organizationCustom user informationIn Bonita Studio:In Bonita Portal:Organization schema XSD fileActors and usersWhen you define a process, you define who will carry out a step in the process by specifying an actor. For example, if a step can be done by any member of the HR team, you could call the actor hr, or if a step can only be done by the sales team manager in Europe, you could call the actor sales_mgr_europe.A user is a person who has a username and a password in a Bonita organization, and can therefore perform steps in a process. Before you deploy a process, you need to map the process actors. This mapping defines who can carry out steps in the process.What is an organization?An organization is a collection of users, usually defined in a hierarchical structure that is aligned with the structure of the business entity that the users belong to.Within the organization, users belong to one or more groups.For each group a user belongs to, the user has a role. You can define roles as required. The combination of a group and a role for a user is called a membership. A user can have several memberships but each one must apply to a different group.In this corporation, there is a hierarchical structure, with the following units:MyCorpMyCorp/AdministrationMyCorp/Administration/PurchasingMyCorp/Administration/Order adminMyCorp/HRMyCorp/Production/Parts receptionMyCorp/Production/ManufacturingMyCorp/Production/DeliveryThese hierarchical units can be used as groups within the Bonita organization. In addition, you can create transverse groups that do not correspond to the hierarchical structure, or that also take account of some other factor, such as location. For example, suppose that MyCorp has two sites, one in the US that is corporate headquarters and production, and one in Europe that is just a production site. You could create two groups, MyCorp/US and MyCorp/Europe, each containing the users at the relevant site.A group can be created based on any set of criteria useful to a process. For example, if MyCorp is conducting trials of a new process to control just-in-time parts delivery from a supplier, you could create a group that contains the specific users involved in the trials. The figure below shows the groups in the MyCorp organization, seen in Bonita Studio.All the users who participate in a process must be in the same Bonita organization. For example, if you use a process to track order processing with a supplier, the supplier employees who perform steps in the process must be in the organization.Tools for managing an organizationThe Bonita model for managing an organization assumes that you use the same organization information for other tools and that it is stored in an LDAP directory. Bonita has three tools you can use to manage your organization information:  LDAP synchronizer (in the Enterprise, Performance, Efficiency, and Teamwork editions of Bonita), for keeping the Bonita organization synchronized with your external LDAP directory. Synchronization is one-way, from LDAP to Bonita. You can run the synchronizer once to load the organization then manage it within Bonita Portal, or you can run the synchronizer on a schedule and manage the organization externally.  Bonita Portal, for managing organization information in production within Bonita. You can manage users, groups, and roles. You can also import or export the organization information.  Bonita Studio, for creating your initial organization definition, which must be imported into Bonita Portal prior to production, and for managing organization information while you test a process in development. Bonita Studio contains an example organization, called ACME.This organization contains a small number of users, who belong to different groups with realistic roles. You can use this sample organization to test a process that you develop. You can modify the ACME organization and you can create other organizations.Custom user informationCustom user information enables custom details to be added to a user in the Organization.In Bonita Studio:Use the Custom tab in Organization users to add Custom information to a user.This custom information is defined in Bonita Studio, then applied to an actor filter, and when deployed in Bonita Portal, enables the filtering of users mapped to tasks.The custom user information is saved in the Organization schema and published so it can be used in Bonita Portal.The Users with Custom information actor filter is provided by default, and can be applied to an actor. It uses the custom information added to a user to map users to perform tasks in Bonita Portal.When the process is deployed in Bonita Portal in a production environment, the filter definition is static, so it cannot be changed. However, the value associated with a filter definition can be modified by a user with an admin profile.The organization will be modified on the remote server. This enables tasks to be re-assigned to users in processes that are already deployed, which is then used to filter users for tasks.See custom user information in Bonita Studio for setting the definition and values for the filterIn Bonita Portal:This custom information can only be seen and edited by users who have the Administrator profile.Note that if the custom user information does not exist in Bonita Studio, modifying its value for a user in Bonita Portal will not make any difference to the filter, apart from creating an error.Synchronize the Organization between Bonita Studio and Bonita Portal first by publishing it so all values are up to date.Organization schema XSD fileIf you want to modify the organization by hand, it is important to respect the structure of the .xsd file.You can see the standard Bonita organization .xsd file on Github, to view the xml structure and tags.",
      "url": " /bonita/7.7/application-and-process-design/organization/organization-overview",
      "author": "",
      "categories": "Application and Process Design, Organization"
    }
    ,
  

    "bonita-7-7-application-and-process-design-page-and-form-development-6-x-legacy-forms": {
      "title": "6.x legacy forms",
      "content"     : "6.x legacy formsAttention: By the end of 2018, V6 GWT forms won’t be available for modeling or execution.We strongly advise you to switch to forms created with Bonita UI Designer to benefit from technologies like html/AngularJS and use contracts in tasks and process instantiation.Continue to use 6.x forms in Bonita 7.xHide/Show 6.x specific featuresContinue to use 6.x forms in Bonita 7.xFrom the Execution tab, in the Form, Instantiation form, and Overview page panes, you can choose the 6.x option. This enables you to continue to use the 6.x forms in a Bonita 7.x platform. You need to apply this configuration at each form, and each overview page. This means that a process can work with a mix of 6.x and 7.x forms/overview pages to make it easier to migrate forms from 6.x.Hide/Show 6.x specific featuresWhen you no longer need access to the 6.x features, you can hide them to simplify the Bonita Studio UI.  Go to Preferences.  In the Other category, click 6.x legacy.  Uncheck the checkbox to hide some 6.x-only features.",
      "url": " /bonita/7.7/application-and-process-design/page-and-form-development/6-x-legacy-forms",
      "author": "",
      "categories": "Application and Process Design, Page and form development"
    }
    ,
  

    "bonita-7-7-application-and-process-design-page-and-form-development-cache-configuration-and-policy": {
      "title": "Cache configuration and policy",
      "content"     : "Cache configuration and policy Cache policy over viewLiving application and custom pages  Cache configuration and policyThis page explain how the portal cache and the living application cache are configured in bonita 7.6 version. You will also find details about this cache configuration impact for the end user, and tutorial on how you can modify this configuration.Cache policy over viewThe default cache policy configured on your bonita bundle will allow your browser to store recently used information so thatit can be quickly accessed at a later time, thereby improving performance.When you browse through different forms or custom pages that use the same images, CSS, or JavaScript, your browser will not have to re-download the files. Instead, the browser can simply load them from the cache, which is stored on your local hard drive.This cache policy will have impacts at three different levels:  Bonita portal display time and look and feel update.  Living applications display time and look and feel update.  Mobile application display time and look and feel update.Note that in every cases, custom pages and forms take advantage of the cache mechanism, whether contained in the portal, in an Application or in the Mobile application.Development configurationBy default cache is disable for the web server embedded by Bonita studio, as it is more comfortable to realise development without cache. But you can decide to activate cache, to be closer to the production display time. To do this, see Cache configuration documentation.Portal and MobileAs the portal or mobile update frequency is specific for each users, cache duration is set to 10 hours by default. So if you update your bonita portal in production, or if you change the portal look and feel,the end user will see the modification within a period of 10 hours.To fit your needs, you can change this duration into your server configuration, by following those steps:  Go in workspacetomcatserverwebappsbonitaWEB-INF  Open web.xml file.  Search CacheFilter filter-name.  Change value for duration param to value what you want and save file.  This update will be up when last cache expiration down or when end user empty cache browser.Living application and custom pagesAs the pages generated by the UI Designer take advantage of a cache busting mechanism, we can set the cache duration to 6 months.To fit your needs, you can change this duration into your server configuration, by following those steps:  Go in workspacetomcatserverwebappsbonitaWEB-INF  Open web.xml file.  Search CustomPageCacheFilter filter-name.  Change value for duration param to value what you want and save file.  This update will be up when last cache expiration down or when end user empty cache browser.Note: Html resources will be not caching.",
      "url": " /bonita/7.7/application-and-process-design/page-and-form-development/cache-configuration-and-policy",
      "author": "",
      "categories": "Application and Process Design, Page and form development"
    }
    ,
  

    "bonita-7-7-application-and-process-design-page-and-form-development-page-and-form-development-overview": {
      "title": "Page and form development overview",
      "content"     : "Page and form development overviewA page presents information to a user. It can also collect information entered by a user. A page is displayed in a browser.A form is a page that belongs to a process. In a process, there can be forms for process instantiation and for human tasks, and there can be overview forms.Form sourcesForm typesForm sourcesYou are recommended to use the UI Designer to create forms for Bonita 7.x processes. UI Designer forms enable you to take full advantage of the separation between the process definition and the UI definition, by using contracts.You can also use external forms referenced by URL. If an external URL is being used, the information submitted to the Engine by the form must fulfill the contract. You can store external forms wherever you want as long as they are accessible by URL.For certain cases, you can specify that there is no form. This is required for a process that is instantiated programmatically (by a call activity or by an API call from an application, for example), or for a process or a task that does not have any contract input.A human task with no form and no contract represents a manual task, completed outside Bonita. The user will indicate in the application or Portal that the manual task is complete. A process or a human task with a contract but no form expects the information needed to fulfill the contract to be provided programmatically.For backward compatibility, so that processes created in Bonita 6.x can continue to be used and maintained, the 6.x legacy form builder and associated tooling are still supported. You are recommended to migrate 6.x forms to the UI Designer so that you can take advantage of the new features in Bonita 7.x.Attention: By the end of 2018, V6 GWT forms won’t be available for modeling or execution.We strongly advise you to switch to forms created with Bonita UI Designer to benefit from technologies like html/AngularJS and use contracts in tasks and process instantiation.Form typesA form is a page that belongs to a process. It could be a process instantiation form, a human task form, or an overview form. There are some extra things to consider when you are creating a form compared with an ordinary page, concerning how data is passed between the process instance and the form.A context is the set of data provided by the process instance or task instance to the form. There is no context for a process instantiation form.A contract is the definition of that data that the form returns to the process instance. There is no contract for an overview form.During process development, some temporary forms are generated if necessary when you run a process from Bonita Studio, for process instantiation, for human task execution, and for the case overview. These forms are generated if the “UI Designer” option is chosen but no form is specified in the process definition.The process instantiation and step execution temporary forms are based on the relevant contract and they are a useful tool for testing and debugging your application.The case overview contains three main sections:  List of business data: the content of the business variables used by the case  List of documents: the content of each document used by the case  Timeline: information in chronological order about all the actions that have been performed in the selected case",
      "url": " /bonita/7.7/application-and-process-design/page-and-form-development/page-and-form-development-overview",
      "author": "",
      "categories": "Application and Process Design, Page and form development"
    }
    ,
  

    "bonita-7-7-application-and-process-design-page-and-form-development-ui-designer-appearance": {
      "title": "Appearance",
      "content"     : "AppearancePage and form appearance is based on the Bootstrap v3.3.2 CSS framework. To define the appearance of a page or form you can use an application theme resource, apply a Boostrap theme, or manually add a custom CSS class that you implement.Apply an application resource themeApply a Boostrap CSS themeCustomize appearanceApply an application resource themeBy default, pages designed with the UI Designer are deployed in an application and use the theme chosen for the application.Apply a Boostrap CSS themeMany Bootstrap CSS themes are available (for example at https://bootswatch.com/).To apply a Bootstrap theme, download it and add it to your page or form as a CSS asset. To see the result, preview your page. Applying a Bootstrap theme as a CSS asset will override the application theme.Customize appearanceThe appearance of a page or form widget can be modified with a CSS stylesheet.The UI Designer use the Bootstrap CSS, so the markup provided for widgets uses Bootstrap CSS classes. You can add classes by using the CSS classes property field available for each widget in the whiteboard.Then, to customize the widget appearance, include a CSS asset in your page or form. In this CSS file you can either overwrite the Bootstrap CSS classes or implement the classes you specify in the CSS classes property field.",
      "url": " /bonita/7.7/application-and-process-design/page-and-form-development/ui-designer/appearance",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-7-application-and-process-design-page-and-form-development-ui-designer-assets": {
      "title": "Assets",
      "content"     : "AssetsAssets enable you to add web resources to pages, layouts and forms. We will use “page” to refer to those three artifacts.Available asset types are JavaScript, CSS, image, and (in the Subscription editions) Localization. Assets can be Local (file stored in the artifact) or External (URL). A localization asset is always local and its name is always “Localization.json”. An external asset name must be a standard URL.Assets in the page editorJavaScript assetsCSS assetsImage assetsLocalization asset (Subscription editions only)Asset listAssets in the custom widget editorJavaScript assetsImage assetsAsset listAssets in the page editorManage assets using the Assets tab in the bottom panel of the whiteboard.JavaScript assetsWith a Javascript asset you can add a script. It will be loaded in the global scope and you can use it in data.For example, add a script myscript.js to display this welcome message:function hi(name){  return &#39;Welcome &#39; + name + &#39; to the UI Designer&#39;;}To add and use this asset:  In the Assets panel, click Add a new asset.  Select the type: JavaScript.  Set the source to Local.  Upload your JavaScript file. The file appears in the asset list.  In the Variables panel, add a new String variable called “name”.  Create a JavaScript expression that calls the “hi” function.  Add an input widget linked to the “name” variable and a text widget linked to the hi variable.  Click on the preview button. You will see a page containing the welcome message. The name will change when you change the value of the name variable.CSS assetsAdd CSS assets at page level and use them to edit the CSS classes property of any widget. The UI Designer integrates the default Bootstrap style.For example, you can create a file mycss.css with this content:.myOwnStyle{  background-color : #404853;  color: #ffffff;}  In the Assets panel, click Add a new asset.  Select the type: CSS.  Set the the source to Local.  Upload your CSS file. The file appears in the asset list.  Drag a widget text onto the whiteboard.  Select this widget.  In the property panel add your CSS class  Click on the preview button. You will see white text on a gray background.Image assetsAn image asset can be displayed in a custom widget (see the Custom widget editor &amp;gt; Assets help). Add an image asset at page level if the image is used as a custom widget property.Localization asset (Subscription editions only)The localization asset of a page is a local file called localization.json that contains the text presented in the page with translations into the languages that you want to support. This enables you to create multi-language pages.A page can not have more than one localization asset. When you upload a new localization.json asset file, it overwrites the existing one.Asset listThe list contains both page assets and the assets of the custom widgets used in this page.In the list, you can delete page assets only, view local assets, and edit external assets of a page. You can not manually change the order of assets in the page. You can also indicate whether an asset is active. To avoid dependency clashes with multiple version of assets, make sure only one version of an asset is active in a page.At runtime, custom widget assets are loaded in alphabetical order of the custom widgets. For each custom widget, the assets are loaded in the order they are listed. Then page assets are loaded. JavaScript and CSS assets are loaded in the page header.Assets in the custom widget editorTo use the same asset in several pages, you can add it to a custom widget and use this custom widget in your application pages or forms. When you add a custom widget with assets to a page, those assets are automatically linked to the page. A custom widget can not contain a localization asset. Instead, include the text and translations in the page localization asset for each page where the custom widget is used.JavaScript assetsIn a custom widget JavaScript asset, you can specify a dependency on an Angular module. First add the JavaScript asset, and then add the module name in the dedicated section. You can find the the available modules on http://ngmodules.org/.Image assetsNote: Applies to 7.0.0 and 7.0.1. From 7.0.2, use the image widget.In the custom widget editor, create a widget with two properties:{name : &quot;src&quot;, type : &quot;text&quot;, &quot;Default value&quot; : &quot;assets/img/assetname.png&quot;}{name : &quot;description&quot;, type : &quot;text&quot;}You do not need to define a controller but you must create an HTML template: &amp;lt;img ng-src=&quot;&quot; alt=&quot;&quot;&amp;gt;You can now use this custom widget in any page, by adding an image asset and changing the property src to point to it. For an external asset, specify a URL. To load a local image, specify a relative path as follows:  assets/img/[image name] for a local image added in the page  widgets/[custom widget name]/assets/img/[image name] for a local image added in a widgetAsset listIn a custom widget, you can use the arrows to reorder assets, view local assets, edit external assets, and delete an asset.You can also indicate whether an asset is active. To avoid dependency clashes with multiple version of assets, make sure only one version of an asset is active in a page.At runtime, assets of a custom widget are loaded in the order defined.",
      "url": " /bonita/7.7/application-and-process-design/page-and-form-development/ui-designer/assets",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-7-application-and-process-design-page-and-form-development-ui-designer-create-or-modify-a-page": {
      "title": "Create or modify UI artifacts",
      "content"     : "Create or modify UI artifactsThe UI Designer is a powerful application to design Bonita custom pages, layouts, forms, custom widgets and fragments.Custom pages are used in Bonita Portal custom profiles or in custom BPM applications.Forms are used to instantiate a process or to execute a human task.The UI Designer runs in a browser. Launching it from Bonita Studio starts a web server and opens your default browser.Starting the UI DesignerFrom Bonita Studio menu barFrom a form mapping tabDesign a page, layout, form, or fragmentPreview a page, layout, form, or fragmentExport an artifactImport an artifactPages and forms in .bos/.bar fileStarting the UI DesignerFrom Bonita Studio menu barOpen the Development menu then choose Open UI Designer, or click the UI Designer icon in the coolbar. This is useful to create application pages that are not linked to a process, but display business information whose changes are managed by underlying processes.From a form mapping tabSelect a human task or a pool, go to the Details panel, Execution tab. Then go to the relevant form mapping tab:  Instantiation form for a form to start a process instance  Form for a form on a human taskWith the form type set to UI Designer, you can select a form from the dropdown list and click the pencil icon to edit it, or you can choose Create a new form. This is the way to go to create forms as the Studio will auto-generate a form based on the process instantiation or task execution contract.You can also create a customized overview form, to display a summary of the case to the users, either in a case details page, or in the tasklist, to give some context to the task to do.To do so, go to the pool Details panel, Execution tab, and click _Overview page.With the form type set to UI Designer, you can select a form from the dropdown list and click the pencil icon to edit it, or you can choose Create a new form.Design a page, layout, form, or fragmentAfter a page, layout, form, fragment is created, you can update it in the Page editor. Update your page, form or fragment by dragging and dropping widgets from the palette to the whiteboard. Edit widget properties in the widget properties panel, create data, and bind it to the widgets.In the Enterprise, Performance and Efficiency editions, you can optimize the page or form design for a given device type by configuring device-specific values for the Width property for widgets. Use the a device types bar in the Page editor to choose the target device type.Custom widget is a special artifact that we will explain in a later chapter.Preview a page, layout, form, or fragmentYou can preview page, form and fragment rendering by clicking the Preview button. Another browser window opens with the artifact as it will be displayed after deployment. If you update the page, form or fragment, the preview is automatically refreshed when you save (not available for Internet Explorer 9).In the Enterprise, Performance and Efficiency editions, you can use the a device types bar on the preview screen to choose the target device type.The preview displays the artifact as it would be displayed on the selected type of device.Custom widget is a special artifact that we will explain in a later chapter.Export an artifactYou can export a page or a layout to deploy it in Bonita Portal as a custom page.You can export any artifact to import it into another UI Designer.To export an artifact, click the Export button  on the Page editor or the UI Designer home page. A zip file is downloaded to your computer. It contains a Bonita custom page, which also suitable for import into another UI Designer. on the Page editor or the UI Designer home page. A zip file is downloaded to your computer. It contains a Bonita custom page, which also suitable for import into another UI Designer.After export you can modify your page or layout code by directly editing the code located in resources folder. Be aware that such a modification to the code will work when the page or layout is deployed in Bonita Portal but it may be broken if you import the page into another UI Designer.Import an artifactTo import an artifact from another UI Designer, go to the UI Designer home page and click the Import button . When you import a page, layout, form or fragment, its dependencies (such as custom widgets and fragments used are automatically be imported too.Warning: an artifact that has not been designed with the UI Designer cannot be imported into the UI Designer.Pages and forms in .bos/.bar fileWhen you generate the .bar file of a process, the mapped forms created with the UI Designer are embedded in the file. Application pages are not embedded. When you deploy the process in Bonita using the .bar file, forms are imported and deployed. Pages and layout must be imported one by one.To import artifacts in another Studio, you can export pages and forms in the process .bos file. In the list of artifacts to insert in the .bos file, forms are checked by default, but not pages. When you import this .bos file into another Bonita Studio, forms and pages that you have checked are available in the UI Designer of that Studio.",
      "url": " /bonita/7.7/application-and-process-design/page-and-form-development/ui-designer/create-or-modify-a-page",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-7-application-and-process-design-page-and-form-development-ui-designer-custom-widgets": {
      "title": "Custom widgets",
      "content"     : "Custom widgetsIf the standard widgets do not meet your needs, you can create a custom widget to match exactly what you want to achieve.After creation, a custom widget is available in the palette to design pages, application layouts, forms or fragments.  DescriptionCustom widget propertiesUsing an external AngularJS directive or service in a custom widgetTranslation filterAdvanced exampleDescriptionIn UI Designer editor, custom widgets are composed of:  A description that briefly describes the widget  Properties exposed by the widget  A template that describe the widget HTML markup  A controller that describe the widget logic  Some assets if the widget uses external JavaScript libraries, CSS definitions, or images  AngularJS modules declaration if the widget uses services or directives that are not built in to the AngularJS frameworkCustom widget implementation is based on the AngularJS framework.When you open the custom widget editor to create a new custom widget, a simple example is displayed to show the basic uses of these concepts.For more information, see the AngularJS guide on templates and controllers.For now, the definition of custom containers is not yet available in the product.  Note that UI Designer always prefix the ID of the custom widgets by “custom”, whereas the standard widgets are internally using the prefix “pb”.If you build a widget outside of the UI Designer, your widget ID must not start with “pb”.Custom widget propertiesProperties are variables that can be set in the properties panel when adding a custom widget to a page, layout, form, or fragment.A property is constant, dynamic, a bidirectional bond, or an interpolation. You can chose between these treatments when you edit the widget property. Use properties when you want the front-end developer using the widget to customize widget appearance or behavior. In a custom widget, a property can be used either in the template or in the controller.A property has a name which can be referenced in the controller or the template, a label which will be printed in the properties panel in an editor, a default value, and a type. There are several property types:  text user specifies the property value with some text  choice user chooses the property value from a list that you define  html user specifies the property value with some text that can contain basic HTML tags  integer property value is an integer  boolean property value is a Boolean  collection property value is an arrayEach of these types will allow the front-end developer to bind the property value to a variable.Using an external AngularJS directive or service in a custom widgetMany Angular libraries are available on the Internet and can be used in a custom widget. To do so, download the library you want to use and add it to your custom widget as a JavaScript asset. The downloaded library will specify a module to add to your application: add this module to the custom widget definition in the Required Angular modules field. Now you can use the imported library directives in the custom widget templates and services in the controller by injecting them in function arguments (example: function($scope, myImportedService)).Translation filterThe Multi-language pages tutorial explains how to manage localization (l10) inside developped pages, layouts, forms or fragments. During page loading, the l10n strings are loaded to the l10n mechanism.You can use this mechanism in your custom widgets to process content to translate. There are two ways to use the localization: either the uiTranslate angular filter or ui-translate directive:  Use the uiTranslate filter in custom widgets for dynamic content to be translated  Use the ui-translate directive in custom widgets for static content to be translatedFor instance, with a custom link widget :&amp;lt;div&amp;gt;&amp;lt;a title=&quot;&quot; ui-translate&amp;gt;Submit&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;The link text which is static is translated using the ui-translate directive. The link text title held inside the properties.title variable is translated using the uiTranslate filter.Advanced exampleThis section explains how to use the carousel and slide directives from the ui.bootstrap library.Following the ui.bootstrap documentation, download ui-bootstrap-tpls.min.js and declare the module ui.bootstrap as a dependency of the application. Specifically, to use these directive in a custom widget, you need to:  Download ui-bootstrap-tpls.min.js.  Add it as local JavaScript asset to the custom widget.  Declare the ui.bootstrap module in the Required angular modules field.You can now use the carousel and slide directives in your template. Here is a simple example of the template and controller for a carousel.Template:&amp;lt;div uib-carousel&amp;gt;  &amp;lt;div uib-slide ng-repeat=&quot;slide in slides track by $index&quot; index=&quot;$index&quot; &amp;gt;&amp;lt;img ng-src=&quot;&quot; style=&quot;margin:auto;&quot; alt=&quot;&quot;&amp;gt;  &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;Note:If you want use carousel and slide directives in the same page as widgets that import ui-bootstrap-tpls-0.13.0.min.js as asset, please use this syntax for carousel and slide directives in your template.&amp;lt;uib-carousel&amp;gt;  &amp;lt;uib-slide ng-repeat=&quot;slide in slides&quot; &amp;gt;&amp;lt;img ng-src=&quot;&quot; style=&quot;margin:auto;&quot; alt=&quot;&quot;&amp;gt;  &amp;lt;/uib-slide&amp;gt;&amp;lt;/uib-carousel&amp;gt;Controller:function ($scope) {  $scope.slides = [{ url: &#39;http://placekitten.com/601/300&#39;, alt:&#39;kitty looking down&#39; },{ url: &#39;http://placekitten.com/602/300&#39;, alt:&#39;kitty in hand&#39; },{ url: &#39;http://placekitten.com/603/300&#39;, alt:&#39;kitty outside&#39; },{ url: &#39;http://placekitten.com/604/300&#39;, alt:&#39;4 kitten in basket&#39; }   ];}",
      "url": " /bonita/7.7/application-and-process-design/page-and-form-development/ui-designer/custom-widgets",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-7-application-and-process-design-page-and-form-development-ui-designer-fragments": {
      "title": "Fragments",
      "content"     : "FragmentsNote: For Bonita Enterprise, Performance, Efficiency, and Teamwork editions only.A fragment is a piece of a page, form or layout, composed of one or more widgets and/or containers. It can be inserted in other pages.A fragment has its own widget configurations and data, but can also expose data to the pages that include it.Fragments are available in the Bonita Enterprise, Performance, Efficiency, and Teamwork editions.Fragment editorCreate a fragmentUpdate a fragmentVariables and fragmentsExport a fragmentImport a fragment Fragment editorThe editor used to create or update a fragment is the same as the Page editor. Create and update fragments in the same way you create and update a page.Create a fragmentYou can create a fragment from scratch in the UI Designer home page.  Click on the generic Create button.  Choose the type Fragment  Type a fragment name  Click on the Create button to confirm  The fragment editor opens.You can also convert a plain container used in a page, a form, a layout or a fragment into a fragment:  Select the container in the page editor.  Click the link Save as fragment in the properties panel.  Specify a name.  Click the Save button.  The Fragment editor opens.Update a fragmentFragments are listed in the Fragments tab of the UI Designer home page. Click the name of a fragment to open it in the Fragment editor.You can also update a fragment in the page editor when you are editing a page, form or layout that uses the fragment. Select the fragment in the Page editor and click the Edit fragment button. The changes you make to the fragment are applied everywhere the fragment is used, not just the page you are currently editing.Variables and fragmentsA fragment has its own variables, but can also expose variables to the pages that include it.When you add a variable to a fragment, specify whether the variable will be exposed in the pages, forms or layouts using this fragment.  If a fragment variable is not exposed, the variable data is specific to the fragment.  If a fragment variable is exposed, it can be bound to a variable of the page, layout or fragment that embeds the fragment.For example, take a fragment called “MyFragment”. This fragment has two variables, one exposed (exposedVariable) and the other not (notExposedVariable). When you add this fragment to a page in the Page editor, you can bind the exposedVariable with a variable defined in the page.At runtime, when fragment and page variables are bound, data changes can be made in either the page or the fragment.If several fragments expose a variable and these variables are linked to the same page variable, if you change the variable in the page, or in one of the fragments, the change is made in all the fragments.Export a fragmentYou can export a fragment from the UI Designer home page. The fragment is exported as a zip file that contains the following:  an HTML page  a resources folder containing  CSS files  JavaScript dependencies  Widget files used by the fragment (a widget is an Angular JS directive)  any sub-fragments that are used  You can use the HTML page as it is. You can also update the code outside the UI Designer. However, if you make changes that are not compatible with the UI Designer, you will not be able to import the fragment back into the UI Designer.Import a fragmentYou can import a fragment that has been created in the UI Designer into the same or another UI Designer. The format of the imported zip file must be the same than the zip file created during an export, and no modification should have been made to the html, CSS, or JavaScript codes.",
      "url": " /bonita/7.7/application-and-process-design/page-and-form-development/ui-designer/fragments",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-7-application-and-process-design-page-and-form-development-ui-designer-migrate-a-form-from-6-x": {
      "title": "Migrate a form from 6.x",
      "content"     : "Migrate a form from 6.xAttention: By the end of 2018, V6 GWT forms won’t be available for modeling or execution.We strongly advise you to switch to forms created with Bonita UI Designer to benefit from technologies like html/AngularJS and use contracts in tasks and process instantiation.Although a form created with Bonita 6.x will work with Bonita 7.x, you are recommended to migrate your 6.x forms and process definitions to take advantage of the new features, namely live update of a form. There is no specific tooling to assist with migration, and you do not have to migrate all apsects of a process definition at the same time.You can take a staged approach, testing that your process continues to behave as expected after each change.The most efficient sequence for migrating a process and its forms to benefit from Bonita 7.x features is as follows:  BDM: create your business data model. If you already have a BDM from 6.x, no change is needed.  Business data: if you have created a new BDM, populate your business data database by importing it from where it was previously stored (process data or external data).You can do so with a process that uses a connector to retrieve external data and an operation using the REST API to store the business objects.  Process: check that the process runs with the business data, and update it if necessary.  Contracts: define contracts based on your business data, for process instantiation and for each human task.  Forms: generate the forms from the contracts into the UI Designer, then update them as needed.  In the Studio, at pool level and for each human task, go to the Details panel, Execution tab, Form section, and change the option from Legacy (6.x) to UI Designer. You can also generate them in another development environment. In this case, choose External URL option.When you export a diagram, forms created in the UI Designer are embedded by default in the .bos and .bar files, to share between Bonita Studios (.bos) or install in a Bonita Portal (.bar), so you don’t need to manually export them and import them one by one.",
      "url": " /bonita/7.7/application-and-process-design/page-and-form-development/ui-designer/migrate-a-form-from-6-x",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-7-application-and-process-design-page-and-form-development-ui-designer-multi-language-pages": {
      "title": "Multi-language pages",
      "content"     : "Multi-language pagesNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.In the Bonita Subscription editions, the UI Designer includes a mechanism to add translations for page, layout and forms elements, to support multi-language applications.The text displayed in the preview and at runtime adapts to the locale or browser language automatically. The UI Designer itself, that speaks to developers, not end-users, is displayed in the language of your Bonita Studio.The Preview window is displayed in the language set for Bonita Portal, since it speaks to the end-users.You can translate all text strings displayed on a page, layout or form: the labels, the placeholders, the available values of a list, and the date format of the Date Picker widget. You can also translate fragments and custom widgets strings that the page, layout or form embeds.How it worksTutorial: creating a multi-language pageTranslate the textAdd languages to Bonita PortalAdd a localization asset to the pageTranslate contents in custom widgetsTranslate content in fragments (Subscription editions)Preview the pageDeploySharing translationsHow it worksEach page has a localization asset that contains the keys and the translations for all strings and all languages that the page supports, one section by language.The asset is a file, localization.json. Each language is identified by the ISO 639 language attribute (for example, fr-FR, es-ES). Open the default localization.json asset to see how this file must be formatted, and to update it with the needed strings and translations.To use a localization asset, replace the default localization.json file with an updated localization.json file of the same format containing all the keys as well as the translations into the target languages. The format of file must be:{&quot;ISO 639-1 code for language-A&quot;:   {&quot;english key&quot;:&quot;translated key for language-A&quot;,&quot;english key2&quot;:&quot;translated key2 for language-A&quot;, ...   },&quot;ISO 639-1 code for language-B &quot;:   {&quot;english key&quot;:&quot;translated key for language-B&quot;,&quot;english key2&quot;:&quot;translated key2 for language-B&quot;, ...   }  ...The code that specifies a language in localization.json must be the same as the code in the .po files used to add the language to the Portal.By default, US english strings are used as the keys for translation. But you could use any code or language for the keys, and create an en-US section of translations to consider english as any other translated language. That option allows to freely change english strings with no duplication on every other language section.In production, a page, layout or form is displayed in the language specified by the BOS_locale cookie value. This value must match exactly one of the language codes in the localization.json asset. The BOS_locale value is set by selecting a language in Bonita Portal or in a custom widget. If BOS_locale is not set or its value does not match a language code, the browser language is used. If neither the BOS_locale nor the browser language matches a language code in localization.json, the untranslated keys are displayed in the page.Tutorial: creating a multi-language pageThis tutorial explains how to create a multi-language version of the Travel Tool application page from the getting started tutorial, adding french and russian text to the page, initially developped in US-english. It assumes that you have already created the Travel Tool page following the instructions in the getting started tutorial.French is supported by default in Bonita, along with US-english and Spanish. Russian is not.Translate the textThe first step is to create a list of all the english text strings used in the page. These strings are the keys for translation. For this simple page, you could create the key list by hand from the text that is visible in the Page editor.However, to be sure that you identify all the items that need to be translated, export the page zip file, and edit the page.json file to retrieve all the text strings. In addition to the text strings, look for any date format strings and URLs that could contain a locale attribute.For the Travel Tool application page, this is the set of text strings to translate:Travel ToolThis page lists your pending and approved travel requests.My pending requestsDeparture dateNumber of nightsHotel neededDestinationReasonCreate new travel requestMy approved travel requestsyesnoNow translate the text outside of Bonita, in any suitable translation editor, or spreadsheet.Add languages to Bonita PortalBefore you can view a page in a language, that language must be supported for Bonita web applications. French is one of the default languages supported, so you just need to add support for Russian. To do this, add Russian from the Community translations to your Bonita Portal. Make sure that you add both the Community and Subscription files. Then restart your Bonita Studio, start the Portal, and change the language to Russian to check that it is available.Add a localization asset to the pageCreate a localization.json file in the format shown above, containing the french and russian translations of the page text.The language identifier must match the language identifier in the .po files containing the Portal translations.Use an online Json checker to make sure there are no format errors in the file. The file will look something like this:{  &quot;ru_RU&quot;: {&quot;Travel Tool&quot;: &quot;Путешествия Инструмент&quot;,&quot;This page lists your pending and approved travel requests.&quot;: &quot;Эта страница содержит список ожидающие и одобренные запросы в поездке.&quot;,&quot;My pending requests&quot;: &quot;Мои ожидающие запросы&quot;,&quot;Departure date&quot;: &quot;Дата отбытия&quot;,&quot;Number of nights&quot;: &quot;Количество ночей&quot;,&quot;Hotel needed&quot;: &quot;Отель нужны&quot;,&quot;Destination&quot;: &quot;Hазначения&quot;,&quot;Reason&quot;: &quot;причина&quot;,&quot;d/M/yyyy&quot;: &quot;dd/MM/yyyy&quot;,&quot;Create new travel request&quot;: &quot;Создать новый запрос пути&quot;,&quot;My approved travel requests&quot;: &quot;Мои запросы туристические утвержденные&quot;,&quot;yes&quot;: &quot;Да&quot;,&quot;no&quot;: &quot;Нет&quot;  },  &quot;fr-FR&quot;: {&quot;Travel Tool&quot;: &quot;Gestionnaire de déplacements&quot;,&quot;This page lists your pending and approved travel requests.&quot;: &quot;Cette page affiche la liste de vos demandes de déplacements en attente et de celles qui ont été approuvées.&quot;,&quot;My pending requests&quot;: &quot;Mes demandes en attente&quot;,&quot;Departure date&quot;: &quot;Date de départ&quot;,&quot;Number of nights&quot;: &quot;Nombre de nuits&quot;,&quot;Hotel needed&quot;: &quot;Besoin d&#39;une réservation d&#39;hôtel&quot;,&quot;Destination&quot;: &quot;Destination&quot;,&quot;Reason&quot;: &quot;Motif&quot;,&quot;d/M/yyyy&quot;: &quot;dd/MM/yyyy&quot;,&quot;Create new travel request&quot;: &quot;Créer une nouvelle demande de déplacement&quot;,&quot;My approved travel requests&quot;: &quot;Mes demandes approuvées &quot;,&quot;yes&quot;: &quot;oui&quot;,&quot;no&quot;: &quot;non&quot;  }}You can download a copy of this localization.json file for testing. for testing.In the UI Designer, import this file as an asset of the travel tool page. This will replace any existing localization.json file. Save the page.Translate contents in custom widgetsIn the custom widget editor, use the the uiTranslate filter or the ui-translate directive to indicate the content to translate.   Then add the strings to the localization.json file of each page, layout and forms using it. See Custom widgets section for more information.Translate content in fragments (Subscription editions)The strings to translate in a fragment must be added to the localization.json file of each page, layout or form using the fragment.Preview the pageNow preview the page in each language. To do this, you need to modify the language used for Bonita web applications, which you do by setting the Portal language from the Portal Settings menu.Check the translated versions of the page, and update the translated text if necessary. To update the translations, edit your localization.json file and then upload it again. Adjust the page layout if necessary to allow for language differences. Your multi-language page is now complete, ready to be included in an application and deployed.Note: Always update the localization.json file as an asset and then export your page or form from the UI Designer to make it an available resource. If you edit the localization.json file in the file system and zip the page or form from there, the updated translations will not be taken into account.DeployTo put a multi-language page into production in an application, follow the same steps as for a single-language page: upload the page to the Portal and then add it to the application. You can follow the steps for building the application from the getting started tutorial.After deployment, an application user will see the page in the language configured for their Bonita web applications. A user can set this by selecting the language in the Bonita Portal. If the selected language is not supported by the page localization.json file, the untranslated keys are displayed.Sharing translationsDepending on the applications and processes you have, there could be some strings that are common to many pages or forms. If this is the case, consider using a single localization.json for all pages. You still need to attach it as an asset to each page or form, but it could make your translation process more efficient by avoiding duplication. Alternatively, your translation management tools might provide a mechanism for sharing the translations required for various pages and forms, which would enable you to extract the keys and translations required for a page or form and construct the .json file.",
      "url": " /bonita/7.7/application-and-process-design/page-and-form-development/ui-designer/multi-language-pages",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-7-application-and-process-design-page-and-form-development-ui-designer-ui-designer-overview": {
      "title": "UI Designer overview",
      "content"     : "UI Designer overviewThe UI Designer is a graphical development environment for creating pages and forms for a Bonita application. It is a web-based tool that is launched from Bonita Studio.A page is defined in HTML extended by the AngularJS JavaScript framework. Use the UI Designer to create and update pages for business applications, forms to start process instances or execute human tasks, and application layouts that apply to all pages of an application.  Create pages directly in the Bonita UI designer.  Start form design in Bonita Studio from the appropriate contract.  Create layouts by duplicating the default layout available in the Bonita Portal resources and then updating it.You can import an existing page, form, or layout to edit, or duplicate existing ones.Page structureIntegration with Bonita PlatformUI Designer target users&#39; needed skillsUI Designer with collaborationPage structureA page (but also a form or a layout) is constructed as a vertical arrangement of rows.A row is a mechanism for aligning widgets, from top left to bottom right. When you create a new, empty, page, it contains a row. A row occupies the whole width of the page, which is considered to be 12 units. The actual width is calculated when the page is displayed. The rows are indicated by a thin pale grey rectangle on the left side of the whiteboard.To move or delete a row, position your mouse in the row, and the row toolbar is displayed.Use the controls in the toolbar to move the row up or down, or to delete it.In a row, you can add containers and widgets.Each widget accounts for an item of information to be entered or displayed in a page. To add a widget to a page, drag it from the palette on the left of the screen and drop it into the whiteboard. It must be adjacent to another widget (or to the top of the page for the first widget).You cannot leave empty space between widgets. If you try to drop a widget that is not adjacent to another, the drop will fail.When the widget is dropped, you need to specify the widget width, up to a maximum of 12 units (default value).There is a set of standard widgets. If these do not meet your needs, you can define a custom widget.There are also some structure widgets called containers, which you can use to structure a page.There are different types of containers:  The plain container is invisible to page users. It is useful during page development as a way to manipulate or configure multiple widgets or iterate over elements to display.  The tab container is used to create tabs in a region of a page. The tabs are visible to page users, who can switch between tabs by clicking the tab name.Once a container is added to the page, it contains a row. Therefore, widgets can be dropped in a container row or directly on a whiteboard row. In this example, you can see a container with four rows.The behavior of a page is determined by the widget properties. Any property you configure for a container is applied to all widgets in the container unless you override it with a widget-specific value.In the Enterprise, Performance, Efficiency, and Teamwork editions, you can also use fragments, which are groups of widgets. They allow to reuse the same group of widgets with the same behavior in several pages or forms.The UI Designer generates standard HTML application code, based on AngularJS. Export pages if you want to further customize them in your favorite web development environment. Note that once customized, you can not reimport them in the UI Designer.Integration with Bonita PlatformThe UI Designer is part of the development tools integrated in Bonita Studio. It runs in a tomcat instance managed by Bonita Studio. This tomcat instance is separated from the engine/portal tomcat instance.To use a page in a business application, export it from the Bonita UI designer, import it as a portal resource, and from the relevant application, add it to the list of pages and then insert it in a navigation menu.To use a form in a process, map it in the Bonita Studio to the relevant process or human task. It will be automatically packaged in the .bar archive ready to deploy in the Bonita Portal.In the Subscription editions, you can update a form in production, by exporting a new version of the form from the Bonita UI designer, importing it into the relevant process in the portal, and then mapping it to the relevant task or process start event.To use a layout in a business application, export it from the Bonita UI designer, import it as a Bonita Portal resource, and map it as the layout of the relevant application.UI Designer target users’ needed skillsThe UI Designer is intended for web developers creating pages and forms that will be part of a BPM application. It requires a good understanding of JavaScript and CSS.If you are a business analyst, you can use the UI Designer to create the page structure and define basic behaviors. However, most properties of a page are defined using JavaScript.UI Designer with collaborationPages which have been created with a version of bonita older than 7.7.0 have a UUID-like identifer.With version 7.7 and the improvements made for the collaboration features, the Id of created artifacts is now more human readable and understandable. This Id is now equal of the name. This change also applies to fragments in subscription editions.For pages only, if the id is already taken by another page, it is suffixed with a number (same behavior as in operating system file browsers).For example:  Create a new page named “myPageExample”.  Create another page with the name “myPageExample”.Following the second creation, when you are redirected to the editor, you can see in the URL that the id is in fact myPageExample1.However, it is a good practice to use a unique name for your page.No migration is performed for existing artifacts (pages and fragments).If you want to benefit from readable Ids for your existing artifacts, you need to rename your artifacts from the homepage or the editor. The link with the process in Bonita Studio will be kept.If your repository is under version control and you rename an artifact, you could loose the history of the artifact’s resources depending on your version control system. If you use git, “git-log –follow” allows you to keep track of moved files.",
      "url": " /bonita/7.7/application-and-process-design/page-and-form-development/ui-designer/ui-designer-overview",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-7-application-and-process-design-page-and-form-development-ui-designer-variables": {
      "title": "Variables",
      "content"     : "VariablesVariables is a key concept of the UI Designer. They define page, layout, form, and fragment behavior, they are used to fetch external resources, to manipulate and process information, and much more. It is important to understand how to define and use variables in those artifacts, and how the data contained in the variables works when combined with widget properties. Unless otherwise stated, we will use “page” as the generic for page, layout, form, and fragment.There are several types of variables:  Static  String  JSONDynamic  JavaScript Expression  External API  URL parameter  Evaluation cycleExternal APIJavaScript expressionUsing a variableIn Bonita formsEvaluation cycleString and JSON are initialization types. Variables with these types are used at page data model instantiation and their values do not change subsequently.Expression, external API and URL parameter variables are dynamic. They are evaluated every time something happens on the page, such as when receiving data or on a user interaction. The call of an External API variable is triggered every time the URL of the resource it points at changes.External APIExternal API variables are used to fetch data from outside the page. This is typically a REST API. The call to the specified URL is done using an HTTP GET request. The result is stored in the page data model. You can parameterize the URL construction with other data using `` syntax. You can retrieve information using the Bonita REST APIs.Here are some examples:  Get the id of the current user - API URL:../API/system/session/This variable is evaluated every time the value of userId changes. Also, if userId is not yet defined then the call is not triggered.  Retrieve the taskId:API URL: ../API/bpm/humanTask/Retrieve a business object associated with a process instance:API URL: ../API/bdm/businessDataReference//Retrieve business data using the reference in the context when building a form:API URL: ../  JavaScript expressionAn JavaScript expression variable is a JavaScript function. During the evaluation, the function can use the $data variable, which provides access to the page data model. For example:var result = $data.expenses * 2;return result;An expression often relies on other variables as dependencies. When one of these variables changes, the expression is reevaluated and the previous value is overwritten. For example, create a login expression variable: return $data.firstname.toLowercase() + &#39;-&#39; + $data.lastname.toLowercase(). Its dependencies are the two variables firstname and lastname. Create two input widgets “First name” and “Last name” bound the two variables, and a text widget “Login” to display the result of the expression. When the user fills out the two input fields, the expression is updated. If the login value is manually edited before the user fills out the fields, then its value is overwritten.Using a variableA variable is used with a widget. There are many ways to use a variable in widget properties:  In a property containing text or HTML to be displayed in a widget, you can use the syntax __ in the content to make it dynamic content. For example, you could display the user’s name in a welcome message.  In the case of user input (for example the Value property of a text input) the variable value is used both to set the initial value and retrieve the user input.A binding is dynamic, so every time the value of a variable changes, the whole data model is re-evaluated and the UI is updated.In Bonita formsOne of the goals of the UI Designer is to enable you to build forms for process instantiation and human tasks execution. The contract eases the decoupling between the user views and the process. When a form is submitted for process instantiation or for human task execution, the UI Designer sends data to fulfill the contract.To ease the definition of the form data to send back to the process, when you create a form from the Bonita Studio, the UI Designer generates the following variables:  formInput. It is a JSON object. Its structure is defined by the contract inputs and the attributes are initialized with default values. It could be used to set initial values for form fields. You can set the values in formInput either by editing the default values with constants (useful for test and debug) or with values from an object in an external source that has the same model (such as with a BDM external API). You can also set the initial values of a form from some other source without using formInput. However, you will then have to edit formOutput manually.  formOutput. It is a JavaScript expression returning an object. The object structure matches the contract requirements and it is filled with formInput by default. On Submit, values entered or modified by the user and aggregated in the formOutput object (as defined by the Data sent on click property of the Submit button) are submitted to the process or task to fulfill the contract.  taskId. It is the id of the current BPM task. You can use it as a BPM API parameter.  context. It is an External API that provides references to all business variables and documents in the process instance. To retrieve a business variable instance, create an External API variable with value ../.",
      "url": " /bonita/7.7/application-and-process-design/page-and-form-development/ui-designer/variables",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-7-application-and-process-design-page-and-form-development-ui-designer-widget-properties": {
      "title": "Widget properties",
      "content"     : "Widget propertiesA page is constructed from widgets. The behavior of a widget is determined by the its properties. Any property you configure for a container is applied to all widgets in the container unless you override it with a widget-specific value.Specifying a widget propertyConstantDynamic - ![Expression icon](images/images-6_0/UID-property-bond-expression.svg)Bidirectional bond - ![Dynamic icon](images/images-6_0/UID-property-bond-chain.png)Interpolation - ![interpolation icon](images/images-6_0/UID-property-bond-interpolation.png)General widget propertiesWidthCSS classesHiddenMigrate a page from 7.0.0 and 7.0.1Specifying a widget propertyTo specify the properties of a widget, select the widget and go to the properties panel on the right of the whiteboard. A property value can be constant, dynamic, a bidirectional bond, or an interpolation.Note: In versions 7.0 and 7.0.1, a property value was specified as either a constant or an expression, but all values were in fact treated as dynamic.ConstantA property that requires a constant value is presented in the Properties panel as a radio button set, drop-down list, or number selector (for the Width property). Select the required value.Dynamic - Use a dynamic value field to specify a constant (the default) or an expression. Click the expression icon fx to switch from constant to expression. Click the constant icon X to switch from expression to constant. An expression can include a variable to make the property value dynamic, or can simply be the name of a variable. You can apply a filter to a variable value using a pipe. The binding to thevariable is a read. If you want to write to the variable, use a bidirectional bond.Examples:  Define a condition for widget visibility, userAge &amp;gt; 18  Define table headers as the value of a variable: myArrayVariable  Apply a filter to the value of a variable: _selectedUser  json_Bidirectional bond - Use a bidirectional field to specify a read-write binding between the property value and a variable.Interpolation - Use an interpolation field to enter text to display in the widget. The text can include variables that are interpreted using AngularJS interpolation. When the page is displayed, the variables are replaced by the interpolated values. Specify a variable as a simple expression enclosed in double braces, using the same format as for a dynamic value field.Example: I’m sorry, __. I’m afraid I can’t do that.General widget propertiesSome general properties are common to all widgets except containers.WidthSpecify the width of the widget relative to the container it is in, or to the page if it is not in a container. A widget can occupy one to 12 units. The actual widget widths are proportional, automatically adjusted for the device display.In the Enterprise, Performance and Efficiency editions, you can set a different value for the width property for each device type. Select the target device type in the top bar, then set the value of the Width property.Example: A form has three fields, First name, Last name, and Membership number. On a mobile device, you want the fields to occupy the maxiumum width of the screen, each one of a separate line. On a tablet device, you want the first name and last name to be on the same line but the membership number to be on the line below. For laptop and desktop devices, you want all three fields to be in the same line. Set the width properties as follows:   Mobile  Tablet  Laptop  Desktop  First name  12  6  4  4  Last name  12  6  4  4  Membership number  12  12  4  4  When you preview the form for each of the device types, you see the following:CSS classesFor each widget, you can associate one or more CSS classes (use a space-separated list for multiple classes). By default, the Bootstrap CSS library is available so you can add any CSS class that it contains.HiddenThis property controls whether the widget is hidden. Bind this property to a variable. The value of the variable determines whether or not the widget is displayed. You can use this to control conditional display, for example when a widget becomes visible when the user enters a certain value in a form.Migrate a page from 7.0.0 and 7.0.1In Bonita 7.0, property values were all dynamic. Pages and forms that were created with 7.0 and are already deployed will continue to work with 7.1. You should note that when you import a 7.0.0 or 7.0.1 page or form into 7.0.x later versions or the 7.1 Bonita Studio or UI designer, widgets properties stay dynamic.",
      "url": " /bonita/7.7/application-and-process-design/page-and-form-development/ui-designer/widget-properties",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-7-application-and-process-design-page-and-form-development-ui-designer-widget-use-examples-repeat-a-container-for-a-collection-of-data": {
      "title": "Repeat a container for a collection of data",
      "content"     : "Repeat a container for a collection of dataOverviewSimple collectionModifiable simple collectionStructured collectionNested collectionsOverviewThe content of a container can be included multiple times in a page, once for each element in a collection of data. The content is repeated as many times as necessary to display all the data in the collection.A collection is an array of data referenced by a variable. The UI Designer provides some built-in variables that you can use to specify the collection or an element within it:  $index: the index of the current iteration of the collection (counting from zero)  $item: the element of the current iteration  $collection: the current collection (not available in releases earlier than 7.1.3)The rest of this page contains some examples of how to repeat the content of a container over a collection.Follow the examples in sequence, because each one builds on the previous example.Simple collectionThis section explains how display the elements from a simple collection in a repeatable container.In this example, the collection of data is a list of fruits. You want to display this list in a table and enables users to modify the name of a fruit. To create the table in a page:  In a UI designer page, create a variable to specify the collection, which must be an array. In a typical application, a collection is defined by a JavaScript or External API variable, but for easy page development, you can use a fixed JSON array. For this example, create a JSON variable called fruits containing [&quot;banana&quot;,&quot;apple&quot;,&quot;pineapple&quot;,&quot;cherry&quot;].  Add a container widget to your page and bind the variable fruits to the Repeat contents property.  In the container, add an input widget with the following properties:  Bind the Value property to $item.  Set the Label property to Fruit type.  Set the Label position property to Left.Check the Preview, which should look something like this:A user can modify the name of a fruit by typing in the input field.Modifiable simple collectionThis section shows how to update the container that you defined in the previous section, to enable the user to add an element to a collection or to remove an element. Adding an element adds a repeat of the container content. Removing an element removes the repeat.  In the page, add a button widget above the container (not in the container) with the following properties:  Label: Add a fruit  Alignment: right  Style: success  Action: Add to collection  Collection: fruits  Add: Last, to add the new item at the end of the collection  Value to add: leave this empty because there is no specific structure to addIn the container, add a button widget on the same line as the input widget labelled Fruit type, with the following properties:  Label: Remove this fruit  Alignment: right  Style: danger  Action: Remove from collection  Collection: $collection, to point to the current collection, fruits  Remove: Item, to remove the current item related to this line  Item to remove: $item, to reference the current elementCheck the Preview, which should look something like this:A user can now add a new fruit or remove a fruit, dynamically changing the collection.Structured collectionThis section explains how to update the container to display a structured collection using repeated content. The previous examples used a simple array of names of fruits, where each item was a primitive String type. This example uses a more complex array with a list of producing countries nested within each item in the list of fruits. It has the following structure:{   &quot;fruit&quot;:&quot;fruit name&quot;,   &quot;producingCountries&quot;: [&quot;country1&quot;,&quot;country2&quot;] }  Create a new variable, fruitsProducingCountries, with the following value:[ {   &quot;fruit&quot;:&quot;banana&quot;,   &quot;producingCountries&quot;: [&quot;India&quot;,&quot;China&quot;] }, {   &quot;fruit&quot;:&quot;apple&quot;,   &quot;producingCountries&quot;: [&quot;China&quot;,&quot;USA&quot;] }]Select the container and change the Repeat contents property so that it binds to fruitsProducingCountries instead of fruits.  Select the input widget that displays the fruit and change the Value property to bind to $item.fruit.  Select the Add fruit button and change the Collection property to bind to fruitsProducingCountries.  Check the Preview. You see the same result as in the previous example. The country information is present in the data collection but is not displayed. You can still change the name of a fruit, and add or remove an entry.Nested collectionsThis section explains how to update the container configuration to handle a structured collection that includes nested structures, to enable a user to add or remove elements at any level of the collection. The updated page displays the producing countries for each fruit. A user can rename, add, or remove a fruit, and add or remove a producing country for a fruit.  Add a button widget in the existing container, below the row that contains the Fruit type input widget and the Remove this fruit button. Configure the button widget properties as follows:  Label: Add producing country  Alignment: left  Style: success  Action: Add to collection  Collection: $item.producingCountries, to specify the element of the data structure to which the element is added  Add: Last, to add the new item is added at the end of the collection  Value to add: leave this empty because there is no specific structure to addAdd a new container widget inside the existing container below the Add producing country button.  To repeat the content of this new container for the collection of producing countries associated with each fruit type, bind the Repeat contents property of this container to $item.producingCountries.  Add an input widget in the new container to display the producing countries. Set the widget properties as follows:  Label: Producing country  Label position: left  Value: bind to $item, to specify the current item within the collection producingCountries.To enable the user to remove a producing country item, add a button widget in the container in the same row as the Producing country input widget. Configure the button widget properties as follows:  Label: Remove this producing country  Alignment: righ  Style: danger  Action: Remove from collection  Collection: $collection, to specify the current collection, producingCountries. (You could also specify the collection explicitly as fruitsProducingCountries.producingCountries, but for better maintainability this is not recommended because if you specify the collection explicitly and subsequently change the collection name or the parent collection name, you need to remember to update this property setting)  Remove: Item, to remove the current item related to this line  Item to remove: $item, to specify the current elementCheck the Preview, which should look something like this:You can rename, add, and remove fruits, and add or remove countries, dynamically changing the structure of your collection.",
      "url": " /bonita/7.7/application-and-process-design/page-and-form-development/ui-designer/widget-use-examples/repeat-a-container-for-a-collection-of-data",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer, Widget use examples"
    }
    ,
  

    "bonita-7-7-application-and-process-design-page-and-form-development-ui-designer-widgets": {
      "title": "Widgets",
      "content"     : "WidgetsThe UI Designer is a tool for creating pages and forms to use in a BPM application. A form is mapped to process instantiation or to a human task and must fulfill a contract. To gather the inputs that will be sent to the contract, it embeds input fields and a submit button. A page is not mapped to any part of a process, it displays business information and gives access to forms or action buttons that send information to the process. Besides this, there is no difference between a page and a form, so the procedure for designing them is the same. This documentation uses the term page for both pages and forms, unless otherwise stated.Page structureContainersAdding a widget to a rowAdding a rowRepeat contentSave as fragmentTab container widgetForm container widgetInput widgetsPlain input widgetText area and rich text area widgetsAutocomplete widgetSelect widgetCheckbox widgetChecklist widgetRadio buttons widgetDate picker widgetDate time picker widgetFile upload widgetButton widgetSave button widget (Subscription editions)Display widgetsTable widgetData table widget (Subscription editions)Image widgetChart widget (Subscription editions)File viewer widget (Subscription editions)Rich Text Area widget (Subscription editions)Page structureA page consists of widgets that are arranged in rows, and optionally, containers. The UI Designer provides a set of default widgets that you can use to design a page. The default widgets are available from the palette panel, which is on the left side of the Page editor. A widget has properties that control how it appears and how it is used. There are some general properties that all widgets have, and some properties that are specific to the widget type. You can also create custom widgets.Each widget in the palette has a description. To show a widget description, just roll over the widget in the palette.ContainersA container is a widget that contains other widgets. You can create nested containers. A typical use for containers is to control the main layout of your page. For example, if you want to create a two-column layout, you will start your page by adding two containers on the same row, each one spanning six columns of the page. A page does not need to have a container, but it is useful.By default, a container contains one row, where you can drop component widgets or containers. You can also make the page layout dynamic by repeating a container to display a collection of data.Adding a widget to a rowIf the row has some space at the end, the widget will fill the remaining empty space in the row. If the row has no empty space, the dropped component will be automatically resized to fit a row width.Adding a rowAccording your needs, a container can have any number of rows.To add a widget in a new row, a container has two dropzones where you can drop a widget from the palette. These dropzones are located at the top of the container and at the bottom of the container. When your mouse hovers the upper or lower border of a widget in a row, the dropzone becomes visible, as shown in these examples:Example 1: add a title widget in a new row above a paragraph widget:Example 2: add a paragraph widget in a new row below a title widget:When you drop a widget in one of these two zones, a new row is automatically created.Repeat contentA container can repeat the content dynamically. This is useful if you need to repeat a set of components for each element in a data collection. Bind the Repeat content property to an array variable. To specify the current element of the collection, use $item.This is useful if you want to display some property of the current element.Save as fragmentIf you are using the Enterprise, Performance, Efficiency, or Teamwork edition, you can save any container as a fragment. This enables you to reuse the set of widgets in other pages.Tab container widgetUse the tab container to structure a page using tabs. To edit a tab name, select the corresponding tab to display its properties.Each tab is a container widget.Form container widgetUse the form container to enable form validation for input widgets. The form container also exposes a local $form which is the AngularJS form object associated to the form container. In the Bonita Studio, if you define a contract for the task or process and click on the UI Designer icon, the generated form already contains a form container to embed default input widgets to collect the information that need to be passed to the contract to be verified. You can then define the validation you need on the input.For example, you can bind the button’s disabled property to $form.$invalid to prevent user from clicking the button, until the form inputs are valid.Input widgetsUse an input widget to enable a user to provide input. In addition to the general widget properties, all input widgets have the following:  A Required property which prevents button from being clicked when put inside a form container  A Read-only/disabled property which prevents the user from modifying the value  A Label (which can be hidden)  A property to specify whether input is mandatory  A Value property that is used to capture the value entered by the user.The sections below describe the available input widgets.Plain input widgetUse the input widget on a form or page. There are four types of input:  text: a free-form text field  email: an email address  number: a decimal or integer number  password: like text but each character is replaced by an asterisk.Text area and rich text area widgetsUse the text area input widgets on a form or page to collect large text.The rich text area allows the user to format and style their input, add images, links, and so on.You can customize the toolbar for the end-users by selecting options among the available values of the toolbar properties.Autocomplete widgetUse an autocomplete widget to offer the user a list of possible values based on data entered in the field. For example, in a firstName field, if the user types chri, the values chris, christine, christian, christiane are proposed. The user selects the correct value. To define the available values, bind a data source to initialize the suggestions. For suggestions that are an array of objects, you can specify a displayed key to identify the attribute to show as a suggestion in the widget. The value must be bound to a variable that will hold the selected suggestion.Select widgetUse a select widget to offer the user a drop-down list of values. The user selects the required value.The available values property is used to populate the list of available values. Alternatively for simple data, you can provide a comma-separated list of values (for example, red, green, blue).You can also use data binding and specify a variable to populate the list of available values. In this case, specify a label key, which identifies the attribute to be displayed in the widget.Checkbox widgetUse a checkbox widget to create a unique checkbox. The value property will be true or false, depending on the checked value of the checkbox.Checklist widgetUse a checklist widget to create a set of checkboxes for the available values, from which the users picks any number of values. To define the available values, you can provide a comma-separated list for simple values (for example: red, green, blue), or bind to a variable that holds an array of values.If the values are JavaScript objects, you can also specify a displayed key that identifies the attribute to be used to label the checkboxes and a returned key so selected value will return only a specific key rather that the whole corresponding object.The selected values are captured through the Selected values property.Warning: Do not bind the Selected values property to a specific item from the available values collection because selected values will be updated each time you modify a checkbox. Do not bind the Selected values to the Available values collection, because this could lead to unexpected behaviors.Radio buttons widgetUse a radio button widget to create a set of radio buttons for the available values, from which the user picks one value. To define the available values, you can provide a comma-separated list for simple values (for example: red, green, blue), or bind to a variable that holds an array of values.If the values are JavaScript objects, you can also specify a displayed key that identifies the attribute to be used to label the radio buttons and a returned key so selected value will return only a specific key rather that the whole corresponding object.The selected value should be bound to a variable that will hold the data for the chosen radio button.Date picker widgetUse a Date picker widget to display a calendar from which the user can select a date or set a date manually (e.g., a date of birth).To select a date and a time (e.g., to schedule a meeting), use the Date time picker widget instead.The Date picker widget supports the following types for its Value property as input:  ISO 8601 String variables (with or without time information)  Date objects  Long number values (Milliseconds since epoch)However, the output of the widget is always a Javascript Date object. So it will change the type of the variable bound to the widget Value to a Date object when the user selects a date. This is required in order to ensure backward compatibility for pages designed with older UI Designer versions.  When sent in the JSON body of a request, the Date object is serialized into an ISO 8601 formatted String variable with the time set to midnight UTC (e.g., 2016-12-31T00:00:00.000Z).You can configure the displayed date format using a pattern, using yyyy for year, MM for Month, dd for day.Use the Today button to select automatically and quickly the current day.For more information about supported formats, read the Angular documentation for date filter.For a detailed example using the Date picker widget, you can consult the following Howto: Manage dates and times in BDM and User Interfaces.In the Subscription Edition,  the calendar can be localized with the usual localization mechanism (localization.json file).Date time picker widgetUse a Date time picker widget to display a calendar from which the user can select a date and a time or set them manually (e.g., to schedule a meeting).To select only a date (e.g., a date of birth), use the Date picker widget instead.Date and time can reflect the user time zone (e.g., a meeting day and time) or be absolute, identical everywhere (e.g., opening hours of a store somewhere). This is controlled by the property Handle time zone.The input/output of the widget (its Value) is an ISO 8601 formatted String variable (e.g., “2016-12-31T16:30:00.000Z”).You can configure the displayed date format using a pattern, using yyyy for year, MM for Month, dd for day, HH or h for hours, mm for minutes, ss for seconds.Use the Today and Now buttons to select automatically and quickly the current day and time.For more information about supported formats, read the Angular documentation for date filter.For a detailed example using the Date time picker widget, you can consult the following Howto: Manage dates and times in BDM and User Interfaces.In the Subscription Edition,  the calendar can be localized with the usual localization mechanism (localization.json file).File upload widgetUse an upload widget to perform a file upload (POST) on the specified URL. Data returned by the server is stored in the value property.Button widgetUse a button widget to enable to user to trigger an action. The button can perform a PUT, POST, GET (from 7.1.3), or DELETE (from 7.1.3) request and send data to a given URL.You can use a variable to hold the resulting data after success or failure.For pages that are displayed in a task or process context, the button widget can be used to submit a form, completing the human task or starting a process instance. For form submission, you need to define only the data to send. The URL is extracted from the context.Finally, you can use the widget button to add or remove a data from a given collection.When inside a form container, the button is automatically disabled while the form is invalid.Save button widget (Subscription editions)Use the Save button widget to store data in the browser LocalStorage.For instance, to let users save the draft of the current form, bind the formInput variable of your form to the value property.A single entry will be created in the LocalStorage identified by the form URL.Whenever this form is reloaded, either by hitting F5 or browsing away and back again, the entry will be reloaded automatically from LocalStorage.Note: The LocalStorage entry will automatically be deleted when the form is finally submitted.Display widgetsUse a display widget for information that the user can read on a page. This includes titles, paragraphs, and text. For each, you can specify the text and its alignment. There are several types of display widgets:  File viewer, to display a preview of files, either Bonita documents, or external documents. Users can also download the file thanks to this widget.  Link, to embed an HTML link for navigation to an external site.  Title, for headings. You can set the level from 1 to 6.  Text, for chunks of text. Text supports basic HTML tags such a paragraph, list or image…Table widgetUse a table widget to display data in a table. In order to display the data, first define the headers property with a comma-separated list of column headings.Then bind the content to an array of JavaScript objects.Finally, provide a comma-separated list for the columns keys indicating the attribute to display in each column.To get the data from a selected row, bind selected row to a variable.Note: table widget only supports text values. HTML content passed in table data will not be rendered.Data table widget (Subscription editions)An extended table widget that provides column sorting, filtering, and paging in addition to the standard table widget facilities.Set the Data source to Bonita API to populate the data table with records from a Bonita REST API. Then enter a REST API URL in the URL property. Use the API request parameters property to pass additional parameters to the request.Supported parameters are described in the REST API Overview and in the REST API documentation for the relevant resource.You do not need to specify paging parameters (such as ?p=0&amp;amp;c=10), because the data table handles paging automatically when you use a Bonita API data source.The value of the Page size property controls how many rows are displayed in a table view, and automatically adds buttons to show subsequent pages of the table.Alternatively, you can set the Data source to Variable and use a variable definition to point ot the table content. Note that if you use a Variable datasource and an External API variable, the paging of the table content is not handled automatically.SortThe Sortable columns property enables to list the columns which allow a sorted search.Each element of this property has to match an element of the Columns key property to figure out which table column can be sorted upon.When a data table is displayed (including in the Preview), the user can click on a column heading to reorder the table rows by this column.Some fields do not support sorting but still display the sort button which is a known limitation. The ordering applies to the visible rows in the table, not to the entire table.The sort is backend when datasource is Bonita API. It is frontend, otherwise.Note: BDM APIs are not yet sortable. For other APIs, test in the preview or refer to the BonitaBPM documentation ‘REST API’ pages.FilterYou can provide a filter for users to update the displayed table to show only the rows that match the filter. To do this:  Add a widget to the page where the user will specify the filter. This can be an Input widget for free-form text, or a Select widget to choose from a preset list.  Create a filter variable in the variable panel. If you are using an Input widget, this variable has no value.  Bind the filter variable to the widget.  Bind the filter variable to the Data table widget Filter property.When the table is displayed, each time the user updates the filter, the table display is updated accordingly. The filter is applied to the table rows that are currently displayed.Note: it is only possible to filter on attributes that are searchable in the REST resource definition. To search on an attribute of a business object, make sure that the BDM contains the necessary queries.Image widgetUse an image widget to display an image. The image widget is able to display images from local assets or an image from a URL:  To use an image asset in the image widget, set the Source type property to Asset, and then enter the image name in the Asset name input field.  To use an online image in the image widget, set the Source type property to URL, and then enter the image URL in the URL input field.Note: Applies from 7.0.2Chart widget (Subscription editions)Use the chart widget to create a graphical display of data to ease understanding. This widget is based on angular-chart-0.8.1, which is based on Chart.js.For information, see the Angular chart documentation or Chart.js documentation.The widget can display several styles of chart:  For a single set of data points:  Bar  Line  RadarFor one or more sets of data points:  Pie  Doughnut  Polar area  Provide each set of data for display in a JSON array, containing numeicral values.You can enter a single array directly in the Value property, or bind it to any variable that provides an array.For a multiple set chart, bind it to any variable that provides an array of arrays, all sets having have the same length.The list of values in the Labels property must be have same length as an associated set.Charts can be customized more deeply using the Advanced options property. To specify advanced options, bind this property to a JSON variable that specifies the options.Options are specific to each chart type and are listed in the Chart.js documentation in the Chart options section for each chart style (for example, there are spacing options for bar charts).File viewer widget (Subscription editions)Use the file viewer widget to preview or download a file or a process document in any UI Designer artifact (page or form for instance). You can display a document in a modal dialog box or directly in a page.The previewable documents are limited to documents supported by the end user browser (by default pdf and images on usual browsers). Documents that are not previewable are prompted to be downloaded.Rich Text Area widget (Subscription editions)Use the rich text area widget to edit HTML formatted text in any UI Designer artifact (page or form for instance).You can add rich text area inputs for end users to create text to be exported in HTML format for integration on emails, etc.It can be prefilled with an HTML template.A options toolbar exposed to end users can be customized and localized with the usual localization mechanism (localization.json file).",
      "url": " /bonita/7.7/application-and-process-design/page-and-form-development/ui-designer/widgets",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-configuration-configuring-a-process": {
      "title": "Configure a process",
      "content"     : "Configure a processTo configure a process in Bonita Studio, open the process diagram, select the pool, and click Configure in the Cool bar.If you are using a Enterprise, Performance, Efficiency, or Teamwork edition of Bonita, you can configure a process for an environment: with the process diagram open and the pool selected, choose an environment fromthe Configuration menu in the Cool bar.The configuration wizard indicates the items that need to be configured, with a reminder in the wizard title bar for each category. Check the Display advanced configuration box to see all the items that need to be configured. Follow the instructions in the configuration wizard to complete the configuration.The following items can be configured:  Actor mapping  Connectors  Parameters  Actor filters  Process dependencies  Application dependencies  Run userAfter deployment, depending on the Bonita edition that you are using, you can update the process configuration in production for some aspects of the process.",
      "url": " /bonita/7.7/application-and-process-design/process-configuration/configuring-a-process",
      "author": "",
      "categories": "Application and Process Design, Process configuration"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-configuration-environments": {
      "title": "Environments",
      "content"     : "EnvironmentsNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.An environment is a set of configuration definitions for a project. You can configure a process for several environments. In this way, one process can run in several environments without any modification, because the information that is specific to an environment is set at configuration. In the Enterprise, Performance, Efficiency, and Teamwork editions, Bonita Studio proposes three environments, Local,  Production, and Qualification. You can also define custom environments.You can configure, run, and debug a process in a specific environment.The default environment is the one most recently selected in the Configure, Run, or Debug menus in the Cool bar.Define a custom environmentConfigure a process in an environmentRun a process in an environmentDebug a process in an environmentDefine a custom environmentTo define a custom environment for a process, open the process in Bonita Studio Enterprise, Performance, Efficiency, or Teamwork edition and select the pool. Then choose New environment… from the Configure, Run, or Debug menu in the Cool bar, enter a name for the new environment, and click OK. The new environment will appear in the  Configure, Run, and Debug menus in the Cool bar.Configure a process in an environmentTo configure a process for an environment, select the environment from the Configure menu in the Cool bar. Then use the configuration wizard to configure the process.Run a process in an environmentTo run a process from Bonita Studio in an environment, select the environment from the Run menu in the Cool bar. The process will be launched using the information configured for the specified environment.Debug a process in an environmentUse Debug in Bonita Studio to disconnect any connectors that you know cannot run successfully when you run the process in development or test mode. To debug a process from Bonita Studio in an environment, select the environment from the Debug menu in the Cool bar. Specify the connectors to be skipped, then click Debug. The process will be launched using the information configured for the specified environment but the specified connectors will be ignored.",
      "url": " /bonita/7.7/application-and-process-design/process-configuration/environments",
      "author": "",
      "categories": "Application and Process Design, Process configuration"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-configuration-manage-jar-files": {
      "title": "Manage JAR files",
      "content"     : "Manage JAR filesA JAR file is an archive container for Java code. Process and application dependencies are managed by managing the JAR files that contain the required code.For example, if your process uses a connector, the relevant JAR file must be referenced when you configure the process.The configuration dialog shows the JAR files that are known to Bonita Studio. To add a JAR file, choose Manage jars… from the Development menu.The popup shows the JARs that are known. To add a JAR, click Import and browse to the file to be imported. After the JAR file is imported, it can be used in a process.You can also access the Manage jars… dialog from the process configuration wizard.Duplicate libraries There is a problem at integration if you have several elements in your platform that use certain libraries that cannot be included in more than one classloader.Typically, this occurs when a process contains data of type Java or multiple connectors (notably with the Webservice, Alfresco, and CMIS connectors).For example, the Stax libraries, which are used in the Webservice and Alfresco connectors and for Java data cannot be loaded in more than one classloader.This problem is indicated by the following exceptions:  A ClassCastException for com.ctc.wstx.stax.WstxInputFactory or com.ctc.wstx.stax.WstxOutputFactory  A null pointer exception in BaseRequestEntity  java.lang.LinkageError loader constraint violation: when resolving overridden method org.apache.cxf.jaxb.attachment.JAXBAttachmentMarshaller.addMtomAttachment(Ljavax/activation/DataHandler;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; the class loader (instance of org/bonitasoft/engine/classloader/BonitaClassLoader) of the current class, org/apache/cxf/jaxb/attachment/JAXBAttachmentMarshaller, and its superclass loader (instance of &amp;lt;bootloader&amp;gt;), have different Class objects for the type shaller.addMtomAttachment(Ljavax/activation/DataHandler;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; used in the signature.We are aware of issues with the following JAR files (-n is a version number):  jsr181-api-n.MR1.jar (for the Webservice connector, 6.3.3 and earlier) – this is embedded in Java (since version 6) so should be removed from the dependencies of the connector  xercesImpl-n.jar (for the Alfresco connector, 6.3.3 and earlier) – this is embedded in Java (since version 6) so should be removed from the dependencies of the connector  wstx-asl-n.jar (for the Alfresco connector) – this should be placed in a shared library  geronimo-stax-api_1.0_spec-n.jar (for the Alfresco connector) – this should be placed in a shared library  geronimo-javamail_1.4_spec-n.jar (for the Alfresco and CMIS connectors) – this should be placed in a shared library  geronimo-activation_1.0.2_spec-n.jar (for the Alfresco connector) – this should be placed in a shared library  stax2-api-n.jar (for the CMIS connector) – this should be placed in a shared libraryTo avoid problems with duplicate libraries, you should always check before you build the bar file for deployment that no modules are duplicated.Click Configuration in the Cool bar, and check in the Process dependencies and Application dependencies that there are no duplicate .jar files.If you build a bar file for deployment that contains several processes, you need to check there is no duplication between processes.",
      "url": " /bonita/7.7/application-and-process-design/process-configuration/manage-jar-files",
      "author": "",
      "categories": "Application and Process Design, Process configuration"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-configuration-managing-dependencies": {
      "title": "Manage dependencies",
      "content"     : "Manage dependenciesA dependency is an external code module, not provided in Bonita, that is used by a process. This page explains how to manage dependencies usingBonita Studio, so that when you build a process for deployment, all the dependencies are met.Dependencies are primarily managed through the Development menu of Bonita Studio. This makes the external module available for all processes.You can also import a dependency when you configure a process, but in this case, it is only available for the process you are configuring.From the Development menu, you can manage:  Connectors  Actor filters  Data types  Business data model  Validators  Scripts  Other jar filesTo specify the dependencies for a process, click Configure in the coolbar. You can then define Process dependencies and Application dependencies.  Process dependencies are modules required by the process when it runs. These are specified in Studio and are managed by the Engine.  Application dependencies are modules required by clients of the engine, including forms.If forms (or any client) manipulate objects programmatically, the dependencies must be in the client’s classpath.The classpath is initialized with the application dependencies specified in the Studio. The most common use case for application dependencies is custom datatypes.Note that certain libraries cannot be included in more than one classpath. To avoid this problem, we recommend that you always check for duplicate libraries when you configure a process.",
      "url": " /bonita/7.7/application-and-process-design/process-configuration/managing-dependencies",
      "author": "",
      "categories": "Application and Process Design, Process configuration"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-configuration-process-configuration-overview": {
      "title": "Process configuration overview",
      "content"     : "Process configuration overviewThere are two reasons for configuring a process:  Configuring a process for testing  Configuring a process before deploymentBefore you can run a process from Bonita Studio for testing, you must configure it. The configuration is partly set implicitly by the Deployment and Web preferences set as Bonita Studio preferences and is partly set explicitly by configuring the process using the configuration wizard.Before you export a process for deployment, you need to set the initial configuration using the configuration wizard. This configuration is exported with the process if you check the Configuration option in the export dialog when you build a .bar archive. If you are using the Enterprise or the Performance edition, you can update the configuration after deployment. For other editions, you can modify the actor mapping only.",
      "url": " /bonita/7.7/application-and-process-design/process-configuration/process-configuration-overview",
      "author": "",
      "categories": "Application and Process Design, Process configuration"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-modeling-actor-filtering": {
      "title": "Actor filters",
      "content"     : "Actor filtersAn actor filter refines the list of users who can perform a task, by filtering the list of users mapped to the actor.The following standard actor filters are provided:  Single user assigns the task to the specified user.  Task performer assigns the task to the user who performed the specified previous human task (in earlier versions with was known as actor continuity).  Initiator assigns the task to the user who initiated the process.  Initiator manager assigns the task to the manager of the user who initiated the process.  User manager assigns the task to the manager of the user who would be assigned to the task if the filter were not present.  Users with Custom information is a new actor filter used to assign tasks to users based on custom information (available from 6.3.2).You can create additional actor filters to meet the needs of your process. An actor filter consists of a definition and an implementation. This means that you can modify the definition and implementation independently. For example, if you update the implementation to improve performance, there is no need to modify the definition.An actor filter definition defines the properties of the actor filter and defines the wizard that used to configure the actor filter when it is used in a process. An actor filter implementation consists of a set of properties and a Java class. Bonita Studio provides the following options from the Development menu for managing actor filters:  New definition… Create a new actor filter definition, specifying the properties, the input required by the actor filter, the dialog in the configuration wizard, and the languages supported in the wizard.  Edit definition… Modify the definition of an actor filter. You cannot modify the definition of a standard actor filter.  New implementation… Create the implementation of an actor filter by specifying the properties including the Java class name and package. The wizard automatically creates a stub of the Java code, with comments indicating where you need to supply code. You can create a new implementation for a standard actor filter.  Edit implementation… Modify the implementation of an actor filter. You cannot modify the implementation of a standard actor filter; however, you can create a new implementation.  Export… Export the actor filter files in a zip.  Import… Import a zip containing the actor filter files.You can also create additional actor filters by creating the necessary files directly, as described in Creating an actor filter.For details of how to apply an actor filter to a task or lane, see Actors.When you add an actor filter to a process, Bonita Studio automatically adds an implementation snapshot jar file for the actor filter to your workspace. For example, if you add the single user actor filter, the file bonita-userfilter-single-user-impl-x.y.z-SNAPSHOT.jar is added to your workspace, where x.y.z is the version of the implementation jar file.",
      "url": " /bonita/7.7/application-and-process-design/process-modeling/actor-filtering",
      "author": "",
      "categories": "Application and Process Design, Process modeling"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-modeling-actors": {
      "title": "Actors",
      "content"     : "ActorsThere are two stages to specify who performs a step in a process:  When the process is designed, the business analyst designates an actor for the step. An actor is a placeholder that defines the theoretical user who will perform the step.  Before a process is deployed, the actors are mapped to the real users in an organization.Define an actorAllowing anonymous users (6.x forms)Set the initiatorUse an actor filterMap an actorUpdate task assignment dynamicallyExport or import actor mappingDefine an actorWhen you define a process, you define who will carry out a step in the process by specifying an actor. For example, if a step can be done by any member of the HR team, you could call the actor hr, or if a step can only be done by the sales team manager in Europe, youcould call the actor sales_mgr_europe.Typically, an actor is defined for each step in a process, but you can also specify an actor for all steps in a pool or lane. You canalso use an actor filter to specify the logical relationships between actors. For example, in a process to request vacation days, the request step can be carried out by any user, but the approval step must be carried out by the manager of the requesting user.You can define an actor at pool, lane, or step, and the definitions are related. You must define actors in the order pool, lane, step.To define actors for a process:  Define the actors for the pool:  Select the  pool and go to the Details panel, General tab, Actors pane. If you have already defined any actors, they are shown in the table.  Click Add. A new row is added to the table, with a temporary name for the new actor (for example, Actor1). To change thename, select it and type the name you want to use. You can also add a description.  Repeat step 2 to add all the actors required for the process. You can also remove an actor, by selecting it and clicking Remove.  Select the actor that will be the initiator of the process cases, and click Set as initiator. If you do not define an initiator for the pool, the process cannot be started in Bonita Portal. Instead, it will have to be started programmatically.For each lane, define the actor. You can either select an actor that was defined for the pool, by selecting the actor from the drop-down list, or you can use an actor filter.  For each step, define the actor. You can use the actor defined for the lane, or specify an actor for the step. To specify an actor for the step, you can either select an actor that was defined for the pool, by selecting the actor from the drop-down list, or you can use an actor filter.See Custom User Information in Bonita StudioSee Custom User Information in Bonita PortalAllowing anonymous users (6.x forms)If you use 6.x forms, you can configure a process to be started by an anonymous user. For example, on an e-commerce site,a new user can browse stock and save items to a cart, then register with the site if they want to savetheir cart for later or to buy something. This is known as supporting anonymous users. Anonymous users are always process initiators.To support anonymous users in a process report to the 6.x documentation page.Set the initiatorThe initiator is the user who starts a process instance. For a process that is started by a person, you must specify at least one actor to be the initiator. Any user who maps to this actor can then start a process instance. If a process is started automatically (for example on a schedule), it is not necessary to designate an initiator.Use an actor filterTo specify an actor filter, click Set…, choose one of the predefined actor filters from the list, and follow the instructions in the wizard to configure the actor selector.To change the configuration of an actor filter, select the actor filter, click Edit… and modify the information using the wizard.To delete an actor filter, select the actor filter and click the Erase icon. Note that this does not remove the actor filter from the list of predefined actor filters, just from the process definition.For information about creating a new actor filter, see Creating an actor filter.Map an actorBefore a process can be tested, you must map the actors in the process to users in the organization. Before you can do this, you mustdefine your organization Bonita Studio and upload it to Bonita Portal.To map the process actors:  Open the process diagram in Bonita Studio, and click Configure in the cool bar. The actor mapping dialog is displayed, andindicates any actors in the process that are not yet mapped.  For each unmapped actor, click the actor name to select it. You can then map it to a group, role, membership (that is, a role within a group), or specific user.When you deploy a process, if you have the same organization definition in Bonita Studio and Bonita Portal, you can map the actors first in Bonita Studio then include the mappings when you build the process for deployment. Otherwise, you can configure the actor mappings in Bonita Portal after the process is deployed, when you resolve the process.Update task assignment dynamicallyThe Bonita Engine API contains a method to re-evaluate the assignment of a task by reapplying the actor mapping any actor filters. This means that if there are changes in your organization, you can update any active process instances to assign tasks to the correct people. This is known as dynamic task assignment.Export or import actor mappingWhen you have mapped the actors for a process, you can export the mapping as a file. The exported file is in XML. To export the mapping as a file, open the process diagram in Bonita Studio, click Configure in the cool bar, and select Actor mapping. The actor mapping dialog is displayed. Click Export actor mapping as file… and specify the name and location of the file to becreated.You can also import an actor mapping file that was exported from Bonita Studio. To import a mapping file, open the process diagramin Bonita Studio, click Configure in the cool bar, and select Actor mapping. The actor mapping dialog is displayed. Click Import actor mapping file… and specify the name and location of the file to be imported. Warning: When the actor mapping information is imported, it overrides the existing mappings defined for the process.",
      "url": " /bonita/7.7/application-and-process-design/process-modeling/actors",
      "author": "",
      "categories": "Application and Process Design, Process modeling"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-modeling-diagrams-called-processes": {
      "title": "Called processes",
      "content"     : "Called processesOverviewDefine a called processExtract a called processOverviewA called process is a complete process that is called from another process.There is a parent-child relationship between the calling process and the called process, that is, the flow in the child process is essentially contained within the parent process.A called process is an independent process that is called from a call activity in a parent process.Process flow goes from a call activity in the parent process to the start element in the called process. While the called process is executing, the parent process is paused.When the flow reaches an end element of the called process, processing returns to the call activity.A called process is defined in exactly the same way as any other process. It can call called processes and can contain event subprocesses. A parent process can call more than one called process.A called process can be called by more than one parent.A called process can be in a pool in the same diagram as a parent process or can be in a separate diagram. If a process is called from several parent processes, it is usually easier for maintenance and for deployment to define it in a separate diagram.If the diagram containing the called process is in the same workspace, the called process is deployed automatically when you build and deploy the parent process.If the parent process and called process are not in the same workspace, they need to be deployed separately.Data in a called process is defined in the same way as for any process. In addition, you can map data from the parent process, making it available in the called process. Specify data mapping when you define a call activity that calls a called process.You can define a called process in the same way as you define a process. You can also extract a called process from a process diagram.Define a called processThere are two parts to defining a called process: defining the called process, and defining the call activity. It is easier to define the call activity if the called process already exists, but not essential.Define the called process as you would define any other process. When you create the variables in the called process, make a note of those that are related to variables in the parent process.In the parent process, define a call activity task. Define the normal task characteristics. Note that although a call activity cannothave forms associated with it, it can have connectors and task-level data.In the Details panel, General tab, General pane, specify the name of the called process. If you know the process name, you can enter it directly, otherwise use the expression editor.In the Details panel, General tab, Mapping pane, specify the mapping of data or contract inputs between the parent process and called process. You can only map variables or inputs of the same type.It is recommended to set a contract up on the called process. This way, you can map the parent process variable to a contract inputs of the called process.You can use Auto map to automatically map data from the called process to the parent process for a pair variables that have the same name in the parent and called process variables.You can also specify the mapping of variables of called process variable to parent process variable explicitly.Extract a called processYou can also extract a called process from a process. To do this, open the process diagram, click on the marquee tool in the BPMN elements menu, then select the part of the process that you want to extract. There selected part of the process must have a single entry point and a single exit. Then right click on the selected part, and choose Extract called process from the menu. The selected part of process is extracted and put into a new pool, inserted in the diagram below the current pool. The extracted items are replaced in the original diagram by a call activity. The data in the parent process and called process is mapped automatically.",
      "url": " /bonita/7.7/application-and-process-design/process-modeling/diagrams/called-processes",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-modeling-diagrams-diagram-overview": {
      "title": "Diagram overview",
      "content"     : "Diagram overviewA diagram is the visual representation of a group of related processes. It contains one or more pools.Each pool contains a process. One diagram can therefore contain several processes.A diagram has a name and a version number. You can change the diagram name and you can update the version number whenever you want to indicate a major change in the diagram. A pool also has a version number that can be updated manually. There is no link between the diagram version and the pool version.How to create a new diagramTo create a new diagram in Bonita Studio, choose New from the Diagram menu or the Cool bar, or click New Diagram on the Welcome page. Give your diagram a name, and optionally set the version number and add a description.You can also turn on or off validation of your diagram. If validation is on, any errors in your diagram structure are flagged with a red x icon. This helps you correct errors as you build your diagram, instead of correcting them all at the end.To open an existing diagram, choose Open from the Diagram menu or the Cool bar, click Open a Diagram on the Welcome page, or double-click the diagram name in the Recently Modified list on the Welcome page.The Diagram menu contains options for saving a diagram. You can also duplicate a diagram, which is a useful way of making a backup copy of a diagram before you make major changes.",
      "url": " /bonita/7.7/application-and-process-design/process-modeling/diagrams/diagram-overview",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-modeling-diagrams-diagram-tasks": {
      "title": "Tasks",
      "content"     : "TasksA task is an activity in a process. There are several different kinds of task:  A human task is carried out by a person using a form to enter data or to receive information.  A service task is carried out automatically by the Bonita Engine and is invisible to users during normal operation.  A call activity calls a subprocess. The sequence flow of the process passes from the call activityto the subprocess. When the subprocess is complete, the flow returns to the call activity.  A script task executes a script in the Bonita Engine.  An abstract is a generic activity, usually used during diagram creation as a placeholder for a more specific type of task. An abstract task is treated as a service task when a process executes.  A send task sends a message to another process in the same diagram. The message is caught by a catch message event or a receive task.  A receive task receives a message from another process in the same diagram. The message was sent by a throw message event or a send task.The items configured for a task depend on the task type, as shown in the following table:To configure…  Go to…  Applies to task types…  Task name in diagram  Details panel, General tab, General pane  All  Task name in Portal  Details panel, General tab, Portal pane  All  Task description in Studio  Details panel, General tab, General pane  All  Task description in Portal  Details panel, General tab, Portal pane  All  Task description after completion in Portal  Details panel, General tab, Portal pane  All  Task type  Details panel, General tab, General pane  All  Priority  Details panel, General tab, Portal pane  Human, abstract, call activity, service, script  Estimated duration  Details panel, General tab, General pane  Human, abstract, call activity, service, script  Actor  Details panel, General tab, Actors pane  Human  Variables  Details panel, Data tab, Local variable pane  Human, abstract, call activity, service, script  Iteration  Details panel, General tab, Iteration pane  All  Contract  Details panel, Execution tab, Contract pane  Human  Form  Details panel, Execution tab, Form pane  Human  Connectors  Details panel, Execution tab, Connectors in/out pane  Human, abstract, call activity, receive, service, script  Operations  Details panel, Execution tab, Operations pane  All  KPIs (Enterprise, Performance, Efficiency, and Teamwork editions only)  Details panel, Execution tab, KPIs pane  All  Data entry forms (6.x legacy)  Details panel, Application tab, Pageflow pane  Human  Confirmation forms (6.x legacy)  Details panel, Application tab, Confirmation pane  Human  Appearance in diagram  Details panel, Appearance tab, color &amp;amp; font pane  All  Subprocess to execute  Details panel, General tab, General pane  Call activity  Message content handling  Details panel, General tab, Message content pane  Receive  Messages  Details panel, General tab, Messages pane  Send  Correlation keys  Details panel, General tab, Correlation pane  Receive  To create a new task, select the relevant icon from the BPMN elements menu or from the context menu of the preceding element in the diagram, and drop it on the whiteboard. You can change the task typeof an task in the diagram.Setting the task name seen in the Portal When you define a task in Bonita Studio, by default the task name and description in Bonita Portal are the same as the task name and description on the diagram. You can override this by setting the Display name, Display description, and Description after completion in the Details panel, General tab, Portal pane.  Display name: used in the message displayed at the end of a task indicating the name of the new task that is available, and used in the task To Do list.  Display description: displayed in the portal Details panel when a task in the To Do list is selected.  Description after completion: displayed in the portal Details panel when a task in the Done list is selected.We recommend that you set these values with a script that uses some data that is specific to the case. This avoids the problem of having several tasks in your Portal To Do list all with the same name. For instance, for a leave request approval task, you could include the name of the employee making the request in the Display name.",
      "url": " /bonita/7.7/application-and-process-design/process-modeling/diagrams/diagram-tasks",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-modeling-diagrams-event-subprocesses": {
      "title": "Event subprocesses",
      "content"     : "Event subprocessesA event subprocess is embedded within the parent process, used to handle exceptions. It can be started with a timer event, a signal, or an error event from the parent process, or with a signal or message event from another pool. When the event subprocess starts, the parent process is aborted. If the parent process is a called process, flow returns to its parent process, which continues to execute in parallel with the event subprocess. An event subprocess has access to all the process variables of the parent process in which it is embedded. No data mapping is required.Define an event subprocessTo define an event subprocess:  Select the event subprocess icon in the BPMN elements menu and drag it into the process pool (in the same lane as part of the process or in a separate lane).  Configure the name of the event subprocess.  Select the + symbol in the event subprocess element to expand the process drawing space. You can expand it further if necessary, by dragging the lower right corner of the event subprocess outline.  Add a start event. This must be a start message, start timer, or start error.  Configure the start event with the condition that triggers the event subprocess. For example, to handle an error case, configure a start error event that is triggered by a error thrown by an end error event on a task.  Add the steps needed in the subprocess.  Add an end event.When the event subprocess diagram is complete, you can hide it by clicking the - symbol. This collapses the event subprocess to a single element in the process diagram. The element shows the name of the event subprocess and the type of its start event.",
      "url": " /bonita/7.7/application-and-process-design/process-modeling/diagrams/event-subprocesses",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-modeling-diagrams-events": {
      "title": "Events",
      "content"     : "EventsOverviewTimer eventsMessage eventsSignal eventsError eventsEvents with no triggerEvents and multi-instantiated call activitiesOverviewAn event is something that happens during the execution of a process and has an impact on the flow.An event alters the sequence or timing of activities in a process.Some events have a trigger, such as a timer, message, signal, error, manual trigger or API call.There are three types of event: start, end, and intermediate. A start event is at the start of a process flow, and an end event is at the end of a flow.An intermediate event is an element in a flow of the diagram or is attached to the boundary of a task or call activity.The following table shows the events that you can use in a process diagram. Events that can be set as boundary events are marked (B). A non-interrupting time can only be set as a boundary event (B only):Trigger  Start  Intermediate  End  none  start  catch link, throw link  end, terminate end  message  start message  catch message (B), throw message  end message  timer  start timer  timer (B), non-interrupting timer (B only)     signal  start signal  catch signal (B), throw signal  end signal  error  start error  catch error (B)  end error  Timer eventsTimer events are used to:  Start a process on a repeating schedule, at a fixed date and time, or after a specified interval (start timer)  Delay a process for a set amount of time or until a specific date and time (intermediate timer)  Count down during a task until a deadline is reached (boundary timer or non-interrupting boundary timer)There are three types of timer condition:  Cycle, which triggers the event on a recurring schedule (available for Start timer events only)  Fixed date, which triggers the event at a specified date and time  Duration, which triggers the event after a specified delayA timer event can also contain conditions that trigger actions using connectors.Start timerUse a start timer to launch a process on a repeating schedule (cycle), at a fixed date and time, or after a specified delay (duration).To set the schedule, select the start timer event, go to the Details panel, General tab, General pane, and click Edit… to set the timer conditions.If you define a condition based on a duration, the countdown to the process start begins when the process is enabled.Intermediate timerUse an intermediate timer as a delay mechanism to pause a process flow until a specified duration has elapsed or a specified date and time is reached.To define the duration or the end of the delay, select the intermediate timer event, go to the Details panel, General tab, General pane, and click Edit… to set the timer conditions.Boundary timerUse a boundary timer to set a deadline by which an activity should end. You can set a boundary timer on a human task or a call activity. If the activity does not start before the deadline, the timer is triggered and it diverts the normal process flow to an exception flow. For example, you can use a boundary timer to escalate a late task. The deadline can be set as a duration (for example 48 hours) or as a specific time and date.To define the deadline, select the intermediate timer event, go to the Details panel, General tab, General pane, and click Edit… to set the timer conditions.Non-interrupting boundary timerUse a non-interrupting boundary timer to start an exception flow that parallels the normal process flow. You can set a non-interrupting boundary timer on a human task or a call activity.You can define the deadline as a delay (duration) or a fixed date.If the activity does not start before the deadline, the timer is triggered and it starts the exception flow. The normal process flow continues. For example, you can use a non-interrupting boundary timer to trigger a reminder to a user that a task is waiting to be performed.To define the deadline, select the non-interrupting boundary timer, go to the Details panel, General tab, General pane, and click Edit… to set the timer conditions.Example: Using cron to specify a timer cycleExample: Using a script to specify a time or dateMessage eventsA message is used to send information from one process to another and as a synchronization point. A message can contain data. A message is a point-to-point communication, that is, it is sent to a specified task in a specified pool, where the recipient isconfigured to receive the message. It is also possible to use signals for communication between processes: a signal is broadcast so can have many recipients and does not contain data.A message that is sent has always one recipient. To ensure that the messages are sent between the correct process instances, and to verify the validity of the message, you can use key-based correlation.Reminder: As an alternative to a message, you can use a gateway as a synchronization point in your process. There is a performance advantage to using a gateway in place of a message and called processes. To replace messages with gateways, you need to restructure your process diagram.There are five events related to messages, described in the following sections.Throw message eventUse a throw message event to send a message to an element in a different process. A message can be caught by an intermediate catch message event, a boundary catch message event on a task, or a start message event.To configure a throw message event, select it in the diagram, go to the Details panel, General tab, Messages pane, and define the message that can be thrown. For each message, specify the following:  The message name. You use this name to identify the message when you configure the message catching element, so a unique, descriptive name is best.  The target pool. This identifies the target process. When you start to enter the target pool name, Bonita Studio offers a list of the pools in diagrams you currently have open. Double-click a name to select it from the list. You can also specify the name of a process that is defined in a diagram that is not currently open or that is in a different workspace.  The target task. This is the name of the task or event that is listening for the message.  The correlation level. If you want to use key-based correlation, specify the keys and their values. Define the value of a correlation key using the Expression Editor.  The message content. The message content is a collection of id-value pairs. The simplest method is to use the relevant process variables, but you can use an expression to create message content in other formats. The Content item is the id and must be a string.The Content value must be serialized, so that it is kept in the database and persists even after a JVM restart. It can be contructed with a script or variable. it can also be a complex datatype as long as all its attributes are serializable.If the source and target of the message are in the same diagram, they will be connected by a dotted line.Catch message eventUse a catch message event to receive a message from another process. A catch message event can be an intermediate event, used to pausethe process flow until the message arrives, or can be a boundary event on a task, used to divert process flow into an exception path if the message arrives.A message can be sent by a throw message event or an end message event.To configure a catch message event, select it in the diagram, go to the Details panel, General tab, and specify the following:  In the General pane:  Specify the event name. This name is used when configuring a throw message event to identify the target of the message.  Specify the name of the catch message. This is the name of the message that is configured in the throw message event.In the Message content pane, specify how to handle the content of the message. If the message content is based on variables in the sending process and you have variables with the same name in the receiving process, you can click Auto-fill to indicate that the values of the variables in the receiving process are to be set to the values in the message. Otherwise, you can define a set of mapping rules.  Specify the correlation checks required. If the correlation keys for the message are already defined, click Auto-fill to add them to the table.You can modify these correlation keys, or define others.Start message eventUse a start message event to start a process when a specified message is received.To configure a start message event, select it in the diagram, go to the Details panel, General tab, and specify the following:  In the General pane:  Specify the event name. This name is used when configuring a throw message event to identify the target of the message.  Specify the name of the catch message. This is the name of the message that is configured in the throw message event.In the Message content pane, specify how to handle the content of the message. If the message content is based on variables in the sending process and you have variables with the same name in the receiving process, you can click Auto-fill to indicate that the values of the variables in the receiving process are to be set to the values in the message. Otherwise, you can define a set of mapping rules.  If you are configuring a start message event in an event subprocess, specify the correlation checks required. If the correlation keys for the message are already defined, click Auto-fill to add them to the table.You can modify these correlation keys, or define others.The version of the target pool is not specified in the message definition. If you deploy and enable two versions of a process and each is started using the same start message event, when the message is thrown only one process is started and not necessarily the more recent one. To avoid this problem, do not have more than one version of your process enabled.End message eventUse an end message event at the end of a process to send a message to an element in a different process.A message can be caught by an intermediate catch message event, a boundary catch message event on a task, or a start message event.To configure an end message event, select it in the diagram, go to the Details panel, General tab, Messages pane, and define the message that can be thrown. For each message, specify the following:  The message name. You use this name to identify the message when you configure the message catching element, so a unique, descriptive name is best.  The target pool. This identifies the target process. When you start to enter the target pool name, Bonita Studio offers a list of the pools in diagrams you currently have open. Double-click a name to select it from the list. You can also specify the name of a process that is defined in a diagram that is not currently open or that is in a different workspace.  The target task. This is the name of the task or event that is listening for the message.  The correlation level. If you want to use key-based correlation, specify the keys and their values. Define the value of a correlation key using the Expression Editor.  The message content. The message content is a collection of name-value pairs. The simplest method is to use the relevant process variables, but you can use an expression to create message content in other formats.Signal eventsA signal is used to send a notification from one process to another. A signal does not contain data. A signal is a broadcast so can have multiple recipients.There are four events related to signals:  Throw signal: issues a signal.  Catch signal: catches a signal. Can be an intermediate event or a boundary event. An intermediate catch signal causes the process to wait until the signal is received. A boundary catch signal event causes the process to abort the step to which it is attached when the signal is received.  End signal: ends a process and sends a signal. Configured in the same way as a throw signal event.  Start signal: catches a signal and starts a process. Configured in the same way as a catch signal event.Signal event configurationTo configure a signal event, select the element in the diagram, go to the Details panel, General tab, General pane, and specify the content of the signal in the Signal field. The signal content is a string. Either enter the string in the form field, or select it from the list of signals already defined.You can also defined variables at an intermediate catch signal event.Error eventsA error is a notification of an exception that diverts the normal process flow to an exception flow. There are three types of error event:  A catch error event is a boundary event that is thrown if an error occurs during a task or call activity. It stops the normal process flow and diverts the process to an exception flow.  An end error event marks the end of a process branch that corresponds to an exception. A error code is sent to an event subprocess exception handler. Other flows in the process that are not in error remain active.  A start error event marks the start of a error event subprocess.Catch error eventUse a catch error event as a boundary event on a task or call activity to trigger an exception flow if an error occurs.You can specify a particular error to be caught, or catch all errors.A boundary error on a service task indicates an internal fault where the service cannot finish due to a technical problem, for example, a failed connector, lost communication links, or invalid data. This is a technical exception.A boundary error on a human task indicates a user-declared exception, for example, where a human action such as ticking a checkbox can indicate there is a problem.To configure a catch error event, select the element in the diagram and specify the name of the associated error. If no error is specified, the event will catch any error returned during the task or call activity called process.Then create the exception flow out of the boundary error.Start error eventA start error event can only be used to start an error event subprocess. The start error event catches the error from an end error event and starts the event subprocess.To configure a start error event, select the element in the diagram, go to the Details panel, General tab, general pane, and specify the error. If you do not specify an error, the event subprocess is started for all any error in the parent process.End error eventUse an end error event to start an event subprocess exception handler when a given error occurs. Note that an end error ends a branch of the process flow but other flows in the process continue.To configure an end error event, select the element in the diagram, go to the Details panel, General tab, general pane, and specify the error. There must be a corresponding event subprocess configured to start with this specific error or with any error from the process.Events with no triggerStart eventThis is the normal start event for a process. It indicates the start of a process instance started by a user (typically using Bonita Portal) or programmatically.End eventThis marks the end of a flow in a process. It is at the end of a process flow. Other flows continue to execute. Typically, end events are only used in advanced cases when several branches need to be completed before the process instance is finished.If a process has only one end, use a terminate end event instead of an end event.Terminate end eventThis marks the end of all flows in a process. A terminate end event is at the end of a process flow but causes all activity in the process to stop. It is good practice always to have a terminate end event in a process, because this ensures that a process instance is completely finished when the event is reached.Throw link and catch linkA link is jump in a process flow. A link has a source, which is a throw link event, and a target, which is a catch link event. Multiple sources can have the same target. Source and target must be in the same process. Link are used to improve readability of a diagram by breaking up long sequences, to create loops, and to create a “go to” structure.To configure a link, add the throw link event and catch link event elements to the diagram, then go to the Details panel, General tab, General pane and configure each throw link event to specify the catch link event that is the target. You can check that the link configuration is correct by viewing the configuration of the catch link event, which contains a list of the throw link event with this catch link event as target.Events and multi-instantiated call activitiesNormally, if a called process throws an event (notably an end error event), the parent call activity is notified. However, if the call activity is multi-instantiated, it does not receive the error from the called process. In other words, for a multi-instantiated call activity, the behavior attribute specified in the BPMN standard is set to “all”.",
      "url": " /bonita/7.7/application-and-process-design/process-modeling/diagrams/events",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-modeling-diagrams-gateways": {
      "title": "Gateways",
      "content"     : "GatewaysGateways are used to control how sequence flows interact as they converge and diverge within a process.There are three types of gateway available for process design in Bonita Studio: parallel (AND), exclusive (XOR), and inclusive. These gateways behave in accordance with the BPMN2 specification.Parallel (AND) gatewaysExclusive (XOR) gatewaysInclusive gatewaysParallel (AND) gatewaysIn a parallel (AND) gateway, all inputs must be received before the process can continue, and all outputs fire simultaneously. No condition can be put in the output.Exclusive (XOR) gatewaysFor an exclusive (XOR) gateway, the design must ensure that only one input will reach the gateway. Only one output fires. If there areseveral outputs defined, a condition is required to determine which one fires.Inclusive gatewaysAn inclusive gateway waits for the input from all active paths, and activates all outgoing transitions that have a condition thatevaluates to true. If there is only one outgoing transition, no condition is needed and the transition is always activated. If there is more than one outgoing transition, every transition must either be the default or must have a condition.",
      "url": " /bonita/7.7/application-and-process-design/process-modeling/diagrams/gateways",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-modeling-diagrams-migrate-a-process-from-bonita-open-solution-5-x": {
      "title": "Migrate a process from Bonita Open Solution 5.x",
      "content"     : "Migrate a process from Bonita Open Solution 5.xA process exported from Bonita Open Solution 5.x must be modified to run in Bonita because of the modifications and new features.Bonita provides a guided migration for importing a process from 5.9 or 5.10 to the Bonita legacy 6.x concepts and tooling.You can then modify the process definition to take advantage of the new features in the latest version of Bonita.To migrate a process from a version of Bonita Open Solution earlier than 5.9, you must first upgrade it to 5.9.When you import a process from Bonita Open Solution 5.9 or 5.10, Bonita automatically modifies the process where possible, and provides a report indicating the items that need to be checked or that must be modified manually. You can use this report to track the status of the modifications required as you complete them.To migrate a process from Bonita Open Solution 5.9 or 5.10:  Choose Import -&amp;gt; Other.. from the Diagram menu.  Select the Bonita BAR 5.9/5.10 input format, and select the file to be imported.  Click Import.  A pop-up explaining the format of the import status report is displayed. You can choose not to see this popup for subsequent imports.  Click Finish. The process is imported and Bonita Studio displays an Import status report. This report lists the status of each item in the process definition.  Select an item to see what migration action has been done, or to see what manual action is required.When an item has been completely migrated, either automatically or after review or manual action, check the box in the Reviewed column.   You can use this column to track what remaining migration is required.At any stage during migration, you can close the report and move out of migration mode. Note, however, that when you have closed the report you cannot reopen it. To close the report,click on Exit import mode.You can modify the view of the report as follows:  You can sort the report by any of the columns by clicking on the relevant column heading.  You can hide all items that have valid changes, by choosing Hide valid changes from the report menu.  You can hide all reviewed changes, by choosing the Hide reviewed changes from the report menu.You can also create a PDF version of the report, by choosing Export PDF from the report menu.",
      "url": " /bonita/7.7/application-and-process-design/process-modeling/diagrams/migrate-a-process-from-bonita-open-solution-5-x",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-modeling-diagrams-pools-and-lanes": {
      "title": "Pools and lanes",
      "content"     : "Pools and lanesA pool is a container for a process in a diagram. A lane is a division of a pool (think of swimlanes in a swimming pool). You can use lanes to group elements of a pool that are functionally related. Typically, a lane contains all the tasks assigned to an actor.When you create a new diagram it contains one pool, which contains one lane. You can add other lanes to the pool, and you can add other pools.For a pool, you can configure the following:  Name, description, and version number: This information identifies the pool. The name must be unique withing a repository. The pool version number is really the process version number. Update the version number when you make major changes to the process. There is no link between the pool version number and the diagram version number.  Actors: An actor represents the user who will carry out tasks in the pool. Configure the actors that participate in the process. An actor must be defined at pool level before it can be assigned to a lane or task.  Data: A variable is a container for data used in the process. Create the variables that will be used in your process. You can also create variables at task or form level.  Connectors: A connector links a process to an external information source. Specify the connectors used in the process. You can also specify a connector at lane or task level, but if a connector is used more than once it is better to define it at pool level.  Parameters: A parameter is like a variable but has a value that is fixed for a deployment of a process. Define the parameters of your process.  Documents: You can attach documents to a process. List the documents that attached to the process.  Search: A search index is used in the Portal to find a specific instance of a process. Specify the search indexes associated with the process.The items configured for a lane supplement or override those defined for the pool. You only need to configure something at lane level if is not already defined at pool level, or if you want to override the definition. Note that nested lanes are not supported.For a lane, you can configure the following:  Name and description  Actors: From the actors defined for the pool, specify the actors assigned to this lane. You can also configure an actor filter to make the actor assignment more specific.  Data: Define the variables needed in the lane. You can also define variables as task level.  Connectors: Specify the connectors used in the lane. You can also specify a connector at task level, but if a connector is used more than once it is better to define it at pool or lane level.  Parameters (Enterprise, Performance, Efficiency, and Teamwork editions): Define the parameters of the lane. A parameter is like a variable but has a value that is fixed for a deployment of a process.  Documents: List the documents that are attached to the process.",
      "url": " /bonita/7.7/application-and-process-design/process-modeling/diagrams/pools-and-lanes",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-modeling-diagrams-text-annotations": {
      "title": "Text annotations",
      "content"     : "Text annotationsA text annotation is a comment in a diagram.You can attach a comment to a specific element in the diagram, by choosing the text annotation icon above an element and placing it next to the element. You can also attach comments to a pool, independent of any specific element.To do this, select the text annotation icon from the BPMN elements menu to the left of the screen, and drop it on the diagram inside a pool or lane outline.Text annotations are unformatted text. To enter text, select the annotation and go to the Details panel, General tab, General pane. You can also enter text directly into the annotation when you first create it.Text annotations are useful to exchange information with other business analysts viewing or developing the process. They are also a useful way of storing information that might be required for process maintenance (similarly to comments in.md source files).",
      "url": " /bonita/7.7/application-and-process-design/process-modeling/diagrams/text-annotations",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-modeling-diagrams-transitions": {
      "title": "Transitions",
      "content"     : "TransitionsOverviewCondition expressionCondition decision tableDefault transitionOverviewIn Bonita Studio, transitions represent sequence flow. Transition arrows are used to connect all objects, allowing the sequence flow to move from the start to the end of a process.In addition to connecting elements in a process, transitions are used to define the direction of flow between these elements.If a transition is not present between process elements, the sequence flow will stop. The flow is broken and the process will not reach its termination.Sequence flow must start and end within a single process. Transitions cannot cross from one pool to another. It is best practice to label the conditions on transitions so they are easily understood in the process diagram.Some elements, such as tasks and gateways, can have multiple outputs connecting to other elements. These multiple outputs need to be managed to create an order of flow. They can be configured using conditions to determine which path the flow should take, given the state of the process case (e.g. data variables).To configure a transition, select it in the process diagram and go to the Details panel, General tab. You can configure the following:  The name and a description of the transition. The name is used to label the transition in the diagram.  The condition under which this transition is taken. There are three ways to specify this:Condition expressionClick the crayon icon to open the Expression editor. Select the expression type and enter the expression. The most useful type of expression for a transition is a comparison. A comparison expression uses logical operators on variables, parameters, or constants to determine whether the transition is taken.Condition decision tableFor complex or multi-stage conditions, use a decision table. A decision table is a sequence of conditions, one condition in each row of the table. The rows are evaluated in order. Each condition is a comparison expression.Default transitionIf you make a transition the default, this flow is taken if no other outgoing transition from the element meets the conditions defined in an expression or decision table defined for that transition. We recommend that you always specify a default transition.",
      "url": " /bonita/7.7/application-and-process-design/process-modeling/diagrams/transitions",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-modeling-generate-process-documentation": {
      "title": "Generate process documentation",
      "content"     : "Generate process documentationNote: For Bonita Enterprise, Performance, Efficiency, and Teamwork editions only.OverviewWhat will be exported in the documentation?Generate process documentationResultOverviewWhen a process is open in Bonita Studio, it is possible to generate documentation, containing a summary of individual elements in the process. This is like a process report. Choose the settings for the format of the export file, how the report will be presented, choose a logo to display and its size in pixels.What will be exported in the documentation?You will see the elements contained in the process definition. The documentation generated contains:  a description of BPMN elements  an image of the process  a list of activities  tables showing groups, actors, tasks, sequence flows, connectors, data, data types, deadlines, dependencies, messages, message flows, and KPIs  template settingsThe following are not included in the generated documentation:  contract definitions  context information  form mapping  form informationThe way the different elements in the process are presented on paper can be easily configured in a pop-up window, before exporting.In the optional settings in the pop-up window, you can choose to:  export the report in different formats: .pdf, .doc, .html, .rtf, .ppt  show or hide a description of the BPMN elements  change the colour of headings  display your logoGenerate process documentation  Go to the Menu bar &amp;gt; Process.  In the dropdown menu, click on Generate documentation.A popup window will be displayed where you can configure a number of parameters for the exported file.In the optional settings in the pop-up window, you can choose to:  export the report in .pdf, .doc, .html, .rtf, or .ppt format  show or hide a description of the BPMN elements  show or hide empty properties  change the colour of the background for H1 and H2  define the size of the logo in pixels (10-150 pixels)  set the path where a logo is found on your computer, by browsing straight to it  display a logo on the first page or on all pages  Once the parameters have been set, click on the‚ Generate button to export the fileResultA report about the process will be generated and exported:  in the format you chose  with the presentation you chose  to the place on your computer you chose",
      "url": " /bonita/7.7/application-and-process-design/process-modeling/generate-process-documentation",
      "author": "",
      "categories": "Application and Process Design, Process modeling"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-modeling-iteration": {
      "title": "Iteration",
      "content"     : "IterationIteration means performing a task multiple times.You can start several instances of a task at the same time, which is call multi-instantiation, or you can start another instance of a task when the previous one finished, which is called a loop. You can iterate a task or a call activity. If you have several tasks in sequence that need to be iterated, groups them into a subprocess and define the iteration on the call activity that calls the subprocess.Multi-instantiationUse multi-instantiation if you want several instances of a task to be performed in parallel. For example, in a process for reviewing a document, you would issue the document to all reviewers at the same time, then collect all their feedback before moving to the next step.To configure multi-instantiation, select the element in the diagram and go to the Details panel, General tab, Iteration pane. Specify the following:  Select Parallel or Sequential Multi-instantiation.  Specify how many instances of the task you want. You can:  Specify a defined number: Check Create a defined number of instances, open the expression editor, set the expression type to  Constant, and enter the number. You can also set the number by using the value of an integer parameter or variable.  Define an expression: Check Create a defined number of instances, open the expression editor, set the expression type to Script, and define the script. This is useful if the number of iterations is conditional on some information in the process. The script must return an integer.  Specify the number of iterations from a list: Check Create instances from a list, and choose the list from the existing lists or multiple data.If you are using a list, you may also edit the name of the multiInstanceIterator, a reference that takes the value of each item in the list to create the corresponding instance. Make sure that it has the same type as the list items. To access the referenced data use the same REST API format for retrieving data either using the caseId as in:../API/bpm/case//contextor in the context of a process form:../replacing businessVariableName with multiInstanceIterator or if you edited the reference name use this reference name instead of businessVariableName.  If you want to save the results of user activities during all instances, check the Store output result box and specify:  The result data of each instance to be stored in the output list  The final list of appended resultsSpecify the early completion condition. This is a Boolean that determines whether the iteration is complete. For example, if you have a maximum of 10 possible instances of a task and you require at least 8 to be completed, you could define a counter called completed_instances and set the completion condition to true when completed_instances reaches or exceeds 8. In this expression you have access to the following provided variables :  numberOfActiveInstances: the number of instances that are currently active, that is, not yet finished (for a sequential multi-instance task, this will always be 1)  numberOfTerminatedInstances: the number of instances terminated, successfully or not  numberOfCompletedInstances: the number of instances terminated successfully  numberOfInstances: the total number of instances  LoopsUse a loop if you want a task to be performed several times, one after another, with no result data, until a condition is met. The condition can be a number of iterations, or can be set as an expression. The test for the condition can be done at the end of an iteration or at the start.To configure a loop, select the element in the diagram and go to the Details panel, General tab, Iteration pane. Specify the following:  Select Standard loop.  Specify whether the loop completion test is done before or after the task is performed.  In the Loop while field, specify the condition for continuing to loop. Define the condition as an expression. Here may use a provided variable named loopCounter.  In the Maximum loop field, specify the maximum number of times the loop is to be repeated. If you know in advance the number of times the loop should be executed, you can set this in the Maximum loop field, and set a Loop while condition that is always true. This is optional, but we recommend that you set a limit to avoid infinite loops and errors if a process gets stuck.",
      "url": " /bonita/7.7/application-and-process-design/process-modeling/iteration",
      "author": "",
      "categories": "Application and Process Design, Process modeling"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-modeling-naming-conventions": {
      "title": "Naming conventions",
      "content"     : "Naming conventionsEvery element in a process definition has a name. The only rules about naming are that you cannot use Java language keywords and that you cannot use the same name for more than one element within the same diagram.For example, you cannot have two variables called beanCounter in a diagram, even if they are in different pools.You could, however, have a variable called beanCounter and an actor called beanCounter.Note: Variables are not shared between Studio and UI Designer. Furthermore, in the UI Designer, variables are not shared between pages. For information about to use variables in the UI Designer, go to Variables.Even in a relatively simple process, the number of names quickly becomes large. Adopting a naming strategy improves the readability and maintainability of your processes, and makes it easier to reuse elements. We propose the following best practises.  Make names meaningful. The goal is to make it obvious what something does without needing to open it. It is better to have a long, meaningful name than a short name. In most cases, a name only has to be typed once and then is selected from a list, so there is no advantage to using short names. For example, it is better name a Boolean variable hasRequestedReceipt rather than just receipt.  Names can indicate either what something is or what it does. For a variable, it is more useful to indicate what it is, that is, what it stores. For any other element, indicate what it does.  Be consistent within a process and also between processes, to facilitate reuse or copying. Reuse is more likely if it is easy to find the element you want to reuse or copy.  Name a pool with the high-level business process name. If you have several pools in a business process, use names that convey how the pools are related. For example, if you have a business process for reviewing and approving leave requests that has a main process, a called process for reviewing requests, and a called process for escalations, you could call the pools Leave Request, Leave Request Review, and Leave Request Escalation.  Name a lane to indicate who is acting in the process. In general, you should use the actor name and group activities by the same actor into the same lane. The additional benefit of this is that it makes actors visible in the process diagram.  Name a task according to what is being done. This is important for all types of task, not just human tasks.  Name a form according to what is being done prefixed with the process name. It will be easier to understand where and why forms are used inside the UI designer home page.  For usability as well as maintainability, use the same structure in all task names. In a leave request process, for example, do not call the tasks Manager reviews request and HR review.  Name a gateway for the decision that is being made.  Name all the transitions out of a gateway.  The name of an end events should indicate what is being ended, possibly with the reason. In a process with several flows, you need to know which flow has ended. For example: leaveApproval_ManagerReview, or leaveApproval_RejectionFlow.  For variables, differentiate between process data and task data. You could prefix all process data names with p_ and all task data with t_, or you could append the name with _in_p_ProcessName or in_t_TaskName.  For variables and parameters, indicate the datatype in the name. This can be done implicitly, with terms like is or has (for Booleans), date, price, number, etc. For example:p_hasRequestedReceipt instead of p_RecieptRequested, p_dateOfFirstLeaveDay instead of p_FirstLeaveDay,p_numberOfDaysRequested instead of p_DaysRequested, or p_pricePerDayOfTraining instead of p_TrainingFee. You could also indicate the data type explicitly. For example, p_int_numberOfDaysRequested or p_date_StartOfLeave.  Name a connector instance with a descriptive name to indicate what it is doing, not just the connector type. This is particularly important if a process uses the same connector at several points to handle different data. For example, in a process to update an employee’s contact details, you could use the PostgreSQL connector to get the existing data and to write the updated values, so you could name the connector instances posrgresqlGetEmployeeContactInfo and postgresqlUpdateEmployeeContactInfo.  Name an expression (such as a Groovy script) with a descriptive name that indicates the purpose. Use a name that is unique within the business process.  If you have a library of reusable elements (for example Groovy scripts, or data type definitions), give each element a name that is obvious and descriptive, for maximum reuse. For example, createOperationsListFromVariablesMap, not createOperations. If you import a reusable element but modify it in a process, save it with a new name that is unique in the repository and identifies the process where it is used. This avoids the risk of the amended element overwriting the standard one, which would cause problems for processes using the standard one.Note: There are forbidden keywords which cannot be used in an application name, task name, or process name. The forbidden keywords, which are not case sensitive, are:  content  theme  apiIn addition to using a predictable naming scheme, you can improve the maintainability of a process by specifying a description for every element. It is also possible to use text annotations on the diagram itself. However, a large number of text annotations can make a diagram difficult to read. You are recommended to use a text annotation primarily for a temporary note, as a reminder to complete or correct something, or for communication between business analyst and application designer.",
      "url": " /bonita/7.7/application-and-process-design/process-modeling/naming-conventions",
      "author": "",
      "categories": "Application and Process Design, Process modeling"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-modeling-refactoring": {
      "title": "Refactoring",
      "content"     : "RefactoringRefactoring a process definition means changing the name of a process element without changing the external behaviour. Typically, this is done when a process definition is almost complete, to improve readability and maintainability, or to adopt a new set of naming conventions. In Bonita Studio, when you change the name of an element, the change is propagated to all the places that reference this element. If the change is simple (for example, you rename a variable used in transitions), the change is made automatically. If the change is more complex, such as renaming a variable used in a Groovy script, Bonita Studio displays the update for you to validate before it is implemented.Refactoring is also used when you delete a process element. Expressions using the element directly will be cleared and expressions having dependency on it will clear the dependency and replace it by a blank placeholder in Groovy scripts.Elements and scopeScopeLimitationsExampleElements and scopeRefactoring applies to the following types of element:  variable  form field  actor  parameter  document  contract input  business variable  page  search index (in Bonita Subscription Pack editions Efficiency, Performance and Enterprise)When you change the name of an element of one of these types, the name is changed throughout the process definition, including inside scripts and connector instance definitions.ScopeThe scope of refactoring is the process. If you rename one of the items above in a process, Bonita Studio detects and updates all the places in the same process where it is used. The refactoring does not extend outside the process.If your business process includes a call activity subprocess with mapped data, you need to modify the data mapping manually, checking both the parent process and the subprocess. If you also plan to refactor the subprocess, you should refactor it first, before making any manual changes to data mapping.LimitationsRefactoring is not available for the following process definition elements:  7.x pages do not reflect modifications of business data, documents and contract inputs.  “List of options” elements are not managed by refactoring. If you rename an option, you need to manually update any widgets that use this option as initial value.  Refactoring cannot be used to modify the type of an element, It is limited to renaming.  Expression dependencies are not recomputed in the Groovy script comparison editor. This means that you need to manually go back to each expression dependency and uncheck/check the “automatic dependency resolution” if you added a new element in the Groovy script comparison editor.ExampleSuppose you have a process that loops to collect feedback on a new product feature, and has an process variable called count that is used to count the number of people who complete the survey form. The variable is used in the following places in the process definition:  It is set to zero when a process instance is created.  It is incremented using an operation when a user submits a survey form, that is, it is used as the loop counter.  It is used in script that creates the content for a daily report sent by email to the feature owner, reporting how many survey forms have been submitted. This report is sent using the email connector, and the script is part of the connector definition.For clarity, it would be better to have a more meaningful name for this variable, so you want to change the name from count to numberOfSurveyFormsReturned:  Select the pool and go to the Details panel, General pane, Data panel.  In the list of process-level variables, select count and click Edit.  In the Edit popup, enter the new name, and click OK.  The variable name is automatically updated in the operation to increment the value when a survey form is submitted.  A popup displays the connector definition content script that uses count and shows the script with the new name. Click Finish to confirm that you want the script to be changed.Note: If you click Cancel to refuse the proposed change to the script or code displayed, the changes that were made automatically are cancelled. Modification that you saved in previous scripts for the same name change are also cancelled, even if you have saved them. If you use Ctrl+Z to cancel the change, you need to enter it twice: the first Ctrl+Z cancels the change in the widget, and the second one cancels the change in the related scripts and code.",
      "url": " /bonita/7.7/application-and-process-design/process-modeling/refactoring",
      "author": "",
      "categories": "Application and Process Design, Process modeling"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-testing-configure-a-test-organization": {
      "title": "Configure a test organization",
      "content"     : "Configure a test organizationThis page describes how to set up a test organization in Bonita Studio, for process testing.The ACME example organizationManaging organizationsExport and import an organizationModifying an organizationPublishing an organization to the Bonita PortalThe ACME example organizationBonita Studio includes a sample organization, called ACME. This organization contains a small number of users, who belong to different groups with realistic roles.You can use this example organization to explore how to manage an organization in Bonita Studio, for example by adding a user, orchanging the role of a user. You can also use this sample organization to test a process that you develop.Managing organizationsWithin Bonita Studio, more than one organization can be defined. This is useful if you are developing a process that will be deployed in several different organizations. It is also useful for testing, because you can create a reduced version of your organization that has the same structure but fewer users, saving time in managing your test environment.To an organization, you create the organization, create the group hierarchy, specify roles, and then add users and their memberships.  Start Bonita Studio.  Go to the Organization menu and select Manage….  Add a new organization:  Click Add. A line will be added to the table of organizations, with a placeholder name such as Organization1.  Change the placeholder name to the name of your organization, and add a description.Add groups to your organization:  Select the name of your organization and click Next.  Click Add group to add a group. You can specify the following:  the group Name, which is used internally by the Bonita software.NB: Bonita doesn’t support the ‘/’ character in the group name field. A group name that contains a ‘/’ may lead to unstable behaviour and may be forbidden in the future.  the Display name, which is the group name displayed in lists and wizards  the Path, which shows the hierarchical relationship between groups  a Description of the groupClick Add group to add the next group, and continue until you have added all the groups required. You can also add a subgroup, by selecting a group and clicking Add subgroup  When you have added all the groups you need, click Next.Specify roles in your organization:  Click Add, and add a role called member. This will be the default role for users within a group.  Click Add and add the other roles you require. Typically, most organizations have a Manager role so the group manager can be easily identified, but the specific roles you require will depend on your processes. Remember that it is not necessary to copy all the role information from your business organization into your Bonita organization, but instead you should just create the roles that are useful in processes.  When you have specified all the roles you require, click Next.Add users to your organization.  Click Add. A default username is added to the list of users.  You can change the username, but the value must be in a format the Bonita software can use: only unaccented alphanumeric characters are permitted plus a period (.). One option is to use the personal part of the user’s email address, that is, the part before the @ sign.  Specify a password for the user. The password characters are not displayed, so keep note of the password you choose.  Specify the manager of the user.  In the General tab, specify the Title, First name, Last name, and Job title of the user.  In the Membership tab, specify the groups that the user belongs to, and what role they have in each group.  You can also specify Personal contact and Professional contact information for the user.Add all the users in your organization. When you have finished, click Finish.Export and import an organizationYou can export an organization definition from Bonita Studio. The exported file is in XML, so can be modified. You can import anorganization definition in this XML format that was exported from another Bonita Studio running the same version of Bonita, or that was constructed by some other method but has the same format. You can also import the organization file into Bonita Portal, ready for production.Modifying an organizationTo modify an organization, choose Manage… from the Organization menu and use the same dialogs that you used to create the organization. To modify an item in an organization, select it in the item list and modify the information on the right-hand side of the list. To delete an item, select it and click Remove.Publishing an organization to the Bonita PortalPublishing an organization means uploading the organization data to Bonita Portal so that you can test your process. To upload organization data into Bonita Portal permanently, so a process can run when Bonita Studio is not running, you need to export the organization from Bonita Studio and import it into Bonita Portal.To upload the organization data:  Choose Publish… from the Organization menu.  Click the organization to be uploaded, and then click Next.  Specify the username and password of the user that will be used to log in to Bonita Portal when a process is started from Bonita Studio. This user must be in the organization you have selected.  Click Publish.After it has been uploaded, you can modify the organization in Bonita Portal.",
      "url": " /bonita/7.7/application-and-process-design/process-testing/configure-a-test-organization",
      "author": "",
      "categories": "Application and Process Design, Process testing"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-testing-log-files": {
      "title": "Log files",
      "content"     : "Log filesNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.During development, the Studio log file contains messages about development activities, including any errors.When you run a process for testing, messages are written to the Engine log file.From the Bonita Studio Help menu you can access the Studio log file and the Engine log file.See the Logging overview for details of how logging is implemented in Bonita and how to add logging to Groovy scripts or Java code that you add to a processStudio log fileEngine log fileStudio log fileTo access the Studio log file, choose Bonita Studio log from the Help menu.For Bonita Studio, you can set the level of logging. Edit the config.ini in the Studio root configuration directory and set the value of eclipse.log.level to ERROR, WARNING, INFO, or ALL.      ERROR  Only error messages are logged  WARNING  Only error and warning messages are logged  INFO  Error, warning, and Info message are logged (this is the default)  ALL  All messages are logged, including debug information  Engine log fileWhen you run a process locally from Bonita Studio for testing, you can access the Engine log file by choosing Bonita Engine log from the Help menu. The logging level for Engine when it is started from Studio is always INFO.On a deployed system, you can configure the log level and you can access the log files directly, in $BONITA_HOME/tomcat/logs. Each file name includes the date when the file was created. There are several log files:  bonita.date.log is the Bonita Engine log file.  catalina.date.log is the log file for the Tomcat application server used by Bonita Studio.  host-manager.date.log, localhost.date.log, and manager.date.log are internal Tomcat log files.",
      "url": " /bonita/7.7/application-and-process-design/process-testing/log-files",
      "author": "",
      "categories": "Application and Process Design, Process testing"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-testing-process-testing-overview": {
      "title": "Process testing overview",
      "content"     : "Process testing overviewBonita Studio contains several features that you can use to verify your process while it is in development.You can validate a process diagram: choose Validate from the Diagram menu, or go to the Details panel, Validation status tab and click Refresh. The Details panel contains a listof warnings and errors indicating things to correct in the diagram. Click on a row in the list to highlight the relevant item in the diagram.You can test some process components individually:  Connectors: go to Test connector… in the Development menu.  Expressions: use the Evaluate feature of the Expression editor.You can run the process in debug mode, with the option to skip connector execution: click Debug in the Cool bar.You can run the process locally, launching it from Bonita Studio without first deploying it to Bonita Portal. You must create a test organizationand configure a process before you can run a process from Bonita Studio.In addition to functional testing during development, we recommend that you monitor the system load. This will help evaluate the performance, so you can make your process efficient.When you have finished developing your process, we recommend that you perform a load test with the expected number of simultaneous users of the process, and a realistic rate of use of the process. This will help you evaluate the size of platform (CPU, RAM, etc.) that you will need when the process goes into production.",
      "url": " /bonita/7.7/application-and-process-design/process-testing/process-testing-overview",
      "author": "",
      "categories": "Application and Process Design, Process testing"
    }
    ,
  

    "bonita-7-7-application-and-process-design-process-testing-run-a-process-from-bonita-bpm-studio-for-testing": {
      "title": "Run a process from Bonita Studio for testing",
      "content"     : "Run a process from Bonita Studio for testingWhen you run a process from Bonita Studio it runs on the local Bonita Engine and launches a local Bonita Portal. The process is not deployed, but behaves as it would after deployment. Running a process from Bonita Studio is intended for testing during process development.Before you can run a process, you must configure the processand configure the organization.To run a process, open the process diagram and select the pool, then click Run in the Cool bar. The process in the selected pool runs. Only one pool can be run at a time.If you are using the Enterprise, Performance, Efficiency, or Teamwork editions, you can select the environment in which to run the process. The process must be configured for the environment in which it runs.There are two modes in which you can run a process, standalone and portal:  Standalone mode uses templates to contain the form application, These templates are editable in Studio. When you run a process from the Studio, it runs in standalone mode.  Portal mode uses a different container. When you run a process from the Portal, it runs in portal mode.This means that if you include a script in the templates, which are the standalone container, the script cannot be called by the process when it runs in portal mode.To include a script in a process so it can be used in portal mode, there are the following options:  In the form, add an HTML widget that contains ``.  In the Portal, use a custom Look &amp;amp; Feel that includes the JavaScript files between the `` tags of BonitaForm.html. This makes the script available for all forms in all processes launched from the Portal.To include a script in a process so it can be used in standalone mode:  In Studio, define a custom look &amp;amp; feel for the Application and include the script in one of the template HTML files. The script is then available for all steps in the process.After a process is deployed and initialized in Bonita Portal, it is run by starting a case.",
      "url": " /bonita/7.7/application-and-process-design/process-testing/run-a-process-from-bonita-bpm-studio-for-testing",
      "author": "",
      "categories": "Application and Process Design, Process testing"
    }
    ,
  

    "bonita-7-7-application-and-process-design-profiles-profilecreation": {
      "title": "Profiles editor",
      "content"     : "Profile EditorDefinitionFonctionalTechnicalCreate and build a profileEnable a profileDefinitionFonctionalProfiles work as permissions to give access to:+- Living Applications+- Navigation (menus) of Bonita PortalA profile is made of a name, a description, and a mapping with the organization entities. When the profile is used to access a Portal menu, Portal menu entries must be defined in the profile too.(When used to access a Living Application, the application menu is defined in the application descriptor itself.)All profiles can use the default profiles Administrator and User.Performance and Efficiency users can also use the default profile Process Manager, and can create custom profiles.TechnicalTechnically, a profile is an XML file.Profiles are packaged in files of profiles.A file of profiles is an XML file containing one or more profiles.&amp;lt;!-- file of profiles --&amp;gt;&amp;lt;profiles&amp;gt;	&amp;lt;profile&amp;gt;		&amp;lt;!--  First Profile --&amp;gt;	&amp;lt;/profile&amp;gt;	&amp;lt;profile&amp;gt;		&amp;lt;!--  Second Profile --&amp;gt;	&amp;lt;/profile&amp;gt;&amp;lt;/profiles&amp;gt;However, profiles in a given file of profiles are totally independent.Default profiles (Administrator, Process Manager, and User) belong to the file default_profiles.xml. This file can only contain default profiles. It cannot be renamed or deleted. Neither can be the default profiles within: only the mapping between default profiles and entities of the organization can be edited.Only Enterprise, Performance and Efficiency editions can create new file of profiles, in order to create custom profiles.The purpose of grouping profiles in one file is to manage together profiles related to a same business application.For example, if you want to create a leave management application for four kinds of users (Employees, Managers, Human Resources officers, and Administrators), then you will have to create four applications and four profiles, and to bind each profile to the related application. As for the four applications, the four profiles should be managed together, and so grouped in the same file of profiles.Files of profiles are also handy to be used in different environments: you can create different files, with the same profile names, but each profile is mapped to different entities of the organization depending on the target environment.Therefore, you could have a “profiles_dev.xml”, a “profiles_UAT.xml”, and a “profiles_prod.xml” files of profiles.Create and build a profileNote: All Bonita subscription editions come with an .xml editor for this feature. Only Enterprise, Performance and Efficiency editions also come with a graphical UI.From Bonita Studio, click on Organization -&amp;gt; Profile -&amp;gt; New…It will create an empty file of profiles with a default name and open an editor. You can rename this file from the graphical UI or from the menu Open.The profile graphical UI provided is bound to the xml source, so you can use it to build your profile without writing xml.You can switch from the graphical UI to the xml source at any moment, using the tabs Editor and Source at the bottom of the editor.A toolbar is embedded to the editor, use it to:  Add a profile to this file of profiles: you can add a new profile or duplicate an existing one from your current repository  Save this file of profiles As an other file of profiles (useful to duplicate the whole file)  Deploy this file of profiles (i.e all the profiles in this file) ⚠  For development purposes, it also deploys their referenced pages used as portal menu entries, but if those resources use REST API Extensions, you have to deploy those manually. In production environment, you still need to import pages, and REST API Extensions manually before to import the file of profiles.  Rename this file of profiles  Export this file of profiles (download the .xml)  Delete this file of profiles from your current workspace  Manage the Organization: add users / groups / roles to the organization in order to map them to this profile  Restore the default file of profiles to its initial state (only available for the file default_profile.xml)Using the graphical editor, you can set all the parameters of your profile.The profile name has to be unique in a given file of profiles, else it will lead to conflicts when you will try to deploy the file of profiles.You can duplicate a profile name in different files, but remember that you can only have one instance of a given profile in production.In the mapping section you can map Users / Groups / Roles / Memberships to your profile. You have to map your profile with elements of the active organization.⚠  Nodes in the group tree are independent ⚠  It means that mapping /acme to your profile won’t map /acme/hr to it. Each node has to be mapped individually to be taken into account. However, you can easily add a whole part of your organization, using the add subtree button:  select a node in the tree, and then click on add subtree.The portal menu entries can be edited for custom profiles.Pages proposed are those provided by default in Bonita Portal and those created with the UI Designer. You can reference a custom page only if it is imported to the portal, and you will have to write its exact identifier.The Applications section provides a quick access to the applications mapped to this profile.To map a new application to this profile, you have to open the application and then choose this profile in the profile field of the application descriptor editorEnable a profileTo enable a profile, it must be installed onto the portal. For development purposes, the Studio can deploy profiles onto the portal for you (only for Performance and Efficiency editions).On a production environment, it is done via the Organization &amp;gt; Profiles menu of the Administrator Portal.",
      "url": " /bonita/7.7/application-and-process-design/profiles/profileCreation",
      "author": "",
      "categories": "Application and Process Design, Profiles"
    }
    ,
  

    "bonita-7-7-application-and-process-design-profiles-profiles-overview": {
      "title": "Profiles overview",
      "content"     : "Profiles overviewA profile is an indirection to some entities of the organization: users, groups, roles, and/or memberships.Profiles work as permissions to give access to:  Living Applications  Defined objects and attributes of the BDM (through BDM Access Control)  Navigation (menus) of Bonita PortalOne organization entity can be mapped to several profiles. In Bonita Portal, a loggued user can switch between his/her profiles in the navigation bar.In development, to map entities of the organization to a profile, use the profile editor in Bonita Studio. In production, an administrator must use the Organization&amp;gt;Profiles menu of Bonita Portal.Default profilesUser profileAdministrator profileProcess manager profileCustom profilesDefault profilesBonita comes with 3 default profiles: User and Administrator are available in all editions ; Process Manager is available in Subscription editions only.User profileAn employee mapped to the User profile can perform everyday tasks: start cases, perform tasks, add comments to a task.A manager can also see the More details page for their team members’ tasks, by specifying the task id. To do so, display any task in the Portal, then change the task id in the URL to the id of the task you want to see. You can see only the More details view for the task, unlike in Bonita 6.x where you could also see the task form by using the task id.The manager needs only the user profile for this, not a special profile.User is the profile used in Bonita Mobile Portal. As a consequence, an employee who does not have the User profile cannot access the mobile portal.Administrator profileAn employee mapped to the Administrator profile has administration rights, including importing and exporting processes, monitoring, creating reports, live updating processes or resources, creating and modifying users, creating custom profiles, changing user memberships, creating applications, and so on.Process manager profileThis profile is available for Subscription editions only.An employee mapped to the Process manager profile has limited administration rights for activities related to the processes they manage, as defined by the Administrator.Note: In Bonita ACME organization, all users have the role Member, and the role Member is mapped to all default profiles. This simplifies process testing (log in as any user to see any Portal content).Custom profilesIn addition to the default profiles, users of Enterprise, Performance and Efficiency editions can create [custom profiles](custom-profiles.md).If a custom profile is created to give access to custom content in the portal, its Portal menu (navigation structure and pages) must also be defined in the profile.To create a custom profile, map it to entities of the organization, and create its portal menu, use the profile editor in the studio. In a production environment, an Administrator must use the Organization&amp;gt;Profiles menu.",
      "url": " /bonita/7.7/application-and-process-design/profiles/profiles-overview",
      "author": "",
      "categories": "Application and Process Design, Profiles"
    }
    ,
  

    "bonita-7-7-application-and-process-design-reporting-create-a-report": {
      "title": "Create a report",
      "content"     : "Create a reportNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.The final step when setting up reporting is to create a report template using a Business Intelligence (BI) tool.You are free to choose any BI tool to do so, but if you want to display reports inside the Bonita Portal you should design your reports using one of the following tools:  JasperReports iReport Designer - Older stable tool in maintenance mode  Jaspersoft Studio - Newer toolBonita integration guidelines and tips for Jasper reportsChange the script language to JavaAccess Bonita databaseAdd interactivity with Bonita Portal to your reportAdd style to HTML rendered reportPackage a report for Bonita Portal integrationBonita integration guidelines and tips for Jasper reportsThis documentation does not detail the use of Jaspersoft Studio but provides some guidelines for report integration in Bonita Portal. There are minor differences depending on which Japsersoft tool you are using, but these concern the user interface of the Japsersoft tools, not the Bonita behavior.For details about the use of the Jaspersoft products, please refer to their documentation:  JasperReports iReport Designer documentation  Jaspersoft Studio documentationChange the script language to JavaBy default Jasper reports use Groovy as a script language. However, Bonita Portal does not provide Groovy dependencies to the report so you need to switch the report script language to Java.This is how to do this for iReport:  In the Report inspector tree located on the left-hand side, select the root element.  In the properties table located on the right-hand side, locate the Language property and change it to Java.Access Bonita databaseIf you build a report that requires access to the Bonita database, you need to add the Bonita SQL Query Executor as a report dependency.All queries that fetch Bonita Engine data must use this query executor.This is how to add the query executor as a report dependency in iReport:  Open the Tools menu and select Options.  Make sure the iReport header is selected.  Select the Query Executers tab.  Click on the Add button.  Fill the form using the following values:Field  Value  Language  BONITASQL  Factory class  org.bonitasoft.JRBonitaJdbcQueryExecuterFactoryFields Provider class (optional)com.jaspersoft.ireport.designer.data.fieldsproviders.SQLFieldsProvider  Click on OK.  Still in the Options window, select the Classpath tab.  Click on Add JAR.  Browse to your Bonita Studio installation directory and navigate to workspace/tomcat/webapps/bonita/WEB-INF/lib/.  Select the console-server-sp-X.Y.Z.jar file, where X.Y.Z is the Bonita version.  Click on Open.Add interactivity with Bonita Portal to your reportWhen creating a report you may need to enable Bonita Portal users to interact with it.Bonita Portal integration of the Jasper report viewer makes interactivity possible by providing widgets that can control report parameters.Widgets are configured directly in the Jasper report as properties.Here is the sequence of events when an interactive Jasper report is displayed in Bonita Portal:  Bonita Portal reads the report properties and generates an HTML form containing the widgets.  The HTML code is injected as a report parameter by Bonita Portal.  The report renders the HTML code using the parameter.  The end-user can then interact with the widgets and the report is automatically re-generated if a value changes.To enable interactivity, the first thing to do is to prepare the HTML form rendering parameter and component.This is how to do this in iReport:  In the Report Inspector tree, right click on Parameters and select Add Parameter.  In the parameter properties, update the Name property to BONITA_HTML_FORM.  Drag and drop an HTML component from the Palette onto your report’s Title section.  Select the HTML component that you have added.  In the component properties, set the HTML Content Exp. property to $P{BONITA_HTML_FORM}.When the HTML form rendering parameter and component are ready, you need to set the report properties to configure the widgets that your report will integrate.All widgets share the following mandatory properties (XXX is replaced by a number used to identify the widget):PropertyMandatoryDescriptionBONITA_FORM_XXX_IDYesBase name of the report parameter that will be updated with the widget value.Special rules apply depending on the widget type (see next parameter):For a SELECT widget, the parameter name is the same as the base name.Example: if BONITA_FORM_1_ID is set to p_country then, the report parameter should be named p_country.For a DATE widget, the value will be saved to a parameter with the _from suffix.Example: if BONITA_FORM_2_ID is set to p_birthday, then the report parameter should be named p_birthday_from.For a DATE_RANGE widget, the values will be saved to two parameters: one with a _from suffix and one with a _to suffix.Example: if BONITA_FORM_3_ID is set to p_period, then the two report parameters should be named p_period_from and p_period_to.BONITA_FORM_XXX_WIDGETYesWidget type. Can be one of the following:SELECT for a drop down allowing a single selectionDATE for a date pickerDATE_RANGE for a date range picker with a start date and an end dateBONITA_FORM_XXX_LABELYesWidget labelThe SELECT widget has the following extra properties:  PropertyMandatoryDescriptionBONITA_FORM_XXX_AVAILABLE_VALUESYes: one of these two properties is requiredStatic list of available values defined in a JSON format.  Example: [{&quot;id&quot;:&quot;FR&quot;,&quot;label&quot;:&quot;France&quot;}, {&quot;id&quot;:&quot;US&quot;,&quot;label&quot;:&quot;United States of America&quot;}, {&quot;id&quot;:&quot;ES&quot;,&quot;label&quot;:&quot;Spain&quot;}]BONITA_FORM_XXX_QUERYQuery that dynamically retrieves the list of available values from the Bonita database.BONITA_FORM_XXX_HAS_ALLNoSet this to TRUE if you wish to dynamically add an &quot;All&quot; item to the list of available values. Otherwise, ignore this property.BONITA_FORM_XXX_HAS_ALL_VALUEOnly if the &quot;All&quot; item is activeSpecifies the value returned when the &quot;All&quot; item is selected.  Specifies the value returned when the “All” item is selected.The DATE and DATE_RANGE widgets have the following extra properties:  PropertyMandatoryDescription  BONITA_FORM_XXX_INITIAL_VALUEYes:  one of these two properties is requiredStatic initial value defined in the ISO format for the **DATE** widgetExample: 2015-01-28Static initial values for `_from` and `_to` parameters in the ISO format separated by ` - ` for the **DATE_RANGE** widgetExample: 2015-01-28 - 2015-02-28BONITA_FORM_XXX_QUERYQuery that dynamically retrieves the initial value from the Bonita database.  For a DATE_RANGE widget, if you name the associated parameter p_date then p_date_from and p_date_to initialvalue will automatically be set to one week before today and today respectively. Setting an initial value to thisparameter using BONITA_FORM_XXX_INITIAL_VALUE will not be taken in account.Query that dynamically retrieves the initial value from the Bonita database.Create the report properties using iReport as following:  In the Report Inspector tree, right click on the report’s name and select Properties.  In the More section, configure Properties by clicking on …  Add the properties based on the widgets you need.Here is an example of a report configuration containing a “Period” date range and a “State” select widget:Add style to HTML rendered reportTo change style of your components in the HTML rendered reports, add CSS classes to them and update global Look’n’feel as described in Bonita portal look’n’feel page.Note: If a JRTX file has been packaged inside the imported zip file, it will not be used to style HTML generated reports.Using the global CSS look’n’feel of the Bonita Portal allows to have a consistent look’n’feel between HTML reports and Bonita Portal.To add a CSS class to a component proceed as follow:  In the Component properties pane, click the Properties expression button  Add a Properties expressions:  Set Properties expressions’s name to net.sf.jasperreports.export.html.class  Set Properties expressions’s value to the wanted CSS class.  Then, implement in Bonita Portal’s look’n’feel the expected style for this CSS class.Alternatively, you can also change the HTML tag name of a component by adding a new Property in Properties expressions named  net.sf.jasperreports.export.html.tag(example: name: net.sf.jasperreports.export.html.tag value: h1)Package a report for Bonita Portal integrationIn order to integrate a Jasper report in Bonita Portal, you need to prepare a ZIP archive.The archive should contain at least the compiled Jasper report (a file with a .jasper extension).If your report requires a connection to the reporting database, the archive must contain:  The JDBC driver jar file used to connect to the reporting database. Do not include this file in the archive if the driver is already deployed at server level.  A connection.properties text file that contains the reporting database connection settings:Property  Description  dbUrl  JDBC Url to access the reporting database  dbDriverClassName  The JDBC driver’s class name  dbUser  The login of the database user  dbPassword  The password of the database userFor example, connecting to a local MySQL database named BonitaReport with a user root and password root:dbUrl=jdbc:mysql://localhost:3306/BonitaReportdbDriverClassName=com.mysql.jdbc.DriverdbUser=rootdbPassword=rootIf your report contains sub reports, these should be placed in a directory named sub.If your report uses a style sheet you may also provide a .jrtx file in the archive.Once you have packaged the Jasper report as a ZIP archive, you can install it in the Bonita Portal.",
      "url": " /bonita/7.7/application-and-process-design/reporting/create-a-report",
      "author": "",
      "categories": "Application and Process Design, Reporting"
    }
    ,
  

    "bonita-7-7-application-and-process-design-reporting-reporting-overview": {
      "title": "Reporting overview",
      "content"     : "Reporting overviewNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.This page presents an overview of reporting with Bonita.TerminologyReporting dependenciesReporting main stepsTerminologyReporting is the act of collecting and aggregating Key Performance Indicators (KPIs) to present them in reports.KPIs are defined as a set of measures that are used to assess the operational success of a business process.Reporting is also know as Business Intelligence (BI) or Business Activity Monitoring (BAM).Reporting dependenciesReporting involves Bonita and two other third-party software components:  A reporting database of your choice.  A BI tool of your choice.Reporting main stepsReporting is composed in several ordered steps.At design time:  Reporting database setup  KPI definition in Bonita Studio  Report creation in the BI toolAt execution time:  KPI collection in Bonita Engine and storage in the reporting database (this is performed automatically based on KPI definitions)  Report generation using the BI tool or Bonita Portal",
      "url": " /bonita/7.7/application-and-process-design/reporting/reporting-overview",
      "author": "",
      "categories": "Application and Process Design, Reporting"
    }
    ,
  

    "bonita-7-7-application-and-process-design-reporting-set-up-a-reporting-database": {
      "title": "Set up a reporting database",
      "content"     : "Set up a reporting databaseNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.Before you put reporting in place, you need to create a dedicated reporting database.For performance reasons, it is a best practice to isolate reporting data from live data.This installation is performed manually outside of Bonita.This documentation does not detail the installation procedure of such a database but provides some best practices.Best practices Start by identifying the KPIs you wish to track, then create the reporting database structure. You need to create the appropriate tables and columns to store the reporting data.When creating your reporting database, follow these best practices to ensure quick read/write operations:  Avoid relational structures, in order to reduce the number of joins when querying data. Prefer flat table structures, because data duplication is generally not a concern.  Do not use transactions as these can slow down read/write operations.  Only perform select/insert operations and no update/delete.",
      "url": " /bonita/7.7/application-and-process-design/reporting/set-up-a-reporting-database",
      "author": "",
      "categories": "Application and Process Design, Reporting"
    }
    ,
  

    "bonita-7-7-application-and-process-design-reporting-set-up-kpis": {
      "title": "Set up KPIs",
      "content"     : "Set up KPIsNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.This page presents two implementation options for creating KPIs and integrating them to business processes:Create a KPI using the Bonita Studio KPI featureCreate a KPI definitionAttach a KPI definition to a task or a poolConfigure the JDBC driver as a process dependencyCreate a KPI using a database connectorCreate a KPI using the Bonita Studio KPI featureThis implementation option is preferred if you do not wish to manipulate database connection settings and SQL queries manually when writing your KPI data. The Bonita Studio assists you in setting your connection and automatically generates the SQL insertion queries for you.Keep in mind that this implementation option has some drawbacks:  You can only insert one row at a time. There is no dynamic multi-row insert.  You do not benefit from pooled database connections. This has an impact on performance.In order to use the KPI feature, you need to:  Create a KPI definition  Attach the KPI definition to a task or to a pool  Configure the JDBC driver as a process dependencyCreate a KPI definitionWhen creating a KPI definition, you must specify its database connection settings and its structure.  In Bonita Studio, open the KPI menu and select **Create KPI**.  Fill in the database JDBC connection settings:  Choose the Driver template that matches your reporting database type:Click on the Apply template button. This pre-fills the Driver class name and JDBC URL fields.  Update the configuration with your database name, user name, and password:  Click on Test connection to validate your settings.  Click on Next.Fill in the KPI definition page  Provide a name for the KPI definition. This is used as a reference for the Bonita Studio developers.  Click on the Fetch tables button to select the table to which you wish to attach this KPI. This pre-fills the KPI fields based on your database structure. Alternatively, you can type the name of the database table.  Optionally, specify a description (for documentation purpose only).  Add/remove or update your KPI fields by specifying:  the name (database column name)  the SQL type as defined in the database  whether the values should be surrounded with quotes in the SQL insertion query  Click on Create.Attach a KPI definition to a task or a poolOnce you have specified a KPI definition, you may to attach it multiple times and at different levels:  Pool level - This generates KPI data either at process start or end  Task level - This generates KPI data either at task start or endFollow these instructions to attach a KPI:  In Bonita Studio, either select a task or a process pool.  In the Details panel, Execution tab, KPIs pane, click on the Add button.  Select your KPI Definition from the list  Click on Next.  Review your database connection settings and test your connection (these are imported from your KPI definition so they should be correct).  Click on Next.  Fill in the Advanced configuration page  Make sure the Database table name is correct (this field is preloaded from your KPI Definition so it should be correct).  Select the Error behavior if KPI generation fails: you can either put the process into an error state, or ignore the failure.  Pick a KPI insertion event relative to the object to which you are attaching the KPI (task or pool).  Select an Edition mode for the insertion query. Graphical mode benefits from the mapping that you have provided in the KPI definition, Manual mode will let you write an SQL query.Assuming that you have chosen the Graphical mode and clicked on Next, then configure the KPI field mapping.  Add as many rows as there are KPI fields in your Definition. For each row:  Expand the drop-down menu and choose a KPI field from your Definition.  Specify its value with an expression (a constant, a parameter, or a variable).Click on Finish.Configure the JDBC driver as a process dependencyWhen your KPIs are attached to your process, add a JDBC driver dependency to your process.  In Bonita Studio, select your process pool and click on Configure in the coolbar.  Select Process dependencies from the list on the left.  Check the .jar file of the JDBC driver that matches your reporting database.  Click on Finish.Your process is now ready to be deployed. Reporting data will be generated in the reporting database each time the KPIs are triggered.Create a KPI using a database connectorThis implementation option is better for performance and flexibility reasons:  It enables dynamic multi-row insertions, because you can use Groovy scripts to transform data and generate complex queries.  It benefits from pooled database connections for improved performances.The disadvantage with this implementation option is that it requires basic SQL knowledge because you have to write insertion queries manually.To configure this option, use a database connector to insert a row in the reporting database.Use the datasource database connector with connection pooling for improved performance.",
      "url": " /bonita/7.7/application-and-process-design/reporting/set-up-kpis",
      "author": "",
      "categories": "Application and Process Design, Reporting"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-analytics": {
      "title": "Analytics",
      "content"     : "AnalyticsNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.A report presents the Administrator with data about the usage of cases and tasks in processes.There are four reports available by default:  Case average time - export in .pdf  Case list - export in .pdf  Task list - export in .pdf  Case history - export in .csvYou can also define](/bonita_doc/bonita/7.7/application-and-process-design/reporting/reporting-overview) and . For example, you could define a report to track purchase order progress.Default reportsInstall a custom reportExport a reportManage Japanese PDF reportsDefault reportsCase average timeChoose a filter to display certain parameters:  Case average time: period, processes  Case list: period, state (all, archived, opened), processes (all)  Task list: period, state (all, archived failed, opened)Case listChoose a filter to display certain parameters:  Case average time: period, process  Case list: period, state (all, archived, opened), process (all)  Task list: period, state (all, archived failed, opened)Task list timeChoose a filter to display certain parameters:  Case average time: period, process  Case list: period, state (all, archived, opened), process (all)  Task list: period, state (all, archived failed, opened)Case historyFor Efficiency and Performance editions.This report lists human actions on cases. This enables you to analyse and standardize cases in processes.In the case history report, the format of the exported file is a .csv file. This enables the data to be sorted and filtered.ParametersIn the report, the query parameters are displayed in the Parameters section:  Date range - Period with two fields from and to or select a date  Process - Select All or a specific process and versionIf a selection is made in the Process combo box, the following combo box is displayed:  Case ID list named “Cases” &amp;gt; Select “All” or a specific case ID. This is only available when a process is selectedGenerated export displayThe generated .csv export contains the following in order of display:  Date  Time  Case ID  Process name  Process version  First name  Last name  User name  Action  Started  Skipped  Failed  DoneTask or Subtask  Parent task name (only filled if there is a subtask created for a task)  Due date  Due time  Overdue - (only filled if the task is done after the due date)Note: what is not exported in the .csv report  Comments  Human actions performed on Parameters and variablesInstall a custom reportYou can import a customized report into Bonita Portal.Custom reports are created externally using Jaspersoft Studio.Contents of a .report archive (.zip), used in JasperThe report archive (.zip) contains the Jasper file, a connection properties file and a .jar driver file.Optionally, a properties file can be added if the report is localized in different languages.Install a report created in the standard Jasper format.  Go to Analytics.  Click the Install button in the top left corner of the screen.  Name the report.  Select to your Jasper file (.zip) on your disk drive.  Click Install.ResultA report is displayed in Bonita Portal containing your data.Export a reportA report in the Bonita Portal can be exported as a .pdf file.  Go to Analytics.  Select the report that you want to export. This can be one of the default reports, or a custom report that you have installed.  Click the More button.  Click the Export button.  Specify where the report PDF file will be saved.  Click OK.Manage Japanese PDF reportsJapanese language support for reports is not provided by default. In order to display the Japanese translations in the default PDF reports, you need to download the Japanese translation my_report_ja_jp.properties file from Crowdin. If the tenant is deployed and your report has been displayed, open the directory of the report in the Bonita Home folder(bonita/client/tenants/yourTenantId/work/reports/yourReport). Then add your “ja_jp.properties” translation files to this directory. If your report has never been displayed, go to your deployed war or ear &amp;gt; WEB-INFclasses then edit your report zip file to add the Japanese properties file.",
      "url": " /bonita/7.7/bonita-portal-administration/analytics",
      "author": "",
      "categories": "Bonita Portal Administration"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-applications": {
      "title": "Applications",
      "content"     : "ApplicationsSince 7.3, some changes have been made on the default layout. Those changes live in the layout.css page asset and allow us to better handle the content layout of the page displayed. Another consequence is that it removes a margin which was automatically added at the top of each pages.With Bonita you can build an application that exactly meets your needs and interacts with processes.Instead of the standard, generic, process-centered Bonita Portal, you can create a business-centered web application that provides access to processes.You can modify the application whenever you want, and users will see the changes immediately.This means that you can rapidly adapt an application to your changing business needs or to react to user feedback.Application definitionApplication prerequisitesDeveloping an applicationDefining a new applicationDeploying an applicationUpdating an applicationApplication definitionAn application is a collection of pages and processes that meets a business need. It contains some or all of the following:  Pages: the user interface components of the application. An application must contain at least one page.  Processes: the logic execution components of the application. An application must contain at least one process. A process can contain forms, which are the user interface of the process.  REST API extensions: called from pages or forms to retrieve data to be presented to the user.  Layout: the frame in which application pages are displayed.  Theme: the appearance of application pages, including fonts and colors.Application prerequisitesAn application requires the following to be available:  The business data model (BDM) must be deployed  The organization data must be deployed, so that application users can log in.  The access authorizations that grant users access to the application resources must be defined.Developing an applicationWhen developing an application there are three independent factors to consider:  User interaction: the application interface that users see, where they read or enter information.  Logic: the processes that update data based on user actions or on other factors.  Data: the information displayed to users and manipulated by the processes.If you are developing an application from scratch, start with what users need, then define the data model, then create the processes that will manipulate the data. If you are creating an application that will use existing processes, start by considering user needs, then adjust the existing data model and processes as required to incorporate them into the application.To integrate a process into an application, you specify a link in an application page. This can either be a link to display a processes instantiation form or a task form, or it can be an API call to start a process or run a task without displaying a form.Defining a new applicationSince Bonita 7.5.0, the definition of applications can be done from the studio, which makes it more straightforward to develop and package with other application artifacts.For Enterprise, Efficiency and Performance editions, a graphical editor is provided on top of xml source code.For more details, go to Application descriptorsWhen you have developed all the resources that are used in an application, you are ready to define the application itself.The application builder is a graphical interface in Bonita Portal for specifying the application pages and defining the menus.There is a default application home page that you can adapt or replace.To define an application, you need to be logged in to Bonita Portal using the Administrator profile.You can also create a custom profile to use for creating an application. This profile must have access to the Applications page to create the application.To test the application, the user currently logged in must have the profile defined in the application.  In the menu bar, click Applications. The Applications list page is displayed, showing the applications already defined.  Click New. The Create an Application popup is displayed.  In the popup, specify information about the application:  Display name: The user-friendly name that will be used in Bonita Portal to identify the application.  URL: The URL of the home page of the application.  Version: The version number of the application. By default, this is set to 1.0, but you can set it to any alphanumeric string.  Profile: Select the profile that users must have to access the application. The drop-down list includes all the available profiles, including custom profiles.  Description: A text description of the application.Click Create.The new application is created, with the information that you specified.However, at this stage the application contains only the default home page. You must specify the pages in the application, and then define the navigation.Note: When you define the URL token for an application, you cannot use “API”,”content” or “theme” (case insensitive). Those words are reserved for internal use.Specifying application layout (Subscription editions)Each application is associated with a layout that defines the main frame of this application.To specify the application layout:  In the menu bar, click Applications. The Applications list page is displayed.  Click the edit icon (…) for the application you want to edit. The application details page is displayed.  Go to the Look &amp;amp; Feel zone.  Click in the name of the current layout.  Choose the new layout from the drop down list. Layouts must be previously deployed.  Click on the validate button.Specifying application theme (Subscription editions)Each application is associated with a theme that defines the application appearance. All pages developed with the UI Designer will automatically benefit of application theme.If you develop pages by yourself you need to include the following line in your source to get theme working &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;../theme/theme.css&quot;&amp;gt;.To specify the application theme:  In the menu bar, click Applications. The Applications list page is displayed.  Click the edit icon (…) for the application you want to edit. The application details page is displayed.  Go to the Look &amp;amp; Feel zone.  Click in the name of the current theme.  Choose the new theme from the drop down list. Themes must be previously deployed. By default, there are six Bootstrap based themes.  Click on the validate button.Specifying application pagesWhen you specify application pages, you create a mapping between the application and the pages it contains. The pages themselves must already exist.To specify the application pages:  In the menu bar, click Applications. The Applications list page is displayed.  Click the edit icon (…) for the application you want to edit. The application details page is displayed.  Go to the Pages zone. You can add a page by clicking Add and choosing a page from the popup list, and define the URL token for this page.You can remove a page by clicking the trashcan icon for that page.The pages are listed in alphabetical order.  Select the page that will be the application home page. The default home page is selected by default. To change this, click the Home icon on the row of the relevant page.Note: When you define the URL token for a page, you cannot use “API”,”content” or “theme” (case insensitive). Those words are reserved for internal use.Defining application navigationWhen you specify the navigation, you define the menu names and structure, and the pages that menu items point to. The menu hierarchy is limited to two levels, for usability.At the top level, you can specify two types of item:  A one-page menus is clickable and points to a page.  A multi-page menu is not clickable but is the container for a collection of one-page menu items.To specify the application navigation:  In the menu bar, click Applications. The Applications list page is displayed.  Click the edit icon (…) for the application you want to edit. The application details page is displayed.  Go to the Navigation zone. For example:  Specify the menu structure. At the top level, you can define one-page menus that point directly to pages (like Home in the illustration), or multi-page menus (like Holidays).If you define a multi-page menu, you can add menu items (like Trekking and Safari).  To add a top-level one-page menu, click Add, then in the popup, click One-page menu, specify the name for the menu, select the page, and click Add.  To add a top-level multi-page menu, click Add, then in the popup, click Multi-page menu, specify the name for the menu, and click Add.  To add an item to a multi-page menu, click the plus icon beside the menu name, specify the name for the menu item, choose the page from the popup, and click Add.  To delete a menu or menu item, click the trashcan icon. If you delete a menu that has children, the child entries are automatically deleted from the navigation.  To reorder menu items, drag and drop them.  Deploying an applicationTo deploy an application, you use the Bonita Portal. You need to import (or create in the Portal), the following in this order:  Organization then profiles  API extensions then pages, layout, themes  Business data model then processes  Application definitionDeploying an application means exporting it from the Portal where you developed it and importing it into another for production.When you export an application, it includes the following:  The application metadata  The layout name  The theme name  The navigation definition  The mapping of pages to the navigationIt does not include the pages, layout, or theme themselves, the business data model, the profile definition, the processes, the organization, or the authorization settings. These must all be deployed separately.Export applicationsTo export an application:  Go to the Applications page. The list of applications is displayed.  Select the application you want to export.  Click the Export icon.An XML file, Application_Data.xml, is exported.Import applicationsWhen you import an application, you import the mapping of the application to pages. For the import to be successful, any pages, layout and theme must already be loaded.If you are setting up a new production environment by importing all the data, import it in the following order:  organization  profiles  API extensions  pages  layouts  themes  business data model  processes (including forms)  applicationsYou will also need to apply any custom authorization definitions.To import applications:  Go to the Applications page. The list of applications is displayed.  Click Import.  Specify the Application_Data.xml file to upload.  Click Import.The file is imported and checked.A popup reports the status of the import. It shows the number of applications successfully imported, partially imported, or with errors.If the profile associated with an application is not defined, the application is created without any associated profile.If a page associated with the application is not present, the application is created without this page or the related navigation elements.If the specified layout and/or theme is not present, the application is created with the default layout and theme.Updating an applicationThere are two aspects to updating an application: changing the application definition and changing the resources.Updating an application definition  In the menu bar, click Applications. The Applications list page is displayed.  Click the Edit icon (…) for the application you want to edit. The application details page is displayed. From this page, you can edit the application metadata, layout, theme, pages, and navigation.  To edit the metadata, click the Edit button. In the popup, modify the information about the application, then click Save.  To edit the layout, see Specifying application layout.  To edit the theme, see Specifying application theme. Note that the end user will see this modification with a delay (due to the cache policy)  To edit the pages, go to the Pages zone. You can add a page by clicking Add. You can remove a page by clicking the trashcan icon for that page.Note that if you remove a page, the related menu items are automatically removed from the navigation.  To edit the navigation, go to the Navigation zone. You can add a menu or menu item by clicking Add. You can remove a menu or menu item by clicking the trashcan icon for that page.You can reorder menus and menu items by dragging and dropping them.  Updating application resourcesSome resources of an application can be updated live without needing to stop the processes or require users to log out of the application. Live update is primarily intended for rapid deployment of updates in a pre-production test environment. It can be used to deploy updates in a production environment, but in most production environments applications and their components are versioned, so a planned roll-out is more typical.You can use live update for the following resources:  Pages and forms  Parameters  Connectors",
      "url": " /bonita/7.7/bonita-portal-administration/applications",
      "author": "",
      "categories": "Bonita Portal Administration"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-bonita-portal-interface-about": {
      "title": "About Bonita Portal",
      "content"     : "About Bonita PortalTo see the version of the Bonita platform installed on a system:  Go to the Top menu bar.  Open the Settings menu and choose About.",
      "url": " /bonita/7.7/bonita-portal-administration/bonita-portal-interface/about",
      "author": "",
      "categories": "Bonita Portal Administration, Bonita Portal interface"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-bonita-portal-interface-bonita-bpm-portal-interface-overview": {
      "title": "Bonita Portal overview",
      "content"     : "Bonita Portal overviewMost of the Bonita Portal pages are divided into 3 main panes: left, middle and right.The left pane is for filters, the middle one for lists and the right one for more details about the selected item.Default profilesAccess to menusDefault profilesThere are three default profiles available in the Portal: User, Administrator, and (in the Efficiency, Performance and Enterprise editions) Process manager.The Administrator is responsible for the administration of the Portal at tenant level, and particularly for the management of the processes, the organization, the reports, the custom profiles and the Look &amp;amp; Feel.Example of the Administrator profile interfaceThe Process Manager shares process management responsibilities with the Administrator for the processes he has been declared as the Process Manager.The User is responsible of performing the tasks for which she is a candidate and also for starting new cases of the processes to which she has access.Example of the User profile interfaceTo know more about the use and optimization of the task list, go to User task list.Access to menusEach profile has access to a different set of single page menus or drop down menus, containing filters and action buttons related to their user rights.Note: The tenant administrator, logged as the Technical user, needs to map the Administrator profile with individuals in the company (or groups, or roles) to let the Administrator(s) manage the rest of the organization and other users. See First steps after setup/Create an Administrator user.See also Profiles overview.See also Custom profiles.",
      "url": " /bonita/7.7/bonita-portal-administration/bonita-portal-interface/bonita-bpm-portal-interface-overview",
      "author": "",
      "categories": "Bonita Portal Administration, Bonita Portal interface"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-bonita-portal-interface-languages": {
      "title": "Languages",
      "content"     : "LanguagesLanguages available by defaultSelect BPM Portal user interface languageAdd a language to Bonita PortalTranslate Bonita PortalLanguages available by defaultThe following languages are officially supported:  English (US)  French  Spanish (Latin American)  JapaneseOfficially supported language means that:  Translation is performed by Bonitasoft.  Following Bonita components are translated: Studio, UI Designer and Portal.Select BPM Portal user interface languageFor the web desktop version:  Go to the top right corner and click on Settings/Language  Select a language from the drop-down list.For the web mobile version:  Click on the Tools icon  Click on Languages  Select a new language from the drop-down listAdd a language to Bonita PortalInstructions below assume that the language you want to add is already available in the community translation project. If translation is not available see Translate Bonita Portal for instruction about how to collaborate to a new or ongoing translation.Instructions below explain how to add a language to Bonita Portal. Steps below involve using content created by Bonitasoft community and therefore not officially supported.Download the language files  Go to Bonita translation project.  Select the language you are interested in.  Make sure you click on the “Toggle Hidden Files” button  to see already fully translated files. to see already fully translated files.  Browse the file tree to 7.7.x/bonita-web/portal folder.  For each file in the folder: open it and in the File menu click on Download. Each .po/.pot file has a language indicator and a locale indicator. For example, the files for the Brazilian Portuguese language end with pt_BR.po.  For Subscription editions, you also need to get the files from 7.7.x/bonita-web-sp/portal folder.Install the files and configure java  Create a new folder depending on the situation:  [TOMCAT_HOME]/server/i18n/  [WILDFLY_HOME]/server/i18n/  [STUDIO_HOME]/workspace/tomcat/server/i18n/Copy all the .po/.pot files into the new folder just created.  Declare a new JVM property org.bonitasoft.i18n.folder and set the value to the full path to i18n folder:  Tomcat on Windows, edit the [TOMCAT_HOME]setuptomcat-templatessetenv.bat file: &quot;-Dorg.bonitasoft.i18n.folder=C:path_to_i18n_folder&quot;  Tomcat on Linux, edit the [TOMCAT_HOME]/setup/tomcat-templates/setenv.sh file: -Dorg.bonitasoft.i18n.folder=&quot;/path_to_i18n_folder&quot;  WildFly on Windows, edit the [WILDFLY_HOME]serverbinstandalone.conf.bat file.  WildFly on Linux, edit the [WILDFLY_HOME]/server/bin/standalone.conf file.  Tomcat embedded in Bonita Studio edit the appropriate .ini file and use the following syntax: -Dtomcat.extra.params=&quot;-Dorg.bonitasoft.i18n.folder=C:pathto_i18n_folder&quot;  Windows 64bit: [STUDIO_HOME]/BonitaStudioSubscription64.ini  Linux 64bit: [STUDIO_HOME]/BonitaStudioSubscription64-linux.ini  etc.  Restart your application server (or Click on Server in the Bonita Studio menu bar, click on Restart Web Server).  Check that the new language is listed in Settings menu of the Bonita Portal.Translate Bonita PortalFirst step if to go to Bonita translation project hosted on Crowdin and check if the language you want to contribute to is already listed. If it’s not, please request it by submitting an issue on our community issue tracker.If the language you want to contribute to is already listed:  If you don’t already have one, create a Crowdin account.  On the Bonita translation project page click on the language you want to translate.  At the top of the page, click on the “Join” button.  Wait for us to validate your request to join the project.  Navigate to the Portal .po/.pot files (see information in the “Add a language to Bonita Portal” section above).  Click on a file to begin the translation. You can then use the filter missing translation to only display the strings to be translated.",
      "url": " /bonita/7.7/bonita-portal-administration/bonita-portal-interface/languages",
      "author": "",
      "categories": "Bonita Portal Administration, Bonita Portal interface"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-bonita-portal-interface-log-in-and-log-out": {
      "title": "Log in and log out",
      "content"     : "Log in and log outThis page tells you how to log in as a user with a profile and rights attached to that profile.You can also switch between users with different rights,(e.g. user profile and admin profile), to access different management menus.Note: to avoid login problems, make sure you empty your browser cache Empty your cache for different browsersHow to log in as a userHow to log out and log back in as another userHow to log in as a userIf for example, you receive an email with a link to start a case or a task in the Bonita Portal, you will need to log in.  Enter the login page url, http://hostname:port/bonita/, to get to the login page as a user. The default port number is 8080.  In the user field, enter the login, and the password for this user.  Click on the Login button.How to log out and log back in as another user  Go to the Tool bar at the top of the interface.  Go to username menu (your username in the top right of the screen) and choose Logout.  This will log you out and then display the login form.  In the user field, enter the name of a different user, enter the password for this user.  Click on the Login button.Logging out will send the user back to the login page.Note: in a system that uses CAS to provide single sign-on, the administrator can remove the logout option. In this case, to log out of the portal you must log out of the CAS system or close your browser.See also First steps after setupSee also Active directory/ldap authenticationSee also Accessing Bonita Portal and forms by URL",
      "url": " /bonita/7.7/bonita-portal-administration/bonita-portal-interface/log-in-and-log-out",
      "author": "",
      "categories": "Bonita Portal Administration, Bonita Portal interface"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-bonita-portal-interface-user-task-list": {
      "title": "User task list",
      "content"     : "Users task listOverviewOverviewStarting with Bonita 7.3, users benefit from a configurable task list, to manage tasks involving human actors from all processes in a more efficient fashion.This page is also made available as a custom page in Bonita Portal &amp;gt; Resources, to be used in any application or custom profiles, for users types of profiles.Here are the values of the user task list:  Default Master/Detail design pattern, to view list and form in the same screen  Panel expand feature, to display wide forms in a large modal window  List settings: number of tasks in a page, choice of columns, columns ordering  Easy access to case information, one tab away from the form. This case information is the case overview page, that the development team can customize  Easy access to case comments, also one tab away from the form or case information  Alternate “full width” list, with task information displayed in a large modal windowThis list also leverages two legacy features (prior to Bonita 7.3.0):  Dynamic task display name, for efficient task identification (insert case information in task name)  Word-based search, for efficient task name search (search for any word in the task name)To know more about how to use both features, go to How to create unique task names for user task list.The task list also contains a Done tasks filter, for the user to check if the task has been completed properly.Note: Subtask creation has not been implemented in the task list. However, subtasks created in open cases that were started in a previous Bonita version are still available to their assignees when cases are migrated to Bonita 7.3.",
      "url": " /bonita/7.7/bonita-portal-administration/bonita-portal-interface/user-task-list",
      "author": "",
      "categories": "Bonita Portal Administration, Bonita Portal interface"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-live-update": {
      "title": "Live update",
      "content"     : "Live updateNote: For Enterprise, Performance and Efficiency editions only.This page explains how to update live process definition information. You need to be logged in with the Administrator profile.ParametersConnectorsFormsScriptsCache bustingParametersHow to modify a parameter in Administrator viewNote: In versions 7.0.x, this feature is only available for Bonita Enterprise and Performance editions. Starting from version 7.1.0, this feature is available for Bonita Enterprise, Performance and Efficiency editions.  Go to Process management  Select a process and click on the More…  Select Parameters on the left side menu  A table of parameters is displayed  In the Value column, click on the parameter value you want to edit  Edit the process variable  Click ✔ button to save itConnectorsHow to edit connector implementation in Administrator viewNote: In versions 7.0.x, this feature is only available for Bonita Enterprise and Performance editions. Starting from version 7.1.0, this feature is available for Bonita Enterprise, Performance and Efficiency editions.  Go to Process management  Select a process and click on the More…  Select Connectors on the left side menu  In the connector definitions table, in the actions column, click on the pencil button  Browse to a .zip file containing the new connector implementation  Click on Save to import the new implementation.FormsHow to add/edit a form or a page of a process in Administrator viewNote: For Bonita Enterprise, Performance and Efficiency editions.  Go to Process management  Select a process and click on the More…  Select Forms on the left side menu  Select Form List tab  In the table, in the actions column, click on the pencil button or the plus sign button  Browse to a .zip file containing the new page/form  Click on Next to check the permissions associated with the uploaded page/form.  Click on Confirm to import the new page/form.How to update the form/page mapping of a task, process overview or process instantiation in Administrator viewNote: For Bonita Enterprise, Performance and Efficiency editions.  Go to Process management  Select a process and click on the More…  Select Forms on the left side menu  In the table, click on the current mapping name of the task you want to update  Enter the name of the already uploaded page/form or a URL that will handle the task submission  Click ✔ button to save itScriptsHow to edit a script of a process in Administrator viewNote: For Bonita Enterprise, Performance and Efficiency editions.  Go to Process management  Select a process and click on the More…  Select Scripts on the left side menu  In the displayed tree, find the script you want to update or enter the script name in the înput field  Click on the pencil Button in front of the script name  Edit the script in the displayed editor  Click on Save to update the script contents.The Scripts section of the process more details page allows to update a TYPE_READ_ONLY_SCRIPT Expression or a TYPE_CONSTANT Expression when associated to a Groovy script connector Warning: The script dependencies are fixed, i.e. when the process is implemented the developer designed the script to use some variables and/or parameters. The live update capability cannot go against this design and only allows to change the script content. If the new script tries to use more variables, it will lead to execution errors. To change the script dependencies (data available in the script execution context), the process definition must be updated and a newer version of the process deployed.Cache bustingCache busting has been introduced in Bonita 7.6, along with a new cache policy.It allows end users to benefit from custom page update without the need to empty the browser cache.When you export a page or a layout from the UI Designer, we suffix the resource filename with a hash. If the page is updated, the resource filename will change, and the browser will download it from the server, and not from the cache.If you don’t use the UI Designer to edit and export your custom page, don’t forget to manually trigger the cache busting mechanism. Without this cache busting, end users won’t benefit from the latest custom page changes, unless they empty their browser cache.",
      "url": " /bonita/7.7/bonita-portal-administration/live-update",
      "author": "",
      "categories": "Bonita Portal Administration"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-look-feel-creating-a-new-look-feel": {
      "title": "Create a new Look &amp; Feel",
      "content"     : "Create a new Look &amp;amp; FeelNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.A Look &amp;amp; Feel is defined in a set of files. You can set the Look &amp;amp; Feel for the Bonita Portal Web interface, an application, a custom page, or for the Bonita Portal Mobile interface.This page explains how to modify the Look &amp;amp; Feel of Bonita Portal and of forms in processes run from the Portal.IntroductionBonita Portal Web default Look &amp;amp; FeelBonita Portal Mobile default Look &amp;amp; FeelRecommendation: Form footersIntroductionTo create a new Look &amp;amp; Feel in Bonita Portal, export the default Look &amp;amp; Feel and modify the relevant components. You can either edit the files directly, or you can use a plugin and update the Look &amp;amp; Feel in a browser. When the new Look &amp;amp; Feel is ready, import and apply the new Look &amp;amp; Feel.There are two types of page in the Portal: pages developed with GWT, as in earlier versions, and new pages, such as the Case monitoring page, that have been developed using Angular. The two types of page have different mechanisms for defining Look &amp;amp; Feel.This means that in some cases, you might need to specify a Look &amp;amp; Feel element in two places to get a consistent look for your Portal and custom pages.For GWT pages, the most critical file in the Look &amp;amp; Feel definition is skin/skin.config.less file. Any change you make to this file is automatically implemented in all the pages of the Portal or forms that do not use the Bootstrap Look &amp;amp; Feel, so this is where we recommend that you make all changes, if possible. For example:  To change the color of the menu bar, edit skin/skin.config.less and update the setting of @mainAccentColor to replace the default red (#b20706;) with the hexadecimal code for your preferred color. As an example, this file contains a line that you can uncomment to set the color to blue.  To change the font, edit skin/skin.config.less and update the setting of @skinFont to specify the font you want to use.  To replace the BonitaSoft logo with your own logo, create a transparent .PNG file with your logo and put it in the skin/images directory. Then edit skin/skin.config.less, and replace logo.png with your logo file. If your logo is not the same size as the default BonitaSoft logo, edit the loginPage-logo-width:and loginPage-logo-height: properties and specify the correct width and height.For pages developed in Angular, the Look &amp;amp; Feel is defined using Bootstrap. To modify the Look &amp;amp; Feel, update the skin definition in skinbootstrapportal for Portal pages or in skinbootstrapapplications  for applications.There are five key files that must be present in the zip archive when you import a Look &amp;amp; Feel:  BonitaConsole.html: HTML entry page for Bonita Portal. If you want to add a custom JavaScript or custom CSS, modify this file and add it to the header.  BonitaForm.html: HTML entry page for forms in Bonita Portal. If you want to add a custom JavaScript or custom CSS, modify this file and add it to the header.  main.less: Used to compile the LESS files into the CSS used for the GWT pages in the Portal. You must not rename this file, and we recommend that you do not change it.  skinbootstrapapplicationsmain.less: Used to compile the LESS files into the CSS used for applications.  skinbootstrapportalmain.less: Used to compile the LESS files into the CSS used for Portal pages developed in Angular.If you change any other file, you must test that the change has the required effect.If you have applied a custom Look &amp;amp; Feel in an earlier version, when you migrate to this version, the Look &amp;amp; Feel is automatically migrated to the new structure for both GWT and Angular pages. If you want to see how your custom Look &amp;amp; Feel is defined in this version, export the Look &amp;amp; Feel before and after migration and compare the zip files.Note: To provide you the best flexibility and adaptability, we do not run any security tests on the imported Look &amp;amp; Feel theme, so you must make sure that youdo not upload any malicious or vulnerable code. If you wish to learn more about web security and the most common web vulnerabilities, see the OWASP site.The tables below show the directories and the most important files that are present in the Look &amp;amp; Feel definition.Bonita Portal Web default Look &amp;amp; Feel| Component | Description | | —— | —— || BonitaConsole.html | HTML entry page for Bonita Portal. If you want to add a custom JavaScript or custom CSS, modify this file and add it to the header. | | BonitaForm.html | HTML entry page for forms in Bonita Portal. If you want to add a custom JavaScript or custom CSS, modify this file and add it to the header. | | bonita_ie8.css | Specific CSS content for Internet Explorer 8 support. | | main.less | Used to compile the LESS files into CSS. You must not rename this file, and we recommend that you do not change it. | | css | Directory containing default CSS files used by the process forms. | | css/bonita_forms.css | Default CSS for process forms. | | css/footer.css | CSS for footers in process forms. | | images | Directory of images. These images are the size needed for the standard layout.  If you change the layout, you might need to adjust the images sizes. If you want to use an image that is a different size, you might need to modify the layout. | | init/reset.less | For browser compatibility, do not change. | | PIE.htc | Functions required for some CSS features to work in Internet Explorer. | | scripts | Directory of scripts, including JQuery scripts.  | | skin | Contains LESS files and directories for fonts and images used in the skin. | | skin/bootstrap/applications | Customizations to Bootstrap for applications.  Change these files to modify the appearance of application pages. | | skin/bootstrap/applications/main.less | The entry point that identifies the files to be compiled to create the Bootstrap Look &amp;amp; Feel for applications. | | skin/bootstrap/portal | Customizations to Bootstrap for the Portal. Change these files to modify the appearance of Portal pages. | | skin/bootstrap/portal/main.less | The entry point that identifies the files to be compiled to create the Bootstrap Look &amp;amp; Feel for Portal pages developed with Angular. | | skin/skin.config.less | The main LESS file that defines the appearance. Change this file to modify the appearance of Bonita Portal web &amp;lt;not mobile&amp;gt;. You only need to modify the other LESS files if you want to change the behaviour of the pages. | | tools | Contains special files required for compatibility with Internet Explorer.  | | VERSION | Contains the version flag. Do not update or delete this file.  |Bonita Portal Mobile default Look &amp;amp; FeelComponent  Description  css  Directory containing CSS files.  css/jquery.mobile.structure-1.2.0.min.css  JQuery Mobile default CSS.  css/style.css  JQuery Mobile default theme CSS.  img  Directory of images. These images are the size needed for the standard layout.  If you change the layout, you might need to adjust the images sizes.  If you want to use an image that is a different size, you might need to modify the layout.  themes  Directory containing CSS files overriding the JQuery files (theme for Bonita mobile).  themes/images  Directory of images used in the themes.  themes/bonitasoft.css  Theme CSS.  themes/bonitasoft.min.css  Minified theme CSS.  Recommendation: Form footersThere are sometimes problems with the appearance of form footers after migration. If this is the case, update the moredetails.less file of the Look &amp;amp; Feel to include the following definition:#formframe, .forms-view, .forms-view .frame {  height: 100%;  width: 100%;}.forms-view .toolbar {  margin: 30px 0 40px 0;  padding: 0 35px 0 40px;}.forms-view .toolbar.empty {  margin: 0;  padding: 0;}.page_performTask .body, .page_StartProcess .body, .page_DisplayCaseForm .body {  padding-bottom: 0 !important;  margin-bottom: 0 !important;  display: block !important;  overflow: hidden;}With this definition, the form footer is displayed instead of the Portal footer, and the form’s iframe is now contained in a table row. This is recommended for easier maintenance and to avoid issues at future migrations.",
      "url": " /bonita/7.7/bonita-portal-administration/look-feel/creating-a-new-look-feel",
      "author": "",
      "categories": "Bonita Portal Administration, Look & Feel"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-look-feel-managing-look-feel": {
      "title": "Manage Look &amp; Feel",
      "content"     : "Manage Look &amp;amp; FeelNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.A Look &amp;amp; Feel defines the appearance of Bonita Portal Web interface and Bonita Portal Mobile interface.A Look &amp;amp; Feel is not used to specify Application layout and theme. To modify Application layout and theme, see Specifying application layout and Specifying application themeImport and apply a new Look &amp;amp; FeelExport the current Look &amp;amp; FeelExport the default Look &amp;amp; FeelRestore the default Look &amp;amp; FeelImport and apply a new Look &amp;amp; FeelThe Bonita Portal Web interface and the Bonita Portal Mobile interface each have a Look &amp;amp; Feel, which is defined in a set of files in a zip archive.You can create a new Look &amp;amp; Feel for one of these items. When you have created the new Look &amp;amp; Feel, you apply it using Bonita Portal, as follows:  Log into Bonita Portal as Administrator.  Go to the Configuration menu and choose Look &amp;amp; Feel.  In Filters list on the left, choose the item for which you have a new Look &amp;amp; Feel: Web Portal or Mobile Portal.  In the Import and apply a new Look &amp;amp; Feel zone, use the file chooser to specify the zip file containing the new Look &amp;amp; Feel, and then click Apply.  The new Look &amp;amp; Feel is imported and applied instantly.Export the current Look &amp;amp; FeelYou can export the current Look &amp;amp; Feel to modify it or to import it into other Bonita Portals.Exporting the Look &amp;amp; Feel creates a zip archive containing the files that make up the Look &amp;amp; Feel definition.It has no effect on the Look &amp;amp; Feel currently being used.To export the current Look &amp;amp; Feel:  Log into Bonita Portal as Administrator.  Go to the Configuration menu and choose Look &amp;amp; Feel.  In Filters list on the left, choose the item for which you want to export the Look &amp;amp; Feel: Web Portal or Mobile Portal.  In the Export the current Look &amp;amp; Feel zone, click Export.  In the pop-up, specify the zip archive name and location and click OK. The Look &amp;amp; Feel is exported into a zip archive with the name and location you specified.Export the default Look &amp;amp; FeelYou can export the default Look &amp;amp; Feel to use it as the starting point for creating your own Look &amp;amp; Feel. Exporting the Look &amp;amp; Feel creates a zip archive containing the files that make up the Look &amp;amp; Feel definition.You can always export the default Look &amp;amp; Feel, even if a customized Look &amp;amp; feel is currently in use.To export the default Look &amp;amp; Feel:  Log into Bonita Portal as Administrator.  Go to the Configuration menu and choose Look &amp;amp; Feel.  In Filters list on the left, choose the item for which you want to export the default Look &amp;amp; Feel: Web Portal or Mobile Portal.  In the Export the default Look &amp;amp; Feel zone, click Export.  In the pop-up, specify the zip archive name and location and click OK. The default Look &amp;amp; Feel is exported into a zip archive with the name and location you specified.Restore the default Look &amp;amp; FeelRestoring the default Look &amp;amp; Feel replaces the Look &amp;amp; Feel that is currently in use with the default Look &amp;amp; Feel provided with Bonita.Warning: restoring the default Look &amp;amp; Feel overwrites the current Look &amp;amp; Feel. If you want to keep a copy of the current Look &amp;amp; Feel, export it into a .zip archive before you restore the default.To restore the default Look &amp;amp; Feel:  Log into Bonita Portal as Administrator.  Go to the Configuration menu and choose Look &amp;amp; Feel.  In Filters list on the left, choose the item for which you want to restore the default Look &amp;amp; Feel: Web Portal or Mobile Portal.  In the Restore the default Look &amp;amp; Feel zone, click Restore.  The default Look &amp;amp; Feel is restored.If you have a REST client in your browser (for example a plugin for Chrome or Firefox), you can restore the default Look &amp;amp; Feel using the Web REST API.This is useful if you have accidentally loaded a Look &amp;amp; Feel that contains errors and the Restore button is not usable. To restore the Look &amp;amp; Feel using a REST client:  Use the REST client to log in as a registered user of the Engine.  Create a PUT request of the form http://localhost:8080/bonita/API/portal/theme/default, specifying the relevant hostname and port number.  In the request body, specify {&quot;type&quot;:&quot;portal&quot;} to restore the web Look &amp;amp; Feel, or{&quot;type&quot;:&quot;mobile&quot;} to restore the mobile Look &amp;amp; Feel.  Send the request. This will restore the default Look &amp;amp; Feel.The next time you load a Portal page, the default Look &amp;amp; Feel is used.Restoring the default Look &amp;amp; Feel with a REST clientIt is also possible to restore the default Look &amp;amp; Feel using the Bonita Engine API.",
      "url": " /bonita/7.7/bonita-portal-administration/look-feel/managing-look-feel",
      "author": "",
      "categories": "Bonita Portal Administration, Look & Feel"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-mobile-portal": {
      "title": "Mobile Portal",
      "content"     : "Mobile PortalThe mobile version of Bonita Portal only displays functions available to the logged-in user only. Functions for other profiles are not available.Security loginDo I need a special license?What deployment bundle do I need to access the mobile version?How do I access it?ProfileMobile languageNavigationWhat menus and functions are available?Start a new caseSecurity loginUse the same user login and password as Bonita Portal (based on the same database)Do I need a special license?You will need an Efficiency license (and above) to run the mobile versionWhat deployment bundle do I need to access the mobile version?Bonita Subscription Pack editionHow do I access it?Add /mobile after Bonita in the URLFor example: http://localhost:8080/bonita/mobileProfileOnly the user profile is available.Mobile language  How do I change the language of the mobile interface  You need to change the language in the Bonita Portal firstsee LanguagesNavigationThe navigation is slightly different from the Portal (first choose a filter to list corresponding tasks, then click on a task in the list to display it).Note: to display forms properly in the mobile version, only create a form with one column. If more than one column is used in a form design, then you will have to right scroll to display all the form.What menus and functions are available?Display and perform tasks, create subtasks, add comments.Start a new caseYou can now start a case from the mobile version. Click Apps to see a list of the processes for which you can start a case. Click on an App to start a case.Here some examples of the mobile user screens: ![Mobile_interface  ![Mobile_interface  ![Mobile_interface  ![Mobile_interface  ![Mobile_interface  ![Mobile_interface  ![Mobile_interface  ![Mobile_interface ",
      "url": " /bonita/7.7/bonita-portal-administration/mobile-portal",
      "author": "",
      "categories": "Bonita Portal Administration"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-organization-in-bonita-portal-organization-in-bonita-bpm-portal-overview": {
      "title": "Organization in Bonita Portal overview",
      "content"     : "Organization in Bonita Portal overviewIn Bonita Portal, a user with the Administrator profile active can view all the parts of an organization including:  the parent groups  child groups  the number and list of users in a group  the manager of each user  the email address of a user  the date and time of the user’s last login  the roles created and the number of users with that roleThe Administrator has the right to:  import an organization exported from Bonita Studio  export an organization from Bonita Portal  create and delete groups  create and delete roles  create and manage users and manage membershipsDeveloper environment: When you are testing a process locally by running it from Bonita Studio, the default organization defined in the Studio is automatically published to the Bonita Portal.Production environment: When you first launch Bonita Portal in a Production environment, there is no default organization.You must create a user with the Administrator profile. This user can than create and manage the organization.",
      "url": " /bonita/7.7/bonita-portal-administration/organization-in-bonita-portal/organization-in-bonita-bpm-portal-overview",
      "author": "",
      "categories": "Bonita Portal Administration, Organization in Bonita Portal"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-organization-in-bonita-portal-organization-maintenance-custom-user-information-in-bonita-bpm-portal": {
      "title": "Custom User Information in Bonita Portal",
      "content"     : "Custom User Information in Bonita PortalOverviewHow to view custom information for a userHow to edit Custom information for a single userOverviewCustom User Information defined in the Organization in Bonita Studio is displayed in the Bonita Portal in the More page for a user (only accessible under the Administrator profile).The Users with custom information filter in Bonita Studio uses this custom information to map which users can perform tasks in the Bonita Portal.In Bonita Portal, this custom information can only be accessed and edited by a user (Administrator profile only).Note: if no customer user definitions are set in Bonita Studio, then no information will be displayed in the Bonita Portal. However definitions can be added and modified manually and using the WEB REST APINote: the custom user definition cannot be modified in Bonita Portal by the admin. The custom value for a user can be modified by the Administrator.This gives flexibility to the admin to re-assign tasks to different users.The Organization .xml file can also be exported from Bonita Portal, and modified by hand externally, then re-imported back into Bonita Portal.The API can also modify the organization.See Custom User Information in Bonita StudioHow to view custom information for a user  Log on as a user with&amp;gt;Administrator rights.  Go to the Organization menu and choose Users.  Select a user in the list, by clicking on a name.  Click More.  The custom user definition and value are displayed in the zone called Other.How to edit Custom information for a single user  **Log on ** as a user with Administrator rights.Go to the Organization menu and choose Users.Select a user in the list, by clicking on a name.  Click More.  The custom user definition and value are displayed in the zone called Other.  Click Edit user in the top right corner of the screen.  In the Edit a user pop-up window, click on the Other tab.  Enter a value for the definition (defined in Bonita Studio), which will only be added to this user.  Click Save. This closes the pop-up.  The new value for the the definition will be updated and displayed in the Other zone.Note that changing the value will modify the filtering and map the user to a different task.",
      "url": " /bonita/7.7/bonita-portal-administration/organization-in-bonita-portal/organization-maintenance/custom-user-information-in-bonita-bpm-portal",
      "author": "",
      "categories": "Bonita Portal Administration, Organization in Bonita Portal, Organization maintenance"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-organization-in-bonita-portal-organization-maintenance-group": {
      "title": "Manage groups",
      "content"     : "Manage groupsLogged on with the Administrator profile, you have rights to manage groups as follows:How to create a groupHow to delete a groupHow to edit a groupMore information about the groupHow to create a group  Go to the Organization menu and choose Groups.  Click Create a group.  In the pop-up window, enter the name (required), the parent group and a description.  Click Create.NB: Bonita doesn’t support the ‘/’ character in the group name field. A group name that contains a ‘/’ may lead to unstable behaviour and may be forbidden in the future.How to delete a group  Go to the Organization menu and choose Groups.  Check a box to select a group.  Click Delete.  In the popup window, click Delete.How to edit a group  Go to the Organization menu and choose Groups.  Check a box to select a group.  Click Edit.  In the popup window, update the group information.  Click Save.More information about the group  Go to the Organization menu and choose Groups.  Click on a group in the list of groups. A list of users and subgroups in this group is displayed.  In the Direct users list, you can click a user name to get more information about the user.",
      "url": " /bonita/7.7/bonita-portal-administration/organization-in-bonita-portal/organization-maintenance/group",
      "author": "",
      "categories": "Bonita Portal Administration, Organization in Bonita Portal, Organization maintenance"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-organization-in-bonita-portal-organization-maintenance-import-export-an-organization": {
      "title": "Import/export an organization",
      "content"     : "Import/export an organizationLogged on with the Administrator profile, you have rights to import or export an organization.How to import an organizationHow to export an organizationHow to import an organizationCaution:This will import a file containing your whole organization data. This organization data will be merged with existing data.In case of conflict, the priority is given to the data in the imported file. Take care not to overwrite information that has been updated in Bonita Portal.Note:In 6.3 there was a change to the structure of the .xml file. This means that you cannot import into Bonita Portal 6.3.0 or later an organization .xml file that was created in 6.2.x or earlier.You will need to first import the organization file into Bonita Studio and re-export it, so it is compatible.To import an organization in .xml format, that has already been exported from Bonita Studio, containing your whole organization data.Be careful, your organization will be merged with existing data.  Go to Organization &amp;gt; Import/Export.  Click Click here to choose your file. The xml file will be displayed in the import file field.  Click Import.  Click Save.How to export an organization  Go to Organization &amp;gt; Import/Export.  Click Export.This will export an organization from Bonita Portal. Users, groups and roles will be exported in a file in .xml format.See the video..",
      "url": " /bonita/7.7/bonita-portal-administration/organization-in-bonita-portal/organization-maintenance/import-export-an-organization",
      "author": "",
      "categories": "Bonita Portal Administration, Organization in Bonita Portal, Organization maintenance"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-organization-in-bonita-portal-organization-maintenance-manage-users-deactivate-a-user": {
      "title": "Deactivate a user",
      "content"     : "Deactivate a userNote: If a user is deactivated, the user cannot log in to Bonita Portal. The Administrator cannot add a membership to a deactivated user. In consequence, the **Add membership button ** is not displayed for a deactivated user.How to deactivate a userHow to activate a deactivated userHow to deactivate a user  Go to the Organization menu and choose Users.  Select a user in the Active list.  Click Deactivate.  A warning message is displayed:Warning: You risk interrupting one or more processes.Deactivating the only user able to perform a task will cause the interruption of a process.Before proceeding, you may want to go to the ‘More’ page of the process and check the actor mapping.Are you sure you want to deactivate this user now?  The user is moved from the Active list to the Inactive list.How to activate a deactivated user  Go to the Organization menu and choose Users.  Go to the Inactive list.  Select user from list.  Click activate.  The user is moved from the Inactive list to the Active list.",
      "url": " /bonita/7.7/bonita-portal-administration/organization-in-bonita-portal/organization-maintenance/manage-users/deactivate-a-user",
      "author": "",
      "categories": "Bonita Portal Administration, Organization in Bonita Portal, Organization maintenance, Manage users"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-organization-in-bonita-portal-organization-maintenance-manage-users-manage-a-user": {
      "title": "Manage a user",
      "content"     : "Manage a userLogged on with the Administrator profile, you have rights to manage users as follows.How to create a userHow to edit a userHow to add a membership to a userHow to delete membership of a userHow to edit user rightsHow to create a userReminder: do not create a user with the same login and password as the platform user or the tenant administration (also called the technical user).  In the Portal, go to the Organization menu and choose Users.  Click Create a user.  In the pop-up window, enter the login, password, first name and last name of the new user.  Click Create to confirm the creation.  A page is displayed confirming the information about the new user.How to edit a user  Go to the Organization menu and choose Users.  Click on a user.  Click More.  Click Edit user.  Edit the details about the user in the popup window.  Click Save.How to add a membership to a user  Go to the Organization menu and choose Users.  Click More.  Click Add membership.  In the pop-up window, enter the group and role.  Click Add.How to delete membership of a user  Go to the Organization menu and choose Users.  Click More.  In the Membership table, find the membership to be deleted and click Delete.  In the pop-up window, click Delete.How to edit user rightsThe rights of a user are defined by mapping the user to a profile.To map a user to a profile:  Go to the Organization menu and choose Profiles.  Select a profile.  Click More.  In the Users mapping section, click Add a user.  in the popup, click the checkbox to select the user to add.  Click Add.The user is mapped to the profile.To see all the profiles that are mapped to a user, go to the Organization menu, choose Users and then select the user. The mapped profiles are shown in the Profile section on the right.",
      "url": " /bonita/7.7/bonita-portal-administration/organization-in-bonita-portal/organization-maintenance/manage-users/manage-a-user",
      "author": "",
      "categories": "Bonita Portal Administration, Organization in Bonita Portal, Organization maintenance, Manage users"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-organization-in-bonita-portal-organization-maintenance-role": {
      "title": "Manage roles",
      "content"     : "Manage rolesLogged on with the Administrator profile, you have rights to manage roles as follows:Create a roleAssign a role to a userEdit a roleDelete a roleMore information about a roleCreate a role  Go to the Organization menu and choose Roles.  Click on the Create a role button in the top left corner.  In the pop-up window, enter the avatar (picture) to represent the role (optional).  Enter the name, the display name, and a description of the role.  Click Create. The new role will be displayed in the list of roles.Assign a role to a user  Go to the Organization menu and choose Users. The list of users in the organization will be displayed.  Click on a User.  Click on More  In Memberships, click Add.  Choose the group and role for the user.  Click Add.Edit a role  Go to the Organization menu and choose Roles.  Click a checkbox to select a role.  Click Edit.  In the popup window, update the role information.  Click Save.Delete a role  Go to the Organization menu and choose Roles.  Click a checkbox to select a role.  Click Delete.  In the popup window, click Delete.More information about a role  Go to the Organization menu and choose Roles.  Click a checkbox to select a role. A list of users who have this role is displayed.",
      "url": " /bonita/7.7/bonita-portal-administration/organization-in-bonita-portal/organization-maintenance/role",
      "author": "",
      "categories": "Bonita Portal Administration, Organization in Bonita Portal, Organization maintenance"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-process-maintenance-bdm-management-in-bonita-bpm-portal": {
      "title": "BDM Management in Bonita Portal",
      "content"     : "BDM Management in Bonita PortalProcesses using Business Objects with persisted data need to run with a Business Data Model deployed in the Bonita Portal.Only one model can be deployed at a time in the Portal, so make sure it contains the Business object definition used in all processes that will run within this tenant.The Business objects must match the structure used by the deployed processes. Make sure that when modifying the Business Model, the process is modified accordingly.  To import the Business Data Model created in Bonita  Studio, first export the Business Data Model from Bonita  Studio where it was designed.  In the Bonita  Portal, log in as the technical user (default login ‘install’, default password ‘install’).  Go to the BPM Services menu.  Click on Pause to pause the tenant. Note: The deployment of a Business Data Model requires pausing the service during the operation, so that the update can be performed without affecting ongoing processes.  For Enterprise, Efficiency and Performance editions, you must have no access control file installed in order to be able to install or update the Business Data Model.  When services are paused, go to the BDM menu.  A page called Business Data Model definition is displayed.  Click on install button and choose the file containing the Business Data Model exported from Bonita Studio, and click on install button in the popup.  A warning is displayed: Warning: The Business Data Model will now be installed.Please note that existing business database tables will be modified definitively. This action cannot be reversed. It is highly recommended to back up the database before proceeding.  The Portal will load the file, retrieve the object definition and enable processes to use them at runtime. The portal will also create or update the database schema (set of tables, columns, indexes…)in the business database, so as to store business objects appropriately when modified by processes.  The Business Data Model will now be installed.  Go to the BPM Services menu.  Click on Resume to resume tenant activity. Warning:  Since business continually evolves, you may need to make some changes to a BDM already in production.Bonita uses Hibernate for data persistence, therefore some changes are handled well, like adding new objects or attributes, but some others, like changing the type of an attribute, we cannot guarantee so far.In such cases, you will have to implement the change on your own, through careful actions in a staging environment, and after the backup of your database.This limitation is well known and will be addressed in a future Bonita version.Note: For Enterprise, Efficiency and Performance editions only.It is possible to define Business Data Model access control rules in Bonita Studio and import them in Bonita Portal.The Access control rules must match the Business Data model.  To import the BDM access control rules created in Bonita Studio, first export the Access Control file from Bonita Studio where it was designed.  In the Bonita Portal, log in as the technical user (default login ‘install’, default password ‘install’) or as a user with the administrator profile.  As the tenant technical user or as an administrator, go to the BDM menu.  A page with a section Business Data Model access control is displayed.  Click Install to open import popup and choose the file containing the Business Data Model access control definition exported from Bonita Studio, and click on Install.  A successful import message will be displayed.Please note that a delay is required after the import for the engine to process the access control and for the filtering to be effective. Note: Contrary to the BDM definition, the deployment of a Business Data Model access control file doesn’t require pausing the BPM services during the operation.",
      "url": " /bonita/7.7/bonita-portal-administration/process-maintenance/bdm-management-in-bonita-bpm-portal",
      "author": "",
      "categories": "Bonita Portal Administration, Process maintenance"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-process-maintenance-cases": {
      "title": "Cases",
      "content"     : "CasesLogged on with the Administrator or Process Manager profile, you have rights to manage a case as follows:Add a comment to a caseStart a case for another userView status of casesAdd a comment to a case  Go to BPM &amp;gt; Cases  Click a Case id or ellipsis icon.  Enter a comment in the comment field  Click Add commentStart a case for another userThis feature is available with the Efficiency, Performance and Enterprise editions.To start a case for another user:  Go to BPM &amp;gt; Processes.  Select the process and click Start for.  In the popup, specify the user for whom you are starting the case. Only valid users for the case are displayed.  Click Start.The case is started as though the specified user had started it. For example, if a you start a case for user A and a subsequent task is to be done by the manager of the user, it is assigned to user A’s manager, not to your manager.View status of casesTo view the open or archived cases, go to BPM &amp;gt; Cases. The case table is displayed, showing the open cases. To switch between Open cases and Archived cases cases, use the tabs.In a row in the table, you can click a case id or the ellipsis icon to open the case details page, or click the process name to open the process details page.You can change the view to see only the information that you need:  View the cases of a specified process, by selecting the process name, or name and version, from the dropdown lists.  Search indexes are also available as additional columns. In this way, you can use search indexes for adding business information to your cases. It is also possible to search on search indexes values.  Filter the cases by state, by choosing With failures or All from the State dropdown list. The Failed tasks column shows the number of failed tasks and tasks where a connector has failed when starting or ending a case. A connector failure at a task is counted as a task failure. Connector failures on case start or end are shown by an exclamation point (!).  Add or remove a column in the table, by selecting or deselecting it in the Columns menu.  Change the column order, by dragging and dropping the column name in the Columns menu.  Sort the table in ascending or descending order of one of the columns, by clicking arrow beside the column header. If the table is already sorted by the column you select, the first click reverses the sort order. If the table is currently sorted by some other column, clicking the header sorts by this column in ascending order. You can then click on the arrow to reverse the sort order.These changes to the view are stored in your browser Local Storage: If you navigate away from the page then go back, the view will be as you configured it. If you reload the page, or close and reopen the same browser, your stored changes will be reapplied. If you want to go back to the default view settings, clear your browser cache and local storage.From this table, you can delete a cases, or several cases. Select the cases you want to delete, and click Delete. Confirm in the popup that you want to delete the selected cases.if you are using the Enterprise, Performance or Efficiency edition, you can also open a diagram of a case, by clicking on the picture icon for the case. On the diagram, colored flags on the steps show the number of step instances in the possible states. Click Show key to see an explanation of the display. Remember that a failure at a step does not necessarily mean that the case has failed entirely, but it might indicate that some action is needed, perhaps to replay a connector.The process diagram is constructed from the deployed process definition. This means that some details visible in Bonita Studio, such as comments, are not available.Note: if a process was deployed from a bar file created in Bonita Studio 6.3 or earlier, the diagram display is not available. This is because some details of the .bar structure have changed. To see the diagram for such a process, export the process definition from Bonita Studio 6.3 as a .bos file, import it into Bonita Studio 6.4 or later, generate a new .bar file, and deploy it.",
      "url": " /bonita/7.7/bonita-portal-administration/process-maintenance/cases",
      "author": "",
      "categories": "Bonita Portal Administration, Process maintenance"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-process-maintenance-monitoring": {
      "title": "Monitoring",
      "content"     : "MonitoringNote: For Enterprise, Performance and Efficiency editions only.Monitoring gives information relative to a process.This is only available to the Administrator and Process Manager profile.Go to Process management &amp;gt; Monitoring for Administrator and Monitoring for Process Manager.The Monitor open cases page is displayed, with the following summary information:  Number of cases with failure  Number of healthy cases  Number of open cases  A table of open casesYou can filter the table to show only a specified process, or process and version. You can also filter it by case state.Process Manager users can see only the processes they manage.From a row in the table, you can click the list icon to see a list of cases of the process. You can also open a diagram of a process, by clicking on the picture icon for the process. On the diagram, you can see that number and state of cases in progress at each step.Click Show key to see an explanation of the display.The process diagram is constructed from the deployed process definition. This means that some details visible in Bonita Studio, such as comments, are not available.Note: if a process was deployed from a bar file created in Bonita Studio 6.3 or earlier, the diagram display is not available. This is because some details of the .bar structure have changed. To see the diagram for such a process, export the process definition from Bonita Studio 6.3 as a .bos file, import it into Bonita Studio 6.4 or later, generate a new .bar file, and deploy it.",
      "url": " /bonita/7.7/bonita-portal-administration/process-maintenance/monitoring",
      "author": "",
      "categories": "Bonita Portal Administration, Process maintenance"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-process-maintenance-pause-and-resume-bpm-services": {
      "title": "Pause and resume services",
      "content"     : "Pause and resume BPM servicesFor certain maintenance tasks that require a change to database tables or to information used by several processes (for example to update the business data model), it is necessary to pause your Bonita service temporarily while it is updated. This is done by pausing the tenant. While a tenant is paused, only the technical user has access to Bonita Portal.When you pause a tenant, this has the following consequences:  Only the technical user can log in to the Portal.  Users who are currently logged in, including Administrator users, are automatically logged out.  Users who are filling in forms when the service is paused will lose any information that has not been submitted.  All processes are automatically paused.The following sections explain how to pause and resume service in a tenant using Bonita Portal. You can also use the Engine API or the Web REST API.Pause a tenantResume a tenantPause a tenantTo pause a tenant:  Log in to Bonita Portal as the tenant technical user.  Go to Configuration &amp;gt; BPM services  Click the Pause button.  In the popup, click Pause to confirmation that the tenant is to be paused.  The tenant is immediately paused.Resume a tenant  Log in to Bonita Portal as the tenant technical user.  Go to Configuration &amp;gt; BPM services  Click the Resume button.  In the popup, click Resume to confirm that you want the tenant to resume service.  The tenant resumes activity.After the service is resumed, inform users that they can now log in to the Portal.",
      "url": " /bonita/7.7/bonita-portal-administration/process-maintenance/pause-and-resume-bpm-services",
      "author": "",
      "categories": "Bonita Portal Administration, Process maintenance"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-process-maintenance-processes": {
      "title": "Processes",
      "content"     : "ProcessesLogged on with the Administrator profile, you have rights to manage a process as follows.Install a new processResolve a processEnable a processDisable a processDelete a processCreate a category for a processAdd a category to a processMake start a process available for more usersRemove an entity from an actorModify a parameter in the Administrator profileEdit a connector implementationFix formsUpload a new formEdit an existing formEdit a script contentInstall a new process  Go to the BPM tab  Click Processes  Click Install new process  Click to browse to the .bar file to import  Click InstallThe .bar file is ready to be resolved and enabledNote: if you try to install the same process twice, a message is displayed: “Process [yourProcessName] in version [yourProcessVersion] already exists.”You can only install a .bar file that was exported from a Bonita Studio of the same minor (7.x) version as your Bonita Portal and Bonita Engine. If you have a .bar file that was exported from an earlier version of Bonita Studio (7.x-1), it will not work with Bonita Engine. Export the process definition as a .bos file from your old Bonita Studio, import in into the new Studio, then export it as a .bar. This is necessary for a .bar that has not been deployed. A process that was developed in an older version of Bonita Studio and is already deployed is migrated automatically when you migrate your platform. However, for future maintenance of the process definition, you are recommended to update all your process bar files to the latest version each time you update your platform.Watch the Install a process videoResolve a processResolving a process means completing the configuration in the Portal and making sure that all dependencies are met. A process has to be resolved before it can be enabled.To resolve a process, you must complete the configuration of the actor mappings, parameters, forms, and connectors defined for the process. You can also configure other information such as Categories and Scripts, but this is not mandatory for resolving a process.  Actor mapping; Every actor in a process must be mapped to at least one user, group, role or membership.  Parameters: Every parameter defined in a process must have a value.  Connector definitions: Every connector definition in a process must have a corresponding Class name.  Business Data Model: Every business data object defined in a process must have a corresponding model.  Forms: Every form defined in a process must be mapped to a page or a URL.To resolve a process:  Go to BPM tab.  Click Processes,  Click on a Process. The Configuration section of the right panel shows whether there are items to be resolved.  Click on More.  A summary of configuration problems is displayed below the process name in a well and warning icons are displayed in the left navigation list.  Modify your configuration for each element displayed.Enable a process  Go to the BPM menu tab  Click Processes  Click Resolved filter  Select the process  Click More button  Click Enable  The activation state changes to “enabled”  The process disappears from the disabled filter and is now displayed in the enabled filterNote: You can also select the processes you want to enable by checking the box in the Resolved list, then click ENABLE button in the bulk actions sectionDisable a processDisabling a process blocks the creation of new cases. This does not impact existing cases.  Go to the BPM tab  Click Processes  Click Enabled filter  Select the process  Click Disable  The activation state changes to “disabled”  The process disappears from enabled filter and is located in the disabled filterNote: You can also disable a process in the more details view, by clicking Enabled toggle button.Delete a processNote:A process must be disabled before it can be deleted.  Go to BPM menu tab  Click Processes  Select the process to delete by checking the tickbox next to the process  Click DeleteYou can also delete the process in the more details view of a disabled process by clicking DELETE, then click DELETE in the modal windowCreate a category for a process  Go to BPM tab  Select a process in the list  Click More  In General, click the pencil next to Categories label  In the opened modal, type a new category name then press Enter key  Click SaveAfter you created a category and added to the process, you can add other processes to the category.Add a category to a process  Go to BPM tab  Select a process in the list  Click More  In General, click the pencil next to Categories label  In the opened modal, type a new category name then press Enter key, or use arrow keys to browse among exisiting categories  Click SaveMake start a process available for more usersYou need to map more organization entities to the actor labelled initiator in the process definition. To do so:  Go to the BPM tab.  Click Processes.  Select a process in the list.  Click More.  Click Actors in the left navigation.  In the Actors section, click the + button in the user, group, role or membership column of the actor line.  In the opened popup, click on the dropdown list to select one or several actors. The list displays the first five elements, then a number is displayed representing the other selected entities.  Click APPLY.Note: Notice that only the first 200 actors are displayed in the dropdown.Remove an entity from an actor  Go to the BPM tab.  Click Processes.  Select a process in the list.  Click More.  Click Actors in the left navigation.  In the Actors section, click the pencil button in the user, group, role or membership column of the actor line.  In the opened popup, there is a list of the actors already mapped.  Click the X button next to the actor, or click Remove all.  A list appears filled with the actors you can to remove. You can undo a removal by clicking X button next to the actor or by clicking Enable all  Click APPLY.Modify a parameter in the Administrator profileNote: In versions 7.0.x, this feature is only available for Bonita Enterprise and Performance editions. Starting from version 7.1.0, this feature is available for Bonita Enterprise, Performance and Efficiency editions.  Go to the BPM tab  Click Processes  Select a process  Click MORE  Click Parameters in the left navigation  In the Value column, click on the value you want to edit  A field appears  Click the Tick button to validate your change or X to dismiss your change.Edit a connector implementationNote: In versions 7.0.x, this feature is only available for Bonita Enterprise and Performance editions. Starting from version 7.1.0, this feature is available for Bonita Enterprise, Performance and Efficiency editions.  Go to the BPM tab  Click Processes  Click More button  Click Connectors  In the connector definitions table, in the actions column, click on the Pencil  Browse to a .zip file containing the new connector implementation  Click Save to import the new implementation.Fix formsNote: For Bonita Enterprise, Performance and Efficiency editions only.  Go to the BPM tab.  Click Processes.  Click More button.  Click Forms in the left navigation.  The tables are displayed which list available forms. Click on a red link.  A field input appears.  Starting to type some text, and any matching names of installed forms will be proposed. If there is no match for the name you enter, it will be considered as a URL.  Click the Tick button to validate your change or X to dismiss your change.Note: You can also upload a form in order to create a new mapping.Upload a new formNote: For Bonita Enterprise, Performance and Efficiency editions only.  Go to the BPM tab.  Click Processes.  Click More button.  Click Forms in the left navigation.  Click Form list tab.  A list of form is displayed. These forms are only visible to the current process.  Click the plus button at the bottom of the list.  A file selector popup is displayed.  Browse to a .zip containing a form.  Click NEXT, then if your form requires some authorization, it will be displayed.  Click CONFIRM.Edit an existing formNote: For Bonita Enterprise, Performance and Efficiency editions only.  Go to the BPM tab.  Click Processes.  Click More button.  Click Forms in the left navigation.  Click Form list tab.  A list of forms is displayed. These forms are only visible to the current process.  Click the pencil button of a form line.  A file selector popup is displayed.  Browse to a .zip containing a form  Click NEXT, then if your form requires some authorization, it will be displayed.  Click CONFIRM.Edit a script contentNote: For Bonita Enterprise, Performance and Efficiency editions only.  Go to the BPM tab  Click Processes  Click More button  Click Scripts in the left navigation  A script content tree is displayed.  You can search for a script by typing text in the dedicated field  Click the pencil button next to a script name  A popup window is displayed  Edit your script content  Click SAVE",
      "url": " /bonita/7.7/bonita-portal-administration/process-maintenance/processes",
      "author": "",
      "categories": "Bonita Portal Administration, Process maintenance"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-process-maintenance-subtasks": {
      "title": "Subtasks",
      "content"     : "SubtasksIn Bonita 6.x and up to Bonita 7.2.x, for Enterprise, Performance and Efficiency editions only, it was possible for a user to add a subtask to a task, for example to track an external or off-line activity that needed to be completed before the task itself could be completed.Starting from Bonita 7.3.0, creating subtasks is no longer possible.However, if a process instance has been started in a Bonita 7.2.x version or earlier, if a user has created subtasks, and if the Bonita Platform has been migrated to 7.3.0 or a later version while the case was open, then after migration the subtasks will still be visible to the users assigned to the subtasks, and they will still be able to complete them.To know more about subtasks, please refer to [7.2 documentation].",
      "url": " /bonita/7.7/bonita-portal-administration/process-maintenance/subtasks",
      "author": "",
      "categories": "Bonita Portal Administration, Process maintenance"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-process-maintenance-tasks": {
      "title": "Tasks",
      "content"     : "TasksLogged on with the Administrator or Process Manager profile, you have rights to manage a task as follows.Assign a taskUnassign a taskDo a task for another userSkip a failed taskReplay a failed taskView the failure stack-trace message on a failed taskAssign a taskA task can be assigned and reassigned if necessary to another user.  Go to BPM &amp;gt; Tasks  Click on a task in the list of tasks  Click AssignUnassign a task  Go to BPM &amp;gt; Tasks  Click on a task in the list of tasks  Click UnassignDo a task for another userWith the Efficiency, Performance and Enterprise editions, an Administrator can do a task for another user. This is useful for unblocking a case if the assigned user cannot perform a task.  Go to BPM &amp;gt; Tasks and view the list of pending Human tasks.  Select the relevant task in the list and click Do for.  In the popup, a list of users elligible to do the task is displayed.  Select the user for whom you want to do the task, and click Do it.The task is done as though the selected user has done it.Skip a failed taskIf a failed task does not impact subsequent task in a process, the Administrator can skip it. This means that the task does not have to be done successfully for the following steps to become available.  Go to BPM &amp;gt; Tasks.  Go to Failed.  Click on a Task.  Click More.  In Technical details, the reason for the failure is displayed  Click Skip.The task is moved from Failed to Done.Replay a failed taskThis feature is available with the Enterprise or the Performance edition.  Go to BPM &amp;gt; Tasks.  Go to Failed.  Click on a Task  In technical details, the details of the failure are displayed  Correct the reason for the error e.g. Connector parameters.  Click More.  Click Replay.  In the popup window **Replay task **, tick the task which failed.  Click Replay.Note: You will need to fix any parameter causing the failure, BEFORE clicking on Replay.See Modify a parameterView the failure stack-trace message on a failed taskNormally, a user will start a case of a process. The case might not start as expected. This is a called a faliure.In this case the Admin can check the failure on a connector:  Logged in as Admin, go to BPM &amp;gt; Tasks &amp;gt; Failed  On the Failed page, in the section Technical details, this shows the Connector has failed.  Click on More  There can be a list of connectors in different states. Here we can see the connector that has failed.  Click on the Failed link.  A pop-up window Failure details displays the error message and the details of the message.There are 2 options:  Either click the Skip button, to skip over the task where the connector failed. This will make the Failed message disappear on the Connector, and display Resolved instead.  Fix the problem then click Replay.",
      "url": " /bonita/7.7/bonita-portal-administration/process-maintenance/tasks",
      "author": "",
      "categories": "Bonita Portal Administration, Process maintenance"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-resources-api-extensions": {
      "title": "REST API extensions",
      "content"     : "REST API extensionsA REST API extension is a way to add extra REST resources using Bonita. REST API extensions are exported, imported, updated, and deleted as resources in Bonita Portal.If you want to learn how to create REST API extension, refer to the documentation page about Bonita Studio tooling for creating and testing REST API extensions (for Bonita subscription edition).Page below contains information about deploying a REST API manually, which is possible with all editions.Deploy a REST API extensionUsageREST API extension examplesDeploy a REST API extensionYou need to deploy the REST API zip archive using Bonita Portal:  Connect to the Bonita Portal and switch to “administrator” view.  Go to Resources. You will see the list of all resources, and a filter for each type of resource (Pages, Forms, Layouts, Themes and API extensions).  Click Add button (top left).  Click in the Archive field, then select the REST API extension zip file.  Click Next.  Click Confirm. The resource is added to the portalREST API extensions use the same authorization mechanism as the standard Bonita REST APIs. When you import the extension, the information in page.properties is used to create the appropriate resource permission mappings in Bonita (see REST API authorization for information about REST API security configuration).Note: It is also possible to deploy a REST API extension using REST portal API / “page” resource.Note: The deployment of the REST API extensions should always be made from the portal or its APIs, not directly from Engine APIs. Notably, the createPage() method of the Engine PageAPI would alllow you to deploy a REST API extension, but would not update the security settings, meaning that you would not be able to access it at runtime.Warning: If you are running Bonita in a cluster, after you import a REST API extension, you must restart the application server on all the cluster nodes.UsageA REST API extension must be deployed before any page or form resource using it is deployed.A page that uses REST API extensions must add the required resources in the page resource page.properties file.For example, if a page uses the demoHeaders, demoXml, and putResource API extensions, its page.properties must include this line:resources=[GET|extension/demoHeaders,POST|extension/demoXml,PUT|extension/putResource]If the page declares its resources correctly, then every user being able to access this page (because it is part of a custom profile or Living Application they have access to)will also be automatically granted the necessary permissions to call the REST API extension. This works the same way as with the other resources of the REST API.However, if you need to grant access to this API extension to some users regardless of the pages they have access to, then you need to add custom permissions for these users.In order to do so, edit custom-permissions-mapping.properties to give the permissions (value of the property apiExtension.permissions) declared in the page.properties of the REST API extension to the required profiles or users.Note: REST API permissions are stored in the user’s session and new permissions will only be effective for a user the next time he logs in to the portal.REST API extension examplesA REST API extension example resource and API extension viewer page are provided in administrator portal. They are located in administrator portal.To use the examples, define a custom permissions mapping for demoPermission:In a Tomcat / WildFly bundle:  Retrieve platform configuration using the setup tool.  Edit platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_portal/custom-permissions-mapping.properties.  Add the following line: profile|User=[demoPermission].  Push the changed platform configuration into database using the setup tool.  Restart Tomcat bundleIn Bonita Studio:  Open the custom-permissions-mapping.properties from Development menu &amp;gt; REST API extension &amp;gt; Edit permission mapping  Add the following line: profile|User=[demoPermission]  Save the file  Logout from the current session and log back inREST API extension examples show how to:  Customize response with additional header, cookie and response code  Get resource return a simple echo of query parameters  Use a SLF4J logger  Post resources with Json payload and return a simple echo of parameters  Return an XML content with specific media type and character set  Call to external SOAP webservice (requires internet connexion)Another REST API extension example with SQL data source is available on Bonitasoft Community. This example show how to execute SQL queries on a external database.",
      "url": " /bonita/7.7/bonita-portal-administration/resources/api-extensions",
      "author": "",
      "categories": "Bonita Portal Administration, Resources"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-resources-forms": {
      "title": "Forms",
      "content"     : "FormsThis page explains how to add a form resource to the Bonita Portal and make it available to users. Form resources are intended for use in applications.Pages are exported. imported, modified, and deleted as resources in the Portal.Form definition A form is a page that belongs to a process. It could be a process instantiation form, a human task form, or an overview form. There are some extra things to consider when you are creating a form compared with an ordinary page, concerning how data is passed between the process instance and the form.A context is the set of data provided by the process instance or task instance to the form. There is no context for a process instantiation form.A contract is the definition of that data that the form returns to the process instance. There is no contract for an overview form.Three auto-generated forms are provided by default, for process instantiation, for human task execution, and for the case overview.The process instantiation and step execution auto-generated forms are based on the relevant contract and they are a useful tool for testing and debugging your application.The overview consists of three main sections:  List of business data: it shows the content of the business variables used by the case.  List of documents: it shows the content of each document used by the case.  Timeline: it shows in chronological order information about all the actions that have been performed in the selected case.To learn how to manage the link between process and forms, go to the live update page.Application Theme accessIf your forms is viewed in an application, you will have access facilities for the application theme.The Theme.css is directly accessible by adding the following link in index.html: &amp;lt;link href=&quot;../theme/theme.css&quot; rel=&quot;stylesheet&quot; /&amp;gt;This link is already inserted in the forms you design with the UI Designer.The app URL parameter is used to retrieve the current application related Theme.The living application layout inject this app URL parameter in the targeted page/form URL, and the value is the application token.  If you create your own navigation link, you will need to include this app URL parameter in the forged form URL, in order to be able to benefit from the application theme.In the portal, the link ../theme/theme.css will point the file theme.css from the portal theme. This portal forms theme is empty, and customizable to fit to the current portal theme.",
      "url": " /bonita/7.7/bonita-portal-administration/resources/forms",
      "author": "",
      "categories": "Bonita Portal Administration, Resources"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-resources-layouts": {
      "title": "Layouts",
      "content"     : "LayoutsSince 7.3 we made some changes on the default layout.  Those changes live in the layout.css page asset and allow us to better handle the content layout of the page displayed.  Another consequence is that it removes a margin which was automatically added at the top of each pages.This page explains how to create and add a layout to the Bonita Portal, and how to use it in an application.A layout is a page used to define the main frame of an application.It defines menu positioning, a footer, or any common content that could be displayed on every page of the application.Each application can have it own layout.There is an example of layout in the portal, it is made of three containers:  layout-header  Comes with the living application menu widget to display the navigation of your application.  layout-content  Comes with the living application iframe widget to display pages or forms of your application.  layout-footer  Empty by defaultThe layout was created using the UI designer, so you can export it and edit it with the UI designer. You can add more widgets in the containers layout-header and layout-footer.The ‘layout.css’ file manages the layout behaviour, allows to display the content container in full height, and header and footer with fixed size.But it does not allow to add other widget than the living application iframe into layout-content.For example, you could:  Add elements in the layout-header, on top of the menu, like a login box or brand image  Add somme content in the layout-footerLayouts are exported. imported, modified, and deleted as resources in Bonita Portal.Layout definitionConstraintsLayout resources managementLayout resources API accesTheme accessLayout definitionA layout is imported as a zip archive containing a page.properties file and a resources folder.  The page.properties file contains the metadata for the layout (the name used in the URL, the display name, and a description). For example:name=custompage_layoutdisplayName=Application layout pagedescription=This is a layout page dedicated to new born living applications. It is created and editable using the UI designer. It allows to display an horizontal menu, and an iframe. The menu allows to target some pages and the iframe define the area to display those targeted pages.resources=[GET|living/application,GET|living/application-page,GET|living/application-menu]contentType=layoutThe resources folder must contain an Index.groovy class or an index.html file and optionally can contain some additional resources.If you create a resource with the UI Designer, the exported zip automatically has the correct format (only the contentType will have to be changed to “layout”).In case of layout edition using the UI Designer, the contentType is conserved.Export the examples to see how to structure your layout.ConstraintsA layout can only be use as the main container of an application. It cannot be used as a simple application page.Layout resources managementLayout resourcesIf you are not using Groovy, you can directly access a resource by adding a link in index.html.For example: &amp;lt;link href=&quot;css/file.css&quot; rel=&quot;stylesheet&quot; /&amp;gt;API accesIf your page is viewed in a custom profile or in an application, you will have access facilities for the portal API.you will be able to access the portal API using the following path: “../API/{API name}/{resource name}”Theme accessIf your page is viewed in an application, you will have access facilities for the application theme.The Theme.css is directly accessible by adding the following link in index.html: &amp;lt;link href=&quot;../theme/theme.css&quot; rel=&quot;stylesheet&quot; /&amp;gt;",
      "url": " /bonita/7.7/bonita-portal-administration/resources/layouts",
      "author": "",
      "categories": "Bonita Portal Administration, Resources"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-resources-pages": {
      "title": "Pages",
      "content"     : "PagesThis page explains how to use a page resource (also called a custom page) to the Bonita Portal and make it available to users. Page resources are intended for use in applications. You can also use a page resource to customize the portal, for example:  Add a welcome page, with dashboards showing activity in Bonita and related external applications.  Provide a process owner with a dashboard showing the activity of open cases of the process.  Provide a busy user with a filtered view of the task list.  Provide an administrator with a multi-attribute search facility.  Integrate a page from an external application.  Make a report available to users who do not have the Administrator profile.Pages are exported. imported, modified, and deleted as resources in Bonita Portal.Custom page definitionPageController interfaceAuthorization permissions for custom pagesCustom page examplesReuse Bonita Portal contentDebugging a custom page in developmentConstraintsPage resources managementPage resourcesAPI accessTheme accessCustom page definitionA page resource has the general resource definition. If it contains an Index.groovy file, this must implement the PageController interface optionally with libraries. If you create a custom page with the UI Designer, it has the required structure and content automatically.A custom page is displayed inside an iframe to prevent conflicts between the portal resources (for example JS and CSS) and those used in the custom page. This also reduces the risk of migration issues, for example if a custom page uses the version of JQuery provided with Bonita Portal and it is updated.PageController interfacepublic interface PageController {/*** Let the custom page parse request for specific attribute handling.** @param request the HTTP servlet request intended to be used as in a servlet* @param response the HTTP servlet response intended to be used as in a servlet* @param pageResourceProvider provide access to the resources contained in the custom page zip* @param pageContext provide access to the data relative to the context in which the custom page is displayed*/public void doGet(HttpServletRequest request, HttpServletResponse response, PageResourceProvider pageResourceProvider, PageContext pageContext);}Authorization permissions for custom pagesIf you are using REST API authorization and your custom page is an HTML page using the Web REST API, you need to specify the permissions that a user needs to have in order to access the resources in the custom page. These permissions are defined in the page.properties file. If your custom page is written in Groovy and uses the Bonita Engine Java APIs, you do not need to specify permissions.For each REST resource accessed in the page, specify the authorization needed for each method used.You can find examples of the default resources in resources-permissions-mapping.properties.The following example shows the permissions defined for a custom page that enables a user to view but not update organization information:#The name must start with &#39;custompage_&#39;name=custompage_orgViewerdisplayName=Organization viewerdescription=Organization viewer page. You cannot modify the organization from this page.resources=[GET|identity/user, GET|identity/personalcontactdata, GET|identity/professionalcontactdata, GET|identity/role, GET|identity/group, GET|identity/membership, GET|customuserinfo/user, GET|customuserinfo/definition, GET|customuserinfo/value] Custom page examplesTwo custom page examples are available in the Bonita Portal. Both examples show how to:  Get the Bonita CSS  Write simple HTML code  Get session information, including the locale  Get resources from the custom page definition  Call the Engine Java APIs (in the Groovy example) or the Web REST APIs (in the.md example)  Write a clickable link to an external page  Write a clickable link to a portal page  Write locale-specific messagesGroovy example page defines a custom page using Groovy. HTML example page defines a custom page using only HTML. In practice, you will probably use a combination of Groovy and HTML to create your custom pages.To view an example page, publish the page to a custom profile or an application so that you can view it in the portal. To view the source of an example, export the custom page.On the Customer Portal, there is also an example in the form of a seed project for creating custom pages using AngularJS and a customizable example task list page.Reuse Bonita Portal contentYou can reuse pages from the Bonita Portal in your custom pages. For example, in a page that gives details of a case history, you could include the live case status diagram to show the current status. For example, for case 1 of process definition 8270554088248243867, include these lines in your custom page definition:def idProcess = &quot;8270554088248243867&quot;;def idCase = &quot;1&quot;;out.write(&quot;&quot;&quot;&amp;lt;iframe src=../portal.js/#/admin/monitoring/${idProcess}-${idCase}&quot; style=&quot;width:100%; height:100%&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&quot;&quot;&quot;);This displays the case diagram exactly as it appears in the standard Bonita Portal page. You can modify the view to hide the Portal Back button by adding ?diagramOnly to the URL:out.write(&quot;&quot;&quot;&amp;lt;iframe src=../portal.js/#/admin/monitoring/${idProcess}-${idCase}?diagramOnly}&quot; style=&quot;width:100%; height:100%&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&quot;&quot;&quot;);Debugging a custom page in developmentWhile you are developing a custom page, you can enable custom page debug mode for your portal. In debug mode, you can see changes to your custom page without importing a new zip archive.To enable custom page debug mode, edit console-config.properties and set custom.page.debug to true.To work on a page in debug mode:On a Tomcat installation, &amp;lt;java.io.tmpdir&amp;gt; points to &amp;lt;TOMCAT_HOME&amp;gt;/temp/  Import your custom page zip archive into the portal. This creates a directory &amp;lt;java.io.tmpdir&amp;gt;/bonita_portal_*/tenants/tenant_id/pages/custompage_&amp;lt;your custom page&amp;gt;.  Publish the page to a profile, then log out and log in as a user having this profile.  You can now update Index.groovy and the contents of the lib directory directly in &amp;lt;java.io.tmpdir&amp;gt;/bonita_portal_*/tenants/tenant_id/pages/custompage_&amp;lt;your custom page&amp;gt;.  To view the page after you modify it, refresh the page in the browser.When you have finished developing the page, recreate the custom page zip archive, and then modify the page to import it. This makes your final version of the page permanently available.ConstraintsA custom page is displayed in an iframe in the Bonita Portal, so is isolated from changes to the portal. When you migrate to a newer version of Bonita, your custom page definition should still be valid. However, this cannot be guaranteed for all future migrations.Page resources managementPage resourcesCustom page resources can be accessed by a PageResourceProvider.The bonita.css can be retrieved using pageResourceProvider.getBonitaThemeCSSURL()Other css/js resources can be retrieved using pageResourceProvider.getResourceURL(&quot;&amp;lt;path in the custom page resources folder&amp;gt;&quot;)If you are not using Groovy you can directly access a resource by adding a link in index.html.For example: &amp;lt;link href=&quot;css/file.css&quot; rel=&quot;stylesheet&quot; /&amp;gt;API accessIf your page is viewed in a custom profile or in an application, you will have access facilities for the portal API.you will be able to access the portal API using the following path: ../API/{API name}/{resource name}Theme accessIf your page is viewed in an application, you will have access facilities for the application theme.The Theme.css is directly accessible by adding the following link in index.html: &amp;lt;link href=&quot;../theme/theme.css&quot; rel=&quot;stylesheet&quot; /&amp;gt;",
      "url": " /bonita/7.7/bonita-portal-administration/resources/pages",
      "author": "",
      "categories": "Bonita Portal Administration, Resources"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-resources-resource-management": {
      "title": "Resource management",
      "content"     : "Resource managementThis page explains how to add a resource to the Bonita Portal and make it available to users. A resource is an artifact that extends the portal.It is typed and can be one of the following:Resource definitionAuthorization permissions for resourcesExport a resourceImport a resourceModify a resourceDelete a ResourceResource definitionA resource is a zip archive, and must contains a page.properties file, a resources directory and an index file.  The page.properties file contains the metadata for the page.For example:#The name must start with &#39;custompage_&#39;name=custompage_layoutdisplayName=Application layout pagedescription=This is a layout page dedicated to new born living applications. It is created and editable using the UI designer. It allows to display an horizontal menu, and an iframe. The menu allows to target some pages and the iframe define the area to display those targeted pages.resources=[GET|living/application,GET|living/application-page,GET|living/application-menu]contentType=layout  The resources directory contains all the public files of your resource (for example index.md, images, Javascript files, CSS files).The zip archive must contain at least one of the following index files:  An index.html file in the resources directory  An Index.groovy class at the root of the archive with, optionally, libraries  If a resource contains both Index.groovy and index.html, the Groovy class takes precedence.Authorization permissions for resourcesIf you are using REST API authorization and your resource needs the Web REST API, you need to specify the permissions that a user needs to have in order to access those API. These permissions are defined in the page.properties file. If your resources is a page written in Groovy and uses the Bonita Engine Java APIs, you do not need to specify permissions.For each REST resource accessed in other resources, specify the authorization needed for each method used. You can find examples of the default resources in resources-permissions-mapping.properties.The following example shows the permissions defined for a page that enables a user to view but not update organization information:#The name must start with &#39;custompage_&#39;name=custompage_orgViewerdisplayName=Organization viewerdescription=Organization viewer page. You cannot modify the organization from this page.resources=[GET|identity/user, GET|identity/personalcontactdata, GET|identity/professionalcontactdata, GET|identity/role,GET|identity/group, GET|identity/membership, GET|customuserinfo/user, GET|customuserinfo/definition, GET|customuserinfo/value] contentType=page  Export a resourceYou can export a resource from the portal. The page is exported as a zip archive.To export a resource:  As an Administrator, go to Resources. You will see the list of all resources, and a filter for each type of resource (Page, Forms, Layout, Theme and API extension).  Select the page that you want to export.  Click Export.  In the popup, specify the name and location for the exported zip archive, and click OK.The zip archive is exported to the location you specified.Import a resourceTo add a resource to the portal, import a zip archive that contains the resource definition.  As an Administrator, go to Resources. You will see the list of all resources, and a filter for each type of resource (Page, Forms, Layout, Theme and API extension).  Click Add.  In the Content field, specify the zip archive to be imported. Click in the field, then specify the location and filename in the popup.  Click Add. The resource is added to the portalIf you have specified a resource permission that is not defined in the REST API authorization configuration and REST API authorization is configured to be on, you will see an error message.After a resource is added to the portal, it can be used in an application or in a custom profile.Modify a resourceTo modify a resource in the portal, you upload a zip archive containing the new version.  As an Administrator, go to Resources. You will see the list of all resources, and a filter for each type of resource (Page, Forms, Layout, Theme and API extension).  Select the page that you want to modify.  Click Edit.  To upload a new resource definition, click in the Content field and specify the new zip archive to import.  Click OK to save the changes.The resource is updated.Delete a ResourceTo delete a resource:  As an Administrator, go to Resources. You will see the list of all resources, and a filter for each type of resource (Page, Forms, Layout, Theme and API extension).  Select the pages that you want to delete.  Click Delete.The selected resource is deleted.Note: Either all the selected resources are deleted, or no resources are deleted. If you have selected a page, a layout or a theme that are used in an application or in a custom profile, you will see an error message listing these resources and the applications where they are used. In the case, none of the pages you selected is deleted.",
      "url": " /bonita/7.7/bonita-portal-administration/resources/resource-management",
      "author": "",
      "categories": "Bonita Portal Administration, Resources"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-resources-themes": {
      "title": "Themes",
      "content"     : "ThemesThis page explains how to create a theme and add it to the Portal.A theme is an archive of files used to define and share CSS definitions and images for an application.It enables you to specify the same style for all pages and layout of an application.Each application can have its own theme.There are some examples of themes in the portal.A theme is exported, imported, modified, and deleted as a resource in Bonita Portal. You specify the theme for an application in Bonita Portal.Theme definitionConstraintsTheme definitionA theme is imported as a zip archive containing a page.properties file and a resources folder.  The page.properties file contains the metadata for the theme (the name used in the URL, the display name, and a description). For example:name=custompage_defaultthemedisplayName=Default themedescription=Application theme based on Bootstrap &quot;Simplex&quot; theme (see http://bootswatch.com/simplex/)contentType=themeThe resources folder must contain at least an index.html file and a CSS file named theme.css. The index file must be present in the zip but is ignored, so can be empty.Any CSS, images or JavaScript files can be shared using a theme resource.Export the examples to see how to structure a theme.The default themes are based on the bootswatch example, so you can easily choose another existing theme and package it to define a new theme.It is also possible to customize your own theme using bootstrap-live-customizer or bootstrap basic customization tool.ConstraintsA theme can only be associated with an application to define the style. It cannot itself be used as a simple application page.",
      "url": " /bonita/7.7/bonita-portal-administration/resources/themes",
      "author": "",
      "categories": "Bonita Portal Administration, Resources"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-search-index": {
      "title": "Search keys",
      "content"     : "Search keysNote: For Enterprise, Performance and Efficiency editions only.The search field in Bonita Portal can be used to search for particular values in cases, filter them, and display the result.Note: the search in Bonita Portal is dependent on the search keys configured in Bonita Studio. If nothing has been entered as a value for the task during the design of the process, then no results come up.How to get results from the search in Bonita Portal Only cases which have been given values will be filtered.Technical note: A search key is translated by a database index in Bonita Engine. Currently, when designing in Bonita Studio, you cannot create more than 5 keys/indexes per process.In addition, search keys are now displayed in the case list and in the case more details view. In this way, you can use search keys for adding dynamic and business information to your cases.See also Define a search key.",
      "url": " /bonita/7.7/bonita-portal-administration/search-index",
      "author": "",
      "categories": "Bonita Portal Administration"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-user-profiles-administrator-rights": {
      "title": "Administrator rights",
      "content"     : "Administrator rightsA user with Administration rights has the maximum rights to manage activity on Bonita Portal.  Manage user rights  Manage a user  Manage a group  Manage a role  Manage a process  Manage a case  Manage a task  Manage a subtask  Manage a category  Import/export an organization",
      "url": " /bonita/7.7/bonita-portal-administration/user-profiles/administrator-rights",
      "author": "",
      "categories": "Bonita Portal Administration, User profiles"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-user-profiles-custom-profiles": {
      "title": "Custom profiles",
      "content"     : "Custom profilesNote: For Enterprise, Performance and Efficiency editions only.Reminder: In a development environment, custom profiles definition and testing is done in Bonita Studio profile editor.In a production environment, you can administrate custom profiles in Bonita Portal. To be able to do so, you must be using the Administrator profile or a custom profile with access to the profile management page.What customization can I do?Create a custom profileDelete custom profileEdit a custom profileMap a profile to users or groups, membership or roleCreate a custom navigation barCreate a custom profile  In the Bonita Portal, in the navigation bar, click the Organization menu.  Click Profiles.  Click Add.  In the popup, select Create a profile.  Enter the Name.  Enter the Description (optional).  Click Create.  Refresh the portal webpage.  The new profile will appear in the Profiles menu.For deployment, it is also possible to import a profile by importing an XML file containing the profile definition and mapping to organization and pages.Delete custom profileNote: You will need to check the box to make the delete button available.Select the profile to delete, and click the delete button.Edit a custom profile  In the Bonita Portal, in the navigation bar, click the Organization menu.  Click Profiles.  Click More.  Click Edit.  Change the name or the description of the custom profile  Click Save.Map a profile to users or groups, membership or role  In the Bonita Portal, in the navigation bar, click the Organization menu.  Click Profiles.  Choose a profile. This will display the users mapped to the selected profile.  Click More.  Click Add a user.  Select a user by ticking the checkbox next to the user name.  Click Add.Do the same steps to map a group, role or membership.Create a custom navigation barA custom navigation bar can be created for each custom profile created.Note: The navigation bar will not be used by applications as they have their own navigation menu.  Select profile to add the new menu to  Click on More  This will display the Navigation bar editor  Click Create menu.Here, you will see 3 columns: a check box, a display name and a description.  Check the boxes to select the pages to include in the new menu.You can select from the Default pages that are provided with the standard portal and from Custom pages.  Click Create to confirm your choice of pages and create the menu.When you select the custom profile, the navigation bar will be applied to it.Note: Click Reset to erase the navigation bar if required.When a user logs in with a profile, the page displayed is the first option in the first menu from the left.",
      "url": " /bonita/7.7/bonita-portal-administration/user-profiles/custom-profiles",
      "author": "",
      "categories": "Bonita Portal Administration, User profiles"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-user-profiles-deploying-profiles-with-export-and-import": {
      "title": "Deploy profiles with export and import",
      "content"     : "Deploy profiles with export and importNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.OverviewExport profilesImport profilesOverviewDeploying a profile means exporting it from one portal and importing it into another. This is useful when you have finished testing profiles and custom pages in a limited environment and are ready to go to production.When you export a profile, it includes the following:  The profile definition (name and description).  The mapping of the profile to the organization. This defines the users, groups, roles, and memberships that have the profile.  The mapping of the profile to pages. This defines the pages that someone who is using this profile can see in the portal. A custom profile can include standard pages and custom pages.You cannot change the mapping of a standard profile to pages.You can export and import the default profiles that are provided as standard in Bonita, as a way to export and import the mapping of those profiles to elements in the organization.By default, the profile export and import features are available in the Administrator profile. They can also be available in a custom profile.Export profilesTo export profiles:  Go to the Organization menu and choose Profiles.  In the list of profiles, check the boxes to select the profiles you want to export. You can only select profiles in your current view of the profile list, not from other pages of the list.  Click Export.  A popup confirms the number of profiles that will be exported. Click Export to continue and export these profiles.An XML file, Profile_Data.xml, is exported.Import profilesWhen you import a profile, you import the mapping of the profile to the organization and to pages. For the import to be successful, the organization and any custom pages must already be loaded. If you are setting up a new production environment by importing all the data, import it in the following order:  organization  custom pages  profilesTo import profiles:  Go to the Organization menu and choose Profiles.  Click Add.  In the popup, select Import profiles.  Specify the Profile_Data.xml file to upload.  Click Import.The file is imported and checked. A popup reports the status of the import. It shows the number of profiles successfully imported, partially imported, or with errors.Notes:  A Process manager profile does not include the list of apps assigned to a given process manager. After the Process manager profile is imported, you need to assign a process manager to an app.  The standard profiles defined in Bonita have the flag isDefault set to True in the XML file. Do not change the setting of isDefault for any profile, or you will get an error message on import.",
      "url": " /bonita/7.7/bonita-portal-administration/user-profiles/deploying-profiles-with-export-and-import",
      "author": "",
      "categories": "Bonita Portal Administration, User profiles"
    }
    ,
  

    "bonita-7-7-bonita-portal-administration-user-profiles-process-manager": {
      "title": "Process manager",
      "content"     : "Process managerNote: For Enterprise, Performance and Efficiency editions only.The portal administrator can assign a Process manager to a process, to share responsibility for managing processes.Process manager descriptionAssign a Process manager to a processMonitor the processes I manageList the processes I manageSee a list of cases for a processSee a list of tasks for cases of a processAssign a taskUnassign a taskHow to skip a failed taskStart a case for another userDo a task for another userProcess manager descriptionThe Process manager shares some management responsibilities with the administrator, for specified processes.For the processes they manage, a process manager can:  Perform actions on tasks:  Assign or unassign a task  Replay a failed task  View tasks  Do a task for another userPerform actions on cases:  Delete a case  View cases  Edit case variables  Add a comment  Start a case for another userPerforms actions on processes:  Enable or disable a process  Edit process configuration (update a connector, actor mapping, Process manager mapping, or parameter value)  Assign a Process manager to a processThere are two stages to assigning a Process manager to a process: assign the Process manager profile to an entity, then map the process to the entity. You can assign the PM profile and map a process to a user, groups, role, or membership entity.Assign the Process manager profile to a userTo assign the Process manager profile to a user:  Log in to Bonita Portal as Administrator.  Go to Configuration.  Choose Profiles.  Choose the Process manager profile. This will display the users, groups, roles, and memberships who already have this profile.  Click More.  Click Add a user.  Select a user by checking the box next to the user name.  Click Add. The Process manager profile is now assigned to the user.You can also assign a profile to a group, role, or membership.Assign a process to a Process managerTo assign a process to a user who has the Process manager profile:  Log in to Bonita Portal as Administrator or as a Process manager of the process.  Go to BPM &amp;gt; Processes if you use the Administrator profile or Processes if you use the Process manager profile.  Select the process and click More…. The number of Process managers currently assigned to the process is shown in the Process manager mapping table.  To add a user, click the Plus sign or Pencil button in the User column. A popup shows a list of the users who are currently process managers for this process.  Click _Select users _. A list of users with the Process manager profile is displayed.  Select the user you want to be a Process manager for the process, and click Apply. The selected user is added as a Process manager for the process.You can also assign a process to a group, role, or membership that has the Process manager profile.Monitor the processes I manageA Process manager can monitor the activity of the processes they can manage in Monitoring.List the processes I manageA Process manager can see a list of the processes they can manage in Processes.See a list of cases for a processA Process manager can see a list of cases for the processes they can manage in Cases.See a list of tasks for cases of a processA Process manager can see the tasks for cases of a process they can manage in Tasks.Assign a taskA task can be assigned and reassigned if necessary to another user.  Go to Tasks  Click on a task in the list of tasks  Click AssignUnassign a task  Go to Tasks  Click on a task in the list of tasks  Click UnassignHow to skip a failed taskIf a failed task does not impact subsequent task in a process, the Process manager can skip it. This means that the task does not have to be done successfully for the following tasks to become available.  Go to Tasks.  Go to Failed.  Click on a Task.  Click More.  In Technical details, the reason for the failure is displayed  Click Skip.The task is moved from Failed to Done.Start a case for another userA Process manager can start a case for another user. The user must have the right to start a case of the process.To start a case for another user:  Log in as a Process manager for the process.  Go to Processes.  Select the process and click Start for.  In the popup, specify the user for whom you are starting the case. Only valid users for the case are displayed.  Click Start.The case is started as though the specified user had started it. For example, if a Process manager starts a case for user A and a subsequent task is to be done by the manager of the user, it is assigned to user A’s manager, not to the manager of the Process manager.Do a task for another userA Process manager can do a task for another user. The user must have the right to do the task. This is useful for unblocking a case if the assigned user cannot do a task.To performs a task for another user:  Log in as a Process manager for the process.  Go to Tasks and view the list of pending Human tasks.  Select the relevant task in the list and click Do for.  In the popup, specify the user for whom you are doing the task. Only valid users for the case are displayed. If the task is already assigned, the assigned user is specified automatically.  Click Do it.The task is done as though the specified user has done it.",
      "url": " /bonita/7.7/bonita-portal-administration/user-profiles/process-manager",
      "author": "",
      "categories": "Bonita Portal Administration, User profiles"
    }
    ,
  

    "bonita-7-7-development-api-glossary": {
      "title": "API glossary",
      "content"     : "API glossaryDefinitionProcessInstance (REST: case)FlowNodeInstance (REST: flowNode)DefinitionDefinition: in Bonita Studio you create definition of processes. A definition of a process includes name, version, definition of actors name…A process definition includes definition of tasks.The definition of tasks includes connectors, contract inputs declaration (for user task)…Instance : when you start a process (using Portal or API) what actually happen is a creation of a new process instance based on the selected process definition.Starting a process instance will actually start a new instance of the start event and usually start a new instance of the first task.Note: if a process loops on a task, multiple instances of a same task definition will be created.Case: A case is a process instance.ProcessInstance (REST: case)  id: id of the process instance  callerId (not in REST): id of the call activity use to create this process instance. null/0 if process instance was not created using a call activity.  processDefinitionId: the id of process definition use to create this process instance.  rootProcessInstanceId (rootCaseId for REST): the id of the top parent process instance. Parents exist for event sub-processes and when instance was created using a call activity. If there is no parent it is his own id.  endDate: the date on which the process instance is marked as completed.Note: the completed state is a transitionnary state. Right after a process instance is completed, it is archived.FlowNodeInstance (REST: flowNode)Use to represent an instance of a none start event, user task, call activity, multi instance activity (the container instance and also included instances), gateways…  id: id of the FlowNodeInstance  displayDescription: dynamically generated human readable flow node description. Only apply to UserTaskInstance, empty in REST API and null in Engine API otherwise.  displayName: same as for displayDescription but for the name. Only apply to UserTaskInstance, empty in REST API and null in Engine API otherwise.  executedBy: the id (long) of the user who performed this flow node. If performed by a substitute id is set to 0 and the performer id is stored in executedBySubstitute.  executedBySubstitute: the id (long) of the user who performed this flow node in case where a substitute did it. If flow node was not performed by a substitute the value is set to 0 and the performer is stored in executedBy. It applies only to flow nodes that are user tasks  flownodeDefinitionId (not in REST): the id of the flow node definition who lead to this flow node instance creation. In the case of a multi-activity task instance, each instance points to the original flow node multi instance definition.  parentContainerId (parentCaseId for REST):  Id is not always an id of a process instance:  For UserTask or ManualTaskInstance (i.e. subtask in portal), AutomaticTaskInstance (BPMN service task), BoundaryEventInstance, CallActivityInstance: id of the process instance that include directly the instance of the element. Behavior is the same in case of a process instance created by a call activity: id returned is the id of the child process that includes the flow node.  For a flow node that is created by a mutli-instantiated task definition: parent flow node instance id.  For BoundaryEventInstance: id of the parent of the attached task instance  For tasks in event sub process: event sub process id  parentProcessInstanceId (parentCaseId for REST):  Always returns the immediate containing process instance ID. Don’t escalate to parent process.  For event sub-process: id of the process instance that initiate the sub-process event.processDefinitionId (processId for REST): Returns the ID of the process definition where this FlowNodeInstance is defined  rootContainerId (rootCaseId for REST): Always return the top (root) process instance id. Compare to parentContainerId escalate to the root process instance when called on a FlowNodeInstance that is part of a process instance created by a call activity execution.  parentTaskId for REST: Only apply to sub task (task dynamically added by user at runtime). Represent the id of the task from which the subtask was created.For a complete description of the different elements, check out the following pages:  on the engine side, the Javadoc page  on the web site, the REST API page page",
      "url": " /bonita/7.7/development/api-glossary",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "bonita-7-7-development-bonita-artifacts-connectors-connector-development-toolkit": {
      "title": "Connector development toolkit",
      "content"     : "Connector development toolkitNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.OverviewInstallationPrerequisitesInstallation procedureCreating a new connector definitionCreating a new connector implementationWidget types and parametersMandatory common widget parametersOptional common widget parametersRadioGroup widget parametersSelect widget parametersArray widget specific parametersList widget specific parametersGroup widget parametersOverviewThe Connector Development Toolkit is a set of tools for implementing and testing Bonita connectors independently of the Bonita Studio.A connector implemented with the toolkit can be used in Bonita Studio or in Bonita Portal just like any Bonita connector.This toolkit uses industry-standard tools such as Java IDEs, dependency management tools (Maven), and unit testing frameworks (JUnit, Mockito and AssertJ). It has the following benefits for connector developers:  You can use any Java IDE for implementation, so you have access to all configuration options and can make use of convenient features such as refactoring.  You can unit test connectors, perform integration tests, and automate builds with a CI platforms.  It simplifies refactoring of connector wizards, by enabling them to be regenerated them at any time.  It simplifies dependency management and connector artifact version management, by leveraging Maven capabilities.InstallationPrerequisitesTo develop and test a Bonita connector with the toolkit, you need the following software installed:  Java 8 or later  Maven 3.2.x or laterInstallation procedure  Download the toolkit from the Customer Portal.  Unzip the toolkit file into a temporary installation folder.  Run either install.bat for Windows users or install.sh for Mac or Linux users.  When the installer has finished, delete the temporary installation folder because you no longer not need.Creating a new connector definition  Open a command window and navigate to the folder that will hold your connector definition.  Prepare to run the following command (Windows users: remove the trailing slashes and edit the content to have everything on a single line):mvn archetype:generate -DinteractiveMode=false -DarchetypeGroupId=com.bonitasoft.connector.definition -DarchetypeArtifactId=bonita-connector-definition-archetype -DarchetypeVersion=1.0 -DgroupId=com.mycompany.connectors -DartifactId=myFirstConnector -Dversion=1.0.0Before running the command, update the following parameter values:Parameter  Description  archetypeVersion  This must match the version of the toolkit.  groupId  Maven project group id.  artifactId  Maven project artifact id and Bonita connector definition id.  version  Maven project version and Bonita connector definition version.Run the command. This generates a new folder named artifactId containing the connector definition project files, as follows:```/src/main/resources/category-icon.pngconnector_definition.xmlconnector-icon.pngpom.xml```4. Configure the `src/main/resources/connector_definition.xml` file to define the connector wizard pages with their inputs, widgets,and outputs (see [Connector widget reference](#widgetTypeReference) for details).5. Optionally, change the icons for the connector and the connector category in the `src/main/resources` folder.## Creating a new connector implementation{:#creating-a-new-connector-implementation}A connector definition can hold multiple implementations so the steps described in this section can be repeated.  All implementations will be stored under the definition project folder.**Caution:** Connector implementations that are not located under the definition project folder will not compile.1. Open a command window and navigate to the folder that contains the connector definition project.2. Prepare to run the following command (Windows users: remove the trailing slashes and edit the content to have everything on a single line):```bashmvn archetype:generate -DinteractiveMode=false -DarchetypeGroupId=com.bonitasoft.connector.implementation -DarchetypeArtifactId=bonita-connector-implementation-archetype -DarchetypeVersion=1.0 -DgroupId=com.mycompany.connectors -DartifactId=myFirstConnectorImpl -Dversion=1.0.0 -DdefinitionId=myFirstConnector -DdefinitionVersion=1.0.0```Before running the command, update the following parameter values:| Parameter | Description ||-----------|-------------|| archetypeVersion | This should match the version of the toolkit |  | groupId | Maven project group id and Java package for the Bonita connector implementation || artifactId | Maven artifact id and Bonita connector implementation id || version | Maven version id and Bonita connector implementation version || definitionId | This should match the connector definition artifactId || definitionVersion | This should match the connector definition version |  3. Run the command. This generates a new folder named `artifactId` containing the connector implementation project.4.  In the connector implementation project folder, run the following command :```bashmvn bonita-connector-definition:generate```This generates the connector abstract definition class based on the definition configuration: `/src/main/java//Abstract.java` **Note:**If you subsequently change the connector definition configuration, run this command again to apply your changes.  This will regenerate the abstract definition class, overwriting the previous version.5.  In the connector implementation project folder, run the following command : `mvn bonita-connector-implementation:generate`This generates a stub of the connector implementation and test classes: ```src/main/java//.javasrc/test/java//Tests.java```*Caution:** Do not run this command again at a later stage, because it resets your implementation and test classes.6. Complete your connector implementation and test classes.7.  When you are ready to package the connector, run this command in the implementation project folder: `mvn package`This will produce a connector zip file that can be imported in Bonita Studio: `/target/--dist.zip`## Widget types and parameters{:#widget-types-and-parameters}The following widget types are supported in connectors:| Widget | Description || ------ | ----------- || Text | Text field || Password | Text field with obfuscated characters || TextArea | Multi-line text field || Checkbox | Single checkbox || RadioGroup | Group of radio buttons || Select | Drop down || Array | Editable table with user customizable rows and columns || ScriptEditor | Multi-line text zone for entering a script || List | List in which user can add/remove elements || Group | Collapsile zone that contains one or more widgets |  This is the same as the set of connector widgets available in Bonita Studio.A widget is configured by setting parameters. Some [mandatory parameters](#mandatory-common) and [optional parameters](#optional-common) are common to all types of widget. There are also some specific widget properties for some types of widget, which are listed later in this page.### Mandatory common widget parameters{:#widget-types-and-parameters-mandatory-common-widget-parameters}| Parameter | Description || --------- | ----------- || id | Unique widget identifier. || label | Text displayed beside the widget. || widgetType | Type of the widget. Set this to Text, Password, TextArea, Checkbox, RadioGroup, Select, Array, ScriptEditor, List, or Group. || javaType | Java type used to assign the value of this widget. This is not supported for Group widgets. |### Optional common widget parameters{:#widget-types-and-parameters-optional-common-widget-parameters}| Parameter | Description | Default value || --------- | ----------- | ------------- || mandatory | Boolean flag that indicates whether or not this widget can be left empty. | true || defaultValue | Default value assigned to this widget. | n/a || description | Mouseover text displayed by the &#39;information&#39; icon beside the widget. If there is no description, the icon is not displayed. | n/a |The following example is the configuration for a Text widget:```xmlfirstNameFirst nameTextjava.lang.StringtrueJohnYour first name```### RadioGroup widget parameters{:#widget-types-and-parameters-radiogroup-widget-parameters}| Parameter | Mandatory | Description | Default value || --------- | ----------- | ------------- | --------- || choices | yes | List of values for the radio button group. Each value is specified in a &quot;choice&quot; tag. | n/a || orientation | no | Alignment of the widget values. One of: HORIZONTAL or VERTICAL. | VERTICAL |The following example is the configuration for a RadioGroup widget with three choices:```xmlradioGroupRadioGroup widgetjava.lang.StringRadioGroupChoice1Choice2Choice3VERTICAL```### Select widget parameters{:#widget-types-and-parameters-select-widget-parameters}| Parameter | Mandatory | Description | Default value ||:-|:-|:-|:-|| items | yes | List of values for the widget. Each value is specified in an &quot;item&quot; tag. | n/a |The following example is the configuration for a Select widget with three choices:```xmlselectSelect widgetjava.lang.StringSelectItem1Item2Item3```### Array widget specific parameters{:#widget-types-and-parameters-array-widget-specific-parameters}All Array widget specific parameters are mandatory and must be placed under a single parent &quot;arrayOptions&quot; tag.| Parameter | Description || --------- | ----------- || cols | Initial number of columns in the table. || rows | Initial number of rows in the table. A value of -1 indicates a table with no row (only the column headers are displayed). || fixedCols | Boolean flag that indicates whether the number of table columns can be modified by the end user. If set to &quot;true&quot;, the user cannot add or remove columns. || fixedRows | Boolean flag that indicates whether the number of table rows can be modified by the end user. If set to &quot;true&quot;, the user cannot add or remove rows. || colsCaption | List of captions for the column headers. Each caption is specified in a &quot;colsCaption&quot; tag. |The following example is the configuration for an Array widget two columns and any number of rows:```xmlarrayArray widgetjava.util.ListArray2-1truefalseHeader 1Header 2```### List widget specific parameters{:#widget-types-and-parameters-list-widget-specific-parameters}| Parameter | Mandatory | Description | Default value || --------- | ----------- | ------------- | --------- || showDocuments | no | Boolean flag that indicates whether the end user can select Bonita documents in the list of values. | false |The following example is the configuration for a List widget:```listList widgetjava.util.ListListtrue```### Group widget parameters{:#widget-types-and-parameters-group-widget-parameters}**Note:** A Group widget does not support the common &quot;javaType&quot; parameter.| Parameter | Description || --------- | ----------- || collapsed | Boolean flag that indicates whether the group is collapsed by default. || widgets | Specifies the list of widgets contained in the group. |The following example is the configuration for a Group widget that contains two other widgets:```xmlcredentialsGroupUser credentialstrueloginjava.lang.StringtrueTextLoginpasswordjava.lang.StringtruePasswordPassword```",
      "url": " /bonita/7.7/development/bonita-artifacts/connectors/connector-development-toolkit",
      "author": "",
      "categories": "Development, Bonita artifacts, Connectors"
    }
    ,
  

    "bonita-7-7-development-bonita-artifacts-connectors-connectors-overview": {
      "title": "Connectors overview",
      "content"     : "Connectors overviewA connector is an element in a process that accesses an external system to read or write information. If the default connectors in Bonita are not suitable, you can implement your own connector. In the Bonita Enterprise, Performance, Efficiency, and Teamwork editions, you are recommended to use the connector development toolkit to create new connectors.Otherwise, you can define a new connector definition or implementation in Bonita Studio,using the wizards started from the Development menu, Connectors submenu.This page describes the structure of a connector, and summarizes the connector development features avaialble in Bonita Studio.Connector structureConnector definitionConnector implementationImporting and exporting a connector into Bonita StudioTesting a connectorConfiguringConnector structureA connector is implemented in Bonita in twoparts, the definition and the implementation. This enables you tochange the implementation without changing the definition. Severalimplementations can be created for a single definition.Connector definitionA connector definition controls the external interfaces of theconnector, both those visible to users (the connectorconfiguration wizard and the icon used to identify the connector in Bonita Studio) and those visible to the Bonita Engine (theinputs and outputs).Connector implementationA connector implementation consists of the implementation logic, contained in aJava class. You can create any number of implementations that correspond to a given definition. However, in a process there is a one-to-one relationship betweenthe connector definition and the connector implementation.The Java class must implement the org.bonitasoft.engine.connector.Connector class. This defines thefollowing methods:  setInputParameters to retrieve configuration parameters  &amp;gt;validateInputParameters to check that the configuration of theconnector is well defined  execute to execute the connector and returns a map containingall outputs  connect to create the connector  disconnect to end the connectionNote: All the connector outputs must be set in the implementation; otherwise, the connector execution will fail. The connector outputs must be serializable.For details of the APIs, the methods and related objects, see the Javadoc.Importing and exporting a connector into Bonita StudioYou can import a connector that was created using the connecctor development toolkit or that was exported from another Bonita Studio. The connector is imported as a zip file.  In Bonita Studio, go to the Development menu, Connectors, Import connector….  Upload the zip file.The imported connector is now available in the dialog for adding a connector.It is also possible to export a connector using the option in the Development menu. The connector is exported as a zip file, which you can import into anotherinstance of Bonita Studio. You must specify both the definition and the implementation to export.Testing a connectorTo test the connector independently of a process, go to the Development menu, choose Connectors…, then choose Test connector…. Select the connector you want to test, use the wizard to configure the information required for the test, and click Test. The connector runs, and the results arereported.You need to import a connector into Bonita Studio before you can test it.Configuringand deploying a process with a connectorThere are two stages to configuring a connector:  When you add a connector to a pool or task, you configure the connector behavior.  When you configure a process for deployment, you specify the definition and implementation of each connector it contains. You mustalso specify any connector dependencies as process dependencies.After theconnector has been specified in the configuration, when you buildthe process for deployment referencing the configuration, theconnector code is included in the business archive.After deployment, if you are running the Enterprise or Performance edition, you can update the connector implementation on a live system.",
      "url": " /bonita/7.7/development/bonita-artifacts/connectors/connectors-overview",
      "author": "",
      "categories": "Development, Bonita artifacts, Connectors"
    }
    ,
  

    "bonita-7-7-development-bonita-artifacts-creating-an-actor-filter": {
      "title": "Create an actor filter",
      "content"     : "Create an actor filterAn actor filter is implemented in Bonita in two parts, the definition and the implementation. This enables you to change theimplementation without changing the definition. Several implementations can be created for a single definition. See here for a list of actor filters provided with the product.An actor filter is a type of connector and is created in the same way, using the same schema files as for a connector. You can define a new actor filter definition or implementation in Bonita Studio, using the wizards started from the Development menu, Actor filters sub menu. You can also create a new actor filter definition or implementation externally, and import it into Bonita Studio.This page explains how to create the actor filter definition and implementation and import it into Bonita Studio.Actor filter definitionActor filter configuration wizard definitionLanguage properties fileActor filter implementationActor filter implementation resource fileActor filter implementation Java classActor filter example codeTesting an actor filterImporting an actor filter into Bonita StudioConfiguring and deploying a process with an actor filter Actor filter definitionAn actor filter definition controls the external interfaces of the actor filter, both those visible to users (the actor filter configuration wizard) and those visible to the Bonita Engine (the inputs and outputs). The actor filter definition consists of the following files:  An XML file that defines the configuration wizard  A file containing the image that is used as an icon to represent the actor filter  A properties file for each language that the wizard supportsThe following sections explain the elements of the definition. You can also use Bonita Studio to create the definition.Actor filter configuration wizard definitionThe XML file that defines the actor filter configuration wizard contains definitions for header information identifying the actor filter (including the icon), for inputs and outputs, and for the wizard pages. The definition follows the schema defined in http://documentation.bonitasoft.com/ns/connector/definition/6.0/connector-definition-descriptor.xsd. The table below lists the items in the definition:| | Occurrence | Description||:-|:-|:-|| id | 1 | The identifier of the actor filter definition. Used internally, not displayed in the wizard or in Bonita Studio. Must be unique. || version | 1 | The version of the actor filter definition. Must be unique for the actor filter identifier. || icon | 0 or 1 | The name of a file containing the icon image. || category | 1 | The category to which the actor filter belongs. In Bonita Studio, actor filters are grouped by category. Optionally, the category can have an icon image. || input | 0 or more | Input data passed to the actor filter. Each input has a unique name and a Java type. Optionally, it can be defined as mandatory. Optionally, a default value can be set. || output | 0 or more | Output data passed to the process from the actor filter.  Each output has a unique name and a Java type. || page | 0 or more | A page in the wizard. A page must have a unique id. A page consists of one or more widgets. A page is constructed by displaying the widgets in the order in which the definitions appear in the file. || widget | 1 or more per page | An element within a page, corresponding to an input. A widget must have a unique id, an input name, and a type. The following types of widget are available: text, password, text area, check box, radio button group, select (drop-down list), array, group, script editor, and list. || jarDependency | 0 or more | A dependency that must be satisfied for the wizard to run successfully. |The page and widget definitions are required for an actor filter that is used or configured from within Bonita Studio.The following example is the XML definition for the initiator manager actor filter:&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;definition:ConnectorDefinition xmlns:definition=&quot;http://www.bonitasoft.org/ns/connector/definition/6.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt; &amp;lt;id&amp;gt;initiator-manager&amp;lt;/id&amp;gt; &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt; &amp;lt;icon&amp;gt;initiator-manager.png&amp;lt;/icon&amp;gt; &amp;lt;category id=&quot;process&quot; icon=&quot;process.gif&quot; &amp;gt;&amp;lt;/category&amp;gt; &amp;lt;input name=&quot;autoAssign&quot; type=&quot;java.lang.Boolean&quot; mandatory=&quot;false&quot; defaultValue=&quot;true&quot; /&amp;gt; &amp;lt;page id=&quot;config&quot;&amp;gt;&amp;lt;widget id=&quot;autoAssign&quot; inputName=&quot;autoAssign&quot; xsi:type=&quot;definition:Checkbox&quot; &amp;gt;&amp;lt;/widget&amp;gt;&amp;lt;/page&amp;gt;&amp;lt;/definition:ConnectorDefinition&amp;gt;In this example, there is one input, a Boolean that determines whether or not the task is automatically assigned to the user identified by the filter. There is one page in the configuration wizard, which contains one widget.Language properties fileThe text displayed in a wizard is defined separately from the pages and widgets. This means that one actor filter definition can support multiple languages.For each language, there is a properties file that contains the category name, the actor filter name, the actor filter definition, the name and description of each wizard page, and the name and description of each input widget.The default language properties file is called actorfilter-id_version.properties, where actorfilter-id is the actor filter identifier and version is the actor filter version. You can provide additional properties files to support other languages. These files must be called actorfilter-id_lang_version.properties, where lang identifies the language of the properties file. The language must be supported by Bonita Studio. For example, the French properties file for the initiator manager shown above is called initiator-manager-1.0.0_fr.properties. When a Bonita Studio user launches an actor filter configuration wizard, the wizard is displayed in the language currently configured for Bonita Studio. If there is no properties file for this language, the default file is used.The following example is the English language properties file for the initiator manager actor filter:process.category = ProcessconnectorDefinitionLabel = Initiator managerconnectorDefinitionDescription = Manager of the initiator of the processconfig.pageTitle = Configurationconfig.pageDescription = Configuration of the process initiator-manager filterconnexionConfigPage.pageDescription = Choose here if you want to automatically assign the task to this actorautoAssign.label = Assign task automaticallyautoAssign.description = The task will be claimed automatically by the resolved user Actor filter implementationAn actor filter implementation consists of an XML resource file and a Javaclass. You can create any number of implementations that correspond to a given definition. However, in a process there is a one-to-one relationship between the actor filter definition and the actor filter implementation.Actor filter implementation resource fileThe resource file defines:  the id and version of the definition that is implemented  the id and version of the implementation  the set of dependencies required by the implementation.The resource file follows the schema defined in http://documentation.bonitasoft.com/ns/connector/definition/6.0/connector-implementation-descriptor.xsd .The following example is the resource file of an implementation of theinitiator manager actor filter:&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;implementation:connectorImplementation xmlns:implementation=&quot;http://www.bonitasoft.org/ns/connector/implementation/6.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt; &amp;lt;definitionId&amp;gt;initiator-manager&amp;lt;/definitionId&amp;gt; &amp;lt;definitionVersion&amp;gt;1.0.0&amp;lt;/definitionVersion&amp;gt; &amp;lt;implementationClassname&amp;gt;org.bonitasoft.userfilter.initiator.manager.ProcessinitiatorManagerUserFilter&amp;lt;/implementationClassname&amp;gt; &amp;lt;implementationId&amp;gt;initiator-manager-impl&amp;lt;/implementationId&amp;gt; &amp;lt;implementationVersion&amp;gt;1.0.0&amp;lt;/implementationVersion&amp;gt; &amp;lt;jarDependencies&amp;gt; &amp;lt;jarDependency&amp;gt;bonita-userfilter-initiator-manager-impl-1.0.0-SNAPSHOT.jar&amp;lt;/jarDependency&amp;gt;&amp;lt;/jarDependencies&amp;gt;&amp;lt;/implementation:connectorImplementation&amp;gt;Actor filter implementation Java classThe Java class must implement the org.bonitasoft.engine.filter.AbstractUserFilterclass and use the Engine ExecutionContext. The following methods must be implemented:  validateInputParameters to check that the configuration of the actor filter is well defined  filter to get a list of identifiers of all the users that correspond to a specified actor name  shouldAutoAssignTaskIfSingleResult to assign the step to the user if filter returns one userFor details of the APIs, the methods and related objects, see the Javadoc.Actor filter example codeThe following code is an example of the initiator manager actor filter.public class ProcessinitiatorManagerUserFilter extends AbstractUserFilter {@Overridepublic void validateInputParameters() throws ConnectorValidationException {}@Overridepublic List&amp;lt;Long&amp;gt; filter(final String actorName) throws UserFilterException {try {  final long processInstanceId = getExecutionContext().getParentProcessInstanceId();  long processInitiator = getAPIAccessor().getProcessAPI().getProcessInstance(processInstanceId).getStartedBy();  return Arrays.asList( getAPIAccessor().getIdentityAPI().getUser(processInitiator).getManagerUserId());} catch (final BonitaException e) {throw new UserFilterException(e);}}@Overridepublic boolean shouldAutoAssignTaskIfSingleResult() {final Boolean autoAssignO = (Boolean) getInputParameter(&quot;autoAssign&quot;);return autoAssignO == null ? true : autoAssignO;}} Testing an actor filterThere are three stages to testing an actor filter:  Build the actor filter. If you are using Maven, create two projects, onefor the definition and one for the implementation. Build the artifacts forimport into Bonita Studio, using the following command:mvn clean installThis creates a zip file.  Import the actor filter into Bonita Studio. From theDevelopment menu, choose Actor filters,then choose Import…. Select the zip file to beimported.  Test the actor filter in a process. Create a minimal process and add the actorfilter to a step. Configure the process and run it from Bonita Studio.Check the Engine log (available through the Help menu) forany error messages caused by the actor filter.Importing an actor filter into Bonita Studio  Create a zip file that contains the files used by the definition and implementation.  In Bonita Studio, go to the Development menu, Actor filters, Import actor filter….  Upload the zip file.The imported actor filter is now available in the dialog for adding an actor filter.It is also possible to export an actor filter using options in the Development menu. The actor is exported as a .zip file, which you can import into anotherinstance of Bonita Studio.Configuring and deploying a process with an actor filterWhen you configure a process that uses an actor filter in Bonita Studio, youspecify the definition and implementation. You must also specify anydependencies as process dependencies. After the actor filter has been specifiedin the configuration, when you build the process for deployment referencing theconfiguration, the actor filter code is included in the business archive.",
      "url": " /bonita/7.7/development/bonita-artifacts/creating-an-actor-filter",
      "author": "",
      "categories": "Development, Bonita artifacts"
    }
    ,
  

    "bonita-7-7-development-bonita-bpm-portal-urls": {
      "title": "Bonita Portal URLs",
      "content"     : "Bonita Portal URLsThis page explains how to use a URL to access Bonita Portal or the form for a specific task. In these URLs, the process names, versions and the task names must be URL encoded.URL of Bonita PortalProcess instantiation URLComplete URLShort URLProcess overview URLComplete URLShort URLTask URLComplete URLShort URLUsing autologinURL parameter summaryURL of Bonita PortalYou can connect to Bonita Portal from other tools using a URL of the form http://host:port/bonita#?..... Other forms of URL are liable to change in future versions. For example, use http://localhost:8081/bonita#?process=myProcessId&amp;amp;locale=fr, and do not use http://localhost:8081/bonita/console/homepage#?process=myProcessId&amp;amp;locale=fr.Process instantiation URLThe following code samples show how to generate a link to a process instantiation form.Complete URLThis sample shows how to construct the complete URL. Prefer the short format for backward compatibility.return new StringBuffer(&quot;URL: &amp;lt;a href=&quot;&quot;).append(&quot;http://&quot;);.append(host).append(&quot;:&quot;).append(port).append(&quot;/bonita/portal/resource/process/&quot;).append(processName).append(&quot;/&quot;).append(processVersion).append(&quot;/content/?id=&quot;).append(processDefinitionId).append(&quot;&quot;&amp;gt;here&amp;lt;/a&amp;gt;&quot;).toString();Example:http://localhost:8080/bonita/portal/resource/process/Task%20link%20via%20email/1.0/content/?id=34951576542454Short URLThis sample shows how to construct the short URL. Prefer this format for backward compatibility. You will automatically be redirected to the complete format. return new StringBuffer(&quot;URL: &amp;lt;a href=&quot;&quot;).append(&quot;http://&quot;);.append(host).append(&quot;:&quot;).append(port).append(&quot;/bonita/portal/form/process/&quot;).append(processName).append(&quot;/&quot;).append(processVersion).append(&quot;&quot;&amp;gt;here&amp;lt;/a&amp;gt;&quot;).toString();Example:http://localhost:8080/bonita/portal/form/process/Task%20link%20via%20email/1.0Process overview URLThe following code samples show how to generate a link to a process overview form.Complete URLThis sample shows how to construct the complete URL. Prefer the short format for backward compatibility.return new StringBuffer(&quot;URL: &amp;lt;a href=&quot;&quot;).append(&quot;http://&quot;).append(host).append(&quot;:&quot;).append(port).append(&quot;/bonita/portal/resource/processInstance/&quot;).append(processName).append(&quot;/&quot;).append(processVersion).append(&quot;/content/?id=&quot;).append(processInstanceId).append(&quot;&quot;&amp;gt;here&amp;lt;/a&amp;gt;&quot;).toString();Example:http://localhost:8080/bonita/portal/resource/processInstance/Task%20link%20via%20email/1.0/content/?id=8Short URLThis sample shows how to construct the short URL. Prefer this format for backward compatibility. You will automatically be redirected to the complete format. return new StringBuffer(&quot;URL: &amp;lt;a href=&quot;&quot;).append(&quot;http://&quot;).append(host).append(&quot;:&quot;).append(port).append(&quot;/bonita/portal/form/processInstance/&quot;).append(processInstanceId).append(&quot;&quot;&amp;gt;here&amp;lt;/a&amp;gt;&quot;).toString();Example:http://localhost:8080/bonita/portal/form/processInstance/8Task URL Important: A task is not automatically assigned to the user who accesses the task form. There must first be a REST API call to assign the task to the user. Otherwise, the user will not be able to execute the task.The following code samples show how to generate a link to a human task.Complete URLThis sample shows how to construct the complete URL. Prefer the short format for backward compatibility. return new StringBuffer(&quot;URL: &amp;lt;a href=&quot;&quot;).append(&quot;http://&quot;).append(host).append(&quot;:&quot;).append(port).append(&quot;/bonita/portal/resource/taskInstance/&quot;).append(processName).append(&quot;/&quot;).append(processVersion).append(&quot;/&quot;).append(activityName).append(&quot;/content/?id=&quot;).append(activityInstanceId).append(&quot;&quot;&amp;gt;here&amp;lt;/a&amp;gt;&quot;).toString();Example:http://localhost:8080/bonita/portal/resource/taskInstance/Task%20link%20via%20email/1.0/Task/content/?id=3Short URLThis sample shows how to construct the short URL. Prefer this format for backward compatibility. You will automatically be redirected to the complete format.return new StringBuffer(&quot;URL: &amp;lt;a href=&quot;&quot;).append(&quot;http://&quot;).append(host).append(&quot;:&quot;).append(port).append(&quot;/bonita/portal/form/taskInstance/&quot;).append(activityInstanceId).append(&quot;&quot;&amp;gt;here&amp;lt;/a&amp;gt;&quot;).toString();Example:http://localhost:8080/bonita/portal/form/taskInstance/3Or if you only have the process instance ID and the task name:  return new StringBuffer(&quot;URL: &amp;lt;a href=&quot;&quot;).append(&quot;http://&quot;).append(host).append(&quot;:&quot;).append(port).append(&quot;/bonita/portal/form/processInstance/&quot;).append(processInstanceId).append(&quot;/task/&quot;).append(taskName).append(&quot;&quot;&amp;gt;here&amp;lt;/a&amp;gt;&quot;).toString();Example:http://localhost:8080/bonita/portal/form/processInstance/8/task/request%20approvalWith the above format, the first task with the name “request approval” available for the user found in the process instance with id 8 will be displayed.Using autologinBonita 6.x URL syntax is supported in 7.x. Thus, 6.x autologin feature is supported in 7.0 version with 6.x URL syntax.Go to Accessing Bonita Portal and forms by URL 6.5 documentation for more information about this. Warning: The autologin feature only works with v6-type instantiation forms.URL parameter summary         Parameter  Description  Example  locale=&amp;lt;string&amp;gt;  Optional. Identifies the language to be used.  locale=en  id=&amp;lt;id&amp;gt;  &amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;For process instantiation URL, identifies the process definition id.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;For process overview URL, identifies the process instance id.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;For task URL, identifies the activity instance of the task.&amp;lt;/li&amp;gt;  id=6972973247608922361  user=&amp;lt;userId&amp;gt;  Optional. Identifies the user you perform the task for (for administrators and process managers).  user=201  tenant=&amp;lt;tenantId&amp;gt;  Optional. Identifies the tenant on which the process is deployed for multiple tenants environments (Multi-tenancy is available with the Enterprise and Performance editions only).  tenant=2  ",
      "url": " /bonita/7.7/development/bonita-bpm-portal-urls",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "bonita-7-7-development-bonita-engine-architecture-engine-architecture-overview": {
      "title": "Bonita Engine architecture overview",
      "content"     : "Bonita Engine architecture overviewThis page describes the Bonita Engine.OverviewAPIsBPM servicesGeneric servicesPackagingOverviewThe Bonita Engine is the runtime processor at the core of Bonita.  It executes processes, handling actions related to tasks, such as database access, and housekeeping actions such as logging. The Engine is composed of a number of services and APIs. The services are either BPM services or generic services.The Bonita Engine component services are completely configurable using the plaform setup tool to retrieve the current configuration and update it.Services are provided to the Engine using a ServiceAccessor. By default, this uses Spring to bind services and to retrieve service instances.The Spring configuration files are present in the classpath but beans can be added or overridden using configuration files stored in database under the CONFIGURATION  table.These files are all suffixed with -custom.xml and contain Spring bean declaration examples.Theses files can be retrieved and updated using the platform setup tool.Folder  setup/platform_conf/[initial|current]/tenant_template_engine contains tenant-level template configuration files used when creating a new tenant (Subscription edition):  bonita-tenant-community-custom.properties : contains as comments all the available properties that can be overridden at tenant level.  bonita-tenants-custom.xml: XML file can be modified to add any Spring bean you need to add/override at tenant level.Folder  setup/platform_conf/current/tenants/[TENANT_ID]/tenant_engine where [TENANT_ID] is your tenant id (e.g. 1). Contains same files use for an already existing tenant.The Engine can be installed on a Java Virtual Machine (JVM), in any web/Java EE container, or can be used as a simple Java library.APIsThis section contains a summary of the Bonita Engine APIs. For details of the APIs, the methods and related objects, see the Javadoc.      Identity API  Manages information about an organization, that is, the set of users who can act in processes. Handles creation, modification, and deletion of organizations, groups, roles, memberships, and users.  Organization API  Import or export an organization.  Process API  Handles actions related to processes (deploy, enable, start, disable, delete), executes activities, updates process data, search for a retrieve process entities.  Login API  Logs in to the engine in a platform and creates a session.  Monitoring API  Retrieves information about current activity, such as the number of users logged in, or the number of processes currently being executed.  Log API  provides access to business logs, for searching and to retrieve information about current or archived processes.  Platform command API  Creates, starts, stops platform.  Document API  Manages documents that are attached to a process instance.  Theme API  Manages the Look &amp;amp; Feel of the Bonita Portal web and mobile interfaces and forms.  Tenant Management API  Used to pause service in a tenant for maintenance, to resume service, and to check whether a tenant is paused. Available in Teamwork, Efficiency, Performance and Enterprise editions.  There is also a Web API, which is for internal use only, and a Command API, which is primarily for internal use.BPM servicesBPM services are related to BPM activities.Actor mapping      Description:  Manage mapping between actors and users, roles, and groups.  Used by:  -  Implementation:  org.bonitasoft.engine.actor.mapping.impl.ActorMappingServiceImpl  Category      Description:  Manage categories of processes. A category is a way to classify processes. Categories are handled manually by administrators in Bonita Portal and are visible to portal users.  Used by:  Command service  Implementation:  org.bonitasoft.engine.core.category.impl.CategoryServiceImpl  Notes: Store categories with the persistence serviceConnector      Description:  Execute a connector using the ConnectorDefinition: get the connector from the file system, evaluate expressions of input parameters, instantiate/execute the connector and then execute output operations.  Used by:  Command service  Implementation:  org.bonitasoft.engine.core.connector.impl.ConnectorServiceImpl  Expression resolver      Description:  Evaluate expressions and the associated dependencies. The expression resolver default implementation take all expressions and dependencies, flattens them and orders them by type. It then evaluate all expressions starting with expressions that are known to have no dependencies. All expressions that are evaluated at the same time have the same context of evaluation.  Used by:  Any service that evaluates expressions  Implementation:  org.bonitasoft.engine.core.expression.control.api.impl.ExpressionResolverServiceImpl  Login      Description:  Log in to or out of the Engine.  Used by:  APIs  Implementation:  org.bonitasoft.engine.core.login.LoginServiceImpl  Platform login      Description:  Log in to or out of the Engine at the platform level.  Used by:  APIs  Implementation:  org.bonitasoft.engine.core.platform.login.impl.PlatformLoginServiceImpl  Operation      Description:  Execute operations that update data. The Operation service can use different types of update method.  The default methods, called Operators, are ASSIGNMENT, JAVA_METHOD, and XPATH_UPDATE_QUERY.  Used by:  Engine service, APIs when updating data using an operation  Implementation:  org.bonitasoft.engine.core.operation.impl.OperationServiceImpl  Parameter      Description:  For the Enterprise, Performance, Efficiency, and Teamwork editions, manage parameters of a process. Parameters are set for the scope of a process definition and are designed to be used as global configuration of a process, for example, you could store the URL of a database you use in some connectors.  Used by:  Engine, APIs, ExpressionService (using the contributed evaluator) when reading and updating parameters  Implementation:  org.bonitasoft.engine.parameter.propertyfile.PropertyFileParameterService  Notes:  Relies on Java properties in a file to store and retrieve parameters  Process comment      Description:  Create, update, get, list, or delete comments attached to a process instance.  Used by:  APIs  Implementation:  org.bonitasoft.engine.core.process.comment.api.impl.SCommentServiceImpl  Notes:  Relies on persistence service to store comments  Process definition      Description:  Handle process definition objects.  Used by:  Engine  Implementation:  org.bonitasoft.engine.core.process.definition.ProcessDefinitionServiceImpl  Notes:  Stores definition in file system and in cache using XML  Engine      Description:  Handles process execution.  Used by:  APIs when executing processes or activities  Implementation:  the Engine itself  Process instance      Description:  Handle process instance objects.  Used by:  Engine  Implementation:  org.bonitasoft.engine.core.process.instance.impl.ProcessInstanceServiceImpl  Notes:  Relies on the persistence service to store objects  Supervisor mapping      Description:  Define the mapping between a process definition and the user who supervises it.  Used by:  APIs  Implementation:  org.bonitasoft.engine.supervisor.mapping.impl.SupervisorMappingServiceImpl  User filter      Description:  Read and execute a userfilter that filters the set of users eligible to carry out a pending task.  Used by:  Engine  Implementation:  org.bonitasoft.engine.core.filter.impl.UserFilterServiceImpl  Notes:  Uses the cache and read user filter of the file system  Generic servicesGeneric services  perform actions that are not related to BPM but are required for successful process execution. No generic service has a dependency on a BPM service.Archive      Description:  Store and retrieve objects that will no longer change.  For example, a process instance that is finished is archived using this service.  Used by:  ProcessInstance service to store ArchivedProcessInstance objects  Implementation:  org.bonitasoft.engine.archive.impl.ArchiveServiceImpl  Authentication      Description:  Check user credentials using a map.  Used by:  Login service in Bonita Teamwork, Efficiency, Performance, and Enterprise editions  Implementation:  org.bonitasoft.engine.authentication.impl.GenericAuthenticationServiceImpl  Notes:  Uses the Identity service to check user credentials  Querieable logs      Description:  Log information related to business actions. For example, ?Activity ‘step1’ was created with id = 12? or ?Connector email-1.0.0 was successfully executed on activity 1547?. By default, log information is stored in a database for easy query.  Used by:  Any service storing objects: ?deleted activity[..]?  Scheduler service: ?Job executed […]?  Implementations:  org.bonitasoft.engine.services.impl.SyncBusinessLoggerServiceImpl (Community edition: insert logs directly in database)  org.bonitasoft.engine.log.api.impl.BatchBusinessLoggerImpl (Teamwork, Efficiency, Performance, and Enterprise editions: inserts all logs in batch at the end of the transaction)  Tenant cache      Description:  Store objects in the cache, and retrieve them. The service handles different caches that can be configured separately.  Used by:  ProcessDefinition service, Connector service, Expression service: put reusable definition objects in cache  Implementation:  org.bonitasoft.engine.cache.ehcache.EhCacheCacheService  Notes:  Uses EhCache to cache objects  Platform cache      Description:  Store objects in the cache, and retrieve them. The service handles different caches that can be configured separately.  Used by:  ProcessDefinition service, Connector service, Expression service: put reusable definition objects in cache  Implementation:  org.bonitasoft.engine.cache.ehcache.PlatformEhCacheCacheService  Notes:  Uses EhCache to cache objects  ClassLoader      Description:  An abstraction layer of the classloader, making it easy to change the classloader implementation at runtime. There is a hierarchy of classloaders, with a platform classloader handling items used by the whole platform, and a process classloader for items specify to a process. Each classloader is identified by a type and an Id.  Used by:  Server APIs, to create and set the classloader at platform level.  Engine, to handle classloader of type process  Implementation:  org.bonitasoft.engine.classloader.ClassLoaderServiceImpl  Notes:  Relies on the dependency service to load the jar put in dependencies for a specific classloader  Platform command      Description:  Register and execute platform commands. Commands are Java classes that can be executed by the engine using the API. Using this service you can create your own code to be put server side and call it from a client.  Used by:  API to execute platform-level commands  Implementation:  org.bonitasoft.engine.platform.command.impl.PlatformCommandServiceImpl  Notes:  Uses persistence service to store commands  Connector executor      Description:  Execute a connector: take the instantiated Connector object, set its parameters, and execute it.  Used by:  Connector service, to execute the instantiated connector  Implementation:  org.bonitasoft.engine.connector.impl.ConnectorExecutorImpl  Data      Description:  Handle DataSource objects, which describe how to retrieve and store data on an internal or external system. The Engine contains two default implementations: org.bonitasoft.engine.data.instance.DataInstanceDataSourceImpl, which handles data stored in database, and org.bonitasoft.engine.core.data.instance.impl.TransientDataInstanceDataSource, which handles data stored in memory.  Used by:  DataInstance service, to get the data source of a data definition to get its value  Implementation:  org.bonitasoft.engine.data.DataServiceImpl  DataInstance      Description:  Handle data instance objects. A data instance is a variable that has a name, a type, and a value. This service also handles expressions of type VARIABLE_TYPE. A VARIABLE_TYPE expression references a data instance. When an expression is evaluated, the value of the data instance is returned.  Used by:  Process API, Process executor, all services that access data  Implementation:  org.bonitasoft.engine.data.DataInstanceServiceImpl  Notes:  Uses the persistence service to store data instances  Dependency      Description:  Declare Java dependencies on business objects. These dependencies have a name and a content that is the JAR itself. For example, a process that uses an email connector has a dependency on javamail.jar that is declared at deployment.  Used by:  Engine, to declare process dependencies  ClassloaderService, to retrieve dependencies of process  Implementation:  org.bonitasoft.engine.dependency.impl.DependencyServiceImpl  Notes:  Dependency information is stored in database  Platform dependency      Description:  Declare dependencies between entities that are related to the platform, for example,  platform commands declare platform dependencies.  Used by:  Platform Command service, to declare dependency of platform commands  Implementation:  org.bonitasoft.engine.dependency.impl.PlatformDependencyServiceImpl  Notes:  Dependency information is stored in database  Document      Description:  Store content and properties of a document and map the document to an instance of a process.  Used by:  Engine APIs when retrieving documents.  Implementation:  org.bonitasoft.engine.core.document.api.impl.DocumentServiceImpl  Notes:  The mapping of the document is not stored in the same table as the documetn itself.  Expression      Description:  Evaluate an expression using the evaluator provided by another service (but do not evaluate dependencies of the expression). This service is extended by evaluators specific to the kind of expression to be evaluated. For example, in the Enterprise, Performance, Efficiency, and Teamwork editions, the ParameterService contributes an evaluator to evaluate expressions that reference a parameter. To add a new kind of expression, contribute a class implementing org.bonitasoft.engine.expression.ExpressionExecutorStrategy to the ExpressionExecutorStrategy class.  Used by:  ExpressionResolverService. to evaluate an expression and its dependencies  Implementation:  org.bonitasoft.engine.expression.impl.ExpressionServiceImpl  Identity      Description:  Handle information about elements of an organization (users, groups, roles, memberships).  Used by:  ProcessExecutor, to resolve actor mappings.  Implementation:  org.bonitasoft.engine.identity.impl.IdentityServiceImpl  Incident      Description:  Service that reports incidents to an administrator.  An incident is an error that cannot be handled by the engine. The default implementation log is a file named “Incidents.log” inside the tenant folder.  Used by:  Mainly by the work service.  Implementation:  org.bonitasoft.engine.incident.IncidentServiceImpl  Job      Description:  Handle and trace execution of internal jobs of the engine.  A job is an internal action that can be triggered once or several times. (e.g. Timers are implemented using jobs.)  Used by:  Scheduler service.  Implementation:  org.bonitasoft.engine.scheduler.impl.JobServiceImpl,  Lock      Description:  Enable synchronization of code execution. The service enables creation of shared locks and exclusive locks. If a shared lock is taken out, other shared locks can also be taken out. If an exclusive lock is taken out, it blocks execution until the lock is released.  Used by:  ProcessExecutor, for canceling a process or for merging execution of branches  Implementation:  org.bonitasoft.engine.lock.impl.MemoryLockService  Notes:  Uses java.util.concurrent.locks.ReentrantReadWriteLock objects that are in memory only  Monitoring      Description:  Monitor Engine activity, such as active transactions, active users, or JVM status.  Used by:  API  Implementation:  org.bonitasoft.engine.monitoring.impl.MonitoringServiceImpl  Tenant Monitoring      Description:  Provide metrics on a tenant.  Used by:  API  Implementation:  com.bonitasoft.engine.monitoring.impl.TenantMonitoringServiceImpl  Platform Monitoring      Description:  Provide metrics on a platform.  Used by:  API  Implementation:  com.bonitasoft.engine.monitoring.impl.PlatformMonitoringServiceImpl  Persistence      Description:  Handle storage of objects in a persistent medium. There are two services, bonita-persistence-read for reading objects and bonita-persistence-api for reading and writing objects. The default implementation stores objects in the database, but the service could be implemented for any other type of persistent storage. The persistence service gives a unique identifier to an object.  Used by:  All services reading persistent objects (such as processInstanceService) use bonita-persistence-read. All services creating or modifying objects use bonita-persistence-api.  Implementation:  Hibernate  Platform      Description:  Handle creation, activation, and deletion of platform.  The platform is the foundation of the Engine: creating the platform means creating database tables that are used by the Engine.  Used by:  -  Implementation:  org.bonitasoft.engine.platform.impl.PlatformServiceImpl  Notes:  Uses the persistence service to create platform.  Profile      Description:  Handle profiles. A profile is an entity with a name, description, and icon path that is associated with a user, group, role, or membership. A profile entity is used by Bonita Portal to determine a user’s profile (user, process manager, or administrator).  Used by:  API, used by Bonita Portal to modify user profiles.  Implementation:  org.bonitasoft.engine.profile.impl.ProfileServiceImpl  Notes:  Uses persistence service to store privileges  Recorder      Description:  A layer between the persistence service and all services that need to store objects. It ensures that events are triggered and that queriable log entries are written.  Used by:  All services storing objects. For example, the ProcessInstanceService stores a ProcessInstanceObject using the recorder Implementation: org.bonitasoft.engine.recorder.impl.RecorderImpl  Reporting      Description:  Handle storage, retrieval, and update of reports.  Used by:  API  Implementation:  com.bonitasoft.engine.core.reporting.ReportingServiceImpl  Scheduler      Description:  Handle jobs and ensure that they are executed at the required time. There are three kinds of trigger: OneShotTrigger to execute a job once only at a given time, RepeatTrigger to execute a job a finite number of times at a given interval, and CronTrigger to execute a job according to a Unix-type structure.  Used by:  ProcessEngine, for timers and for launching the job that matches a message event  Implementation:  QuartzSchedulerService, org.bonitasoft.engine.scheduler.impl.SchedulerServiceImpl  Notes:  Relies on Quartz to launch jobs  Session      Description:  Handle user sessions. A session is an object stored in memory that contains several kinds of information about the client that uses it, for example, userId, ClientIp, ExpirationDate.  Used by:  LoginService,SchedulerService,WorkService to create sessions  Implementation:  org.bonitasoft.engine.session.impl.SessionServiceImpl  Platform session      Description:  Handle platform sessions. These sessions are created when something logs in to the platform.  Used by:  PlatformLoginService  Implementation:  org.bonitasoft.engine.platform.session.impl.PlatformSessionServiceImpl  Theme      Description:  Handle storage, retrieval, and update of portal themes.  Used by:  API.  Implementation:  org.bonitasoft.engine.theme.impl.ThemeServiceImpl  Transaction      Description:  Handles business transactions. A business transaction is a high-level transaction that contains several technical transactions.  This service is compatible with JTA.  Used by:  Almost all services, including persistence service to register technical transactions.  Implementation:  org.bonitasoft.engine.transaction.TransactionServiceImpl  Technical logger      Description:  An abstraction layer used to access the logger implementation. Clients of this service can log information using different levels: TRACE, DEBUG, INFO, WARNING, ERROR.  Used by:  All services that log information in the technical log.  Implementation:  TechnicalLoggerSLF4JImpl  Notes:  Implementation based on SLF4J  Work      Description:  Trigger work for immediate execution but asynchronously.  Unlike the scheduler service, which uses persistent storage, the Work service stores data in memory for better performance. This means that clients of the service must handle restart if a triggered work does not complete. For example, if the JVM shuts down, when it restarts the client must check for incomplete work and re-trigger it.  Used by:  ProcessExecutor, to trigger work to execute flow elements one after another  Implementation:  org.bonitasoft.engine.work.ExecutorWorkService  Notes:  Trigger launches work in a ThreadPool. For Community Edition, work items are launched in sequence, each one in a new thread. For Teamwork, Efficiency, Performance, and Enterprise Editions, work items are triggered in multiple threads.  XML      Description:  Parse and write XML files.  Used by:  BusinessArchiveBuilder, to read/write process definitions  ConnectorService, to read connector definition  Implementations:  org.bonitasoft.engine.xml.parse.SAXParser (parse using sax) org.bonitasoft.engine.xml.SAXValidator (validate using sax) org.bonitasoft.engine.xml.DOMWriter (write using DOM)  PackagingThe Engine is provided as three .jar files:  bonita-common contains code that is used by both the server and client sides of the application. For example, the API interface is accessed both on the server side, which contains the API implementations, and on the client side, which has a proxy on the API. It also contains objects such as BusinessArchive, which is the JavaObject representation of a .bar file.  bonita-server contains code used on by the server. For example, it contains service implementations, the services accessor, and API implementations.  bonita-client contains client-only code. For example, it contains the Accessor service for the APIs, which is not in the common or server packages to prevent the server code calling the client-side API accessor.In the Enterprise, Performance, Efficiency, and Teamwork editions, these jar files are bonita-common-sp.jar, bonita-server-sp.jar, and bonita-client-sp.jar.",
      "url": " /bonita/7.7/development/bonita-engine-architecture/engine-architecture-overview",
      "author": "",
      "categories": "Development, Bonita Engine architecture"
    }
    ,
  

    "bonita-7-7-development-bonita-engine-architecture-execution-sequence-states-and-transactions": {
      "title": "Execution sequence, states, and transactions",
      "content"     : "Execution sequence, states, and transactionsThis page describes the sequence of actions performed when a process instance is created and when a step is performed by a user.It shows the interactions between the Bonita Portal and Bonita Engine.In the sequences described in this page, some of the actions apply only to Teamwork, Efficiency, Performance, or Enterprise editions, and are marked “Subscription only”.For the Community edition, these actions are not relevant, but the order of the other actions is the same.Instantiation of a process through a user entry formUser Step action sequenceUser Step submission sequenceFlow node states and transitionsExecution of a stepExample: User taskIn the first diagram, the task contains connectors.In the second diagram, there are no connectors in the task.Work service mechanismShort transactions and asynchronismSummary of state typesInstantiation of a process through a user entry form  The Portal displays the process instantiation form to the user  The user enters data in the form  The button of the form having the Start process action in the UI designer sends a POST request with the form data to start the process  The submitted data are validated against the process instantiation contract  If the contract is valid the process instance is created and input values are persisted in database  Process data instances are created and initialized in the order of declaration using:  An operation declared on the process that saves its value to the process data  The initial value expression if no operation is declared  null if no expression or operation is definedThe Engine creates and initializes business data  Subscription only: The Engine creates and initializes search indexes  The Engine initializes process instance Documents with default value coming from the definition or with submitted files  Operations (that does not initialize data) are executed. Operations at process instantiation level can either come from V6 forms or from calling process instances (for processes stared by call-activities)  The Engine instantiates and executes the “on enter” connectors (evaluate input expression, execute, evaluate output operation). Connectors are executed in the order of declarationCommunity: Execution duration is not limited. If the connector never finishes, the process instantiation will never finishSubscription: Execution duration of a connector is limited to a maximum of 5 minutes by default. This timeout value can be changed by configuration. Above this limit,the connector execution is aborted and the process instantiation is considered failed.  The process is instantiated, the API call finish and the Engine executes the process flow asynchronouslyUser Step action sequenceFor a user step, the sequence of actions is as follows:  The Engine initializes task variables with their default values  The Engine executes actor filters and then potentially assigns the task to a user  The Engine launches the “on enter” connectors  The Engine evaluates the task dynamic name and description. This will be evaluated only onceThe user task is now in ready state and is waiting for a user to submit it.User Step submission sequence  The Portal displays the form to the user  The user enters data in the form  The button of the form having the Submit task action in the UI designer sends a POST request with the form data to start the step  The submitted data are validated against the step contract  If the contract is valid input values are persisted in database and the execution continues asynchronously. Otherwise an exception is thrown and the step stays in the same state.  The Engine executes the Operations defined for the step  The Engine launches the “on finish” connectors  The Engine processes the Description after step completion  The step is complete.Flow node states and transitionsA state is either stable or terminal:  stable: the flow node is not yet finished, but paused as it waits for input, typically from the user. The transaction is committed.  terminal: This is the last state of the flow node. A flow node in this state is considered to be finished and the engine triggers the asynchronous execution of the following elements of the process.Each state has a specific behaviour and its execution is wrapped into an ACID transaction.A flow node is defined by a set of states.Execution of a step  Get the current state of the step.  Execute the state’s behavior.  Find the next state of the flow node and set it as the current state.  If the state is stable, the transaction is committed, and the API call is returned.  If the state is terminal, the transaction is committed, the Engine triggers the asynchronous execution of the followings elements of the process and the API call is returned.  If the state is neither stable nor terminal, the transition to the next state is scheduled asynchronously.If there is a connector to execute in the state’s behavior, then the transaction is committed and the connector is executed outside of any transaction.The flow node stays in the current state while the connector is being executed.When the execution of the last connector is complete, the state’s behaviour is completed. If you are using a Bonita Subscription edition, a timeout limit can be set for connector execution.Example: User taskThe diagrams below show the transactions and states when a user task is executed.The vertical line represents the condition necessary to execute the current state.The first state is initializing: it is automatically executed and the flow node goes to next state (Ready) but is executed only after an API call.In the first diagram, the task contains connectors.In the second diagram, there are no connectors in the task.As you can see in these illustrations, there is a non-negligible cost when adding some connectors on an activity:If there is no connector to execute then the state executes in one transaction.If there is at least one connector to execute in the state, the state execution requires at least three transactions:  The first transaction is committed just before the execution of the connectors. There is one transaction for this whatever the number of connectors.  The connectors are not transactional. Nevertheless, a transaction is needed to save the output data of the connector execution. There will be a transaction for each connector that is executed.  The last transaction is used to continue to execute the current state’s behavior, and to set the state to the next reachable one (but not execute it).Work service mechanism  The Engine commits the transaction and then submits a work to execute the connectors asynchronously. The connectors are executed outside any transaction and thus are not a problem for the data integrity if the execution takes too long.  As soon as there is a free slot in the Work Service, it executes the work, which is in fact the connector execution.  When a connector execution is finished, if there are other connectors, they are executed in the same way. If there are no more connectors, the Engine continues to execute the state’s behavior by triggering a new work.  When the Engine executes a state’s behavior, it updates the display name, and then sets the activity to the state “Ready”. As this is a stable state, the Engine commits the transaction and stops.  The state “Ready” will then be executed through an API call.Short transactions and asynchronismTransactions in the Engine are as small as possible, and each transaction is committed as soon as possible.Each unit of work uses a non-blocking queued executor mechanism and is thus asynchronous. There is a dedicated queue for asynchronous executions. (Connector execution is handled in a separate execution queue.)As a consequence of the design, when an asynchronous work unit originates from an API call (which might be a result of a human action), then the call returns and ends the transaction.The work unit is then executed as soon as possible, asynchronously, in a separate transaction.For this reason, a task that is being initialized might not yet be ready for execution, but will be executable after a short while, depending on the work executor availability.A client application therefore needs to poll regularly to check when the asynchronous work unit is finished, or write an event handler in order to be notified.Summary of state types  Initializing: indicates that an activity is being initialized.  Ready: indicates that a human or manual task has been initialized but is not yet being executed.  Waiting: indicates that a RECEIVE_TASK, BOUNDARY_EVENT or INTERMEDIATE_CATCH_EVENT activity is waiting for some external trigger.  Executing: indicates that an activity is being executed.  Failed: indicates that a task has failed because of a problem in execution, for example because of an exception that was not anticipated, a connector that fails, or bad expression design.  Skipped: indicates that a task that failed because of connector execution failure is being skipped instead of re-executed. Skipping a task skips the execution of any connectors not already executed and proceeds to task completion.  Cancelled: indicates that an activity is cancelled by a user.  Aborting: indicates that an activity is cancelled by the system. For example, an interrupting event sub-process can trigger ABORTS for all other active paths.  Completed: indicates an activity that is complete.  Error: not currently used.",
      "url": " /bonita/7.7/development/bonita-engine-architecture/execution-sequence-states-and-transactions",
      "author": "",
      "categories": "Development, Bonita Engine architecture"
    }
    ,
  

    "bonita-7-7-development-bonita-engine-architecture-services-event-handlers": {
      "title": "Event handlers",
      "content"     : "Event handlersNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.An event handler is an extension to the engine that is configured to run when a specified event occurs.You can add event handlers for several purposes and you can configure which events you want to catch.We strongly recommend that you add only appropriate handlers and carefully code the handler filters to handle only those events that you are interested in.An event is a change to any object in the database (user, activity, processDefinition,… ).You can create an event handler to track any change to any object in the database and take the appropriate action. For example:  Catch PROCESSINSTANCE_CREATED to detect that a process instance has started, and notify the process supervisor.  Catch FLOWNODE_INSTANCE_CREATED to detect that a human task is available, and send email to all the users elligible to perform it.  Catch HIDDEN_TASK_CREATED to detect that a service task becomes available, and start an external system that is required to complete the task.At the end of this page there is a list of all the events.In a cluster environment, Event handlers must be Serializable (implements Serializable and have all its fields serializable or transient) because they are shared with other nodes of the cluster.Example: deploy an event handlercreate a maven project for event handler jarCreate event handler class:Deploy jarRegister an event handlerTest itFilter an eventEvent listExample: deploy an event handlerThis example shows an event handler that detects changes in the state of activity instances. When executing, the event handler calls technical logger service.create a maven project for event handler jarpom.xml :&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&amp;lt;groupId&amp;gt;org.bonitasoft.example&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;event-handler-example&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;1.0.0-SNAPSHOT&amp;lt;/version&amp;gt;&amp;lt;properties&amp;gt;&amp;lt;bonita.version&amp;gt;7.7.0&amp;lt;/bonita.version&amp;gt;&amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;&amp;lt;/properties&amp;gt;&amp;lt;dependencies&amp;gt;&amp;lt;dependency&amp;gt;&amp;lt;groupId&amp;gt;org.bonitasoft.engine&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;bonita-server&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;${bonita.version}&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;/dependencies&amp;gt;&amp;lt;build&amp;gt;&amp;lt;plugins&amp;gt;&amp;lt;plugin&amp;gt;&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;&amp;lt;configuration&amp;gt;&amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt;&amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt;&amp;lt;/configuration&amp;gt;&amp;lt;/plugin&amp;gt;&amp;lt;/plugins&amp;gt;&amp;lt;/build&amp;gt;&amp;lt;/project&amp;gt;Create event handler class:Create a class that implements SHandler&amp;lt;SEvent&amp;gt;.src/main/java/org/bonitasoft/example/EventHandlerExample.java:package org.bonitasoft.example;import java.util.UUID;import org.bonitasoft.engine.events.model.SEvent;import org.bonitasoft.engine.events.model.SHandler;import org.bonitasoft.engine.events.model.SHandlerExecutionException;import org.bonitasoft.engine.log.technical.TechnicalLogSeverity;import org.bonitasoft.engine.log.technical.TechnicalLoggerService;public class EventHandlerExample implements SHandler&amp;lt;SEvent&amp;gt; {private final TechnicalLoggerService technicalLoggerService;private TechnicalLogSeverity technicalLogSeverity;public EventHandlerExample(TechnicalLoggerService technicalLoggerService, String loggerSeverity) {this.technicalLoggerService = technicalLoggerService;//set desired logging levelthis.technicalLogSeverity = TechnicalLogSeverity.valueOf(loggerSeverity);}public void execute(SEvent event) throws SHandlerExecutionException {if (technicalLoggerService.isLoggable(this.getClass(), technicalLogSeverity)) {technicalLoggerService.log(this.getClass(), technicalLogSeverity, &quot;ExampleHandler: executing event &quot; + event.getType());}// add your business logic here}public boolean isInterested(SEvent event) {if (technicalLoggerService.isLoggable(this.getClass(), technicalLogSeverity)) {technicalLoggerService.log(this.getClass(), technicalLogSeverity,&quot;ExampleHandler - event &quot;+ event.getType()+ &quot; - asks if we are interested in handling this event instance&quot;);}// add your business logic here// for this example purpose, assume we are always interestedreturn true;}public String getIdentifier() {//ensure this handler is registered only oncereturn UUID.randomUUID().toString();}}Deploy jar  Build event-handle-example-1.0-SNAPSHOT.jar using mvn clean install maven command.  Copy event-handle-example-1.0-SNAPSHOT.jar in webapps/bonita/WEB-INF/lib/ folder (for tomcat bundle)Register an event handlerAn event handler is registered on an event by adding an entry to the appropriate map. The list of handlers registered can be extended in the bonita-tenant-sp-custom.xml file:&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;  xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&amp;gt;&amp;lt;!-- add event handler bean definition --&amp;gt;&amp;lt;bean id=&quot;myEventHandlerExample&quot; class=&quot;org.bonitasoft.example.EventHandlerExample&quot;&amp;gt;&amp;lt;!-- add logging service --&amp;gt;&amp;lt;constructor-arg name=&quot;technicalLoggerService&quot; ref=&quot;tenantTechnicalLoggerService&quot; /&amp;gt;&amp;lt;constructor-arg name=&quot;loggerSeverity&quot; value=&quot;WARNING&quot;/&amp;gt;&amp;lt;/bean&amp;gt;&amp;lt;bean id=&quot;eventHandlers&quot; class=&quot;org.springframework.beans.factory.config.MapFactoryBean&quot;&amp;gt;&amp;lt;property name=&quot;targetMapClass&quot;&amp;gt;&amp;lt;value&amp;gt;java.util.HashMap&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;property name=&quot;sourceMap&quot;&amp;gt;&amp;lt;map&amp;gt;&amp;lt;entry key=&quot;PROCESSINSTANCE_STATE_UPDATED&quot; value-ref=&quot;myEventHandlerExample&quot;/&amp;gt;&amp;lt;/map&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;/bean&amp;gt;&amp;lt;/beans&amp;gt;Test itRestart web server and run a basic process and check bonita log file in folder tomcat/logs:INFOS: THREAD_ID=78 | HOSTNAME=gt | ExampleHandler: event PROCESSINSTANCE_STATE_UPDATED - asks if we are interested in handling this event instance...INFOS: THREAD_ID=78 | HOSTNAME=gt | ExampleHandler: executing event PROCESSINSTANCE_STATE_UPDATEDFilter an eventAn event handler contains a filter, isInterested, which detects the relevant instances of the event.The example below shows how to use the State Id of a flow node to filter for a particular state (in this case, failed).Flownode State Ids are defined in the subclasses of org.bonitasoft.engine.core.process.instance.api.states.FlowNodeState.There is no exhaustive list; the set of states is extensible without notice.public boolean isInterested(SEvent event) {boolean isInterested = false;// Get the object associated with the eventObject eventObject = event.getObject();// Check that event is related to a taskif (eventObject instanceof SFlowNodeInstance) {SFlowNodeInstance flowNodeInstance = (SFlowNodeInstance) eventObject;// Verify that state of the task is failed. See// FailedActivityStateImplisInterested = (flowNodeInstance.getStateId() == 3);}return isInterested;}Event handlers are recursive, that is, if an event handler itself modifies something and triggers an event, the relevant event handler is called. This means you might need to include loop detection in your event handler.Event listThis is a snapshot of the events used in the Engine.| | ||:-|:-|| Service | Events| | ActivityInstanceServiceImpl | ACTIVITYINSTANCE_CREATED, HUMAN_TASK_INSTANCE_ASSIGNEE_UPDATED, ACTIVITYINSTANCE_STATE_UPDATED, ACTIVITY_INSTANCE_TOKEN_COUNT_UPDATED, HIDDEN_TASK_CREATED, HIDDEN_TASK_DELETED, PENDINGACTIVITYMAPPING_CREATED, PENDINGACTIVITYMAPPING_DELETED| | ActorMappingServiceImpl | ACTOR_CREATED, ACTOR_DELETED, ACTOR_UPDATED, ACTOR_MEMBER_CREATED, ACTOR_MEMBER_DELETED| | CategoryServiceImpl | CATEGORY_CREATED, CATEGORY_DELETED, CATEGORY_UPDATED| | CommandServiceImpl | COMMAND_CREATED, COMMAND_DELETED, COMMAND_UPDATED| | SCommentServiceImpl | COMMENT_CREATED, COMMENT_DELETED| | ConnectorInstanceServiceImpl | CONNECTOR_INSTANCE_CREATED, CONNECTOR_INSTANCE_DELETED, CONNECTOR_INSTANCE_STATE_UPDATED, CONNECTOR_INSTANCE_UPDATED| | DependencyServiceImpl | DEPENDENCY_CREATED, DEPENDENCYMAPPING_CREATED, DEPENDENCY_DELETED, DEPENDENCYMAPPING_DELETED, DEPENDENCY_UPDATED, DEPENDENCYMAPPING_UPDATED| | DocumentMappingServiceImpl | DOCUMENTMAPPING_CREATED, DOCUMENTMAPPING_DELETED, DOCUMENTMAPPING_UPDATED| | SEventInstanceServiceImpl | EVENT_INSTANCE_CREATED, EVENT_TRIGGER_INSTANCE_CREATED, EVENT_TRIGGER_INSTANCE_DELETED, MESSAGE_INSTANCE_CREATED, MESSAGE_INSTANCE_DELETED, MESSAGE_INSTANCE_UPDATED| | ExternalIdentityMappingServiceImpl | EXTERNAL_IDENTITY_MAPPING_CREATED, EXTERNAL_IDENTITY_MAPPING_DELETED| | FlowNodeInstanceServiceImpl | ARCHIVED_FLOWNODE_INSTANCE_DELETED, FLOWNODE_INSTANCE_DELETED| | GatewayInstanceServiceImpl | GATEWAYINSTANCE_CREATED, GATEWAYINSTANCE_HITBYS_UPDATED, GATEWAYINSTANCE_STATE_UPDATED| | IdentityServiceImpl | GROUP_CREATED, GROUP_DELETED, GROUP_UPDATED, METADATA_CREATED, METADATA_DELETED, METADATA_UPDATED, METADATAVALUE_CREATED, METADATAVALUE_DELETED, METADATAVALUE_UPDATED, ROLE_UPDATED, ROLE_CREATED, ROLE_DELETED, USER_UPDATED, USER_CREATED, USER_DELETED, USER_CONTACT_INFO_UPDATED, USER_CONTACT_INFO_CREATED, USER_CONTACT_INFO_DELETED, USERMEMBERSHIP_UPDATED, USERMEMBERSHIP_CREATED, USERMEMBERSHIP_DELETED| | JobServiceImpl | JOB_DESCRIPTOR_CREATED, JOB_DESCRIPTOR_DELETED, JOB_PARAMETER_CREATED, JOB_PARAMETER_DELETED, JOB_LOG_CREATED, JOB_LOG_DELETED|| JobWrapper | JOB_COMPLETED, JOB_EXECUTING| | ProcessDefinitionServiceImpl | PROCESSDEFINITION_CREATED, PROCESSDEFINITION_DELETED, PROCESSDEFINITION_DEPLOY_INFO_UPDATED, PROCESSDEFINITION_IS_DISABLED_UPDATED, PROCESSDEFINITION_IS_ENABLED_UPDATED, PROCESSDEFINITION_IS_RESOLVED_UPDATED| | ProcessInstanceServiceImpl | PROCESS_INSTANCE_CATEGORY_STATE_UPDATED, PROCESSINSTANCE_CREATED, PROCESSINSTANCE_DELETED, PROCESSINSTANCE_STATE_UPDATED, PROCESSINSTANCE_UPDATED|| ProfileServiceImpl | PROFILE_CREATED, PROFILE_DELETED, PROFILE_UPDATED, ENTRY_PROFILE_CREATED, ENTRY_PROFILE_DELETED, ENTRY_PROFILE_UPDATED, PROFILE_MEMBER_DELETED| | ReportingServiceImpl | REPORT_CREATED, REPORT_DELETED| | SupervisorMappingServiceImpl | SUPERVISOR_CREATED, SUPERVISOR_DELETED| | ThemeServiceImpl | THEME_CREATED, THEME_DELETED, THEME_UPDATED|",
      "url": " /bonita/7.7/development/bonita-engine-architecture/services/event-handlers",
      "author": "",
      "categories": "Development, Bonita Engine architecture, Services"
    }
    ,
  

    "bonita-7-7-development-bonita-engine-architecture-services-queriable-logging": {
      "title": "Queriable logger",
      "content"     : "Queriable loggerNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.This page describes the queriable logger service.PurposeUsageImplementation detailsPurposeThe queriable logger service provides information about important events in the Bonita Platform that are not directly related to execution of a process. The log includes information about administration operations such as deployment of a new process definition, commands, reporting, actor mapping, Portal Look &amp;amp; Feel themes, and organization and user management.The Bonita Engine stores information in the queriable log. The information in the log is accessible using the LogAPI(Enterprise, Performance, Efficiency, and Teamwork editions only).The information available from the queriable log is primarily for the platform and process administrator. It is not intended to be used as a notification system: avoid pooling on the queriable log. If you need to be notified of specific events, use the configurable event service.UsageHere is an example of how to search for log message about a specific activity:final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 100);builder.filter(LogSearchDescriptor.ACTION_SCOPE, aTaskId);builder.searchTerm(&quot;Adding a new user&quot;);builder.sort(LogSearchDescriptor.ACTION_TYPE, Order.ASC);final LogAPI logAPI = TenantAPIAccessor.getLogAPI(session);final SearchResult&amp;lt;Log&amp;gt; searchedLogs = logAPI.searchLogs(builder.done());for (Log log : searchedLogs.getResult()) { // Print the detailed user creation message:System.out.println(log.getMessage());}Implementation detailsThe queriable logger service stores log message in the Bonita Engine back-end database using the Hibernate library. The interface and the implementation of the service are available from the source code repository on GitHub.",
      "url": " /bonita/7.7/development/bonita-engine-architecture/services/queriable-logging",
      "author": "",
      "categories": "Development, Bonita Engine architecture, Services"
    }
    ,
  

    "bonita-7-7-development-bonita-engine-architecture-services-technical-logging": {
      "title": "Technical logger",
      "content"     : "Technical loggerThis page describes the technical logger service.PurposeUsageImplementation detailsExamplePurposeThe purpose of this service is to provide an abstraction to the logging framework to all Bonita Engine services, to facilitate debugging of other services.The logged messages are not intended to be accessible through the Engine API (see Queriable logger service).UsageIf you are creating a custom implementation of a service, you might be interested in using the technical loggingservice. Refer to the implementations of existing services for examples of technical logging service usage (for example the AuthenticationServiceImpl).Basically, the technical logging service exposes a method that receives the following parameters:  class name (the source of the log message)  message  throwable (when message is associated with an exception)  severitySee the serviceinterface for details.Implementation detailsThe technical logger implementationuses SLF4J version 1.6.1 to handle the log. SLF4J itself uses a back-end logging framework to write log messages. See the loggingoverview for more details.Logged messages are passed to SLF4J with appropriate logger information so the source of the message remainsmeaningful.ExampleThe following example, DelayedRetry, shows how to write messages to the technical log. DelayedRetry can be called from an event handler that detects failed tasks.package com.bonitasoft.handlers;import org.bonitasoft.engine.api.LoginAPI;import org.bonitasoft.engine.api.ProcessRuntimeAPI;import org.bonitasoft.engine.api.TenantAPIAccessor;import org.bonitasoft.engine.log.technical.TechnicalLogSeverity;import org.bonitasoft.engine.log.technical.TechnicalLoggerService;import org.bonitasoft.engine.session.APISession;public class DelayedRetry implements Runnable {/** Id of the task to run again. */private long taskId;/** Bonita technical logger. */private TechnicalLoggerService technicalLog;public void setTaskId(long id) {taskId = id;}public void setTechnicalLog(TechnicalLoggerService technicalLog) {this.technicalLog = technicalLog;}@Overridepublic void run() {try {//  if (technicalLog//  .isLoggable(this.getClass(), TechnicalLogSeverity.TRACE)) {StringBuilder message = new StringBuilder();message.append(&quot;Starting to wait before trying again task execution &quot;);message.append(taskId);technicalLog.log(this.getClass(), TechnicalLogSeverity.TRACE,message.toString());//  }// Wait for 2 minutes before retryThread.sleep(2*60*1000);//  if (technicalLog//  .isLoggable(this.getClass(), TechnicalLogSeverity.TRACE)) {StringBuilder message2 = new StringBuilder();message2.append(&quot;Will now try task execution &quot;);message2.append(taskId);technicalLog.log(this.getClass(), TechnicalLogSeverity.TRACE,message2.toString());//  }// Get the LoginAPI using the TenantAPIAccessorLoginAPI loginAPI = TenantAPIAccessor.getLoginAPI();// Log in to the tenant to create a sessionfinal APISession session = loginAPI.login(&quot;admin&quot;, &quot;bpm&quot;);// Get the ProcessRuntimeAPI using the TenantAPIAccessor and the// previously created sessionProcessRuntimeAPI processAPI = TenantAPIAccessor.getProcessAPI(session);processAPI.retryTask(taskId);} catch (Exception e) {//  if (technicalLog.isLoggable(this.getClass(),//  TechnicalLogSeverity.ERROR)) {technicalLog.log(this.getClass(), TechnicalLogSeverity.ERROR,&quot;Error while retyring task execution. Task id: &quot;+ taskId, e);//  }}}}",
      "url": " /bonita/7.7/development/bonita-engine-architecture/services/technical-logging",
      "author": "",
      "categories": "Development, Bonita Engine architecture, Services"
    }
    ,
  

    "bonita-7-7-development-bonita-engine-architecture-shared-transactions": {
      "title": "Shared transactions",
      "content"     : "Shared transactionsThere are three entry points to transactions in the Bonita Engine:  API call: one transaction for each call. The transaction is opened automatically by the Engine if it has not been opened externally.  Work units: one transaction per work unit (that inherits TxBonitaWork). A work unit is asynchronous, and is executed as soon as possible when an Execution thread becomes available.  Jobs: when a Scheduler job triggers, it opens a new transaction if it is not itself contained in an existing open transaction.If you are accessing the Engine in Local mode, you also have the option of using shared transactions, which means you can include Engine API calls in a transaction that is managed explicitly by a calling program. For example, in an application for approving and paying expenses, you could have a single transaction that includes the payment instruction sent to the bank and the process step that informs the user that expenses have been paid. If the bank does not complete the payment, the notification is not sent.A transaction managed by the caller has the following structure:startTransaction();try {   myBusinessLogic1();   callBonitaBPMEngine();   myBusinessLogic2();   commitTransaction();} catch (Exception e) {   rollbackTransaction();}The example below shows how to wrap two Engine API calls in the same transaction. Each call updates the value of a variable, and the transaction guarantees that both values are updated or neither value is updated.long procId = processInstance.getId();try {   txManager.begin();   // We want the following 2 calls to be in the same transaction.   processAPI.updateProcessDataInstance(dataFoo, procId, new Integer(42));   processAPI.updateProcessDataInstance(dataBar, procId, new Integer(42));} finally {   // We explicitly roll back the current transaction   txManager.rollback();}// Start a new transaction to fetch the data values //   and ensure their values were not updated.txManager.begin();DataInstance processDataInstanceFoo = processAPI.getProcessDataInstance(dataFoo, procId);DataInstance processDataInstanceBar = processAPI.getProcessDataInstance(dataBar, procId);if (((Integer) processDataInstanceFoo.getValue()) != 3 &amp;amp;&amp;amp; ((Integer) processDataInstanceBar.getValue()) != 4) {   System.err.println(&quot;The values for the variables foo and bar should not have been changed.&quot;);}txManager.commit();It is also possible to manage your own transactions in the server side of the Engine using Commands. The CommandAPI, which executes some custom code on the server side, enables you to execute code in several transactions if necessary.To do this, it provides access to the UserTransactionService exposing the following methods:  registerBonitaSynchronization(BonitaTransactionSynchronization txSync)  executeInTransaction(Callable&amp;lt;T&amp;gt; callable)Two implementation of the executeInTransaction method are provided:  Community Edition: basic execution  Subscription Edition: retries, only on certain exceptions (IOException, Row locked, …)Below are examples of code that can be used in a user Command.Anonymous class:final long processInstanceId = 1704;final SProcessInstanceServiceprocessInstanceService = serviceAccessor.getProcessInstanceService();SProcessInstance pi = userTransactionService.executeInTransaction(new Callable&amp;lt;SProcessInstance&amp;gt;() {	@Override	public SProcessInstance call() throws Exception {		return processInstanceService.getProcessInstance(processInstanceId);	}});Custom class:class MyCallable implements Callable&amp;lt;SProcessInstance&amp;gt; {	private final ProcessInstanceService processInstanceService;	private long processInstanceId;	MyCallable(ProcessInstanceService processInstanceService) {		this.processInstanceService = processInstanceService;	}	@Override	public SProcessInstance call() throws Exception {		return processInstanceService.getProcessInstance(processInstanceId);	}		public void setProcessInstanceId(long processInstanceId) {this.processInstanceId = processInstanceId;}}class MyCommand extends TenantCommand {	@Overridepublic Serializable execute(final Map&amp;lt;String, Serializable&amp;gt; parameters, final TenantServiceAccessor serviceAccessor) {		SProcessInstanceService processInstanceService = serviceAccessor.getProcessInstanceService();		MyCallable callable = new MyCallable(processInstanceService);		SProcessInstance processInstance;		// ... custom treatment...		callable.setProcessInstanceId(1704);		// First transaction:		processInstance = userTransactionService.executeInTransaction(callable);		// ... custom treatment...		callable.setProcessInstanceId(1209);		// Second transaction:		processInstance = userTransactionService.executeInTransaction(callable);		// Of course, MyCallable implementation is stateless, so it is reusable.}}",
      "url": " /bonita/7.7/development/bonita-engine-architecture/shared-transactions",
      "author": "",
      "categories": "Development, Bonita Engine architecture"
    }
    ,
  

    "bonita-7-7-development-building-community-edition-from-source": {
      "title": "Build Bonita Community edition from source files",
      "content"     : "Build Bonita Community edition from the sourceThis page explains how to build Bonita Community edition from the source.All source code of Bonita solution is available from the Bonitasoft GitHub organization. Each component of the solution has a dedicated repository (e.g. Engine repository).PrerequisitesTo build the product, you need the following:  Internet connection  Git  JDK 1.8 or above  Apache Maven 3.3.9 (version is mandatory)  NodeJSWe provide build script for Linux only. Therefore it is recommended to use Linux. If you don’t have Linux you can either use a virtual machine or port the build script to Mac.Note that you can run Bonita on Windows but you cannot build Bonita on Windows (known limitation).Building BonitaIn order to build Bonita you need to use the script provided in Build Bonita GitHub project. Use the branch of the project that match the version you want to build.Simply run bash build-script-7.4.1.sh and provide required information.A script is used because some components rely on components that are built earlier in the sequence, so the build order must be respected.",
      "url": " /bonita/7.7/development/building-community-edition-from-source",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "bonita-7-7-development-continuous-integration-automating-builds": {
      "title": "Automate builds",
      "content"     : "Automate buildsNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.OverviewDeploying a process bar fileDeploying a REST API extension fileAutomate build of a specific REST API extensionOverviewBonita includes a Workspace API, in the form of the script BonitaStudioBuilder, to build a .bar file from a process and/or a .zip file from a REST API extension in a repository. It accesses the build features of Bonita Studio in the background. This is intended to be used in a continuous integration and testing environment.Bonita Studio must be installed but must not be running. You must use a dedicated Bonita Studio for continuous integration.This is because the Bonita Studio workspace directory should be removed before running the BonitaStudioBuilder script. (For continuous integration, it is best practice to clean the files before and after a build.)Warning: Workspace API is deprecated since Bonita 7.7.0. Instead, we strongly encourage you to use the LA builder included in the tooling suite of Bonita Continuous Delivery add-on. One added-value is that LA builder does not need a studio to be installed.To use BonitaStudioBuilder, you need the following:  Bonita Studio (the same version as the Bonita repository). This must be a dedicated Bonita Studio and repository used only for your BonitaStudioBuilder, because the tool removes the content of the repository.  A window manager  Java 1.8After Bonita Studio is installed, the BonitaStudioBuilder scripts are in the workspace_api_scripts folder. There are scripts for Windows (.bat), Linux (.sh), and MacOS (_Mac.sh).Pass configuration information to the BonitaStudioBuilder script as system properties, using the following arguments:ArgumentPurposerepoPathThe parent folder of the repository storing the process. Typically, this is the trunk folder. It can also be a folder in tags if you want to point to a restore point in the repository. You cannot use a remote repository folder. A process to be built must be manually checked out before running the script.outputFolderThe folder where the generated bar and zip files will be stored.processesThe list of the processes in the repository for which bar files are required. For each process, specify the process identifier and, optionally, the version. If you do not specify the version, the latest version is used. Format: process,version;_process,version…Example: -process=TravelRequest,1.5;Expenses;LeaveRequest,1.0_buildAllProcessesIf enabled, bar files are built for the latest version of each process in the repository.buildAllRestAPIExtensionsIf enabled, zip files are built and installed in maven repository for all REST API extensions in the repository.buildAllIf enabled, bar files are built for the latest version of each process in the repository and zip files are built and installed in maven repository for all REST API extensions.migrateIf enabled, you can point the repoPath argument to a repository of an older version than the version of the running Bonita Studio. The processes in the older version repository will be automatically migrated to the current version.environmentThe environment with which the bar files will be built. The environment defines the process configuration, including dependencies. If you do not specify an environment, the exported bar file will not contain the dependencies. All the specified processes are built for the same environment. If you want to build for different environments, you need to run the script once for each environment.profileOptional Maven profiles (comma separated list of profile id) to activate when building the REST API extensions projects.linkIf enabled, do not make a copy of the project to build.To run the script:  Check out the project to a directory in the Studio path.  Delete the content of the workspace directory in your Bonita Studio installation.  Run the script. For example:./BonitaStudioBuilder.sh -repoPath=/home/myBonitaRepoCheckedOut-outputFolder=/home/bonita/myArtefacts -buildAll -migrate -environment=Qualification -profile=qa  When the script runs, information is logged in workspace/.metadata/.log.Deploying a process bar fileFrom the bar file, a process can be deployed manually using Bonita Portal. You can also deploy a process using the Engine API.Deploying a REST API extension fileFrom the zip file, a REST API extension can be deployed manually using Bonita Portal. You can also deploy a REST API extension using the REST API.Automate build of a specific REST API extensionA REST API extension is a maven project stored in a Studio repository. You can find them in the studio workspace: workspace/yourRepositoryName/restAPIExtensions/yourRestAPIProject. From there you can simply use maven cli or a CI job to build, test or packake your REST API Extension.",
      "url": " /bonita/7.7/development/continuous-integration/automating-builds",
      "author": "",
      "categories": "Development, Continuous integration"
    }
    ,
  

    "bonita-7-7-development-continuous-integration-set-up-continuous-integration": {
      "title": "Set up continuous integration",
      "content"     : "Set up continuous integrationNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.Note: Bonita Continuous Delivery add-on comes with an out-of-the-box solution based on Jenkins CI.This page explains how to set up a continuous integration environment for your Bonita processes.With Continuous Integration (CI) your processes are continuously built and tested while you are designing them. Collaborating on process design can be enhanced with CI by ensuring the integrity of your processes along the development phase.You could use any integration server, but this page describes how to use Jenkins, as an example.PrerequisitesSet up Bonita Studio for CICreate a Jenkins job to build your processes automaticallyTest your processes automaticallyPrerequisitesTo follow this page, you need to be familiar with:  Java-based project development with Maven  Subversion version control system use  Jenkins CI server installation and configurationBefore you begin, you need the following components available for your CI environment:  Bonita Studio Teamwork, Efficiency, Performance, or Enterprise edition: The automated process build feature is not available in the Community edition.  A window manager: You need a window manager to use the Bonita Studio process builder.  Java: You need Java 8 or above to be installed on the CI server and on your development computer.  Maven: This guide provides example Maven-based projects for executing automated tests of your processes. Maven 3 is required on the CI server and the test development computer.  Subversion: Bonita Studio enables business analysts and developers to collaborate on process design using a shared Subversion (SVN) repository. This tutorial assumes that you have access to a Subversion server.  Jenkins: The Jenkins CI server is responsible for coordinating continuous build and test of your processes.This tutorial assumes that Jenkins is up and running with Maven and Subversion plugins.Set up Bonita Studio for CIThere are two stages to setting up Bonita Studio for CI:  On your Subversion server, create a shared repository that can be accessed by the business analysts and developers working on processes and by the CI tools. After you have create your shared repository you may develop your processes in this repository and/or import existing processes. Each Bonita Studio user must connect to the repository.  Define an environment for configuring processes for CI. This environment will be stored in the shared repository together with your process definitions.The next section assumes that you created an environment called CI.Create a Jenkins job to build your processes automaticallyThis section describes how to create a Jenkins job to build your processes automatically. This job will produce Business Archive (.bar) files ready for deployment.All example scripts given on this page are compatible with Unix-like operating systems.  Prepare Bonita Studio on the CI server: Bonita Studio includes a BonitaStudioBuilder script to build processes in a CI environment. Install Bonita Studio as follows:  Download the OS-independent package (zip) from the Customer Portal. For example use BonitaSubscription-7.6.3.zip for version 7.6.3. You must have the same version of Bonita Studio for the shared repository and the CI server.  Extract the package to a permanent location on the CI server: $&amp;gt; unzip -d /path/to/BonitaStudio BonitaStudioSubscription-7.6.3.zip  Install your license (a license must have been requested for CI server): $&amp;gt; cp license.lic /path/to/BonitaStudio/BonitaStudioSubscription-7.6.3/lic_folder/You are recommended to install a window manager on the CI server in order to have process diagram screenshots generated along with business archives.  Create Jenkins job: In Jenkins, create a new job of type “Build a free-style software project”. Specify a job name for example “Bonita-BuildProcesses”.Configure Jenkins job:  Check out your process repository from Subversion. To do this, configure the “Source Code Management” section to retrieve (check out) your Subversion process shared repository. Specify the repository URL, and optionally your local repository. We recommend that you set teh check-out strategy to Use ‘svn update’ as much as possible.  Invoke BonitaStudioBuilder scriptNote: only one instance of BonitaStudioBuilder can be executed at a time on a computer.Add a build step of type “Execute shell” configured with the following content: #!/usr/bin/env sh	 echo &quot;##### Clean previously generated business archives&quot; rm -Rf $WORKSPACE/process-bars echo &quot;&quot;	 echo &quot;##### Clean BonitaStudioBuilder workspace before each execution&quot; rm -Rf /path/to/BonitaStudio/workspace echo &quot;&quot;	 echo &quot;##### Execute BonitaStudioBuilder for all processes&quot; cd /path/to/BonitaStudio/.. ./BonitaStudio/workspace_api_scripts/BonitaStudioBuilder.sh-repoPath=$WORKSPACE/process-repository-outputFolder=$WORKSPACE/process-bars -buildAll -environment=CI	 echo &quot;##### Package generated business archives&quot; zip $WORKSPACE/process-bars.zip $WORKSPACE/process-bars/*  This sample script invokes BonitaStudioBuilder to build all processes from your process-repository using the CI environment.  See the BonitaStudioBuilder documentation for information on script options.Then, share generated business archives as a Maven artifacts  One way to make the generated .bar files available to other Maven projects is to install them as Maven artifacts.  The following example installs the processes artifact in the local Maven repository. The Maven artifact could also be deployed to a centralized Maven repository manager solution.  To do so, add a second build step of type “Invoke top-level Maven targets” configured as follows:Goals: install:install-fileProperties:groupId=com.acme.bonitaartifactId=process-barsversion=1.0.0-SNAPSHOTpackaging=zipfile=$WORKSPACE/process-bars.zipEventually, archive generated artifact in Jenkins   You can archive the job artifact (generated processes package) in Jenkins. To do so, add a post-build action of type “Archive the artifacts” and choose to archive the “process-bars.zip” package.As a result, the generated business archives will be made available for download from Jenkins interface.  Run the Jenkins job  Run the “Bonita-BuildProcesses” Jenkins job. When it is finished, the Maven artifact   com.acme.bonita:process-bars:1.0.0-SNAPSHOT in installed in the local Maven repository of the CI server. The generated processes package is also available as a job build artifact in Jenkins.Test your processes automaticallyThis section contains an example of how to test a process from a given Business Archive. It consists of writing JUnit Test cases using the Bonita Engine Java API.Note: In this example, we show only how to test the runtime aspects of a process, using the Java APIs. It is also possible to use cargo to deploy the generated bar file into an application server and then launch Selenium tests to test web aspects of a process.For this example we are using a Maven project to write our tests.  In your IDE create a new Maven project and share it (for example using SVN or Git).  Configure local access to Bonita Engine.  As we want to test processes build with a Bonita Subscription edition, you need to configure the required Maven artifacts. You should also check that there is a valid license file in ${bonita.client.home}/ and the System property bonita.client.home set to this folder path.  We recommend that you write your test cases in the src/test/java folder of your project and put all related resources (Bar files, organization file…) in src/test/resources.  Before installing your processes load the relevant organization (regarding your actor mapping). You may have to export your organization from a Bonita Studio:Menu Organization &amp;gt; Export, Select your Organization.For example:private void installOrganization() {File organizationFile = new File(MyTestCase.class.getResource(&quot;/ACME.xml&quot;).getFile())String organizationContent = getFileContent(organizationFile)getIdentityAPI().importOrganization(organizationContent)}  Then as a basic test, we try to deploy each generated processes. For example:@Testvoid deploy() throws Exception { // Retrieve automatically generated bars as a Map&amp;lt;filename, fileContent&amp;gt; Map&amp;lt;String, InputStream&amp;gt; bars = getBars() Assert.assertTrue(&quot;No bar found in resources&quot;, !bars.isEmpty()) // For each bar deploy and enable it for(Entry&amp;lt;String, InputStream&amp;gt; entry : bars.entrySet()) { BusinessArchive archive = BusinessArchiveFactory.readBusinessArchive(entry.getValue()) final String entryKey = entry.getKey() ProcessDefinition definition = getProcessAPI().deploy(archive) final long defId = definition.getId() Assert.assertNotNull(&quot;Failed to deploy &quot;+entryKey, definition) getProcessAPI().enableProcess(defId) getProcessAPI().disableProcess(defId) getProcessAPI().deleteProcessDefinition(defId) }}  Now configure a job to run this simple test case on your CI (these steps assume you have shared your generated processes as a Maven artifact, so you can use the maven-dependency plugin to retrieve the latest built processes):  Create a new freestyle job in Jenkins  Configure the source code management to retrieve your Maven project.  Add a build step  Select “Invoke top-level Maven targets”  Use following Goal: org.apache.maven.plugins:maven-dependency-plugin:2.7:get  In properties, set the following:  version=1.0.0-SNAPSHOT  dest=$WORKSPACE  groupId=com.acme.bonita  artifactId=process-bars  packaging=zipThen add another build step to unzip the artifact. Select “Execute shell”, and use the command unzip process-bars-1.0.0-SNAPSHOT.zip -d project/src/test/resources.  Finally, add another Maven 3 build step to build the test project:  Goals: clean install  You may want to publish the JUnit report:  Add a post build action -&amp;gt; Publish Junit test result.  Set the path project/target/test-reports/*.xml.",
      "url": " /bonita/7.7/development/continuous-integration/set-up-continuous-integration",
      "author": "",
      "categories": "Development, Continuous integration"
    }
    ,
  

    "bonita-7-7-development-engine-api-configure-client-of-bonita-bpm-engine": {
      "title": "Configure connection to Bonita Engine",
      "content"     : "Configure connection to Bonita EngineIf you want your application to use the engine API of a remote engine, your application (the client) must be configured to connect to the engine (the server)The engine (the server) must also be configured to accept the connection.Client configurationConfigure Client using programmatic configurationConfigure Client using System propertiesConfigure client using Bonita Home clientServer configurationServer configuration to accept HTTP ConnectionServer configuration to accept EJB3 connectionTroubleshootingClient configurationThere is three ways to configure the client to connect to the Bonita Engine.First the engine client verify if the configuration is set programmatically,then it tries to get the configuration set in system properties, finally it falls back to the legacy way of configuration that is the bonita home client.In order to be able to start the portal with a remote engine the following system properties must be set in the JVM starting the Portal:  org.bonitasoft.platform.username must be set with the username of the platform admin  org.bonitasoft.platform.password must be set with the password of the platform adminConfigure Client using programmatic configurationYou can configure the connection to the engine directly using org.bonitasoft.engine.util.APITypeManager, please refer to the Javadoc.Here is an example of programmatic configuration to an engineHashMap&amp;lt;String,String&amp;gt; parameters= new HashMap&amp;lt;&amp;gt;();parameters.put(&quot;server.url&quot;, &quot;http://myserver.com:8080&quot;);parameters.put(&quot;application.name&quot;, &quot;bonita-application&quot;);APITypeManager.setAPITypeAndParams(ApiAccessType.HTTP, parameters)Configure Client using System propertiesYou can set the system property org.bonitasoft.engine.api-type to HTTP, EJB3 or LOCAL.  HTTP:The HTTP connection mode will connect the client to the engine using the http protocol. This is the most common way to connect to engine remotly.When using HTTP mode, you must set the following system properties  org.bonitasoft.engine.api-type.server.url: it is the url of the server, e.g. for a engine on the same host it can be http://localhost:8080  org.bonitasoft.engine.api-type.application.name: it is the name of the web aplication on wich the engine HTTP API is deployed, e.g. bonita  We do not guarantee to keep the http protocol stable, so we strongly recommend that you use the same version for boththe client and the server  EJB3The EJB3 connection mode will connect the client to the engine using EJBs.You will need to specify at least org.bonitasoft.engine.ejb.naming.reference that is the name use to lookup the ServerAPI  LOCAL This is the default connection mode, it connects to the server in the same JVM (not remote). If nothing is set this mode will be used.Configure client using Bonita Home clientDeprecated, use the programmatic way instead, see APITypeManager.This is a legacy way to configure the connection to the remote engine.In this case you have to create a folder containing a engine-client directory and a conf subdirectory.This last subdirectory must contain a file named bonita-client-custom.properties having as content configuration of the engine client (see below).Finally set the System property bonita.home to the root folder you created.Here is the default content of this configuration file, uncomment the part of the file corresponding to the type of connection you want and customize it according to your application.###template file# LOCALorg.bonitasoft.engine.api-type = LOCAL# HTTP#org.bonitasoft.engine.api-type = HTTP#server.url = http://localhost:8080#application.name = bonita# Remote: EJB3#org.bonitasoft.engine.api-type = EJB3# WildFly 10#java.naming.factory.url.pkgs = org.jboss.ejb.client.naming#default EJB reference name#org.bonitasoft.engine.ejb.naming.reference=ejb:bonita-ear/bonita-ejb/serverAPIBean!org.bonitasoft.engine.api.internal.ServerAPIServer configurationServer configuration to accept HTTP ConnectionBy default Tomcat and WildFly bundles along with the bonita.war from the deploy bundle are configured to accept connection for HTTP connections.It is configured in the web.xml file of the web application like this:&amp;lt;servlet&amp;gt;&amp;lt;servlet-name&amp;gt;HttpAPIServlet&amp;lt;/servlet-name&amp;gt;&amp;lt;servlet-class&amp;gt;org.bonitasoft.engine.api.internal.servlet.HttpAPIServlet&amp;lt;/servlet-class&amp;gt;&amp;lt;/servlet&amp;gt;This HTTP access  is not secured, it should not be exposed outside a trusted area. We recommend you to deactivate it if you expose directly your deployment to the outside world.Server configuration to accept EJB3 connectionBy default the WildFly bundle is configured to accept connection for EJB3.For an EJB3 client connection to work with WildFly 10, there are some additional configuration steps.If the client is not located on the same host than the WildFly server, you need to create a Application user in the WildFly administration console.So open the WildFly administration console and create a user account to be used for remote connections (for example, username bonita and password bpm).Your Java client needs to have the WildFly client classes in the classpath for it to communicate correctly with the server.If you use Maven to manage your dependencies, add the following dependency in your pom.xml :&amp;lt;dependency&amp;gt;&amp;lt;groupId&amp;gt;org.wildfly&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;wildfly-ejb-client-bom&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;10.1.0.Final&amp;lt;/version&amp;gt;&amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&amp;lt;/dependency&amp;gt;The same kind of configuration is possible if you use some other dependency management tool like gradle or ivy.If you do not use any management tool, you have to include the jboss-client.jar to your classpath. It is available in the WildFly bundle in the $WILDFLY_HOME/bin/client folder.Create a property file named jboss-ejb-client.properties, to the client classpath.It contains information needed to make the remote connection, including the username and password of the user you created in the WildFly console, as shown below:endpoint.name=client-endpointremote.connectionprovider.create.options.org.xnio.Options.SSL_ENABLED=falseremote.connections=defaultremote.connection.default.host=myhostnameremote.connection.default.port = 8080remote.connection.default.connect.options.org.xnio.Options.SASL_POLICY_NOANONYMOUS=falseremote.connection.default.username=bonitaremote.connection.default.password=bpmUpdate the bonita-client.properties file configured in the ${bonita.home}/client/conf folder for the bonita client to connect to the server with the appropriate API type.# Remote: EJB3org.bonitasoft.engine.api-type = EJB3# WildFly 10java.naming.factory.url.pkgs = org.jboss.ejb.client.naming#default EJB reference nameorg.bonitasoft.engine.ejb.naming.reference=ejb:bonita-ear/bonita-ejb/serverAPIBean!org.bonitasoft.engine.api.internal.ServerAPIIf it is not already done for the WildFly server to accept remote connections, update the WildFly configuration file, standalone.xml:  In the interfaces section, modify the IP address so that the Bonita Engine is visible to the network.  Specify that port 4447 comes from the remoting socket-binding.TroubleshootingIf the following stacktrace appears in your client console :IllegalStateExceptionSep 29, 2015 3:46:16 PM org.jboss.ejb.client.EJBClient &amp;lt;clinit&amp;gt;INFO: JBoss EJB Client version 1.0.5.FinalException in thread &quot;main&quot; java.lang.IllegalStateException: No EJB receiver available for handling [appName:bonita-ear,modulename:bonita-ejb,distinctname:] combination for invocation context org.jboss.ejb.client.EJBClientInvocationContext@24e6d224at org.jboss.ejb.client.EJBClientContext.requireEJBReceiver(EJBClientContext.java:584)at org.jboss.ejb.client.ReceiverInterceptor.handleInvocation(ReceiverInterceptor.java:119)at org.jboss.ejb.client.EJBClientInvocationContext.sendRequest(EJBClientInvocationContext.java:181)at org.jboss.ejb.client.EJBInvocationHandler.doInvoke(EJBInvocationHandler.java:136)at org.jboss.ejb.client.EJBInvocationHandler.doInvoke(EJBInvocationHandler.java:121)at org.jboss.ejb.client.EJBInvocationHandler.invoke(EJBInvocationHandler.java:104)at com.sun.proxy.$Proxy0.invokeMethod(Unknown Source)at org.bonitasoft.engine.api.EJB3ServerAPI.invokeMethod(EJB3ServerAPI.java:68)at org.bonitasoft.engine.api.impl.ClientInterceptor.invoke(ClientInterceptor.java:86)at com.sun.proxy.$Proxy1.login(Unknown Source)at org.support.bonitasoft.example.CountInstances.login(CountInstances.java:127)at org.support.bonitasoft.example.CountInstances.main(CountInstances.java:90)It means that the jboss-ejb-client.properties has not been found in the classpath or that it has not been configured correctly.",
      "url": " /bonita/7.7/development/engine-api/configure-client-of-bonita-bpm-engine",
      "author": "",
      "categories": "Development, Engine API"
    }
    ,
  

    "bonita-7-7-development-engine-api-create-your-first-project-with-the-engine-apis-and-maven": {
      "title": "Create your first project with the Engine APIs and Maven",
      "content"     : "Create your first project with the Engine APIs and MavenThis page contains an example that explains how to set up Maven project to create a client that uses the Bonita client APIs to communicate with the Bonita Engine and run a process. It assumes that you are a Java programmer familiar with using Maven.Bonita Client APIsMaven dependenciesConfigure the connection to the Bonita PlatformLog inExample of a client programStart a processList open process instancesList archived process instancesList pending tasksExecute a taskBonita Client APIsIn this example, we use the following APIs:  LoginAPI: Manages the login on tenants. Using this API you can obtain an APISession, which is required for access to the tenant APIs, such as the IdentityAPI and the ProcessAPI.  ProcessAPI: Manages processes. Using this API you can handle process execution (for example, start a process, retrieve a task, execute a task, or retrieve data) and process management (for example, deploy, undeploy, enable or disable a process).Maven dependenciesIn order to use the client APIs, you need to add a dependency to the bonita-client artifact in your Maven pom.xml file:&amp;lt;properties&amp;gt;   &amp;lt;bonita.bpm.version&amp;gt;7.7.0&amp;lt;/bonita.bpm.version&amp;gt;   ...&amp;lt;/properties&amp;gt; &amp;lt;!-- Bonita Engine --&amp;gt;&amp;lt;dependency&amp;gt;&amp;lt;groupId&amp;gt;org.bonitasoft.engine&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;bonita-client&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;${bonita.bpm.version}&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;Configure the connection to the Bonita PlatformYou must configure the connection to the Engine (i.e. Bonita Platform) for your project. To do so you can use System properties or programmatic configuration.Take a look at how to configure a clientLog inThe first action of the client must be to log in. This example shows how to log in when accessing the server over HTTP:Map&amp;lt;String, String&amp;gt; settings = new HashMap&amp;lt;String, String&amp;gt;();settings.put(&quot;server.url&quot;, &quot;http://localhost:8080&quot;);settings.put(&quot;application.name&quot;, &quot;bonita&quot;);APITypeManager.setAPITypeAndParams(ApiAccessType.HTTP, settings);// get the LoginAPI using the TenantAPIAccessorLoginAPI loginAPI = TenantAPIAccessor.getLoginAPI();// log in to the tenant to create a sessionAPISession apiSession = loginAPI.login(username, password);Example of a client programIn this example, a user interacts with a Bonita process by choosing actions from a command-line client program written in Java.The user can choose one of the following actions:  start a process  list open process instances: process instances that have not yet completed  list archived process instances: process instances that have completed  list pending tasks  execute a taskThe program displays a menu presented by the getMenutTextContent method:private static String getMenutTextContent() {   StringBuilder stb = new StringBuilder(&quot;nChoose the action to be executed:n&quot;);   stb.append(&quot;0 - exitn&quot;);   stb.append(&quot;1 - start a processn&quot;);   stb.append(&quot;2 - list open process instancesn&quot;);   stb.append(&quot;3 - list archived process instancesn&quot;);   stb.append(&quot;4 - list pending tasks n&quot;);   stb.append(&quot;5 - execute a taskn&quot;);   stb.append(&quot;Choice:&quot;);   String message = stb.toString();   return message;   }These choices are interpreted by the following code:private static void executeActions(ProcessDefinition processDefinition) throws IOException, BonitaException {String message = getMenutTextContent();String choice = null;do {// show the menu and read the action chosen by the userchoice = readLine(message);if (&quot;1&quot;.equals(choice)) {// if user chooses 1, start a new process instancestartProcess(processDefinition);} else if (&quot;2&quot;.equals(choice)) {// if user chooses 2, list open process instanceslistOpenedProcessInstances();} else if (&quot;3&quot;.equals(choice)) {// if user chooses 3, list archived process instanceslistArchivedProcessInstances();} else if (&quot;4&quot;.equals(choice)) {// if user chooses 4, list pending taskslistPendingTasks();} else if (&quot;5&quot;.equals(choice)) {// if user chooses 5, execute the task chosen by the userexecuteATask();} else if (!&quot;0&quot;.equals(choice)) {System.out.println(&quot;Invalid choice!&quot;);}} while (!&quot;0&quot;.equals(choice));}Start a processprivate static void startProcess(ProcessDefinition processDefinition) {ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);ProcessInstance processInstance = processAPI.startProcess(processDefinition.getId());}List open process instancesAll Bonita Engine API methods that deal with collections are paged to avoid having too many entries in memory. For these methods, if you want to retrieve all results you need to handle this page by page. This the case with the searchProcessInstances method used here to retrieve open process instances. In the example, each page will contain up to 5 (PAGE_SIZE) elements:private static void listOpenedProcessInstances() {// the result will be retrieved by pages of PAGE_SIZE sizeint startIndex = 0;int page = 1;SearchResult&amp;lt;ProcessInstance&amp;gt; result = null;do {// get the current page of open process instancesresult = getOpenProcessInstancePage(session, startIndex);// print the current pageprintOpenedProcessIntancesPage(page, result);// go to next pagestartIndex += PAGE_SIZE;page++;} while (result.getResult().size() == PAGE_SIZE);}private static SearchResult&amp;lt;ProcessInstance&amp;gt; getOpenProcessInstancePage(APISession apiSession, int startIndex) throws BonitaException {// create a new SeachOptions with given start index and PAGE_SIZE as max number of elementsSearchOptionsBuilder optionsBuilder = new SearchOptionsBuilder(startIndex, PAGE_SIZE);// sort the result by the process instance id in ascending orderoptionsBuilder.sort(ProcessInstanceSearchDescriptor.ID, Order.ASC);// perform the request and return the resultProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);return processAPI.searchProcessInstances(optionsBuilder.done());}List archived process instancesIn order to retrieve all archived process instances you also need to iterate page by page:private static void listArchivedProcessInstances() {// the result will be retrieved by pages of PAGE_SIZE sizeint startIndex = 0;int page = 1;SearchResult&amp;lt;ArchivedProcessInstance&amp;gt; result = null;do {// get the current page of opened process instancesresult = getArchivedProcessInstancePage(session, startIndex);// print the current pageprintArchivedProcessInstancePage(page, result);// go to the next pagestartIndex += PAGE_SIZE;page++;} while (result.getResult().size() == PAGE_SIZE);}private static SearchResult&amp;lt;ArchivedPorcessInstance&amp;gt; getArchivedProcessInstancePage(APISession apiSession, int startIndex) throws BonitaException {// create a new SeachOptions with given start index and PAGE_SIZE as max number of elementsSearchOptionsBuilder optionsBuilder = new SearchOptionsBuilder(startIndex, PAGE_SIZE);// when process instances are archived the original process instance id is supplied by SOURCE_OBJECT_ID,// so the result will be sort by the SOURCE_OBJECT_IDoptionsBuilder.sort(ArchivedProcessInstancesSearchDescriptor.SOURCE_OBJECT_ID, Order.ASC);// perform the request and return the result;ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);return processAPI.searchArchivedProcessInstances(optionsBuilder.done());}List pending tasksTo get the pending tasks for the logged user, you use the method getPendingHumanTaskInstances.private static void listPendingTasks() {ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);// the result will be retrieved by pages of PAGE_SIZE sizeint startIndex = 0;int page = 1;List&amp;lt;HumanTaskInstance&amp;gt; pendingTasks = null;do {// get the current pagependingTasks = processAPI.getPendingHumanTaskInstances(session.getUserId(), startIndex, PAGE_SIZE, ActivityInstanceCriterion.LAST_UPDATE_ASC);// print the current pageprintTasksPage(page, pendingTasks);// got to next pagestartIndex += PAGE_SIZE;page++;} while (pendingTasks.size() == PAGE_SIZE);}Execute a taskBefore a user can execute a task, the task needs to be assigned to the user. The assignUserTask method assigns the task to the user. The executeFlowNode method executes the task.private static void executeATask() {processAPI.assignUserTask(taskToExecute.getId(), session.getUserId());processAPI.executeFlowNode(taskToExecute.getId());}",
      "url": " /bonita/7.7/development/engine-api/create-your-first-project-with-the-engine-apis-and-maven",
      "author": "",
      "categories": "Development, Engine API"
    }
    ,
  

    "bonita-7-7-development-engine-api-engine-api-overview": {
      "title": "Engine API overview",
      "content"     : "Engine API overviewYou can use the Bonita Engine APIs to customize or add to the Bonita software. Typical developments are adding a connector, adding an actor filter, and replacing or supplementing a service.ConceptsSessionUser validationAPIsAPI accessGetting started with the Bonita Engine APIsConceptsSessionThis version of Bonita introduces the concept of a session. A session is the context in which processing occurs, and is created when a user logs in to the Engine.The APIs remain available for the duration of a session.User validationThis version of Bonita introduces user validation: when a user name and password are sent to the Engine, it checks that the user exists in the current organization. If the user is not known, an error is thrown and processing stops.APIsBonita Engine has the following Java APIs:| | ||:-|:-|| Identity API | Manages information about an organization, that is, the set of users who can act in processes. Handles creation, modification, and deletion of organizations, groups, roles, memberships, and users.|| Organization API | Import or export an organization.|| Process API | Handles actions related to processes (deploy, enable, start, disable, delete), executes activities, updates process data, search for a retrieve process entities.|| Login API | Logs in to the engine in a platform and creates a session.|| Monitoring API | Retrieves information about current activity, such as the number of users logged in, or the number of processes currently being executed.|| Log API | provides access to business logs, for searching and to retrieve information about current or archived processes.|| Platform command API | Creates, starts, stops platform.|| Document API | Manages documents that are attached to a process instance.|| Theme API | Manages the Look &amp;amp; Feel of the Bonita Portal web and mobile interfaces and forms.|| Tenant Management API | Used to pause service in a tenant for maintenance, to resume service, and to check whether a tenant is paused. Available in Teamwork, Efficiency, Performance and Enterprise editions.|There is also a Web API, which is for internal use only, and a Command API,which is primarily for internal use.For details of the Engine APIs, the methods and related objects, see the Javadoc. Note that the APIs are the same for the Teamwork, Efficiency, Performance and Enterprise editions, but some features are only active if the appropriate license is installed. If you try to access a feature for which you do not have a license, a Feature not active error message is returned.There is also a high-level Web REST API, intended for customers developing portal applications.API accessThe Bonita Engine APIs can be accessed locally or remotely, in the following modes:  Local: the client accesses the server directly in local mode  EJB3: the client accesses a remote server using EJB3 mode  HTTP: the client accesses a remote server via HTTPThe mode you use must be specified in the bonita-client-custom.properties file. By default, the access mode is local. This can be used when the client and engine are using the same JVM. The file contains commented out configurations for remote access modes. To change the mode, simply comment out the configuration for local and uncomment the relevant remote configuration.There is a slight overhead in using the remote access methods, so you are recommended to use local access whenever it is possible.Getting started with the Bonita Engine APIsBefore you run a Bonita application, configure how the application (client) accesses the Bonita Engine (server). For a HTTP access it can be done using following code: final Map&amp;lt;String, String&amp;gt; parameters = new HashMap&amp;lt;&amp;gt;(); if(HTTP.equals(apiType)){   parameters.put(&quot;server.url&quot;, &quot;http://localhost:8080&quot;);   //application name is the name of context, default is bonita   parameters.put(&quot;application.name&quot;, &quot;bonita&quot;); } APITypeManager.setAPITypeAndParams(ApiAccessType.valueOf(apiType), parameters);All sequences of API calls start with logging in to create a session then using the AccessorUtil to retrieve the APIs that will be used in the application.The APIs are retrieved using an accessor. To retrieve the PlatformLoginAPI and the PlatformAPI, use the PlatformAPIAccessor. After the platform has been created and initialized, use the TenantAPIAccessor to retrieve the other APIs. The TenantAPIAccessor is used even though there is a single tenant.The following example shows how to retrieve the LoginAPI, then use it to log in and create a session, then retrieve for API for that session. The platform has already been created and initialized and the Engine is started.final LoginAPI loginAPI = TenantAPIAccessor.getLoginAPI();APISession session = loginAPI.login(userName, password);ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(session);When the application has finished processing, log out to delete the session:loginAPI.logout(session);",
      "url": " /bonita/7.7/development/engine-api/engine-api-overview",
      "author": "",
      "categories": "Development, Engine API"
    }
    ,
  

    "bonita-7-7-development-engine-api-examples-create-administration-tools": {
      "title": "Create administration tools",
      "content"     : "Create administration toolsThis page contains an example of how to create tools to administer your Bonita system. The example is developed using Maven, and is a Java program to list the failed tasks, wrapped in a script so that it can be executed in an environment with no window manager.Getting startedWrite a class that lists failed tasksCreate a main classPrepare packagingDeclare an AssemblyUpdate the `pom.xml` file to call the assembly when building the projectMake the `bonita-cli.jar` executableBuild and testWrap in a Shell scriptComplete code exampleGetting startedYou need to be familiar with building a Maven project with Bonita as a dependency. You also need to be familiar with using the Bonita Engine APIs. If this is not the case, follow this tutorial.The Engine API overview contains a list of the APIs with a short description of each one. For details of the methods available in the Bonita Engine APIs, see the Javadoc.This example uses the Bonita Engine Java APIs but there is also a REST API.In this example, the Maven project has the following settings:  Group Id: org.mycompany.bonita  Artifact Id: bonita-cliYou must have a running Bonita system. The simplest way to do this is to run a Bonita Tomcat bundle locally. You also need a user: in this example the user has username admin and password secret.Write a class that lists failed tasksBonita provides a client to leverage the Java APIs. This is the easiest starting point for an application, so this is what we will use in the example.Set up your Maven project with a maven dependency to bonita-client. Then create a class to execute the business logic. In this example, the class is called ListFailedTasksCmd. It implements Callable&amp;lt;Void&amp;gt;, and calls methods to log in the API, then to execute the business logic, and finally to log out from the API.public Void call() throws Exception {login();try {printFailedTasks();} finally {logout();}}The business logic of this example gets a list of the failed tasks and prints them to standard output. The maximum number of failed activities to retrieve is provided by the class field nbTodisplay. The method printFailedTasks is doing the actual job of searching for activities whose state is FAILED.TIP: Like for any methods in the API listing elements, the searchActivities method takes paging information to limit the number of elements to retrieve. This prevents clients from retrieving too much data at the same time and filling up the whole memory. This is a common way to avoid users getting OutOfMemory errors. It is better to make several successive calls to the API than to retrieve too much data.protected void printFailedTasks() throws BonitaHomeNotSetException,		ServerAPIException, UnknownAPITypeException, SearchException {ProcessRuntimeAPI taskAPI = (ProcessRuntimeAPI) TenantAPIAccessor.getProcessAPI(session);SearchOptions failedSearchOptions = new SearchOptionsBuilder(0,nbTodisplay).filter(ActivityInstanceSearchDescriptor.STATE_NAME, ActivityStates.FAILED_STATE).done();SearchResult&amp;lt;ActivityInstance&amp;gt; failedTasks = taskAPI.searchActivities(failedSearchOptions);print(failedTasks);}See the complete source code for this class is in ListFailedTasksCmd.java.Create a main classLet’s create a CLI.java class that will be the entry point of our application. The CLI will simply delegate to our ListFailedTasksCmdthe responsibility to fetch failed tasks and display them on the standard output. The CLI will take as input parameters the username, password and the maximum number of failed tasks to display.public static void main(String[] args) {  if(args.length != 3) {throw new IllegalArgumentException(&quot;Usage: you should provide &amp;lt;username&amp;gt; &amp;lt;password&amp;gt; &amp;lt;number of tasks to display&amp;gt;&quot;);  }  try {   new ListFailedTasksCmd(args[0], args[1], Integer.parseInt(args[2])).call();  } catch (Exception e) {	   e.printStackTrace();  }}Prepare packagingAs we have seen, the tool has several dependencies required to be executed. This means that our classes should be packaged along with these dependencies in a single bundle. To do this, build a zip with all the resources that the system will require to run the CLI.Declare an AssemblyCreate an assembly.xml file at the root to describe the final packaging.&amp;lt;assembly xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/assembly-1.0.0.xsd&quot;&amp;gt;&amp;lt;id&amp;gt;&amp;lt;/id&amp;gt;&amp;lt;formats&amp;gt;&amp;lt;format&amp;gt;zip&amp;lt;/format&amp;gt;&amp;lt;/formats&amp;gt;&amp;lt;includeBaseDirectory&amp;gt;false&amp;lt;/includeBaseDirectory&amp;gt;&amp;lt;fileSets&amp;gt;&amp;lt;fileSet&amp;gt;&amp;lt;outputDirectory&amp;gt;/&amp;lt;/outputDirectory&amp;gt;&amp;lt;directory&amp;gt;src/main/resources&amp;lt;/directory&amp;gt;&amp;lt;includes&amp;gt;&amp;lt;include&amp;gt;**&amp;lt;/include&amp;gt;&amp;lt;/includes&amp;gt;&amp;lt;fileMode&amp;gt;744&amp;lt;/fileMode&amp;gt;&amp;lt;/fileSet&amp;gt;&amp;lt;/fileSets&amp;gt;&amp;lt;dependencySets&amp;gt;&amp;lt;dependencySet&amp;gt;&amp;lt;outputDirectory&amp;gt;/lib&amp;lt;/outputDirectory&amp;gt;&amp;lt;/dependencySet&amp;gt;&amp;lt;/dependencySets&amp;gt;   &amp;lt;/assembly&amp;gt;This assembly gathers all the dependencies into a lib folder along with all the content of the src/main/resources before zipping the whole collection. At the end we should get the following structure in a zip:|-bonita/|-lib/   |- bonita-cli.jar   |-*.jarUpdate the pom.xml file to call the assembly when building the project&amp;lt;properties&amp;gt;&amp;lt;zipName&amp;gt;bonita-cli-${project.version}&amp;lt;/zipName&amp;gt;&amp;lt;folderToZip&amp;gt;${project.build.directory}&amp;lt;/folderToZip&amp;gt;&amp;lt;/properties&amp;gt;...&amp;lt;build&amp;gt;&amp;lt;plugins&amp;gt;...&amp;lt;plugin&amp;gt;&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;&amp;lt;executions&amp;gt;&amp;lt;execution&amp;gt;&amp;lt;id&amp;gt;generate-package&amp;lt;/id&amp;gt;&amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;&amp;lt;goals&amp;gt;&amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt;&amp;lt;/goals&amp;gt;&amp;lt;configuration&amp;gt;&amp;lt;ignoreDirFormatExtensions&amp;gt;true&amp;lt;/ignoreDirFormatExtensions&amp;gt;&amp;lt;finalName&amp;gt;${zipName}&amp;lt;/finalName&amp;gt;&amp;lt;descriptors&amp;gt;&amp;lt;descriptor&amp;gt;assembly.xml&amp;lt;/descriptor&amp;gt;&amp;lt;/descriptors&amp;gt;&amp;lt;/configuration&amp;gt;&amp;lt;/execution&amp;gt;&amp;lt;/executions&amp;gt;&amp;lt;/plugin&amp;gt;…&amp;lt;/plugins&amp;gt;&amp;lt;/build&amp;gt;The maven-assembly-plugin enables us to generate the zip as described in assembly.xml file with the specified zipName, e.g. Bonita-CLI-1.0.0.Make the bonita-cli.jar executableIn order to launch the expected class, CLI.java, edit the pom.xml and add the following lines. This will create a manifest during the build of the Maven project in the jar file which contains the main class.&amp;lt;build&amp;gt;&amp;lt;plugins&amp;gt;...&amp;lt;plugin&amp;gt;&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;2.4&amp;lt;/version&amp;gt;&amp;lt;configuration&amp;gt;&amp;lt;archive&amp;gt;&amp;lt;manifest&amp;gt;&amp;lt;addClasspath&amp;gt;true&amp;lt;/addClasspath&amp;gt;&amp;lt;mainClass&amp;gt;org.mycompany.bonita.cli.CLI&amp;lt;/mainClass&amp;gt;&amp;lt;/manifest&amp;gt;&amp;lt;/archive&amp;gt;&amp;lt;excludes&amp;gt;&amp;lt;exclude&amp;gt;*.bat&amp;lt;/exclude&amp;gt;&amp;lt;exclude&amp;gt;*.sh&amp;lt;/exclude&amp;gt;&amp;lt;/excludes&amp;gt;&amp;lt;/configuration&amp;gt;&amp;lt;/plugin&amp;gt;...&amp;lt;/plugins&amp;gt;&amp;lt;/build&amp;gt;Build and testRight click on the project, select Run As &amp;gt; Maven Install. The output Bonita-CLI-1.0.0.zip is located in /target.Open a console, go to the target folder, and unzip Bonita-CLI-1.0.0.zip. Before executing make sure to configure the bonita client to point the bonita engine by editing ${bonita.home}/engine-client/conf/bonita-client-custom.properties.For example:# HTTPorg.bonitasoft.engine.api-type = HTTPserver.url = http://localhost:8080application.name = bonitaTo test our main class, execute the following command:  On Linux:java -jar lib/*.jar admin secret 10 -Dbonita.home=pwd`/bonita`On Windows:java -Dbonita.home=bonita -jar lib/bonita-cli-1.0.0.jar admin secret 10  These commands are cumbersome, so the next section explains how to create a script to hide the complexity.Wrap in a Shell scriptIn the resources folder of your project, create a new file bonita-cli.sh or bonita-cli.bat:bonita-cli.sh:#!/bin/shjava -Dbonita.home=`pwd`/bonita -jar lib/bonita-cli-*.jar $*bonita-cli.bat:java -Dbonita.home=bonita -jar lib/bonita-cli-1.0.0.jar %*Build the whole project again. When the build completes, the zip file should contain the following structure:Run the appropriate script:  On Linux:./bonita-cli.sh admin secret 10On Windows:bonita-cli.bat admin secret 10  Here is an example of output:List of activities:(1 item(s) found)  State   On  id  Name  failed  16:11   100 Review Git Pull Request from: N ChabanolesComplete code examplepackage org.mycompany.bonita.cli.cmd;import java.text.SimpleDateFormat;import java.util.List;import java.util.concurrent.Callable;import org.bonitasoft.engine.api.ProcessRuntimeAPI;import org.bonitasoft.engine.api.TenantAPIAccessor;import org.bonitasoft.engine.bpm.flownode.ActivityInstance;import org.bonitasoft.engine.bpm.flownode.ActivityInstanceSearchDescriptor;import org.bonitasoft.engine.bpm.flownode.ActivityStates;import org.bonitasoft.engine.exception.BonitaHomeNotSetException;import org.bonitasoft.engine.exception.SearchException;import org.bonitasoft.engine.exception.ServerAPIException;import org.bonitasoft.engine.exception.UnknownAPITypeException;import org.bonitasoft.engine.platform.LoginException;import org.bonitasoft.engine.search.SearchOptions;import org.bonitasoft.engine.search.SearchOptionsBuilder;import org.bonitasoft.engine.search.SearchResult;import org.bonitasoft.engine.session.APISession;/** *  *//** * @author John Doe *  */public class ListFailedTasksCmd implements Callable&amp;lt;Void&amp;gt; {private static final String ROW_SEPARATOR = &quot;n&quot;;	private static final String COL_SEPARATOR = &quot;t&quot;;	private String userName;	private String password;	private APISession session;	private int nbTodisplay;	public ListFailedTasksCmd(String user, String pass, int nbTodisplay) {		userName = user;		password = pass;		this.nbTodisplay = nbTodisplay;	}	public Void call() throws Exception {		login();		try {			printFailedTasks();		} finally {			logout();		}		return null;	}	protected void printFailedTasks() throws BonitaHomeNotSetException,			ServerAPIException, UnknownAPITypeException, SearchException {		ProcessRuntimeAPI taskAPI = (ProcessRuntimeAPI) TenantAPIAccessor				.getProcessAPI(session);		SearchOptions failedSearchOptions = new SearchOptionsBuilder(0,				nbTodisplay).filter(				ActivityInstanceSearchDescriptor.STATE_NAME,				ActivityStates.FAILED_STATE).done();		SearchResult&amp;lt;ActivityInstance&amp;gt; failedTasks = taskAPI				.searchActivities(failedSearchOptions);		print(failedTasks);	}	protected void print(SearchResult&amp;lt;ActivityInstance&amp;gt; failedTasks) {		List&amp;lt;ActivityInstance&amp;gt; activities = failedTasks.getResult();		StringBuffer line = new StringBuffer();		// Header		line.append(ROW_SEPARATOR).append(&quot;List of activities:&quot;)				.append(&quot;(&quot; + failedTasks.getCount() + &quot; item(s) found)&quot;)				.append(ROW_SEPARATOR);		line.append(COL_SEPARATOR).append(&quot;State&quot;).append(COL_SEPARATOR)				.append(&quot;On&quot;).append(COL_SEPARATOR).append(&quot;id&quot;)				.append(COL_SEPARATOR).append(&quot;Name&quot;);		line.append(ROW_SEPARATOR);		// Display in a table layout		for (ActivityInstance activityInstance : activities) {			line.append(COL_SEPARATOR);			line.append(activityInstance.getState()).append(COL_SEPARATOR);			line.append(					new SimpleDateFormat(&quot;HH:MM&quot;).format(activityInstance							.getReachedStateDate())).append(COL_SEPARATOR);			line.append(activityInstance.getId()).append(COL_SEPARATOR);			line.append(activityInstance.getName()).append(COL_SEPARATOR);			line.append(ROW_SEPARATOR);		}		System.out.println(line.toString());	}	private void logout() {		if (session != null) {			try {				TenantAPIAccessor.getLoginAPI().logout(session);			} catch (Exception e) {				e.printStackTrace();			}		}	}	protected void login() throws LoginException, BonitaHomeNotSetException,			ServerAPIException, UnknownAPITypeException {		this.session = TenantAPIAccessor.getLoginAPI()				.login(userName, password);	}}",
      "url": " /bonita/7.7/development/engine-api/examples/create-administration-tools",
      "author": "",
      "categories": "Development, Engine API, Examples"
    }
    ,
  

    "bonita-7-7-development-engine-api-examples-handle-a-failed-activity": {
      "title": "Handle a failed activity",
      "content"     : "Handle a failed activityNote: For Enterprise and Performance editions only.An activity (or task) can fail in Bonita Engine for several reasons. Typical reasons include:  An input expression evaluation fails (for example because of invalid syntax, or incorrect values).  The condition in an output transition fails to evaluate properly.  A connector fails to execute because of remote system connection problem.  A connector fails to execute because of erroneous connector implementation.  A connector fails to execute because a connector input or output expression fails to evaluate.In these cases, the activity is considered to have failed, and its state is recorded as FAILED in the Bonita database.Note that if communication between the server and the database is interrupted, the activity failure cannot be recorded. In this case, the state of the activity will be the state previously recorded.Possible actions on activity failureCode explainedComplete codePossible actions on activity failureThe Process Management API provides the following actions:  Reset the state of a failed connector, using setConnectorInstanceState(long connectorInstanceId, ConnectorStateReset state).  Reset the states of a list connectors, using setConnectorInstanceState(final Map&amp;lt;&amp;gt; connectorsToReset).  Retry a failed activity, using replayActivity(long activityInstanceId).  Reset the states of a list of failed connectors and, in the same operation, retry the corresponding failed activity, using replayActivity(long activityInstanceId, Map&amp;lt;Long connectorsToReset&amp;gt;connectorsToReset).Code explainedIn this example, an activity has failed because a connector failed to execute.The methods that are used to reset process items are in the ProcessManagementAPI, and the details are in the Javadoc. These methods are accessed through the ProcessAPI, which extends the ProcessManagementAPI.First you need to log in, create the session, and get the ProcessAPI:final LoginAPI loginAPI = TenantAPIAccessor.getLoginAPI();final APISession session = loginAPI.login(&quot;USERNAME&quot;, &quot;PASSWORD&quot;);final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(session);Then find the connector instance that failed:final SearchOptions searchOptions = new SearchOptionsBuilder(0, 1).filter(ConnectorInstancesSearchDescriptor.CONTAINER_ID, failedTaskId).filter(ConnectorInstancesSearchDescriptor.STATE, ConnectorState.FAILED.name()).done();final SearchResult&amp;lt;ConnectorInstance&amp;gt; searchResult = processAPI.searchConnectorInstances(searchOptions);final ConnectorInstance connectorInstance = searchResult.getResult().get(0);Find the reason for the failure by searching the internal logs:// search why the connector failed:final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 100);builder.filter(LogSearchDescriptor.ACTION_SCOPE, failedTaskId);builder.searchTerm(&quot;Connector execution failure&quot;);builder.sort(LogSearchDescriptor.ACTION_TYPE, Order.ASC);final LogAPI logAPI = TenantAPIAccessor.getLogAPI(session);final SearchResult&amp;lt;Log&amp;gt; searchedLogs = logAPI.searchLogs(builder.done());for (Log log : searchedLogs.getResult()) {// Print the failed connecor reason message:System.out.println(log.getMessage());}Then either reset the state of the connector instance and re-execute it, or skip the connector, as shown below:processAPI.setConnectorInstanceState(connectorInstance.getId(), ConnectorStateReset.SKIPPED);Then try to execute the activity again: processAPI.retryTask(failedTaskId);Finally, log out: loginAPI.logout(session);Complete codeimport org.bonitasoft.engine.api.LoginAPI;import org.bonitasoft.engine.bpm.connector.ConnectorInstance;import org.bonitasoft.engine.bpm.connector.ConnectorInstancesSearchDescriptor;import org.bonitasoft.engine.bpm.connector.ConnectorState;import org.bonitasoft.engine.bpm.connector.ConnectorStateReset;import org.bonitasoft.engine.search.Order;import org.bonitasoft.engine.search.SearchOptions;import org.bonitasoft.engine.search.SearchOptionsBuilder;import org.bonitasoft.engine.search.SearchResult;import org.bonitasoft.engine.session.APISession;import com.bonitasoft.engine.api.LogAPI;import com.bonitasoft.engine.api.ProcessAPI;import com.bonitasoft.engine.api.TenantAPIAccessor;import com.bonitasoft.engine.log.Log;import com.bonitasoft.engine.log.LogSearchDescriptor;public class SkipConnectorAndReplayActivity {public static void main(final String[] args) throws Exception {// Let&#39;s consider we know the id of the failed Activity:final long failedTaskId = 123456789l;// First action: Login to the api:final LoginAPI loginAPI = TenantAPIAccessor.getLoginAPI();final APISession session = loginAPI.login(&quot;USERNAME&quot;, &quot;PASSWORD&quot;);final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(session);// we suppose here that we have an activity in state failed with the id &#39;failedTaskId&#39;// retrieve the failed connector:final SearchOptions searchOptions = new SearchOptionsBuilder(0, 1).filter(ConnectorInstancesSearchDescriptor.CONTAINER_ID, failedTaskId).filter(ConnectorInstancesSearchDescriptor.STATE, ConnectorState.FAILED.name()).done();final SearchResult&amp;lt;ConnectorInstance&amp;gt; searchResult = processAPI.searchConnectorInstances(searchOptions);final ConnectorInstance connectorInstance = searchResult.getResult().get(0);// search why the connector failed:final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 100);builder.filter(LogSearchDescriptor.ACTION_SCOPE, failedTaskId);builder.searchTerm(&quot;Connector execution failure&quot;);builder.sort(LogSearchDescriptor.ACTION_TYPE, Order.ASC);final LogAPI logAPI = TenantAPIAccessor.getLogAPI(session);final SearchResult&amp;lt;Log&amp;gt; searchedLogs = logAPI.searchLogs(builder.done());for (Log log : searchedLogs.getResult()) {// Print the failed connecor reason message:System.out.println(log.getMessage());}// do something for the failed connector instance, skip it:processAPI.setConnectorInstanceState(connectorInstance.getId(), ConnectorStateReset.SKIPPED);// Retry to execute the activity:processAPI.retryTask(failedTaskId);// Finally log properly out of Bonita Engine:loginAPI.logout(session);}}",
      "url": " /bonita/7.7/development/engine-api/examples/handle-a-failed-activity",
      "author": "",
      "categories": "Development, Engine API, Examples"
    }
    ,
  

    "bonita-7-7-development-engine-api-examples-handling-documents": {
      "title": "Handle documents",
      "content"     : "Handle documentsThis page shows an example of how to manipulate documents in a Bonita process using the Java APIs.A document is treated in a similar way to a variable in Bonita Engine database. It is defined in Bonita Studio or programmatically, and is stored in the Bonita Engine database. Inside a process instance, a document is a byte stream.Configure a process documentConvert a file to a documentCreate a case with a documentAttach a document to a caseConfigure a process documentTo configure a document in a process definition, go to the Details panel, General view, Documents pane.An external document is specified by URI. An internal document is specified by path and file name, by clicking the Browse… button.Convert a file to a documentThe following example shows how to convert the content of a document to a byte stream that can then be used to create or update the content of a document./** * load the file give in parameters and return a byteArray or a null value *  * @param fileName * @return */public static ByteArrayOutputStream loadFile(String fileName) {	FileInputStream file = null;	int read;	try {		file = new FileInputStream(fileName);		ByteArrayOutputStream byteArray = new ByteArrayOutputStream();		byte[] content = new byte[2048 * 16 * 16];		while ((read = file.read(content)) &amp;gt; 0) {				byteArray.write(content, 0, read);		}		return byteArray;	} catch (FileNotFoundException e) {			e.printStackTrace();	} catch (IOException e) {			e.printStackTrace();	} finally {		if (file != null)			try {				file.close();			} catch (IOException e) {		}	}	return null;}Create a case with a documentThe following method, createCaseWithDocument, creates a case and attaches a document to it.public static void createCaseWithDocument(String processDefinitionName, String processVersion, Map&amp;lt;String, Object&amp;gt; variables, Map&amp;lt;String, Object&amp;gt; documents, ProcessAPI processAPI)throws ProcessDefinitionNotFoundException, InvalidExpressionException, ProcessActivationException, ProcessExecutionException {long processDefinitionId = processAPI.getProcessDefinitionId(processDefinitionName, processVersion);// ----- create list of operations -----List&amp;lt;Operations&amp;gt; listOperations = new ArrayList&amp;lt;Operation&amp;gt;();// variablesMap&amp;lt;String, Serializable&amp;gt; ListExpressionsContext = new HashMap&amp;lt;String, Serializable&amp;gt;();for (String variableName : variables.keySet()) {if (variables.get(variableName) == null || (!(variables.get(variableName) instanceof Serializable)))continue;Object value = variables.get(variableName);Serializable valueSerializable = (Serializable) value;variableName = variableName.toLowerCase();Expression expr = new ExpressionBuilder().createExpression(variableName, variableName, value.getClass().getName(), ExpressionType.TYPE_INPUT);Operation op = new OperationBuilder().createSetDataOperation(variableName, expr);listOperations.add(op);ListExpressionsContext.put(variableName, valueSerializable);}// update documentfor (String documentName : documents.keySet()) {if (documents.get(documentName) == null)continue;DocumentValue documentValue = null;if (documents.get(documentName) instanceof String){documentValue = new DocumentValue( ((String) documents.get(documentName)));}else if (documents.get(documentName) instanceof byte[]){// bytedocumentValue = new DocumentValue(((byte[])documents.get(documentName)), &quot;plain/text&quot;, &quot;myfilename&quot;);}else if (documents.get(documentName) instanceof ByteArrayOutputStream){documentValue = new DocumentValue(((ByteArrayOutputStream) documents.get(documentName)).toByteArray(), &quot;plain/text&quot;, &quot;myfilename&quot;); // url}Operation docRefOperation = new OperationBuilder().createSetDocument(documentName,new ExpressionBuilder().createInputExpression(documentName+&quot;Reference&quot;, DocumentValue.class.getName()));listOperations.add(docRefOperation);ListExpressionsContext.put(documentName+&quot;Reference&quot;, documentValue);}// ----- start process instance -----processAPI.startProcess(processDefinitionId, listOperations, ListExpressionsContext);}In this example, we construct two maps, one containing case data and one containing an invoice document and reference. The invoice documented is created by converting a local file to a byte stream using the loadFile method defined above. The two maps are then used to create a case of the process using the createCaseWithDocument method defined above.// ---------- create a case with the valueMap&amp;lt;String, Object&amp;gt; firstInvoice = new HashMap&amp;lt;String, Object&amp;gt;();firstInvoice.put(&quot;emailAddress&quot;, &quot;jan.Fisher@bonitasoft.com&quot;);firstInvoice.put(&quot;invoiceId&quot;, Long.valueOf(45));firstInvoice.put(&quot;dateOfInvoice&quot;, new Date());Map&amp;lt;String, Object&amp;gt; firstInvoiceDocument = new HashMap&amp;lt;String, Object&amp;gt;();firstInvoiceDocument.put(&quot;invoiceReference&quot;, &quot;http://documentation.bonitasoft.com&quot;);firstInvoiceDocument.put(&quot;invoiceLetter&quot;, loadFile(&quot;c:/tmp/firstinvoice.pdf&quot;));createCaseWithDocument(&quot;IntegrateMyApplication&quot;, &quot;1.0&quot;, firstInvoice, firstInvoiceDocument, processAPI);Attach a document to a caseTo attach a document to a case, use the attachDocument method of the process API. This method is used to create a document and to update it: you update a document by replacing it is replaced with the new version. You can provide either a URL pointing to an external document or a byte stream, as shown in the example below:// update the documentfor (String documentName : documentsToUpdate.keySet()) {if (documentsToUpdate.get(documentName) instanceof String)	// document provided by pointer URL   processAPI.attachDocument(pendingTask.getId(), documentName, &quot;TheFileName&quot;, &quot;application/pdf&quot;, (String) documentsToUpdate.get(documentName));else if (documentsToUpdate.get(documentName) instanceof ByteArrayOutputStream)	// document provided as byte stream   processAPI.attachDocument(pendingTask.getId(), documentName, &quot;TheFileName&quot;, &quot;application/pdf&quot;, ((ByteArrayOutputStream) documentsToUpdate.get(documentName)).toByteArray());}",
      "url": " /bonita/7.7/development/engine-api/examples/handling-documents",
      "author": "",
      "categories": "Development, Engine API, Examples"
    }
    ,
  

    "bonita-7-7-development-engine-api-examples-manage-a-process": {
      "title": "Manage a process",
      "content"     : "Manage a processList the deployed processesEnable a process and start an instanceSet variables in a process instanceExecute a taskList the processes I startedList the open instances of a processGet the history for a caseQuery archived process instancesStop a process instanceDeploy a processGet the process design definitionUndeploy a processList the deployed processesThis example shows you how to get a list of the deployed processes.The search options specify that the list is sorted by deployment date, the maximum number of results to list is 100, and the list starts with the first results (that is, the processes that were deployed first).final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);final SearchOptions searchOptions = new SearchOptionsBuilder(0, 100).sort(ProcessDeploymentInfoSearchDescriptor.DEPLOYMENT_DATE, Order.DESC).done();final SearchResult&amp;lt;ProcessDeploymentInfo&amp;gt; deploymentInfoResults = processAPI.searchProcessDeploymentInfos(searchOptions);Enable a process and start an instanceAfter a process is deployed it must be enabled.If a process is not enabled, it is not possible to start a process instance.To enable a process, call the method enableProcess specifying the processDefinition id:// enable the processprocessAPI.enableProcess(processDefinition.getId());System.out.println(&quot;A new process was enabled: &quot; + processDefinition.getId());The next step is to start an instance of the deployed process:// start the processfinal ProcessInstance processInstance = processAPI.startProcess(processDefinition.getId());System.out.println(&quot;A new process instance was started with id: &quot; + processInstance.getId());Set variables in a process instanceThis section contains some examples of how to set the values of some variables using a list of operations when starting an instance of a process and in a running process instance.Set string variables and start a process instanceIn this example, createInstance takes the process definition name, the process version, a map of text variables and their values, and the session identifier. The startProcess method, which creates the process instance, takes a list of operations, not a map of variables, so the map must be converted into a list of operations that will set the values of the variables in the process instance. The example calls buildAssignOperation for each variable in turn, to build an operation that will assign the value to the variable when the process instance is created. Each operation is built as an assignment expression.public void createInstance(String processDefinitionName,  String processVersion,  Map&amp;lt;String, Object&amp;gt; variables,  APISession apiSession)  {ProcessAPI processAPI;try {processAPI = TenantAPIAccessor.getProcessAPI(apiSession);long processDefinitionId = processAPI.getProcessDefinitionId(processDefinitionName, processVersion);List&amp;lt;Operation&amp;gt; listOperations = new ArrayList&amp;lt;Operation&amp;gt;();for (String variableName : variables.keySet()) {if (variables.get(variableName) == null)continue;   Operation operation = buildAssignOperation(variableName, variables.get(variableName).toString(), String.class.getName(), ExpressionType.TYPE_CONSTANT);   listOperations.add(operation);   }   processAPI.startProcess(processDefinitionId, listOperations, null);} catch (Exception e) {e.printStackTrace();}}private Operation buildAssignOperation(final String dataInstanceName, final String newConstantValue, final String className, final ExpressionType expressionType) throws InvalidExpressionException { final LeftOperand leftOperand = new LeftOperandBuilder().createNewInstance().setName(dataInstanceName).done();final Expression expression = new ExpressionBuilder().createNewInstance(dataInstanceName).setContent(newConstantValue).setExpressionType(expressionType.name()).setReturnType(className).done();final Operation operation;operation = new OperationBuilder().createNewInstance().setOperator(&quot;=&quot;).setLeftOperand(leftOperand).setType(OperatorType.ASSIGNMENT).setRightOperand(expression).done();return operation;}Set variables of any type and start a process instanceIn this example, createCase takes the process definition name, the process version, a map of variable names and objects, and the session identifier. The startProcess method, which creates the process instance, takes a list of operations, not a map of variables, so the map must be converted into a list of operations that will set the values of the variables in the process instance. For each variable in turn, the example builds an expression that assigns the value to the variable to the object supplied in the map, specifying the data type by identifying the class of the object. These expressions are concatenated into a list of operations, which is used to initialize the variables when the process instance is created.public void createCase(String processDefinitionName, String processVersion, Map&amp;lt;String, Object&amp;gt; variables, ProcessAPI processAPI) {try {long processDefinitionId = processAPI.getProcessDefinitionId(processDefinitionName, processVersion);// ----- create list of operations -----List&amp;lt;Operation&amp;gt; listOperations = new ArrayList&amp;lt;Operation&amp;gt;();Map&amp;lt;String, Serializable&amp;gt; listVariablesSerializable = new HashMap&amp;lt;String, Serializable&amp;gt;();for (String variableName : variables.keySet()) {if (variables.get(variableName) == null || (!(variables.get(variableName) instanceof Serializable)))continue;Object value = variables.get(variableName);Serializable valueSerializable = (Serializable) value;variableName = variableName.toLowerCase();Expression expr = new ExpressionBuilder().createExpression(variableName, variableName, value.getClass().getName(), ExpressionType.TYPE_INPUT);Operation op = new OperationBuilder().createSetDataOperation(variableName, expr);listOperations.add(op);listVariablesSerializable.put(variableName, valueSerializable);}// ----- start process instance -----processAPI.startProcess(processDefinitionId, listOperations, listVariablesSerializable);// System.out.println(&quot;*** End Create Case ****&quot;);} catch (Exception e) {  e.printStackTrace();}}Create a map of variables and values and start a process instanceVersion 6.1 of Bonita introduces a new method for starting a case of process and setting the variables.Create a map specifying the values of the variables required to start a case, then pass it to the instantiateProcess method, as shown in the following example:public void instantiateProcess(String processDefinitionName, String processVersion, Map&amp;lt;String, Serializable&amp;gt; variables, APISession apiSession)  {try {ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);long processId = processAPI.getProcessDefinitionId(processDefinitionName, processVersion);processAPI.startProcess(processId, variables);} catch (Exception e) {e.printStackTrace();}}For a running process instance, set the value of a custom data type variableTo update the value of a variable with a custom data type, you need to call a Groovy script expression that returns the new value of the variable, as shown in the example below:final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(session);final String dataInstanceName = &quot;acase&quot;;final long activityInstanceId = 2;final LeftOperand leftOperand = new LeftOperandBuilder().createNewInstance().setName(dataInstanceName).setType(LeftOperand.TYPE_DATA).done();final Expression expression = new ExpressionBuilder().createGroovyScriptExpression(&quot;updateDataCaseTest&quot;,&quot;new com.bonitasoft.support.Case(&quot;title&quot;, &quot;description&quot;)&quot;,Case.class.getName());final Operation operation = new OperationBuilder().createNewInstance().setOperator(&quot;=&quot;).setLeftOperand(leftOperand).setType(OperatorType.ASSIGNMENT).setRightOperand(expression).done();final List&amp;lt;Operation&amp;gt; operations = new ArrayList&amp;lt;Operation&amp;gt;();operations.add(operation);processAPI.updateActivityInstanceVariables(operations, activityInstanceId, null);Note: this applies starting from version 6.3.4.Another method, updateActivityDataInstance also exists. However, this cannot be used with custom data types if you are using a remote connection, because the data type definition is not present in the Engine.Execute a taskThis example shows how to execute a task.The task is specified by an activityInstanceID.final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);processAPI.executeFlowNode(activityInstanceID);List the processes I startedThis example shows you how to list the open process instances started by the current user.The search options specify that a maximum of 100 items are listed, starting with the first one.final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 100);builder.filter(ProcessInstanceSearchDescriptor.STARTED_BY, apiSession().getUserId());final SearchResult&amp;lt;ProcessInstance&amp;gt; processInstanceResults = processAPI.searchOpenProcessInstances(builder.done());List the open instances of a processThis example shows you how to list the open instances of a specified process.The process is specified by the processDefinitonID. The search options specify that a maximum of 100 items are listed, starting with the first one.final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 100);builder.filter(ProcessInstanceSearchDescriptor.PROCESS_DEFINITION_ID, processDefinitionID);final SearchResult&amp;lt;ProcessInstance&amp;gt; processInstanceResults = processAPI.searchOpenProcessInstances(builder.done());Get the history for a caseThis example shows how to get the history for a case.A case is a process instance. To get the history, you retrieve the archived process instance, which is specified by processInstanceID.final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);final ArchivedProcessInstance archivedProcessInstance = processAPI.getArchivedProcessInstance(processInstanceID);Query archived process instancesThis example shows how to get a list of archived process instances that meet a specified filter.Note that this type of query is only possible with archived process instances.final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 100);builder.filter(ArchivedProcessInstancesSearchDescriptor., );final SearchResult&amp;lt;ArchivedProcessInstance&amp;gt; archivedProcessInstanceResults = processAPI.searchArchivedProcessInstances(builder.done());Stop a process instanceThis example shows how to stop (or cancel) an active process instance.No further activities in this process instance are started.final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);processAPI.cancelProcessInstance(processInstanceID);Deploy a processThis example will show how to use the Bonita Engine API to deploy and enable a process.The process can be in a business archive (.bar) file or can be built using the processDefinitionBuilder.Deploy and enable a process from a bar fileFirst create a business archive from the bar file. In this example, the bar file is /deploy/travelRequest. The process is deployed and enabled in a single step.// create a business archivefinal BusinessArchive businessArchive = BusinessArchiveFactory.readBusinessArchive(new File(&quot;/deploy/travelRequest&quot;));Now deploy and enable the process:// deploy and enable the processfinal ProcessDefinition processDefinition = getProcessAPI().deployAndEnableProcess(businessArchive);Deploy and enable a process from the processDefinitionBuilderIn this example, there are three steps: deploy the process, map the actor, and enable the process.First deploy the process:// deploy the processfinal ProcessDefinition processDefinition = processAPI.deploy(processDefinitionBuilder.done());System.out.println(&quot;A new process was deployed with id: &quot; + processDefinition.getId());Once the process is deployed, it’s necessary to map the actors defined in the process to existing users in the database before enabling the process. In this example, the actor defined in the process will be mapped to the current logged in user, whose id is available in the session (attention, this user cannot be the technical user):// map the actor &quot;delivery&quot; to the current logged in userfinal List&amp;lt;ActorInstance&amp;gt; actors = processAPI.getActors(processDefinition.getId(), 0, 1, ActorCriterion.NAME_ASC);processAPI.addUserToActor(actors.get(0).getId(), session.getUserId());At this point, the process is deployed but not enabled. This means that no instances of this process can be started. To enable the process, call the method enableProcess:// enable the processprocessAPI.enableProcess(processDefinition.getId());System.out.println(&quot;A new process was enabled: &quot; + processDefinition.getId());Get the process design definitionThis example shows how to retrieve the definition of a deployed process.//Create a process definitionfinal ProcessDefinitionBuilder processBuilder = new ProcessDefinitionBuilder().createNewInstance(&quot;name&quot;, &quot;1.0&quot;);processBuilder.addDescription(&quot;description&quot;);processBuilder.addAutomaticTask(&quot;AutomaticTask&quot;);//Deploy and enable the processfinal ProcessDefinition processDefinition = getProcessAPI().deploy(new BusinessArchiveBuilder().createNewBusinessArchive().setProcessDefinition(processBuilder.done()).done());getProcessAPI().enableProcess(processDefinition.getId());//Get the design process definitionfinal DesignProcessDefinition resultDesignProcessDefinition = getProcessAPI().getDesignProcessDefinition(processDefinition.getId());Undeploy a processThis example shows you how to undeploy a process.A process is undeployed by deleting the processDefinition, specified by a processDefinitionID.After the process is undeployed, no new instance can be started. Existing instances continue to completion.final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);processAPI.deleteProcessDefinition(processDefinitionId)",
      "url": " /bonita/7.7/development/engine-api/examples/manage-a-process",
      "author": "",
      "categories": "Development, Engine API, Examples"
    }
    ,
  

    "bonita-7-7-development-engine-api-examples-manage-an-organization": {
      "title": "Manage an organization",
      "content"     : "Manage an organizationImport an organizationList the groups in an organizationAdd a groupDelete a group from the organizationAdd a roleDelete a role from the organizationImport an organizationThis example explains how to import an organization definition from an XML file into Bonita Engine.The structure of the XML file is defined in an XSD file. To see an example of a well-formed XML file for an organization, export the ACME sample organization from Bonita Studio.In the following example, the organization definition is stored in a file called ACME.xml, which is stored in path. The file content is converted to a string, and then imported.final pOrganizationResourceName = &quot;path/ACME.xml&quot;final File orgFile = FileUtils.toFile(getClass().getResource(pOrganizationResourceName));final String orgContent = FileUtils.readFileToString(orgFile, CharEncoding.UTF_8);getIdentityAPI().importOrganization(orgContent);List the groups in an organizationThis example shows how to get a list of groups in the current organization.The search options specify that a maximum of 100 items are listed, starting with the first one.Only one organization can be loaded in Bonita Engine at a time, so there is no need to specify the organization, and no organization identifier exists.final IdentityAPI identityAPI = TenantAPIAccessor.getIdentityAPI(apiSession);final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 100);final SearchResult&amp;lt;Group&amp;gt; groupResults = identityAPI(apiSession).searchGroups(builder.done());Add a groupThis example shows how to add a group to the current organization.final IdentityAPI identityAPI = new IdentityAccessor().getIdentityAPI(apiSession);final GroupCreator groupCreator = new GroupCreator(name).setDescription(description);final Group group = identityAPI.createGroup(groupCreator);Delete a group from the organizationThis example shows how to delete a group from the organization.Deleting a group does not delete the users who belong to it. However, if the actor assignment for a process uses a group that is deleted, the users who belonged to the will no longer be able to perform tasks.final IdentityAPI identityAPI = TenantAPIAccessor.getIdentityAPI(apiSession);identityAPI.deleteGroup(groupId);Add a roleThis example shows how to add a role to the current organization.final IdentityAPI identityAPI = new IdentityAccessor().getIdentityAPI(apiSession);final RoleCreator roleCreator = new RoleCreator(name).setDescription(description);final Role role = identityAPI.createRole(roleCreator);Delete a role from the organizationThis example shows how to delete a role from the organization.Deleting a role does not delete the users who have that role. However, if the actor assignment for a process uses a role that is deleted, the users who had the role will no longer be able to perform tasks.final IdentityAPI identityAPI = TenantAPIAccessor.getIdentityAPI(apiSession);identityAPI.deleteRole(roleId);",
      "url": " /bonita/7.7/development/engine-api/examples/manage-an-organization",
      "author": "",
      "categories": "Development, Engine API, Examples"
    }
    ,
  

    "bonita-7-7-development-engine-api-examples-manage-the-platform": {
      "title": "Manage the platform",
      "content"     : "Manage the platformThis example shows how to use Bonita Engine API to manage the platform.You can create the platform, initialize the platform, start Bonita Engine, and stop Bonita Engine.Before you can create the platform, you need to log in and get the platformAPI:// Get platform login API using the PlatformAPIAccessorPlatformLoginAPI platformLoginAPI = PlatformAPIAccessor.getPlatformLoginAPI();// Log in to the platformPlatformSession platformSession = platformLoginAPI.login(&quot;platformAdmin&quot;, &quot;platform&quot;);// Get the platform APIPlatformAPI platformAPI = PlatformAPIAccessor.getPlatformAPI(platformSession);Create the platform by calling the createPlatform method. This will create the database structure and put the platform state into persistent storage.// create the platformplatformAPI.createPlatform();The next step is to initialize the platform, that is, create the default tenant and initialize Bonita Engine environment. After this step, the technical user will be able to connect to the engine and create new users or import the organization.// initialize the platformplatformAPI.initializePlatform();No users are created by default and the default username/password for the technical user to connect to Bonita Engine can be retrieved in the file setup/platform_conf/current/tenants/[tenant_id]/tenant_engine/bonita-tenant-community-custom.properties using the plaform setup tool ([tenant_id] being the default tenant ID, that is to say 1 when using the default configuration on a fresh installation).Once you retrieved the default configuration using the plaform setup tool, you can change this username/password by editing the file bonita-tenant-community-custom.properties and use the tool again to push the configuration to database.Next, start Bonita engine. Starting the engine on a node starts the Scheduler service and restarts elements that were not finished by the Work service on the previous shutdown. Bonita Engine environment is marked as activated.// start the execution engineplatformAPI.startNode();To stop Bonita engine, call the stopNode method. Stopping the node stops the Scheduler service. Bonita Engine environment is marked as deactivated.// stop the execution engineplatformAPI.stopNode();",
      "url": " /bonita/7.7/development/engine-api/examples/manage-the-platform",
      "author": "",
      "categories": "Development, Engine API, Examples"
    }
    ,
  

    "bonita-7-7-development-engine-api-examples-manage-users": {
      "title": "Manage users",
      "content"     : "Manage usersCreate a new userAdd a user to a groupList the users in a groupList the users with a specified role in a groupGet user contact dataSearch for usersGet the pending tasks for a userGet possible users of a task and execute task for a userCreate a new userThis example shows you how to create a new user and assign the user to a profile.Create a new user by calling the createUser method:// create new user, with username john and password bpmfinal User user = identityAPI.createUser(&quot;john&quot;, &quot;bpm&quot;);System.out.println(&quot;New user created: &quot; + user);Alternatively, you can create a more complex user object as follows:// create complex user UserCreator creator = new UserCreator(&quot;john&quot;, &quot;bpm&quot;);creator.setFirstName(&quot;Johnny&quot;).setLastName(&quot;B. Good&quot;);ContactDataCreator proContactDataCreator = new ContactDataCreator().setAddress(&quot;32 rue Gustave Eiffel&quot;).setCity(&quot;Grenoble&quot;).setPhoneNumber(&quot;555 14 12 541&quot;);creator.setProfessionalContactData(proContactDataCreator);final User user2 = identityAPI.createUser(creator);Now add the user to a Bonita Portal profile. A user who does not have a profile cannot log in to Bonita Portal.// reference the user in the profile User// the user must be now registered in one profile. Let&#39;s choose the profile userorg.bonitasoft.engine.api.ProfileAPI orgProfileAPI = apiAccessor.getProfileAPI();SearchOptionsBuilder searchOptionsBuilder = new SearchOptionsBuilder(0,10);searchOptionsBuilder.filter(ProfileSearchDescriptor.NAME, &quot;user&quot;);SearchResult&amp;lt;Profile&amp;gt; searchResultProfile = orgProfileAPI.searchProfiles(searchOptionsBuilder.done());// we should find one result nowif (searchResultProfile.getResult().size()!=1){ return; }// now register the user in the profileProfile profile = searchResultProfile.getResult().get(0);ProfileMemberCreator profileMemberCreator = new ProfileMemberCreator( profile.getId());profileMemberCreator.setUserId( user.getId());orgProfileAPI.createProfileMember(profileMemberCreator);To create a user with more complete information, use the UserBuilder to create an instance of User and then use the createUser method with the User as parameter.Add a user to a groupThis example shows how to add a user to a group.The user, group, and role are already defined, and each one is specified by ID.Note that it is not possible to add a user without a role.final IdentityAPI identityAPI = new IdentityAccessor().getIdentityAPI(apiSession);UserMembership membership = identityAPI.addUserMembership(userId, groupId, roleId);List the users in a groupThis example shows how to get a list of users in a specified group in the organization.The group is specified by groupID. The search options specify that a maximum of 100 items are listed, starting with the first one.final IdentityAPI identityAPI = TenantAPIAccessor.getIdentityAPI(apiSession);final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 100);builder.filter(UserSearchDescriptor.GROUP_ID, groupID);final SearchResult&amp;lt;User&amp;gt; userResults = identityAPI(apiSession).searchUsers(builder.done());List the users with a specified role in a groupThis example shows how to get a list of the users who have the specified role in the specified group in the organization.The group is specified by groupID. The role is specified by roleID. The search options specify that a maximum of 100 items are listed, starting with the first one.final IdentityAPI identityAPI = TenantAPIAccessor.getIdentityAPI(apiSession);final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 100);builder.filter(UserSearchDescriptor.GROUP_ID, groupID);builder.filter(UserSearchDescriptor.ROLE_ID, roleID);final SearchResult&amp;lt;User&amp;gt; userResults = identityAPI(apiSession).searchUsers(builder.done());Get user contact dataYou can use the getUserWithProfessionalDetails method to retrieve a user and their professional contact data for a user.This example shows how to get a user and the email address.// Get the professional email address of a userUserWithContactData proUser = getIdentityAPI().getUserWithProfessionalDetails(user.getId());proUser.getContactData().getEmail();Search for usersThe following example is a client application that accesses the Engine in HTTP mode to search for 20 users and display their names and identifiers.package org.bonitasoft.example;import org.bonitasoft.engine.api.IdentityAPI;import org.bonitasoft.engine.api.LoginAPI;import org.bonitasoft.engine.api.TenantAPIAccessor;import org.bonitasoft.engine.identity.User;import org.bonitasoft.engine.search.SearchOptionsBuilder;import org.bonitasoft.engine.search.SearchResult;import org.bonitasoft.engine.session.APISession;public class BonitaClientApplicationExample {public static void main(final String[] args) throws Exception {// example code:final LoginAPI loginAPI = TenantAPIAccessor.getLoginAPI();System.out.println(&quot;login with install//install&quot;);final APISession session = loginAPI.login(&quot;install&quot;, &quot;install&quot;);final IdentityAPI identityAPI = TenantAPIAccessor.getIdentityAPI(session);final SearchResult&amp;lt;User&amp;gt; searchUsers = identityAPI.searchUsers(new SearchOptionsBuilder(0, 20).done());System.out.println(&quot;20 first users:&quot;);for (final User user : searchUsers.getResult()) {System.out.println(&quot; * &quot; + user.getUserName() + &quot; -- &quot; + user.getId());}loginAPI.logout(session);System.out.println(&quot;logged out&quot;);}}Get the pending tasks for a userThis example shows you how use the Bonita Engine API to get the pending tasks for a user.It shows how to get the list of pending tasks, and then for each task, how to assign it to the user and execute it.To get the pending tasks for a given user, call the getPendingHumanTaskInstances method.In this example, the first page of the current logged user’s tasks are retrieved ordered by priority. Each page contains up to 20 tasks.// get the pending tasks for the current logged in userfinal List&amp;lt;HumanTaskInstance&amp;gt; pendingTasks =processAPI.getPendingHumanTaskInstances(session.getUserId(),0, 20, ActivityInstanceCriterion.PRIORITY_ASC);System.out.println(&quot;Pending tasks for user &quot; + session.getUserName() + &quot;: &quot; + pendingTasks);Note that this does not return tasks that are already assigned to the user.Then loop through the list of tasks. For each task, assign the task to the user and execute the task:// assign and execute pending tasksfor (final HumanTaskInstance pendingTask : pendingTasks) {// assign the task to the userprocessAPI.assignUserTask(pendingTask.getId(), session.getUserId());// execute the taskprocessAPI.executeFlowNode(pendingTask.getId());}Get possible users of a task and execute task for a userThis example shows how to get the list of users who are eligible to perform a task.First, it creates a simple process containing one human task, called “step1”. This task will be performed by a user who is mapped to the “expert” actor. An actor filter is applied to “step1”, assigning the task specifically to the superExpert user.Next, it calls getPossibleUsersOfHumanTask to get the list of all users who are eligible to perform the step1 according to the process definition. This will be a list of all the users who are mapped to the expert actor.Next, it calls getPossibleUsersOfPendingHumanTask to get the list of users who will perform a specific instance of step1, in the process instance. The actor filter is applied when the task instance is created. This is known as dynamic task assignment. The actor filter is applied and a shorter list of users is returned (in this case, just superExpert).Dynamic task assignment using getPossibleUsersOfPendingHumanTask re-evaluates the actor mapping.It is useful if your organization changes after a process instance is started and you need to modify the list of users who can perform a taskIf there is any Actor Filter specified for the given task, dynamic task assignment does not have any effect.In such case, there is another method that can be used as a separate call to force the re-execution of the actor filter and thus update the list of possible users.Finally, it executes the task for the fist user on the list. This “execute for” feature is not available in the Community and Teamwork editions.// Create a process definition containing a human task, step1// Step1 is performed by actor expert adjusted by an actor filterfinal ProcessDefinitionBuilder designProcessDefinition = new ProcessDefinitionBuilder().createNewInstance(&quot;assign&quot;, &quot;5.0&quot;);designProcessDefinition.addActor(&quot;expert&quot;);final UserTaskDefinitionBuilder taskDefinitionBuilder = designProcessDefinition.addUserTask(&quot;step1&quot;, &quot;expert&quot;);taskDefinitionBuilder.addUserFilter(&quot;test&quot;, &quot;org.bonitasoft.engine.filter.user.testFilter&quot;, &quot;1.0&quot;).addInput(&quot;userId&quot;,new ExpressionBuilder().createConstantLongExpression(superExpert.getId()));final ProcessDefinition processDefinition = deployAndEnableWithActor(designProcessDefinition.done(), &quot;expert&quot;, role);final ProcessInstance processInstance = getProcessAPI().startProcess(processDefinition.getId());Thread.sleep(3000);final SearchOptionsBuilder searchOptionsBuilder = new SearchOptionsBuilder(0, 1);searchOptionsBuilder.filter(HumanTaskInstanceSearchDescriptor.NAME, &quot;step1&quot;);final HumanTaskInstance userTask = getProcessAPI().searchHumanTaskInstances(searchOptionsBuilder.done()).getResult().get(0);// Get all users of the actor of the userTask called &#39;step1&#39;List&amp;lt;User&amp;gt; possibleUsers = getProcessAPI().getPossibleUsersOfHumanTask(processDefinition.getId(), &quot;step1&quot;, 0, 10);// Get the filtered list of users for the task instancepossibleUsers = getProcessAPI().getPossibleUsersOfPendingHumanTask(userTask.getId(), 0, 10);// Execute task for first user in listprocessAPI.assignUserTask(activityId, possibleUsers.get(0).getId());processAPI.executeFlowNode(possibleUsers.get(0).getId(), activityId);",
      "url": " /bonita/7.7/development/engine-api/examples/manage-users",
      "author": "",
      "categories": "Development, Engine API, Examples"
    }
    ,
  

    "bonita-7-7-development-engine-api-examples-restore-default-look-feel": {
      "title": "Restore the default Look &amp; Feel",
      "content"     : "Restore the default Look &amp;amp; FeelNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.Normally, the Look &amp;amp; Feel for Bonita Portal and for process forms is managed using Bonita Portal. However, it is also possible to restore the default Look &amp;amp; Feel using the Bonita Engine API. This provides an “escape” in case a Look &amp;amp; Feel that contains errors that make the Bonita Portal unusable is applied.The default and active Look &amp;amp; Feels are stored in the Bonita Engine database. The Look &amp;amp; Feel is managed by the ThemeAPI.To restore the default Look &amp;amp; Feel with the API, use the getDefault method to get the default Look &amp;amp; Feel from the Engine database, then call updateTheme to load it into the portal.For example:`getThemeAPI().restoreDefaultTheme(ThemeType.PORTAL);`",
      "url": " /bonita/7.7/development/engine-api/examples/restore-default-look-feel",
      "author": "",
      "categories": "Development, Engine API, Examples"
    }
    ,
  

    "bonita-7-7-development-engine-api-log-in-with-cas": {
      "title": "Log in with CAS",
      "content"     : "Log in with CASNote: For Enterprise, Performance and Efficiency editions only.Depending on your underlying authentication service, you may need to provide other information with the API in order to log in. A login method with a map enables you to provide the set of credentials that the authentication service requires. The following example can be used if you are using Bonita with CAS:final LoginAPI loginAPI = TenantAPIAccessor.getLoginAPI();final Map&amp;lt;String, Serializable&amp;gt; credentials = new HashMap&amp;lt;String, Serializable&amp;gt;();credentials.put(AuthenticationConstants.CAS_TICKET, ticket);APISession session = loginAPI.login(credentials);ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(session);",
      "url": " /bonita/7.7/development/engine-api/log-in-with-cas",
      "author": "",
      "categories": "Development, Engine API"
    }
    ,
  

    "bonita-7-7-development-engine-api-using-list-and-search-methods": {
      "title": "List and search methods",
      "content"     : "List and search methodsThe Bonita Engine APIs contain several list and search methods. This page explains the difference between list and search, and explains how to configure word-based search.The following example shows how to use a list method to see the archived activity instances:List&amp;lt;ArchivedActivityInstance&amp;gt; archivedActivityInstances =TenantAPIAccessor.getProcessAPI(session).getArchivedActivityInstances(instance.getId(), 0, 100, ActivityInstanceCriterion.NAME_ASC);The following example shows how to use a search method to see the archived activity instances.SearchOptionsBuilder searchBuilder = new SearchOptionsBuilder(0, 100);searchBuilder.sort(ArchivedActivityInstanceSearchDescriptor.NAME, Order.ASC);SearchResult&amp;lt;ArchivedActivityInstance&amp;gt; archActivitResult = TenantAPIAccessor.getProcessAPI(session).searchArchivedActivities(searchBuilder.done());These two examples above return identical information. Both list and search can be used to return a specified number of results, sorted according to a specified criterion.The advantage of using list is that it is a single query, so has better performance. It is also simpler to code.The advantage of using search is that you can specify filters to get a more precise set of results, which can be more efficient. Several filters can be added. By default, an implicit AND clause is added when several filters are added. If the need is different,you can have an OR clause, of more complex clauses. See SearchOptionsBuilder methods for filtering that matches your needs. The following example is a more precise search for archived activity instances, using a filter:SearchOptionsBuilder searchBuilder = new SearchOptionsBuilder(0, 100);// implicit AND clause between the following two filters:searchBuilder.filter(ArchivedActivityInstanceSearchDescriptor.ROOT_PROCESS_INSTANCE_ID, processInstance.getId());searchBuilder.filter(ArchivedActivityInstanceSearchDescriptor.ASSIGNEE_ID, myUser.getId());searchBuilder.sort(ArchivedActivityInstanceSearchDescriptor.NAME, Order.ASC);SearchResult&amp;lt;ArchivedActivityInstance&amp;gt; archActivitResult = TenantAPIAccessor.getProcessAPI(session).searchArchivedActivities(searchBuilder.done());Below is another example of a more complex search filtering.SearchOptionsBuilder sob = new SearchOptionsBuilder(0, 10);sob.filter(HumanTaskInstanceSearchDescriptor.PROCESS_INSTANCE_ID, myProcessInstance.getId());sob.or();sob.differentFrom&amp;lt;/b&amp;gt;(HumanTaskInstanceSearchDescriptor.ASSIGNEE_ID, myUser.getId());Word-based search By default, search uses a “starts by” algorithm for searching, and finds matches where the search string occurs at the start of a phrase.If word-based search is enabled, you can search for a string that is preceded by white space or is at the start of the phrase.For example:| Phrase in database | Search string | Matches with “starts with” | Matches with word-based search ||:-|:-|:-|:-|| Hello Charles | charles | no | yes || Hello Charles | he | yes | yes || Hello Charles | carl | no | no || Hello_Charles | ch | no | no |Using word-based search has an impact on performance, so by default it is disabled. You can enable it for the platform or for a tenant. If you enable it, you can exclude any objects for which it is not useful.  To configure word-based search, using the setup tool, edit platform_engine/bonita-platform-community-custom.properties and change the value of bonita.platform.persistence.platform.enableWordSearch (for the platform) or bonita.platform.persistence.tenant.enableWordSearch (for a tenant) to true.For each object you be excluded from word-based search,  using the setup tool, edit platform_engine/bonita-platform-custom.xml add a mapping to the wordSearchExclusionMappings set.Each mapping has the following form:&amp;lt;value&amp;gt;org.bonitasoft.engine.identity.model.SUser&amp;lt;/value&amp;gt;  Don’t forget to push your modifications using setup push command.When you restart the Engine, these settings are applied and word-based search comes into operation.",
      "url": " /bonita/7.7/development/engine-api/using-list-and-search-methods",
      "author": "",
      "categories": "Development, Engine API"
    }
    ,
  

    "bonita-7-7-development-living-application-customize-living-application-layout": {
      "title": "Customize living application layout",
      "content"     : "Customize the living application layoutNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.In 7.6 we made some improvements on the default layout.We recommand that you re-create your custom layout based on Bonita 7.6.0+ default layout.## OverviewAs explained in the layouts documentation page, it is possible to customize the existing application layout with the UI Designer.Keep in mind that this default layout is composed by tree containers: layout-header, layout-content, layout-footer. But only layout-header and layout-footer are designed to support additional widgets.Prerequisites to customize the default living application layout:  Basic knowledge of Java script  Basic knowledge of AngularJS  Basic knowledge of Bootstrap  Basic knowledge of the UI Designer  An existing living application (to test the modified layout)The following example shows how to add new widget into the default layout.  The example sections show how to:  Export the default application layout from Bonita Portal  Import the default application layout into the UI Designer  Modify this layout  Apply the customized layout onto a living application.## Export the default application layout from Bonita Portal  Open Bonita Portal, and log in with username and password of someone mapped to the Administrator profile.  Click on the Resources menu.  Select the filter Layouts.  Select the element Default layout.  Click on Export and save this Default layout on your file system.Import the default application layout into the UI DesignerEdit the default layout using the UI DesignerExport the customized layout on your file systemImport the _myCustomLayout_ into the portalConfigure your living application to use the modified layoutBuild a Side menu layoutTake advantage of the latest improvement in a customized layoutNavigate between pages without reloading the entire page.TroubleshootingLiving application layout log 3 error 500 on loadingUi-bootstrap.js library removed from runtimeImport the default application layout into the UI DesignerTo facilitate the modifications, the Default layout is built using the UI Designer. Therefore you just have to import it into the UI Designer to make changes.  Open the UI Designer.  Click on the Import button.  Retrieve the Default layout to import.Edit the default layout using the UI DesignerWhen you import the Default layout into the UI Designer, you can see that it generates three artefacts:  Living application layout page.  Living application IFrame widget to display the application page.  Living application menu widget to display the application menu.So we propose here to add new widgets to the Living application layout page header and footer.In the UI Designer:  Click on Living application layout page to open it in the page editor.  See that this page is composed by three main containers layout-header, layout-content, layout-footer.  Drag and drop an image widget on top of the menu in the layout-header, to display a brand image.  Drag and drop a title widget in the layout-footer, to display a “Copyright © 2017, Example Corporation”  Click on Save.Export the customized layout on your file systemOnce your changes are made, save the new layout using a new name and then export it.  Rename it into myCustomLayout.  Click on Save.  Click on the Export button.Import the myCustomLayout into the portal  Open Bonita Portal, and again log in with username and password of someone mapped to the Administrator profile.  Click on the Resources menu.  Click on Add.  Add the new myCustomLayout.  Click Next.  Click Confirm.Configure your living application to use the modified layout  Click on the Applications menu.  Click on the edit action … of your living application.  In the Look &amp;amp; Feel section, click on the Layout link  Select the myCustomLayout  Click on the validation button  In the Application details section, click on the URL link to navigate to your living application.  See your new application layout with a custom layout.  Feel free to add lots of new improvements to create the layout that fits your needs.Build a Side menu layoutAs of version 7.5.x, the default provided layout does not allow this kind of customization anymore (at least not so easily), but if you start from a 7.4.x Layout you can follow the 7.4 documentation customize-living-application-layout to build a side menu layout.Take advantage of the latest improvement in a customized layoutNavigate between pages without reloading the entire page.Starting with Bonita 7.6.0, when the user clicks on any menu item, only the content of the iframe with the targeted page is refreshed: it does not reload the entire page anymore. The HTML5 History API is used to achieve that.To take advantage of this improvement if your customized layout has been created with a Bonita version older than 7.6.0, you will need to follow these steps:  Import your CustomLayout_7.5.x (or lower) in the UI Designer 7.6.0 (or later versions)  Export the Default layout from Bonita Portal 7.6.0 (or later versions)  Import the Default layout in the UI Designer  Open your CustomLayout_7.5.x  If any of the custom widgets livingApplicationMenu or livingApplicationIFrame has been modified,you will need to merge your modifications and the modifications of the new version of those widgets, namely livingApplicationMenuV3 and livingApplicationIFrameV3.Note 1: To help this merge, you can generate a diff, between two version of the default layout by using Git.If you don’t already have Git, you will need to install it, then clone the repository “https://github.com/bonitasoft/bonita-distrib.git”.At the root level, run the following command:  “git diff 7.5.0 7.6.0 – ./community/resources/layout-page/src/main/resources”Note 2: A good practice would be to rename those merged widgets into something like myCustomizedMenuV3 and myCustomizedIFrameV3)  Replace the custom widget livingApplicationMenu by the new custom widget livingApplicationMenuV3 (or your myCustomizedMenuV3)  Replace the custom widget livingApplicationIFrame by the new custom widget livingApplicationIFrameV3  (or your myCustomizedIFrameV3)  Export this updated layout page.  In Bonita portal, edit the layout and import the newly exported layout  Confirm all messages  Validate that your application has a layout that fits your requirements and the new menu behaviour.TroubleshootingLiving application layout log 3 error 500 on loadingThis issue has been fixed in the 7.3.0 version (“[BS-14885] - Living application layout log 3 error 500 on loading”).If you want to import a custom layout created with a UI Designer older than version 7.3.0 into an application working with Bonita 7.3.0 or greater, you have to perform the following steps to prevent the issue from occurring:  Import the CustomLayout_7.2.x in UI Designer 7.3.3  Export the default layout from Bonita Portal  Import the default layout and confirm that custom widgets will be overwritten  Open the CustomLayout_7.2.x Layout and remove the 3 variables AuthorizeApplicationAPI, AuthorizeApplicationPageAPI and AuthorizeApplicationMenuAPI (as shown below) Those variables are responsible of the SEVERE error logs on server.  Select the iFrame widget and set the reziseToContent option to yes (this option has been removed in 7.6.0, as the iframe is now resized using CSS)  Save then Export the layout (feel free to rename the layout if you want)  On Bonita Portal edit the layout and import the newly exported layout  Confirm all messages  Validate that your application has a layout that fits your requirements.Ui-bootstrap.js library removed from runtimeIn our first design iteration, forms, pages and layouts designed with the UI Designer embedded UI Bootstrap js, version 0.13.4 by default and silently, even when not needed. This issue has been fixed in version 7.5.0, we removed it so you can embed it as an asset only when you need it, and in the version of your choice.Before this change, custom widgets could be created based on angular-bootstrap v0.13.0 with no explicit addition ofangular-bootstrap as an asset and without declaring required modules.This will not affect any artifact that has been created with the UI Designer and is currently deployed in Bonita Platform.In development though, if your custom widgets use angular-bootstrap, you need to add angular-bootstrap as an asset at widget level, and declare the appropriate required modules.Forms, pages, layouts CSS cleanedThis cleaning has been made in 7.5.0 version, The default CSS file embedded in UI Designer artifacts (except custom widgets) has been cleaned. Indeed, some of this CSSrules were overall not used and cluttered this file.This will not affect any artifact that has been created with the UI Designer and is currently deployed in Bonita Platform.Nevertheless some unwanted style could appear when importing a custom layout based on the default layout of Bonita prior to 7.5.0.If you do so and observe that the layout menu does not fit the whole width of your page, you can bring back the default style by adding the following lines in layout.css file..component .container { width: 100%; }",
      "url": " /bonita/7.7/development/living-application/customize-living-application-layout",
      "author": "",
      "categories": "Development, Living application"
    }
    ,
  

    "bonita-7-7-development-logging": {
      "title": "Logs",
      "content"     : "LogsThis page contains information about logging in Bonita.How components produce log messagesBonita EngineBonita PortalBonita StudioLogging configurationBonita Engine and Bonita PortalBonita StudioHow to include logging in your development on BonitaView log contentBonita StudioBonita PlatformHow components produce log messagesThe components of Bonita have their own ways to produce logs, which are described below.Bonita EngineAll the Engine services call the technical logger service in order to write log messages. There is no direct access to any logging framework such as log4j, JUL or SLF4J.Bonita PortalThe Portal uses the Java Util Logging (JUL) directly to log messages.Bonita StudioThe Studio uses a logging service provided by the Eclipse platform. Modification of the Studio logging configuration is not very common except for debugging the Studio itself.The Bonita Studio provides direct access to the log written by the embedded Portal and Engine. You can access this log from the Bonita Studio Help menu Show Engine log option (Engine log also contains UI designer logs).Logging configurationBonita Engine and Bonita PortalThe technical logger service uses SLF4J (version 1.6.1) to create the log. SLF4J is also used directly by Bonita dependencies such as Hibernate, Quartz and Ehcache.SLF4J is a facade for various logging frameworks, and a logging framework must be available as the back-end. By default, Bonita uses JUL (Java Util Logging) as a the back-end to SLF4J. This is defined by including the slf4j-jdk14-1.6.1.jar in the bonita.war WEB-INF/lib folder.By default in Bonita Engine and Bonita Portal, all logs are sent to the JUL framework. To configure what is logged and where it is stored, modify the JUL configuration. The method of configuring JUL depends on the application server you use:  Apache Tomcat: edit the logging.properties file located in conf folder (see the Apache Tomcat logging documentation).  WildFly Application Server: some documentation is available in the WildFly 10 Admin guide.  Other application server: refer to your application server documentation on Java Util Logging configuration.For the Tomcat embedded in BonitaStudio, the JUL configuration file is located in the Studio installation folder underworkspace/tomcat/conf. After editing this file, restart Tomcat by going to the Server menu and selecting the Restart web server option.Here is an example of the JUL configuration for the logger used in the example below:# Reuse Bonita log handler (file bonita.log) for org.mycompany.connector loggersorg.mycompany.connector.handlers = 5bonita.org.apache.juli.AsyncFileHandler# Set log level to &quot;finest&quot; for newly created connectororg.mycompany.connector.level = FINEST# Set log level to &quot;finest&quot; for Groovy scriptorg.bonitasoft.groovy.script.level = FINESTBonita StudioTo change the Bonita Studio log level (usually to debug Studio), go to the Studio installation folder, configuration directory, and edit the config.ini file. You need to set the property eclipse.log.level to one of the following values: INFO, WARNING or ERROR.How to include logging in your development on BonitaWhen you write Groovy scripts or Java code to be included in a process (for example, to create a new connector implementation), logging is usually required. The recommended option is to use SLF4J in order to log messages. SLF4J is included in the Bonita dependencies so you can use it without adding extra dependencies. However, to get completion for SLF4J classes during development you need to add the slf4j-api jar file temporarily to your process dependencies (click Configure then choose Application dependencies).This is an example of how to log debug information in a Groovy script. Note that we recommend that you use a logger name that starts with “org.bonitasoft”, so that the default Bonita logging configuration is applied to your logger. Also, ending your logger name with a name similar to the Groovy script will be helpful to identify source of the message.import org.slf4j.Logger;import org.slf4j.LoggerFactory;Logger logger = LoggerFactory.getLogger(&quot;org.bonitasoft.groovy.script.my_int_init_script&quot;);logger.debug(&quot;Set initial value of process variable using Groovy script&quot;);return Integer.valueOf(3 + 5);This is an example of how to use logging in a connector:private static final Logger LOGGER = LoggerFactory.getLogger(SumImpl.class); @Override protected void executeBusinessLogic() throws ConnectorException {LOGGER.debug(&quot;Trying to sum {} and {}.&quot;, getIntegerA(), getIntegerB());int sum = getIntegerA() + getIntegerB(); LOGGER.debug(&quot;The sum is: {}&quot;, sum);setSum(sum);}View log contentBonita StudioIn Bonita Studio you have access to two log files:  The Studio log file includes information about Studio execution. Look at this file if you see incorrect behavior of the Studio. To view the file, go to the Help menu and choose Show Studio log. The file is located in the workspace/.metadata folder and is named .log.  The Engine and Portal log file receives all log messages produced by the Bonita Platform embedded in the Studio. When you test your processes by running them from the Studio you will find valuable debugging information in this file. To view the file, go to the Help menu and choose Show Engine log. The file is located in workspace/tomcat/log and is named bonita-yyyy-mm-dd.log.Bonita PlatformThe log file location depends on your application server.PackagesLogs are configured via the class package names and the main packages are org.bonitasoft and com.bonitasoft for subscription edition.Change these packages value to change the Bonita global log level.TomcatOn a Tomcat bundle, you can configure the log level and you can access the log files directly, in $TOMCAT_HOME/logs. Each file name includes the date when the file was created. There are several log files:  bonita.date.log is the Bonita log file.  catalina.date.log is the log file for the Tomcat application server used by Bonita Studio.  host-manager.date.log, localhost.date.log, and manager.date.log are internal Tomcat log files.WildFlyOn a WildFly bundle, logs can be configured in the $WILDFLY_HOME/standalone/configuration/standalone.xml in the urn:jboss:domain:logging:3.0 domain of the subsystem tag.Edit the logger tags which category matches Bonita main package: change the level name attribute of each logger section you want to change the log level.Log files are located in the log folder of the launched configuration.Usually, the standalone configuration is run so the log files are located in the $WILDFLY_HOME/standalone/log folder.  boot.log : contains WildFly boot logs.  server.date.log: is the global log file of the WildFly server.  bonita.date.log: is Bonita log file.",
      "url": " /bonita/7.7/development/logging",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "bonita-7-7-development-preloading-the-forms-cache": {
      "title": "Preload the forms cache",
      "content"     : "Preload the forms cacheNote: This information applies to legacy forms developed with Bonita 6.x, or with the 6.x Application backward-compatibility features of Bonita 7.0. It is not necessary to preload forms developed with the UI Designer.The first time a form is displayed, it is cached so that when it is displayed again it loads more quickly. This is the default behavior. However, you can speed up the first display of a form by preloading it into the forms cache.To preload the forms cache, use the formsCache service, which is accessed over HTTP.formsCache serviceURLSupported methodsPreload the forms cacheForms cache configurationformsCache serviceURLportal/formsCacheSupported methods| Method property  | Description  || —————- | ———— || Action  | GET  || URI  | formsCache  || Parameters  | process=processDefinitionID  || Behavior  | Retrieve the list of the IDs of the forms contained in the forms definition file (forms.xml) of the specified process definition  | | Response  | The list of form IDs (for example [“myProcess–1.0$entry”,”myProcess–1.0–firstActivity$entry”])  | | Error response codes  | 400 if the process parameter is missing, 404 if the process is not found  |Method property  Description  Action  PUT  URI  formsCache/processDefinitionID/formID (for example: formsCache/12875/myProcess--1.0$entry)  Parameters  none  Behavior  Parse the XML fragment corresponding to the specified form and load the form object into the cache  Response  none  Error response codes  400 if the process ID or the form ID are missing, 404 if the process or the form are not found (200 if the form was found and cached)  Preload the forms cacheFirst, send a GET request to retrieve the list of forms in a specified process. Then send a PUT request for each form to load it into the cache. The PUT request can sometimes take several seconds to respond, depending on the complexity of the form.If you are using the Enterprise, Performance or Efficiency edition, you can create a custom page to preload the forms cache. For the Teamwork or Community edition, you need to create an application.Forms cache configurationThe forms cache is implemented using EhCache. The cache configuration is defined in $BONITA_HOME/client/platform/conf/cache-config.xml. By default, when you restart the server, the cache is emptied, so forms would have to be loaded again. To keep the cached forms after a restart, set the diskPersistent property to true.",
      "url": " /bonita/7.7/development/preloading-the-forms-cache",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "bonita-7-7-development-rest-api-access-control-api": {
      "title": "access control API",
      "content"     : "Access control APINote: This API is only available in Enterprise, Efficiency and Performance editions.BDMBDMDescriptionAccess control is available to protect the tenant BDM. You can use this API to get the access control status (lastUpdatedBy, lastUpdateDate…).Methods  GET - Read access control status.  DELETE - Remove access controlNote: A servlet to import access control file exists. You can use it with this url  services/bdmAccessControl/install?bdmAccessControlUpload=accessControlFileToUpload.xml.  The file upload needs to be performed before (POST portal/bdmAccessControlUpload). Use the file name returned in the response of the upload request to perform the import request (bdmAccessControlUpload parameter).Get access Control statusMake this call to get the access control status.  URL/API/accessControl/bdm  MethodGet  Success Response  Code: 200  Payload:{  &quot;id&quot;: &quot;4090&quot;,  &quot;name&quot;: &quot;bdm_access_control.xml&quot;,  &quot;type&quot;: &quot;BDM_ACCESS_CONTROL&quot;,  &quot;state&quot;: &quot;INSTALLED&quot;,  &quot;lastUpdatedBy&quot;: &quot;4&quot;,  &quot;lastUpdateDate&quot;: &quot;2018-01-17T17:05:36.671Z&quot;}Note: If &quot;lastUpdatedBy&quot;: &quot;-1&quot; it means that the access control were last installed or updated by tenant_technical_user.Delete an access controlDelete the access control which are installed on the current tenant.  URL/API/accessControl/bdm  MethodDelete  Success Response  Code: 204  ",
      "url": " /bonita/7.7/development/rest-api/access-control-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-7-development-rest-api-application-api": {
      "title": "application API",
      "content"     : "Application APIApplicationLiving applicationApplication ThemeApplication MenuApplication PageApplicationLiving applicationDescriptionManage applications. This enables you to build to build a consistent functional applicative environment for users to interact with business processes and business data from one place.IdentifierThe ID of the application (a long value).Representation{  &quot;id&quot;:&quot;id of the application&quot;,  &quot;token&quot;:&quot;token of the application used to build the application URL&quot;,  &quot;displayName&quot;:&quot;display name of the application&quot;,  &quot;version&quot;:&quot;version of the application&quot;,  &quot;description&quot;:&quot;description of the application&quot;,  &quot;profileId&quot;:&quot;profile authorized to access this application&quot;,  &quot;creationDate&quot;:&quot;creation date of the application&quot;,  &quot;createdBy&quot;:&quot;user that created the application&quot;,  &quot;updatedBy&quot;:&quot;user that that updated the application&quot;,  &quot;lastUpdateDate&quot;:&quot;last update date of the application&quot;},  &quot;homePageId&quot;:&quot;id of the application page used as the home page&quot;}MethodsThe methods used for this resource are:  POST - Create an application  GET - Get the application information  PUT - Update an application  DELETE - Remove an applicationCreate an application  URL:/API/living/application  MethodPOST  Data params:A partial representation of an application in JSON  {&quot;version&quot;:&quot;1.0&quot;,&quot;profileId&quot;:&quot;2&quot;,&quot;token&quot;:&quot;myapp&quot;,&quot;displayName&quot;:&quot;My app&quot;,&quot;description&quot;:&quot;My application description&quot;  }Success Response  Code: 200  Payload:The full JSON representation of the application that was created{  &quot;id&quot;:&quot;305&quot;,  &quot;creationDate&quot;:&quot;1411548289900&quot;,  &quot;iconPath&quot;:&quot;&quot;,  &quot;createdBy&quot;:&quot;1&quot;,  &quot;profileId&quot;:&quot;2&quot;,  &quot;description&quot;:&quot;My application description&quot;,  &quot;token&quot;:&quot;myapp&quot;,  &quot;state&quot;:&quot;DEACTIVATED&quot;,  &quot;displayName&quot;:&quot;My app&quot;,  &quot;updatedBy&quot;:&quot;1&quot;,  &quot;lastUpdateDate&quot;:&quot;1411548289900&quot;,  &quot;version&quot;:&quot;1.0&quot;,  &quot;homePageId&quot;:&quot;-1&quot;}Get an application  URL:/API/living/application/:applicationId  Method:GET  Success Response  Code: 200  Payload The full JSON representation of the application that was created with id=”applicationId”{  &quot;id&quot;:&quot;305&quot;,  &quot;creationDate&quot;:&quot;1411548289900&quot;,  &quot;iconPath&quot;:&quot;&quot;,  &quot;createdBy&quot;:&quot;1&quot;,  &quot;profileId&quot;:&quot;2&quot;,  &quot;description&quot;:&quot;My application description&quot;,  &quot;token&quot;:&quot;myapp&quot;,  &quot;state&quot;:&quot;DEACTIVATED&quot;,  &quot;displayName&quot;:&quot;My app&quot;,  &quot;updatedBy&quot;:&quot;1&quot;,  &quot;lastUpdateDate&quot;:&quot;1411548289900&quot;,  &quot;version&quot;:&quot;1.0&quot;,  &quot;homePageId&quot;:&quot;-1&quot;}Delete an application  URL/API/living/application/:applicationId  Method:DELETE  Success Response  Code: 200  Update an ApplicationYou can update the following parameters:  token  displayName  version  profileId  descriptionURL/API/living/application/:applicationId  MethodPUT  Request PayloadA partial representation of an application with parameters to update{  &quot;version&quot;:&quot;2.0&quot;,  &quot;profileId&quot;:&quot;3&quot;,  &quot;token&quot;:&quot;myappToUpDate&quot;,  &quot;displayName&quot;:&quot;My app To Up Date&quot;,  &quot;description&quot;:&quot;My application description To Up Date&quot;}Success Response  Code: 200  Search for an application  URL/API/living/applicationExample: /API/living/application?f=token%3dmyapp&amp;amp;d=createdBy  MethodGET  URL ParamsStandard search parameters are available to search form mappings.Required  c: number of result per page to retrieve  p: page number to retrieveOptional:  o: can order on “id”,”creationDate”, “createdBy”, “profileId”, “token”, “displayName”, “updatedBy”, “lastUpdateDate”, “version”  s: can search on “token”, “displayName”, “version”  f: can filter on “token”, “displayName”, “version”, “profileId”, “creationDate”, “createdBy”, “updatedBy” , “lastUpdateDate” with the format f={filter_name}={filter_value}  d: can directly access the details by of the “createdBy” or “updatedBy” user, or of the “profileId”Success Response  Code: 200  Payload:A JSON array of application[{  &quot;id&quot;:&quot;305&quot;,  &quot;creationDate&quot;:&quot;1411548289900&quot;,  &quot;iconPath&quot;:&quot;&quot;,  &quot;createdBy&quot;: {&quot;last_connection&quot;:&quot;2014-09-24 14:57:26.146&quot;,&quot;created_by_user_id&quot;:&quot;-1&quot;,&quot;creation_date&quot;:&quot;2014-09-15 17:25:22.678&quot;,&quot;id&quot;:&quot;1&quot;,&quot;icon&quot;:&quot;/default/icon_user.png&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;title&quot;:&quot;&quot;,&quot;manager_id&quot;:&quot;0&quot;,&quot;job_title&quot;:&quot;&quot;,&quot;userName&quot;:&quot;user1&quot;,&quot;lastname&quot;:&quot;user1&quot;,&quot;firstname&quot;:&quot;user1&quot;,&quot;password&quot;:&quot;&quot;,&quot;last_update_date&quot;:&quot;2014-09-15 17:25:22.678&quot;  },  &quot;profileId&quot;:&quot;2&quot;,  &quot;description&quot;:&quot;My application description&quot;,  &quot;token&quot;:&quot;myapp&quot;,  &quot;state&quot;:&quot;DEACTIVATED&quot;,  &quot;displayName&quot;:&quot;My app&quot;,  &quot;updatedBy&quot;:&quot;1&quot;,  &quot;lastUpdateDate&quot;:&quot;1411548289900&quot;,  &quot;version&quot;:&quot;1.0&quot;,  &quot;homePageId&quot;:&quot;-1&quot;}]",
      "url": " /bonita/7.7/development/rest-api/application-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-7-development-rest-api-bdm-api": {
      "title": "bdm API",
      "content"     : "BDM APIAccess to the bdm REST API depends on the REST API authorization settings.BusinessDataBusinessDataQueryBusinessDataReferenceBusinessDataDescriptionRetrieve business data value. Depending on the object attribute loading policy, the API returns either the full object in JSON representation or the HATEOAS links to the object attributes.IdentifierThe fully qualified name (businessDataType) and the persistenceId of the business data (a long value).RepresentationRepresentation of object attributes with an always load policy:{  &quot;persistenceId&quot;: _number_,  &quot;persistenceId_string&quot;: &quot;_number_&quot;   &quot;persistenceVersion&quot;: _number_,  &quot;persistenceVersion_string&quot;: &quot;_number_&quot;  &quot;attributeName&quot;:_attributeType_  ...}The string representation added in 7.0.1 for Long attributes is a workaround for the JavaScript integer spectrum issue.HATEOAS representation of object attribute with a load when needed policy:&quot;links&quot;:[   {   &quot;rel&quot;:_string_   &quot;href&quot;:_uri_   }]MethodsThe methods used for this resource are:  GETGet the business dataGet the business data specified by its identifier.  URL/API/bdm/businessData/:businessDataType/:persistenceIdExample: /API/bdm/businessData/com.company.model.Contract/1  MethodGET  Success ResponseA business data (in JSON format)  Code: 200  Payload:With business data containing always-loaded object attributes:{  &quot;persistenceId&quot;: 1,  &quot;persistenceId_string&quot;: &quot;1&quot;,  &quot;persistenceVersion&quot;: 0,  &quot;persistenceVersion_string&quot;: &quot;0&quot;,  &quot;contractName&quot;: &quot;contract for Netcom3&quot;,  &quot;terms&quot;: [{&quot;persistenceId&quot;: 1,&quot;persistenceId_string&quot;: &quot;1&quot;,&quot;persistenceVersion&quot;: 0,&quot;persistenceVersion_string&quot;: &quot;0&quot;,&quot;termName&quot;: &quot;term Name&quot;},{  &quot;persistenceId&quot;: 2,  &quot;persistenceId_string&quot;: &quot;2&quot;,  &quot;persistenceVersion&quot;: 0,  &quot;persistenceVersion_string&quot;: &quot;0&quot;,  &quot;termName&quot;: &quot;term Name&quot;}  ],  &quot;client&quot;: {&quot;persistenceId&quot;: 13,&quot;persistenceId_string&quot;: &quot;13&quot;,&quot;persistenceVersion&quot;: 0,&quot;persistenceVersion_string&quot;: &quot;0&quot;,&quot;clientName&quot;: &quot;client name&quot;,&quot;description&quot;: &quot;n/a&quot;,&quot;industry&quot;: [{&quot;persistenceId&quot;: 2,&quot;persistenceId_string&quot;: &quot;2&quot;,&quot;persistenceVersion&quot;: 0,&quot;persistenceVersion_string&quot;: &quot;0&quot;,&quot;industryName&quot;: &quot;Services&quot;  }, {&quot;persistenceId&quot;: 3,&quot;persistenceId_string&quot;: &quot;3&quot;,&quot;persistenceVersion&quot;: 0,&quot;persistenceVersion_string&quot;: &quot;0&quot;,&quot;industryName&quot;: &quot;Software&quot;  }]  }}With business data containing loaded-when-needed object attributes{  &quot;persistenceId&quot;: 2,  &quot;persistenceId_string&quot;: &quot;2&quot;,  &quot;persistenceVersion&quot;: 0,  &quot;persistenceVersion_string&quot;: &quot;0&quot;,  &quot;clientName&quot;: &quot;Affectiva&quot;,  &quot;description&quot;: &quot;n/a&quot;,  &quot;links&quot;: [{&quot;rel&quot;: &quot;industry&quot;,&quot;href&quot;: &quot;/API/bdm/businessData/com.company.model.Client/2/industry&quot;  }]}  Error ResponseWhen business data identifier is not valid  Code: 500  Get the business data attribute of business dataGets the business data attribute of business data according to its identifier and attribute name.Request url  URLhttp://../API/bdm/businessData/:businessDataType/:persistenceId/:attributeNameExample: /API/bdm/businessData/com.company.model.Client/2/industry  MethodGET  Success ResponseA business data (in JSON format)  Code: 200  Payload:{  &quot;persistenceId&quot;: 2,  &quot;persistenceId_string&quot;: &quot;2&quot;,  &quot;persistenceVersion&quot;: 0,  &quot;persistenceVersion_string&quot;: &quot;0&quot;,  &quot;industryName&quot;: &quot;Services&quot;}  Error ResponseWhen business data identifier or attribute name is not valid  Code: 500  Get several business dataGet the business data specified by their identifiers.  URLhttp://../API/bdm/businessData/:businessDataType/findByIdsExample: /API/bdm/businessData/com.company.model.Contract/findByIds?ids=1,83  MethodGET  Data Params  ids - list of persistenceIds (comma separated)Success ResponseAn array of business data (in JSON format). It can be an empty array if no identifiers refer to existing data.  Code: 200  Payload:With business data containing always loaded object attributes[{  &quot;persistenceId&quot;: 1,  &quot;persistenceId_string&quot;: &quot;1&quot;,  &quot;persistenceVersion&quot;: 0,  &quot;persistenceVersion_string&quot;: &quot;0&quot;,  &quot;contractName&quot;: &quot;contract for Netcom3&quot;,  &quot;terms&quot;: [{  &quot;persistenceId&quot;: 1,  &quot;persistenceId_string&quot;: &quot;1&quot;,  &quot;persistenceVersion&quot;: 0,  &quot;persistenceVersion_string&quot;: &quot;0&quot;,  &quot;termName&quot;: &quot;term Name&quot;},{  &quot;persistenceId&quot;: 2,  &quot;persistenceId_string&quot;: &quot;2&quot;,  &quot;persistenceVersion&quot;: 0,  &quot;persistenceVersion_string&quot;: &quot;0&quot;,  &quot;termName&quot;: &quot;term Name&quot;}  ],  &quot;client&quot;: {&quot;persistenceId&quot;: 13,&quot;persistenceId_string&quot;: &quot;13&quot;,&quot;persistenceVersion&quot;: 0,&quot;persistenceVersion_string&quot;: &quot;0&quot;,&quot;clientName&quot;: &quot;client name&quot;,&quot;description&quot;: &quot;n/a&quot;,&quot;industry&quot;: [{  &quot;persistenceId&quot;: 2,  &quot;persistenceId_string&quot;: &quot;2&quot;,  &quot;persistenceVersion&quot;: 0,  &quot;persistenceVersion_string&quot;: &quot;0&quot;,  &quot;industryName&quot;: &quot;Services&quot;  }, {&quot;persistenceId&quot;: 3,&quot;persistenceId_string&quot;: &quot;3&quot;,&quot;persistenceVersion&quot;: 0,&quot;persistenceVersion_string&quot;: &quot;0&quot;,&quot;industryName&quot;: &quot;Software&quot;}]  }}]",
      "url": " /bonita/7.7/development/rest-api/bdm-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-7-development-rest-api-bpm-api": {
      "title": "bpm API",
      "content"     : "BPM APIActivities and TasksActivityArchivedActivityHumanTaskManualTaskTaskUserTaskActionsRetrieve a userTaskArchivedHumanTaskArchivedManualTaskArchivedTaskArchivedUserTaskDataActivityVariableCaseVariable DocumentCaseDocumentArchivedCaseDocumentActorsActorActorMemberCases (Process Instances)CaseArchivedCaseCaseInfoCaseCommentArchivedCaseCommentProcessProcessDiagram (Subscription editions only)ProcessParameterProcessResolutionProblemProcessSupervisorConnectorsProcessConnectorDependencyConnectorFailureConnectorInstanceArchivedConnectorInstanceFlow NodesFlow NodeArchivedFlowNodeTimerEventTriggerActivities and TasksActivityDescriptionUse this resource to retrieve activities (human or service tasks), call activities, and subprocesses currently running on the platform. It enables you to perform maintenance tasks like skipping or replaying a failed task and modifying variables.IdentifierThe ID of the activity (a long value).Representation{  &quot;id&quot;: &quot;the activity id (long)&quot;,  &quot;type&quot;: &quot;the activity type (string)&quot;,  &quot;name&quot;: &quot;the activity technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable activity name (string)&quot;,  &quot;description&quot;: &quot;the activity description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable activity description (string)&quot;,  &quot;state&quot;: &quot;the current state of the activity (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this activity reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this activity was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this activity is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current activity&quot;,&quot;processId&quot;: &quot;the process definition id (long) of the case which define this activity&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this activity. The activity has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the activity in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this activity, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this activity is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current activity was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;}States:  failed  initializing  ready  executing  completing  completed  waiting  skipped  cancelled  aborted  cancelling subtasksTypes:  AUTOMATIC_TASK  HUMAN_TASK  USER_TASK  MANUAL_TASK  LOOP_ACTIVITY  MULTI_INSTANCE_ACTIVITY  SUB_PROCESSPriorities:  highest  above_normal  normal  under_normal  lowestMethodsThe methods used for this resource are:  GET - Read an activity or search for an activity  PUT - Update an activityResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  processId  caseId  rootCaseId  parentCaseId  rootContainerId  executedBy  executedBySubstitute (only in Efficiency, Performance and Enterprise editions)  actorId  assigned_id  parentTaskIdUpdate activity variablesNote: if there is no data with the specified name in the activity, the update will be applied to the process data if a variable with the specified name exists.  URL/API/bpm/activity/:id  MethodPUT  Request Payload{  &quot;variables&quot;: &quot;[{&quot;name&quot;:&quot;foo&quot;,&quot;value&quot;:&quot;bar&quot;}]&quot;}Success Response  Code: 200  Update activity variables and execute a taskNote: if the task definition includes a connector that is executed on finish and updates the value of a variable, the value set by the REST API call is overwritten.  URL/API/bpm/activity/:id  MethodPUT  Request Payload{   &quot;state&quot;: &quot;completed&quot;,   &quot;variables&quot;: &quot;[{&quot;name&quot;:&quot;foo&quot;,&quot;value&quot;:&quot;bar&quot;}]&quot; }Success Response  Code: 200  Skip activity  URL/API/bpm/activity/:id  MethodPUT  Request Payload{  &quot;state&quot;: &quot;skipped&quot;}Success Response  Code: 200  Replay activityMake this call after all failed connectors have been reset. (only in Performance and Enterprise editions)  URL/API/bpm/activity/:id  MethodPUT  Request Payload{ &quot;state&quot;: &quot;replay&quot; }Success Response  Code: 200  Get an activityRetrieve the activity information for the given id.  URL/API/bpm/activity/:id  MethodGET  Success ResponseThe JSON representation of the specified activity  Code: 200  Payload:{  &quot;displayDescription&quot;: &quot;validate expense request&quot;,  &quot;executedBySubstitute&quot;: &quot;0&quot;,  &quot;caseId&quot;: &quot;76539&quot;,  &quot;parentCaseId&quot;: &quot;68743&quot;,  &quot;rootCaseId&quot;: &quot;65879&quot;,  &quot;processId&quot;: &quot;7012&quot;,&quot;  &quot;rootContainerId&quot;: &quot;7000&quot;,  &quot;state&quot;: &quot;completed&quot;,  &quot;type&quot;: &quot;the activity type as a string&quot;,  &quot;assigned_id&quot;: &quot;304&quot;,  &quot;assigned_date&quot;: &quot;2014-10-17 16:05:42.626&quot;,  &quot;id&quot;: &quot;809764&quot;,  &quot;executedBy&quot;: &quot;0&quot;,  &quot;priority&quot;: &quot;the priority of the current activity as a string&quot;,  &quot;actorId&quot;: &quot;50&quot;,  &quot;description&quot;: &quot;In this step, a manager reviews and validates an expense request.&quot;,  &quot;name&quot;: &quot;Validate&quot;,  &quot;reached_state_date&quot;: &quot;2014-10-18 10:37:05.643&quot;,  &quot;displayName&quot;: &quot;Validate expense request&quot;,  &quot;dueDate&quot;: &quot;2014-10-21 16:05:42.626&quot;,  &quot;last_update_date&quot;: &quot;2014-10-18 10:37:05.643&quot;}Search among activitiesSearch for flow activities using given parameters. Activities in states completed, cancelled, or aborted are not retrieved. The search returns an array of activities.  URL/API/bpm/activityExample: Get all the active activities named “Escalate”, ordering the results by state: /API/bpm/activity?p=0&amp;amp;c=10&amp;amp;f=name%3dEscalate&amp;amp;o%3dstate%20ASC  MethodGET  Data ParamsFor this resource, the available state search parameters for the GET verb are the same as for the flow nodes.The following search parameters are available:  o:  name  displayName  state  processDefinitionId  parentProcessInstanceIdo  parentActivityInstanceId (order by parent activity id)  rootProcessInstanceId  lastUpdateDates: search on any field that can be used to order results  f:  name  state  processId  parentCaseId  rootCaseId  last_update_date  supervisor_id (only in Efficiency, Performance and Enterprise editions)d: extend resource response parameters of this resource are available.Success ResponseAn array of JSON representations of activities  Code: 200  ArchivedActivityDescriptionUse this resource to retrieve finished activities (human or service tasks), call activities, and subprocesses.For this resource, the available state search parameters for the GET verb are the same as for the archived flow nodes.IdentifierThe ID of the archived activity (a long value). This is different from the ID of the activity before it was archived.Representation{  &quot;id&quot;: &quot;the archived activity id (long)&quot;,  &quot;type&quot;: &quot;the archived activity type (string)&quot;,  &quot;name&quot;: &quot;the archived activity technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable archived activity name (string)&quot;,  &quot;description&quot;: &quot;the archived activity description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable archived activity description (string)&quot;,  &quot;state&quot;: &quot;the current state of the archived activity (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this archived activity reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this archived activity was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this archived activity is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current archived activity&quot;,&quot;processId&quot;: &quot;the process definition id (long) of the case which define this archived activity&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this archived activity. The archived activity has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the archived activity in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this archived activity, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this archived activity is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current archived activity was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;sourceObjectId&quot;: &quot;the original id of the archived activity before it was archived&quot;,  &quot;archivedDate&quot;: &quot;the date ((&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;)) when this archived activity was archived, for example &#39;2014-10-17 16:05:42.626&#39;&quot;}States:  failed  initializing  ready  executing  completing  completed  waiting  skipped  cancelled  aborted  cancelling subtasksTypes:  AUTOMATIC_TASK  HUMAN_TASK  USER_TASK  MANUAL_TASK  CALL_ACTIVITY  LOOP_ACTIVITY  MULTI_INSTANCE_ACTIVITY  SUB_PROCESSPriorities:  highest  above_normal  normal  under_normal  lowestMethodsThe methods used for this resource are:  GET - Read a resource or search for an archived activityResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  processId: the id of the process that is associated with the activity  caseId: the id of the case that is associated with the activity  rootCaseId: the root case that is associated with this activity’s case  parentCaseId: the parent case that is associated with this activity’s case  rootContainerId: the root process of the root case that is associated with this activity  executedBy: the user who executed the activity  executedBySubstitute: the user who executed the activity for the executedBy user (only in Effeciency, Performance and Enterprise editions)  actorId: the actor that can execute this activity  assigned_id: the user this activity is assigned to  parentTaskId: in the case of a subtask, the parent taskGet an archived activityRetrieve the activity information for the given id.  URL/API/bpm/archivedActivity/:id  MethodGET  Success ResponseThe JSON representation of the specified activity  Code: 200  Search among archived activitiesSearch for archived activities using given parameters. Only archived activities in a final state are retrieved (completed, cancelled, aborted). It returns an array of archived activities.  URL/API/bpm/archivedActivity  MethodGET  Data ParamsThe following search parameters are available:  o:  name : the name of this activity  displayName : the display name of this activity  state : the current state of the activity  type : the activity type  isTerminal : say whether or not the activity is in a terminal state  processId : the process this activity is associated to  caseId : the case initiator this activity is associated to  reached_state_date : the date when this activity arrived in this statef:  supervisor_id: retrieve the information the process manager associated to this id has access to (only in Efficiency, Performance and Enterprise editions)  f: same as the sort order fieldsd: extend resource response parameters of this resource are available.Success ResponseAn array of JSON representations of the specified activities  Code: 200  HumanTaskDescriptionA Human task is Manual task or a User task. A User task is a task that can be done by a user.A Manual task is a subtask of a user task, and is also done by a user.IdentifierSimple, the ID of the object (a long value)Representation{  &quot;id&quot;: &quot;the task id (long)&quot;,  &quot;type&quot;: &quot;the task type (string): USER_TASK | MANUAL_TASK&quot;,  &quot;name&quot;: &quot;the task technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable task name (string)&quot;,  &quot;description&quot;: &quot;the task description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable task description (string)&quot;,  &quot;state&quot;: &quot;the current state of the task (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current task&quot;,&quot;processId&quot;: &quot;the process definition id (long) of the case which define this task&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this task. The task has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the task in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this task, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this task is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current task was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;}MethodsThe methods used for this resource are:  GET - Read a resource  PUT - Update a resourceResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  processId: the id of the process that is associated with the activity  caseId: the id of the case that is associated with the activity  rootCaseId: the root case that is associated with this activity’s case  parentCaseId: the parent case that is associated with this activity’s case  rootContainerId: the root process of the root case that is associated with this activity  executedBy: the user who executed the activity  executedBySubstitute: the user who executed the activity for the executedBy user (only in Effeciency, Performance and Enterprise editions)  actorId: the actor that can execute this activity  assigned_id: the user this activity is assigned to  parentTaskId: in the case of a subtask, the parent taskActionsRetrieve a humanTask  URL/API/bpm/humanTask/:taskId  MethodGET  Success ResponseReturns a Human task representation  Code: 200  Payload:{  &quot;displayDescription&quot;:&quot;&quot;,  &quot;executedBySubstitute&quot;:&quot;0&quot;,  &quot;processId&quot;:&quot;5826139717723008213&quot;,  &quot;state&quot;:&quot;ready&quot;,  &quot;rootContainerId&quot;:&quot;1002&quot;,  &quot;type&quot;:&quot;USER_TASK&quot;,  &quot;assigned_id&quot;:&quot;&quot;,  &quot;assigned_date&quot;:&quot;&quot;,  &quot;id&quot;:&quot;20004&quot;,  &quot;executedBy&quot;:&quot;0&quot;,  &quot;caseId&quot;:&quot;1002&quot;,  &quot;priority&quot;:&quot;normal&quot;,  &quot;actorId&quot;:&quot;102&quot;,  &quot;description&quot;:&quot;&quot;,  &quot;name&quot;:&quot;Analyse case&quot;,  &quot;reached_state_date&quot;:&quot;2014-09-05 11:11:30.808&quot;,  &quot;displayName&quot;:&quot;Analyse case&quot;,  &quot;dueDate&quot;:&quot;2014-09-05 12:11:30.775&quot;,  &quot;last_update_date&quot;:&quot;2014-09-05 11:11:30.808&quot;}Search for a humanTaskRetrieve humanTask objects that match the specified filters.  URL/API/bpm/humanTaskExample: Get the human tasks that have been skipped. /API/bpm/humanTask?p=0&amp;amp;c=10&amp;amp;f=state=skipped  MethodGET  Data ParamsStandard search parameters are available:  d: extend resource response parameters of this resource are available.  o: name, priority, dueDate, state, userId, groupId, roleId, processDefinitionId, processInstanceId, parentActivityInstanceId, assigneeId, parentContainerId, displayName, reachedStateDate  s: search on any field that can be used to order results  f: assigned_id, state, name, displayName, processDefinitionId, parentContainerIdFor instance, you can filter on:  assigned_id={user_id}: retrieve only the human tasks assigned to the specified ID. For example, retrieve the human tasks assigned to user with id 2: /API/bpm/humanTask?p=0&amp;amp;c=10&amp;amp;f=assigned_id%3d2  state=: retrieve only the archived user tasks with the specified state. For example, retrieve the skipped tasks: /API/bpm/humanTask?p=0&amp;amp;c=10&amp;amp;f=state=skipped  name=: retrieve only the human tasks with the specified name. For example, retrieve the human tasks with the name “Analyse Case”: /API/bpm/humanTask?p=0&amp;amp;c=10&amp;amp;f=name=Analyse Case  displayName=: retrieve only the archived user tasks with the specified displayName. For example, retrieve the human tasks with the displayName “Analyse Case”: /API/bpm/humanTask?p=0&amp;amp;c=10&amp;amp;f=displayName=Analyse CaseSuccess Response  Code: 200  Payload:The results are paged using the standard search parameters, with a maximum of 10 results returned in each page. The first set of results are returned. In this example, two results are returned.[  {&quot;displayDescription&quot;:&quot;Case analysis&quot;,&quot;executedBySubstitute&quot;:&quot;0&quot;,&quot;processId&quot;:&quot;5826139717723008213&quot;,&quot;state&quot;:&quot;skipped&quot;,&quot;rootContainerId&quot;:&quot;1002&quot;,&quot;type&quot;:&quot;USER_TASK&quot;,&quot;assigned_id&quot;:&quot;974&quot;,&quot;assigned_date&quot;:&quot;2014-09-05 09:19:30.150&quot;,&quot;id&quot;:&quot;20004&quot;,&quot;executedBy&quot;:&quot;0&quot;,&quot;caseId&quot;:&quot;1002&quot;,&quot;priority&quot;:&quot;normal&quot;,&quot;actorId&quot;:&quot;102&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;Analyse case&quot;,&quot;reached_state_date&quot;:&quot;2014-09-05 11:11:30.808&quot;,&quot;displayName&quot;:&quot;Analyse case&quot;,&quot;dueDate&quot;:&quot;2014-09-05 12:11:30.775&quot;,&quot;last_update_date&quot;:&quot;2014-09-05 11:11:30.808&quot;  }, {&quot;displayDescription&quot;:&quot;Validate case&quot;,&quot;executedBySubstitute&quot;:&quot;0&quot;,&quot;processId&quot;:&quot;5826139717723007999&quot;,&quot;state&quot;:&quot;skipped&quot;,&quot;rootContainerId&quot;:&quot;1010&quot;,&quot;type&quot;:&quot;USER_TASK&quot;,&quot;assigned_id&quot;:&quot;971&quot;,&quot;assigned_date&quot;:&quot;2014-09-06 10:29:30.766&quot;,&quot;id&quot;:&quot;20004&quot;,&quot;executedBy&quot;:&quot;0&quot;,&quot;caseId&quot;:&quot;1023&quot;,&quot;priority&quot;:&quot;normal&quot;,&quot;actorId&quot;:&quot;102&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;Validate case&quot;,&quot;reached_state_date&quot;:&quot;2014-09-06 12:10:50.744&quot;,&quot;displayName&quot;:&quot;Validate case&quot;,&quot;dueDate&quot;:&quot;2014-09-06 12:11:30.775&quot;,&quot;last_update_date&quot;:&quot;2014-09-06 12:10:50.744&quot;  }]Update a humanTaskDescriptionFields that can be updated are assignedId and state. Specify only those fields that you want to change.  URL/API/bpm/humanTask/:taskId  MethodPUT  Request Payload```json{   “assigned_id” : “new_user_id”,   “state”: “new_state”}``  Success Response  Code: 200  Payload:{  &quot;state&quot;:&quot;skipped&quot;}ManualTaskDescriptionUse the manualTask resource to access process subtasks. For archived subtasks use archivedManualTask.IdentifierSimple, the ID of the object (a long value)Representation{  &quot;id&quot;: &quot;the task id (long)&quot;,  &quot;type&quot;: &quot;the task type (string): MANUAL_TASK&quot;,  &quot;name&quot;: &quot;the task technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable task name (string)&quot;,  &quot;description&quot;: &quot;the task description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable task description (string)&quot;,  &quot;state&quot;: &quot;the current state of the task (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current task&quot;,&quot;processId&quot;: &quot;the process definition id (long) of the case which define this task&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this task. The task has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the task in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this task, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this task is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current task was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;}#### MethodsThe methods used for this resource are:* POST - Add a new subtask* GET - Read or search a subtask* PUT - Execute the subtask#### Add a new subtaskUse a POST method to create a new subtask. A subtask is attached to a parent task and it needs to be immediately assigned to a user.Example: * **URL**`/API/bpm/manualTask``  * **Method**`POST`* **Request Payload**_Example_: Add a new subtask to the parent task with id 1. The subtask has displayName &quot;My subtask&quot; , is assigned to user 1, and contains other important information.  ```json  {&quot;parentTaskId&quot;:&quot;40001&quot;, &quot;state&quot;:&quot;ready&quot;, &quot;name&quot;:&quot;My subtask&quot;, &quot;description&quot;:&quot;This is my subtask&quot;, &quot;priority&quot;:&quot;above_normal&quot;, &quot;dueDate&quot;:&quot;2014-12-25 00:00:00.000&quot;, &quot;assigned_id&quot;:&quot;1&quot;   }  Success Response  Code: 200  Payload:{   &quot;displayDescription&quot;:&quot;This is my subtask&quot;,   &quot;executedBySubstitute&quot;:&quot;1&quot;,   &quot;processId&quot;:&quot;8367255255370237633&quot;,   &quot;parentCaseId&quot;:&quot;1&quot;,   &quot;state&quot;:&quot;ready&quot;,   &quot;rootContainerId&quot;:&quot;1&quot;,   &quot;type&quot;:&quot;MANUAL_TASK&quot;,   &quot;assigned_id&quot;:&quot;1&quot;,   &quot;assigned_date&quot;:&quot;2014-12-01 17:39:53.784&quot;,   &quot;id&quot;:&quot;40006&quot;,   &quot;executedBy&quot;:&quot;1&quot;,   &quot;caseId&quot;:&quot;1&quot;,   &quot;priority&quot;:&quot;above_normal&quot;,   &quot;actorId&quot;:&quot;1&quot;,   &quot;description&quot;:&quot;This is my subtask&quot;,   &quot;name&quot;:&quot;My subtask&quot;,   &quot;reached_state_date&quot;:&quot;2014-12-01 17:39:53.784&quot;,   &quot;rootCaseId&quot;:&quot;1&quot;,   &quot;displayName&quot;:&quot;My subtask&quot;,   &quot;parentTaskId&quot;:&quot;40001&quot;,   &quot;dueDate&quot;:&quot;2014-12-25 00:00:00.000&quot;,   &quot;last_update_date&quot;:&quot;2014-12-01 17:39:53.784&quot; }Execute a subtaskUse a PUT method to execute a subtask. Executing a subtask basically means changing its state to completed and providing an executedBy value.  URL/API/bpm/manualTask`  MethodPUT  Request Payload{   &quot;state&quot;:&quot;completed&quot;,   &quot;executedBy&quot;:&quot;1&quot; }Success Response  Code: 200  Payload:{   &quot;displayDescription&quot;:&quot;This is my subtask&quot;,   &quot;executedBySubstitute&quot;:&quot;1&quot;,   &quot;processId&quot;:&quot;8367255255370237633&quot;,   &quot;parentCaseId&quot;:&quot;1&quot;,   &quot;state&quot;:&quot;ready&quot;,   &quot;rootContainerId&quot;:&quot;1&quot;,   &quot;type&quot;:&quot;MANUAL_TASK&quot;,   &quot;assigned_id&quot;:&quot;1&quot;,   &quot;assigned_date&quot;:&quot;2014-12-01 17:39:53.784&quot;,   &quot;id&quot;:&quot;40006&quot;,   &quot;executedBy&quot;:&quot;1&quot;,   &quot;caseId&quot;:&quot;1&quot;,   &quot;priority&quot;:&quot;above_normal&quot;,   &quot;actorId&quot;:&quot;1&quot;,   &quot;description&quot;:&quot;This is my subtask&quot;,   &quot;name&quot;:&quot;My subtask&quot;,   &quot;reached_state_date&quot;:&quot;2014-12-01 17:39:53.784&quot;,   &quot;rootCaseId&quot;:&quot;1&quot;,   &quot;displayName&quot;:&quot;My subtask&quot;,   &quot;parentTaskId&quot;:&quot;40001&quot;,   &quot;dueDate&quot;:&quot;2014-12-25 00:00:00.000&quot;,   &quot;last_update_date&quot;:&quot;2014-12-01 17:39:53.784&quot; }Retrieve a subtaskUse a GET method to retrieve information about a subtask.  URL/API/bpm/manualTask/:manualTaskId`  MethodGET  Success Response  Code: 200  Search subtasksUse a GET method with filters and search terms to search for subtasks.  URL/API/bpm/manualTask  Method``  Data ParamsStandard search parameters are available.You can filter on:  assigned_id={user_id}: retrieve only the manual tasks assigned to the specified user. For example, retrieve the manual tasks assigned to user with id 1: /API/bpm/manualTask?p=0&amp;amp;c=10&amp;amp;f=assigned_id%3d1.  state=skipped | ready | completed | failed : retrieve only the manual tasks with the specified state. For example, retrieve the ready tasks: /API/bpm/manualTask?p=0&amp;amp;c=10&amp;amp;f=state%3dready.  caseId={case_id}: retrieve only the manual tasks created in the specified case. For example, retrieve the manual tasks for the case_id 2: /API/bpm/manualTask?p=0&amp;amp;c=10&amp;amp;f=caseId%3d2.  parentTaskId={parentTask_id}: retrieve only the manual tasks for a specific parentTask. For example, retrieve the manual tasks for the parentTask_id 40001: /API/bpm/manualTask?p=0&amp;amp;c=10&amp;amp;f=parentTaskId%3d40001.You can search on:  name: search all manual tasks with a name that starts with the search string. For example, search for all manual tasks that have a name that starts with MySubTask: /API/bpm/manualTask?p=0&amp;amp;c=10&amp;amp;s=MySubTask.Success ResponseAn array of manualTask objects  Code: 200  TaskDescriptionManage process tasksIdentifierThe ID of the task (a long value).Representation{   &quot;id&quot;: &quot;the task id (long)&quot;,  &quot;type&quot;: &quot;the task type (string)&quot;,  &quot;name&quot;: &quot;the task technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable task name (string)&quot;,  &quot;description&quot;: &quot;the task description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable task description (string)&quot;,  &quot;state&quot;: &quot;the current state of the task (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current task&quot;,&quot;processId&quot;: &quot;the process definition id (long) of the case which define this task&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this task. The task has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the task in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this task, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this task is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current task was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;}MethodsThe methods used for this resource are:  GET - Read a resource or search for a resource  PUT - Update a resourceResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  processId: the id of the process that is associated with the activity  caseId: the id of the case that is associated with the activity  rootCaseId: the root case that is associated with this activity’s case  parentCaseId: the parent case that is associated with this activity’s case  rootContainerId: the root process of the root case that is associated with this activity  executedBy: the user who executed the activity  executedBySubstitute: the user who executed the activity for the executedBy user (only in Effeciency, Performance and Enterprise editions)  actorId: the actor that can execute this activity  assigned_id: the user this activity is assigned to  parentTaskId: in the case of a subtask, the parent taskRead a task  URL/API/bpm/task/:taskId  MethodGET  Success Response  Code: 200  Payload:JSON representation of a task{   &quot;displayDescription&quot;:&quot;&quot;,   &quot;executedBySubstitute&quot;:&quot;0&quot;,   &quot;processId&quot;:&quot;9132099022957910959&quot;,   &quot;parentCaseId&quot;:&quot;5&quot;,   &quot;state&quot;:&quot;ready&quot;,   &quot;rootContainerId&quot;:&quot;5&quot;,   &quot;type&quot;:&quot;USER_TASK&quot;,   &quot;assigned_id&quot;:&quot;4&quot;,   &quot;assigned_date&quot;:&quot;2014-12-01 16:22:54.685&quot;,   &quot;id&quot;:&quot;10&quot;,   &quot;executedBy&quot;:&quot;0&quot;,   &quot;caseId&quot;:&quot;5&quot;,   &quot;priority&quot;:&quot;normal&quot;,   &quot;actorId&quot;:&quot;6&quot;,   &quot;description&quot;:&quot;&quot;,   &quot;name&quot;:&quot;Step1&quot;,   &quot;reached_state_date&quot;:&quot;2014-12-01 16:22:50.814&quot;,   &quot;rootCaseId&quot;:&quot;5&quot;,   &quot;displayName&quot;:&quot;Step1&quot;,   &quot;dueDate&quot;:&quot;2014-12-01 17:22:50.809&quot;,   &quot;last_update_date&quot;:&quot;2014-12-01 16:22:50.814&quot; }Update a task  URL/API/bpm/task/:taskId  MethodPUT  Request PayloadTask fields to update (forbidden fields are : caseId, processId, name, executedBy, type, id, reached_state_date, last_update_date){ &quot;state&quot;: &quot;completed&quot; }Success Response  Code:  Payload:Search tasks  URL/API/bpm/taskExample: Get ten first tasks for process id 8410739119827826184 order by state /API/bpm/task?c=10&amp;amp;p=0&amp;amp;f=processId=8410739119827826184&amp;amp;o=state  MethodGET  Data Params  Accepted sort values (o={value}) : caseId, processId, state, type, supervisor_id, last_update_date  Accepted filters (f={filter}=value) : caseId, processId, state, type, supervisor_id, last_update_date  d: extend resource response parameters of this resource are available.Success Response  Code: 200  Payload:JSON representation of an array of tasks[   { &quot;displayDescription&quot;:&quot;&quot;, &quot;executedBySubstitute&quot;:&quot;0&quot;, &quot;processId&quot;:&quot;8410739119827826184&quot;, &quot;parentCaseId&quot;:&quot;9&quot;, &quot;state&quot;:&quot;ready&quot;, &quot;rootContainerId&quot;:&quot;9&quot;, &quot;type&quot;:&quot;USER_TASK&quot;, &quot;assigned_id&quot;:&quot;&quot;, &quot;assigned_date&quot;:&quot;&quot;, &quot;id&quot;:&quot;18&quot;, &quot;executedBy&quot;:&quot;0&quot;, &quot;caseId&quot;:&quot;9&quot;, &quot;priority&quot;:&quot;normal&quot;, &quot;actorId&quot;:&quot;7&quot;, &quot;description&quot;:&quot;&quot;, &quot;name&quot;:&quot;Step1&quot;, &quot;reached_state_date&quot;:&quot;2014-12-01 16:48:31.189&quot;, &quot;rootCaseId&quot;:&quot;9&quot;, &quot;displayName&quot;:&quot;Step1&quot;, &quot;dueDate&quot;:&quot;2014-12-01 17:48:31.185&quot;, &quot;last_update_date&quot;:&quot;2014-12-01 16:48:31.189&quot;   }, { &quot;displayDescription&quot;:&quot;&quot;, &quot;executedBySubstitute&quot;:&quot;0&quot;, &quot;processId&quot;:&quot;8410739119827826184&quot;, &quot;parentCaseId&quot;:&quot;10&quot;, &quot;state&quot;:&quot;ready&quot;, &quot;rootContainerId&quot;:&quot;10&quot;, &quot;type&quot;:&quot;USER_TASK&quot;, &quot;assigned_id&quot;:&quot;&quot;, &quot;assigned_date&quot;:&quot;&quot;, &quot;id&quot;:&quot;20&quot;, &quot;executedBy&quot;:&quot;0&quot;, &quot;caseId&quot;:&quot;10&quot;, &quot;priority&quot;:&quot;normal&quot;, &quot;actorId&quot;:&quot;7&quot;, &quot;description&quot;:&quot;&quot;, &quot;name&quot;:&quot;Step1&quot;, &quot;reached_state_date&quot;:&quot;2014-12-01 16:48:37.666&quot;, &quot;rootCaseId&quot;:&quot;10&quot;, &quot;displayName&quot;:&quot;Step1&quot;, &quot;dueDate&quot;:&quot;2014-12-01 17:48:37.662&quot;, &quot;last_update_date&quot;:&quot;2014-12-01 16:48:37.666&quot;   } ]UserTaskDescriptionAn executable task that is performed by a user.IdentifierSimple, the ID of the object (a long value)Representation{  &quot;id&quot;: &quot;the task id (long)&quot;,  &quot;type&quot;: &quot;the task type (string): USER_TASK&quot;,  &quot;name&quot;: &quot;the task technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable task name (string)&quot;,  &quot;description&quot;: &quot;the task description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable task description (string)&quot;,  &quot;state&quot;: &quot;the current state of the task (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current task&quot;,&quot;processId&quot;: &quot;the process definition id (long) of the case which define this task&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this task. The task has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the task in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this task, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this task is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current task was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;} MethodsThe methods used for this resource are:  GET - Retrieve a userTask, search for userTask objects  POST - Execute a task with contract  PUT - Update a userTaskResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  processId: the id of the process that is associated with the activity  caseId: the id of the case that is associated with the activity  rootCaseId: the root case that is associated with this activity’s case  parentCaseId: the parent case that is associated with this activity’s case  rootContainerId: the root process of the root case that is associated with this activity  executedBy: the user who executed the activity  executedBySubstitute: the user who executed the activity for the executedBy user (only in Effeciency, Performance and Enterprise editions)  actorId: the actor that can execute this activity  assigned_id: the user this activity is assigned to  parentTaskId: in the case of a subtask, the parent taskActionsRetrieve a userTask  URL/API/bpm/userTask/:userTaskId  MethodGET  Success ResponseA userTask object  Code: 200  Payload:{  &quot;displayDescription&quot;:&quot;&quot;,  &quot;executedBySubstitute&quot;:&quot;0&quot;,  &quot;processId&quot;:&quot;5826139717723008213&quot;,  &quot;state&quot;:&quot;ready&quot;,  &quot;rootContainerId&quot;:&quot;1002&quot;,  &quot;type&quot;:&quot;USER_TASK&quot;,  &quot;assigned_id&quot;:&quot;&quot;,  &quot;assigned_date&quot;:&quot;&quot;,  &quot;id&quot;:&quot;20004&quot;,  &quot;executedBy&quot;:&quot;0&quot;,  &quot;caseId&quot;:&quot;1002&quot;,  &quot;priority&quot;:&quot;normal&quot;,  &quot;actorId&quot;:&quot;102&quot;,  &quot;description&quot;:&quot;&quot;,  &quot;name&quot;:&quot;Analyse case&quot;,  &quot;reached_state_date&quot;:&quot;2014-09-05 11:11:30.808&quot;,  &quot;displayName&quot;:&quot;Analyse case&quot;,  &quot;dueDate&quot;:&quot;2014-09-05 12:11:30.775&quot;,  &quot;last_update_date&quot;:&quot;2014-09-05 11:11:30.808&quot;}Update a userTaskFields that can be updated are assignedId and state. The only value that can be set for the state is “skipped”. You only need to specify the fields that are to be updated.  URL/API/bpm/userTask/:userTaskId  MethodPUT  Request Payload{  &quot;assigned_id&quot; : &quot;id of new user&quot;,  &quot;state&quot;:&quot;skipped&quot;}Success Response  Code: 200  Retrieve the task contractTask contract elements can be retrived client side.  URL/API/bpm/userTask/:userTaskId/contract  MethodGET  Success Response  Code: 200  Payload:{&quot;constraints&quot;:[  {&quot;name&quot;:&quot;ticket_comment&quot;,  &quot;expression&quot;:&quot;ticket_comment!=null &amp;amp;&amp;amp; !ticket_comment.toString().isEmpty()&quot;,  &quot;explanation&quot;:&quot;input ticket_comment is mandatory&quot;,  &quot;inputNames&quot;:[  &quot;ticket_comment&quot;],  &quot;constraintType&quot;:&quot;MANDATORY&quot;}  ],  &quot;inputs&quot;:[  { &quot;description&quot;:null,   &quot;name&quot;:&quot;ticket_comment&quot;,   &quot;multiple&quot;:false,   &quot;type&quot;:&quot;TEXT&quot;   &quot;inputs&quot;:[]}  ]}Execute a task with contractIn order to execute a task, the task contract values have to be provided.  URL/API/bpm/userTask/:userTaskId/execution  MethodPOST  Request PayloadA JSON object matching task contract.Execute a task providing correct contract values.{&quot;ticket_comment&quot;:&quot;This is a comment&quot;}Success Response  Code: 204Error Response  Code: 400 contract violation explanation  Response Payload{&quot;exception&quot;:&quot;class org.bonitasoft.engine.bpm.contract.ContractViolationException&quot;,  &quot;message&quot;:&quot;USERNAME=walter.bates | Contract is not valid: &quot;,  &quot;explanations&quot;:[  &quot;Expected input [ticket_comment] is missing&quot;  ]}Retrieve the userTask context  URL/API/bpm/userTask/:userTaskId/context  MethodGET  Success ResponseA context object  Code: 200  Payload:{&quot;myBusinessData_ref&quot;:{  &quot;name&quot;:&quot;myBusinessData&quot;,&quot;type&quot;:&quot;com.company.model.BusinessObject1&quot;,&quot;link&quot;:&quot;API/bdm/businessData/com.company.model.BusinessObject1/2&quot;,&quot;storageId&quot;:2,&quot;storageId_string&quot;:&quot;2&quot;  },  &quot;myDocument_ref&quot;:{  &quot;id&quot;:1,&quot;processInstanceId&quot;:3,&quot;name&quot;:&quot;myDocument&quot;,&quot;author&quot;:104,&quot;creationDate&quot;:1434723950847,&quot;fileName&quot;:&quot;TestCommunity-1.0.bos&quot;,&quot;contentMimeType&quot;:null,&quot;contentStorageId&quot;:&quot;1&quot;,&quot;url&quot;:&quot;documentDownload?fileName=TestCommunity-1.0.bos&amp;amp;contentStorageId=1&quot;,&quot;description&quot;:&quot;&quot;,&quot;version&quot;:&quot;1&quot;,&quot;index&quot;:-1,&quot;contentFileName&quot;:&quot;TestCommunity-1.0.bos&quot;  }}ArchivedHumanTaskDescriptionAn Archived Human task is a User task or Manual task that has been archived.IdentifierSimple, the ID of the object (a long value)Representation{   &quot;id&quot;: &quot;the activity id (long)&quot;,  &quot;type&quot;: &quot;the activity type (string): USER_TASK | MANUAL_TASK&quot;,  &quot;name&quot;: &quot;the activity technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable activity name (string)&quot;,  &quot;description&quot;: &quot;the activity description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable activity description (string)&quot;,  &quot;state&quot;: &quot;the current state of the activity (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this activity reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this activity was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this activity is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current activity&quot;,  &quot;sourceObjectId&quot;:&quot;id (long) of the original humanTask before archiving&quot;,  &quot;archivedDate&quot;: &quot;the date ((&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;)) when this humanTask was archived, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,&quot;processId&quot;: &quot;the process definition id (long) of the case which define this activity&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this activity. The activity has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the activity in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this activity, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this activity is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current activity was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;}MethodsThe methods used for this resource are:  GET - Read a resourceActionsRetrieve an archivedHumanTask  URL/API/bpm/archivedHumanTask/:archivedHumanTaskId  MethodGET  Success ResponseThe JSON representation of an archivedHumanTask  Code: 200  Payload:{  &quot;displayDescription&quot;:&quot;&quot;,  &quot;executedBySubstitute&quot;:&quot;0&quot;,  &quot;processId&quot;:&quot;5826139717723008213&quot;,  &quot;state&quot;:&quot;skipped&quot;,  &quot;rootContainerId&quot;:&quot;1002&quot;,  &quot;type&quot;:&quot;USER_TASK&quot;,  &quot;assigned_id&quot;:&quot;2&quot;,  &quot;id&quot;:&quot;240002&quot;,  &quot;executedBy&quot;:&quot;0&quot;,  &quot;sourceObjectId&quot;:&quot;20004&quot;,  &quot;caseId&quot;:&quot;1002&quot;,  &quot;priority&quot;:&quot;normal&quot;,  &quot;actorId&quot;:&quot;102&quot;,  &quot;description&quot;:&quot;&quot;,  &quot;name&quot;:&quot;Analyse case&quot;,  &quot;reached_state_date&quot;:&quot;2014-09-09 17:21:51.946&quot;,  &quot;displayName&quot;:&quot;Analyse case&quot;,  &quot;archivedDate&quot;:&quot;2014-09-09 17:21:51.986&quot;,  &quot;dueDate&quot;:&quot;2014-09-05 12:11:30.775&quot;,  &quot;last_update_date&quot;:&quot;2014-09-09 17:21:51.946&quot;}Search for a archivedHumanTaskRetrieve archivedHumanTask objects that match the specified filters.  URL/API/bpm/archivedHumanTaskExample: Get the human tasks assigned to the user with id 2. /API/bpm/archivedHumanTask?p=0&amp;amp;c=10&amp;amp;f=assigned_id%3d2  MethodGET  Data ParamsStandard search parameters are available.You can filter on:  assigned_id={user_id}: retrieve only the human tasks assigned to the specified ID. For example, retrieve the human tasks assigned to user with id 2: /API/bpm/archivedHumanTask?p=0&amp;amp;c=10&amp;amp;f=assigned_id%3d2  state=: retrieve only the archived user tasks with the specified state. For example, retrieve the skipped tasks: /API/bpm/archivedHumanTask?p=0&amp;amp;c=10&amp;amp;f=state=skipped  name=: retrieve only the human tasks with the specified name. For example, retrieve the human tasks with the name “Analyse Case”: /API/bpm/archivedHumanTask?p=0&amp;amp;c=10&amp;amp;f=name=Analyse Case  displayName=: retrieve only the archived user tasks with the specified displayName. For example, retrieve the human tasks with the displayName “Analyse Case”: /API/bpm/archivedHumanTask?p=0&amp;amp;c=10&amp;amp;f=displayName=Analyse CaseSuccess ResponseAn array of archivedHumanTask objects in JSON  Code: 200  Payload:[  {&quot;displayDescription&quot;:&quot;Case analysis&quot;,&quot;executedBySubstitute&quot;:&quot;0&quot;,&quot;processId&quot;:&quot;5826139717723008213&quot;,&quot;state&quot;:&quot;failed&quot;,&quot;rootContainerId&quot;:&quot;1002&quot;,&quot;type&quot;:&quot;USER_TASK&quot;,&quot;assigned_id&quot;:&quot;2&quot;,&quot;assigned_date&quot;:&quot;2014-09-05 09:19:30.150&quot;,&quot;id&quot;:&quot;20004&quot;,&quot;executedBy&quot;:&quot;0&quot;,&quot;caseId&quot;:&quot;1002&quot;,&quot;priority&quot;:&quot;normal&quot;,&quot;actorId&quot;:&quot;102&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;Analyse case&quot;,&quot;reached_state_date&quot;:&quot;2014-09-05 11:11:30.808&quot;,&quot;displayName&quot;:&quot;Analyse case&quot;,&quot;dueDate&quot;:&quot;2014-09-05 12:11:30.775&quot;,&quot;last_update_date&quot;:&quot;2014-09-05 11:11:30.808&quot;  },  {&quot;displayDescription&quot;:&quot;Validate case&quot;,&quot;executedBySubstitute&quot;:&quot;0&quot;,&quot;processId&quot;:&quot;5826139717723007999&quot;,&quot;state&quot;:&quot;skipped&quot;,&quot;rootContainerId&quot;:&quot;1010&quot;,&quot;type&quot;:&quot;USER_TASK&quot;,&quot;assigned_id&quot;:&quot;2&quot;,&quot;assigned_date&quot;:&quot;2014-09-06 10:29:30.766&quot;,&quot;id&quot;:&quot;20004&quot;,&quot;executedBy&quot;:&quot;0&quot;,&quot;caseId&quot;:&quot;1023&quot;,&quot;priority&quot;:&quot;normal&quot;,&quot;actorId&quot;:&quot;102&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;Validate case&quot;,&quot;reached_state_date&quot;:&quot;2014-09-06 12:10:50.744&quot;,&quot;displayName&quot;:&quot;Validate case&quot;,&quot;dueDate&quot;:&quot;2014-09-06 12:11:30.775&quot;,&quot;last_update_date&quot;:&quot;2014-09-06 12:10:50.744&quot;  }]ArchivedManualTaskDescriptionUse the archivedManualTask resource to access archived process subtasks.IdentifierSimple, the ID of the object (a long value)Representation{   &quot;id&quot;: &quot;the archived manual task id (long)&quot;,  &quot;type&quot;: &quot;the archived manual task type (string): MANUAL_TASK&quot;,  &quot;name&quot;: &quot;the archived manual task technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable archived manual task name (string)&quot;,  &quot;description&quot;: &quot;the archived manual task description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable archived manual task description (string)&quot;,  &quot;state&quot;: &quot;the current state of the archived manual task (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this archived manual task reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this archived manual task was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this archived manual task is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current archived manual task&quot;,  &quot;sourceObjectId&quot;:&quot;id (long) of the original manualTask before archiving&quot;,   &quot;archivedDate&quot;: &quot;the date ((&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;)) when this subtask was archived, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,&quot;processId&quot;: &quot;the process definition id (long) of the case which define this archived manual task&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this archived manual task. The archived manual task has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the archived manual task in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this archived manual task, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this archived manual task is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current archived manual task was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot; }MethodsThe methods used for this resource are:  GET - Read or search an archived subtaskRetrieve a subtaskUse a GET method to retrieve information about a subtask.  URL/API/bpm/archivedManualTask/:archivedHumanTaskId  MethodGET  Success Response  Code: 200  Payload:{  &quot;displayDescription&quot;:&quot;this is a test&quot;,  &quot;executedBySubstitute&quot;:&quot;1&quot;,  &quot;processId&quot;:&quot;8367255255370237633&quot;,  &quot;parentCaseId&quot;:&quot;1&quot;,  &quot;state&quot;:&quot;completed&quot;,  &quot;rootContainerId&quot;:&quot;1&quot;,  &quot;type&quot;:&quot;MANUAL_TASK&quot;,  &quot;assigned_id&quot;:&quot;1&quot;,  &quot;id&quot;:&quot;160007&quot;,  &quot;sourceObjectId&quot;:&quot;40003&quot;,  &quot;executedBy&quot;:&quot;1&quot;,  &quot;caseId&quot;:&quot;1&quot;,  &quot;priority&quot;:&quot;highest&quot;,  &quot;actorId&quot;:&quot;1&quot;,  &quot;description&quot;:&quot;this is a test&quot;,  &quot;name&quot;:&quot;myTest&quot;,  &quot;reached_state_date&quot;:&quot;2014-12-01 17:20:47.200&quot;,  &quot;rootCaseId&quot;:&quot;1&quot;,  &quot;archivedDate&quot;:&quot;2014-12-01 17:20:47.217&quot;,  &quot;displayName&quot;:&quot;myTest&quot;,  &quot;parentTaskId&quot;:&quot;40001&quot;,  &quot;dueDate&quot;:&quot;2014-12-17 00:00:00.000&quot;,  &quot;last_update_date&quot;:&quot;2014-12-01 17:20:47.200&quot;}Search subtasksUse a GET method with filters and search terms to search for subtasks.  URL/API/bpm/archivedManualTask  MethodGET  Data ParamsStandard search parameters are available.You can filter on:  assigned_id={user_id}: retrieve only the manual tasks assigned to the specified user. For example, retrieve the manual tasks assigned to user with id 1: /API/bpm/archivedManualTask?p=0&amp;amp;c=10&amp;amp;f=assigned_id%3d10  state=skipped  completed  failed : retrieve only the manual tasks with the specified state. For example, retrieve the ready tasks: /API/bpm/archivedManualTask?p=0&amp;amp;c=10&amp;amp;f=state%3dready  caseId={case_id}: retrieve only the manual tasks created in the specified case. For example, retrieve the manual tasks for the case_id 2: /API/bpm/archivedManualTask?p=0&amp;amp;c=10&amp;amp;f=caseId%3d2  parentTaskId={parentTask_id}: retrieve only the manual tasks for a specific parentTask_id. For example, retrieve the manual tasks for the parentTask_id 40001: /API/bpm/archivedManualTask?p=0&amp;amp;c=10&amp;amp;f=parentTaskId%3d40001You can search on:  name: search all manual tasks with a name that starts with the search string. For example, search for all manual tasks that have a name that starts with MySubTask: /API/bpm/archivedManualTask?p=0&amp;amp;c=10&amp;amp;s=MySubTaskSuccess ResponseAn array of manualTask objects  Code: 200  ArchivedTaskDescriptionGet informations about archived tasksIdentifierThe ID of the archived task (a long value).Representation{   &quot;id&quot;: &quot;the archived task id (long)&quot;,  &quot;type&quot;: &quot;the archived task type (string)&quot;,  &quot;name&quot;: &quot;the archived task technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable archived task name (string)&quot;,  &quot;description&quot;: &quot;the archived task description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable archived task description (string)&quot;,  &quot;state&quot;: &quot;the current state of the archived task (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this archived task reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this archived task was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this archived task is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current archived task&quot;,  &quot;sourceObjectId&quot;: &quot;the original id of the task before it was archived&quot;,  &quot;archivedDate&quot;: &quot;the date ((&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;)) when this task was archived, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,&quot;processId&quot;: &quot;the process definition id (long) of the case which define this archived task&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this archived task. The archived task has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the archived task in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this archived task, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this archived task is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current archived task was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;}MethodsThe methods used for this resource are:  GET - Read a resource or search for a resourceResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  processId: the id of the process that is associated with the activity  caseId: the id of the case that is associated with the activity  rootCaseId: the root case that is associated with this activity’s case  parentCaseId: the parent case that is associated with this activity’s case  rootContainerId: the root process of the root case that is associated with this activity  executedBy: the user who executed the activity  executedBySubstitute: the user who executed the activity for the executedBy user (only in Effeciency, Performance and Enterprise editions)  actorId: the actor that can execute this activity  assigned_id: the user this activity is assigned to  parentTaskId: in the case of a subtask, the parent taskRead an archived task  URL/API/bpm/archivedTask/:taskId  MethodGET  Success ResponseJSON representation of an archived task  Code: 200  Payload:{  &quot;displayDescription&quot;:&quot;&quot;,  &quot;executedBySubstitute&quot;:&quot;4&quot;,  &quot;processId&quot;:&quot;9132099022957910959&quot;,  &quot;parentCaseId&quot;:&quot;5&quot;,  &quot;state&quot;:&quot;completed&quot;,  &quot;rootContainerId&quot;:&quot;5&quot;,  &quot;type&quot;:&quot;USER_TASK&quot;,  &quot;assigned_id&quot;:&quot;4&quot;,  &quot;id&quot;:&quot;9&quot;,  &quot;sourceObjectId&quot;:&quot;10&quot;,  &quot;executedBy&quot;:&quot;4&quot;,  &quot;caseId&quot;:&quot;5&quot;,  &quot;priority&quot;:&quot;normal&quot;,  &quot;actorId&quot;:&quot;6&quot;,  &quot;description&quot;:&quot;&quot;,  &quot;name&quot;:&quot;Step1&quot;,  &quot;reached_state_date&quot;:&quot;2014-12-01 16:24:32.457&quot;,  &quot;rootCaseId&quot;:&quot;5&quot;,  &quot;archivedDate&quot;:&quot;2014-12-01 16:24:32.460&quot;,  &quot;displayName&quot;:&quot;Step1&quot;,  &quot;dueDate&quot;:&quot;2014-12-01 17:22:50.809&quot;,  &quot;last_update_date&quot;:&quot;2014-12-01 16:24:32.457&quot;}Search archived tasks  URL/API/bpm/archivedTaskExample: Search ten first archived task of process 8410739119827826184 order by name: /API/bpm/archivedTask?c=10&amp;amp;p=0&amp;amp;f=processId=8410739119827826184&amp;amp;o=name  MethodGET  Data ParamsStandard search parameters are available.  Accepted sort values o={value} : caseId, name, displayName, processId, state, type, archivedDate, reached_state_date, assigned_id  Accepted filters f={filter}=value : caseId, name, displayName, processId, state, type, archivedDate, reached_state_date, assigned_id, isTerminal  d: extend resource response parameters of this resource are available.Success ResponseJSON representation of an array of archived tasks  Code: 200  Payload:[  {&quot;displayDescription&quot;:&quot;&quot;,&quot;executedBySubstitute&quot;:&quot;4&quot;,&quot;processId&quot;:&quot;8410739119827826184&quot;,&quot;parentCaseId&quot;:&quot;6&quot;,&quot;state&quot;:&quot;completed&quot;,&quot;rootContainerId&quot;:&quot;6&quot;,&quot;type&quot;:&quot;USER_TASK&quot;,&quot;assigned_id&quot;:&quot;4&quot;,&quot;id&quot;:&quot;12&quot;,&quot;sourceObjectId&quot;:&quot;12&quot;,&quot;executedBy&quot;:&quot;4&quot;,&quot;caseId&quot;:&quot;6&quot;,&quot;priority&quot;:&quot;normal&quot;,&quot;actorId&quot;:&quot;7&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;Step1&quot;,&quot;reached_state_date&quot;:&quot;2014-12-01 16:31:46.961&quot;,&quot;rootCaseId&quot;:&quot;6&quot;,&quot;archivedDate&quot;:&quot;2014-12-01 16:31:46.965&quot;,&quot;displayName&quot;:&quot;Step1&quot;,&quot;dueDate&quot;:&quot;2014-12-01 17:31:42.563&quot;,&quot;last_update_date&quot;:&quot;2014-12-01 16:31:46.961&quot;  },  {&quot;displayDescription&quot;:&quot;&quot;,&quot;executedBySubstitute&quot;:&quot;4&quot;,&quot;processId&quot;:&quot;8410739119827826184&quot;,&quot;parentCaseId&quot;:&quot;7&quot;,&quot;state&quot;:&quot;completed&quot;,&quot;rootContainerId&quot;:&quot;7&quot;,&quot;type&quot;:&quot;USER_TASK&quot;,&quot;assigned_id&quot;:&quot;4&quot;,&quot;id&quot;:&quot;15&quot;,&quot;sourceObjectId&quot;:&quot;14&quot;,&quot;executedBy&quot;:&quot;4&quot;,&quot;caseId&quot;:&quot;7&quot;,&quot;priority&quot;:&quot;normal&quot;,&quot;actorId&quot;:&quot;7&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;Step1&quot;,&quot;reached_state_date&quot;:&quot;2014-12-01 16:32:13.232&quot;,&quot;rootCaseId&quot;:&quot;7&quot;,&quot;archivedDate&quot;:&quot;2014-12-01 16:32:13.235&quot;,&quot;displayName&quot;:&quot;Step1&quot;,&quot;dueDate&quot;:&quot;2014-12-01 17:32:07.918&quot;,&quot;last_update_date&quot;:&quot;2014-12-01 16:32:13.232&quot;  }]ArchivedUserTaskDescriptionAn executable task that has been performed by a user or skipped and is archived.IdentifierSimple, the ID of the object (a long value)Representation{  &quot;id&quot;: &quot;the user task id (long)&quot;,  &quot;type&quot;: &quot;the user task type (string): USER_TASK&quot;,  &quot;name&quot;: &quot;the user task technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable user task name (string)&quot;,  &quot;description&quot;: &quot;the user task description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable user task description (string)&quot;,  &quot;state&quot;: &quot;the current state of the user task (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this user task reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this user task was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this user task is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current user task&quot;,  &quot;archivedDate&quot;:&quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task was archived, for example &#39;2014-10-17 16:05:42.626&#39;&quot;, &quot;processId&quot;: &quot;the process definition id (long) of the case which define this user task&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this user task. The user task has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the user task in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this user task, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this user task is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current user task was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;} MethodsThe methods used for this resource are:  GET - Retrieve an archivedUserTask, search for archivedUserTask objectsResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  processId: the id of the process that is associated with the activity  caseId: the id of the case that is associated with the activity  rootCaseId: the root case that is associated with this activity’s case  parentCaseId: the parent case that is associated with this activity’s case  rootContainerId: the root process of the root case that is associated with this activity  executedBy: the user who executed the activity  executedBySubstitute: the user who executed the activity for the executedBy user (only in Effeciency, Performance and Enterprise editions)  actorId: the actor that can execute this activity  assigned_id: the user this activity is assigned to  parentTaskId: in the case of a subtask, the parent taskActionsRetrieve an archivedUserTask  URLAPI/bpm/archivedUserTask/:id  MethodGET  Success ResponseAn archivedUserTask object  Code: 200  Payload:{  &quot;displayDescription&quot;:&quot;&quot;,  &quot;executedBySubstitute&quot;:&quot;0&quot;,  &quot;processId&quot;:&quot;5826139717723008213&quot;,  &quot;state&quot;:&quot;skipped&quot;,  &quot;rootContainerId&quot;:&quot;1002&quot;,  &quot;type&quot;:&quot;USER_TASK&quot;,  &quot;assigned_id&quot;:&quot;2&quot;,  &quot;id&quot;:&quot;240002&quot;,  &quot;executedBy&quot;:&quot;0&quot;,  &quot;caseId&quot;:&quot;1002&quot;,  &quot;priority&quot;:&quot;normal&quot;,  &quot;actorId&quot;:&quot;102&quot;,  &quot;description&quot;:&quot;&quot;,  &quot;name&quot;:&quot;Analyse case&quot;,  &quot;reached_state_date&quot;:&quot;2014-09-09 17:21:51.946&quot;,  &quot;displayName&quot;:&quot;Analyse case&quot;,  &quot;archivedDate&quot;:&quot;2014-09-09 17:21:51.986&quot;,  &quot;dueDate&quot;:&quot;2014-09-05 12:11:30.775&quot;,  &quot;last_update_date&quot;:&quot;2014-09-09 17:21:51.946&quot;}Search for a archivedUserTaskRetrieve archivedHumanTask objects that match the specified filters.  URL/API/bpm/archivedUserTaskExample: Get the user tasks assigned to the user with id 2:/API/bpm/archivedUserTask?p=0&amp;amp;c=10&amp;amp;f=assigned_id%3d2  MethodGET  Data ParamsStandard search parameters are available.You can filter on:  assigned_id={user_id}: retrieve only the user tasks assigned to the specified ID. For example, retrieve the user tasks assigned to user with id 2: /API/bpm/archivedUserTask?p=0&amp;amp;c=10&amp;amp;f=assigned_id%3d2  state=: retrieve only the archived user tasks with the specified state. For example, retrieve the skipped tasks: /API/bpm/archivedUserTask?p=0&amp;amp;c=10&amp;amp;f=state=skipped  name=: retrieve only the user tasks with the specified name. For example, retrieve the user tasks with the name “Analyse Case”: /API/bpm/archivedUserTask?p=0&amp;amp;c=10&amp;amp;f=name=Analyse Case  displayName=: retrieve only the archived user tasks with the specified displayName. For example, retrieve the user tasks with the displayName “Analyse Case”: /API/bpm/archivedUserTask?p=0&amp;amp;c=10&amp;amp;f=displayName=Analyse Cased: extend resource response parameters of this resource are available.Success ResponseAn array of archivedUserTask objects  Code: 200  Payload:[  {&quot;displayDescription&quot;:&quot;Case analysis&quot;,&quot;executedBySubstitute&quot;:&quot;0&quot;,&quot;processId&quot;:&quot;5826139717723008213&quot;,&quot;state&quot;:&quot;failed&quot;,&quot;rootContainerId&quot;:&quot;1002&quot;,&quot;type&quot;:&quot;USER_TASK&quot;,&quot;assigned_id&quot;:&quot;2&quot;,&quot;assigned_date&quot;:&quot;2014-09-05 09:19:30.150&quot;,&quot;id&quot;:&quot;20004&quot;,&quot;executedBy&quot;:&quot;0&quot;,&quot;caseId&quot;:&quot;1002&quot;,&quot;priority&quot;:&quot;normal&quot;,&quot;actorId&quot;:&quot;102&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;Analyse case&quot;,&quot;reached_state_date&quot;:&quot;2014-09-05 11:11:30.808&quot;,&quot;displayName&quot;:&quot;Analyse case&quot;,&quot;dueDate&quot;:&quot;2014-09-05 12:11:30.775&quot;,&quot;last_update_date&quot;:&quot;2014-09-05 11:11:30.808&quot;  }, {&quot;displayDescription&quot;:&quot;Validate case&quot;,&quot;executedBySubstitute&quot;:&quot;0&quot;,&quot;processId&quot;:&quot;5826139717723007999&quot;,&quot;state&quot;:&quot;skipped&quot;,&quot;rootContainerId&quot;:&quot;1010&quot;,&quot;type&quot;:&quot;USER_TASK&quot;,&quot;assigned_id&quot;:&quot;2&quot;,&quot;assigned_date&quot;:&quot;2014-09-06 10:29:30.766&quot;,&quot;id&quot;:&quot;20004&quot;,&quot;executedBy&quot;:&quot;0&quot;,&quot;caseId&quot;:&quot;1023&quot;,&quot;priority&quot;:&quot;normal&quot;,&quot;actorId&quot;:&quot;102&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;Validate case&quot;,&quot;reached_state_date&quot;:&quot;2014-09-06 12:10:50.744&quot;,&quot;displayName&quot;:&quot;Validate case&quot;,&quot;dueDate&quot;:&quot;2014-09-06 12:11:30.775&quot;,&quot;last_update_date&quot;:&quot;2014-09-06 12:10:50.744&quot;  }]DataActivityVariableDescriptionThis resource enables you to retrieve the value of a specific variable name for a specific case (or process instance). Only persistent variables are concerned by this resource, not transient variables.IdentifierThe ID of the activity variable (a long value).Representation{   &quot;tenantId&quot;: &quot;The ID of the tenant where the current user is logged in (technical information)&quot;,  &quot;tenantId_string&quot;: &quot;number (since 7.0.1)&quot;,  &quot;id&quot;:_The identifier of the variable&quot;,  &quot;id_string&quot;:&quot;number (since 7.0.1)&quot;,  &quot;name&quot;: &quot;The name of the activity variable&quot;,  &quot;description&quot;: &quot;The description of the variable, if any&quot;,  &quot;transientData&quot;: &quot;FALSE&quot;,  //Always false (boolean)  &quot;className&quot;: &quot;The fully qualified class name of the variable type&quot;,  &quot;containerId&quot;: &quot;The ID of the activity containing this variable (same as the one passed as parameter) if the variable is defined at activity level, or ID of the process instance if the variable is defined on the process&quot;,  &quot;containerId_string&quot;: &quot;number&quot; (since 7.0.1)_,  &quot;containerType&quot;: &quot;ACTIVITY_INSTANCE&quot; | &quot;PROCESS_INSTANCE&quot; _depending on whether the variable is defined at activity or process level.&quot;,  &quot;value&quot;: &quot;the value of this variable. The format of the value depends on the type of the variable&quot; }The string representation added in 7.0.1 for Long attributes is a workaround for the JavaScript integer spectrum issue.MethodsThe methods available for this resource are:  GET - Read an existing non-finished activity instance variableRetrieving a activity instance variable  URL/API/bpm/activityVariable/:activityId/:variableName  activity_id: the identifier of the activity from which to retrieve the variable  variable_name: the name of the variable to retrieveExample: API/bpm/activityVariable/20004/RequestValidationDataMethodGET  Success ResponseA JSON representation of the retrieved activity variable  Code: 200  Payload:{  &quot;tenantId&quot;:0,  &quot;tenantId_string&quot;:&quot;0&quot;,  &quot;id&quot;:5010,  &quot;id_string&quot;:&quot;5010&quot;,  &quot;name&quot;:&quot;RequestValidationData&quot;,  &quot;description&quot;:null,  &quot;transientData&quot;:false,  &quot;className&quot;:&quot;java.lang.String&quot;,  &quot;containerId&quot;:20004,  &quot;containerId_string&quot;:&quot;20004&quot;,  &quot;containerType&quot;:&quot;ACTIVITY_INSTANCE&quot;,  &quot;value&quot;:&quot;Confirmed&quot;}CaseVariableDescriptionSearch, count, find, or update case variable values. A case is an instance of a process.IdentifierThe ID of the case variable (a long value).Representation{  &quot;description&quot;:&quot;Detailed description of the case variable, as set in the definition at design-time&quot;,  &quot;name&quot;:&quot;name of the variable in the case&quot;,  &quot;value&quot;:&quot;the current value of the case variable&quot;,  &quot;case_id&quot;:&quot;ID of the case this variable belongs to&quot;,  &quot;type&quot;:_the Java type of the variable&quot;}MethodsThe methods used for this resource are:  GET - Search for case variables from its case ID, or find a single case variable from case ID and variable name  PUT - Update a case variable valueGet a case variable  URL/API/bpm/caseVariable/:caseId/:variableName  MethodGET  Success ResponseA case variable representation  Code: 200  Payload:{				  &quot;description&quot;:&quot;&quot;,  &quot;name&quot;:&quot;myInvoiceAmount&quot;,  &quot;value&quot;:&quot;14.2&quot;,  &quot;case_id&quot;:&quot;1&quot;,  &quot;type&quot;:&quot;java.lang.Float&quot;}Update a case variableWarning: only following types are supported for javaTypeclassname: java.lang.String, java.lang.Integer, java.lang.Double, java.lang.Long, java.lang.Boolean, java.util.Date  URL/API/bpm/caseVariable/:caseId/:variableName  MethodPUT  Request Payload{  type: &quot;javaTypeclassname&quot;,  value: &quot;newValue&quot;}Success Response  Code: 200  Search for a list of case variables  URL/API/bpm/caseVariableExample: /API/bpm/caseVariable?p=0&amp;amp;c=10&amp;amp;f=case_id%3d11754  MethodGET  Data ParamsStandard search parameters are available.f = case_id%3d[caseId] to indicate that you want to add a filter on ‘case_id’ with value [caseId] (%3d is the URL-encoded ‘=’ (equals) sign)  Success ResponseA representation of a list of case variables  Code: 200  Payload:[  {&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;myInvoiceAmount&quot;,&quot;value&quot;:&quot;14.2&quot;,&quot;case_id&quot;:&quot;11754&quot;,&quot;type&quot;:&quot;java.lang.Float&quot;  },   {&quot;description&quot;:&quot;invoice reference&quot;,&quot;name&quot;:&quot;myInvoiceReference&quot;,&quot;value&quot;:&quot;1FFL54184KOL&quot;,&quot;case_id&quot;:&quot;11754&quot;,&quot;type&quot;:&quot;java.lang.Long&quot;  }]DocumentDescriptionUse the document resource to access a document in an active case. Caution: This resource is deprecated and may be removed in a future release. Instead, use caseDocument or archivedCaseDocument.CaseDocumentDescriptionUse the case document resource to access a document in an active case. For archived cases and previous document versions use archivedCaseDocument.  author in the payload is deprecated: use submittedByIdentifierThe ID of the document (a long value).Representation{  &quot;id&quot;:&quot;documentId&quot;,  &quot;creationDate&quot;:&quot;date and time&quot;,  &quot;author&quot;:&quot;submittorUserId&quot;,  &quot;index&quot;:&quot;index in a list of documents, or -1 for a single document&quot;,  &quot;contentMimetype&quot;:&quot;MIMEtype&quot;,  &quot;caseId&quot;:&quot;caseId&quot;,   &quot;contentStorageId&quot;:&quot;storageId&quot;,   &quot;isInternal&quot;:&quot;true | false&quot;,   &quot;description&quot;:&quot; description&quot;,   &quot;name&quot;:&quot;name&quot;,   &quot;fileName&quot;:&quot;filename&quot;,   &quot;submittedBy&quot;:&quot;submittorUserId&quot;,   &quot;url&quot;:&quot;urlForDownload&quot;,   &quot;version&quot;:&quot;version&quot; }MethodsThe methods used for this resource are:  POST - Create a resource  GET - Read a resource  PUT - Update a resource  DELETE - Remove a resourceAdd a document to a caseUse a POST method to add a document to a case. You can upload a document from the local file system or by URL. Specify the case id and the document name in the payload. The document description is optional: if you do not specify a description, the description in the response is empty. The response contains a version, which is managed automatically.You cannot currently retrieve a specific version of a document, only the most recent version. To retrieve earlier versions of a caseDocument, use the archivedCaseDocument resource.  URL/API/bpm/caseDocument  MethodPOST  Request PayloadExample 1: Upload doc.jpg from the tenant temporary upload folder to case 1 with the display name “Doc 1” and renaming the file into “document_1.jpg”:{  &quot;caseId&quot;: &quot;1&quot;,  &quot;file&quot;: &quot;doc.jpg&quot;,  &quot;name&quot;: &quot;Doc 1&quot;,  &quot;fileName&quot;: &quot;document_1.jpg&quot;,  &quot;description&quot;: &quot;draft&quot;}Example 2: Upload train_receipt.png from my cloud drive to case 1 with the name “Train receipt”:{  &quot;caseId&quot; : &quot;1&quot;,  &quot;url&quot; : &quot;http://cloud.storage.com/sites/chris/expenses/july_2014/train_receipt.png&quot;,  &quot;name&quot; : &quot;Train receipt&quot;}Success Response  Code: 200  Payload:Example 1:In this example, isInternal is set to true because the the document object contains the content directly.{  &quot;id&quot;:&quot;3&quot;,  &quot;creationDate&quot;:&quot;2014-10-09 16:45:36.658&quot;,  &quot;author&quot;:&quot;1&quot;,  &quot;index&quot;:&quot;-1&quot;,  &quot;contentMimetype&quot;:&quot;application/octet-stream&quot;,  &quot;caseId&quot;:&quot;1&quot;,  &quot;contentStorageId&quot;:&quot;4&quot;,  &quot;isInternal&quot;:&quot;true&quot;,  &quot;description&quot;:&quot;draft,  &quot;name&quot;:&quot;Doc 1&quot;,  &quot;fileName&quot;:&quot;document_1.jpg&quot;,  &quot;submittedBy&quot;:&quot;1&quot;,  &quot;url&quot;:&quot;documentDownload?fileName=document_1.jpg&amp;amp;contentStorageId=4&quot;,  &quot;version&quot;:&quot;1&quot;}Example 2:In this example, isInternal is set to false because the document is specified by URL so the document object contains a reference to the content, not the content itself.{  &quot;id&quot;:&quot;4&quot;,  &quot;creationDate&quot;:&quot;2014-10-09 16:45:36.658&quot;,  &quot;author&quot;:&quot;1&quot;,  &quot;index&quot;:&quot;-1&quot;,  &quot;contentMimetype&quot;:&quot;image/png&quot;,  &quot;caseId&quot;:&quot;1&quot;,  &quot;contentStorageId&quot;:&quot;4&quot;,  &quot;isInternal&quot;:&quot;false&quot;,  &quot;description&quot;:&quot;draft,  &quot;name&quot;:&quot;Train receipt&quot;,  &quot;fileName&quot;:&quot;train_receipt.png&quot;,  &quot;submittedBy&quot;:&quot;1&quot;,  &quot;url&quot;:&quot;http://cloud.storage.com/sites/chris/expenses/july_2014/train_receipt.png&quot;,  &quot;version&quot;:&quot;1&quot;}Get a document from a caseUse a GET method to get a document from a case. First you get the document information, then you download the content. To get the document information, specify the document id in the URL. The document id is created when you upload a document to a case. There is no payload.  URL/API/bpm/caseDocument/:documentId`  MethodGET  Success ResponseThe response includes the “url” to use to download the content. Call the documentDownload servlet with this URL: /portal/documentDownload?fileName=doc.jpg&amp;amp;contentStorageId=4.  Code: 200  Payload:{  &quot;id&quot;:&quot;3&quot;,  &quot;creationDate&quot;:&quot;2014-10-09 16:45:36.658&quot;,  &quot;author&quot;:&quot;1&quot;,  &quot;index&quot;:&quot;-1&quot;,  &quot;contentMimetype&quot;:&quot;application/octet-stream&quot;,  &quot;caseId&quot;:&quot;1&quot;,  &quot;contentStorageId&quot;:&quot;4&quot;,  &quot;isInternal&quot;:&quot;true&quot;,  &quot;description&quot;:&quot;draft,  &quot;name&quot;:&quot;Doc 1&quot;,  &quot;fileName&quot;:&quot;doc.jpg&quot;,  &quot;submittedBy&quot;:&quot;1&quot;,  &quot;url&quot;:&quot;documentDownload?fileName=doc.jpg&amp;amp;contentStorageId=4&quot;,  &quot;version&quot;:&quot;1&quot;}Update a document in a caseYou update a document in a case by uploading a new version of the document using a PUT method. You can upload a document version from the local file system or by URL. The document name will be used in all the cases of the process, but the combination of case id and document name is unique.In the URL, you specify to supply the document id. This is included in the response when you first add a document to a case.The response to PUT methods is the same as for POST methods.  URL/API/bpm/caseDocument/:documentId  MethodPUT  Data Params  Request PayloadExample 1: Update the document ExpensesPolicy in case 1 by uploading Expense policy rev2.pdf from the tenant temporary upload folder. The document id, 17 in this example, is specified in the URL. The description is optional. The filename allows to rename the file into “revision2.pdf” Method{  &quot;file&quot; : &quot;Expense policy rev2.pdf&quot;,  &quot;description&quot; : &quot;updated version of document&quot;  &quot;fileName&quot;: &quot;revision2.pdf&quot;,}Example 2: Update the document ExpensesPolicy in case 1 by uploading Expense policy rev2.pdf from my cloud drive. The document id is 17.{  &quot;url&quot; : &quot;http://cloud.storage.com/sites/chris/expenses/july_2014/Expense policy rev2.pdf&quot;}Success Response  Code: 200  Search for a document  URL/API/bpm/caseDocumentExample: Find all documents with a document name equal to doc1: /API/bpm/caseDocument?p=0&amp;amp;c=10&amp;amp;f=name=doc1Find all documents with with any of the searchable fields starting with “doc”. /API/bpm/caseDocument?p=0&amp;amp;c=10&amp;amp;s=doc  MethodGET  Data ParamsStandard search parameters are available.It is possible to filter on three parameters: submittedBy, name and description.  submittedBy=&quot;id&quot;: search for documents that were submitted by the user with the specified identifier.  name=&quot;string&quot;: search for documents with names that contain string. Depending on the setting for word-based search, the search returns documents with string at the start of the name or the start of a word in the name.  description=&quot;string&quot;: search for documents with descriptions that contain string. Depending on the setting for word-based search, the search returns documents with string at the start of the description or the start of a word in the description.Success ResponseA document object for each matching document  Code: 200  Payload:[  {&quot;id&quot;:&quot;3&quot;,&quot;creationDate&quot;:&quot;2014-10-09 16:45:36.658&quot;,&quot;author&quot;:&quot;1&quot;,&quot;index&quot;:&quot;-1&quot;,&quot;contentMimetype&quot;:&quot;application/octet-stream&quot;,&quot;caseId&quot;:&quot;1&quot;,&quot;contentStorageId&quot;:&quot;4&quot;,&quot;isInternal&quot;:&quot;true&quot;,&quot;description&quot;:&quot;draft,&quot;name&quot;:&quot;doc1&quot;,&quot;fileName&quot;:&quot;doc.jpg&quot;,&quot;submittedBy&quot;:&quot;1&quot;,&quot;url&quot;:&quot;documentDownload?fileName=test.txt&amp;amp;contentStorageId=1&quot;,&quot;version&quot;:&quot;1&quot;  }, {&quot;id&quot;:&quot;4&quot;,&quot;creationDate&quot;:&quot;2014-10-09 16:45:36.658&quot;,&quot;author&quot;:&quot;1&quot;,&quot;index&quot;:&quot;-1&quot;,&quot;contentMimetype&quot;:&quot;image/png&quot;,&quot;caseId&quot;:&quot;1&quot;,&quot;contentStorageId&quot;:&quot;4&quot;&quot;isInternal&quot;:&quot;false&quot;,&quot;description&quot;:&quot;draft,&quot;name&quot;:&quot;doc2&quot;,&quot;fileName&quot;:&quot;train_receipt.png&quot;,&quot;submittedBy&quot;:&quot;1&quot;,&quot;url&quot;:&quot;http://cloud.storage.com/sites/chris/expenses/july_2014/train_receipt.png&quot;,&quot;version&quot;:&quot;1&quot;  }]Delete a document  URL/API/bpm/caseDocument/:documentId  MethodDELETE  Success Response  Code: 200  ArchivedCaseDocumentDescriptionUse the archived case document resource to access previous document versions for active and archived casesIdentifierThe ID of the document (a long value).Representation{  &quot;id&quot;:&quot;archivedDocumentId&quot;,   &quot;creationDate&quot;:&quot;date and time of the original document creation&quot;,   &quot;author&quot;:&quot;submittorUserId&quot;,   &quot;index&quot;:&quot;index in a list of documents. if -1 it represents a single document&quot;,   &quot;contentMimetype&quot;:&quot;MIMEtype&quot;,   &quot;caseId&quot;:&quot;caseId&quot;,   &quot;contentStorageId&quot;:&quot;storageId&quot;,   &quot;isInternal&quot;:&quot;true | false&quot;,   &quot;description&quot;:&quot; description&quot;,   &quot;name&quot;:&quot;name&quot;,   &quot;fileName&quot;:&quot;filename&quot;,   &quot;submittedBy&quot;:&quot;submittorUserId&quot;,   &quot;url&quot;:&quot;urlForDownload&quot;,   &quot;version&quot;:&quot;version&quot;,   &quot;sourceObjectId&quot;:&quot;originalDocumentId&quot;,   &quot;archivedDate&quot;:&quot;date and time of the archived document creation&quot;}MethodsThe methods used for this resource are:  GET - Read a resource  DELETE - Remove the physical file related to the specified id but keep the mapping for audit purposesSearch for a documentYou can use a single GET method to return all the documents that match the specified filters.  URL/API/bpm/archivedCaseDocumentExamples  List all versions of a simple document (knowing its current version Id) /API/bpm/archivedCaseDocument?c=10&amp;amp;p=0&amp;amp;f=sourceObjectId=1  List all versions of a list of document (knowing its name) /API/bpm/archivedCaseDocument?c=10&amp;amp;p=0&amp;amp;f=name=MyDocList  List all versions of all documents of the case of id 1: /API/bpm/archivedCaseDocument?c=10&amp;amp;p=0&amp;amp;f=caseId=1  List all versions of all document of the archived case of id 1 /API/bpm/archivedCaseDocument?c=10&amp;amp;p=0&amp;amp;f=archivedCaseId=1  Combine different filters, for example list all versions of a list declared in a case (knowing list name and case id) /API/bpm/archivedCaseDocument?c=10&amp;amp;p=0&amp;amp;f=caseId=1&amp;amp;f=name=myDocList&amp;amp;o=index ASC  Response payload  MethodGET  Data ParamsStandard search parameters are available.It is possible to filter on the following parameters: sourceObjectId, caseId, archivedCaseId, submittedBy, name, description.  sourceObjectId=&quot;id&quot;: search for documents by specifying the original document id. This is useful if you know the id of a caseDocument and you wish to retrieve all its previous versions..  caseId=&quot;id&quot;: search for documents with the specified open case id.  archivedCaseId=&quot;id&quot;: search for documents with the specified archvied case id.  submittedBy=&quot;id&quot;: search for documents that were submitted by the user with the specified identifier.  name=&quot;string&quot;: search for documents with names that contain string. Depending on the setting for word-based search, the search returns documents with string at the start of the name or the start of a word in the name.  description=&quot;string&quot;: search for documents with descriptions that contain string. Depending on the setting for word-based search, the search returns documents with string at the start of the description or the start of a word in the description.Success ResponseAn archived document object for each matching document  Code: 200  Payload:[{   &quot;id&quot;:&quot;1&quot;,   &quot;creationDate&quot;:&quot;2014-10-09 16:39:52.472&quot;,&quot;author&quot;:&quot;1&quot;,   &quot;index&quot;:&quot;0&quot;,   &quot;contentMimetype&quot;:&quot;text/plain&quot;,   &quot;caseId&quot;:&quot;1&quot;,   &quot;contentStorageId&quot;:&quot;1&quot;,   &quot;isInternal&quot;:&quot;true&quot;,   &quot;description&quot;:&quot;&quot;,   &quot;name&quot;:&quot;myDoc&quot;,   &quot;fileName&quot;:&quot;test1.txt&quot;,   &quot;submittedBy&quot;:&quot;1&quot;,   &quot;url&quot;:&quot;documentDownload?fileName=test1.txt&amp;amp;contentStorageId=1&quot;,   &quot;version&quot;:&quot;1&quot;,   &quot;sourceObjectId&quot;:&quot;1&quot;,   &quot;archivedDate&quot;:&quot;2014-10-09 17:39:52.473&quot;}, {   &quot;id&quot;:&quot;2&quot;,&quot;creationDate&quot;:&quot;2014-10-09 16:39:52.473&quot;,&quot;author&quot;:&quot;1&quot;,&quot;index&quot;:&quot;1&quot;,&quot;contentMimetype&quot;:&quot;text/plain&quot;,&quot;caseId&quot;:&quot;1&quot;,&quot;contentStorageId&quot;:&quot;2&quot;,&quot;isInternal&quot;:&quot;true&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;myDoc&quot;,&quot;fileName&quot;:&quot;test2.txt&quot;,&quot;submittedBy&quot;:&quot;1&quot;,&quot;url&quot;:&quot;documentDownload?fileName=test2.txt&amp;amp;contentStorageId=2&quot;,&quot;version&quot;:&quot;2&quot;,&quot;sourceObjectId&quot;:&quot;1&quot;,   &quot;archivedDate&quot;:&quot;2014-10-09 18:39:52.473&quot;}, {   &quot;id&quot;:&quot;3&quot;,&quot;creationDate&quot;:&quot;2014-10-09 16:39:52.473&quot;,&quot;author&quot;:&quot;1&quot;,&quot;index&quot;:&quot;2&quot;,&quot;contentMimetype&quot;:&quot;text/plain&quot;,&quot;caseId&quot;:&quot;1&quot;,&quot;contentStorageId&quot;:&quot;3&quot;,&quot;isInternal&quot;:&quot;true&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;myDoc&quot;,&quot;fileName&quot;:&quot;test3.txt&quot;,&quot;submittedBy&quot;:&quot;1&quot;,&quot;url&quot;:&quot;documentDownload?fileName=test3.txt&amp;amp;contentStorageId=3&quot;,&quot;version&quot;:&quot;3&quot;,   &quot;sourceObjectId&quot;:&quot;1&quot;,&quot;archivedDate&quot;:&quot;2014-10-09 19:39:52.473&quot; }]Delete a document contentDelete the document content with id 3  URL/API/bpm/archivedCaseDocument/:archivedCaseId`  MethodDELETEActorsActorDescriptionManage process actors.IdentifierSimple, the ID of the object (a long value)Representation{  &quot;id&quot;:&quot;actor id&quot;,  &quot;process_id&quot;:&quot;process definition id&quot;,  &quot;description&quot;:&quot;a description of the actor&quot;,  &quot;name&quot;:&quot;name of the actor (as specified on human tasks and for the initiator of the process)&quot;,  &quot;displayName&quot;:&quot;the display name of the actor&quot;,}MethodsThe methods used for this resource are:  GET - Read or search an actor  PUT - Update an actorRead an actorUse a GET method to retrieve information about an actor.  URL/API/bpm/actor/:actorIdExample: Get the information about the actor with id=1: /API/bpm/actor/1  MethodGET  Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;1&quot;,  &quot;process_id&quot;:&quot;4717422838168315799&quot;,  &quot;description&quot;:&quot;&quot;,  &quot;name&quot;:&quot;employee&quot;,  &quot;displayName&quot;:&quot;Employee actor&quot;}Search actors for a given process idUse a GET method to search actors for a given process id.  URL/API/bpm/actorExample: Count the actor members of actors of the process with id 4758765 /API/bpm/actor?p=0&amp;amp;c=10&amp;amp;f=process_id=4758765&amp;amp;n=users&amp;amp;n=group&amp;amp;n=roles&amp;amp;n=memberships  MethodGET  Data ParamsStandard search parameters are available.  Success Response  Code: 200  Payload:[  {&quot;id&quot;:&quot;1&quot;,&quot;process_id&quot;:&quot;4758765&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;employee&quot;,&quot;displayName&quot;:&quot;Employee actor&quot;  }, {&quot;id&quot;:&quot;2&quot;,&quot;process_id&quot;:&quot;4758765&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;customer&quot;,&quot;displayName&quot;:&quot;Customer actor&quot;  }]Update an actorUse the PUT method to update an actor.Fields that can be upated are “displayName” and “description”  URL/API/bpm/actor/:actorId  MethodPUT  Request Payload{  &quot;displayName&quot;: &quot;new display name&quot;,  &quot;description&quot;: &quot;new description&quot;}Success Response  Code: 20  ActorMemberDescriptionAn actor member represents the association between the organization and the actor af a process. In an organization we have four member_types = USER, GROUP, ROLE and MEMBERSHIP (role in a group). You can assign a actor to a user by specifying a role and or a group, or specific user.IdentifierSimple, the ID of the object (a long value)Representation{  &quot;id&quot;:&quot;actor member id&quot;,  &quot;actor_id&quot;:&quot;id of the actor for this mapping&quot;,  &quot;role_id&quot;:&quot;id of role, or -1 if the member type is not role&quot;,  &quot;group_id&quot;:&quot;id of group, or -1 if the member type is not group&quot;,  &quot;user_id&quot;:&quot;id of user, or -1 if the member type is not user&quot;}MethodsThe methods used for this resource are:  POST - Add a new actorMember  GET - Search actorMembers  DELETE - Remove an actorMemberAdd a new actorMemberUse the POST method to create a new actorMember.  URL/API/bpm/actorMember  MethodPOST  Request PayloadAdd a member_type = USER to the actor with id = 2.{  &quot;actor_id&quot;:&quot;2&quot;,  &quot;member_type&quot;:&quot;USER&quot;,  &quot;user_id&quot;:&quot;101&quot;}Add a member_type = MEMBERSHIP to the actor with id = 2.{  &quot;id&quot;:&quot;204&quot;,  &quot;actor_id&quot;:&quot;2&quot;,  &quot;role_id&quot;:&quot;-1&quot;,  &quot;group_id&quot;:&quot;-1&quot;,  &quot;user_id&quot;:&quot;101&quot;}Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;206&quot;,  &quot;actor_id&quot;:&quot;2&quot;,  &quot;role_id&quot;:&quot;4&quot;,  &quot;group_id&quot;:&quot;8&quot;,  &quot;user_id&quot;:&quot;-1&quot;}Search actorMembersUse a GET method with filters and search terms to search for actorMembers.  URL/API/bpm/actorMemberEntryExample: ``  Method``  Data ParamsStandard search parameters are available.There is a mandatory filter on:  actor_id For example, retrieve the actorMembers related to the specified actor_id. http://localhost:8080/bonita/API/bpm/actorMember?p=0&amp;amp;c=10&amp;amp;f=actor_id%3d1You can also filter also on:  member_type=user|role|group|roleAndGroup retrieve only the actorMembers of type user. /API/bpm/actorMember?p=0&amp;amp;c=10&amp;amp;f=actor_id%3d1&amp;amp;f=member_type%3duser  user_id=:userId}: retrieve only the actorMembers related to the specified user_id. /API/bpm/actorMember?p=0&amp;amp;c=10&amp;amp;f=actor_id%3d1&amp;amp;f=user_id%3d101  role_id=:roleId: retrieve only the actorMembers related to the specified role_id. /API/bpm/actorMember?p=0&amp;amp;c=10&amp;amp;f=actor_id%3d1&amp;amp;f=role_id%3d101  group_id=:groupId: retrieve only the actorMembers related to the specified group_id. /API/bpm/actorMember?p=0&amp;amp;c=10&amp;amp;f=actor_id%3d1&amp;amp;f=group_id%3d101Success ResponseAn array of actorMember objects  Code: 200  Delete an actorMemberUse the DELETE method to delete an existing actorMember.  URL/API/bpm/actorMember/:id  MethodDELETE  Success Response  Code: 200  Cases (Process Instances)CaseDescriptionCase is an instance of a process. When you start a process, it creates a case.IdentifierID of the Object: a long valueRepresentation{  &quot;id&quot;:&quot;the identifier of the case&quot;,  &quot;end_date&quot;:&quot;the date set when the case is closed&quot;,  &quot;failedFlowNodes&quot;:&quot;count of failed flow nodes if parameter n=failedFlowNodes is given&quot;,  &quot;startedBySubstitute&quot;:&quot;the identifier of the substitute user (as Process manager or Administrator) who started the process. It can be also the substitute user if d=startedBySubstitute is given.&quot;,  &quot;start&quot;:&quot;the starting date of the case&quot;,  &quot;activeFlowNodes&quot;:&quot;count of active flow nodes if parameter n=activeFlowNodes is given&quot;,  &quot;state&quot;:&quot;state: an enum that represent the state of the case, it can be INITIALIZING, STARTED, SUSPENDED, CANCELLED, ABORTED, COMPLETING, COMPLETED, ERROR, ABORTING&quot;,  &quot;rootCaseId&quot;:&quot;the identifier of the container of the case&quot;,  &quot;started_by&quot;:&quot;the identifier of the user who started the case&quot;,  &quot;processDefinitionId&quot;:&quot;the identifier of the process related of the case&quot;,  &quot;last_update_date&quot;:&quot;the date of the last update done on the case&quot;,  &quot;searchIndex1Label&quot;:&quot;the 1st search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex2Label&quot;:&quot;the 2nd search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex3Label&quot;:&quot;the 3rd search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex4Label&quot;:&quot;the 4th search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex5Label&quot;:&quot;the 5th search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex1Value&quot;:&quot;the 1st search index value (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex2Value&quot;:&quot;the 2nd search index value (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex3Value&quot;:&quot;the 3rd search index value (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex4Value&quot;:&quot;the 4th search index value (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex5Value&quot;:&quot;the 5th search index value (from 6.5, in Subscription editions only)&quot;}Methods  POST - Create a case  GET - Read a case or search for a case  DELETE - Remove a caseResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  started_by  startedBySubstitute  processDefinitionIdRead a caseYou can get a case by using its identifier. Request url  URL/API/bpm/case/:id  MethodGET  Data Params  d: extend resource response parameters of this resource are available.Available values: started_by, startedBySubstitute, processDefinitionId.  n: count of related resources. Available values: activeFlowNodes, failedFlowNodes.Success ResponseA JSON representation of the case  Code: 200  Payload:{  &quot;id&quot;: &quot;1&quot;,  &quot;end_date&quot;: &quot;&quot;,  &quot;failedFlowNodes&quot;: &quot;9&quot;,  &quot;startedBySubstitute&quot;: {&quot;last_connection&quot;: &quot;2014-12-01 10:46:03.750&quot;,&quot;created_by_user_id&quot;: &quot;-1&quot;,&quot;creation_date&quot;: &quot;2014-11-27 17:53:46.516&quot;,&quot;id&quot;: &quot;4&quot;,&quot;icon&quot;: &quot;/default/icon_user.png&quot;,&quot;enabled&quot;: &quot;true&quot;,&quot;title&quot;: &quot;Mr&quot;,&quot;manager_id&quot;: &quot;3&quot;,&quot;job_title&quot;: &quot;Human resources benefits&quot;,&quot;userName&quot;: &quot;walter.bates&quot;,&quot;lastname&quot;: &quot;Bates&quot;,&quot;firstname&quot;: &quot;Walter&quot;,&quot;password&quot;: &quot;&quot;,&quot;last_update_date&quot;: &quot;2014-11-27 17:53:46.516&quot;  },  &quot;start&quot;: &quot;2014-11-27 17:55:00.906&quot;,  &quot;activeFlowNodes&quot;: &quot;9&quot;,  &quot;state&quot;: &quot;started&quot;,  &quot;rootCaseId&quot;: &quot;1&quot;,  &quot;started_by&quot;:{&quot;last_connection&quot;: &quot;&quot;,&quot;created_by_user_id&quot;: &quot;-1&quot;,&quot;creation_date&quot;: &quot;2014-11-27 17:53:46.509&quot;,&quot;id&quot;: &quot;3&quot;,&quot;icon&quot;: &quot;/default/icon_user.png&quot;,&quot;enabled&quot;: &quot;true&quot;,&quot;title&quot;: &quot;Mrs&quot;,&quot;manager_id&quot;: &quot;1&quot;,&quot;job_title&quot;: &quot;Human resource manager&quot;,&quot;userName&quot;: &quot;helen.kelly&quot;,&quot;lastname&quot;: &quot;Kelly&quot;,&quot;firstname&quot;: &quot;Helen&quot;,&quot;password&quot;: &quot;&quot;,&quot;last_update_date&quot;: &quot;2014-11-27 17:53:46.509&quot;  },  &quot;processDefinitionId&quot;: {&quot;id&quot;: &quot;5777042023671752656&quot;,&quot;icon&quot;: &quot;&quot;,&quot;displayDescription&quot;: &quot;&quot;,&quot;deploymentDate&quot;: &quot;2014-11-27 17:54:37.774&quot;,&quot;description&quot;: &quot;&quot;,&quot;activationState&quot;: &quot;ENABLED&quot;,&quot;name&quot;: &quot;Pool2&quot;,&quot;deployedBy&quot;: &quot;4&quot;,&quot;displayName&quot;: &quot;Pool 2&quot;,&quot;actorinitiatorid&quot;: &quot;1&quot;,&quot;last_update_date&quot;: &quot;2014-11-27 17:54:43.621&quot;,&quot;configurationState&quot;: &quot;RESOLVED&quot;,&quot;version&quot;: &quot;2.0&quot;  },  &quot;last_update_date&quot;: &quot;2014-11-27 17:55:00.906&quot;,  &quot;searchIndex1Label&quot;:&quot;mySearchIndex1Label&quot;,  &quot;searchIndex2Label&quot;:&quot;mySearchIndex2Label&quot;,  &quot;searchIndex3Label&quot;:&quot;mySearchIndex3Label&quot;,  &quot;searchIndex4Label&quot;:&quot;mySearchIndex4Label&quot;,  &quot;searchIndex5Label&quot;:&quot;mySearchIndex5Label&quot;,  &quot;searchIndex1Value&quot;:&quot;mySearchIndex1Value&quot;,  &quot;searchIndex2Value&quot;:&quot;mySearchIndex2Value&quot;,  &quot;searchIndex3Value&quot;:&quot;mySearchIndex3Value&quot;,  &quot;searchIndex4Value&quot;:&quot;mySearchIndex4Value&quot;,  &quot;searchIndex5Value&quot;:&quot;mySearchIndex5Value&quot;}Search for a case  URL/API/bpm/case  MethodGET  Data ParamsStandard search parameters are available.  f: filter of the search, beware you cannot use team_manager_id and supervisor_id at the same time  n: count of related resource. Available values: activeFlowNodes, failedFlowNodes  d: extend resource response parameters of this resource are available.Success ResponseJSON representations of matching cases  Code: 200  Payload:[  {&quot;id&quot;: &quot;1&quot;,&quot;end_date&quot;: &quot;&quot;,&quot;failedFlowNodes&quot;: &quot;9&quot;,&quot;startedBySubstitute&quot;:{  &quot;last_connection&quot;: &quot;2014-12-01 10:46:03.750&quot;,  &quot;created_by_user_id&quot;: &quot;-1&quot;,  &quot;creation_date&quot;: &quot;2014-11-27 17:53:46.516&quot;,  &quot;id&quot;: &quot;4&quot;,  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;enabled&quot;: &quot;true&quot;,  &quot;title&quot;: &quot;Mr&quot;,  &quot;manager_id&quot;: &quot;3&quot;,  &quot;job_title&quot;: &quot;Human resources benefits&quot;,  &quot; userName&quot;: &quot;walter.bates&quot;,  &quot;lastname&quot;: &quot;Bates&quot;,  &quot;firstname&quot;: &quot;Walter&quot;,  &quot;password&quot;: &quot;&quot;,  &quot;last_update_date&quot;: &quot;2014-11-27 17:53:46.516&quot;},&quot;start&quot;: &quot;2014-11-27 17:55:00.906&quot;,&quot;activeFlowNodes&quot;: &quot;9&quot;,&quot;state&quot;: &quot;started&quot;,&quot;rootCaseId&quot;: &quot;1&quot;,&quot;started_by&quot;:{  &quot;last_connection&quot;: &quot;&quot;,  &quot;created_by_user_id&quot;: &quot;-1&quot;,  &quot;creation_date&quot;: &quot;2014-11-27 17:53:46.509&quot;,  &quot;id&quot;: &quot;3&quot;,  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;enabled&quot;: &quot;true&quot;,  &quot;title&quot;: &quot;Mrs&quot;,  &quot;manager_id&quot;: &quot;1&quot;,  &quot;job_title&quot;: &quot;Human resource manager&quot;,  &quot;userName&quot;: &quot;helen.kelly&quot;,  &quot;lastname&quot;: &quot;Kelly&quot;,  &quot;firstname&quot;: &quot;Helen&quot;,  &quot;password&quot;: &quot;&quot;,  &quot;last_update_date&quot;: &quot;2014-11-27 17:53:46.509&quot;},&quot;processDefinitionId&quot;:{  &quot;id&quot;: &quot;5777042023671752656&quot;,  &quot;icon&quot;: &quot;&quot;,  &quot;displayDescription&quot;: &quot;&quot;,  &quot;deploymentDate&quot;: &quot;2014-11-27 17:54:37.774&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;activationState&quot;: &quot;ENABLED&quot;,  &quot;name&quot;: &quot;Pool2&quot;,  &quot;deployedBy&quot;: &quot;4&quot;,  &quot;displayName&quot;: &quot;Pool 2&quot;,  &quot;actorinitiatorid&quot;: &quot;1&quot;,  &quot;last_update_date&quot;: &quot;2014-11-27 17:54:43.621&quot;,  &quot;configurationState&quot;: &quot;RESOLVED&quot;,  &quot;version&quot;: &quot;2.0&quot;},&quot;last_update_date&quot;: &quot;2014-11-27 17:55:00.906&quot;,&quot;searchIndex1Label&quot;:&quot;case1SearchIndex1Label&quot;,&quot;searchIndex2Label&quot;:&quot;case1SearchIndex2Label&quot;,&quot;searchIndex3Label&quot;:&quot;case1SearchIndex3Label&quot;,&quot;searchIndex4Label&quot;:&quot;case1SearchIndex4Label&quot;,&quot;searchIndex5Label&quot;:&quot;case1SearchIndex5Label&quot;,&quot;searchIndex1Value&quot;:&quot;case1SearchIndex1Value&quot;,&quot;searchIndex2Value&quot;:&quot;case1SearchIndex2Value&quot;,&quot;searchIndex3Value&quot;:&quot;case1SearchIndex3Value&quot;,&quot;searchIndex4Value&quot;:&quot;case1SearchIndex4Value&quot;,&quot;searchIndex5Value&quot;:&quot;case1SearchIndex5Value&quot;  },  {&quot;id&quot;: &quot;2&quot;,&quot;end_date&quot;: &quot;&quot;,&quot;failedFlowNodes&quot;: &quot;0&quot;,&quot;startedBySubstitute&quot;:{  &quot;last_connection&quot;: &quot;2014-12-01 10:46:03.750&quot;,  &quot;created_by_user_id&quot;: &quot;-1&quot;,  &quot;creation_date&quot;: &quot;2014-11-27 17:53:46.516&quot;,  &quot;id&quot;: &quot;4&quot;,  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;enabled&quot;: &quot;true&quot;,  &quot;title&quot;: &quot;Mr&quot;,  &quot;manager_id&quot;: &quot;3&quot;,  &quot;job_title&quot;: &quot;Human resources benefits&quot;,  &quot;userName&quot;: &quot;walter.bates&quot;,  &quot;lastname&quot;: &quot;Bates&quot;,  &quot;firstname&quot;: &quot;Walter&quot;,  &quot;password&quot;: &quot;&quot;,  &quot;last_update_date&quot;: &quot;2014-11-27 17:53:46.516&quot;},&quot;start&quot;: &quot;2014-11-27 17:56:28.596&quot;,&quot;activeFlowNodes&quot;: &quot;1&quot;,&quot;state&quot;: &quot;started&quot;,&quot;rootCaseId&quot;: &quot;2&quot;,&quot;started_by&quot;:{  &quot;last_connection&quot;: &quot;&quot;,  &quot;created_by_user_id&quot;: &quot;-1&quot;,  &quot;creation_date&quot;: &quot;2014-11-27 17:53:46.509&quot;,  &quot;id&quot;: &quot;3&quot;,  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;enabled&quot;: &quot;true&quot;,  &quot;title&quot;: &quot;Mrs&quot;,  &quot;manager_id&quot;: &quot;1&quot;,  &quot;job_title&quot;: &quot;Human resource manager&quot;,  &quot;userName&quot;: &quot;helen.kelly&quot;,  &quot;lastname&quot;: &quot;Kelly&quot;,  &quot;firstname&quot;: &quot;Helen&quot;,  &quot;password&quot;: &quot;&quot;,  &quot;last_update_date&quot;: &quot;2014-11-27 17:53:46.509&quot;},&quot;processDefinitionId&quot;:{  &quot;id&quot;: &quot;4948193168427526005&quot;,  &quot;icon&quot;: &quot;&quot;,  &quot;displayDescription&quot;: &quot;&quot;,  &quot;deploymentDate&quot;: &quot;2014-11-27 17:56:10.920&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;activationState&quot;: &quot;ENABLED&quot;,  &quot;name&quot;: &quot;ConnectorFailed&quot;,  &quot;deployedBy&quot;: &quot;4&quot;,  &quot;displayName&quot;: &quot;ConnectorFailed&quot;,  &quot;actorinitiatorid&quot;: &quot;2&quot;,  &quot;last_update_date&quot;: &quot;2014-11-27 17:56:12.470&quot;,  &quot;configurationState&quot;: &quot;RESOLVED&quot;,  &quot;version&quot;: &quot;1.0&quot;},&quot;last_update_date&quot;: &quot;2014-11-27 17:56:28.596&quot;,&quot;searchIndex1Label&quot;:&quot;case2SearchIndex1Label&quot;,&quot;searchIndex2Label&quot;:&quot;case2SearchIndex2Label&quot;,&quot;searchIndex3Label&quot;:&quot;case2SearchIndex3Label&quot;,&quot;searchIndex4Label&quot;:&quot;case2SearchIndex4Label&quot;,&quot;searchIndex5Label&quot;:&quot;case2SearchIndex5Label&quot;,&quot;searchIndex1Value&quot;:&quot;case2SearchIndex1Value&quot;,&quot;searchIndex2Value&quot;:&quot;case2SearchIndex2Value&quot;,&quot;searchIndex3Value&quot;:&quot;case2SearchIndex3Value&quot;,&quot;searchIndex4Value&quot;:&quot;case2SearchIndex4Value&quot;,&quot;searchIndex5Value&quot;:&quot;case2SearchIndex5Value&quot;  } ]Create a caseThis way of creating a case using this method will only work for processes in which no contract is defined. To instantiate a process with a contract, check the process instantiation resource documentation.  URL/API/bpm/case  MethodPOST  Request PayloadThe process definition id, in JSONCreate a case without variables  {&quot;processDefinitionId&quot;:&quot;5777042023671752656&quot;  }Create a case with variables Warning: The attribute “variables” on the request payload is used to initialize the process variables (not BDM variables).If you want to initialize BDM variables at process instantiation, add a contract on the process and map BDM variables to the contract data.See Start a process using an instantiation contract for usage.  {  &quot;processDefinitionId&quot;:&quot;5777042023671752656&quot;,&quot;variables&quot;:[{  &quot;name&quot;:&quot;stringVariable&quot;,&quot;value&quot;:&quot;aValue&quot;  },  {  &quot;name&quot;:&quot;dateVariable&quot;,&quot;value&quot;:349246800000  },  {  &quot;name&quot;:&quot;numericVariable&quot;,&quot;value&quot;:5  }]  }  Success ResponseThe JSON representation of a case resource  Code: 200  Payload:{  &quot;id&quot;: &quot;1001&quot;,  &quot;end_date&quot;: &quot;&quot;,  &quot;startedBySubstitute&quot;: &quot;4&quot;,  &quot;start&quot;: &quot;2014-12-01 14:36:23.732&quot;,  &quot;state&quot;: &quot;started&quot;,  &quot;rootCaseId&quot;: &quot;1001&quot;,  &quot;started_by&quot;: &quot;4&quot;,  &quot;processDefinitionId&quot;: &quot;5777042023671752656&quot;,  &quot;last_update_date&quot;: &quot;2014-12-01 14:36:23.732&quot;}Delete a case  URL/API/bpm/case/:caseId  MethodDELETE  Success Response  Code: 200  Delete cases in bulk  URL/API/bpm/case/  MethodDELETE  Request PayloadList of case ids to delete[&quot;1&quot;, &quot;2&quot; ,...]Success Response  Code: 200  Retrieve the case context  URL/API/bpm/case/:caseId/context  MethodGET  Success ResponseA context object  Code: 200  Payload:{&quot;myBusinessData_ref&quot;:{  &quot;name&quot;:&quot;myBusinessData&quot;,&quot;type&quot;:&quot;com.company.model.BusinessObject1&quot;,&quot;link&quot;:&quot;API/bdm/businessData/com.company.model.BusinessObject1/2&quot;,&quot;storageId&quot;:2,&quot;storageId_string&quot;:&quot;2&quot;  },  &quot;myDocument_ref&quot;:{  &quot;id&quot;:1,&quot;processInstanceId&quot;:3,&quot;name&quot;:&quot;myDocument&quot;,&quot;author&quot;:104,&quot;creationDate&quot;:1434723950847,&quot;fileName&quot;:&quot;TestCommunity-1.0.bos&quot;,&quot;contentMimeType&quot;:null,&quot;contentStorageId&quot;:&quot;1&quot;,&quot;url&quot;:&quot;documentDownload?fileName=TestCommunity-1.0.bos&amp;amp;contentStorageId=1&quot;,&quot;description&quot;:&quot;&quot;,&quot;version&quot;:&quot;1&quot;,&quot;index&quot;:-1,&quot;contentFileName&quot;:&quot;TestCommunity-1.0.bos&quot;  }}ArchivedCaseDescriptionA completed instance of a process.IdentifierThe ID of the archived case (a long value).Representation{  &quot;id&quot;:&quot;the identifier of the archived case&quot;,  &quot;end_date&quot;:&quot;the date set when the case was archived&quot;,  &quot;startedBySubstitute&quot;:&quot;the id of the user&quot;,  &quot;sourceObjectId&quot;:&quot;the id of the case before it was archived&quot;  &quot;start&quot;:&quot;the stard date of the initial case&quot;,   &quot;state&quot;:&quot;the state of the archived case&quot;,   &quot;rootCaseId&quot;:&quot;the id of the case before it was archived&quot;,   &quot;started_by&quot;:&quot;id of the user who start the case&quot;,   &quot;archivedDate&quot;:&quot;the date set when the case was archived&quot;,   &quot;processDefinitionId&quot;:&quot;the id of the process related to this archived case&quot;,   &quot;last_update_date&quot;:&quot;the date of the last update done on the case&quot;,  &quot;searchIndex1Label&quot;:&quot;the 1st search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex2Label&quot;:&quot;the 2nd search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex3Label&quot;:&quot;the 3rd search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex4Label&quot;:&quot;the 4th search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex5Label&quot;:&quot;the 5th search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex1Value&quot;:&quot;the 1st search index value (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex2Value&quot;:&quot;the 2nd search index value (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex3Value&quot;:&quot;the 3rd search index value (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex4Value&quot;:&quot;the 4th search index value (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex5Value&quot;:&quot;the 5th search index value (from 6.5, in Subscription editions only)&quot;}MethodsThe methods used for this resource are:  GET - Read a resource or search for a resource  DELETE - Remove a resourceResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  started_by  startedBySubstitute  processDefinitionIdRead an archived caseYou can get an archived case by using its identifier. An archive case is linked to a case with the key.  URL/API/bpm/archivedCase/:archivedCaseId  MethodGET  Success ResponseA JSON representation of the archived case resource  Code: 200  Payload:{  &quot;id&quot;: &quot;9&quot;,  &quot;end_date&quot;: &quot;2014-10-22 10:57:00.299&quot;,  &quot;startedBySubstitute&quot;: &quot;4&quot;,  &quot;sourceObjectId&quot;: &quot;3&quot;,  &quot;start&quot;: &quot;2014-10-22 10:56:53.415&quot;,  &quot;state&quot;: &quot;completed&quot;,  &quot;rootCaseId&quot;: &quot;3&quot;,  &quot;started_by&quot;: &quot;4&quot;,  &quot;archivedDate&quot;: &quot;2014-10-22 10:57:00.299&quot;,  &quot;processDefinitionId&quot;: &quot;6054482369194211518&quot;,  &quot;last_update_date&quot;: &quot;2014-10-22 10:57:00.299&quot;  &quot;searchIndex1Label&quot;:&quot;case9SearchIndex1Label&quot;,  &quot;searchIndex2Label&quot;:&quot;case9SearchIndex2Label&quot;,  &quot;searchIndex3Label&quot;:&quot;case9SearchIndex3Label&quot;,  &quot;searchIndex4Label&quot;:&quot;case9SearchIndex4Label&quot;,  &quot;searchIndex5Label&quot;:&quot;case9SearchIndex5Label&quot;,  &quot;searchIndex1Value&quot;:&quot;case9SearchIndex1Value&quot;,  &quot;searchIndex2Value&quot;:&quot;case9SearchIndex2Value&quot;,  &quot;searchIndex3Value&quot;:&quot;case9SearchIndex3Value&quot;,  &quot;searchIndex4Value&quot;:&quot;case9SearchIndex4Value&quot;,  &quot;searchIndex5Value&quot;:&quot;case9SearchIndex5Value&quot;}Search archived casesYou can search cases.  URL/API/bpm/archivedCase  MethodGET  Data ParamsStandard search parameters are available.  o (order): available values are id, processDefinitionId, startedBy, startedBySubstitute, startDate, endDate, lastUpdate, archivedDate, sourceObjectId  d: extend resource response parameters of this resource are available.Success ResponseA JSON representation of an array of archived case resources  Code: 200  Payload:[  {&quot;id&quot;: &quot;3002&quot;,&quot;end_date&quot;: &quot;2014-10-22 15:21:10.129&quot;,&quot;startedBySubstitute&quot;: &quot;4&quot;,&quot;sourceObjectId&quot;: &quot;6&quot;,&quot;start&quot;: &quot;2014-10-22 11:47:28.859&quot;,&quot;state&quot;: &quot;completed&quot;,&quot;rootCaseId&quot;: &quot;6&quot;,&quot;started_by&quot;: &quot;4&quot;,&quot;archivedDate&quot;: &quot;2014-10-22 15:21:10.129&quot;,&quot;processDefinitionId&quot;: {  &quot;id&quot;: &quot;5652578116304089592&quot;,  &quot;icon&quot;: &quot;&quot;,  &quot;displayDescription&quot;: &quot;&quot;,  &quot;deploymentDate&quot;: &quot;2014-10-22 11:42:26.644&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;activationState&quot;: &quot;ENABLED&quot;,  &quot;name&quot;: &quot;données&quot;,  &quot;deployedBy&quot;: &quot;4&quot;,  &quot;displayName&quot;: &quot;données&quot;,  &quot;actorinitiatorid&quot;: &quot;4&quot;,  &quot;last_update_date&quot;: &quot;2014-10-22 11:42:45.672&quot;,  &quot;configurationState&quot;: &quot;RESOLVED&quot;,  &quot;version&quot;: &quot;2.0&quot;},&quot;last_update_date&quot;: &quot;2014-10-22 15:21:10.129&quot;,&quot;searchIndex1Label&quot;:&quot;case6SearchIndex1Label&quot;,&quot;searchIndex2Label&quot;:&quot;case6SearchIndex2Label&quot;,&quot;searchIndex3Label&quot;:&quot;case6SearchIndex3Label&quot;,&quot;searchIndex4Label&quot;:&quot;case6SearchIndex4Label&quot;,&quot;searchIndex5Label&quot;:&quot;case6SearchIndex5Label&quot;,&quot;searchIndex1Value&quot;:&quot;case6SearchIndex1Value&quot;,&quot;searchIndex2Value&quot;:&quot;case6SearchIndex2Value&quot;,&quot;searchIndex3Value&quot;:&quot;case6SearchIndex3Value&quot;,&quot;searchIndex4Value&quot;:&quot;case6SearchIndex4Value&quot;,&quot;searchIndex5Value&quot;:&quot;case6SearchIndex5Value&quot;  }, {&quot;id&quot;: &quot;9&quot;,&quot;end_date&quot;: &quot;2014-10-22 10:57:00.299&quot;,&quot;startedBySubstitute&quot;: &quot;4&quot;,&quot;sourceObjectId&quot;: &quot;3&quot;,&quot;start&quot;: &quot;2014-10-22 10:56:53.415&quot;,&quot;state&quot;: &quot;completed&quot;,&quot;rootCaseId&quot;: &quot;3&quot;,&quot;started_by&quot;: &quot;4&quot;,&quot;archivedDate&quot;: &quot;2014-10-22 10:57:00.299&quot;,&quot;processDefinitionId&quot;: {  &quot;id&quot;: &quot;6054482369194211518&quot;,  &quot;icon&quot;: &quot;&quot;,  &quot;displayDescription&quot;: &quot;&quot;,  &quot;deploymentDate&quot;: &quot;2014-10-22 10:55:24.219&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;activationState&quot;: &quot;ENABLED&quot;,  &quot;name&quot;: &quot;PoolTestEntry&quot;,  &quot;deployedBy&quot;: &quot;4&quot;,  &quot;displayName&quot;: &quot;PoolTestEntry&quot;,  &quot;actorinitiatorid&quot;: &quot;1&quot;,  &quot;last_update_date&quot;: &quot;2014-10-22 10:55:31.178&quot;,  &quot;configurationState&quot;: &quot;RESOLVED&quot;,  &quot;version&quot;: &quot;1.0&quot;},&quot;last_update_date&quot;: &quot;2014-10-22 10:57:00.299&quot;,&quot;searchIndex1Label&quot;:&quot;case9SearchIndex1Label&quot;,&quot;searchIndex2Label&quot;:&quot;case9SearchIndex2Label&quot;,&quot;searchIndex3Label&quot;:&quot;case9SearchIndex3Label&quot;,&quot;searchIndex4Label&quot;:&quot;case9SearchIndex4Label&quot;,&quot;searchIndex5Label&quot;:&quot;case9SearchIndex5Label&quot;,&quot;searchIndex1Value&quot;:&quot;case9SearchIndex1Value&quot;,&quot;searchIndex2Value&quot;:&quot;case9SearchIndex2Value&quot;,&quot;searchIndex3Value&quot;:&quot;case9SearchIndex3Value&quot;,&quot;searchIndex4Value&quot;:&quot;case9SearchIndex4Value&quot;,&quot;searchIndex5Value&quot;:&quot;case9SearchIndex5Value&quot;  }]Retrieve an archived case context  URL/API/bpm/archivedCase/:archivedCaseId/context  MethodGET  Success ResponseA context object  Code: 200  Payload:{&quot;myBusinessData_ref&quot;:{  &quot;name&quot;:&quot;myBusinessData&quot;,&quot;type&quot;:&quot;com.company.model.BusinessObject1&quot;,&quot;link&quot;:&quot;API/bdm/businessData/com.company.model.BusinessObject1/2&quot;,&quot;storageId&quot;:2,&quot;storageId_string&quot;:&quot;2&quot;  },  &quot;myDocument_ref&quot;:{  &quot;id&quot;:1,&quot;processInstanceId&quot;:3,&quot;name&quot;:&quot;myDocument&quot;,&quot;author&quot;:104,&quot;creationDate&quot;:1434723950847,&quot;fileName&quot;:&quot;TestCommunity-1.0.bos&quot;,&quot;contentMimeType&quot;:null,&quot;contentStorageId&quot;:&quot;1&quot;,&quot;url&quot;:&quot;documentDownload?fileName=TestCommunity-1.0.bos&amp;amp;contentStorageId=1&quot;,&quot;description&quot;:&quot;&quot;,&quot;version&quot;:&quot;1&quot;,&quot;index&quot;:-1,&quot;contentFileName&quot;:&quot;TestCommunity-1.0.bos&quot;  }}Remove an archived caseYou can delete an archived case by using its identifier. An archived case is linked to a case with the key.  URL/API/bpm/archivedCase/:archivedCaseId  MethodDELETE  Success Response  Code: 200  CaseInfoDescriptionRetrieves information about a case. It returns counters for each flow node in the case, showing the number of flow node instances that are in completed, ready, or failed state. If there are no flow node instances in a given state, no counter is returned for that state for the flow node.IdentifierThe ID of the case (a long value).Representation{  &quot;id&quot;: &quot;case identifier&quot;,  &quot;flowNodeStatesCounters&quot;: {&quot;Flow Node name from Studio&quot;: {  &quot;completed&quot;: &quot;number of instance of the given Flow Node in completed state&quot;,  &quot;ready&quot;: &quot;number of instance of the given Flow Node in ready state&quot;,  &quot;failed&quot;: &quot;number of instance of the given Flow Node in failed state&quot;,}  }}MethodsThe method used for this resource is:  GET - Read a resourceRetrieve counters for case flow nodesRetrieve information about the flow nodes of the case identified by the given ID.  URL/API/bpm/caseInfo/:id  MethodGET  Success ResponseThe JSON representation of the case information  Code: 200  Payload:In this example, counters are returned for two flow nodes in the case, Step1 and Step3. For Step3, there are no flow nodes in ready state, so no counter is returned for this.{  &quot;id&quot;: &quot;123&quot;,  &quot;flowNodeStatesCounters&quot;: {&quot;Step1&quot;: {  &quot;completed&quot;: &quot;2&quot;,  &quot;ready&quot;: &quot;1&quot;,  &quot;executing&quot;: &quot;5&quot;},&quot;Step3&quot;: {  &quot;completed&quot;: &quot;10&quot;,  &quot;failed&quot;: &quot;2&quot;}  }}CaseCommentDescriptionRetrieves information about a case comment.Representation{  &quot;id&quot;: &quot;1&quot;,  &quot;content&quot;: &quot;the comment content&quot;,  &quot;tenantId&quot;: &quot;the id of the tenant the comment is associated to&quot;,  &quot;processInstanceId&quot;: &quot;the process instance(case) the comment is associated to&quot;,  &quot;postDate&quot;: &quot;the comment creation date&quot;,  &quot;userId&quot;: &quot;the user that created the comment&quot;}MethodsThe method used for this resource is:  GET - Search for comments  POST - Add a commentResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  userIdNote: if the userId is not provided as a deploy parameter, the userId property of a comment is filled with the system user :{  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;userName&quot;: &quot;System&quot;}Create a comment  URL/API/bpm/comment  MethodPOST  Request PayloadThe process instance (case) id and the comment content, in JSON{  &quot;processInstanceId&quot;:&quot;5777042023671752656&quot;,  &quot;content&quot;: &quot;The case has been started&quot;}Success ResponseThe JSON representation of a case comment  Code: 200  Payload:{  &quot;content&quot;: &quot;test&quot;,  &quot;tenantId&quot;: &quot;1&quot;,  &quot;id&quot;: &quot;20005&quot;,  &quot;processInstanceId&quot;: &quot;1&quot;,  &quot;postDate&quot;: &quot;2016-06-16 14:51:33.053&quot;,  &quot;userId&quot;: &quot;30&quot;}Search for comments  URL/API/bpm/commentExample: /API/bpm/comment?p=0&amp;amp;c=10&amp;amp;o=postDate%20DESC&amp;amp;f=processInstanceId%3d1&amp;amp;d=userId  MethodGET  Data ParamsStandard search parameters are available.  o: you can sort on the postDate  f: filter of the search. Available filters are :  supervisor_id  user_id  processInstanceIdYou cannot use supervisor_id and user_id filter at the same time.  Success ResponseJSON representations of matching comments  Code: 200  Payload:[  {&quot;content&quot;: &quot;Need to review the last inputs of this case&quot;,&quot;tenantId&quot;: &quot;1&quot;,&quot;id&quot;: &quot;20005&quot;,&quot;processInstanceId&quot;: &quot;1&quot;,&quot;postDate&quot;: &quot;2016-06-16 14:51:33.053&quot;,&quot;userId&quot;: {  &quot;last_connection&quot;: &quot;2016-06-16 14:49:37.067&quot;,  &quot;created_by_user_id&quot;: &quot;-1&quot;,  &quot;creation_date&quot;: &quot;2016-06-15 11:37:22.709&quot;,  &quot;id&quot;: &quot;30&quot;,  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;enabled&quot;: &quot;true&quot;,  &quot;title&quot;: &quot;Mr&quot;,  &quot;manager_id&quot;: &quot;0&quot;,  &quot;job_title&quot;: &quot;Chief Executive Officer&quot;,  &quot;userName&quot;: &quot;william.jobs&quot;,  &quot;lastname&quot;: &quot;Jobs&quot;,  &quot;firstname&quot;: &quot;William&quot;,  &quot;password&quot;: &quot;&quot;,  &quot;last_update_date&quot;: &quot;2016-06-15 11:37:22.709&quot;}  }, {&quot;content&quot;: &quot;The task &quot;Etape1&quot; is now assigned to walter.bates&quot;,&quot;tenantId&quot;: &quot;1&quot;,&quot;id&quot;: &quot;20003&quot;,&quot;processInstanceId&quot;: &quot;1&quot;,&quot;postDate&quot;: &quot;2016-06-15 12:36:18.541&quot;,&quot;userId&quot;: {  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;userName&quot;: &quot;System&quot;}  }]ArchivedCaseCommentDescriptionRetrieves information about the comment of an archived case.Representation{  &quot;id&quot;: &quot;1&quot;,  &quot;content&quot;: &quot;the comment content&quot;,  &quot;processInstanceId&quot;: &quot;the process instance(case) the comment is associated to&quot;,  &quot;postDate&quot;: &quot;the comment creation date&quot;,  &quot;archivedDate&quot;: &quot;the date set when the case was archived&quot;  &quot;userId&quot;: &quot;the user that created the comment&quot;}MethodsThe method used for this resource is:  GET - Search for archived commentsResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  userIdNote: if the userId is not provided as a deploy parameter, the userId property of a comment is filled with the system user :{  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;userName&quot;: &quot;System&quot;}Search for archived comments  URL/API/bpm/archivedCommentExample: /API/bpm/archivedComment?p=0&amp;amp;c=10&amp;amp;o=postDate%20DESC&amp;amp;f=processInstanceId%3d1&amp;amp;d=userId  MethodGET  Data ParamsStandard search parameters are available.  o: you can sort on the postDate and archivedDate  f: filter of the search. Available filters are :  supervisor_id  user_id  processInstanceIdYou cannot use supervisor_id and user_id filter at the same time.  Success ResponseJSON representations of matching comments  Code: 200  Payload:[  {&quot;content&quot;: &quot;Need to review the last inputs of this case&quot;,&quot;id&quot;: &quot;20005&quot;,&quot;processInstanceId&quot;: &quot;1&quot;,&quot;postDate&quot;: &quot;2016-06-16 14:51:33.053&quot;,&quot;archivedDate&quot;: &quot;2016-06-17 10:18:24.723&quot;,&quot;userId&quot;: {  &quot;last_connection&quot;: &quot;2016-06-16 14:49:37.067&quot;,  &quot;created_by_user_id&quot;: &quot;-1&quot;,  &quot;creation_date&quot;: &quot;2016-06-15 11:37:22.709&quot;,  &quot;id&quot;: &quot;30&quot;,  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;enabled&quot;: &quot;true&quot;,  &quot;title&quot;: &quot;Mr&quot;,  &quot;manager_id&quot;: &quot;0&quot;,  &quot;job_title&quot;: &quot;Chief Executive Officer&quot;,  &quot;userName&quot;: &quot;william.jobs&quot;,  &quot;lastname&quot;: &quot;Jobs&quot;,  &quot;firstname&quot;: &quot;William&quot;,  &quot;password&quot;: &quot;&quot;,  &quot;last_update_date&quot;: &quot;2016-06-15 11:37:22.709&quot;}  }, {&quot;content&quot;: &quot;The task &quot;Etape1&quot; is now assigned to walter.bates&quot;,&quot;id&quot;: &quot;20003&quot;,&quot;processInstanceId&quot;: &quot;1&quot;,&quot;postDate&quot;: &quot;2016-06-15 12:36:18.541&quot;,&quot;archivedDate&quot;: &quot;2016-06-17 10:18:24.723&quot;,&quot;userId&quot;: {  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;userName&quot;: &quot;System&quot;}  }]ProcessProcessDescriptionDeploy and manage process definitions](/bonita_doc/bonita/7.7/application-and-process-design/application-and-process-design-overview/key-concepts). In addition, you can instantiate a process, which will create a new process instance ().IdentifierThe ID of the process definition (a long value).Representation{  &quot;id&quot;:&quot;the identifier of the process definition (long)&quot;,  &quot;icon&quot;:&quot;icon path (string)&quot;,  &quot;displayDescription&quot;:&quot;the human readable activity description (string)&quot;,  &quot;deploymentDate&quot;:&quot;the date when the process definition was deployed (date)&quot;,  &quot;description&quot;:&quot;the process description (string)&quot;,  &quot;activationState&quot;:&quot;the state of the process definition (ENABLED or DISABLED)&quot;,  &quot;name&quot;:&quot;the process name (string)&quot;,  &quot;deployedBy&quot;:&quot;the id of the user who deployed the process (integer)&quot;,  &quot;displayName&quot;:&quot;the human readable process description (string)&quot;,  &quot;actorinitiatorid&quot;:&quot;the id of the actor that can initiate cases of the process&quot;,  &quot;last_update_date&quot;:&quot;the date when the process definition was last updated (date)&quot;,  &quot;configurationState&quot;:&quot;the configuration state of the process (UNRESOLVED or RESOLVED)&quot;,  &quot;version&quot;:&quot;the version of the process (string)&quot;}MethodsThe methods used for this resource are:  POST - Create a process  GET - Read a process or search for a process  PUT - Update a processResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  deployedByDeploy a process definitionA process resource is created using the content of a .bar file that has previously been uploaded, using the processUpload servlet http://.../bonita/portal/processUpload,to get the process archive path.  URL/API/bpm/process  MethodPOST  Request Payload{  &quot;fileupload&quot;: &quot;D:bonita-studioBonitaSubscription-7.6.3workspacetomcatbonitaclienttenants1tmptmp_4431838172282406107.bar&quot; // the process archive path}Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;8216934689697197160&quot;,&quot;icon&quot;:&quot;&quot;,&quot;displayDescription&quot;:&quot;&quot;,  &quot;deploymentDate&quot;:&quot;2015-01-02, 15:04:30.527&quot;  &quot;description&quot;:&quot;&quot;,  &quot;activationState&quot;:&quot;DISABLED&quot;,  &quot;name&quot;:&quot;Pool&quot;,&quot;deployedBy&quot;:&quot;4&quot;,  &quot;displayName&quot;:&quot;Pool&quot;,  &quot;actorinitiatorid&quot;:&quot;3&quot;,   &quot;last_update_date&quot;:&quot;2015-01-02 5:04:30.587&quot;,  &quot;configurationState&quot;:&quot;RESOLVED&quot;,&quot;version&quot;:&quot;1.0&quot;}Read a processRead a process definition  URL/API/bpm/process/:processId  MethodGET  Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;1&quot;,  &quot;icon&quot;:&quot;/default/process.png&quot;,  &quot;displayDescription&quot;:&quot;process description&quot;,  &quot;deploymentDate&quot;:&quot;2015-01-02 14:21:18.421&quot;,  &quot;description&quot;:&quot;another process description&quot;,  &quot;activationState&quot;:&quot;ENABLED&quot;,  &quot;name&quot;:&quot;Pool1&quot;,  &quot;deployedBy&quot;:&quot;2&quot;,  &quot;displayName&quot;:&quot;Pool1&quot;,  &quot;actorinitiatorid&quot;:&quot;2&quot;,  &quot;last_update_date&quot;:&quot;2015-01-02 14:21:18.529&quot;,  &quot;configurationState&quot;:&quot;RESOLVED&quot;,  &quot;version&quot;:&quot;1.0&quot;}Update a processYou can update the following fields of a process definition:  displayDescription  displayName  activationState (to toggle between the possible values, DISABLED and ENABLED)URL/API/bpm/process/:processId  MethodPUT  Request PayloadThe fields to be updated, in JSON{  &quot;displayName&quot;:&quot;Leave booking process&quot;}Success ResponseA process in JSON  Code: 200  Payload:{  &quot;id&quot;:&quot;1&quot;,  &quot;icon&quot;:&quot;/default/process.png&quot;,  &quot;displayDescription&quot;:&quot;process description&quot;,  &quot;deploymentDate&quot;:&quot;2015-01-02 14:21:18.421&quot;,  &quot;description&quot;:&quot;another process description&quot;,  &quot;activationState&quot;:&quot;ENABLED&quot;,  &quot;name&quot;:&quot;Pool1&quot;,  &quot;deployedBy&quot;:&quot;2&quot;,  &quot;displayName&quot;:&quot;Leave booking process&quot;,  &quot;actorinitiatorid&quot;:&quot;2&quot;,  &quot;last_update_date&quot;:&quot;2015-02-23 14:29:02.249&quot;,  &quot;configurationState&quot;:&quot;RESOLVED&quot;,  &quot;version&quot;:&quot;1.0&quot;}Search for a processSearch for processes that match the search criteria.  URL/API/bpm/processExample:  MethodGET  Data ParamsStandard search parameters are available.  s: search on “name”, “displayName” or “version”  o: can order by “name”, “version”, “deploymentDate”, “deployedBy”, “activationState”, “configurationState”, “processId”, “displayName”, “lastUpdateDate”, “categoryId”, “label”  f: can filter on “name”, “version”, “deploymentDate”, “deployedBy”, “activationState” with the value DISABLED or ENABLED, “configurationState” with the value UNRESOLVED, or RESOLVED, “processId”, “displayName”, “lastUpdateDate”, “categoryId”, “label”, “supervisor_id”  d: extend resource response parameters of this resource are available.Success ResponseA JSON representation of the matched processes.  Code: 200  Retrieve the design for a processProcess design can be retrived client side.  URL/API/bpm/process/:processId/design  MethodGET  Success ResponseThe process design object. The JSON returned is a representation of the DesignProcessDefinition instance of the given process id.  Code: 200  Instantiate a processRetrieve the instantiation contract for a processProcess instantiation contract elements can be retrived client side.  URL/API/bpm/process/:processId/contract  MethodGET  Success ResponseThe task contract elements  Code: 200  Payload:{&quot;constraints&quot;:[  {&quot;name&quot;:&quot;ticket_account&quot;,  &quot;expression&quot;:&quot;ticket_account!=null &amp;amp;&amp;amp; !ticket_account.toString().isEmpty()&quot;,  &quot;explanation&quot;:&quot;input ticket_account is mandatory&quot;,  &quot;inputNames&quot;:[  &quot;ticket_account&quot;  ],  &quot;constraintType&quot;:&quot;MANDATORY&quot;},{&quot;name&quot;:&quot;ticket_description&quot;,  &quot;expression&quot;:&quot;ticket_description!=null &amp;amp;&amp;amp; !ticket_description.toString().isEmpty()&quot;,  &quot;explanation&quot;:&quot;input ticket_description is mandatory&quot;,  &quot;inputNames&quot;:[  &quot;ticket_description&quot;  ],  &quot;constraintType&quot;:&quot;MANDATORY&quot;},{&quot;name&quot;:&quot;ticket_subject&quot;,  &quot;expression&quot;:&quot;ticket_subject!=null &amp;amp;&amp;amp; !ticket_subject.toString().isEmpty()&quot;,  &quot;explanation&quot;:&quot;input ticket_subject is mandatory&quot;,  &quot;inputNames&quot;:[  &quot;ticket_subject&quot;  ],  &quot;constraintType&quot;:&quot;MANDATORY&quot;}  ],  &quot;inputs&quot;:[  {&quot;description&quot;:null,  &quot;name&quot;:&quot;ticket_account&quot;,  &quot;multiple&quot;:false,  &quot;type&quot;:&quot;TEXT&quot;  &quot;inputs&quot;:[]},{&quot;description&quot;:null,  &quot;name&quot;:&quot;ticket_description&quot;,  &quot;multiple&quot;:false,  &quot;type&quot;:&quot;TEXT&quot;  &quot;inputs&quot;:[]},{&quot;description&quot;:null,  &quot;name&quot;:&quot;ticket_subject&quot;,  &quot;multiple&quot;:false,  &quot;type&quot;:&quot;TEXT&quot;  &quot;inputs&quot;:[]}  ]}Start a process using an instantiation contractThis method will create a new process instance (case)  URL/API/bpm/process/:processId/instantiation  MethodPOST  Request PayloadContract element values{&quot;ticket_account&quot;:&quot;CustomerA&quot;,  &quot;ticket_description&quot;:&quot;issue description&quot;,  &quot;ticket_subject&quot;:&quot;Issue 1&quot;}Success ResponseThe created case ID 201 OK or a contract violation explanation in case of a 400 Bad request  Code: 201  Payload:{&quot;caseId&quot;:&quot;125713789879465465&quot;}  Error Response  Code: 400  Payload:{&quot;exception&quot;:&quot;class org.bonitasoft.engine.bpm.contract.ContractViolationException&quot;,  &quot;message&quot;:&quot;USERNAME=walter.bates | Contract is not valid: &quot;,  &quot;explanations&quot;:[  &quot;Expected input [ticket_account] is missing&quot;,&quot;Expected input [ticket_description] is missing&quot;,&quot;Expected input [ticket_subject] is missing&quot;  ]}Diagram (Subscription editions only)DescriptionUse the diagram resource to access the process diagram xml representation. This is necessary for drawing the diagram.IdentifierSimple, the ID of the process for which you want download the diagramRepresentationThe XML encoding of the diagram.MethodsThe methods used for this resource are:  GET - Retrieve the XML definition of the diagramRetrieve a process diagram xml file  URL/API/bpm/diagram/:processId  MethodGET  Success ResponseRaw XML file containing the diagram definition  Code: 200  ProcessParameterDescriptionA process parameter is a variable attached to process. The parameter value is set at deployment, and applies to all cases of the process. This feature is available in Enterprise, Performance, Efficiency, and Teamwork editions.IdentifierA compound identifier constructed from process_id/name where process_id is a long value and name is the name of the process parameter.Representation{  &quot;process_id&quot;:&quot;the identifier of the process definition&quot;,  &quot;process_name&quot;:&quot;the name of the related process&quot;,   &quot;description&quot;:&quot;the description of the parameter&quot;,   &quot;name&quot;:&quot;the name of the parameter&quot;,   &quot;value&quot;:&quot;the value of the parameter&quot;,   &quot;process_version&quot;:&quot;the version of the process&quot;,   &quot;type&quot;:&quot;the type of the parameter&quot; }MethodsThe methods used for this resource are:  GET - Read a resource or search for a resource  PUT - Update a resourceRead a processParameterYou can read a process parameter using its compound id (process_id/name)  URL/API/bpm/processParameter/:processId/:name  MethodGET  Request PayloadSuccess ResponseProcess parameter resource  Code: 200  Payload:{  &quot;process_id&quot;: &quot;4880205209556178729&quot;,  &quot;process_name&quot;: &quot;myProcessName&quot;,  &quot;description&quot;: &quot;myProcessDescription&quot;,  &quot;name&quot;: &quot;myParameterName&quot;,  &quot;value&quot;: &quot;myParameterValue&quot;,  &quot;process_version&quot;: &quot;1.0&quot;,  &quot;type&quot;: &quot;java.lang.String&quot;}Search for a processParameterWhen you search for a processParameter, do not provide the process_version or process_name. They are needed only when you read a processParameter.  URL/API/bpm/processParameterExample: /API/bpm/processParameter?p=0&amp;amp;c=10&amp;amp;o=name%20ASC&amp;amp;f=process_id%3d4880205209556178729  MethodGET  Data ParamsStandard search parameters are available.  Success ResponseA array of process parameters  Code: 200  Payload:[  {&quot;process_id&quot;: &quot;4880205209556178729&quot;,&quot;process_name&quot;: &quot;&quot;,&quot;description&quot;: &quot;&quot;,&quot;name&quot;: &quot;d&quot;,&quot;value&quot;: &quot;n&quot;,&quot;process_version&quot;: &quot;&quot;,&quot;type&quot;: &quot;java.lang.String&quot;  }]Update a processParameter (Subscription edition only)You can update only a process parameter value using the API. If you specify values for other fields in the update request, they are ignored.  URL/API/bpm/processParameter/:processId/:name  MethodPUT  Request PayloadA process parameter resource{  &quot;value&quot;:&quot;myNewValue&quot;}Success Response  Code: 200  ProcessResolutionProblemDescriptionThis resource represents a problem in a process that needs to be resolved for the process to run. It can be an actor, a connector implementation, or a parameter (in the Enterprise, Performance, Efficiency, or Teamwork edition).Representation{  &quot;message&quot;:&quot;resolution problem&quot;,  &quot;resource_id&quot;:&quot;id of the unresolved resource&quot;,  &quot;target_type&quot;:&quot;the type of the unresolved resource (parameter, actor, or connector)&quot;}MethodsThe methods used for this resource are:  GET - search for process resolution problemsSearch for process resolution problemsThis is the only method supported by this resource. It should be used to list the problems that need to be solved before a process can be used.  URL/API/bpm/processResolutionProblemExample: /API/bpm/processResolutionProblem?p=0&amp;amp;c=100&amp;amp;f=process_id%3d8802838415753448432  MethodGET  Data ParamsStandard search parameters are available.Filtering on the process definition ID is mandatory.  f=process_id=&amp;lt;process_definition_id&amp;gt;: this filter is used to indicate the target processSuccess ResponseA list of process resolution problems in JSON or an empty response body if there is no problem for the process  Code: 200  Payload:[  {&quot;message&quot;:&quot;Actor &#39;Employee actor&#39; does not contain any members&quot;,&quot;resource_id&quot;:&quot;3&quot;,&quot;target_type&quot;:&quot;actor&quot;  },  {&quot;message&quot;:&quot;Parameter &#39;username&#39; is not set.&quot;,&quot;resource_id&quot;:&quot;&quot;,&quot;target_type&quot;:&quot;parameter&quot;  }]  Error Response  Code: 404 if the process does not exist  ProcessSupervisorDescriptionThe process supervisor has management rights over a process. He can configure and monitor it.You can give the ProcessSupervisor rights to some users by specifying a role and or a group, or a specific user.In order to be able to manage the processes he supervises in the portal, a user should also have the profile “Process Manager”.IdentifierA compound identifier constructed from process_id/user_id/role_id/group_id where all Ids are long values.Representation{  &quot;process_id&quot;:&quot;Id of the process&quot;,  &quot;role_id&quot;:&quot;Id of role, or -1 if the supervisor type is not role or membership&quot;,  &quot;group_id&quot;:&quot;Id of group, or -1 if the supervisor type is not group or membership&quot;,  &quot;user_id&quot;:&quot;Id of user, or -1 if the supervisor type is not user&quot;}Methods  POST - Add a process supervisor  GET - Search for process supervisors  DELETE - Remove a process supervisorResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  role_id  group_id  user_idSearch for process supervisors of a given type (user, group, role or membership)  URL/API/bpm/processSupervisorExample: Get the supervisors of type User for the process 8040901857674754544: API/bpm/processSupervisor?c=5&amp;amp;d=user_id&amp;amp;f=process_id%3D8040901857674754544&amp;amp;f=user_id%3D&amp;gt;0&amp;amp;f=group_id%3D-1&amp;amp;f=role_id%3D-1&amp;amp;p=0  MethodGET  Data ParamsStandard search parameters are available.  f: filter of the search, you need to specify the process_id, and then the user_id, group_id and role_id with one of them (two if you want to filter on group and role) set to &amp;gt;0 and the other ones set to -1. E.g.: f=process_id%3D8040901857674754544&amp;amp;f=user_id%3D&amp;gt;0&amp;amp;f=group_id%3D-1&amp;amp;f=role_id%3D-1  d: extend resource response parameters of this resource are available.Success ResponseJSON representations of matching process supervisors  Code: 200  Payload:[ { &quot;process_id&quot;:&quot;8040901857674754544&quot;, &quot;user_id&quot;:{ &quot;firstname&quot;:&quot;April&quot;,   &quot;icon&quot;:&quot;icons/default/icon_user.png&quot;,   &quot;creation_date&quot;:&quot;2017-09-07 16:44:38.321&quot;,   &quot;userName&quot;:&quot;april.sanchez&quot;,   &quot;title&quot;:&quot;Mrs&quot;,   &quot;created_by_user_id&quot;:&quot;-1&quot;,   &quot;enabled&quot;:&quot;true&quot;,   &quot;lastname&quot;:&quot;Sanchez&quot;,   &quot;last_connection&quot;:&quot;&quot;,   &quot;manager_id&quot;:&quot;3&quot;,   &quot;id&quot;:&quot;2&quot;,   &quot;job_title&quot;:&quot;Compensation specialist&quot;,   &quot;last_update_date&quot;:&quot;2017-09-07 16:44:38.321&quot; }, &quot;role_id&quot;:&quot;-1&quot;, &quot;group_id&quot;:&quot;-1&quot; }, { &quot;process_id&quot;:&quot;8040901857674754544&quot;, &quot;user_id&quot;:{ &quot;firstname&quot;:&quot;Anthony&quot;,   &quot;icon&quot;:&quot;icons/default/icon_user.png&quot;,   &quot;creation_date&quot;:&quot;2017-09-07 16:44:38.456&quot;,   &quot;userName&quot;:&quot;anthony.nichols&quot;,   &quot;title&quot;:&quot;Mr&quot;,   &quot;created_by_user_id&quot;:&quot;-1&quot;,   &quot;enabled&quot;:&quot;true&quot;,   &quot;lastname&quot;:&quot;Nichols&quot;,   &quot;last_connection&quot;:&quot;&quot;,   &quot;manager_id&quot;:&quot;17&quot;,   &quot;id&quot;:&quot;18&quot;,   &quot;job_title&quot;:&quot;Account manager&quot;,   &quot;last_update_date&quot;:&quot;2017-09-07 16:44:38.456&quot; }, &quot;role_id&quot;:&quot;-1&quot;, &quot;group_id&quot;:&quot;-1&quot; } ]Add a process SupervisorYou can assign a process to a user, a group, a role, or a membership (role and group). Note that in order to be able to manage the processes he supervises in the portal, a user should also have the profile “Process Manager”.  URL/API/bpm/processSupervisor  MethodPOST  Request PayloadThe process definition id and either the user, role and/or group id.Add a process supervisor of type User  {&quot;process_id&quot;:&quot;5777042023671752656&quot;,&quot;user_id&quot;:&quot;11&quot;  }Add a process supervisor of type Group  {&quot;process_id&quot;:&quot;5777042023671752656&quot;,&quot;group_id&quot;:&quot;2&quot;  }Add a process supervisor of type Role  {&quot;process_id&quot;:&quot;5777042023671752656&quot;,&quot;role_id&quot;:&quot;114&quot;  }Add a process supervisor of type Membership  {&quot;process_id&quot;:&quot;5777042023671752656&quot;,&quot;role_id&quot;:&quot;11&quot;,&quot;group_id&quot;:&quot;2&quot;  }  Success ResponseThe JSON representation of a process supervisor resource  Code: 200  Payload:{  &quot;process_id&quot;:&quot;5777042023671752656&quot;,  &quot;user_id&quot;:&quot;11&quot;,  &quot;role_id&quot;:&quot;-1&quot;,  &quot;group_id&quot;:&quot;-1&quot;}Delete a process supervisorYou can delete a process supervisor by specifying its compound Id in the body of the request (process_id/user_id/role_id/group_id)  URL/API/bpm/processSupervisor  MethodDELETE  Request Payload  [&quot;8040901857674754544/11/-1/-1&quot;]Success Response  Code: 200  Delete process supervisors in bulk  URL/API/bpm/processSupervisor  MethodDELETE  Request PayloadList of process supervisors Ids to delete  [&quot;8040901857674754544/11/-1/-1&quot;,&quot;8040901857674754544/12/-1/-1&quot;]Success Response  Code: 200  ConnectorsProcessConnectorDependencyDescriptionUse the processConnectorDependency resource to access connector dependencies.IdentifierThe object itselfRepresentation{  &quot;connector_version&quot;:&quot;&amp;lt;connector version&amp;gt;&quot;,  &quot;connector_process_id&quot;:&quot;&amp;lt;process id&amp;gt;&quot;,  &quot;filename&quot;:&quot;&amp;lt;filename representing the connector&amp;gt;&quot;,  &quot;connector_name&quot;:&quot;&amp;lt;connector name&amp;gt;&quot;}MethodsThe methods used for this resource are:  GET - Search for connector dependenciesSearch for connector dependenciesUse a GET method with filters to search for connector dependencies.  URL/API/bpm/processConnectorDependencyExample: Get connector dependencies of the email connector (version 1.0.0) of the process with id = 4971555129176049183: /API/bpm/processConnectorDependency?c=10&amp;amp;p=0&amp;amp;f=connector_process_id=4971555129176049183&amp;amp;f=connector_name=email&amp;amp;f=connector_version=1.0.0  MethodGET  Data ParamsStandard search parameters are available.Mandatory filters: connector_process_id, connector_name, connector_version  Success Response  Code: 200  Payload:[  {&quot;connector_version&quot;:&quot;1.0.0&quot;,&quot;connector_process_id&quot;:&quot;4971555129176049183&quot;,&quot;filename&quot;:&quot;bonita-connector-email-impl-1.0.12.jar&quot;,&quot;connector_name&quot;:&quot;email&quot;  }, {&quot;connector_version&quot;:&quot;1.0.0&quot;,&quot;connector_process_id&quot;:&quot;4971555129176049183&quot;,&quot;filename&quot;:&quot;mail-1.4.5.jar&quot;,&quot;connector_name&quot;:&quot;email&quot;  }]ConnectorFailureDescriptionError message and stackTrace recorded when a connector fails during a process execution. Enterprise and Performance editions only.IdentifierThe ID of the connector failure (a long value).Representation{  &quot;errorMessage&quot;:&quot;the message of the connector failure&quot;,  &quot;connectorInstanceId&quot;:&quot;the ID of the connector instance (see connectorInstance resource documentation)&quot;,  &quot;errorStackTrace&quot;:&quot;the stack trace of the error&quot;}MethodsThe methods used for this resource are:  GET - Read a connector failureRead a connector failureRetrieve the information regarding the failure of the connector execution.  URL/API/bpm/connectorFailure/:connectorFailureId  MethodGET  Success ResponseA connectorFailure resource as JSON  Code: 200  Payload:{  &quot;errorMessage&quot;:&quot;Error while executing the groovy script&quot;,  &quot;connectorInstanceId&quot;:&quot;5&quot;,  &quot;errorStackTrace&quot;:&quot;org.bonitasoft.engine.core.connector.exception.SConnectorException: PROCESS_DEFINITION_ID=8030057793979348308 | PROCESS_NAME=Pool1 | PROCESS_VERSION=1.0 | PROCESS_INSTANCE_ID=5 | ROOT_PROCESS_INSTANCE_ID=5 | FLOW_NODE_DEFINITION_ID=-6089366458284481881 | FLOW_NODE_INSTANCE_ID=12 | FLOW_NODE_NAME=Étape1 | CONNECTOR_DEFINITION_IMPLEMENTATION_CLASS_NAME=expression execution connector | CONNECTOR_INSTANCE_ID=5 | org.bonitasoft.engine.connector.exception.SConnectorException: java.util.concurrent.ExecutionException: java.lang.Exception: Error while executing the groovy scriptntat org.bonitasoft.engine.core.connector.impl.ConnectorServiceImpl.executeConnectorInClassloader(ConnectorServiceImpl.java:332)&quot;}ConnectorInstanceDescriptionRetrieve information about connector instances attached to a process or a flow node.RepresentationReturns a JSON array of connector details:{  &quot;containerType&quot;:&quot;string&quot;,  &quot;connectorId&quot;:&quot;string&quot;,  &quot;id&quot;:&quot;number&quot;,  &quot;name&quot;:&quot;string&quot;,  &quot;activationEvent&quot;:&quot;string&quot;,  &quot;state&quot;:&quot;string&quot;,  &quot;containerId&quot;:&quot;number&quot;,  &quot;version&quot;:&quot;string&quot;}MethodsThe methods used for this resource are:  GET - returns a JSON array of connector detailsRetrieve a list of connector instances attached to a process or a flow node  URL/API/bpm/connectorInstanceExample:  Get information about connectors attached to a flow node with instanceId 15 :/API/bpm/connectorInstance?p=0&amp;amp;c=10&amp;amp;f=containerId%3d15  Get information about connectors attached to a process instance with instanceId 4781948523999597477: /API/bpm/connectorInstance?p=0&amp;amp;c=10&amp;amp;f=containerId%3d4781948523999597477MethodGET  Data ParamsStandard search parameters are available.  f=containerId%3d{id}. The container ID of the process or flow node.Success ResponseA list of connector details  Code: 200  Payload:Retrieve information about connectors attached to a flow node[  {&quot;containerType&quot;:&quot;flowNode&quot;,&quot;connectorId&quot;:&quot;scripting-groovy-script&quot;,&quot;id&quot;:&quot;3&quot;,  &quot;name&quot;:&quot;hello world&quot;,&quot;activationEvent&quot;:&quot;ON_FINISH&quot;,&quot;state&quot;:&quot;TO_BE_EXECUTED&quot;,&quot;containerId&quot;:&quot;15&quot;,&quot;version&quot;:&quot;1.0.0&quot;  },  {&quot;containerType&quot;:&quot;flowNode&quot;,&quot;connectorId&quot;:&quot;webservice&quot;,&quot;id&quot;:&quot;4&quot;,&quot;name&quot;:&quot;webService&quot;,&quot;activationEvent&quot;:&quot;ON_FINISH&quot;,&quot;state&quot;:&quot;TO_BE_EXECUTED&quot;,&quot;containerId&quot;:&quot;15&quot;,&quot;version&quot;:&quot;1.0.0&quot;  }]Retrieve information about connectors attached to a process instance[  {&quot;containerType&quot;:&quot;process&quot;,&quot;connectorId&quot;:&quot;database-access&quot;,&quot;id&quot;:&quot;8&quot;,&quot;name&quot;:&quot;my connector&quot;,&quot;activationEvent&quot;:&quot;ON_FINISH&quot;,&quot;state&quot;:&quot;TO_BE_EXECUTED&quot;,&quot;containerId&quot;:&quot;4781948523999597477&quot;,&quot;version&quot;:&quot;1.0.0&quot;  }]ArchivedConnectorInstanceDescriptionRetrieve information about archived connector instances attached to an archived process or an archived flownode.Representation{  &quot;containerType&quot;:&quot;the type (string) of the containing activity&quot;,  &quot;connectorId&quot;:&quot;the connector id (string)&quot;,  &quot;id&quot;:&quot;the identifier (long) of the connector instance&quot;,  &quot;name&quot;:&quot;the name (string) of the connector&quot;,  &quot;activationEvent&quot;:&quot;the name (string) of hte event that activsted the connector instance&quot;,  &quot;state&quot;:&quot;the state (string) of the connector&quot;,  &quot;archivedDate&quot;: &quot;the date ((&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;)) when this connecctor instance was archived, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;containerId&quot;:&quot;the identifier (long) of the containing activity instance&quot;,  &quot;version&quot;:&quot;the connector version (string)&quot;}MethodsThe methods used for this resource are:  GET - returns a JSON array of archived connector detailsRetrieve a list of archived connector instances  URL/API/bpm/archivedConnectorInstanceExample: Get information about archived instances sort by containerId DESC Request url: /API/bpm/archivedConnectorInstance?p=0&amp;amp;c=10&amp;amp;o=containerId+DESC  MethodGET  Data ParamsStandard search parameters are available.  Success ResponseA list of connector details  Code: 200  Payload:[  {&quot;containerType&quot;:&quot;flowNode&quot;, &quot;connectorId&quot;:&quot;scripting-groovy-script&quot;, &quot;id&quot;:&quot;15&quot;, &quot;name&quot;:&quot;connector1&quot;, &quot;activationEvent&quot;:&quot;ON_ENTER&quot;, &quot;state&quot;:&quot;DONE&quot;,&quot;archivedDate&quot;:&quot;2014-12-01 16:39:19.041&quot;,&quot;containerId&quot;:&quot;34&quot;&quot;version&quot;:&quot;1.0.0&quot;  },  {&quot;containerType&quot;:&quot;process&quot;,&quot;connectorId&quot;:&quot;scripting-groovy-script&quot;,&quot;id&quot;:&quot;16&quot;,&quot;name&quot;:&quot;processConnector&quot;,&quot;activationEvent&quot;:&quot;ON_FINISH&quot;,&quot;state&quot;:&quot;DONE&quot;,&quot;archivedDate&quot;:&quot;2014-12-01 16:39:19.097&quot;&quot;containerId&quot;:&quot;33&quot;,&quot;version&quot;:&quot;1.0.0&quot;  }]Flow NodesFlow NodeDescriptionA flow node (gateway, event, or task) in an open instance of a process.IdentifierThe ID of the flowNode (a long).Representation{  &quot;id&quot;: &quot;the flow node id (long)&quot;,  &quot;displayDescription&quot;: &quot;the human readable flow node description (string)&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who really performed this flow node in case where a substitute did it, or 0 if the flow node was not performed by a substitute&quot;,  &quot;caseId&quot;: &quot;the case id (long) that is associated with this flow node&quot;,  &quot;parentCaseId&quot;: &quot;the parent case id (long) that is associated with this flow node&#39;s case&quot;,  &quot;rootCaseId&quot;: &quot;the root case initiator id (long) that is associated with this flow node&#39;s case&quot;,  &quot;processId&quot;: &quot;the process id (long) that is associated with this flow node&quot;,&quot;  &quot;rootContainerId&quot;: &quot;the root process id (long) of the root case that is associated with this flow node&quot;,  &quot;state&quot;: &quot;the current state of the flow node (string,  for example, ready, completed, failed)&quot;,  &quot;type&quot;: &quot;the flow node type (string)&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this flow node is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current flow node was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;executedBy&quot;: &quot;the id (long) of the user who executed the flow node, or 0 if the flow node has not been executed&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current flow node&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this flow node, null otherwise&quot;,  &quot;description&quot;: &quot;the flow node description (string)&quot;,  &quot;name&quot;: &quot;the flow node name (string)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this flow node reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;displayName&quot;: &quot;the display name (string) of this flow node&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this flow node is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this flow node was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;parentTaskId&quot; : &quot;in the case of a subtask, the parent task id (long)&quot;}MethodsThe methods used for this resource are:  GET - Read a flow node or search for a flow node  PUT - Replay a flow node (only in Enterprise and Performance editions)Response object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  processId: the id of the process that is associated with the activity  caseId: the id of the case that is associated with the activity  rootCaseId: the root case that is associated with this activity’s case  parentCaseId: the parent case that is associated with this activity’s case  rootContainerId: the root process of the root case that is associated with this activity  executedBy: the user who executed the activity  executedBySubstitute: the user who executed the activity for the executedBy user (only in Effeciency, Performance and Enterprise editions)  actorId: the actor that can execute this activity  assigned_id: the user this activity is assigned to  parentTaskId: in the case of a subtask, the parent taskGet a Flow NodeRetrieve the flow node information of the given id.  URL/API/bpm/flowNode/:id  MethodGET  Data ParamsThe deploy query parameter can be used.  Success ResponseThe JSON representation of the specified flownode  Code: 200  Payload:{  &quot;displayDescription&quot;: &quot;&quot;,  &quot;executedBySubstitute&quot;: &quot;0&quot;,  &quot;processId&quot;: &quot;7596769292810273901&quot;,  &quot;parentCaseId&quot;: &quot;1&quot;,  &quot;state&quot;: &quot;failed&quot;,  &quot;rootContainerId&quot;: &quot;1&quot;,  &quot;type&quot;: &quot;USER_TASK&quot;,  &quot;assigned_id&quot;: &quot;&quot;,  &quot;assigned_date&quot;: &quot;&quot;,  &quot;id&quot;: &quot;77456&quot;,  &quot;executedBy&quot;: &quot;0&quot;,  &quot;caseId&quot;: &quot;1&quot;,  &quot;priority&quot;: &quot;normal&quot;,  &quot;actorId&quot;: &quot;4&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;name&quot;: &quot;Step1&quot;,  &quot;reached_state_date&quot;: &quot;2014-12-10 08:59:47.884&quot;,  &quot;rootCaseId&quot;: &quot;1&quot;,  &quot;displayName&quot;: &quot;Step1&quot;,  &quot;dueDate&quot;: &quot;2014-12-10 09:59:47.855&quot;,  &quot;last_update_date&quot;: &quot;2014-12-10 08:59:47.884&quot;}Search among Flow NodesSearch for flow nodes using given parameters. Flow nodes in states completed, cancelled, or aborted are not retrieved. The search returns an array of flow nodes.  URL/API/bpm/flowNodeExample: Get all the active flow nodes named “Escalate”, ordering the results by state: /API/bpm/flowNode/?p=0&amp;amp;c=10&amp;amp;f=name%3dEscalate&amp;amp;o%3dstate  MethodGET  Data ParamsStandard search parameters are available.The following parameters are available:  o:  name  displayName  state  processDefinitionId  parentProcessInstanceId  parentActivityInstanceId (if the retrieved flow nodes are activities, order by parent activity id)  rootProcessInstanceId  lastUpdateDates: search on any field that can be used to order results  f:  name  state  processId  parentCaseId  rootCaseId  last_update_dated: extend resource response parameters of this resource are available.Success ResponseAn array of JSON representations of flow nodes  Code: 200  Change a Flow Node stateReplay the flow node. (only in Enterprise and Performance editions)  URL/API/bpm/flowNode/:id  MethodPUT  Request Payload{  &quot;state&quot; : &quot;replay&quot;}Success Response  Code: 200  ArchivedFlowNodeDescriptionA flow node (gateway or event or task) in an archived instance of a process.IdentifierThe ID of the flowNode (a long).Representation{  &quot;id&quot;: &quot;the flowNode id (long)&quot;,&quot;sourceObjectId&quot;: &quot;the original id of the flowNode before it was archived&quot;,  &quot;displayDescription&quot;: &quot;the human readable flowNode description (string)&quot;,   &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who really performed this flowNode in case where a substitute did it, or 0 if the flowNode was not performed by a substitute&quot;,   &quot;caseId&quot;: &quot;the case id (long) that is associated with this flowNode&quot;,   &quot;parentCaseId&quot;: &quot;the parent case id (long) that is associated with this flowNode&#39;s case&quot;,   &quot;rootCaseId&quot;: &quot;the root case initiator id (long) that is associated with this flowNode&#39;s case&quot;,   &quot;processId&quot;: &quot;the process id (long) that is associated with this flowNode&quot;,   &quot;rootContainerId&quot;: &quot;the root process id (long) of the root case that is associated with this flowNode&quot;,   &quot;state&quot;: &quot;the current state of the flowNode (string,  for example, ready, completed, failed)&quot;,   &quot;type&quot;: &quot;the flowNode type (string)&quot;,   &quot;assigned_id&quot;: &quot;the user id (long) that this flowNode is assigned to, or 0 if it is unassigned&quot;,   &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current flowNode was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,   &quot;executedBy&quot;: &quot;the id (long) of the user who executed the flowNode, or 0 if the flowNode has not been executed&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current flowNode&quot;,   &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this flowNode, null otherwise&quot;,   &quot;description&quot;: &quot;the flowNode description (string)&quot;,   &quot;name&quot;: &quot;the flowNode name (string)&quot;,   &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this flowNode reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,   &quot;displayName&quot;: &quot;the display name (string) of this flowNode&quot;,   &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this flowNode is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,   &quot;archivedDate&quot;: &quot;the date ((&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;)) when this flowNode was archived, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this flowNode was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,   &quot;parentTaskId&quot;: &quot;in the case of a subtask, the parent task id (long)&quot; }MethodsThe methods used for this resource are:  GET - Read a flow node or search for a flow nodeResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  processId: the id of the process that is associated with the activity  caseId: the id of the case that is associated with the activity  rootCaseId: the root case that is associated with this activity’s case  parentCaseId: the parent case that is associated with this activity’s case  rootContainerId: the root process of the root case that is associated with this activity  executedBy: the user who executed the activity  executedBySubstitute: the user who executed the activity for the executedBy user (only in Effeciency, Performance and Enterprise editions)  actorId: the actor that can execute this activity  assigned_id: the user this activity is assigned to  parentTaskId: in the case of a subtask, the parent taskGet a Flow NodeRetrieve the flow node information of the given id.  URL/API/bpm/archivedFlowNode/:id  MethodGET  Success ResponseThe JSON representation of the specified flownode  Code: 200  Search among flow nodesSearch for flow nodes using given parameters. Flow nodes in state completed, cancelled, aborted are not retrieved. It returns an array of flow nodes.  URL/API/bpm/archivedFlowNode  MethodGET  Data ParamsStandard search parameters are available.The following parameters are available:  o:  name  displayName  state  type  isTerminal  processId  caseId  archivedDates: search on any field that can be used to order results  f:  name  displayName  state  stateId  kind  terminal  processDefinitionId  parentProcessInstanceId  rootProcessInstanceId  parentActivityInstanceId  archivedDate  reachedStateDate  sourceObjectIdd: extend resource response parameters of this resource are available.Success ResponseThe JSON representation of the specified flownode  Code: 200  TimerEventTriggerDescriptionUse this resource to search for BPM timer event triggers. The result enables you to to update the date and time at which the trigger should next execute.IdentifierThe ID of the timer event trigger (a long value), retrieved through search (GET method).Representation{  &quot;id&quot;: &quot;the ID of the timer returned&quot;,  &quot;id_string&quot;: &quot;number&quot; (since 7.0.1)_,  &quot;eventInstanceId&quot;: &quot;the ID of the event instance to which this trigger is related&quot;,  &quot;eventInstanceId_string&quot;: &quot;number&quot; (since 7.0.1),  &quot;executionDate&quot;: &quot;the long value of the next execution date (number of milliseconds from January 1st, 1970 00:00:00)&quot;,  &quot;eventInstanceName&quot;: &quot;the name of the event instance to which this trigger is related&quot;}The string representation added in 7.0.1 for Long attributes is a workaround for the JavaScript integer spectrum issue.MethodsThe methods used for this resource are:  GET - Search for timer event triggers related to a case, with optional search options  PUT - Update a timer event trigger next execution dateSearch for timer event triggers related to a caseSearch for BPM timer event triggers.  URL/API/bpm/timerEventTriggerExample: /API/bpm/timerEventTrigger?caseId=4025&amp;amp;p=0&amp;amp;c=10&amp;amp;  MethodGET  Data Params  caseId: ID of the case (Process instance)Success ResponseA JSON representation of a list of timer event triggers, as described above  Code: 200  Payload:[  {&quot;id&quot;:4015,&quot;id_string&quot;:&quot;4015&quot;,&quot;eventInstanceId&quot;:2,&quot;eventInstanceId_string&quot;:&quot;2&quot;,&quot;executionDate&quot;:1413980484194,&quot;eventInstanceName&quot;:&quot;Minuterie1&quot;  }]Update a timer event trigger next execution dateSpecify the next execution date of a timer event trigger.  URL/API/bpm/timerEventTrigger/:timerEventTriggerID  MethodPUT  Request PayloadA JSON representation of a long value with attribute name “executionDate”{  &quot;executionDate&quot;: 1433980484194}Success ResponseThe actual long value corresponding to the next execution date of the timer event trigger, as a long value  Code: 200  Payload:1433980484194",
      "url": " /bonita/7.7/development/rest-api/bpm-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-7-development-rest-api-customuserinfo-api": {
      "title": "customuserinfo API",
      "content"     : "Customuserinfo APIDescriptionIdentifierParametersRepresentation of customuserinfo/definitionRepresentation of customuserinfo/valueRepresentation of customuserinfo/userMethodsAdd a new definitionDelete a definitionAssociate definitions to usersList the custom user informationSearch custom user infoDescriptionUse the customuserinfo API for managing custom user definitions. Three resources are used: customuserinfo/definition, customuserinfo/value, and customuserinfo/user.IdentifierSimple, the ID of the object (a long value)ParametersNoneRepresentation of customuserinfo/definition{  &quot;id&quot;:&quot;_id of definition_&quot;,  &quot;description&quot;:&quot;_definition description_&quot;,  &quot;name&quot;:&quot;_definition name_&quot;}Representation of customuserinfo/value{  &quot;userId&quot;:&quot;_id of user_&quot;,  &quot;value&quot;:&quot;_content of the value_&quot;,  &quot;definitionId&quot;:&quot;_id of definition_&quot;}Representation of customuserinfo/user{  &quot;userId&quot;:&quot;_id of user_&quot;,  &quot;value&quot;:&quot;_content of the value_&quot;,  &quot;definitionId&quot;:{&quot;id&quot; : &quot;_id of definition_&quot;,&quot;description&quot; : &quot;_definition description_&quot;,&quot;name&quot; : &quot;_definition name_&quot;  }}MethodsThe methods used for these resources are:  GET  POST  PUT  DELETEAdd a new definitionUse the method POST to add a new definition.  URLhttp://localhost:8080/bonita/API/customuserinfo/definitionExample: Add a definition called skill.  MethodPOST  Data Params  Request PayloadJSON representation of definition, without id{  &quot;name&quot;: &quot;skill&quot;,  &quot;description&quot;: &quot;code slayer&quot;}Success Response  Code: 200  Payload:JSON representation of complete definition including generated id{  &quot;id&quot;:&quot;101&quot;,  &quot;description&quot;:&quot;code slayer&quot;,  &quot;name&quot;:&quot;skill&quot;}Delete a definitionUse the DELETE method to delete an existing definition.  URLhttp://localhost:8080/bonita/API/customuserinfo/definition/  MethodDELETEAssociate definitions to usersUse a PUT method to associate users with custom information.  URLhttp://localhost:8080/bonita/API/customuserinfo/value/:userId/:definitionIdExample: Associate the user with id = 1 with the definition with id = 2. http://localhost:8080/bonita/API/customuserinfo/value/1/2  MethodPUT  Request Payload{  &quot;value&quot;:&quot;customUserInfoValue&quot;}Success Response  Code: 200  List the custom user informationUse a GET method to search for definitions.There are no filters, and no search terms. All the definitions are returned.  URL/API/customuserinfo/definition  MethodGET  Data Params  c: number of result per page  p: page numberSuccess Response  Code: 200  Payload:An array of definition objects  Search custom user infoUse a GET method to search for custom user information.  URL/API/customuserinfo/userExample: http://localhost:8080/bonita/API/customuserinfo/user?c=10&amp;amp;p=0&amp;amp;f=userId=1  MethodGET  Data Params (Required)  c: number of result per page  p: page number  f : filter to apply on results with the format f={filter_name}={filter_value}Example: f=userId=idSuccess ResponseAn array of customuserinfo/user objects  Code: 200  ",
      "url": " /bonita/7.7/development/rest-api/customuserinfo-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-7-development-rest-api-form-api": {
      "title": "form API",
      "content"     : "Form APIForm mapping resourceDescriptionIdentifierRepresentationMethodsSearch a form mappingUpdate a form mapping (Efficiency, Performance and Enterprise Editions)Form mapping resourceDescriptionThis resource specifies the mapping of a form to a process or a task. The mapping indicates the technology used to create the form, in the “target” attribute. Possible values are:  URL - an external URL  INTERNAL - a custom page ID  LEGACY - means that the old form application is used for old processes  UNDEFINED - when the form is not present in the definition but is required  NONE - when there is no form needed for the process instantiation or task executionHaving any UNDEFINED mapping prevents the process from being resolved.IdentifierThe ID of the form mapping (a long value).Representation{  &quot;id&quot;: &quot;_the form mapping identifier (long)_&quot;,  &quot;processDefinitionId&quot;: &quot;_the process identifier (long) related to this form mapping_&quot;,  &quot;type&quot;: &quot;_the form mapping type (string) - possible value in [PROCESS_START, PROCESS_OVERVIEW, TASK]_&quot;,  &quot;target&quot;: &quot;_the target (string) - possible value in [URL, INTERNAL, LEGACY, UNDEFINED, NONE]_&quot;,  &quot;task&quot;: &quot;_the task name (string) when type is TASK - null otherwise_&quot;,  &quot;pageId&quot;: &quot;_the custom page identifier (long) when type is INTERNAL - null otherwise_&quot;,  &quot;pageMappingKey&quot;: &quot;_the page mapping key part (string) used to generate the form URL_&quot;,  &quot;lastUpdateBy&quot;: &quot;_the identifier (long) of the user who last updated this form mapping - 0 if no update has been done yet_&quot;,  &quot;lastUpdateDate&quot;: &quot;_the last update date in milliseconds (long) - null if no update has been done yet_&quot;,  &quot;url&quot;: &quot;_the external URL (string) when type is URL - null otherwise_&quot;}MethodsThe methods used for this resource are:  GET - Search for a form mapping  PUT - Update a form mappingSearch a form mappingRequest URL  URL/API/form/mappingExample: /API/form/mapping?p=0&amp;amp;c=10&amp;amp;f=processDefinitionId=7281286536417002543&amp;amp;f=type=TASK  MethodGET  Data ParamsStandard search parameters are available to search form mappings.The following filters can be applied while searching form mappings:  f=processDefinitionId={long} - get form mappings of a specific process definition  f=type=PROCESS_START - get the process start form mapping. Example: http://localhost:8080/bonita/API/form/mapping?c=1&amp;amp;p=0&amp;amp;f=processDefinitionId=123456&amp;amp;f=type=PROCESS_START  f=type=PROCESS_OVERVIEW - get the process overview form mapping. Example: http://localhost:8080/bonita/API/form/mapping?c=10&amp;amp;p=0&amp;amp;f=processDefinitionId=123456&amp;amp;f=type=PROCESS_OVERVIEW  f=type=TASK - get the task form mapping. Example: http://localhost:8080/bonita/API/form/mapping?c=10&amp;amp;p=0&amp;amp;f=processDefinitionId=123456&amp;amp;f=type=TASKSuccess ResponseJSON representation of an array of form mappings  Code: 200  Payload:[  {&quot;id&quot;: 4,&quot;processDefinitionId&quot;: 7281286536417002543,&quot;type&quot;: &quot;TASK&quot;,&quot;target&quot;: &quot;INTERNAL&quot;,&quot;task&quot;: &quot;Give Feedback&quot;,&quot;pageId&quot;: 101,&quot;pageMappingKey&quot;: &quot;taskInstance/myProcess/1.0/Give Feedback&quot;&quot;lastUpdatedBy&quot;: 4,&quot;lastUpdateDate&quot;: 1425466666191,&quot;url&quot;: null  },  {&quot;id&quot;: 5,&quot;processDefinitionId&quot;: 7281286536417002543,&quot;type&quot;: &quot;TASK&quot;,&quot;target&quot;: &quot;URL&quot;,&quot;task&quot;: &quot;Validate Feedback&quot;,&quot;pageId&quot;: null,&quot;pageMappingKey&quot;: &quot;taskInstance/myProcess/1.0/Validate Feedback&quot;,&quot;lastUpdatedBy&quot;: 4,&quot;lastUpdateDate&quot;: 1425295012666,&quot;url&quot;: &quot;http://customerportal.bonitasoft.com&quot;  }]Update a form mapping (Efficiency, Performance and Enterprise Editions)  URL/API/form/mapping/:id  MethodPUT  Request PayloadJSON representation of the form mapping attribute to update - {&quot;pageId&quot;: (long)} or {&quot;url&quot;: (string)} or {} to set the mapping type to NONE{  &quot;url&quot;: &quot;http://myformapp.com/form&quot;}Success Response  Code: 200  ",
      "url": " /bonita/7.7/development/rest-api/form-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-7-development-rest-api-identity-api": {
      "title": "identity API",
      "content"     : "identity APIprofessionalcontactdata and personalcontactdataDescriptionIdentifierRepresentationMethodsCreate contact informationRead a user&#39;s contact informationUpdate a user&#39;s contact informationGroupDescriptionIdentifierRepresentationMethodsCreate a groupRead a groupSearch for a groupUpdate a groupDelete a groupMembershipDescriptionIdentifierRepresentationMethodsCreate a membershipSearch memberships of a userDelete a membershipRoleDescriptionIdentifierRepresentationMethodsCreate a roleRead a roleSearch for a roleUpdate a roleDelete a roleUserDescriptionRepresentationMethodsCreate a userRead a user detailsSearch for a group of usersUpdate a userRemove a userprofessionalcontactdata and personalcontactdataDescriptionAdditional information about a user (personal and professional). Both resources have the same attributes.IdentifierThe user ID (a long value).Representation{  &quot;id&quot;:&quot;user ID&quot;,  &quot;fax_number&quot;:&quot;fax number&quot;,  &quot;building&quot;:&quot;building&quot;,  &quot;phone_number&quot;:&quot;phone number&quot;,  &quot;website&quot;:&quot;website&quot;,  &quot;zipcode&quot;:&quot;zipcode&quot;,  &quot;state&quot;:&quot;state&quot;,  &quot;city&quot;:&quot;city&quot;,  &quot;country&quot;:&quot;country&quot;,  &quot;mobile_number&quot;:&quot;mobile phone number&quot;,  &quot;address&quot;:&quot;address&quot;,  &quot;room&quot;:&quot;room&quot;,  &quot;email&quot;:&quot;email&quot;}MethodsThe methods used for this resource are:  POST - Create a user’s contact information  GET - Read a user’s contact information  PUT - Update a user’s contact informationCreate contact information  URL/API/identity/professionalcontactdataor/API/identity/personalcontactdata  MethodPOST  Request PayloadA partial representation of a user’s contact information in JSON including the user ID (mandatory){  &quot;id&quot;:&quot;4&quot;,  &quot;fax_number&quot;:&quot;484-302-0766&quot;,  &quot;building&quot;:&quot;70&quot;,  &quot;phone_number&quot;:&quot;484-302-5766&quot;,  &quot;zipcode&quot;:&quot;19108&quot;,  &quot;state&quot;:&quot;PA&quot;,  &quot;city&quot;:&quot;Philadelphia&quot;,  &quot;country&quot;:&quot;United States&quot;,  &quot;address&quot;:&quot;Renwick Drive&quot;,  &quot;email&quot;:&quot;walter.bates@acme.com&quot;}Success ResponseThe full JSON representation of the user’s contact information that was created  Code: 200  Payload:{  &quot;id&quot;:&quot;4&quot;,  &quot;fax_number&quot;:&quot;484-302-0766&quot;,  &quot;building&quot;:&quot;70&quot;,  &quot;phone_number&quot;:&quot;484-302-5766&quot;,  &quot;website&quot;:&quot;&quot;,  &quot;zipcode&quot;:&quot;19108&quot;,  &quot;state&quot;:&quot;PA&quot;,  &quot;city&quot;:&quot;Philadelphia&quot;,  &quot;country&quot;:&quot;United States&quot;,  &quot;mobile_number&quot;:&quot;&quot;,  &quot;address&quot;:&quot;Renwick Drive&quot;,  &quot;email&quot;:&quot;walter.bates@acme.com&quot;,  &quot;room&quot;:&quot;&quot;}  Error Response  Code: 403 if contact information for this user already exists  Read a user’s contact information  URL/API/identity/professionalcontactdata/:userIdor/API/identity/personalcontactdata/:userId  MethodGET  Success ResponseA user’s contact information in JSON  Code: 200  Payload:{  &quot;id&quot;:&quot;4&quot;,  &quot;fax_number&quot;:&quot;484-302-0766&quot;,  &quot;building&quot;:&quot;70&quot;,  &quot;phone_number&quot;:&quot;484-302-5766&quot;,  &quot;website&quot;:&quot;&quot;,  &quot;zipcode&quot;:&quot;19108&quot;,  &quot;state&quot;:&quot;PA&quot;,  &quot;city&quot;:&quot;Philadelphia&quot;,  &quot;country&quot;:&quot;United States&quot;,  &quot;mobile_number&quot;:&quot;&quot;,  &quot;address&quot;:&quot;Renwick Drive&quot;,  &quot;email&quot;:&quot;walter.bates@acme.com&quot;,  &quot;room&quot;:&quot;&quot;}  Error Response  Code: 404 if no user with this ID is found  Update a user’s contact information  URL/API/identity/professionalcontactdata/:userIdor/API/identity/personalcontactdata/:userId  MethodPUT  Request PayloadA partial representation of a user’s contact information in JSON with at least the mandatory “name” attribute{  &quot;fax_number&quot;:&quot;484-302-0766&quot;,  &quot;building&quot;:&quot;70&quot;,  &quot;phone_number&quot;:&quot;484-302-5766&quot;,  &quot;zipcode&quot;:&quot;19108&quot;,  &quot;state&quot;:&quot;PA&quot;,  &quot;city&quot;:&quot;Philadelphia&quot;,  &quot;country&quot;:&quot;United States&quot;,  &quot;address&quot;:&quot;Renwick Drive&quot;,  &quot;email&quot;:&quot;walter.bates@acme.com&quot;}Error Response  Code: 404 if no user with this ID is found  GroupDescriptionThe group a user belongs to. Groups have a hierarchy (subgroups can be created inside a group).IdentifierThe ID of the group (a long value).Representation{  &quot;id&quot;:&quot;group ID&quot;,   &quot;name&quot;:&quot;display name&quot;,   &quot;displayName&quot;:&quot;name&quot;,   &quot;parent_path&quot;:&quot;the path of the parent group of this group (empty if the group has no parent)&quot;,   &quot;path&quot;:&quot;the full path of the group (including its parent path)&quot;,   &quot;description&quot;:&quot;description&quot;,   &quot;creation_date&quot;:&quot;creation date (format: &quot;2014-12-31 15:17:24.736&quot;)&quot;,   &quot;created_by_user_id&quot;:&quot;id of the user who created the group (-1 if the group was created by the tenant admin or by an organisation import)&quot;,   &quot;last_update_date&quot;:&quot;last update date (format: &quot;2014-12-31 15:17:24.736&quot;)&quot;,   &quot;icon&quot;:&quot;icon path&quot;}MethodsThe methods used for this resource are:  POST - Create a group  GET - Read a group or search for a group  PUT - Update a group  DELETE - Remove a groupCreate a group  URL/API/identity/group  MethodPOST  Data Params  Request PayloadA partial representation of a group in JSON with at least the mandatory “name” attribute{  &quot;icon&quot;:&quot;&quot;,&quot;name&quot;:&quot;HR&quot;,  &quot;displayName&quot;:&quot;Human Resources&quot;,  &quot;parent_group_id&quot;:&quot;1&quot;,  &quot;description&quot;:&quot;Human resources department&quot;}Success ResponseThe full JSON representation of the group that was created  Code: 200  Payload:{  &quot;id&quot;:&quot;14&quot;,  &quot;creation_date&quot;:&quot;2014-12-02 16:19:28.925&quot;,  &quot;created_by_user_id&quot;:&quot;4&quot;,  &quot;icon&quot;:&quot;&quot;,&quot;parent_path&quot;:&quot;/acme&quot;  ,&quot;description&quot;:&quot;Human resources department&quot;,  &quot;name&quot;:&quot;HR&quot;,  &quot;path&quot;:&quot;/acme/HR&quot;,  &quot;displayName&quot;:&quot;Human Resources&quot;,  &quot;last_update_date&quot;:&quot;2014-12-02 16:19:28.925&quot;}  Error Response  Code: 403 if a group with the same name and parent already exists  Read a group  URL/API/identity/group/:groupId  MethodGET  Success ResponseA group in JSON  Code: 200  Payload:{  &quot;id&quot;:&quot;14&quot;,  &quot;creation_date&quot;:&quot;2014-12-02 16:19:28.925&quot;,  &quot;created_by_user_id&quot;:&quot;4&quot;,  &quot;icon&quot;:&quot;&quot;,&quot;parent_path&quot;:&quot;/acme&quot;,  &quot;description&quot;:&quot;Human resources department&quot;,  &quot;name&quot;:&quot;HR&quot;,  &quot;path&quot;:&quot;/acme/HR&quot;,  &quot;displayName&quot;:&quot;Human Resources&quot;,  &quot;last_update_date&quot;:&quot;2014-12-02 16:19:28.925&quot;}  Error Response  Code: 404 if no group with this ID is found  Search for a group  URL/API/identity/groupExample: /API/identity/group?p=0&amp;amp;c=100&amp;amp;f=parent_path%3d/acme&amp;amp;d=parent_group_id&amp;amp;o=name%20ASC  MethodGET  Data ParamsStandard search parameters are available to search form mappings.It is possible to filter on the following attributes:  name=&amp;lt;group_name&amp;gt;  displayName=&amp;lt;group_displayName&amp;gt;  parent_path=&amp;lt;path_of_parent_group&amp;gt;It is possible to order by the value of the following attributes:  o=id ASC ou o=id DESC)  o=name ASC ou o=name DESC  o=displayName ASC ou o=displayName DESCIt is also possible to retrieve the parent group ID.  d=&amp;lt;parent_group_id&amp;gt;Success ResponseA list of groups in JSON  Code: 200  Payload:[  {&quot;id&quot;:&quot;3&quot;,&quot;creation_date&quot;:&quot;2014-12-02 11:33:48.501&quot;,&quot;created_by_user_id&quot;:&quot;-1&quot;,&quot;icon&quot;:&quot;&quot;,&quot;parent_path&quot;:&quot;/acme&quot;,&quot;description&quot;:&quot;This group represents the finance department of the ACME organization&quot;,&quot;name&quot;:&quot;finance&quot;,&quot;path&quot;:&quot;/acme/finance&quot;,&quot;parent_group_id&quot;:&quot;1&quot;,&quot;displayName&quot;:&quot;Finance&quot;,&quot;last_update_date&quot;:&quot;2014-12-02 11:33:48.501&quot;  }, {&quot;id&quot;:&quot;14&quot;,&quot;creation_date&quot;:&quot;2014-12-02 16:19:28.925&quot;,&quot;created_by_user_id&quot;:&quot;4&quot;,&quot;icon&quot;:&quot;&quot;,&quot;parent_path&quot;:&quot;/acme&quot;,&quot;description&quot;:&quot;Human resources department&quot;,&quot;name&quot;:&quot;HR&quot;,&quot;path&quot;:&quot;/acme/HR&quot;,&quot;parent_group_id&quot;:&quot;1&quot;,&quot;displayName&quot;:&quot;Human Resources&quot;,&quot;last_update_date&quot;:&quot;2014-12-02 16:19:28.925&quot;  }]Update a group  URL/API/identity/group/:groupId  MethodPUT  Request PayloadA partial representation of a group in JSON with at least the mandatory “name” attribute{  &quot;name&quot;:&quot;HR&quot;,  &quot;displayName&quot;:&quot;Humman resources&quot;}Success ResponseThe full JSON representation of the group that was updated  Code: 200  Payload:{  &quot;id&quot;:&quot;14&quot;,  &quot;creation_date&quot;:&quot;2014-12-02 16:19:28.925&quot;,  &quot;created_by_user_id&quot;:&quot;4&quot;,  &quot;icon&quot;:&quot;&quot;,  &quot;parent_path&quot;:&quot;/acme&quot;,  &quot;description&quot;:&quot;Human resources department&quot;,  &quot;name&quot;:&quot;HR&quot;,  &quot;path&quot;:&quot;/acme/HR&quot;,  &quot;displayName&quot;:&quot;Human resources&quot;,  &quot;last_update_date&quot;:&quot;2014-12-03 17:18:27.542&quot;}  Error Response  Code: 403 if another group with the same name and parent already exists404 if no group with this ID is found  Delete a group  URL/API/identity/group/:groupId  MethodDELETE  Success Response  Code: 200Error Response  Code: 404 if no group with this ID is found  MembershipDescriptionManage membership of users. There is a membership when a user belongs to a group and a role. Use this resource to add, search, and delete memberships.IdentifierA compound identifier constructed from user_id/group_id/role_id where each id is a long value.Representation{  &quot;assigned_date&quot;:&quot;creation date (format: &quot;2014-12-31 15:17:24.736&quot;)&quot;,  &quot;role_id&quot;:&quot;id of the role of this membership&quot;,  &quot;assigned_by_user_id&quot;:&quot;id of the user who created the membership (-1 if the role was created by the tenant admin or by an organisation import)&quot;,  &quot;group_id&quot;:&quot;id of the group of this membership&quot;,  &quot;user_id&quot;:&quot;id of the user in this membership&quot;}MethodsThe methods used for this resource are:  POST - Create a membership  GET - Search for memberships of a user  DELETE - Remove a membership  DELETE - Remove a membershipCreate a membershipThis action creates (assigns) a membership to a user.  URL/API/identity/membership  MethodPOST  Request PayloadA partial representation of a membership object with the mandatory “user_id”, “group_id” and “role_id” attributes{  &quot;user_id&quot;:&quot;4&quot;,  &quot;group_id&quot;:&quot;5&quot;,  &quot;role_id&quot;:&quot;1&quot;}Success ResponseThe full JSON representation of the membership that was created  Code: 200  Payload:{  &quot;assigned_date&quot;:&quot;2014-12-02 17:57:09.315&quot;,  &quot;role_id&quot;:&quot;1&quot;,  &quot;assigned_by_user_id&quot;:&quot;-1&quot;,  &quot;group_id&quot;:&quot;5&quot;,  &quot;user_id&quot;:&quot;4&quot;}  Error Response  Code: 403 if a membership already exists  Search memberships of a userThis action search memberships of a user.  URL/API/identity/membership  MethodGET  Data ParamsStandard search parameters are available.Required  filter is mandatory: user_id=&amp;lt;id of the user&amp;gt;It is possible to use the deploy option to retrieve the value of elements specified by an attribute value. For example, if you specify d=group_id, the result will contain the group details in place of the group id.  group d=group_id  role d=role_id  user d=user_id  user that created the membership d=assigned_by_user_idIt is possible to order by the value of the following attributes:  o=ROLE_NAME_ASC or o=ROLE_NAME_DESC  o=GROUP_NAME_ASC or o=GROUP_NAME_DESC  o=ASSIGNED_DATE_ASC or o=ASSIGNED_DATE_DESCExample: Get the memberships for the user with id 125, and return the role details associated with each membership: /API/identity/membership?p=0&amp;amp;c=10&amp;amp;f=user_id%3d125&amp;amp;d=role_idSuccess Response  Code: 200  Payload:[  {&quot;assigned_date&quot;:&quot;2014-12-02 17:57:09.315&quot;,&quot;role_id&quot;: {  &quot;creation_date&quot;:&quot;2014-12-01 18:51:54.791&quot;,  &quot;created_by_user_id&quot;:&quot;4&quot;,  &quot;id&quot;:&quot;4&quot;,  &quot;icon&quot;:&quot;&quot;,  &quot;description&quot;:&quot;manager of the department&quot;,  &quot;name&quot;:&quot;manager&quot;,  &quot;displayName&quot;:&quot;department manager&quot;,  &quot;last_update_date&quot;:&quot;2014-12-01 18:51:54.791&quot;},&quot;assigned_by_user_id&quot;:&quot;12&quot;,&quot;group_id&quot;:&quot;5&quot;,&quot;user_id&quot;:&quot;125&quot;  }]Delete a membershipDelete a membership of a user using the group id and role id.  URL/API/identity/membership/:userId/:groupId/:roleId  MethodDELETE  Success Response  Code: 200  RoleDescriptionThe role of a user in a groupIdentifierThe ID of the role (a long value).Representation{  &quot;id&quot;:&quot;role ID&quot;,  &quot;name&quot;:&quot;display name&quot;,  &quot;displayName&quot;:&quot;name&quot;,  &quot;description&quot;:&quot;description&quot;,  &quot;creation_date&quot;:&quot;creation date (format: &quot;2014-12-31 15:17:24.736&quot;)&quot;,  &quot;created_by_user_id&quot;:&quot;Id of the user who created the role (-1 if the role was created by the tenant admin or by an organisation import)&quot;,  &quot;last_update_date&quot;:&quot;last update date (format: &quot;2014-12-31 15:17:24.736&quot;)&quot;,  &quot;icon&quot;:&quot;icon path&quot;}MethodsThe methods used for this resource are:  POST - Create a role  GET - Read a role or search for a role  PUT - Update a role  DELETE - Remove a roleCreate a role  URL/API/identity/role  MethodPOST  Request PayloadA partial representation of a role in JSON with at least the mandatory “name” attribute{  &quot;icon&quot;:&quot;&quot;,  &quot;name&quot;:&quot;manager&quot;,  &quot;displayName&quot;:&quot;department manager&quot;,  &quot;description&quot;:&quot;manager of the department&quot;}Success ResponseThe full JSON representation of the role that was created  Code: 200  Payload:{  &quot;creation_date&quot;:&quot;2014-12-01 18:51:54.791&quot;,  &quot;created_by_user_id&quot;:&quot;4&quot;,  &quot;id&quot;:&quot;4&quot;,  &quot;icon&quot;:&quot;&quot;,  &quot;description&quot;:&quot;manager of the department&quot;,  &quot;name&quot;:&quot;manager&quot;,  &quot;displayName&quot;:&quot;department manager&quot;,  &quot;last_update_date&quot;:&quot;2014-12-01 18:51:54.791&quot;}  Error Response  Code: 403 if a role with the same name already exists  Read a role  URL/API/identity/role/:roleId  MethodGET  Success ResponseA role in JSON  Code: 200  Payload:{  &quot;creation_date&quot;:&quot;2014-12-01 15:17:24.736&quot;,  &quot;created_by_user_id&quot;:&quot;-1&quot;,  &quot;id&quot;:&quot;1&quot;,  &quot;icon&quot;:&quot;&quot;,  &quot;description&quot;:&quot;&quot;,  &quot;name&quot;:&quot;member&quot;,  &quot;displayName&quot;:&quot;Member&quot;,  &quot;last_update_date&quot;:&quot;2014-12-01 15:17:24.736&quot;}  Error Response  Code: 404 if no role with this ID is found  Search for a role  URL/API/identity/roleExample: /API/identity/role?p=0&amp;amp;c=100&amp;amp;o=displayName ASC  MethodGET  Data ParamsIt is possible to filter on the following attributes  name=&amp;lt;role_name&amp;gt;  displayName=&amp;lt;role_displayName&amp;gt;It is possible to order by the value of the following attributes  id: o=id ASC or o=id DESC  name: o=name ASC or o=name DESC  displayName: o=displayName ASC or o=displayName DESCSuccess ResponseA list of roles in JSON  Code: 200  Payload:[  {&quot;creation_date&quot;:&quot;2014-12-01 18:51:54.791&quot;,&quot;created_by_user_id&quot;:&quot;4&quot;,&quot;id&quot;:&quot;4&quot;,&quot;icon&quot;:&quot;&quot;,&quot;description&quot;:&quot;manager of the department&quot;,&quot;name&quot;:&quot;manager&quot;,&quot;displayName&quot;:&quot;department manager&quot;,&quot;last_update_date&quot;:&quot;2014-12-01 18:51:54.791&quot;  },  {&quot;creation_date&quot;:&quot;2014-12-01 15:17:24.736&quot;,&quot;created_by_user_id&quot;:&quot;-1&quot;,&quot;id&quot;:&quot;1&quot;,&quot;icon&quot;:&quot;&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;member&quot;,&quot;displayName&quot;:&quot;Member&quot;,&quot;last_update_date&quot;:&quot;2014-12-01 15:17:24.736&quot;  }]Update a role  URL/API/identity/role/:roleId  MethodPUT  Request PayloadA partial representation of a role in JSON with at least the mandatory “name” attribute{  &quot;name&quot;:&quot;Manager&quot;,  &quot;displayName&quot;:&quot;Department manager&quot;}Success ResponseThe full JSON representation of the role that was updated  Code: 200  Payload:{  &quot;creation_date&quot;:&quot;2014-12-01 18:51:54.791&quot;,  &quot;created_by_user_id&quot;:&quot;4&quot;,  &quot;id&quot;:&quot;4&quot;,  &quot;icon&quot;:&quot;&quot;,  &quot;description&quot;:&quot;manager of the department&quot;,  &quot;name&quot;:&quot;Manager&quot;,  &quot;displayName&quot;:&quot;Department manager&quot;,  &quot;last_update_date&quot;:&quot;2014-12-01 18:59:59.361&quot;}  Error Response  Code: 403 : if a role with the same name already exists404 : if no role with this ID is found  Delete a role  URL/API/identity/role/:roleId  MethodDELETE  Success Response  Code: 200Error Response  Code: 404 if no role with this ID is found  UserDescriptionUsed to manage information about users.RepresentationReturns a JSON representation of user details. The “manager_id” and “professional_data” are omitted unless they arerequested in the payload.{  &quot;last_connection&quot;:&quot;date&quot;,  &quot;created_by_user_id&quot;:&quot;number&quot;,  &quot;creation_date&quot;:&quot;date&quot;,  &quot;id&quot;:&quot;number&quot;,  &quot;icon&quot;:&quot;string&quot;,  &quot;enabled&quot;:&quot;true | false&quot;,  &quot;title&quot;:&quot;string&quot;,  &quot;professional_data&quot;: {&quot;fax_number&quot;:&quot;string&quot;,&quot;building&quot;:&quot;string&quot;,&quot;phone_number&quot;:&quot;string&quot;,&quot;website&quot;:&quot;string&quot;,&quot;zipcode&quot;:&quot;string&quot;,&quot;state&quot;:&quot;string&quot;,&quot;city&quot;:&quot;string&quot;,&quot;country&quot;:&quot;string&quot;,&quot;id&quot;:&quot;number&quot;,&quot;mobile_number&quot;:&quot;string&quot;,&quot;address&quot;:&quot;string&quot;,&quot;email&quot;:&quot;string&quot;,&quot;room&quot;:&quot;string&quot;  },  &quot;manager_id&quot;:{&quot;last_connection&quot;:&quot;date&quot;,&quot;created_by_user_id&quot;:&quot;number&quot;,&quot;creation_date&quot;:&quot;date&quot;,&quot;id&quot;:&quot;number&quot;,&quot;icon&quot;:&quot;string&quot;,&quot;enabled&quot;:&quot;true | false&quot;,&quot;title&quot;:&quot;string&quot;,&quot;manager_id&quot;:&quot;number&quot;,&quot;job_title&quot;:&quot;string&quot;,&quot;userName&quot;:&quot;string&quot;,&quot;lastname&quot;:&quot;string&quot;,&quot;firstname&quot;:&quot;string&quot;,&quot;password&quot;:&quot;&quot;,&quot;last_update_date&quot;:&quot;date&quot;  },  &quot;job_title&quot;:&quot;string&quot;,  &quot;userName&quot;:&quot;string&quot;,  &quot;lastname&quot;:&quot;string&quot;,  &quot;firstname&quot;:&quot;string&quot;,  &quot;password&quot;:&quot;&quot;,  &quot;last_update_date&quot;:&quot;date&quot;}MethodsThe methods used for this resource are:  POST - Create a user  GET - Read a user details or search for a group of users  PUT - Update a user  DELETE - Remove a userCreate a user  URL/API/identity/user  MethodPOST  Request PayloadA partial representation of a user in JSON{  &quot;userName&quot;:&quot;New.User&quot;,  &quot;password&quot;:&quot;bpm&quot;,  &quot;password_confirm&quot;:&quot;bpm&quot;,  &quot;icon&quot;:&quot;&quot;,  &quot;firstname&quot;:&quot;New&quot;,  &quot;lastname&quot;:&quot;User&quot;,  &quot;title&quot;:&quot;Mr&quot;,  &quot;job_title&quot;:&quot;Human resources benefits&quot;,  &quot;manager_id&quot;:&quot;3&quot;}Success ResponseThe full JSON representation of the user that was createdAfter creation, the user is in inactive state.  Code: 200  Payload:{  &quot;last_connection&quot;:&quot;&quot;,  &quot;created_by_user_id&quot;:&quot;4&quot;,  &quot;creation_date&quot;:&quot;2014-12-09 17:43:28.291&quot;,  &quot;id&quot;:&quot;101&quot;,  &quot;icon&quot;:&quot;/default/icon_user.png&quot;,  &quot;enabled&quot;:&quot;false&quot;,  &quot;title&quot;:&quot;Mr&quot;,  &quot;manager_id&quot;:&quot;3&quot;,  &quot;job_title&quot;:&quot;Human resources benefits&quot;,  &quot;userName&quot;:&quot;New.User&quot;,  &quot;lastname&quot;:&quot;New&quot;,  &quot;firstname&quot;:&quot;User&quot;,  &quot;password&quot;:&quot;&quot;,  &quot;last_update_date&quot;:&quot;2014-12-09 17:43:28.291&quot;}Read a user details  URL/API/identity/user/:userIdExample:  Get details of a specified user including professional and manager information : /API/identity/user/21?d=professional_data&amp;amp;d=manager_id  MethodGET  Data ParamsStandard search parameters are available.  d=professional_data - include professionnal data in response  d=manager_id - include details of user’s manager in responseSuccess ResponseThe full JSON representation of the user  Code: 200  Payload:{  &quot;last_connection&quot;:&quot;&quot;,  &quot;created_by_user_id&quot;:&quot;-1&quot;,  &quot;creation_date&quot;:&quot;2014-12-01 10:39:55.177&quot;,  &quot;id&quot;:&quot;21&quot;,  &quot;icon&quot;:&quot;/default/icon_user.png&quot;,  &quot;enabled&quot;:&quot;true&quot;,  &quot;title&quot;:&quot;Mrs&quot;,  &quot;professional_data&quot;:{&quot;fax_number&quot;:&quot;484-302-0430&quot;,&quot;building&quot;:&quot;70&quot;,&quot;phone_number&quot;:&quot;484-302-5430&quot;,&quot;website&quot;:&quot;&quot;,&quot;zipcode&quot;:&quot;19108&quot;,&quot;state&quot;:&quot;PA&quot;,&quot;city&quot;:&quot;Philadelphia&quot;,&quot;country&quot;:&quot;United States&quot;,&quot;id&quot;:&quot;21&quot;,&quot;mobile_number&quot;:&quot;&quot;,&quot;address&quot;:&quot;Renwick Drive&quot;,&quot;email&quot;:&quot;giovanna.almeida@acme.com&quot;,&quot;room&quot;:&quot;&quot;  },  &quot;manager_id&quot;:{&quot;last_connection&quot;:&quot;&quot;,&quot;created_by_user_id&quot;:&quot;-1&quot;,&quot;creation_date&quot;:&quot;2014-12-01 10:39:55.136&quot;,&quot;id&quot;:&quot;17&quot;,&quot;icon&quot;:&quot;/default/icon_user.png&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;title&quot;:&quot;Mrs&quot;,&quot;manager_id&quot;:&quot;1&quot;,&quot;job_title&quot;:&quot;Vice President of Sales&quot;,&quot;userName&quot;:&quot;daniela.angelo&quot;,&quot;lastname&quot;:&quot;Angelo&quot;,&quot;firstname&quot;:&quot;Daniela&quot;,&quot;password&quot;:&quot;&quot;,&quot;last_update_date&quot;:&quot;2014-12-01 10:39:55.136&quot;  },  &quot;job_title&quot;:&quot;Account manager&quot;,  &quot;userName&quot;:&quot;giovanna.almeida&quot;,  &quot;lastname&quot;:&quot;Almeida&quot;,  &quot;firstname&quot;:&quot;Giovanna&quot;,  &quot;password&quot;:&quot;&quot;,  &quot;last_update_date&quot;:&quot;2014-12-01 10:39:55.177&quot;}Search for a group of users  URL/API/identity/userExample:  Search for users with names that contain “will”, filter to keep only enabled users, and order the result by last name.:  /API/identity/user?p=0&amp;amp;c=10&amp;amp;o=lastname%20ASC&amp;amp;s=will&amp;amp;f=enabled%3dtrue  MethodGET  Data ParamsStandard search parameters are available.  `d=professional_data - include professionnal data in response  `d=manager_id - include details of user’s manager in responseSuccess ResponseA JSON array of users  Code: 200  Payload:[  {&quot;last_connection&quot;:&quot;2014-12-09 14:52:06.092&quot;,&quot;created_by_user_id&quot;:&quot;-1&quot;,&quot;creation_date&quot;:&quot;2014-12-08 17:16:40.984&quot;,&quot;id&quot;:&quot;1&quot;,&quot;icon&quot;:&quot;/default/icon_user.png&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;title&quot;:&quot;Mr&quot;,&quot;manager_id&quot;:&quot;0&quot;,&quot;job_title&quot;:&quot;Chief Executive Officer&quot;,&quot;userName&quot;:&quot;william.jobs&quot;,&quot;lastname&quot;:&quot;Jobs&quot;,&quot;firstname&quot;:&quot;William&quot;,&quot;password&quot;:&quot;&quot;,&quot;last_update_date&quot;:&quot;2014-12-08 17:16:40.984&quot;  },  {&quot;last_connection&quot;:&quot;&quot;,&quot;created_by_user_id&quot;:&quot;-1&quot;,&quot;creation_date&quot;:&quot;2014-12-08 17:16:41.030&quot;,&quot;id&quot;:&quot;5&quot;,&quot;icon&quot;:&quot;/default/icon_user.png&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;title&quot;:&quot;Mr&quot;,&quot;manager_id&quot;:&quot;1&quot;,&quot;job_title&quot;:&quot;Chief Financial Officer&quot;,&quot;userName&quot;:&quot;zachary.williamson&quot;,&quot;lastname&quot;:&quot;Williamson&quot;,&quot;firstname&quot;:&quot;Zachary&quot;,&quot;password&quot;:&quot;&quot;,&quot;last_update_date&quot;:&quot;2014-12-08 17:16:41.030&quot;  }]Update a user  URLAPI/identity/user/:userId  MethodPUT  Request PayloadA JSON representation of the user, with the new information.Example:  Update user details including professional and manager information: /API/identity/user/4{  &quot;id&quot;=&quot;4&quot;,  &quot;userName&quot;:&quot;walter.bates&quot;,  &quot;password&quot;:&quot;bpm&quot;,  &quot;password_confirm&quot;:&quot;bpm&quot;,  &quot;icon&quot;:&quot;&quot;,  &quot;firstname&quot;:&quot;Walter&quot;,  &quot;lastname&quot;:&quot;Bates&quot;,  &quot;title&quot;:&quot;Mr&quot;,  &quot;job_title&quot;:&quot;Human resources benefits&quot;,  &quot;manager_id&quot;:&quot;3&quot;}Deactivate the user identified by id 9 : /API/identity/user/9{  &quot;enabled&quot;:&quot;false&quot;}Success Response  Code: 200  Remove a userUse this method with caution: some artifacts like applications, cases or users may present display problems in the Bonita Portal if the referenced user was deleted.Note that you can disable a user instead of deleting it. To do so, use the UPDATE method and set the attribute ‘enabled’ to false  URL/API/identity/user/:userId  MethodDELETE  Success Response  Code: 200  ",
      "url": " /bonita/7.7/development/rest-api/identity-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-7-development-rest-api-manage-files-using-upload-servlet-and-rest-api": {
      "title": "Manage files using upload servlet and REST API",
      "content"     : "Manage files using upload servlet and REST APIYou can upload files by doing a multipart post request on any of the available servlets.It returns the name of the temporary uploaded file.This file name can be used to link those files with any REST resources.Available servletsExampleLink an icon to a new organization groupDeploy programmatically a new REST API extensionAvailable servlets  /portal/fileUpload, supports any type of files  /portal/processUpload, supports only .bar files  /portal/organizationUpload, supports only .xml files  /portal/actorsUpload, supports only .xml files  /portal/imageUpload, supports only .png, .jpg, .gif, .jpeg, .bmp, .wbmp or .tga files  /portal/pageUpload, supports only .zip files  /portal/applicationsUpload, supports only .xml files  /portal/connectorImplementation, supports only .zip files (not available in Community edition)  /portal/reportUpload, supports any type of file (not available in Community edition)  /portal/resourceUpload, supports only .jar files (not available in Community edition)  /portal/profilesUpload, supports only .xml files (not available in Community edition)ExampleYou can refer to the example-upload-servlet project that demonstrate the two use cases explained below.Link an icon to a new organization group  Call the login service: /bonita/loginservice for authentication.  Upload an image by using a multipart post request on the image upload servlet, /bonita/portal/imageUpload.  The image is stored in a temporary folder.  The servlet call response includes the name of the temporary file.  Call the Identity API to create a new group: /bonita/API/identity/group, link this image to the group by specifying this temporary file name in the request body.Deploy programmatically a new REST API extension  Call the login service: /bonita/loginservice for authentication.  Upload a REST API extension by using a multipart post request on the page upload servlet: /bonita/portal/pageUpload. It will send the REST API extension (handle as a “page”) zip file from client side to server side.  REST API extension zip file is stored in a temporary folder.  The servlet call response includes the name of the temporary file.  Call the Portal API to register the newly uploaded REST API extension: /bonita/API/portal/page.",
      "url": " /bonita/7.7/development/rest-api/manage-files-using-upload-servlet-and-rest-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-7-development-rest-api-platform-api": {
      "title": "platform API",
      "content"     : "Platform APIPlatform API Login and LogoutPlatformTenantLicensePlatform API Login and LogoutThe platform API resources require a platform session.In order to get one, log in as the platform administrator using the platform login service. The username and password are in bonita-platform-community-custom.properties file.  URL/platformloginservice  MethodPOST  Success Response  Code: 200  Request parameters:username=platformAdminpassword=platformredirect=falseIn order to logout use the platform logout service as follow:  URL/platformlogoutservice  MethodPOST  Success Response  Code: 200  PlatformDescriptionHandle the platform. This requires a platform session. Log in using the platform login service.Identifierunusedid, the id is not used because there is only one platformRepresentation{  &quot;createdBy&quot;:&quot;_the user name of the platform administrator_&quot;,  &quot;created&quot;:&quot;_the creation date_&quot;,  &quot;initialVersion&quot;:&quot;_the version in which the platform was created_&quot;,  &quot;state&quot;:&quot;_can be STARTED or STOPPED_&quot;,  &quot;previousVersion&quot;:&quot;_the previous version the platform was in or empty if there is none_&quot;,  &quot;version&quot;:&quot;_the current version of the platform_&quot;}MethodsThe methods used for this resource are:  GET - get the current platform  POST - create the platform  PUT - start or stop the platform  DELETE - destroy the platformGet the platform  URL/API/platform/platform/unusedid  MethodGET  Success ResponseThe platform in JSON  Code: 200  Payload:{  &quot;createdBy&quot;:&quot;platformAdmin&quot;,  &quot;created&quot;:&quot;2014-12-04 15:46:46.065&quot;,  &quot;initialVersion&quot;:&quot;6.4.0&quot;,  &quot;state&quot;:&quot;STARTED&quot;,  &quot;previousVersion&quot;:&quot;&quot;,  &quot;version&quot;:&quot;6.4.0&quot;}Start or stop the platformStart or stop the current node, that is, start or stop all services of the current JVM.  URL/API/platform/platform/unusedid  MethodPUT  Request PayloadStart current node :{  &quot;state&quot;:&quot;stop&quot;}Stop current node :{  &quot;state&quot;:&quot;start&quot;}Success Response  Code: 200  TenantDescriptionHandle the tenants (Enterprise and Performance editions only). This requires a platform session. Log in using the platform login service.IdentifierThe id of the tenantRepresentation{  &quot;id&quot;:&quot;_id of the tenant_&quot;,  &quot;creation&quot;:&quot;_the creation date_&quot;,  &quot;icon&quot;:&quot;_the path of the icon_&quot;,  &quot;description&quot;:&quot;_the description_&quot;,  &quot;name&quot;:&quot;_the name of the tenant_&quot;,  &quot;state&quot;:&quot;_ACTIVATED or DEACTIVATED_&quot;}MethodsThe methods used for this resource are:  GET - get or search tenants  POST - create a tenant  PUT - update the tenant and activate or deactivate it  DELETE - delete a tenantGet a tenant  URL/API/platform/tenant/:id  MethodGET  Success ResponseThe platform in JSON  Code: 200  Payload:{  &quot;id&quot;:&quot;1&quot;,  &quot;creation&quot;:&quot;2014-12-04 15:46:46.256&quot;,  &quot;icon&quot;:&quot;/default.png&quot;,  &quot;username&quot;:&quot;&quot;,  &quot;description&quot;:&quot;Default tenant&quot;,  &quot;name&quot;:&quot;default&quot;,  &quot;state&quot;:&quot;ACTIVATED&quot;,  &quot;password&quot;:&quot;&quot;}Create a tenantCreate a new tenant on the platform.  URL/API/platform/tenant  MethodPOST  Request Payloadtenant parameters as JSON{  &quot;name&quot;:&quot;MyTenant&quot;,  &quot;description&quot;:&quot;My tenant&quot;,  &quot;username&quot;:&quot;john&quot;,  &quot;password&quot;:&quot;bpm&quot;}Success Responsethe created tenant as JSON  Code: 200  Payload:{  &quot;password&quot;:&quot;&quot;,  &quot;name&quot;:&quot;MyTenant&quot;,  &quot;icon&quot;:&quot;/default.png&quot;,  &quot;description&quot;:&quot;My tenant&quot;,  &quot;id&quot;:&quot;102&quot;,  &quot;state&quot;:&quot;DEACTIVATED&quot;,  &quot;creation&quot;:&quot;2014-12-04 15:30:19.930&quot;,  &quot;username&quot;:&quot;&quot;}Update a tenantAttributes of the tenant can be changed, and it can be activated or deactivated at the same time.  URL/API/platform/tenant/id  MethodPUT  Request PayloadAttributes to change as JSON{  &quot;description&quot;:&quot;modified description for the tenant&quot;,  &quot;state&quot;:&quot;DEACTIVATED&quot;}Success ResponseThe updated tenant as JSON  Code: 200  Payload:{  &quot;password&quot;:&quot;&quot;,  &quot;name&quot;:&quot;MyTenant&quot;,  &quot;icon&quot;:&quot;/default.png&quot;,  &quot;description&quot;:&quot;modified description for the tenant&quot;,  &quot;id&quot;:&quot;102&quot;,  &quot;state&quot;:&quot;DEACTIVATED&quot;,  &quot;creation&quot;:&quot;2014-12-04 15:30:19.930&quot;,  &quot;username&quot;:&quot;&quot;}Delete a tenantA tenant can only be deleted if it is in DEACTIVATED state.  URL/API/platform/tenant/id  MethodDELETE  Success Response  Code: 200  LicenseDescriptionHandle the license information. This requires a platform session. Log in using the platform login service.This Web REST API is available in Subscription editions only, since version 7.1.IdentifieremptyRepresentation{  &quot;licenseStartDate&quot;: date with format &quot;yyyy-MM-dd&quot; - first day (included) of license file validity,  &quot;duration&quot;: integer - number of days for license file validity,  &quot;licenseExpirationDate&quot;: date with format &quot;yyyy-MM-dd&quot; - last day (included) of license file validity,  &quot;numberOfCPUCores&quot;: integer - number of CPUs  &quot;edition&quot;: name of the Bonita edition enabled by the license  &quot;licenseMode&quot;: available mode enabled by the license  &quot;requestKey&quot;: request key to use to generate a new license on the customer portal  If you have a subscription that specifies case-counter licensing, additional fields are present:  &quot;subscriptionStartPeriod&quot;: date with format &quot;yyyy-MM-dd&quot; - first day (included) of current period for number of cases provisioned,  &quot;subscriptionEndPeriod&quot;: date with format &quot;yyyy-MM-dd&quot; - last day (included) of current period for number of cases provisioned,  &quot;caseCounterLimit&quot;: integer - number of cases provisioned for period between &quot;subscriptionStartPeriod&quot; and &quot;subscriptionEndPeriod&quot;,  &quot;caseCounter&quot;: integer - number of consumed cases for period between &quot;subscriptionStartPeriod&quot; and &quot;subscriptionEndPeriod&quot;}MethodsThe methods used for this resource are:  GET - get subscription license informationGet subscription license information  URL/API/platform/license  MethodGET  Success ResponseThe license information in JSON  Code: 200  Payload:{  &quot;licenseStartDate&quot;: &quot;2015-08-31&quot;,  &quot;duration&quot;: 30,  &quot;licenseExpirationDate&quot;: &quot;2015-09-30&quot;,  &quot;edition&quot;: &quot;Performance&quot;,  &quot;licenseMode&quot;: &quot;development&quot;,  &quot;requestKey&quot;: &quot;(WkrNiwnog4M+qGKUdl8D4yU6l2LyIlqNm3SEZJgenU/c=)&quot;,  &quot;subscriptionStartPeriod&quot;: &quot;2015-08-30&quot;,  &quot;subscriptionEndPeriod&quot;: &quot;2016-08-29&quot;,  &quot;caseCounterLimit&quot;: 100000,  &quot;caseCounter&quot;: 0,  &quot;numberOfCPUCores&quot;: 4}",
      "url": " /bonita/7.7/development/rest-api/platform-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-7-development-rest-api-portal-api": {
      "title": "portal API",
      "content"     : "portal APIPageProfileProfileEntryProfileMemberThemePageDescriptionUse the page resource to access custom pages, UI Designer pages, layouts or forms and REST API extensions.IdentifierSimple, the ID of the object (a long value)Representation{&quot;id&quot;:&quot;_page_id_&quot;,&quot;creationDate&quot;:&quot;_date and time_&quot;,&quot;createdBy&quot;:&quot;_created_by_user_id_&quot;,&quot;isProvided&quot;:&quot;_true|false_&quot;,&quot;description&quot;:&quot;_description_&quot;,&quot;contentName&quot;:&quot;_custom_page_name_&quot;,&quot;displayName&quot;:&quot;_custom_page_display_name_&quot;,&quot;updatedBy&quot;:&quot;_updatedBy_user_id_&quot;,&quot;lastUpdateDate&quot;:&quot;_date_and_time_&quot;,&quot;urlToken&quot;:&quot;_custom_page_urlToken_&quot;}MethodsThe methods used for this resource are:  POST - Add a new custom page  GET - Read or search a custom page  PUT - Update a custom page  DELETE - Remove a custom pageRetrieve a Custom PageUse a GET method to retrieve information about a custom page.  URL/API/portal/page/:pageId  MethodGET  Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;1&quot;,  &quot;creationDate&quot;:&quot;2014-12-02 15:54:45.249&quot;,  &quot;createdBy&quot;:&quot;&quot;,  &quot;isProvided&quot;:&quot;true&quot;,  &quot;description&quot;:&quot;HTML and Javascript example of custom page source structure (in English).&quot;,  &quot;contentName&quot;:&quot;bonita-html-page-example.zip&quot;,  &quot;displayName&quot;:&quot;HTML example page&quot;,  &quot;updatedBy&quot;:&quot;-1&quot;,  &quot;lastUpdateDate&quot;:&quot;2014-12-02 15:54:45.249&quot;,  &quot;urlToken&quot;:&quot;custompage_htmlexample&quot;}Add a new custom pageUse the POST method to create a new custom page. To add a new custom page, there are two steps:  Upload the page content using the pageUpload servlet. This returns a temporary file name.  Call this API with the temporary file name, as in the example below.  URL/API/portal/pageExample: Add the custom page that was given the temporary name tmp_2181700538398444744.zip. The original name was bonita-angular-dashboard.zip.  MethodPOST  Request Payload{  &quot;pageZip&quot;:&quot;tmp_113096560980259488.zip:bonita-angular-dashboard.zip&quot;}Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;103&quot;,  &quot;creationDate&quot;:&quot;2014-12-04 14:54:06.967&quot;,  &quot;createdBy&quot;:&quot;1&quot;,  &quot;isProvided&quot;:&quot;false&quot;,  &quot;description&quot;:&quot;AngularJS dashboard using ngBonita&quot;,  &quot;contentName&quot;:&quot;bonita-angular-dashboard.zip&quot;,  &quot;displayName&quot;:&quot;AngularJS dashboard&quot;,  &quot;updatedBy&quot;:&quot;1&quot;,  &quot;lastUpdateDate&quot;:&quot;2014-12-04 14:54:06.967&quot;,  &quot;urlToken&quot;:&quot;custompage_angulardashboard&quot;}Update a custom pageUse the PUT method to update an existing custom page.To update a custom page, upload the new page content using the pageUpload servlet, which returns a temporary file name, and then call this API with the temporary file name.  URL/API/portal/page/:pageIdExample: Update the custom page with id = 103. The new uploaded file was given the temporary name tmp_4338264789005487499.zip. The original name was new-bonita-angular-dashboard.zip.  MethodPUT  Request Payload{  &quot;pageZip&quot;:&quot;tmp_4338264789005487499.zip:new-bonita-angular-dashboard.zip&quot;}Success Response  Code: 200  Search custom pagesUse a GET method with filters and search terms to search for custom pages.  URL/API/portal/page?p={page}&amp;amp;c={count}&amp;amp;o={orders}&amp;amp;f={filters}&amp;amp;s={search}&amp;amp;d={deploy}  MethodGET  Data ParamsStandard search parameters are available.You can filter on:  createdBy={user_id}: retrieve only the pages created by the specified user ID.For example, to retrieve the custom pages created by the user with id 1: http://localhost:8080/bonita/API/portal/page?p=0&amp;amp;c=10&amp;amp;f=createdBy%3d1.  contentType={contentType}: retrieve only the resources of requested type. This filter is available since v7.0.For example, to retrieve the theme resources: http://localhost:8080/bonita/API/portal/page?p=0&amp;amp;c=10&amp;amp;f=contentType%3Dtheme.You can search on:  displayName or description: search for custom pages with a displayName or description that starts with the specified string.For example, to find the pages with displayName starting with New: http://localhost:8080/bonita/API/portal/page?p=0&amp;amp;c=10&amp;amp;s=NewSuccess ResponseAn array of custom page objects  Code: 200  Delete a custom pageUse the DELETE method to delete an existing custom page  URL/API/portal/page/:pageId  MethodDELETE  Success Response  Code: 200  ProfileDescriptionUse the profile resource to access profiles.IdentifierSimple, the ID of the object (a long value)Representation{&quot;id&quot;:&quot;_profile id_&quot;,&quot;creationDate&quot;:&quot;_date and time of profile creation_&quot;,&quot;icon&quot;:&quot;_icon used in the portal to represent the profile_&quot;,&quot;createdBy&quot;:&quot;_id of the uer who created the profile_&quot;,&quot;description&quot;:&quot;_a description of the profile_&quot;,&quot;name&quot;:&quot;_profile name_&quot;,&quot;is_default&quot;:&quot;_true | false _&quot;,&quot;lastUpdateDate&quot;:&quot;_date and time of the last update to the profile_&quot;,&quot;updatedBy&quot;:&quot;_the id of the user who last updated the profile_&quot;}MethodsThe methods used for this resource are:  POST - Add a new profile  GET - Read or search a profile  PUT - Update a profile  DELETE - Remove a profileRetrieve a ProfileUse a GET method to retrieve information about a profile.  URL/API/portal/profile/:profileId  MethodGET  Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;1&quot;,  &quot;creationDate&quot;:&quot;2014-12-02 15:54:44.395&quot;,  &quot;icon&quot;:&quot;/profiles/profileUser.png&quot;,  &quot;createdBy&quot;:&quot;-1&quot;,  &quot;description&quot;:&quot;The user can view and perform tasks and can start a new case of a process.&quot;,  &quot;name&quot;:&quot;User&quot;,  &quot;is_default&quot;:&quot;true&quot;,  &quot;lastUpdateDate&quot;:&quot;2014-12-04 11:05:14.490&quot;,  &quot;updatedBy&quot;:&quot;1&quot;}Add a new profileUse the POST method to create a new profile.  URL/API/portal/profile  MethodPOST  Request Payload  {&quot;name&quot;:&quot;MyCustomProfile&quot;,&quot;description&quot;:&quot;This is my custom profile&quot;  }Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;101&quot;,  &quot;creationDate&quot;:&quot;2014-12-04 16:29:23.434&quot;,  &quot;icon&quot;:&quot;/profiles/profileDefault.png&quot;,  &quot;createdBy&quot;:&quot;1&quot;,  &quot;description&quot;:&quot;This is my custom profile&quot;,  &quot;name&quot;:&quot;MyCustomProfile&quot;,  &quot;is_default&quot;:&quot;false&quot;,  &quot;lastUpdateDate&quot;:&quot;2014-12-04 16:29:23.434&quot;,  &quot;updatedBy&quot;:&quot;1&quot;}Update a profileUse the PUT method to update an existing profile.  URL/API/portal/profile/:profileId  MethodPUT  Request Payload{  &quot;id&quot;:&quot;101&quot;,  &quot;name&quot;:&quot;MyUpdatedCustomProfile&quot;,  &quot;description&quot;:&quot;This is my updated custom profile&quot;}Success Response  Code: 200  Search profilesUse a GET method with filters and search terms to search for profiles.  URL/API/portal/profile?p={page}&amp;amp;c={count}&amp;amp;o={orders}&amp;amp;f={filters}&amp;amp;s={search}&amp;amp;d={deploy}  MethodGET  Data ParamsStandard search parameters are available.You can filter on:  name={exact_profile_name}: retrieve only the profiles with the specified name. For example, retrieve the profile with name=Administrator: /API/portal/profile?p=0&amp;amp;c=10&amp;amp;f=name%3dAdministrator  hasNavigation={true|false}: retrieve the profiles with (or without) attached navigation pages (profile entries): /API/portal/profile?p=0&amp;amp;c=10&amp;amp;f=hasNavigation=trueYou can search on:  name: search all profiles which name starts with the search string. For example, name starting with Adm: /API/portal/profile?p=0&amp;amp;c=10&amp;amp;s=AdmSuccess Response  Code: 200  Payload:An array of profile objects  Delete a profileUse the DELETE method to delete an existing profile  URL/API/portal/profile/  MethodDELETE  Success Response  Code: 200  ProfileEntryDescriptionA profileEntry represents the association between pages and profiles. A profile is associated with a set of profileEntry items. This defines the pages that a user with this profile can access, and the menu structure that the user sees.IdentifierSimple, the ID of the object (a long value)Representation{  &quot;id&quot;:&quot;_profileEntry id_&quot;,  &quot;icon&quot;:&quot;_icon used in the portal to represent a profileEntry_&quot;,  &quot;index&quot;:&quot;_position in a menu_&quot;,  &quot;profile_id&quot;:&quot;_id of the profile that contains this profileEntry_&quot;,  &quot;page&quot;:&quot;_pageToken (menu name or menu item name) used in a portal menu to identify the page associated with the profileEntry_&quot;,  &quot;description&quot;:&quot;_description_&quot;,  &quot;name&quot;:&quot;_name of the profileEntry_&quot;,  &quot;type&quot;:&quot;_link (if menu item) | folder (if menu)_&quot;,  &quot;isCustom&quot;:&quot;_ true | false _&quot;,  &quot;parent_id&quot;:&quot;_id or parent profileEntry if in a folder_&quot;}MethodsThe methods used for this resource are:  POST - Add a new profileEntry  GET - Read or search a profileEntry  PUT - Update a profileEntry  DELETE - Remove a profileEntryRetrieve a profileEntryUse a GET method to retrieve information about a profileEntry  URL/API/portal/profileEntry/:profileEntryId  MethodGET  Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;1&quot;,  &quot;icon&quot;:&quot;&quot;,  &quot;index&quot;:&quot;0&quot;,  &quot;profile_id&quot;:&quot;1&quot;,  &quot;page&quot;:&quot;tasklistinguser&quot;,  &quot;description&quot;:&quot;Manage tasks&quot;,  &quot;name&quot;:&quot;Tasks&quot;,  &quot;type&quot;:&quot;link&quot;,  &quot;isCustom&quot;:&quot;false&quot;,  &quot;parent_id&quot;:&quot;0&quot;}Add a new profileEntryUse the POST method to create a new profileEntry.  URLAPI/portal/profileEntry  MethodPOST  Request PayloadExample: Add the profileEntry with page token = tasklistingadmin with a display name = “Test menu” and associate it with the profile = 102.{  &quot;page&quot;:&quot;tasklistingadmin&quot;,  &quot;parent_id&quot;:&quot;0&quot;,  &quot;name&quot;:&quot;Test menu&quot;,  &quot;profile_id&quot;:&quot;102&quot;,  &quot;type&quot;:&quot;link&quot;,  &quot;isCustom&quot;:&quot;false&quot;}Example 2: Create a menu called Folder containing two items, Child1 and Child2, and associate it with profile = 102 with three POST requests.{  &quot;page&quot;:&quot;Null&quot;,  &quot;parent_id&quot;:&quot;0&quot;,  &quot;name&quot;:&quot;Folder&quot;,  &quot;profile_id&quot;:&quot;102&quot;,  &quot;type&quot;:&quot;folder&quot;,  &quot;isCustom&quot;:&quot;false&quot;}{  &quot;page&quot;:&quot;custompage_groovyexample&quot;,  &quot;parent_id&quot;:&quot;106&quot;,  &quot;name&quot;:&quot;&quot;,  &quot;profile_id&quot;:&quot;102&quot;,  &quot;type&quot;:&quot;link&quot;,  &quot;isCustom&quot;:&quot;true&quot;}{  &quot;page&quot;:&quot;tasklistingadmin&quot;,  &quot;parent_id&quot;:&quot;106&quot;,  &quot;name&quot;:&quot;&quot;,  &quot;profile_id&quot;:&quot;102&quot;,  &quot;type&quot;:&quot;link&quot;,  &quot;isCustom&quot;:&quot;false&quot;}Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;101&quot;,  &quot;icon&quot;:&quot;&quot;,  &quot;index&quot;:&quot;0&quot;,  &quot;profile_id&quot;:&quot;102&quot;,  &quot;page&quot;:&quot;tasklistingadmin&quot;,  &quot;description&quot;:&quot;manage tasks&quot;,  &quot;name&quot;:&quot;Test menu&quot;,  &quot;type&quot;:&quot;link&quot;,  &quot;isCustom&quot;:&quot;false&quot;,  &quot;parent_id&quot;:&quot;0&quot;}Update a profileEntryUse the PUT method to update an existing profileEntry.  URLAPI/portal/profileEntry/:profileEntryId  MethodPUT  Request Payload{  &quot;name&quot;:&quot;Test menu updated&quot;}Success Response  Code: 200  Search profileEntry itemsUse a GET method with filters and search terms to search for profileEntry items.  URL/API/portal/profileEntryEntry?p={page}&amp;amp;c={count}&amp;amp;o={orders}&amp;amp;f={filters}&amp;amp;s={search}&amp;amp;d={deploy}  MethodGET  Data ParamsStandard search parameters are available.You can filter on:  page={exact_pageToken}: retrieve only the profileEntry items with the specified tokenName. For example, retrieve the profileEntry with page name = tasklistinguser: /API/portal/profileEntry?p=0&amp;amp;c=10&amp;amp;f=page%3dtasklistinguser.  name={exact_page_name}: retrieve only the profileEntry items with the specified pageName. For example, retrieve the profileEntry with page name = Tasks: /API/portal/profileEntry?p=0&amp;amp;c=10&amp;amp;f=name%3dTasks.  parentId={parent_id}: retrieve only the profileEntry items with the specified parent_id. For example, retrieve the profileEntry with parent_id = 1: /API/portal/profileEntry?p=0&amp;amp;c=10&amp;amp;f=parent_id%3d1.You can search on:  name: search all profileEntry definitions with name starting with the search string. For example, to find entries with name starting with Manage: /API/portal/profileEntry?p=0&amp;amp;c=10&amp;amp;s=Manage.Success ResponseAn array of profileEntry objects  Code: 200  Payload:  Delete a profileEntryUse the DELETE method to delete an existing profileEntry  URL/API/portal/profileEntry/:profileEntryId  MethodDELETE  Success Response  Code: 200  ProfileMemberDescriptionA profileMember represents the association between the organization and profiles. In an organization we have three member_types = USER, GROUP and ROLE. You can assign a profile to a user by specifying a role, group, or specific user.IdentifierSimple, the ID of the object (a long value)Representation{  &quot;id&quot;:&quot;_profileMemberid_&quot;,  &quot;profile_id&quot;:&quot;_id of the profile for this mapping_&quot;,  &quot;role_id&quot;:&quot;_id of role, or -1 if the member type is not role_&quot;,  &quot;group_id&quot;:&quot;_id of group, or -1 if the member type is not group_&quot;,  &quot;user_id&quot;:&quot;_id of user, or -1 if the member type is not user_&quot;}MethodsThe methods used for this resource are:  POST - Add a new profileMember  GET - Search a profileMember  DELETE - Remove a profileMemberAdd a new profileMemberUse the POST method to create a new profileMember.  URLAPI/portal/profileMember  MethodPOST  Request PayloadExample 1: Add a member_type = USER to the profile with id = 2.{  &quot;profile_id&quot;:&quot;2&quot;,  &quot;member_type&quot;:&quot;USER&quot;,  &quot;user_id&quot;:&quot;101&quot;}Example 2: Add a member_type = GROUP to the profile with id = 2.{  &quot;profile_id&quot;:&quot;2&quot;,  &quot;member_type&quot;:&quot;GROUP&quot;,  &quot;group_id&quot;:&quot;8&quot;}Success Response  Code: 200  Payload:Example 1 response ;{  &quot;id&quot;:&quot;204&quot;,  &quot;profile_id&quot;:&quot;2&quot;,  &quot;role_id&quot;:&quot;-1&quot;,  &quot;group_id&quot;:&quot;-1&quot;,  &quot;user_id&quot;:&quot;101&quot;}Example 2 response ;{  &quot;id&quot;:&quot;206&quot;,  &quot;profile_id&quot;:&quot;2&quot;,  &quot;role_id&quot;:&quot;-1&quot;,  &quot;group_id&quot;:&quot;8&quot;,  &quot;user_id&quot;:&quot;-1&quot;}Search profileMembersUse a GET method with filters and search terms to search for profileMembers.  URL/API/portal/profileMemberEntry?p={page}&amp;amp;c={count}&amp;amp;o={orders}&amp;amp;f={filters}&amp;amp;d={deploy}  MethodGET  Data ParamsStandard search parameters are available.There is a mandatory filter on:  member_type=. For example, retrieve the profileMembers of type user: /API/portal/profileMember?p=0&amp;amp;c=10&amp;amp;f=member_type%3duserYou can also filter also on:  profile_id={profile_id}: retrieve only the profileMembers related to the specified profile_id. /API/portal/profileMember?p=0&amp;amp;c=10&amp;amp;f=member_type%3duser&amp;amp;f=profile_id%3d1  user_id={user_id}: retrieve only the profileMembers related to the specified user_id. API/portal/profileMember?p=0&amp;amp;c=10&amp;amp;f=member_type%3duser&amp;amp;f=profile_id%3d1&amp;amp;f=user_id%3d101  role_id={role_id}: retrieve only the profileMembers related to the specified role_id. API/portal/profileMember?p=0&amp;amp;c=10&amp;amp;f=member_type%3drole&amp;amp;f=profile_id%3d1&amp;amp;f=role_id%3d101  group_id={group_id}: retrieve only the profileMembers related to the specified group_id. API/portal/profileMember?p=0&amp;amp;c=10&amp;amp;f=member_type%3dgroup&amp;amp;f=profile_id%3d1&amp;amp;f=group_id%3d101Success ResponseAn array of profileMember objects  Code: 200  Delete a profileMemberUse the DELETE method to delete an existing profileMember.  URL/API/portal/profileMember/:profileMemberId  MethodDELETE  Success Response  Code: 200  ThemeDescriptionUse the theme resource for managing the portal and mobile app theme (look &amp;amp; feel).IdentifierSimple, the ID of the object (a long value)MethodsThe methods used for this resource are:  POST - Change the theme  PUT - Restore the default themeChange a themeUse the method POST for applying a new theme. Two types are permitted: portal and mobile.  URL/API/portal/theme  MethodPOST  Request PayloadExample 1: Change the portal theme by applying the definition in an already uploaded zip file.{  &quot;type&quot;:&quot;portal&quot;,  &quot;zipFilePathportal&quot;:&quot;tmp_1939634566964075173.zip&quot;}Example 2: Change the mobile app theme by applying the definition in an already uploaded zip file.{  &quot;type&quot;:&quot;mobile&quot;,  &quot;zipFilePathmobile&quot;:&quot;tmp_5691887787551776477.zip&quot;}Success Response  Code: 200  Restore a default themeUse the method PUT method for restoring the default theme. Two types are permitted: portal and mobile  URL/API/portal/theme/unusedId  MethodPUT  Request PayloadExample 1: Restore the default portal theme.{  &quot;type&quot;:&quot;portal&quot;}Example 2: Restore the default mobile theme.{  &quot;type&quot;:&quot;mobile&quot;}Success Response  Code: 200  ",
      "url": " /bonita/7.7/development/rest-api/portal-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-7-development-rest-api-rest-api-extensions": {
      "title": "REST API extensions",
      "content"     : "REST API extensionsNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.REST API extensions provide a solution for integration between forms/pages and third party systems (including Bonita Engine). They can be used to query business data, Bonita Engine APIs, or an external informationsystem (such as a database, web service, LDAP directory…). They also help to keep a clean separation between the front-end (forms, pages, and interfaces visible to users) and the back-end (processes).PrerequisitesExample descriptionGenerate a new REST API extension skeletonWrite the codeMain source codeTest source codeBuild, deploy and test the REST API extensionExample ready to useBDM and Performance mattersTroubleshootingPrerequisitesPrerequisites for developing a REST API extension are:  Java/Groovy development expertise.  Basic knowledge of Maven.  Access to Maven central repository. If your provider is restricting Internet access you may configure proxy settings or create a mirror repository.Mirror configuration: When setting a mirror using a &amp;lt;mirrorOf&amp;gt;*&amp;lt;/mirrorOf&amp;gt; redirection, add an exception for the studio internal repository id like this: &amp;lt;mirrorOf&amp;gt;*,!studio-internal-repository&amp;lt;/mirrorOf&amp;gt; in your settings.xmlExample descriptionThe following sections show how to create a REST API extension. As an example, we create a REST API extension that use Bonita Engine to provide user informations (first name, last name, email address).Generate a new REST API extension skeleton  In the Development menu, choose REST API Extension then New….  Enter a Name, for example User informations REST API Extension.  Enter a Description, for example Query Bonita Engine to retrieve user informations.  Enter a package name, use to set the artifact Group id, for example: com.company.rest.api  Enter a Project name, for example userInformationRestAPIExension  Click Next.  Enter the pathTemplate for this REST API extension, for example userInformation. This will be the access point of the API, and follows this pattern: {bonita_portal_context}/API/extension/userInformation.  As this REST API extension does not access business data you can safely uncheck “Add BDM dependencies” check box.  Define a Permission name for the extension (replace the default one), for example read_user_information. This is the name of the permission the users should have to be granted access to the extension (see REST API extensions usage  Click Next  This screen defines URL parameters that will be passed to the API. By default, p and c parameters are defined to enables paged result, it applies well in our examples as we want to return a list of users.  Click Create.Write the codeMain source codeFirst step would be to remove files and code related to REST API configuration as we don’t need to define configuration parameters for our REST API:  Delete configuration.properties from src/main/resources folder  Delete testConfiguration.properties from src/test/resources  Remove the setup of configuration file mock. Edit IndexTest.groovy, go to setup() method and remove the line starting with resourceProvider....  Remove the example of configuration usage in Index.groovy file (see comment starting with: “Here is an example of you can…”).Now we can add our business logic. In Index.groovy, in doHandle method, locate the “Your code goes here” comment and add your code below (removing the existing result and return statement):// Convert parameters from string to intp = p as intc = c as int// Initialize the list to store users information  def usersInformation = []// Get the list of user  List&amp;lt;User&amp;gt; users = context.apiClient.identityAPI.getUsers(p*c, c, UserCriterion.FIRST_NAME_ASC)// Iterate over each userfor (user in users) {	// Get user extra information (including email address)	ContactData contactData = context.apiClient.identityAPI.getUserContactData(user.id, false)	// Create a map with current user first name, last name and email address	def userInformation = [firstName: user.firstName, lastName: user.lastName, email: contactData.email]	// Add current user information to the global list	usersInformation &amp;lt;&amp;lt; userInformation}// Prepare the resultdef result = [p: p, c: c, userInformation: usersInformation]int startIndex = p*cint endIndex = p*c + users.size() - 1// Send the result as a JSON representationreturn buildPagedResponse(responseBuilder, new JsonBuilder(result).toString(), startIndex, endIndex, context.apiClient.identityAPI.numberOfUsers)Make sure you are adding all missing imports (default shortcut CTRL+SHIFT+o).Test source codeNow we need to update the test to verify the behavior of our REST API extension by editing IndexTest.groovy.First step is to define some mocks for our externals dependencies such as Engine Identity API. Add the following mocks declaration after the existing ones:def apiClient = Mock(APIClient)def identityAPI = Mock(IdentityAPI)def april = Mock(User)def william = Mock(User)def walter = Mock(User)def contactData = Mock(ContactData)Now we need to define the generic behavior of our mocks. setup() method should have the following content:context.apiClient &amp;gt;&amp;gt; apiClientapiClient.identityAPI &amp;gt;&amp;gt; identityAPIidentityAPI.getUsers(0, 2, _) &amp;gt;&amp;gt; [april, william]identityAPI.getUsers(1, 2, _) &amp;gt;&amp;gt; [william, walter]identityAPI.getUsers(2, 2, _) &amp;gt;&amp;gt; [walter]april.firstName &amp;gt;&amp;gt; &quot;April&quot;april.lastName &amp;gt;&amp;gt; &quot;Sanchez&quot;william.firstName &amp;gt;&amp;gt; &quot;William&quot;william.lastName &amp;gt;&amp;gt; &quot;Jobs&quot;walter.firstName &amp;gt;&amp;gt; &quot;Walter&quot;walter.lastName &amp;gt;&amp;gt; &quot;Bates&quot;identityAPI.getUserContactData(*_) &amp;gt;&amp;gt; contactDatacontactData.email &amp;gt;&amp;gt; &quot;test@email&quot;Now you can define a test method. Replace existing test should_return_a_json_representation_as_result method with the following one:def should_return_a_json_representation_as_result() {  given: &quot;a RestAPIController&quot;  def index = new Index()  // Simulate a request with a value for each parameter  httpRequest.getParameter(&quot;p&quot;) &amp;gt;&amp;gt; &quot;0&quot;  httpRequest.getParameter(&quot;c&quot;) &amp;gt;&amp;gt; &quot;2&quot;  when: &quot;Invoking the REST API&quot;  def apiResponse = index.doHandle(httpRequest, new RestApiResponseBuilder(), context)  then: &quot;A JSON representation is returned in response body&quot;  def jsonResponse = new JsonSlurper().parseText(apiResponse.response)  // Validate returned response  apiResponse.httpStatus == 200  jsonResponse.p == 0  jsonResponse.c == 2  jsonResponse.userInformation.equals([[firstName:&quot;April&quot;, lastName: &quot;Sanchez&quot;, email: &quot;test@email&quot;],[firstName:&quot;William&quot;, lastName: &quot;Jobs&quot;, email: &quot;test@email&quot;]  ]);}You should now be able to run your unit test. Right click the IndexTest.groovy file and click on REST API Extension &amp;gt; Run JUnit Test. The JUnit view displays the test results. All tests should pass.Build, deploy and test the REST API extensionStudio let you build and deploy the REST API extension in the embedded test environment.First step is to configure security mapping for your extension in Studio embedded test environment:  In the Development menu, choose REST API Extension then Edit permissions mapping.  Append this line at the end of the file:profile|User=[read_user_information] This means that anyone logged in with the user profile is granted this permission.  Save and close the file.Now you can actually build and deploy the extension:  In the Development menu, choose REST API Extension &amp;gt; Deploy…  Select the userInformationRestAPIExension REST API extension.  Click on Deploy button.  In the coolbar, click the Portal icon. This opens the Bonita Portal in your browser.  In the Portal, change to the Administrator profile.  Go to the Resources tab, and check that the User information REST API extension is in the list of REST API extension resources.Now you finally test your REST API extension:  Open a new tab in the web browser  Enter the following URL: http://localhost:8080/bonita/API/extension/userInformation?p=0&amp;amp;c=10.  The JSON response body should be displayed.The REST API extension can be used in forms and pages in the UI Designer using an External API variable.Example ready to useYou can download the REST API extension described in the tutorial above or check data source REST API extension as a reference.BDM and Performance mattersBe aware that a poor implementation of a custom REST API accessing BDM objects can lead to poor performance results. See the best practice on this matter.Troubleshooting  I get the following stacktrace when using Java 8 Date types (LocalDate, LocalDateTime…) in my Rest API Extensionjava.lang.StackOverflowError	at java.security.AccessController.doPrivileged(Native Method)	at java.net.URLClassLoader.findClass(URLClassLoader.java:361)	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1806)	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1735)	at java.lang.Class.forName0(Native Method)	at java.lang.Class.forName(Class.java:264)	at groovy.lang.MetaClassRegistry$MetaClassCreationHandle.createWithCustomLookup(MetaClassRegistry.java:149)	at groovy.lang.MetaClassRegistry$MetaClassCreationHandle.create(MetaClassRegistry.java:144)	at org.codehaus.groovy.reflection.ClassInfo.getMetaClassUnderLock(ClassInfo.java:253)	at org.codehaus.groovy.reflection.ClassInfo.getMetaClass(ClassInfo.java:285)	at org.codehaus.groovy.reflection.ClassInfo.getMetaClass(ClassInfo.java:295)	at org.codehaus.groovy.runtime.metaclass.MetaClassRegistryImpl.getMetaClass(MetaClassRegistryImpl.java:261)	at org.codehaus.groovy.runtime.InvokerHelper.getMetaClass(InvokerHelper.java:871)	at org.codehaus.groovy.runtime.DefaultGroovyMethods.getMetaPropertyValues(DefaultGroovyMethods.java:364)	at org.codehaus.groovy.runtime.DefaultGroovyMethods.getProperties(DefaultGroovyMethods.java:383)	at groovy.json.JsonOutput.writeObject(JsonOutput.java:290)	at groovy.json.JsonOutput.writeIterator(JsonOutput.java:445)	at groovy.json.JsonOutput.writeObject(JsonOutput.java:269)	at groovy.json.JsonOutput.writeMap(JsonOutput.java:424)	at groovy.json.JsonOutput.writeObject(JsonOutput.java:294)	at groovy.json.JsonOutput.writeIterator(JsonOutput.java:441)	at groovy.json.JsonOutput.writeObject(JsonOutput.java:269)	at groovy.json.JsonOutput.writeMap(JsonOutput.java:424)	at groovy.json.JsonOutput.writeObject(JsonOutput.java:294)The groovy.json.JSONBuilder does not support Java 8 Date types serialization for the groovy version currently used by Bonita.As a workaround you have to format dates in a new data structure before using the JSONBuilder.Example:def employee = //A given employee objectdef result = [			name:employee.name,			birthDate:employee.birthDate.format(DateTimeFormatter.ISO_LOCAL_DATE)			]		return buildResponse(responseBuilder, HttpServletResponse.SC_OK,new JsonBuilder(result).toPrettyString())We do not recommend to manage time zone at the Rest API level, as the local of the Rest API server, the Bonita Engine server, and the End User machine could be different.So we encourage you to manitpulate UTC dates only server-side.  You can see how we manage the time zone using the date time picker. This time zone should only be managed in the end user interface.",
      "url": " /bonita/7.7/development/rest-api/rest-api-extensions",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-7-development-rest-api-rest-api-overview": {
      "title": "REST API overview",
      "content"     : "REST API overviewThis page contains an overview of how to integrate an application with Bonita using REST.OverviewPhases of operationAuthenticate to BonitaExecute REST calls and integrate the results in your applicationLogout from BonitaAPI ExtensionsCreate a resourceRead a resourceExtend resource responseWith compound identifierUpdate a resourceWith compound identifier:Delete resourcesSearch for a resourceWalk-through: how to start a case using the REST APIOverviewIf your application is using a technology other than Java, you can integrate it with the Bonita solution using the Web REST API. This API provides access to all Bonita objects (like processes, tasks, users, connectors etc.), to execute operations on them (create, retrieve, update, delete). You can use these operations to create a workflow with Bonita and integrate it into your application. The Bonita Engine remains responsible for executing the workflow logic (connectors, gateways with conditions, messages, timers etc.) while your application gives access to the workflow. Users can manage processes and tasks, and perform administrative activities.Access to the Web REST API depends on REST API authorization settings.Phases of operationThere are three phases of operation for an application that is integrated with Bonita through the Web REST API: authentication, execution, and logout.Authenticate to BonitaCalls to the Web REST API require you to first log in as a user registered in the Engine database.To log in, use the following request:| | ||:-|:-|| Request URL | http://host:port/bonita/loginservice| | Request Method | POST| | Form Data | username: a usernamepassword: a password redirect: true or falseredirectURL: the URL of the page to be displayed after login tenant: the tenant to log in to (optional for Enterprise and Performance editions, not supported for Community, Teamwork and Efficiency editions)|The response to this call generates cookies, which must be transfered with each subsequent calls. If the REST API is used in an application running in a web browser, this is handled automatically by the browser.X-Bonita-API-Token cookieThe security against CSRF attacks is enabled by default for all fresh installations. the subsequence REST API calls using DELETE, POST, or PUT HTTP methods must contain the header below:X-Bonita-API-Token: example-dummy-not-be-used-valueSetting the redirect parameter to false indicates that the service should not redirect to Bonita Portal (after a successful login) or to the login page (after a login failure).Execute REST calls and integrate the results in your applicationAfter the application is connected to the Bonita Engine, you can start calling API methods. The following is a typical scenario for an end user.  Start a new case with variables: Provide a form for the user to enter initial data. Then call the method to start a new case using the values entered by the user to initialize some variables. The engine will start the execution of the process. Depending on the design of your process, there might then be some human tasks available for the end user.  List the pending tasks for a user: Retrieve a list of available human tasks for the logged in user. When the user selects a task to do, you can display the corresponding form. It can be an external form or a Bonita form that can be accessed by url.  Update variables and execute a task: If your application is using an external form, update the values of the variables in your process. You can use a method to update process or activity variables with values coming from your application. When the user submits the external form, you can call a method to execute a task. The engine will then continue the execution of the workflow as designed.  Handle tasks in error: Get a list of tasks that are in the failed state, and then replay each task by doing three steps: get the list of failed connectors, reset the state of failed connectors and replay the failed task.Logout from BonitaWhen processing is complete, you must log out.To log out, use the following request:| | ||:-|:-|| Request URL | http://host:port/bonita/logoutservice| | Request Method | GET| | Query parameter | redirect: true or false (default set to true)|Setting the redirect parameter to false indicates that the service should not redirect to the login page after logging out.API ExtensionsYou can create Rest API Extensions to extend the Rest API by adding missing ressources (not provided by the Rest API). It is possible for an extension to interact with the engine (via the API) or with any other external service (for example a database, a directory, or a web service).Create a resource| | ||:-|:-|| Request URL | http://.../API/{API_name}/{resource_name}/  | | Request Method | POST| | Request Payload | an item in JSON| | Response | the same item in JSON, containing the values provided in the posted item, completed with default values and identifiers provided by Bonita Engine.|Read a resource      Request URL  http://.../API/{API_name}/{resource_name}/{id}   Request Method  GET  Response  an item in JSON  Example http://.../API/identity/user/5 Extend resource responseOn some resources, in GET methods the d (deploy) URL query parameter can be used to extend the response objects. The value of this parameter consists of an attribute for which you want to make an extended request (called a deploy) and retrieve attributes of a linked resource.This means that instead of retrieving the ID or a parent or referenced resource, you can retrieve the full object.For example, when you retrieve a task, you can also retrieve the process definition attributes in addition to the process definition ID that is already part of the task resource. The supported deploy values for a task include its process (d=processId).Specifiy multiple d parameter to extend several resources. For instance, to retrieve the flow node of id 143 and the associated process, case and assigned user, call /API/bpm/flowNode/143?d=processId&amp;amp;d=caseId&amp;amp;d=assigned_idWith compound identifierThe order of the identifier parts for each resource type is given in the table above.      Request URL  http://.../API/{API_name}/{resource_name}/{id_part1}/{id_part2}   Request Method  GET  Response  an item in JSON  Example http://.../API/identity/membership/5/12/24 Update a resource| | ||:-|:-|| Request URL | http://.../API/{API_name}/{resource_name}/{id} | | Request Method | PUT| | Request Payload | a map in JSON containing the new values for the attributes you want to change.|| Response | the corresponding item in JSON with new values where you requested a modification|Example http://.../API/identity/user/5With compound identifier:Response: the corresponding item in JSON with new values where you requested a modification.| | ||:-|:-|| Request URL | http://.../API/{API_name}/{resource_name}/{id_part1}/{id_part2} | | Request Method | PUT| | Request Payload | ` a map in JSON containing the new values for the attributes you want to change | | Response |  the corresponding item in JSON with new values where you requested a modification`|Examplehttp://.../API/identity/membership/5/12/24 Delete resourcesUse the DELETE request to remove multiple resources.| | ||:-|:-|| Request URL | http://.../API/{API_name}/{resource_name}/ | | Request Method | DELETE| | Request Payload | A list of identifiers in JSON, for example [&quot;id1&quot;,&quot;id2&quot;,&quot;id3&quot;]. Compound identifiers are separated by ‘/’ characters.|| Response | empty |Examplehttp://.../API/identity/membership/ Search for a resourceThe required object is specified with a set of filters in the request URL. The URL parameters must be URL-encoded.Results are returned in a paged list, and you can specify the page (counting from zero), the number of results per page (count), and the sort key (order). You can see the total number of matching results in the HTTP response header Content-Range.If you are searching for business data using a custom query, there must be a count query in the BDM. If there is no count query, results from a custom query on business data cannot be paged properly (the header Content-Range will be absent). For business data default queries, the count query is defined automatically.The available filters are the attributes of the item plus some specific filters defined by each item.| | ||:-|:-|| Request URL | http://.../API/{API_name}/{resource_name}?p={page}&amp;amp;c={count}&amp;amp;o={order}&amp;amp;s={query}&amp;amp;f={filter_name}={filter_value}&amp;amp;f=... | | Request Method | GET| | Response | an array of items in JSON|Example/API/identity/user?p=0&amp;amp;c=10&amp;amp;o=firstname&amp;amp;s=test&amp;amp;f=manager_id=3For a GET method that retrieves more than one instance of a resource, you can specify the following request parameters:  p: index of the page to display  c: maximum number of elements to retrieve  o: order of presentation of values in response: must be either attributeName ASC or attributeName DESC. The final order parameter value must be URL encoded.  f: list of filters, specified as attributeName=attributeValue. To filter on more than one attribute, specify an f parameters for each attribute. The final filter parameter value must be URL encoded. The attributes you can filter on are specific to the resource.  s: search on name or search indexes. The matching policy depends on the configuration of word-based search. For example, if word-based search is enabled, s=Valid returns matches containing the string “valid” at the start of any word in the attribute value word, such as “Valid address”, “Not a valid address”, and “Validated request” but not “Invalid request”.If word-based search is disabled, s=Valid returns matches containing the string “valid” at the start of the attribute value, such as “Valid address” or “Validated request” but not “Not a valid address” or “Invalid request”.Walk-through: how to start a case using the REST APIInstall curl command line toolcurl is available on Linux OS and it transfers data from or to a server with various protocols such as HTTP and HTTPS.$ sudo apt install curlNOTE: this is to be done only once.Deploy a process  Start a studio  Make sure the current organization contains a User with username walter.bates and password bpm  Create a new Registration process  Configure the process so that walter.bates will be able to start it  Click on the Run buttonLogin$ curl -v -c saved_cookies.txt -X POST --url &#39;http://localhost:8080/bonita/loginservice&#39; --header &#39;Content-Type: application/x-www-form-urlencoded; charset=utf-8&#39; -O /dev/null -d &#39;username=walter.bates&amp;amp;password=bpm&amp;amp;redirect=false&amp;amp;redirectURL=&#39; The above `curl` command saved the cookies on the disk, in the `saved_cookies.txt` file.  The cookies file must be reused with the REST API calls (HTTP requests) in order to provide session information. The value of X-Bonita-API-Token cookie must be passed also in the header of the subsequent REST API calls, when any of the POST, PUT or DELETE HTTP method is used.The content of the cookies file is below:$ cat saved_cookies.txt localhost	FALSE	/bonita/	FALSE	0	bonita.tenant	1#HttpOnly_localhost	FALSE	/bonita/	FALSE	0	JSESSIONID	9F9665280B367259AC421378B69C3244localhost	FALSE	/	FALSE	0	X-Bonita-API-Token	2f86dcab-9b54-45e6-8eb1-f82c2a2f8e25List installed process definitions$ curl -b saved_cookies.txt -X GET --url &#39;http://localhost:8080/bonita/API/bpm/process?c=10&amp;amp;p=0&#39;[  {&quot;id&quot;: &quot;6090246829515228480&quot;,&quot;displayDescription&quot;: &quot;Enable the user to request to be registered and the validator to review the request.&quot;,&quot;deploymentDate&quot;: &quot;2017-06-08 14:36:27.520&quot;,&quot;description&quot;: &quot;Enable the user to request to be registered and the validator to review the request.&quot;,&quot;activationState&quot;: &quot;ENABLED&quot;,&quot;name&quot;: &quot;Registration&quot;,&quot;deployedBy&quot;: &quot;4&quot;,&quot;displayName&quot;: &quot;Registration&quot;,&quot;actorinitiatorid&quot;: &quot;102&quot;,&quot;last_update_date&quot;: &quot;2017-06-08 14:36:27.673&quot;,&quot;configurationState&quot;: &quot;RESOLVED&quot;,&quot;version&quot;: &quot;743.01&quot;  }]The response shows that there is 1 process definition installed.The Registration process has a process definition id equal to 6090246829515228480Instantiate one case of the Registration process$  curl -b saved_cookies.txt -X POST --url &#39;http://localhost:8080/bonita/API/bpm/case&#39; --header &#39;Content-Type: application/json&#39; --header &#39;X-Bonita-API-Token: 2f86dcab-9b54-45e6-8eb1-f82c2a2f8e25&#39; -d &#39;{&quot;processDefinitionId&quot;:&quot;6090246829515228480&quot;}&#39;{  &quot;id&quot;: &quot;1003&quot;,  &quot;end_date&quot;: &quot;&quot;,  &quot;startedBySubstitute&quot;: &quot;4&quot;,  &quot;start&quot;: &quot;2017-06-08 14:40:35.272&quot;,  &quot;state&quot;: &quot;started&quot;,  &quot;rootCaseId&quot;: &quot;1003&quot;,  &quot;started_by&quot;: &quot;4&quot;,  &quot;processDefinitionId&quot;: &quot;6090246829515228480&quot;,  &quot;last_update_date&quot;: &quot;2017-06-08 14:40:35.272&quot;}Logout$ curl -b saved_cookies.txt -X GET --url &#39;http://localhost:8080/bonita/logoutservice?redirect=false&#39;TroubleshootingHTTP/1.1 401 UnauthorizedIf the HTTP response’s status is 401 Unauthorized:  make sure that the cookies have been transfered with the call  make sure that the cookies transfered are the ones generated during the last sucessfull login call  if one of the PUT, DELETE or POST method is used, make sure that the X-Bonita-API-Token header is included  if the X-Bonita-API-Token header is included, make sure that the value is the same as the one of the cookie generated during the last login  Maybe a logout was issued or the session has expired; try to log in again, and re run the request with the new cookies and the new value for the X-Bonita-API-Token header.",
      "url": " /bonita/7.7/development/rest-api/rest-api-overview",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-7-development-rest-api-system-api": {
      "title": "system API",
      "content"     : "system APIi18nlocalei18ntranslationSessionTenanti18nlocaleDescriptionList the available locales.Representation{  &quot;name&quot;:&quot;_Name of the language_&quot;,  &quot;locale&quot;:&quot;_code of the locale_&quot;}MethodsThe methods used for this resource are:  GET - list available localesList available locales  URL/API/system/i18nlocale  MethodGET  Data ParamsStandard search parameters are available.  Success ResponseThe list of locales as JSON  Code: 200  Payload:[  {&quot;name&quot;:&quot;English&quot;,&quot;locale&quot;:&quot;en&quot;  },  {&quot;name&quot;:&quot;Italiano&quot;,&quot;locale&quot;:&quot;it&quot;  },  {&quot;name&quot;:&quot;Deutsch&quot;,&quot;locale&quot;:&quot;de&quot;  }]i18ntranslationDescriptionGet the translations for the specified locale.Representation{  &quot;value&quot;:&quot;_the translation_&quot;,  &quot;key&quot;:&quot;_the key of the translation_&quot;}MethodsThe methods used for this resource are:  GET - the translations for the specified localeList available translationsReturns all translations of the product. If a locale is specified in the filter, that translation for that locale are returned. if no locale is specified, the translations in English are returned.  URL/API/system/i18ntranslation  MethodGET  Data ParamsStandard search parameters are available.Example: /API/system/i18ntranslation?p=0&amp;amp;c=2&amp;amp;f=locale%3dde  Success ResponseThe list of translations as JSON  Code: 200  Payload:[  {&quot;value&quot;:&quot; Um dies zu tun, gehen Sie zu %entitymappingprofilelink%.&quot;,&quot;key&quot;:&quot; To do so, go to %entitymappingprofilelink%.&quot;  }, {&quot;value&quot;:&quot; Um dies zu tun, gehen Sie zu %profilelink%.&quot;,&quot;key&quot;:&quot; To do so, go to %profilelink%.&quot;  }]SessionDescriptionGet the current session.Identifierunusedid, the id is not used, the current session is always returnedRepresentation{  &quot;user_id&quot;:&quot;_id of the user_&quot;,  &quot;user_name&quot;:&quot;_name of the user_&quot;,  &quot;session_id&quot;:&quot;_id of the session_&quot;,  &quot;conf&quot;:&quot;_session configuration_&quot;,  &quot;is_technical_user&quot;:&quot;_true if the user is the technical user, false otherwise_&quot;,  &quot;version&quot;:&quot;_product version_&quot;}MethodsThe methods used for this resource are:  GET - get the current sessionGet the current session  URL/API/system/session/unusedid  MethodGET  Success ResponseThe session in JSON  Code: 200  Payload:{  &quot;user_id&quot;:&quot;12&quot;,  &quot;user_name&quot;:&quot;william.jobs&quot;,  &quot;session_id&quot;:&quot;2885803778329414975&quot;,  &quot;conf&quot;:&quot;[&quot;D7A27EA0483FBAF903BD61BD16D70EF610DBE6D4&quot;]&quot;,  &quot;is_technical_user&quot;:&quot;false&quot;,  &quot;version&quot;:&quot;6.4.0&quot;}TenantDescriptionPause and resume tenant services in order to do maintenance on a tenant.Identifierunusedid, the id is not used, the current tenant is always returnedRepresentation{  &quot;paused&quot;:&quot;_true if the tenant is paused, false otherwise_&quot;,  &quot;id&quot;:&quot;_id of the tenant_&quot;}MethodsThe methods used for this resource are:  GET - get the current tenant  PUT - pause or resume the tenantGet the current tenant  URL/API/system/tenant/unusedid  MethodGET  Success ResponseThe tenant id with its status in JSON  Code: 200  Payload:{  &quot;paused&quot;:&quot;false&quot;,  &quot;id&quot;:&quot;1&quot;}Pause or resume the current tenant  URL/API/system/tenant/unusedid  MethodPUT  Request Payload{  &quot;paused&quot;:&quot;true&quot;}or{  &quot;paused&quot;:&quot;false&quot;}Success Response  Code: 200  ",
      "url": " /bonita/7.7/development/rest-api/system-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-7-development-rest-api-tenant-api": {
      "title": "tenant API",
      "content"     : "Tenant APIBDMBDMDescriptionShow status or install or update the Business Data Model.Methods  GET - Read BDM status.  POST - Add or update Business Data ModelGet BDM statusMake this call to get the status the BDM.  URL/API/tenant/bdm  MethodGet  Success Response  Code: 200  Payload:{  &quot;id&quot;: &quot;309&quot;,  &quot;name&quot;: &quot;client_bdm.zip&quot;,  &quot;type&quot;: &quot;BDM&quot;,  &quot;state&quot;: &quot;INSTALLED&quot;,  &quot;lastUpdatedBy&quot;: &quot;-1 &quot;,  &quot;lastUpdateDate&quot;: &quot;2018-01-17T17:05:36.671Z&quot;}Note: lastUpdatedBy&quot; value is always -1 because only the tenant_technical_user can install BDM.Install or update a BDMInstall or update a BDM on your tenant.Need to be done in two successive steps:1 - Upload a BDM file2 - Install/Update the previously uploaded fileNote: To do this, your tenant services need to be paused.Upload a BDM file  URL/portal/fileUpload  MethodPOST  Required headers Content-Type: multipart/form-data  Success Response  Code: 200  Request Payload tmp_uploaded_bdm.zipInstall/Update a file previously uploaded  URL/API/tenant/bdm  MethodPOST  Success Response  Code: 200  Request Payload {  fileUpload: &quot;tmp_uploaded_bdm.zip&quot; }   Note: Use the file name returned in the first step to perform the second step.Note: In Efficiency, Performance and Enterprise editions, if you have an access control file installed on your tenant, you need to deleteit before installing or updating your BDM.",
      "url": " /bonita/7.7/development/rest-api/tenant-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-7-development-software-extensibility": {
      "title": "Software extensibility",
      "content"     : "Software extensibilityBonita provides a rich set of features by default. These features are designed to meet the needs of most of your projects. However, if a project has a need that was not anticipated and cannot be met by the default features, Bonita has been designed to be extensible. This page lists the extension points that are available.Stable extension pointsConnectorsActor filtersEngine APIREST APICustom pagesCustom widgetsImport and export exchange filesAuthentication serviceEvent handlersBonitaStudioBuilderPortal look &amp;amp; feelPortal language packCustom data typesUnstable extension pointsBackward compatibilityStable extension pointsThe following elements are designed to be extension points of Bonita. These extension points are guaranteed to be stable across versions of Bonita 6: Java interfaces and XML schema will be kept backward compatible so that your implementation will work even after a Bonita version upgrade.ConnectorsIn Community, Teamwork, Efficiency, Performance and Enterprise editionsBonita comes with more than 80 standard connectors to the major information system components: major databases (Oracle, Microsoft, Postgres, etc.), SOAP Webservice, Salesforce, Email, etc.A new connector enables you to provide new connectivity capabilities for processes. To implement a new connector, you need to provide some XML description files and a Java class respecting the Connector interface. Connectors can be implemented directly from Bonita Studio.Actor filtersIn Community, Teamwork, Efficiency, Performance and Enterprise editionsBonita comes with a set of standard actor filters that can be used to reduce the list of candidates for process tasks.A new actor filter enables you to provide new filtering capabilities to processes. To implement a new actor filter, you need to provide some XML description files and a Java class respecting the UserFilter interface. Actor filters can be implemented directly from Bonita Studio.Engine APIIn Community, Teamwork, Efficiency, Performance and Enterprise editionsThe Bonita Engine APIs enable you to:  start and stop the engine  design, install, configure and interact with processes  manage usersProcessBuilder and Business Objects DAO are examples of APIs that can be leveraged in your development. They will remain stable in time.REST APIIn Community, Teamwork, Efficiency, Performance and Enterprise editionsThe REST APIs enable you to integrate your Bonita processes into your application and execute operations on Bonita objects including business objects. Pages and forms created with the UI designer reply on the REST APIs to manage data.In addition to the standard APIs and resources, you can define REST API extensions. In the Bonita subscription edition, Bonita Studio contains tooling for creating, testing, and deploying REST API extensions.Custom pagesIn Community, Teamwork, Efficiency, Performance and Enterprise editionsA custom page is a page that you can add into Bonita Portal to form part of an application, customize information provided in default portal pages, or to add new features to the portal. To implement a page, you need to provide HTML, CSS and Javascript resources respecting some packaging constraints. You can create a page using the UI designer, which automatically creates a well-formed page. You can also use the legacy 6.x custom page construction methods.Note that although the page framework provided in the product is stable, we cannot guarantee that all custom pages will work with future versions, because this depends on the details of how the page is implemented.Custom widgetsIn Community, Teamwork, Efficiency, Performance and Enterprise editionsIf the standard UI designer widgets do not meet your needs, you can create a custom widget. You can then use your custom widget in pages, forms, and (for Subscription editions) fragments.Import and export exchange filesIn Community, Teamwork, Efficiency, Performance and Enterprise editionsIncluded in the Engine APIs are methods to import and export various items. These methods manipulate files with formats that are versioned. Newer versions of the file format are designed to be backward compatible with earlier versions. The following items have import and export API methods:  organization (users, groups, roles)  parameters  custom pages  connectorsAuthentication serviceIn Teamwork, Efficiency, Performance and Enterprise editionsFrom Bonita 6.3, the Engine authentication service is considered to be an official extension point of the solution. It is now safe to provide your own implementation of this service to better fit the needs of your projects.Default authentication implementations are provided allow to check user credentials from the Bonita database, LDAP or a CAS SSO server (using JAAS).To implement an Authentication Service, provide a Java class respecting the Authentication Service interface.Event handlersIn Teamwork, Efficiency, Performance and Enterprise editionsAn event handler is an extension to the engine that is configured to run when a specified event occurs. An event is a change to any object in the database.To implement an event handler, you need to provide a Java class respecting the Handler interface.BonitaStudioBuilderIn Teamwork, Efficiency, Performance and Enterprise editionsBonita includes a script, BonitaStudioBuilder (also known as the Workspace API), for building a bar file from a process in a repository. This intended to be used for automating process builds in a continuous integration and testing environment.You can use the BonitaStudioBuilder to build a bar file for processes stored in a repository. This script will be kept stable in time.Portal look &amp;amp; feelIn Teamwork, Efficiency, Performance and Enterprise editionsThe Bonita Portal Look &amp;amp; Feel gives the ability to customize the appearance of the portal Web interface. As a Portal Administrator, you can import a new Look &amp;amp; Feel (.zip archive). To create a new Look &amp;amp; Feel, provide CSS and resources files.Portal language packBonita Portal comes with a number of language packs by default. You can also add languages. It is also possible to use this same mechanism to customize the portal terminology to your business environment. For example, an e-commerce business could change Cases to Orders.Custom data typesA custom data type is a Java object (.jar file) or an XML definition (.xsd file) of a data structure. You can create a custom data type and use it to define a process variable if the standard data types are not suitable for your process. Note that although the custom data type framework provided in the product is stable, we cannot guarantee that all custom data types will work with future versions, because this depends on the details of how the data type is implemented.Unstable extension pointsThe following elements may be used as extension points but there is no guarantee of stability across versions. No changes are planned, but we reserve the right to change make incompatible changes in any future version.  Portal URLs and Forms URLs. Some customer projects have used hard-coded or forged URLs to access specific pages of Bonita Portal or forms, to fit in with specific technology or navigation constraints. While such URLs have so far been quite stable, there is no guarantee that they will not change across Bonita versions. Recommendation: if your project relies on such URLs, make URL generation configurable so that you can easily change it if required after a Bonita upgrade.  Forms HTML templates. It is possible to modify the HTML page template, HTML process template, or HTML portal template to customize the appearance and behavior of forms. There is no guarantee that these templates will not change across Bonita versions. If a form uses some Javascript code based on an element in the HTML Document Object Model, the element may be moved, modified or removed in a future version so the Javascript will no longer work.  Authorization Rule Mapping. It is possible to modify authorization rules mapping applied to start a process, display process overview or execute a task. You can customize this mapping by defining your own bean and override property. See Authorization Rule MappingOnly the elements listed on this page are intended to be used as extension points. For other elements, there is no guarantee of stability, and a high probability of changes across versions. For example, the following should not be considered to be extension points:  Engine Services (other than those listed in this page). The Engine is structured as an aggregation of several services. This provides clear isolation of responsibility and eases maintenance. The interfaces, configuration files, and existence of services are not guaranteed across versions.Backward compatibilityIn Bonita 6.x and 7.x, we ensure backward compatibility of the following:  Engine API (except items marked as deprecated)  Web REST API (except items marked as deprecated)  Authentication Service (from 6.3.0 onwards)  XML file format for the following:  event handlers  BonitaStudioBuilder (also known as the Workspace API)  actor filters  connectors  form validators  import and export exchange files  We cannot ensure backward compatibility for the following:  Portal Look &amp;amp; Feel definition structure  Custom Pages definition structure  Custom data types definition structure  URLs  Forms definition structure and HTML templates  bonita home folder structure and content (removed since 7.3)",
      "url": " /bonita/7.7/development/software-extensibility",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "bonita-7-7-development-workspaces-and-repositories": {
      "title": "Workspaces and repositories",
      "content"     : "Workspaces and repositoriesNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.This page explains how to use a shared repository so that several people can collaborate on process design.Workspaces and repositoriesSwitch workspaceCreate a local repositoryExport/Import a repositoryChange repositoryUse a shared repositoryGitSVNWorkspaces and repositoriesA workspace is a directory where Bonita Studio stores working files related to process design. When you install Bonita Studio, a workspace is created automatically.A local repository is a directory within your workspace.You can use local repositories to organize your work efficiently, for example by separating processes that do not interact.A team repository is a shared repository on a Subversion (SVN) or Git server that is used by the team collaborating on developing a process.A shared repository has typical code management features: locks (SVN only), synchronization, versioning.Your workspace contains your local copy of the shared repository, which is synchronized with the shared repository on the SVN or Git server.Note that the values of the process configurations (such as parameters) will not be synchronized on the remote repository, to allow each Studio to have its own configuration.Switch workspaceThe default workspace is studio_install_directory/workspace.To use a different workspace:  Go to the Diagram menu and choose Switch workspace….  A pop up window shows the path of the workspace you are currently using.  In the pop up window, specify the path of the workspace you want to use. If the new workspace does not exist, you are asked whether you want to create it.  Click OK.  The workspace switch is applied the next time Bonita Studio starts. Click OK in the pop up window to restart the studio, or Cancel to continue in your current session.Create a local repositoryYou can create a local repository in your local workspace.The repository is created in your current workspace.To create a local repository:  Go to the Repository menu, choose Local, then choose Create new local repository.  Specify a name for the new repository.  Click OK .  A status window shows the progress of the repository being built.When the repository has been successfully created, a message shows you are working with the new local repository.  Click on OK to finish.A new local repository is created. A new directory with the same name as the repository is added to your local workspace folder.In Bonita Studio, you can see the new repository name shown at the top left, in the title bar.Export/Import a repositoryYou can export all the content from a repository for exchange or backup purposes:  Click on Diagram &amp;gt; Export…  Click  on Select All to embed the whole repository content into the BOS archive.  Choose a location on your local drive to store the archive and click on Finish.The exported archive can then be shared with other studios of the same version or newer.To import a BOS archive:  Click on Diagram &amp;gt; Import &amp;gt;  BOS Archive…  Choose the location of the archive on your local drive  In Subscription, you can choose the target repository of the imported content  Handle conflicting files if any  Click on ImportYou can retrieve the whole content of a studio workspace by exporting all its repositories and importing them into another studio.Change repositoryBefore you change to a different repository, make sure you have saved your work.To change repository, follow these steps:  In the Repository menu, choose Change the repository.  A list of the available repositories is displayed. These are the local and shared repositories in your current workspace.  Select the repository to switch to, and click OK.  A confirmation message is displayed when you are working in the new location.You can see the name of the current repository at the top, in the title bar.If the list does not contain the name of the repository you want to use, check that you are using the correct workspace, and if necessary, switch workspace.Use a shared repositoryGitPrerequisites  A remote Git repository (GitHub, Bitbucket…)  Basic Git workflow knowledge (Reference article)Git integration in StudioBonita Studio Git integration is based on the EGit Eclipse plugin.Git commands available in the studio interface:  Share with GitThis action connects the current repository to Git and shares it on a remote.To configure the remote, see the following Egit userguide or the Share on GitHub howto.CloneCreate a new Studio repository from an existing Git repository (that must contain a proper Bonita project). If the remote repository version is lower than the studio, a migration will be applied on the cloned repository. Be careful before pushing a migrated repository back to the remote: all contributors will have to use the proper studio version.  If you used Bonita on Git before Bonita 7.7.0, you might want to clone it from the studio. Be careful though: we cannot guarantee that the cloning of a repository not created with Bonita Studio will work properly.However, to do so, first check that your project on GitHub is “Bonita compliant”: * The Git repository must correspond to a Bonita repository (and not the Bonita Workspace) * The .project file must be present  * It is highly recommended to use the .gitignore file generated by Bonita when you share a Bonita repository from the studio.Still, the best way to proceed is to export the repository from the older version of the studio and import it in the new studio, and then share this repository on Git, although with this procedure, the history of revisions will be lost.  Commit…Shortcut action to add, commit and push the local changes.Push to UpstreamSend the local commited changes to the configured upstream remote repository. You should make a pull before pushing.Fetch from UpstreamDownload new data from the upstream remote repository. It doesn’t integrate any of this new data into your working files. Fetch is great for getting a fresh view on all the things that happened in a remote repository.Push branch…Send the local commited changes to a specfic branch on the remote repository. If the push fails, you may need to use make force push with the command line tool.PullFetch and try to integrate the remote changes of the current branch. This operation can put your repository in conflicting state.Use the Git staging view and provided merge tool to resolve the conflicts. You can abort the merge with a hard reset with the command line tool or the Reset... action.Switch branchChange current branch, checkout a new branch from remote or create a new branch.MergeMerge the content of a branch into current branch. Reference articleResetReset the content of the working tree to the head reference (latest commit).Rebase…Like a merge, you can retrieve the content of another using a rebase. It replay all commits of a selected branch into the current branch. Reference articleGit staging viewThis view display the current status of your repository. From this view you can stage/unstage your changes, commit and even commit and push. You can access to the compare editor using the contextal menu.More information available in EGit user guide.History viewThis view display the commit history of the repository.More information available in EGit user guide.StatusThis gives you connexion information with the remote as well as the current status (ahead or behind) compared to the remote.This information is also available at the top of Bonita Studio window, as well as at the top of the Git Staging view.  Those commands can be found in Repository &amp;gt; Team &amp;gt; Git menu.Conflict managementThe use of Git often lead to conflicts when contributions are merged. There is different ways to manage conflicts, with a diff tool, in a text editor…Bonita Studio integrates the default merge tool of EGit. Here are some hints on how to resolve conflicts using EGit: Manage conflicts using EGit.Advanced Git commandsGit worklow offers a lot of other features that are not directly integrated in Bonita Studio. You can still use them using the command line interface (available here). To retrieve the location of your repository on your filesystem go to /workspace/.Troubleshooting  My diagram has many validation issues after a clone / a switch branch operation: Keep in mind that Bonita artifacts (Business Data Model, Organization, Profiles, Applications, Pages …) are not redeployed when you perform a clone or a switch branch operation. So, if you switch from a branch A to a branch B, you may need for example to deploy manually your BDM to ensure that all the business objects specific to the branch B are available.  My git history view is empty: The history view is based on  the active editor or the current selection (in eclipse, a selection is a file selected in a package explorer). Sometimes you can manage to open the history view without having any active editor and nothing selected (which is often the case in Bonita because we only provide a package explorer in the REST API extensions editor) -&amp;gt; the history view does not display anything. Just open a diagram for example and then re-open your history view.SVNA shared repository is a repository on an SVN server. It can be accessed by members of the team working on a process definition.It is protected by username and password. Only directories in the SVN ‘trunk’ can be used as Bonita repositories.The repository created remotely is then copied to your default local workspace and synchronized.A shared Bonita development repository contains the artifacts developed in Bonita Studio and the UI Designer. For the UI Designer artifacts, there is no locking, merging, or conflict management.Caution: Items defined in Bonita Portal are not stored in the shared repository.This includes applications and custom profiles. To share these artifacts, export them into an external repository such as Git.Prerequisites  A central SVN server accessible by the process designers, accessible by URL, and protected by login and password.  The same version of Bonita must be used by all users of the shared repository.Create a shared repositoryThere are two stages to creating a repository: connect to the SVN server, then specify the name of the new repository. Follow these steps:  In the Repository menu, choose Team.  Click on Connect to the repository.  In the Create a new connection window, enter the URL, username, and password in the appropriate fields.  Click Next to connect to the remote SVN server.  From time to time, depending on your system and network security setup, you may be asked to confirm security credentials.  A popup displays a list of the existing Bonita repositories available on the SVN server.  Click on the button Create a new Bonita repository.  In the window, Repository name, give the repository a name e.g “my_new_repository”.  Click on OK.The new repository is created locally and copied remotely to the SVN server. You can configure synchronization for this new shared repository.Connect to a shared repositoryTo connect to a shared repository, follow these steps:  In the Repository menu, choose Team.  Click on Connect to the repository.  In the Create a new connection window, enter the URL, username, and password in the appropriate fields.  Click on Next to connect to the remote SVN server.  From time to time, depending on your system and network security setup, you may be asked to confirm security credentials.  A popup displays a list of the existing Bonita repositories available on the SVN server.  Select the name of the repository, and click Connect.  A message is displayed, showing that you are connected to the shared repository. You can see the name of repository at the top left, in the title bar.  Click on OK.The first time you connect to a repository, you might get a security warning.Configure security for the connection according to your organization’s security policy.Synchronize a shared repositorySynchronizing a shared repository means merging the changes you have made in your local copy into the central repository on the server, and updating your local copy with the result.There are three modes for synchronizing:  Recommended: Use manual synchronization for all repositories: With this mode, no automatic synchronization is done in either direction. This is the default behavior.You launch synchronization manually, by going to the Repository menu, choosing Team then Commit artifacts. There is also a keyboard shortcut: Ctrl+Alt+C.  Use automatic synchronization for all repositories: With this mode, every time you make a change, it is saved in both your local copy and the central repository.  Changes made to the central repository are sent immediately to your local copy.  You can only use this mode if you have a continuous network connection to the system hosting the SVN server. There is a significant network performance cost for using automatic synchronization. This option is not recommended.  Define synchronization mode repository by repository: With this mode, you define whether synchronization is manual or automatic for each repository.Manage locks on shared resourcesThis information applies to artifacts created in Bonita Studio but not those created in the UI Designer.Bonita Studio automatically locks an artifact (process or shared resource) when you open it for editing. You can also lock an artifact manually. If you try to open an artifact that is locked by another user, a popup tells you that the artifact is logged and gives the SVN username of the person who owns the lock. You can choose to open the artifact in read-only mode, which means you cannot make any changes.It is also possible to unlock a locked artifact and lock it yourself, but this is not generally recommended except as a last resort if the owner of the lock cannot be contacted to release the lock.You can choose to open an artifact in read-only mode, even if it is not locked by another user. If an artifact you are viewing in read-only mode is locked, there is a lock icon in the name tab at the top of the whiteboard.To manually lock or unlock an artifact:  Go to the Repository menu, and choose Team, then Manage locks.  A popup displays the list of artifacts.  Select the artifact to lock or unlock, and then click the Lock or Unlock button.  Click OK.To check the lock status of an artifact, go to the Diagram menu and choose Open, or click Open in the coolbar. In the popup, artifacts that you have locked are marked with a green padlock, and artifacts that another user has locked are marked with a red padlock and the user’s SVN username.From the popup, you can:  Open a process that you have locked (marked with a green padlock) or that is not locked (no padlock).  Open a process in read-only mode. You can do this for any process, but it is most useful for a process that is locked by another user (red padlock).  Open a locked process (red padlock). You can open a locked process in read-only mode. You cannot open a locked process read-write.Avoiding conflictsA conflict occurs when two or more users update the same process in a repository and the updates are not compatible.If you are using a shared repository, Bonita Studio automatically locks a Studio artifact when a user opens it for edit. (Note: UI Designer artifacts are not locked.)This means that only one user at a time can update the artifact, avoiding the possibility of conflicts. The only risk of conflicts is if a user takes over a lock from another user who has not committed their changes. For this reason, you are not recommended to unlock artifacts that are locked by another user.It is also good practise to commit your changes regularly, to keep your local working copy synchronized with the central repository. To commit your changes, go to the Repository menu, choose Team, and then choose Commit artifacts. When you commit your changes, you have the option to release the lock so that another user can edit the artifact. By default, your lock is maintained.If you want to release the lock, uncheck the Keep locks box in the Commit dialog.Versioning and historyIf you are using a shared repository, all modifications to an artifact are recorded by the SVN server.To view the history for an artifact:  Go to the Repository menu and choose Team, then History.  In the history list popup, select the artifact in the left-hand column.  The revision history for the selected artifact is displayed in the right-hand column. This shows all the changes that have been made, and the author of each change.To revert to an older version, click on that version in the revision history, then click on Revert to this version in the popup.The selected version will be restored.Restore pointsA restore point is a marker in a repository that you can use to restore your repository back to an earlier state.The difference between a restore point and a version in the revision history is that a restore point applies to the whole repository but a version applies to a single artifact.To create a restore point:  Go to the Repository menu and choose Team, then Manage restore points.  Select Create a restore point then click Next.  Enter a description for the restore point, then click Create. The restore point is created.To restore an older point:  Go to the Repository menu and choose choose Team, then Manage restore points.  Select Restore to an older point then click Next.  Select the restore point you want to restore, then click Restore. The repository reverts to the restore point.",
      "url": " /bonita/7.7/development/workspaces-and-repositories",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "bonita-7-7-howtos-bdm-in-rest-api": {
      "title": "Manage BDM in custom Rest APIs",
      "content"     : "How to manage BDM in REST API extensionsThis page demonstrates best practices when developing a REST API Extension accessing Business Data.Special attention is paid on performance matters.First use caseGroovy code sampleRest API Response contentTroubleshooting bad practicesOther use casesReturning the whole object without its lazy loaded fieldsReturning the whole object with an API link load in the lazy fieldsKnown limitationsReturning the object with SOME of its lazy loaded fields ONLYFirst use caseImage below shows the BDM model used for the first use-case:Note that the relationships from car to wheel1, wheel2, wheel3, wheel4 are lazy loaded (in the Studio, it isconfigured by selecting the Only load related objects when needed radio button).Groovy code sampleBelow is an example of a REST API extension groovy script that accesses the Business Data model.Good practices are:  If lazy loaded objects are not necessary in the response, ONLY extract the information needed. This avoids costly loading of unnecessary objects.  If lazy loaded objects should always be returned in the response, consider changing the relation from ‘lazy’ to ‘eager’in the model.class CarManagement implements RestApiController {private static final Logger LOGGER = LoggerFactory.getLogger(CarManagement.class)@OverrideRestApiResponse doHandle(HttpServletRequest request, RestApiResponseBuilder responseBuilder, RestAPIContext context) {// To retrieve query parameters use the request.getParameter(..) method.// Be careful, parameter values are always returned as String values// Retrieve p parameterdef p = request.getParameter &quot;p&quot;if (p == null) {return buildResponse(responseBuilder, HttpServletResponse.SC_BAD_REQUEST,&quot;&quot;&quot;{&quot;error&quot; : &quot;the parameter p is missing&quot;}&quot;&quot;&quot;)}// Retrieve c parameterdef c = request.getParameter &quot;c&quot;if (c == null) {return buildResponse(responseBuilder, HttpServletResponse.SC_BAD_REQUEST,&quot;&quot;&quot;{&quot;error&quot; : &quot;the parameter c is missing&quot;}&quot;&quot;&quot;)}// use APIClient to retrieve the CarDAO class:def carDAO = context.apiClient.getDAO(CarDAO.class)def currentModel = &quot;DeLorean&quot;// Fetch the cars that match the search criteria:List&amp;lt;Car&amp;gt; cars = carDAO.findByModel(currentModel, p as int, c as int)// Prepare the Json result:// Do NOT return directly the list &quot;cars&quot;, as the entire list of Wheel objects would be fetched by lazy loading when calling the JsonBuilder toString method.// Instead, ONLY select the fields that are necessary for your business logic (alternative methods are also available, see below in this page):def carModels = [:]for (Car car : cars) {// return the fields &quot;id&quot;, &quot;buildYear&quot;, &quot;color&quot;:carModels.put(&quot;id: ${car.persistenceId}&quot;, &quot;${car.buildYear} - ${car.color}&quot;)}def result = [ &quot;model&quot; : currentModel, &quot;number of cars&quot; : cars.size(), &quot;cars&quot; : carModels ]// Attention: do not use &quot;toPrettyString()&quot; if your response is large, as the page &quot;size&quot; may be uselessly big:return buildResponse(responseBuilder, HttpServletResponse.SC_OK, new JsonBuilder(result).toString())}}Rest API Response contentBelow is an example of the resulting response (the json is formatted to improve readability):{&quot;model&quot;: &quot;DeLorean&quot;,&quot;number of cars&quot;: 30,&quot;cars&quot;: {&quot;id: 1&quot;: &quot;1933 - Red&quot;,&quot;id: 6&quot;: &quot;1938 - Rainbow&quot;,&quot;id: 20&quot;: &quot;2002 - Green&quot;,&quot;id: 24&quot;: &quot;1940 - Yellow&quot;,&quot;id: 33&quot;: &quot;1954 - Purple&quot;,&quot;id: 46&quot;: &quot;1932 - Rainbow&quot;,&quot;id: 50&quot;: &quot;2008 - Teal&quot;,&quot;id: 51&quot;: &quot;1979 - Purple&quot;,&quot;id: 53&quot;: &quot;1942 - Purple&quot;,&quot;id: 60&quot;: &quot;1941 - Rainbow&quot;,&quot;id: 71&quot;: &quot;1987 - Orange&quot;,&quot;id: 75&quot;: &quot;1956 - Green&quot;,&quot;id: 82&quot;: &quot;1938 - Rainbow&quot;,&quot;id: 92&quot;: &quot;1955 - Rainbow&quot;,&quot;id: 100&quot;: &quot;1965 - Orange&quot;,&quot;id: 119&quot;: &quot;1992 - Blue&quot;,&quot;id: 128&quot;: &quot;2015 - Purple&quot;,&quot;id: 130&quot;: &quot;1932 - Yellow&quot;,&quot;id: 142&quot;: &quot;1951 - Grey&quot;,&quot;id: 143&quot;: &quot;1930 - White&quot;,&quot;id: 146&quot;: &quot;1937 - Teal&quot;,&quot;id: 147&quot;: &quot;1961 - Blue&quot;,&quot;id: 152&quot;: &quot;1939 - Purple&quot;,&quot;id: 158&quot;: &quot;1977 - Grey&quot;,&quot;id: 159&quot;: &quot;2013 - Rainbow&quot;,&quot;id: 160&quot;: &quot;1997 - Purple&quot;,&quot;id: 163&quot;: &quot;1973 - Rainbow&quot;,&quot;id: 164&quot;: &quot;1940 - Purple&quot;,&quot;id: 165&quot;: &quot;1933 - Teal&quot;,&quot;id: 172&quot;: &quot;1983 - Rainbow&quot;}}Note that Wheels are not returned, only necessary information is fetched.As a result, performance is efficientTroubleshooting bad practices Practices leading to poor performanceSince wheel1, wheel2, wheel3, wheel4 are lazy loaded, they are not retrieved directly when retrieving a Car.The retrieval of related Wheel objects is only performed when accessing the fields (via getWheel1(), …), if necessary.However, when building the response, the JsonBuilder&#39;s toString method  implicitly fetches all lazy loaded fields (it calls all the field getters).So, if a large number of Business Data is returned and if you have lazy loaded fields in the returned objects, numerous queries are executed, leading to poor performance.For example, if you don’t follow the code sample above and write something like:def currentModel = &quot;DeLorean&quot;// Fetch the cars that match the search criteria:List&amp;lt;Car&amp;gt; cars = carDAO.findByModel(currentModel, p as int, c as int)def result = [ &quot;cars&quot; : cars ]return buildResponse(responseBuilder, HttpServletResponse.SC_OK, new JsonBuilder(result).toString())The returned result will contain, for each car, the fields persistenceId, buildYear and color, allowing you to use these in your application(s).However, assuming you want to retrieve 10 cars of the “Delorean” model, this code will execute a total of 41 “Select” database queries  1 query to get the cars,  then 4 queries per car to fetch each one of the wheel fields to build the JSON response (so 40 queries).In comparison, the code following good practises only performs a single Select database query.Other use casesThe rest api extension example previously described in this page advices to:  create a custom data structure for the response  copy only selected fields from the BDM object into this custom data structureIn some cases, you may want to return the entire BDM object structure in the response:  because it eases parsing the REST API Json result to build an Object  for maintenance reasons, when adding a new field to a BDM object, you may avoid to have to modify the Rest API extension code to include this new fieldReturning the whole object without its lazy loaded fieldsThe troobleshooting section gives an example using the Groovy JsonBuilder class leading to poor performance: it calls the getter of lazy loaded fields whichthen fetches the data.So using an alternate json builder implementation can solve this issue.As the BDM object lazy loaded fields are marked with the Jackson’s @JsonIgnore annotation and as the Jackson’s library is available for use in the Rest API Extension,the best candidate for this is to use the Jackson serializer to generate the json response.import com.fasterxml.jackson.databind.ObjectMapperimport com.fasterxml.jackson.databind.SerializationFeatureclass CarManagement implements RestApiController {private static final Logger LOGGER = LoggerFactory.getLogger(CarManagement.class)// Use a shared instance for performance reason (see https://github.com/FasterXML/jackson-docs/wiki/Presentation:-Jackson-Performance)private static final ObjectMapper jsonBuilder = new ObjectMapper()static {// needed to serialize BDM object because of the Bonita lazy loading mechanismjsonBuilder.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS)}@OverrideRestApiResponse doHandle(HttpServletRequest request, RestApiResponseBuilder responseBuilder, RestAPIContext context) {// To retrieve query parameters use the request.getParameter(..) method.// Be careful, parameter values are always returned as String values// Retrieve p parameterdef p = request.getParameter &quot;p&quot;if (p == null) {return buildResponse(responseBuilder, HttpServletResponse.SC_BAD_REQUEST,&quot;&quot;&quot;{&quot;error&quot; : &quot;the parameter p is missing&quot;}&quot;&quot;&quot;)}// Retrieve c parameterdef c = request.getParameter &quot;c&quot;if (c == null) {return buildResponse(responseBuilder, HttpServletResponse.SC_BAD_REQUEST,&quot;&quot;&quot;{&quot;error&quot; : &quot;the parameter c is missing&quot;}&quot;&quot;&quot;)}// use APIClient to retrieve the CarDAO class:def carDAO = context.apiClient.getDAO(CarDAO.class)def currentModel = &quot;DeLorean&quot;// Fetch the cars that match the search criteria:List&amp;lt;Car&amp;gt; cars = carDAO.findByModel(currentModel, p as int, c as int)// Prepare the Json result:def result = [ &quot;model&quot; : currentModel, &quot;number of cars&quot; : cars.size(), &quot;cars&quot; : cars ]return buildResponse(responseBuilder, HttpServletResponse.SC_OK, jsonBuilder.writeValueAsString(result))}Returning the whole object with an API link load in the lazy fieldsThe idea is to create a custom Json serializer.A custom Json serializer is a class which extends com.fasterxml.jackson.databind.JsonSerializer. There is a method serialize to implement, which has the responsability to serialize the input model into Json.The custom Json serializer has to come with an other class, an object mapper,  which extends com.fasterxml.jackson.databind.ObjectMapper.This mapper registers a simple module (com.fasterxml.jackson.databind.module.SimpleModule), which has to contain the custom serializer.At the end, in your rest API endpoint, you interact with the mapper.Here is an implementation example for the object Car which has four lazy attributes of type Wheel:The serializer takes a Car in input, and build a Json object for it. The wheels are replaced with links to an other Rest API extension with the car ID and the wheel number in parameter. Calling this API will return the wheel. This is a classic lazy behavior./*********************** ***** SERIALIZER ****** ***********************/import com.fasterxml.jackson.core.JsonGeneratorimport com.fasterxml.jackson.databind.JsonSerializerimport com.fasterxml.jackson.databind.SerializerProviderclass CarSerializer extends JsonSerializer&amp;lt;Car&amp;gt;{	@Override	public void serialize(Car car, JsonGenerator jgen, SerializerProvider provider)throws IOException, JsonProcessingException {		jgen.writeStartObject()				jgen.writeNumberField(&quot;carID&quot;, car.getPersistenceId())		jgen.writeStringField(&quot;model&quot;, car.getModel())		jgen.writeNumberField(&quot;buildYear&quot;, car.getBuildYear())		jgen.writeStringField(&quot;color&quot;, car.getColor())		jgen.writeStringField(&quot;wheel1Request&quot;, getWheelRequest(car.getPersistenceId(), 1))		jgen.writeStringField(&quot;wheel2Request&quot;, getWheelRequest(car.getPersistenceId(), 2))		jgen.writeStringField(&quot;wheel3Request&quot;, getWheelRequest(car.getPersistenceId(), 3))		jgen.writeStringField(&quot;wheel4Request&quot;, getWheelRequest(car.getPersistenceId(), 4))				jgen.writeEndObject()	}		private String getWheelRequest(Long carID, Integer wheelNum) {		return String.format(&#39;../API/extension/wheel?p=0&amp;amp;c=10&amp;amp;carID=%s&amp;amp;wheelNum=%s&#39;, carID, wheelNum)	}}/*********************** ******* MAPPER ******** ***********************/import com.fasterxml.jackson.databind.ObjectMapperimport com.fasterxml.jackson.databind.SerializationFeatureimport com.fasterxml.jackson.databind.module.SimpleModuleclass CarObjectMapper extends ObjectMapper {	public CarObjectMapper () {	SimpleModule module = new SimpleModule()	module.addSerializer(Car.class, new CarSerializer())	registerModule(module)} }/*********************** ******** INDEX ******** ***********************/class CarIndex implements RestApiController {private static final Logger LOGGER = LoggerFactory.getLogger(CarIndex.class)private static final CarObjectMapper CAR_MAPPER = new CarObjectMapper()@OverrideRestApiResponse doHandle(HttpServletRequest request, RestApiResponseBuilder responseBuilder, RestAPIContext context) {def p = request.getParameter &quot;p&quot;def c = request.getParameter &quot;c&quot;				def carDAO = context.apiClient.getDAO(CarDAO.class)		int startIndex = (p as Integer)*(c as Integer)		int endIndex = c as Integer		List&amp;lt;Car&amp;gt; cars = carDAO.find(startIndex, endIndex)				def result = CAR_MAPPER.writeValueAsString(cars)		return buildResponse(responseBuilder, HttpServletResponse.SC_OK, result)}RestApiResponse buildResponse(RestApiResponseBuilder responseBuilder, int httpStatus, Serializable body) {return responseBuilder.with {withResponseStatus(httpStatus)withResponse(body)build()}}}Known limitationsReturning the object with SOME of its lazy loaded fields ONLYThis use case is not supported. In other words it is necessary to use one database request per lazy loaded field you wish to retrieve.",
      "url": " /bonita/7.7/howtos/bdm-in-rest-api",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-7-howtos-bo-multiple-refs-tutorial": {
      "title": "Manage multiple references in Business Objects",
      "content"     : "How to manage multiple references in Business ObjectsIntroductionCreate the business object modelDesign the expense report processDesign the task contract to update expensesAdd operations to update the business dataRun the processIntroductionThis tutorial explains how to create, update or delete a multiple reference in a Business Object. The tutorial can be used with Bonita Community edition, and uses features that are available in all editions. The example uses an expense report as business object.Design a task contract and associated operations to update a business object with a multiple reference.Create the business object modelCreate an Expense business object like below.Then create ExpenseReport business object referencing multiple expenses by composition.Design the expense report process  Create a new  process  Add a new report business variable of type ExpenseReport initialized with following groovy script	def aDummyExpense = expenseDAO.newInstance();	aDummyExpense.amount = 5	aDummyExpense.nature = &quot;A dummy expense&quot;	aDummyExpense.expenseDate = new Date()	def anotherDummyExpense = expenseDAO.newInstance();	anotherDummyExpense.amount = 55	anotherDummyExpense.nature = &quot;A another dummy expense&quot;	anotherDummyExpense.expenseDate = new Date()	def report = expenseReportDAO.newInstance()	report.expenses &amp;lt;&amp;lt; aDummyExpense	report.expenses &amp;lt;&amp;lt; anotherDummyExpense	return report  Rename Step1 to Update expense reportDesign the task contract to update expenses  Select the Update expense report task  Go to Execution &amp;gt; Contract property tab  Create a contract like belownewExpenses input is used to gather a list of new expenses to add to the report expensesToDelete input is used to gather a list of Expense id to delete expensesToUpdate input is used to gather a list of existing expenses to update in the reportIn the contract we use TEXT input type for persistenceId instead of numeric type to support the whole java.lang.Long range.JSON number type range does not extend to java.lang.Long.MAX_VALUE. A convertion to long will be applied in sciprts.Add operations to update the business data  Go to Execution &amp;gt; Operations property tab  Add an operation  Use the report business varaible as left operand.  Change the operator and select Use a java  method, choose the setExpenses method.  In the right operand use the following script to add new expenses in the report:	def result = []	result.addAll(report.getExpenses())	newExpenses.each{		def exp = expenseDAO.newInstance()		exp.amount = it.amount		exp.nature = it.nature		exp.expenseDate = it.expenseDate		result &amp;lt;&amp;lt; exp	}	return result  Add another operation  Use the report business varaible as left operand.  Change the operator and select Use a java  method, choose the setExpenses method.  In the right operand use the following script to delete expenses from the report:	def result = []	result.addAll(report.getExpenses())	result.removeAll(result.findAll{expensesToDelete.contains(it.persistenceId.toString())})	return result  Add another operation  Use the report business varaible as left operand.  Change the operator and select Use a java  method, choose the setExpenses method.  In the right operand use the following script to update expenses existing in the report:	import com.company.model.Expense;	def updatedExpenses = []	updatedExpenses.addAll(report.getExpenses())	expensesToUpdate.each{ exp -&amp;gt;		def Expense expenseToUpdate = updatedExpenses.find{			it.persistenceId == exp.persistenceId.toLong()		}		if(expenseToUpdate){			expenseToUpdate.amount = exp.amount			expenseToUpdate.expenseDate = exp.expenseDate			expenseToUpdate.nature = exp.nature		}else{			throw new Exception(&quot;Expense with id $exp.persistenceId does not exists.&quot;)		}	}	return updatedExpensesRun the processYou may now run the process and validate the expected behavior using autogenerated forms.  Click on Run  Start the process instance form the autogenerated form  In a web browser, you can check the content of your report calling the following Rest API:http://localhost:8080/bonita/API/bdm/businessData/com.company.model.ExpenseReport/1/expensesIt should display this result according to the initialization of the report business variable.[	{	&quot;persistenceId&quot;:1,	&quot;persistenceId_string&quot;:&quot;1&quot;,	&quot;persistenceVersion&quot;:0,	&quot;persistenceVersion_string&quot;:&quot;0&quot;,	&quot;amount&quot;:5.0,	&quot;amount_string&quot;:&quot;5.0&quot;,	&quot;nature&quot;:&quot;A dummy expense&quot;,	&quot;expenseDate&quot;:1461748727495	},	{	&quot;persistenceId&quot;:2,	&quot;persistenceId_string&quot;:&quot;2&quot;,	&quot;persistenceVersion&quot;:0,	&quot;persistenceVersion_string&quot;:&quot;0&quot;,	&quot;amount&quot;:55.0,	&quot;amount_string&quot;:&quot;55.0&quot;,	&quot;nature&quot;:&quot;A another dummy expense&quot;,	&quot;expenseDate&quot;:1461748727495	}]  Perform the Update expense report task like below  In a web browser, check the content of your report calling the following Rest API: http://localhost:8080/bonita/API/bdm/businessData/com.company.model.ExpenseReport/1/expensesIt should display the following result:[	{	&quot;persistenceId&quot;:1,	&quot;persistenceId_string&quot;:&quot;1&quot;,	&quot;persistenceVersion&quot;:1,	&quot;persistenceVersion_string&quot;:&quot;1&quot;,	&quot;amount&quot;:7.0,	&quot;amount_string&quot;:&quot;7.0&quot;,	&quot;nature&quot;:&quot;updated nature&quot;,	&quot;expenseDate&quot;:1461801600000	},	{	&quot;persistenceId&quot;:3,	&quot;persistenceId_string&quot;:&quot;3&quot;,	&quot;persistenceVersion&quot;:0,	&quot;persistenceVersion_string&quot;:&quot;0&quot;,	&quot;amount&quot;:10.0,&quot;amount_string&quot;:&quot;10.0&quot;,	&quot;nature&quot;:&quot;new expense&quot;,	&quot;expenseDate&quot;:1462406400000	}]To conclude, when modifying a collection of Business objects in a script you must return new java.util.List instances and not the list returned by an accessor (eg: report.getExpenses()) as it will return an Hibernate specific implemetation not compliant with our business objects.Do not forget to use the persistence id (or another unique attribute of the object) in the contract if you need to access existing object (update or delete usecases).",
      "url": " /bonita/7.7/howtos/bo-multiple-refs-tutorial",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-7-howtos-custom-authorization-rule-mapping": {
      "title": "Map authorization rules",
      "content"     : "How to map authorization rulesIntroductionCreate and deploy custom authorization ruleCreate custom authorization rule java projectConfigure engine with new rulesIntroductionThis tutorial explains how to customize authorization rule mapping.Authorization rule is a java bean that must implement getId and isAllowed methods.Authorization Rule Mapping is a set of rules used to allow connected user to access page and form. An empty list grants access to user. A non empty list allows access if all rules return true to their isAllowed method. Those rules grant or not access to the connected user for:  use a page or form to start a process  display process overview  use a page or form to execute a taskThe tutorial can be used with Bonita Community edition, and uses features that are available in all editions.The following elements may be used as extension points but could be subject to change across versions. No changes are planned, but we reserve the right to change make incompatible changes in any future version.Create and deploy custom authorization ruleCreate custom authorization rule java projectIn this example, Custom authorization rule is a maven-based java project that need a maven dependency on bonita-server maven artifact.  pom.xml&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&amp;lt;groupId&amp;gt;org.bonitasoft.example&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;authorization-tutorial&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;&amp;lt;dependencies&amp;gt;&amp;lt;dependency&amp;gt;&amp;lt;groupId&amp;gt;org.bonitasoft.engine&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;bonita-server&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;${bonita-server.version}&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;/dependencies&amp;gt;&amp;lt;properties&amp;gt;&amp;lt;bonita-server.version&amp;gt;[7.7.0,)&amp;lt;/bonita-server.version&amp;gt;&amp;lt;/properties&amp;gt;&amp;lt;build&amp;gt;&amp;lt;plugins&amp;gt;&amp;lt;plugin&amp;gt;&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;3.5.1&amp;lt;/version&amp;gt;&amp;lt;configuration&amp;gt;&amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt;&amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt;&amp;lt;/configuration&amp;gt;&amp;lt;/plugin&amp;gt;&amp;lt;/plugins&amp;gt;&amp;lt;/build&amp;gt;&amp;lt;/project&amp;gt;  create CustomRule class that implements org.bonitasoft.engine.page.AuthorizationRulepackage org.bonitasoft.example.authorization;import java.io.Serializable;import java.util.Map;import org.bonitasoft.engine.commons.exceptions.SExecutionException;import org.bonitasoft.engine.core.process.instance.api.ProcessInstanceService;import org.bonitasoft.engine.page.AuthorizationRule;import org.bonitasoft.engine.page.AuthorizationRuleWithParameters;import org.bonitasoft.engine.session.SessionService;import org.bonitasoft.engine.sessionaccessor.SessionAccessor;public class CustomRule extends AuthorizationRuleWithParameters implements AuthorizationRule {private ProcessInstanceService processInstanceService;private SessionService sessionService;private SessionAccessor sessionAccessor;public CustomRule(ProcessInstanceService processInstanceService, SessionService sessionService, SessionAccessor sessionAccessor) {// some services autowired by springthis.processInstanceService = processInstanceService;this.sessionAccessor = sessionAccessor;this.sessionService = sessionService;}@Overridepublic boolean isAllowed(String key, Map&amp;lt;String, Serializable&amp;gt; context) throws SExecutionException {//add business logic herereturn true;}@Overridepublic String getId() {return &quot;CUSTOM_RULE_UNIQUE_ID&quot;;}}  create CustomAuthorizationRuleMapping class that implements org.bonitasoft.engine.core.form.AuthorizationRuleMappingpackage org.bonitasoft.example.authorization;import java.util.Arrays;import java.util.List;import org.bonitasoft.engine.core.form.AuthorizationRuleMapping;public class CustomAuthorizationRuleMapping implements AuthorizationRuleMapping {@Overridepublic List&amp;lt;String&amp;gt; getProcessStartRuleKeys() {return Arrays.asList(&quot;CUSTOM_RULE_UNIQUE_ID&quot;);}@Overridepublic List&amp;lt;String&amp;gt; getProcessOverviewRuleKeys() {return Arrays.asList(&quot;CUSTOM_RULE_UNIQUE_ID&quot;);}@Overridepublic List&amp;lt;String&amp;gt; getTaskRuleKeys() {return Arrays.asList(&quot;CUSTOM_RULE_UNIQUE_ID&quot;);}}  build maven jarmvn clean installConfigure engine with new rules  copy jar into webapps/bonita/WEB-INF/lib/ folder (for default tomcat bundle)pull current engine configuration using platform setup tool   ./setup/setup.sh pulladd customRule bean registration in platform_conf/current/tenants/TENANT_ID/tenant_engine/bonita-tenant-custom.xml &amp;lt;bean id=&quot;customRule&quot; class=&quot;org.bonitasoft.example.authorization.CustomRule&quot;&amp;gt;&amp;lt;constructor-arg name=&quot;processInstanceService&quot; ref=&quot;processInstanceService&quot; /&amp;gt;&amp;lt;constructor-arg name=&quot;sessionService&quot; ref=&quot;sessionService&quot; /&amp;gt;&amp;lt;constructor-arg name=&quot;sessionAccessor&quot; ref=&quot;sessionAccessor&quot; /&amp;gt; &amp;lt;/bean&amp;gt;add customAuthorizationRuleMapping bean registration in platform_conf/current/tenants/TENANT_ID/tenant_engine/bonita-tenant-custom.xml &amp;lt;bean id=&quot;customAuthorizationRuleMapping&quot;  class=&quot;org.bonitasoft.example.authorization.CustomAuthorizationRuleMapping&quot;/&amp;gt;  uncomment to declare customAuthorizationRuleMapping in platform_conf/current/tenants/TENANT_ID/tenant_engine/bonita-tenant-community-custom.propertiesbonita.tenant.authorization.rule.mapping=customAuthorizationRuleMapping  push current engine configuration using platform setup tool ./setup/setup.sh pushrestart server./stop-bonita.sh./start-bonita.shYou can find a complete implementation example of page mapping authorization rule and configuration in this project on GitHub.",
      "url": " /bonita/7.7/howtos/custom-authorization-rule-mapping",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-7-howtos-datetimes-management-tutorial": {
      "title": "Manage dates and times in BDM and User Interfaces",
      "content"     : "How to manage dates and times in BDM and User InterfacesThis howto applies to Bonita 7.5.0 and above.To manage dates and times in the BDM and User Interfaces, Bonita comes with 3 types of data that you can manipulate through processes, APIs and user interfaces (forms/pages).This page gives a step-by-step procedure to create a process with forms that allow to choose a date (with or without a time) and then display it, leveraging each of these data types.Date onlyDate and time without time zoneDate and time displayed in the user time zoneDate onlyThe type DATE ONLY is used to hold a date with no time of the day. Use it for birth dates for example.It is stored in the database as an ISO 8601 formatted Character String (e.g. “2017-01-13”).It uses java.time.LocalDate as Java type.The following sections show how to create, update, and display an Employee object with a birth date.Define the business data  In the studio, open the Business Data Model editor (in menu Development &amp;gt; Business Data Model &amp;gt; Manage…)  Create a business object Employee with an attribute birthdate of type DATE ONLY (this type replaces the type DATE (NOT RECOMMENDED) that is more difficult to handle as it also includes time information)  Create a new process  In the process Data tab, create a new business variable employee of the type EmployeeDefine the contract at pool level, as well as the script to initialize the business variable  In the process Execution tab &amp;gt; Contract section, define the contract inputs using the Add from data… button  Select the business variable employee  Follow the steps to generate a contract with a COMPLEX input employeeInput containing a birthdate attribute of type DATE ONLY (keep the option to generate the variable initialization script automatically)Generate the process instantiation form  In the process Execution tab, Form section, generate the form by clicking on the pencil icon  Since you have a DATE ONLY attribute in the contract inputs, a Date picker widget is automatically added to the formThe form is already configured correctly.Define the contract at task level, as well as operations to update the business variable  Rename the first task to Update birth date  In the task Execution tab &amp;gt; Contract section, define the contract inputs using the Add from data… button  Select the business variable employee  Follow the steps to generate a contract with a COMPLEX input employeeInput containing a birthdate attribute of type DATE ONLY (keep the option to generate the operations automatically)Generate the ‘Update’ task form  In the task Execution tab, Form section, generate the form by clicking on the pencil icon  Since you have a DATE ONLY attribute in the contract inputs, a Date picker widget is automatically added to the form  In the UI Designer, define a variable to retrieve the Employee currently stored, using the context:  In the Variables panel at the bottom of the editor, click on Create a new variable  Enter the name employee for the new variable  Select the type external API  Set the API URL of the variable to ../FYI, The value returned by the REST API for the birth date will be an ISO 8601 formatted String (e.g. “1983-01-13”).Set the value of the Date picker widget to employee.birthdate  Update the variable formOutput to change its value to :return { &#39;employeeInput&#39;: $data.employee};  You can delete the variable formInputThe Date picker widget supports the following types for its Value property as input:  ISO 8601 String variables (with or without time information)  Date objects  Long number values (Milliseconds since epoch)However, to support pages designed with an older UI Designer version, the output of the widget is always a Javascript Date object. So it will change the type of the variable bound to the widget Value to a Date object when the user selects a date.When sent in the JSON body of a request, it is serialized into an ISO 8601 formatted String variable with the time set to midnight UTC (e.g., 2016-12-31T00:00:00.000Z).The time information is dropped at contract level when received by the process instantiation REST API and converted to a java.time.LocalDate.Retrieve the date from the database and display itIn another step form (or in any other page) you may want to retrieve the date and display it.In order to do so:  Create a new task named Review birth date after the existing one  In the task Execution tab, Form section, generate the form by clicking on the pencil icon  In the UI Designer, define a variable to retrieve the Employee currently stored, using the context.  In order to do so, proceed the same way as you did for the previous step form:  In the Variables panel at the bottom of the editor, click on Create a new variable  Enter the name employee for the new variable  Select the type external API  Set the API URL of the variable to ../From the Form editor palette, drop a Date picker widget on the whiteboard  Set the property Read-only to yes  Set its Value to employee.birthdateYou may prefer to display it in some text. In order to do so:  Drop a Text widget on the whiteboard  Replace the default Text property value with an expression using the uiDate filter to format the date the way you want. E.g., ``For more information on the different formats available, click on the filters link of the Text property caption.You can now run your process and see that the date retrieved from the business data database is consistent with the date you chose in the previous step.Date and time without time zoneThe type DATE-TIME (NO TIME ZONE) is used to hold a date-time that displays the same whatever the user’s time zone is. It can be used it for stores opening hours, or flight departure and arrival days and times, for example.It is stored in the database as an ISO 8601 formatted Character String (e.g. “2017-01-13T13:00:00”).It uses java.time.LocalDateTime as Java type.The following sections show how to create, update, and display a Flight object with a local departure date and time (that should display the same local time, no matter where you are in the world.Define the business data  In the studio, open the Business Data Model editor (in menu Development &amp;gt; Business Data Model &amp;gt; Manage…)  Create a business object Flight with an attribute departureTime of type DATE-TIME (NO TIME ZONE)  Create a new process  In the process Data tab, create a new business variable flight of the type FlightDefine the contract at pool level, as well as the script to initialize the business variable  In the process Execution tab &amp;gt; Contract section, define the contract inputs using the Add from data… button  Select the business variable flight  Follow the steps to generate a contract with a COMPLEX input flightInput containing a departureTime attribute of type DATE-TIME (NO TIME ZONE) (keep the option to generate the variable initialization script automatically)Generate the process instantiation form  In the process Execution tab, Form section, generate the form by clicking on the pencil icon  Since you have a DATE-TIME (NO TIME ZONE) attribute in the contract inputs, a Date time picker widget is automatically added to the formThe widget is already configured not to handle the user time zone.Define the contract at task level, as well as operations to update business varaible  Rename the first task to Update departure time  In the task Execution tab &amp;gt; Contract section, define the contract inputs using the Add from data… button  Select the business variable flight  Follow the steps to generate a contract with a COMPLEX input flightInput containing a departureTime attribute of type DATE-TIME (NO TIME ZONE) (keep the option to generate the operations automatically)Generate the ‘Update’ task form  In the task Execution tab, Form section, generate the form by clicking on the pencil icon  Since you have a DATE-TIME (NO TIME ZONE) attribute in the contract inputs, a Date time picker widget is automatically added to the form  In the UI Designer, define a variable to retrieve the Flight currently stored using the context:  In the Variables panel at the bottom of the editor, click on Create a new variable  Enter the name flight for the new variable  Select the type external API  Set the API URL of the variable to ../FYI, The value returned by the REST API for the flight departure time will be an ISO 8601 formatted String (e.g. “2017-01-13T15:00:00”).Set the Value of the Date time picker widget to flight.departureTime  Update the variable formOutput to change its value to:return { &#39;flightInput&#39;: $data.flight};  You can delete the variable formInputThe Date time picker widget output is an ISO 8601 formatted String (e.g. “2017-01-13T15:00:00”).At contract level, when received by the task execution REST API, it is converted to a java.time.LocalDateTime.Retrieve the date and time from the database and display themIn another step form (or in any other page), you may want to retrieve the date and time and display them.In order to do so:  Create a new task Review departure time after the existing one  In the task Execution tab, Form section, generate the form by clicking on the pencil icon  In the UI Designer, define a variable to retrieve the Flight currently stored using the context. In order to do so, proceed the same way as you did for the previous step form:  In the Variables panel at the bottom of the editor, click on Create a new variable  Enter the name flight for the new variable  select the type external API  Set the API URL of the variable to ../From the Form editor palette, drop a Date time picker widget on the whiteboard  Set the property Read-only to yes  Set the property Handle time zone to no  Set its Value to flight.departureTimeYou may prefer to display it in some text. In order to do so:  Drop a Text widget on the whiteboard  Replace the default Text property value with an expression using the uiDate filter to format the date and time the way you want. E.g., ``For more information on the different formats available, click on the filters link of the Text property caption.You can now run your process and see that the departure date and time retrieved from the business data database is consistent with the date and time you chose in the previous step.If you change your system time zone while viewing the steps and refresh the page, you will see that the displayed time remains the same.Date and time displayed in the user time zoneThe type DATE-TIME (TIME ZONE) is used to hold a date-time whose displayed value should adapt to the user’s time zone (e.g., the day and time of a meeting with participants from multiple time zones).It is stored in database as an ISO 8601 formatted Character String (e.g.,2017-01-13T13:00:00Z).It uses java.time.OffsetDateTime as Java type.The following sections show how to create, update, and display a Meeting object with a start date and time that reflect the user time zone when it is displayed.Define the business data  In the studio, open the Business Data Model editor (in menu Development &amp;gt; Business Data Model &amp;gt; Manage…)  Create a business object Meeting with an attribute startTime of type DATE-TIME (TIME ZONE)  Create a new process  In the process Data tab, create a new business variable meeting of the type MeetingDefine the contract at process level, as well as the script to initialize the business variable  In the process Execution tab &amp;gt; Contract section, define the contract inputs using the Add from data… button  Select the business variable meeting  Follow the steps to generate a contract with a COMPLEX input meetingInput containing a startTime attribute of type DATE-TIME (TIME ZONE) (keep the option to generate the variable initialization script automatically)Generate the process instantiation form  In the process Execution tab, Form section, generate the form by clicking on the pencil icon  Since you have a DATE-TIME (TIME ZONE) attribute in the contract inputs, a Date time picker widget is automatically added to the formThe widget is already configured to handle the user time zone.Define the contract at task level, as well as the operations to update the business variable  Rename the first task to Update start time  In the task Execution tab &amp;gt; Contract section, define the contract inputs using the Add from data… button  Select the business variable meeting  Follow the steps to generate a contract with a COMPLEX input meetingInput containing a startTime attribute of type DATE-TIME (TIME ZONE) (keep the option to generate the operations automatically)Generate the ‘Update’ task form  In the task Execution tab, Form section, generate the form by clicking on the pencil icon  Since you have a DATE-TIME (TIME ZONE) attribute in the contract inputs, a Date time picker widget is automatically added to the form  In the UI Designer, define a variable to retrieve the meeting currently stored using the context:  In the Variables panel at the bottom of the editor, click on Create a new variable  Enter the name meeting for the new variable  Select the type external API  Set the API URL of the variable to ../FYI, The value returned by the REST API for the meeting start time will be an ISO 8601 formatted String (e.g. “2017-01-13T15:00:00Z”).Set the Value of the Date time picker widget to meeting.startTime  Update the variable formOutput to change its value to:return { &#39;meetingInput&#39;: $data.meeting};  You can delete the variable formInputThe Date time picker widget output is an ISO 8601 formatted String representing the selected date and time in UTC (e.g. “2017-01-13T13:00:00Z”).At contract level when received by the task execution REST API, it is converted to a java.time.OffsetDateTime.Unless the user is in the GMT time zone, there will be an offset between the time he selects and the time stored in database.Retrieve the date and time from the database and display themIn another step form (or in any other page) you may want to retrieve the date and time and display them.In order to do so:  Create a new task Review meeting time after the existing one  In the task Execution tab, Form section, generate the form by clicking on the pencil icon  In the UI Designer, define a variable to retrieve the Flight currently stored using the context. In order to do so, proceed the same way as you did for the previous step form :  In the Variables panel at the bottom of the editor, click on Create a new variable  Enter the name meeting for the new variable  Select the type external API  Set the API URL of the variable to ../From the Form editor palette, drop a Date time picker widget on the whiteboard  Set the property Read-only to yes  Make sure the property Handle time zone is set to yes  Set its Value to meeting.startTimeYou may prefer to display it in some text. In order to do so:  Drop a Text widget on the whiteboard  Replace the default Text property value with an expression using the uiDate filter to format the date the way you want. E.g., ``For more information on the different formats available, click on the filters link of the Text property caption.You can now run your process and see that the date and time retrieved from the business data database is consistent with the date and time you chose in the previous step.If you change your system time zone while viewing the steps and refresh the page, you will see that the displayed time adapts to the new time zone.",
      "url": " /bonita/7.7/howtos/datetimes-management-tutorial",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-7-howtos-list-of-documents": {
      "title": "Manage a list of documents",
      "content"     : "How to manage a list of documentsA list of documents is represented by several documents having the same name (attribute “name”). It is possible to add/remove elements to a list using the same methods as for a simple document.Get the documents of the listAdd a new documentAdd a new document to the list at a given indexGet the documents of the listIn a case with myDocList as a list of documents, use the following request to sort the result by ascending index value:Request URL:|Method | Path + Query||:-|:-|| GET |/API/bpm/caseDocument?p=0&amp;amp;c=10&amp;amp;f=name=myDocList&amp;amp;o=index ASC|Response payload :[  { &quot;id&quot;:&quot;1&quot;, &quot;creationDate&quot;:&quot;2014-10-09 16:39:52.472&quot;, &quot;author&quot;:&quot;1&quot;, &quot;index&quot;:&quot;0&quot;, &quot;contentMimetype&quot;:&quot;text/plain&quot;, &quot;caseId&quot;:&quot;1&quot;, &quot;contentStorageId&quot;:&quot;1&quot;, &quot;isInternal&quot;:&quot;true&quot;, &quot;description&quot;:&quot;&quot;, &quot;name&quot;:&quot;myDocList&quot;, &quot;fileName&quot;:&quot;test1.txt&quot;, &quot;submittedBy&quot;:&quot;1&quot;, &quot;url&quot;:&quot;documentDownload?fileName=test1.txt&amp;amp;contentStorageId=1&quot;, &quot;version&quot;:&quot;1&quot;   }, {&quot;id&quot;:&quot;2&quot;, &quot;creationDate&quot;:&quot;2014-10-09 16:39:52.473&quot;, &quot;author&quot;:&quot;1&quot;, &quot;index&quot;:&quot;1&quot;, &quot;contentMimetype&quot;:&quot;text/plain&quot;, &quot;caseId&quot;:&quot;1&quot;, &quot;contentStorageId&quot;:&quot;2&quot;, &quot;isInternal&quot;:&quot;true&quot;, &quot;description&quot;:&quot;&quot;, &quot;name&quot;:&quot;myDocList&quot;, &quot;fileName&quot;:&quot;test2.txt&quot;, &quot;submittedBy&quot;:&quot;1&quot;, &quot;url&quot;:&quot;documentDownload?fileName=test2.txt&amp;amp;contentStorageId=2&quot;, &quot;version&quot;:&quot;1&quot;   }, {&quot;id&quot;:&quot;3&quot;, &quot;creationDate&quot;:&quot;2014-10-09 16:39:52.473&quot;, &quot;author&quot;:&quot;1&quot;, &quot;index&quot;:&quot;2&quot;, &quot;contentMimetype&quot;:&quot;text/plain&quot;, &quot;caseId&quot;:&quot;1&quot;, &quot;contentStorageId&quot;:&quot;3&quot;, &quot;isInternal&quot;:&quot;true&quot;, &quot;description&quot;:&quot;&quot;, &quot;name&quot;:&quot;myDocList&quot;, &quot;fileName&quot;:&quot;test3.txt&quot;, &quot;submittedBy&quot;:&quot;1&quot;, &quot;url&quot;:&quot;documentDownload?fileName=test3.txt&amp;amp;contentStorageId=3&quot;,&quot;version&quot;:&quot;1&quot;  }]Add a new documentTo add a new document to the list myDocList at the end of the list, do a POST call without specifying the index attribute in the request payload.Method  Path + Query  POST  /API/bpm/caseDocument  Request payload:{   &quot;caseId&quot; : &quot;1&quot;,   &quot;file&quot; : &quot;doc.jpg&quot;,   &quot;name&quot; : &quot;myDocList&quot;,   &quot;description&quot; : &quot;this is an element of the list&quot; }Response payload{  &quot;id&quot;:&quot;4&quot;,   &quot;creationDate&quot;:&quot;2014-10-09 16:45:36.658&quot;,   &quot;author&quot;:&quot;1&quot;,   &quot;index&quot;:&quot;3&quot;,   &quot;contentMimetype&quot;:&quot;application/octet-stream&quot;,   &quot;caseId&quot;:&quot;1&quot;,   &quot;contentStorageId&quot;:&quot;4&quot;,   &quot;isInternal&quot;:&quot;true&quot;,   &quot;description&quot;:&quot;this is a simple doc&quot;,   &quot;name&quot;:&quot;myDocList&quot;,   &quot;fileName&quot;:&quot;doc.jpg&quot;,   &quot;submittedBy&quot;:&quot;1&quot;,   &quot;url&quot;:&quot;documentDownload?fileName=doc.jpg&amp;amp;contentStorageId=4&quot;,   &quot;version&quot;:&quot;1&quot; }Note: that this new document has got index=3. If you now rerun the first GET request, you will now get a list containing four documents with the new document as last element of the list.Add a new document to the list at a given indexTo add a new document to the list myDocList at index 1, do a POST call specifying the index attribute in the request payload.Method  Path + Query  POST  /API/bpm/caseDocument  Request payload{   &quot;caseId&quot; : &quot;1&quot;,   &quot;file&quot; : &quot;doc.jpg&quot;,   &quot;name&quot; : &quot;myDocList&quot;,   &quot;description&quot; : &quot;this is an element of the list at index 1&quot;,   &quot;index&quot; : &quot;1&quot;}Response payload{  &quot;id&quot;:&quot;5&quot;,   &quot;creationDate&quot;:&quot;2014-10-09 16:45:36.658&quot;,   &quot;author&quot;:&quot;1&quot;,   &quot;index&quot;:&quot;1&quot;,   &quot;contentMimetype&quot;:&quot;application/octet-stream&quot;,   &quot;caseId&quot;:&quot;1&quot;,   &quot;contentStorageId&quot;:&quot;4&quot;,   &quot;isInternal&quot;:&quot;true&quot;,   &quot;description&quot;:&quot;this is a simple doc&quot;,   &quot;name&quot;:&quot;myDocList&quot;,   &quot;fileName&quot;:&quot;doc.jpg&quot;,   &quot;submittedBy&quot;:&quot;1&quot;,   &quot;url&quot;:&quot;documentDownload?fileName=doc.jpg&amp;amp;contentStorageId=4&quot;,   &quot;version&quot;:&quot;1&quot; }Note: that this new document has index=1.If you now rerun the request in Example 1, you will see that the indexes of the documents in myDocList have been recalculated with respect to the newly added document index.Knowing the document Id of a document list, it is possible to update it (PUT) and remove it(DELETE) as for a simple document.",
      "url": " /bonita/7.7/howtos/list-of-documents",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-7-howtos-manage-control-in-forms": {
      "title": "Control and validate forms in the UI Designer",
      "content"     : "How to control and validate forms in the UI DesignerUsing a leave request management process example, you will learn how to take advantage of forms in the UI Designer and how to add validation for the data to submit.PrologueBasic contract validation and constraintsAdvanced contract validation and constraintsMore visible information of invalid inputsError summary panel _(SP only)_Use a **select** widget for the leave typeCustom validationUse contract response for server side validationUse frontend validationPrologueYou will design a simple leave request management process using Bonita 7 and beyond:First things first, draw the wireframe of the process. In Bonita Studio, since the instantiation of a new leave request happens at pool level, add a simple validation task, rename the pool Leave request management, and rename the lane manager, as shown here:Then, define a business object that will hold the leave requests data when the process instances are ongoing, and store it when the instances are archived:In Bonita Studio menu, go to Development &amp;gt; Business Data Model &amp;gt; Manage option, and add a business object named LeaveRequest, with 4 attributes:  startDate: first working day taken as vacation  endDate: last working day taken as vacation  nbDays: number of working days taken as vacation  type: leave type (annual leave, anticipated leave,…)To allow this business object to be instantiated in each process instance, create a business variable in the process:At pool level, in the Data panel, define a business variable named leaveRequest. For business object, choose LeaveRequest.Then, to make sure the process gets the information it needs to start a new instance, create a contract:In the Execution pane &amp;gt; Contract tab, click the Add from data… button to generate the contract input from an existing business variable. Choose the Business variable option, and the leaveRequest variable. A complex contract input is created, mapped on the leaveRequest business variable.Each entry of the contract is bound to a business object property:  startDate as a DATE  endDate as a DATE  nbDays as an INTEGER  type as TEXT… as shown here:You can also add constraints on the contract inputs in the Constraints tab.For more information about process, business data management and contract, check out Designing Efficient BPM Applications: A Process-Based Guide for Beginners.To generate an instantiation form that complies with the contract (where the user will start a new request), go to the Instantiation Form tab, and click on the pen icon. This will take you to an open form in the UI Designer.By default, this form contains a form container with 4 widgets matching the contract:  a date picker widget for the start date  a date picker widget for the end date  an input widget expecting a number for the number of days  an input widget expecting text for the type… as shown here:You can check what it will look like once deployed by clicking on Preview, as shown here:Basic contract validation and constraintsYou can notice that:  Every field label is followed with a red star showing that those fields are required (by the contract).  The Submit button is disabled until all fields marked as required are filled.If one of the input constraints is invalid, an error message is displayed below the input field. In the example, the only input constraint is required, so an error message is displayed if you edit and reset a field, as shown here:Once all fields have values, the form can be submitted, the contract validated by the process, and the new process instance can be started.Advanced contract validation and constraintsMore visible information of invalid inputsNow, to alert the user that an input is not valid with a red border around invalid inputs, you must use the AngularJS form control properties.AngularJS $formInside a form container, AngularJS provides a special variable called $form.This variable holds the validation state of the inputs, selects and textareas of the current form container.Here is an extract from the AngularJS documentation site that explains the purpose of this feature.  From an AngularJS point of view, a form is a collection of controls for the purpose of grouping related controls together.  Form and controls provide validation services, so that the user can be notified of invalid input before submitting a form. This provides a better user experience than server-side validation alone because the user gets instant feedback on how to correct the error.A control in AngularJS exposes properties for a given input, select or textarea and associates it with a CSS class:  $dirty (CSS class ng-dirty): the control has been interacted with  $pristine (CSS class ng-pristine): the control hasn’t been interacted with yet  $valid (CSS class ng-valid): the model is valid  $invalid (CSS class ng-invalid): the model is invalidNote: In this example, we will only focus on these properties. More properties and information about form control is available on AngularJS form guide.AngularJS sets these different CSS classes on HTML input elements depending on their states.Using AngularJS form control CSS classesNote: A tutorial about creating modal windows using CSS in the UI Designer is available. We recommend to read it before you go further in this tutorial.So, to alert users about the invalidity of inputs they just edited, you need to use ng-invalid and ng-dirty classes on those elements:In your favorite editor, create a validationStyle.css file containing the class below:.ng-invalid.ng-dirty {   border-color: red;   outline: 0;   -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(233,175,102,.6);   box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(233,175,102,.6);}Using only the ng-invalid class makes red border appear even before the user enters a value for the input and that is annoying.Then, in the form Assets panel at the bottom, click Add and add the CSS file.In the same way, to show the user which inputs are valid, edit the CSS file to add:.ng-valid {   border-color: green;   outline: 0;   -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 4px rgba(102,233,102,.6);   box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 4px rgba(102,233,102,.6); }In the UI Designer preview, the form looks like it is shown here:Note: The properties of the form controls also apply to the $form variable.So in this case, the $form variable has the properties $invalid, $valid, $pristine and $dirty dependending on the value of each of its controls: if one of the controls has a property set to true then the $form matching property is set to true.Therefore, the HTML form element has the associated ng-pristine, ng-dirty, ng-valid and ng-invalid classes set whether the $form properties are true or false.Since the HTML form element has no border, the CSS classes added have no impact on it.Error summary panel (SP only)For debug purposes, you can add a panel at the top of the form to list all errors in the form:From the UI Designer home page, create a fragment. Set errorPanel as the fragment name. In the Variable panel at the bottom, create one variable, of type exposed: yes, called errors. Create two other variables, of type exposed: no:  errorRequired: it allows to tell if in the form, some required data are missing.  errorDate: it allows to tell if in the form, some dates are invalid.These two variables are instantiated with JavaScript expressions using $form.$error. Therefore, for Type, select JavaScript expression.For errorRequired , enter the following Value:return ($data.errors.required || []).filter(function(field){return field.$dirty;  }).map(function(field){return field.$name;  });And for errorDate, enter:return ($data.errors.date || []).map(function(field){return field.$name;  });The errorRequired is a bit different from errorDate because when the form is empty, the user doesn’t need to be reminded that some fields are empty. This is why it contains a filter to only display the errors on dirty fields (i.e. which have been edited).These two variables will contain the list of invalid widget names.Currently, these widget names are not usable directly because they are automatically generated. Therefore, from the palette on the left, drag and drop two text widgets in this fragment whiteboard, with the following text:  Some required data is missing.  Some dates are invalid.To put the text and the background in red, add the bootstrap’s text-danger and bg-danger CSS classes in the CSS classes property for both widgets. To hide these fields when no error are detected, go to the Hide property of each widget, click on f(x) to make them evaluated as expressions, and add respectively:  _!errorRequired     errorRequired.length === 0_  _!errorDate     errorDate.length === 0_… as shown here: ![Leave Request - errorPanel - date - properties Then, to change the default style of the p html tag and have a little more margin, open the validationStyle.css file and add the following:.text-danger p {  margin: 1em;}Go back to the home page, and then open the leave request form again.From the palette, change the title widget at the top of the form. In the text property, write Leave request.In the palette on the left, select Fragments, and then drag and drop the fragment just created below the form title, as shown here (from the preview):Use a select widget for the leave typeThe user usually selects one option of leave type and does not type free text. A predefined list of such values could be:  Annual leave  Anticipated annual leave  Unpaid  OtherTo implement such a list, remove the generated input widget for type and add a select widget with the following properties:  Label: Type  Required: yes  Placeholder: type  Available values: Annual leave, Anticipated annual leave, Unpaid, Other  Value: formOutput.typeContractCustom validationUse contract response for server side validationAt this stage, you have added some simple control over the different inputs. You will now learn about more advanced validation checks. For example, let’s express those three rules:  The start date must be earlier or the same than the end date  The number of days must be greater than zero  The leave type must be one of Annual leave, Anticipated annual leave, Unpaid, or Other.For the second requirement, you have already set a control on the inputFor the last requirement: you have already changed the widget type from input to select.Therefore, on those two fields, a user cannot submit wrong data.However, keep in mind that while client-side validation plays an important role in providing a good user experience, it can easily be circumvented and therefore can not be trusted. Server-side validation is still necessary for a secure application.For this reason, we need to add some constraints to the contract, process side, one for each rule.Go back to the Studio, and at pool level, go to the Execution pane &amp;gt; Contract &amp;gt; Constraints tabs to define the constraints as shown here:The server error response message on submit when one of the constraints fails has an explanations attribute.This attribute is an array of the error message of each constraint that has failed.On the UI Designer side, you need to catch the error response message on submit:Go to the form Variable panel, and create a new variable called instantiationErrorResponse.Then select the Submit button and in its Failed response value property, type instantiationErrorResponse.Now you need to display each error message in red in the form. To do so, you need to create an iteration on the explanations messages.From the palette, drag and drop a Container just below the form title. In its Collection property, type instantiationErrorResponse.explanations .Inside this container, add a text widget. In its CSS classes property, type text-danger and bg-danger and in its text property, type __.Now go back to the studio and run the process to test the form error messages on submit.Setting a start date older than an end date will produce the following screen (given that other fields are set correctly):Use frontend validationLet’s add two more constraints to the leave request form :  nbDays must be more than 0 and less than a value retrieved externally (number of days the user has left)  type with value Other displays a comment field limited to 100 characters (the Human Resources officer needs to know what type of leave this is)Number input value controlTo help the user to fill out the form and tell him/her the number of days is valid according to the amount of days left, create a new variable remainDays. It will provide the number of days left for the leave type Annual leave.In real life, it should be of type External API.For the sake of this turotial, just make it a JSON variable to test our form.The value is:{  &quot;Personal leave&quot;: 2,  &quot;Annual leave&quot;: 12}Then, on the Number of days input widget, set the Min value property to 0.5 and set the Max value property to remaingDays[formInput.leaveRequest.type].Doing this allows to validate the number of days value according to the leave type.Change the inputs order to give the form a more more natural flow (type before number of days).The form control of the number days input widget now exposes two new CSS classes for the validity of the input : ng-invalid-min and ng-invalid-max. In the same way, the $error will hold the attributes min and max when value is below minimum value or above maximum value respectively.On the form, if you set a wrong input in the number of days after setting the type to Personal Leave, it looks like this:Text input value controlNow assume that in the studio Business Data Model, a new comment attribute has been added to the business object LeaveRequest with a matching contract input comment.This comment must be filled when the leave type is Other.To display this comment, add a textarea widget to the right of the type widget.To only display the widget when the type Other is selected, change the Hidden property of this textarea to an expression (click f(x)) and set it to formInput.leaveRequest.type !== &#39;Other&#39; To make it required when it is displayed, change the Required property to an expression and set it to formInput.leaveRequest.type === &#39;Other&#39;In the Label property, type Comment  and in the Value property, type formInput.leaveRequest.comment, as shown here:.To compell the user to enter a text that will be the right size, add some form control on this widget by setting values to 5 to Value min length and 100 to Value max length.The form control of the comment textarea  widget now exposes two new CSS classes for the validity of the input: ng-invalid-minlength and ng-invalid-maxlength.In the same way, the $error will hold the attribute minlength and maxlength when the text length is below minimum length or above maximum length respectively.Run your process and test your form with an incorrect comment size; it will look like this:",
      "url": " /bonita/7.7/howtos/manage-control-in-forms",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-7-howtos-optimize-user-tasklist": {
      "title": "Create unique task names for the user task list",
      "content"     : "How to create unique task names for the user task listNote: This howto applies to the legacy task list -Bonita 6.0 to 6.5.x versions- as well as the new task list - from Bonita 7.3 and above.Goal: Leverage Bonita Studio to optimize user comfort and efficiency by inserting case information in task name and task description.During process modeling, a task is given a generic definition in the process definition, so its name is generic, such as “Validate request”. This is useful for development.Within a process instance (case), this task name must be contextualized with business information specific to the case so that, in the user task list, users effciently pick the right task to do.Pre-requisites: create the process examplePool Data modelVariables Process instantiation contract Instantiation form&quot;Validate request&quot; task Configure the display optionsDisplay nameDisplay description Description after completionView it in the task listSearch a task name based on word-based searchPre-requisites: create the process examplePoolFirst, create a new diagram. Then model the process in the first pool:  Rename the diagram into “Request management” by clicking in the blanck space around the pool  Rename the pool into “Leave request management”  Rename the lane into “Manager”  Rename the start event into “New leave request”  Since the submission of a new leave request happens at pool level (process instantiation), no need for a Submit request task ; just rename the default human task into “Validate request”  Add a terminate end event that you can rename “Happy end”The pool is shown here:Data modelThen, define a business object that will hold the leave requests data:  Go to the Development &amp;gt; Business Data Model &amp;gt; Manage menu option  Add a business object named LeaveRequest (with an upper case “L”), with 4 attributes:  startDate: as a DATE. Set it as mandatory  endDate: as a DATE, Set it as mandatory  requesterName: employee who submits the leave request, as a STRING  status: whether the request is “submitted” or “approved”, as a STRINGClick FinishVariablesTo allow this business object to be instantiated with each process instance, create a business variable at pool level:  In the Data pane of the pool, Pool variables tab, Business variables table, Add a business variable named leaveRequest (with a lower case “l”).  For Business object, choose LeaveRequest (the default value if you only have one object)  Click FinishProcess instantiation contractTo make sure the process gets the information it needs to start a new instance, create a contract:  In the Execution pane &amp;gt; Contract tab, click on Add from data… to generate the contract inputs from the business variable  Choose the Business variable option, and then the leaveRequest variable  Click Next  Unselect requesterName and status as the process doesn’t need this information from the form to instantiateThe default values of business data attributes mapped to contract inputs are automatically set thanks to a script generated along with the contract inputs themselves.  Click Finish, carefully read the warnings, and press OK and OK.  In the Execution pane &amp;gt; Contract tab, a complex contract input is created, mapped to the selected attributes of the leaveRequest business variable, as shown here:In actual BPM projects, we recommend you to also add a description to each contract input. It will be used as input field caption for end-users in the auto-generated form, if you decide to use such forms up to the User Acceptance Test phase of your project.When the leave request is submitted, status and requesterName must default values must be set. To do so, edit the script:  Go back to the Data pane, Pool variables tab, Business variables table  Click on leaveRequest and on the Edit… button  Close to the Default value field, click on the pencil icon  In the script, add: leaveRequestVar.status = &quot;submitted&quot;, anddef initiator = BonitaUsers.getProcessInstanceInitiator(apiAccessor,processInstanceId);leaveRequestVar.requesterName = &quot;$initiator.firstName $initiator.lastName&quot;so it becomes:def leaveRequestVar = new com.company.model.LeaveRequest()leaveRequestVar.startDate = leaveRequestInput.startDateleaveRequestVar.endDate = leaveRequestInput.endDateleaveRequestVar.status = &quot;submitted&quot;def initiator = BonitaUsers.getProcessInstanceInitiator(apiAccessor,processInstanceId);leaveRequestVar.requesterName = &quot;$initiator.firstName $initiator.lastName&quot;return leaveRequestVarClick OK, and OK.Instantiation formThe Studio generates a form based on the contract requirements, for test purposes only. This is the form used in this howto, to save some time.“Validate request” taskFor the sake of this howto, do not specify any contract of form on the task, but just create an operation to switch the request status from “submitted” to “validated” when the task is completed.  Click on task “Validate request”  Go to the Execution pane &amp;gt; Operations tab  Click on Add  In the left operand, select leaveRequest  As operator, select Use a Java method and then setStatus(String) - void  Click OK  In the right operand, write approvedThe operation is shown here:There you go. The process is ready. So how can you set a unique name for tasks, to be displayed in the user task list?Configure the display optionsFor each case (request), the task should display the requester’s name, the request start date, end date, and status. After the task is submitted, the status will change and the task can also display the validator’s name.As a good practice, we advise to display static information that defines the task in the Display name field, and dynamic information that appears, disappears or changes over the life of the case in the Display description and Description after completion fields. Therefore:  Start date, end date, and requester’s name will be managed in the task name  Status and validator’s name will be managed in the descriptionTo configure the display options:  Select the Validate request task  Go to General pane &amp;gt; Portal tab.Display nameThe task display name will be made of the requester’s first name, last name, and the leave start date and end date.  Next to the Display name field, click the pencil icon to display the expression editor.  Select the Script expression  Give it a name: buildValidateRequestDisplayName()  Type the script. return &quot;Validate leave: ${leaveRequest.requesterName}: ${leaveRequest.startDate.format(&#39;yyyy-M-d&#39;)} / ${leaveRequest.endDate.format(&#39;yyyy-M-d&#39;)}&quot;.toString()Click OK.Display descriptionAs a dynamic information, status is addressed here:  Next to the Display description field, click the pencil icon to display the expression editor.  Select the Script expression type  Give it a name: buildValidateRequestDisplayDescription()  Type the script. return &quot;${leaveRequest.status}&quot;.toString()Click OK.Description after completionThe status of the request when it’s validated as well as the validator’s name are displayed in the Done tasks filter of the user task list. To define it:  Next to the Description after completion field, click the pencil icon to display the expression editor.  Select the Script expression type  Give it a name: buildValidateRequestDescAfterCompletion()  Type the script. import com.bonitasoft.engine.api.APIAccessor; def executedBy = BonitaUsers.getUser(apiAccessor, apiAccessor.processAPI.getHumanTaskInstance(activityInstanceId).executedBy); return &quot;${leaveRequest.status} by ${executedBy.firstName} ${executedBy.lastName}&quot;.toString()Click OKWhen reusing these features for your own projects, make sure that the result of your scripts do not exceed 255 characters.View it in the task list  Save the diagram  Run the pool. The default loggued user is Walter Bates  Fill out the default instantiation form with two dates  Click on StartOnce you are sent to the task list, you can see that the task name is contextualized.It is computed once, when the task becomes ready.Note: The following set of instructions only applies to the task list in Bonita 7.3.0 and above. In earlier versions, the Description field is displayed by default.To display the Description column and view the submitted status:  Click on the settings wheel icon on the top right of the list  Select Description  Click outside the settings boxThe table settings have changed to display the Description column. It will be stored in the local storage of the browserYou can see the description field, showing the status: “submitted”, as shown here:  Logout  Login with helen.kelly / bpm credentials (as if Helen Kelly is Walter Bates’ manager)  Perform the task  Go to the Done tasks filterThe Description column now shows the description after completion, with an edited status as well as the name of who performed the task, as shown here :If you don’t use the description after completion field, the Description column will still show the “display description” information.Unlike the “technical” name and description of a task in the Studio, which are useful for development, information for each task as display name, display description and description after completion will be unique for each case in the task list, to make the task list more efficient for the users.Search a task name based on word-based searchAnother feature you can use to improve end users efficiency and satisfaction is word-based search:To allow users to efficiently search by task name, you can configure the search option: from starts by (the beginning of the whole task name string), you can switch to word-based search (the beginning of every word in the task name).To do so, go to word-based search.Note: Setting the word-based search may result in lesser performance, with some delay experienced by users on the display of search results. Turning this feature on requires some testing on your environment.",
      "url": " /bonita/7.7/howtos/optimize-user-tasklist",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-7-howtos-rta-mail-template": {
      "title": "Use the rich textarea widget in a mail template",
      "content"     : "How to use the rich textarea widget in a mail templateUsing a leave request management process example, you will learn how to use a mail template in a form.  Out of office message processCheck email content taskSend test email service taskSend message to mail serverRun the processOut of office message processUsually, when leaving for a vacation, you set your mail account up with an out of office message to notify your senders that you are not here until a specific date.You will design a process using Bonita:First, draw the wireframe of the process in Bonita Studio.The process consists of a :  a start event  a human task asking for the user to check the email content which will be send, the dates of its vacation and whether it wants to test the mail before submitting it to the mail server.  a service task sending the mail to the user  a service task which sends the out of office mail message to the mail server  an end eventThe process will look like this:  Conditions are set on the transition out of the Check Email content task allowing to know which path to use.We create a Business Data Model to hold the user informations :  startDate: leave date start as a DATE  endDate: leave date end as a DATE  title: the mail title as a STRING  body: the mail body as a STRING with a length of 2048  A business object variable will be created at pool level, named outOfOfficeMessage. It will to be initialized via a Groovy script with the mail template of the out of office message.The template will be filled with the initiator information and its manager contact:import org.bonitasoft.engine.identity.ContactData;import org.bonitasoft.engine.identity.User;def ooom = new com.company.model.OutOfOfficeMessage();User u = BonitaUsers.getProcessInstanceInitiator(apiAccessor,processInstanceId);User manager = BonitaUsers.getProcessInstanceInitiatorManager(apiAccessor,processInstanceId);ContactData managerData = BonitaUsers.getProcessInstanceInitiatorManagerProfessionalContactInfo(apiAccessor,processInstanceId);ContactData userData = BonitaUsers.getProcessInstanceInitiatorProfessionalContactInfo(apiAccessor,processInstanceId)ooom.setTitle(&quot;Out of office&quot;);ooom.setBody(&quot;&quot;&quot;&amp;lt;p&amp;gt;Hi,&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;I&#39;m currently out of office until the ... of .... YYYY with very limited email access.&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;For any questions feel free to contact &amp;lt;a href=&quot;mailto:${managerData.email}&quot;&amp;gt;${manager.firstName} ${manager.lastName}&amp;lt;/a&amp;gt;.&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;Best Regards&amp;lt;br&amp;gt;${u.firstName} ${u.lastName}&amp;lt;/p&amp;gt;&amp;lt;div dir=&quot;ltr&quot;&amp;gt;// ...// Mail signature// ...&amp;lt;/div&amp;gt;&quot;&quot;&quot;);ooom.setStartDate(new Date());ooom.setEndDate(new Date());return ooom;This process instantiation do not hold any form (no form in the Execution &amp;gt; Instantiation form tab) and a business object will be created with a groovy script setting the mail template.Check email content taskThe Check email content human task will consists of a contract matching the Business object outOfOfficeMessage for it to be mapped with the contract output. We also will need a local variable which will allows to know if the mail needs to be tested.This variable needs to be mapped with a contract data too.The contract will looks like this :  And the operation pane will look like this:  Out transistionThis task has two possible transition :  the transition to the Send test email is condition if the local variable test is true  the transition to the Send Message to Mail Server is condition if the default flowSend test email service taskThis task allow to send a test email to the process instance initiator for him to check if the mail renderring is correct.Therefore, we will use the EMAIL (SMTP) Connector on the task out step.The connector properties will be :  The to and from properties of the connector will use groovy script to retrieve the appropriate address:BonitaUsers.getProcessInstanceInitiatorProfessionalContactInfo(apiAccessor,processInstanceId).email;The Subject will use a groovy script too to retrieve the business variable property:outOfOfficeMessage.titleThe Message will use a groovy script too to retrieve the business variable property:outOfOfficeMessage.bodyOnce this task is completed, a new Check email content human task is available.o  Send message to mail serverHere, the out of office mail message has been validated and the way the mail server handle the out of office mail configuration for a given user depends on the mail server provider and will not be detailed here.It will use a connector that will send the appropriate information via an external API.Form for ‘Check Email content’ taskOn ‘Check Email content’ task, in the Execution &amp;gt; Form pane, use the pencil  icon to generate a default form from the contract.It will look like this:  For a better usability, we can  :  rename Start Date to Start  rename End Date to End  have both date widget on the same line  change the checkbox Test to a select box :  add a select widget below the checkbox  create a nextStepChoice JSON variable defining the different choices :[{&quot;name&quot;: &quot;Receive a test email in my mailbox&quot;, &quot;value&quot;: true},{&quot;name&quot;: &quot;Send mail message to mail server&quot;, &quot;value&quot;: false}]set the following properties to the select widget:  Label hidden to true  Available values to nextStepChoices  Displayed key to name  Returned key to value  Value to formInput.testIt will look like this:  We need to retrieve the business object outOfOfficeMessage which contains the mail contents.We use an External API variable named outOfOfficeMessage which uses the context variable business object reference link: ../We bind the attributes of outOfOfficeMessage to fill the formInput variable that is already bound to inputs.Change the formInput type to Javascript Expression and set the value to:return {  &quot;outOfOfficeMessageInput&quot; : {&quot;title&quot; : $data.outOfOfficeMessage.title,&quot;body&quot; : $data.outOfOfficeMessage.body,&quot;startDate&quot; : $data.outOfOfficeMessage.startDate,&quot;endDate&quot; : $data.outOfOfficeMessage.endDate  },  &quot;test&quot; : false};The variable pane will look like this:  We will take advantage of the Rich text area widget to have a nice way to visualize the mail body.Add a Rich text area widget below the title input widget:  set the value to formInput.outOfOfficeMessageInput.body (the same as the body input widget)  set the Label property to Body  set the Required property to yes  set the Style toolbar property to p, ul, ol  set the Miscellaneous toolbar property to html, insertImage, insertLink, undo, redo, clearClick on preview. And the form will look like:  Run the processEverything is now ready and the process can be started.In the Studio, click on Run.An instance of the process is started and a task is available.Take it and you will see the following form:  ",
      "url": " /bonita/7.7/howtos/rta-mail-template",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-7-howtos-share-a-repository-on-github": {
      "title": "Share a repository on GitHub",
      "content"     : "How to share a repository on GithubNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.This page explains how to push an existing Bonita repository on GitHub to share it with teammates. For more information on Git integration in Bonita Studio, you can read the reference documentation page.Create an empty GitHub repositoryShare with GitCommitting with the Staging viewAdd, Commit and Push shortcutCreate an empty GitHub repositoryTo create new GitHub repository you will need a GitHub account.Then you will be able to create a repository.Note: Leave the new repository empty. No .gitignore, no readme. Do not commit in the new repository.Share with Git  Open a Bonita Studio, and if needed, switch to the repository you want to share.  Go to Repository &amp;gt; Team &amp;gt; Git &amp;gt; Share with Git  The repository default of Bonita Studio cannot be shared, as it is used as a backup repository when needed. If the content to share belongs to the default repository, you need to create a new repository for duplication purposes: enter the name of the new repository.  Click on “Share”.  In the case of repository content duplication, the content is duplicated and the studio switches to the new repository.   In all cases, the local Git repository is initialized, and a .gitignore file is created.  Enter a commit message for the initial commit. If it is the first time you use Git, a dialog will prompt to ask for an identity (mail and name). This identity will be stored in the Git configuration and can be updated in preferences afterward. All your commits will be authored with this identity. Note that this is your Git identity, different from your GitHub credentials.  Click on “Commit and Push”.  To push the repository on the GitHub remote:a.  On GitHub, navigate to the main page of the repository. Under the repository name, click on “Clone or download”. In the Clone with HTTPs section, click on the icon to copy the clone URL for the repository.b. In the studio, paste the URL in the URI text inputc. Do not select anything in the “Protocol” drop down list, nor write anything on the “Port” input fieldc. If needed, enter your GitHub username and password in the Authentication formd. Click on “Next”e. By convention, the default Git branch is named master, but you can change this here.f. You can also change the pulling strategy (default is merge)g. Click on “Next”h. Click on “Finish” (Push will be done in a background job, visible at the bottom right corner of the studio window)i. When the Push is done, a push confirmation dialog is displayed  To validate that the push has actually been done, you can check your repository on GitHubYou may also use the ssh authentication mechanism if you do not want to use https. You still do not need to select the protocol nor the port in this case. See GitHub documentation to configure ssh.Committing with the Staging view  Create a new diagram and save it.  A new Git Staging view is now accessible. From this view you can manage the status of your repository:  You can see the unstaged changes: the files in this section have changed but not been updated yet, which means that they are unstaged. That is, if we commit right now, nothing will happen. You have to stage a file before you can commit it.  Below are the staged changes: you can add files from the unstaged changes in the staged changes by clicking on the add button (+). Only staged changes will be part of the next commit. You can remove a staged change by clicking on the remove button (-).Add the new process to the staged changes  Type a commit message in the right panel of the Git Staging view  Click on Commit  Go to Repository &amp;gt; Team &amp;gt; Git &amp;gt; Show History  You can now view your commit in the repository history. You should have two commits at this stage.  Before pushing your commit, pull the remote changes  Go to Repository &amp;gt; Team &amp;gt; Git &amp;gt; Pull. This will fetch the remote and try to merge or rebase new commits into your local branch. A pull can put the repository in a conflicting state if the merge cannot be figured out by Git. Conlicting files can be merged using the Git Staging view: you need to double-click on the conflicting files indicated with a red icon to display the Diff Viewer.  In the Git Staging view you can see that your local master branch is ahead by 1 commit ([master ↑1])  Now that you are in synch with the remote, you can safely push your commit. To do so, go to Repository &amp;gt; Team &amp;gt; Git &amp;gt; Push. Click on Preview &amp;gt; and on PushAdd, Commit and Push shortcut  Make a change on the diagram and save it  Go to Repository &amp;gt; Team &amp;gt; Git &amp;gt; Commit…  Enter a commit message and click on Commit and Push",
      "url": " /bonita/7.7/howtos/share-a-repository-on-github",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-7-howtos-uid-case-overview-tutorial": {
      "title": "Create a case overview page using the UI Designer",
      "content"     : "How to create a case overview using the UI DesignerIf you need to modify our default case overview or build your own case overview page, you will have to manage the display ofboth Cases and Archived cases.Throughout this tutorial you will see how to build a simple page to manage the Case/Archived-case complexity.Let’s get started by creating a new page in the UI Designer.Since Bonita 7.7.0 you can export the default case overview from the portal and import it directly in the UI Designer for edition. The explanantions below may give you a good understanding on how it is built.Manage a &#39;caseId&#39; url parameterIs there an existing open case for our `caseId`Is there an existing archived case for our `caseId`Maybe the case does not existDisplay case detailsManage a ‘caseId’ url parameterCreate a new page in the UI Designer.This page will be used to display the case details related to a specific caseId.We will get this caseId using the page URL.So just add a new variable with:- Name = caseId- Type = URL parameter- URL parameter name = idIs there an existing open case for our caseIdTo know if there is an open case for our caseId,we need to get the case using a Get request on the API bpm/case.So we will create a new variable:- Name = openCase- Type = External API- API URL = ../API/bpm/case/?d=started_by&amp;amp;d=processDefinitionIdIf the case is open,the javascript variable openCase will contain a json object representation of our case.Else the object openCase will be undefined due to 404 error.Is there an existing archived case for our caseIdTo know if there is an archived case for our caseId,we need to get the case using a Get request on the API bpm/archivedCase filtered on sourceObjectId=.So we will create a new variable:- Name = archivedCase- Type = External API- API URL = ../API/bpm/archivedCase?c=1&amp;amp;d=started_by&amp;amp;d=processDefinitionId&amp;amp;f=sourceObjectId%3D&amp;amp;p=0If the case is Archived,the javascript variable archivedCase will contain a json list of one object, that is the json representationof our archived case.Else it will be an empty list.Maybe the case does not existSo using those two variables openCase and archivedCase, it will be easy to know the state of the case.But keep in mind that both openCase and archivedCase could be undefined, that mean the case does not exist.Then we will just need to display a message to say “The case  does not exist.”.Display case detailsSince we are able to define the state of the case, it is easy to display case details using the UI Designer.  Maybe we need to display different information for open cases or for Archived cases.Then we can create tow different containers that will be conditionally shown.Open case details will be shown if openCase is defined:Bind the property &#39;hidden&#39; of the container  withvalue= !openCaseArchived case details will be shown if archivedCase is not empty:Bind the property &#39;hidden&#39; of the container  withvalue= ((!archivedCase) || (archivedCase.length==0))",
      "url": " /bonita/7.7/howtos/uid-case-overview-tutorial",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-7-howtos-uid-modal-tutorial": {
      "title": "Create a modal window using CSS",
      "content"     : "How to create a modal window using CSSA nice aspect of the UI designer is the way it takes advantage of the WEB technologies letting you put the style of your page where it belong.In a CSS file.Throughout this tutorial you will see how to build a modal window using only CSS.Let’s get started by creating some content.You will need a container which will end up being our modal and some other content on top of which that modal will be displayed.  Display a container on top of all other elementsAdd an overlay to make underneath elements inaccessibleTake control over the modal The creationOk now close that modalDisplay a container on top of all other elementsCreate a CSS file with the following content. .Modal-content { position: absolute; width: 80%; left: 0; right: 0; margin: 5% auto; background-color: #fff; border-radius: 2px; box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12); padding: 2em; }Note that the name of the class used follows BEM methodology.BEM or any other structural naming convention enforces good practices such as responsibility segregation, reusability, name collision avoidance and more.To use that file in the UI Designer you need to upload it as a page asset. To do so, open your page. Go to the Assets section at the bottom of the screen and click on Add a new asset.Select CSS type, Local source then upload your CSS file.It will be added to the page and all classes will be available and accessible from the property CSS classes of any element.Now lets add Modal-content to the container property CSS classes.Check out the result by hitting the Preview button.  While working on your CSS file, one could serve its local CSS file using a local server.Then instead of uploading the file add an external CSS asset which point at your file. That would greatly speed up development.For production, that file would still need to be uploaded as a CSS asset.Add an overlay to make underneath elements inaccessibleAdd a new container and move the Modal-content container into the overlay container in order to to have it on top.Add the following code to CSS file..Modal-overlay {position: fixed;width: 100%;height: 100%;top: 0;left: 0;background-color: rgba(0, 0, 0, .4);z-index: 1;}You now need to add the Modal-overlay class to our overlay container.  Take control over the modalThere is many other approach to deal with how and when to display a that modal with the UI designer.Here is one which could scale nicely with multiple modals.The creationNow that you got a modal you need to take control over when to display it.You will start by creating a JSON variable with an array called modals.So go to the Variables section at the bottom of the screen and click on Create a new variable.Give it the name modals and JSON type. It will take for value an empty array [].  Now bind the modals variable to the Collection property of the Modal-overlay container.That would have for effect to mask the modal whenever the array is empty.Also anything which add an object to the array modals will display a new modal.For the purpose of this tutorial you will do that with a button.Lets add a button and configure the Action property with Add to collection then bind the modals variable to the Collection property.  You can test the result using the preview.Ok now close that modalA direct follow up to the modal creation is to close it. The previous method allowed us to use another action from the button widget. First add a button in the modal and configure the Action property with Remove from collection.Then bind the modals variable to the Collection property.You need to define which object will be removed and you can do that by selecting Item for the Remove property and adding the $item variable to Item to remove.Here $item is available because it is in a repeated container context.  Here is the result of that tutorial  ",
      "url": " /bonita/7.7/howtos/uid-modal-tutorial",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-7-index": {
      "title": "index",
      "content"     : "Bonita DocumentationWelcome to the Bonita documentation website.Click on the links below to find useful information quickly, or browse the whole content tree, or use the table of contents to go straight to the information you want to read.HighlightsRelease notes 7.7  Bonita home removal for easier configuration  User task list redesign for better efficiency  New UI Designer widgets: File viewer and Rich text area  UI Designer usability improvementsGetting startedGetting started tutorial  Process diagram overview  Key concepts  UI designer overview  Bonita BPM Studio installation  Basic Bonita BPM platform installation  Create your first project with the Engine APIs and MavenResourcesDownload Bonita BPM software  BPMN standard  The Ultimate Guide to BPMN2  Best Practices for Continuous Integration with Bonita BPM  Javadoc",
      "url": " /bonita/7.7/index",
      "author": "",
      "categories": ""
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-bonita-in-a-cluster-cluster-administration": {
      "title": "Cluster administration",
      "content"     : "Cluster administrationNote: For Enterprise and Performance editions only.This page explains how to manage a Bonita cluster.Backing up a clusterTroubleshootingMonitoring a processDeploying a process in a Bonita clusterManaging your organization in a clusterBacking up a clusterBack up your cluster in the same as you would back up a standalone Bonita system, by backing up the database. You also need to back up the load balancer (see your load balancer documentation for details of how to do this).TroubleshootingEach Bonita Engine maintains its own log file on the node at tomcat_home/logs/bonita.date.log, where date is the date the file is created.In addition, there is an incident file tomcat_home/logs/tenants/[TENANT_ID]/incident.log (where [TENANT_ID] is the ID of the tenant on which the erroroccurred) that is used as a last resort to record an error that cannot be handled, such as failure to access the database.Monitoring a processTo monitor a process in a cluster, use the Bonita Portal as usual. The information presented applies to process activity on all nodes in the cluster.Deploying a process in a Bonita clusterTo deploy a process in a cluster, configure the process in Bonita Studio, and then create a .bar file using the Build option of the Server menu. Import the process bar file into Bonita Portal on one of the nodes. The process is now available to Bonita Portal on every node in the cluster. The process must be started on one node. Subsequently, instances can be created on all nodes.This means that all nodes have the possibility of running instances of tasks of all processes.You can also deploy a process using the API, exactly as you would in a standalone system.Managing your organization in a clusterThe organization data used by Bonita is stored in the database, so only has to be configured once. It can be maintained from any Bonita Portal in the cluster.",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/bonita-in-a-cluster/cluster-administration",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Bonita in a cluster"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-bonita-in-a-cluster-install-a-bonita-bpm-cluster": {
      "title": "Install a Bonita cluster",
      "content"     : "Install a Bonita clusterNote: The cluster feature is a Subscription feature for Enterprise and Performance edition only.It is possible to manage the lifecycle of a node using the API to connect directly to the node, but this bypasses the load balancer so should be done with care and only in exceptional circumstances.You will learn here how to create a cluster in two ways:  Create a cluster from scratch  Convert a single node installation into a clusterNote when using the AWS supportIAM role configurationCreate a cluster from scratch Create and initialize the database for Bonita Platform Install a first nodeAdd a node to the clusterConvert a single node installation into a clusterUpdate the configuration in databaseConfigure nodes to run on this clusterCluster managementStop a nodeRemove a node from a clusterDismantle a clusterManaging the cluster with HazelcastFAQNote when using the AWS supportPlease read the following to ensure that Bonita Cluster works correctly on AWS.IAM role configurationIf you want to use IAM role for EC2 autodiscovery, you need to attach a role to your EC2 instances with a policy allowing “ec2:DescribeInstances” action. For details about IAM Roles for Amazon EC2 see AWS documentationCreate a cluster from scratchIn this part we will create a cluster from scratch. We will initialize the database on which the cluster will run, then we will configure nodes to run on this cluster. Create and initialize the database for Bonita PlatformIn this step you will create and initialize the database for the Bonita Platform cluster using the platform setup tool.When done you will have a database with all tables created and with a table CONFIGURATION containing all configuration required for the cluster to start.  Ensure that you meet the requirements.  Create the database.  In case you use Business data, create a database for the Business Data.  Download a Bonita Tomcat bundle or a Bonita WildFly bundle, and unzip it at some place of your choice.  Edit file setup/database.properties and modify the properties to suit your databases (Bonita internal database &amp;amp; Business Data database). Beware of backslash characters.In the following steps, you will update the configuration files that are in the setup/platform_conf/initial folder of the platform setup tool.  Edit the file setup/platform_conf/initial/platform_engine/bonita-platform-sp-custom.properties: Uncomment and set the bonita.cluster property to true, as follows: bonita.cluster=true  Edit the file setup/platform_conf/initial/platform_engine/bonita-platform-sp-custom.properties: In order to keep consistency between nodes, the Hibernate cache must be disabled:Uncomment and change the line:   #bonita.platform.persistence.use_second_level_cache=true change it to:   bonita.platform.persistence.use_second_level_cache=false  Edit the file setup/platform_conf/initial/platform_engine/bonita-platform-sp-cluster-custom.properties: uncomment and set the bonita.cluster.name property to a name of your own, e.g. myBPMCluster, This name must be unique on the local network if you are using multicast  Edit the file setup/platform_conf/initial/platform_engine/bonita-platform-sp-cluster-custom.properties: set to true one of bonita.platform.cluster.hazelcast.multicast.enabled or bonita.platform.cluster.hazelcast.tcpip.enabled or bonita.platform.cluster.hazelcast.aws.enabled, as follows:Uncomment the # properties and set only one of them to true, set the others to false depending on how you want your nodes to discover each others.Example: bonita.platform.cluster.hazelcast.multicast.enabled=false bonita.platform.cluster.hazelcast.tcpip.enabled=true bonita.platform.cluster.hazelcast.tcpip.members=ipServer01,ipServer02Important: If you don’t use bonita.platform.cluster.hazelcast.multicast.enabled, you must uncomment the # properties and set it to false to deactivate it, as follows: bonita.platform.cluster.hazelcast.multicast.enabled=false.For more information on this take a look at the Hazelcast Documentation.Copy licenses of all your nodes in setup/platform_conf/licenses.  Run setup.sh init or setup.bat init as described in the platform setup tool page.At the end of the script, you should see the following line: “Initial configuration files successfully pushed to database”.This creates the database tables needed by Bonita platform, stores the configuration into this database, and stores the licence files for all your cluster nodes into the database.If later you need to change the configuration of the node discovery or add new licenses to the Bonita Platform configuration, you can update the configuration by following this guide. Install a first node  Once you have done all the steps from section Create and initialize the database for Bonita Platform above,  run setup.sh configure or setup.bat configure as described in the Bundle configuration to have your Tomcat / WildFly bundle configured to point to the right database.  Once the bundle is configured, and to avoid unsynchronized versions of the configuration files between several nodes, you are advised to deletethe folder [TOMCAT_DIRECTORY]/setup and its entire content.Note:  if you want to keep it for future configuration changes, just move the folder [TOMCAT_DIRECTORY]/setup and its entire content outside the [TOMCAT_DIRECTORY]to use it as your main  platform setup tool.  If your Bonita installation is behind a proxy or is installed inside a Docker container (mainly in TcpIp or Awsdiscovery modes), you must declare its public address by adding the following property:-Dhazelcast.local.publicAddress=*publicaddress*, this property should be added in the [TOMCAT_DIRECTORY]/setup/tomcat-templates/setenv.sh or [TOMCAT_DIRECTORY]/setup/tomcat-templates/setenv.batWhen the installation is complete, start Tomcat on the node. This starts Bonita Platform:./start-bonita.shThen start the cluster in the load balancer.Check that the log file contains messages of the following form: March 22, 2016 5:07:07 PM INFO: com.hazelcast.cluster.ClusterService [10.0.5.3]:5701 [myBPMCluster] Members [1] { Member [10.0.5.3]:5701 this } [...] March 22, 2016 5:09:18 PM INFO: org.apache.catalina.startup.Catalina start Server startup in 30333 msThen deploy a basic process and check that it runs correctly, to validate the installation.Add a node to the clusterYou can add a new node to a cluster without interrupting service on the existing nodes.  Copy the entire Tomcat / WildFly directory to another machine.  If Hazelcast Node discovery is configured with TCP, update the configuration in database using the platform setup tool, as follows:  Run the setup.sh pull or setup.bat pull. This will retrieve the configuration of your platform under platform_conf/current folder.  Edit the file platform_conf/current/platform_engine/bonita-platform-sp-cluster-custom.properties and add the node to the list of members as follows for example: bonita.platform.cluster.hazelcast.tcpip.members=ipServer01,ipServer02,ipServer03Start the Tomcat on the new node, running ./start-bonita.sh script  Update the load balancer configuration to include the new node.The log file will contain messages of the following form: March 22, 2016 5:12:53 PM INFO: com.hazelcast.cluster.ClusterService [10.0.5.17]:5701 [myBPMCluster] Members [2] { Member [10.0.5.3]:5701 Member [10.0.5.17]:5701 this } [...] March 22, 2016 5:12:28 PM INFO: org.apache.coyote.http11.Http11Protocol start Starting Coyote HTTP/1.1 on http-7280 March 22, 2016 5:12:28 PM INFO: org.apache.catalina.startup.Catalina start Server startup in 30333 ms  In the log, you can see how many nodes are in the cluster, and their IP addresses and port number. This node that has been started is indicated by this.The new node is now available to perform work as directed by the load balancer.Convert a single node installation into a clusterIn this case you already have a Bonita Platform running as single node installation, you will change the configuration to make it able to have multiple nodes.Update the configuration in databaseSome properties of the Bonita Platform needs to be changed in order to make your installation work as a cluster node.  Use your platform setup tool previously used to setup and configure your node. If you don’t have a platform setup tool (which is unlikely), you can download the Bonita Deploy bundle and unzip it at some place of your choice.The platform setup tool is also present in the Tomcat or WildFly bundle under the `setup` directory.  If the platform setup tool is not configured already, configure it as described in the platform setup tool page. If it is, move on to next step.  Run the setup.sh pull or setup.bat pull. This will retrieve the configuration of your platform under platform_conf/current folder.In the following steps, you will update the configuration files that are in the platform_conf/current folder of the platform setup tool.Edit the file platform_conf/current/platform_engine/bonita-platform-sp-custom.properties: Uncomment and set the bonita.cluster property to true, as follows: bonita.cluster=true  Edit the file platform_conf/current/platform_engine/bonita-platform-sp-custom.properties:In order to keep consistency between nodes, the Hibernate cache must be disabled as follows: Uncomment and change the line:   #bonita.platform.persistence.use_second_level_cache=true change it to:   bonita.platform.persistence.use_second_level_cache=falseEdit the file platform_conf/current/platform_engine/bonita-platform-sp-cluster-custom.properties: uncomment and set the bonita.cluster.name property to a name of your own, e.g. myBPMCluster, This name must be unique on the local network if you are using multicast  Edit the file platform_conf/current/platform_engine/bonita-platform-sp-cluster-custom.properties:  set one of bonita.platform.cluster.hazelcast.multicast.enabled or bonita.platform.cluster.hazelcast.tcpip.enabled or bonita.platform.cluster.hazelcast.aws.enabled to true as follows: Uncomment the # properties and set only one of them to true, set the others to false depending on how you want your nodes to discover each others.Example:bonita.platform.cluster.hazelcast.multicast.enabled=falsebonita.platform.cluster.hazelcast.tcpip.enabled=truebonita.platform.cluster.hazelcast.tcpip.members=ipServer01,ipServer02,ipServer03Important: If you don’t use bonita.platform.cluster.hazelcast.multicast.enabled, you must uncomment the # properties and set it to false as follows: bonita.platform.cluster.hazelcast.multicast.enabled=false.For more information on this take a look at the Hazelcast Documentation.  Copy licenses of all your nodes in platform_conf/licenses  Run the setup.sh push or setup.bat push. This will update in database the configuration of your platform.Configure nodes to run on this clusterThe configuration of the node you were using is still valid. You should be able to run it without any issue.If your Bonita installation is behind a proxy or is installed inside a Docker container, please refer to theInstall a first node part.Cluster managementStop a nodeSimply run ./stop-bonita.sh script.Remove a node from a clusterThis section explains how to perform a planned shutdown and remove a node from the cluster.  Update the load balancer configuration so that no further work is directed to the node. All work that is already in progress on the node that will be shutdownwill continue until completion. Do not remove the node completely, because the load balancer needs to be informed when current work is finished.  Allow current activity instances to complete.  Stop the Tomcat server: run ./stop-bonita.sh  Update the load balancer to remove the node from the cluster.The node is now removed from the cluster.Dismantle a clusterTo dismantle a cluster:  Disable processes.  Allow current activity instances to complete.  When each node has finished executing, stop it.  When all nodes have been stopped, update the load balancer to remove the cluster.The individual nodes can now be used as standalone Bonita server, provided the following change in the configuration is done:Update file bonita-platform-sp-custom.properties located in the platform_engine folder of the configuration, use the platform setup tool to update it and set back the bonita.cluster property to false.See How to update a Bonita Tomcat Bundle configuration for more details on updating the configuration.Managing the cluster with HazelcastA Bonita cluster uses Hazelcast as the distributed cluster dispatcher layer. Therefore you can use the Hazelcast tools to manage the cluster topology.See the Hazelcast documentation for details.Note that a Bonita cluster uses multicast for discovery by default. You can disable this in Hazelcast.If you are using multicast, you must ensure that your production environment is insulated from any test environment that might also contain cluster nodes.This is to ensure the nodes do not discover each other on the network, if they are not supposed to run inside the same cluster.It is possible to have more than one cluster on the same network. In this case, you must configure the cluster names to be sure that it is clear which node belongs to which cluster.You can configure the cluster name through Hazelcast or by updating bonita-platform-sp-custom.properties located in the platform_engine folder of the configuration, use the platform setup tool to update it.FAQQ: I regularly get this warning message when 2 or more nodes are started in cluster:2016-06-13 11:41:22.783 +0200 WARNING: org.bonitasoft.engine.scheduler.impl.BonitaJobStoreCMT This scheduler instance (...) is still active but was recovered by another instance in the cluster.  This may cause inconsistent behavior.Symptom:The clocks of the servers are not synchronized.Resolution:The system time of all cluster nodes must be maintained in synchronization with time servers.It is a good idea to have also the db server system time synchronized too.Synchronize the system time of all nodes and restart application servers.",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/bonita-in-a-cluster/install-a-bonita-bpm-cluster",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Bonita in a cluster"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-bonita-in-a-cluster-overview-of-bonita-bpm-in-a-cluster": {
      "title": "Overview of Bonita in a cluster",
      "content"     : "Overview of Bonita in a clusterNote: For Enterprise and Performance editions only.You can use Bonita in a cluster configuration to provide increased availability: more than one node runs Bonita Engine, so if a node becomes unavailable, the remaining nodes in the cluster can take over, minimizing the interruption to the service and therefore to your business. A Bonita cluster alone does not guarantee high availability. You must also ensure that the prerequisite infrastructure is highly available.See also:Install a Bonita clusterCluster administrationIntroductionDifferences for Bonita Portal usersDifferences for process designersTechnical descriptionPrerequisite infrastructure:Cluster structure diagramDefinitions:LimitationsActive and passive nodesAdvantages and drawbacksComparison with 5.xIntroductionThe advantage of using a cluster configuration is better availability. The cost is a slightly more complicated configuration to set up and maintain. A process that already runs on Bonita will run without modification on Bonita in a cluster.Bonita cluster characteristics:  High availability: Provided you have at least two active nodes and the prerequisite infrastructure is highly available, your Bonita cluster is highly available.Differences for Bonita Portal usersThe HTTP load balancer hides the fact that you are not always using the same Bonita Portal. The exception to this is if a node fails while you are completing a form; in this case, the data you have entered might not be stored, and you will have to start filling in the form again when a new Bonita Portal takes over.Differences for process designersNo changes are needed to make a process run in a Bonita cluster. A process that runs in a non-cluster system will run unchanged in a cluster. However, depending on your process, some optimizations might be possible. For example, to minimize the impact on users of a failover while they are filling in forms, do not make forms too long. This is recommended good practise for all process forms, but is even more important when a process is running in a cluster.The Bonita Studio development environment runs on a single node; there is no advantage to installing it on a cluster.Technical descriptionThis section describes the structure of Bonita deployed in a cluster. A cluster is a collection of nodes each running Bonita Engine, Bonita Portal, and an application server.A Bonita cluster is a collection of at least two nodes that run Bonita Engine, Bonita Portal, and an application server. An HTTP load balancer directs the connection to one of the available Bonita nodes, balancing the workload of the nodes. If a node becomes unavailable, the load balancer redirects the connection to another node.The Bonita Engines exchange information to enable the redirection. This means that all automatic actions handled by the Engine (including automatic tasks, events, timers, and automatic state transitions of tasks) are automatically taken over by another node.Each Bonita Portal works with a local Bonita Engine, so when a user logs in, they are logged in to a specific node. If that node becomes unavailable, the user session is lost. This means that any transaction that is not yet committed is lost, including any data entered in a form but not submitted. The user will need to log back in to the Portal.Assumptions: We assume that Ubuntu Linux is used as the operating system for Bonita nodes in a production system. The application server used is Tomcat.Prerequisite infrastructure:  A highly available load balancer  A highly available network, with all nodes able to see all other nodes  A highly available database accessible from all nodes  All nodes including the database one should be configured with the same clock (via NTP time synchronization for example) and same timezone (UTC is recommended)Cluster structure diagramDefinitions:  Load balancer: an HTTP load balancer manages the allocation of work to nodes in the cluster. No load balancer is provided with Bonita, so you can choose the most appropriate for your system. For a production system with a high load, a hardware load balancer is recommended.  Node: a JVM running a Tomcat application server, Bonita Engine, and Bonita Portal. For high availability, separate physical nodes are required.  Engine database: a single database used by all the Bonita Engines in the cluster. It is the equivalent of the local database in a non-cluster configuration. The database needs to be highly available and to handle multiple simultaneous accesses.  Failover: if a node in the cluster fails, the work it was performing is redirected by the load balancer to another node in the cluster. This is known as failover, and can be automated or manual.  Client: a process application client. A client application connects to the cluster through the load balancer, and uses the Bonita Engine API. Even if your process users do not use Bonita Portal, it is still present in the cluster, so can be used for administration.LimitationsThe nodes must all be in the same datacenter, to keep latency of updates to shared information to an acceptable level.All nodes must run the same software configuration (same versions on Bonita and application server).The Hibernate cache must be disabled.The load balancer must be configured to use sticky sessions (this is needed to manage sessions created when users log in to the Portal).There is no automated migration from a Bonita Open Solution 5.10 cluster to a Bonita cluster, because the cluster models are completely different. You can migrate a process from 5.10, but you need to build your Bonita cluster from scratch.Active and passive nodesIf an active node fails or is stopped, the load balancer redirects work to the remaining active nodes. This keeps the downtime to a minimum, but increases the load on the active nodes.A passive node is installed with exactly the same software and has the same configuration as an active node, but the application server and Bonita Engine are not started.A passive node is a “cold standby”. It does not consume computing resources. To add a cold-standby node to the cluster, the necessary licenses must be installed, the configuration must be completed, the application server must be started,and it must it must be activated in the load balancer.A cluster needs a minimum of two active nodes for high availability. The maximum number of nodes you can have depends on the load balancer you are using.Advantages and drawbacksA Bonita cluster has the following advantages over a single-node system:  A cluster provides high availability, as long as your entire infrastructure, including the network and database are highly available. If a node is shut down, stops, or crashes, anything that was running on that node is automatically retrieved by another running node in the cluster.  A new node is discovered and added to the cluster easily because of the Hazelcast in-memory data grid.  The network connection of a node is flexible: it can be configured with or without multicast.  A cluster is easy to configure.  BPM event matching and timer execution are distributed across the cluster by Quartz.There are some drawbacks to the basic Bonita in a cluster configuration, but these can be addresses using other component in your infrastructure:  Only active-active modes is supported. There is no mechanism for starting a new node if a cluster node goes out of service. This could be provided by a third-party application.  There is no integrated load balancer, so the client application selects the node on which to make a API call. You should use an external load balancer. For high volume, a hardware load balancer is recommended.  All the nodes must use the same database, so the database itself must be highly available.Comparison with 5.xIn Bonita Open Solution 5.10, the cluster implementation had the following advantages:  Support for high availability  The possibility to add a new node at runtimeIt also had the following drawbacks:  There is no node discovery mechanism, and the cluster construction relies on the database. This means that performance is lower than an in-memory data grid.  Only one node is responsible for execution of matching events, which can be a performance bottleneck.  Only active-active modes is supported. There is no mechanism for starting a new node if a cluster node goes out of service. This could be provided by a third-party application.  There is no integrated load balancer, so the client application selects the node on which to make a API call. You should use an external load balancer. For high volume, a hardware load balancer is recommended.  All the nodes must use the same database, so the database itself must be highly available.  The Bonita Large Data Repository (Bonita LDR) folder must be shared by NFS, so to maintain high availability, you should use an HA NFS service.",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/bonita-in-a-cluster/overview-of-bonita-bpm-in-a-cluster",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Bonita in a cluster"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-configurable-archive": {
      "title": "Configurable Archive",
      "content"     : "Configurable ArchiveNote: For Enterprise and Performance editions only.The Configurable Archive feature is provided by the com.bonitasoft.engine.archive.impl.ListArchivingStrategy service implementation, which only works with a Enterprise or Performance license. It enables you to specify for each FlowNode type whether or not to archive values when the flow node is changed. This determines what information (for example archived instances of processes and executed tasks) is available to an administrator in Bonita Portal.Deactivating archives has a positive effect on overall performance of the system as it reduces the number of entries inserted in the database. It has also the benefit of reducing the disk space used by the database. However, it prevents users from keeping a history of past activity. The most visible impact of this loss of information is through the Bonita Portal. Completed tasks will not be visible.In general we recommended that you set all attributes to true or all to false. However, here are some details on some settings that you can change if users have a specific use case:  To archive the ProcessInstance comments when the process instance completes, set org.bonitasoft.engine.core.process.comment.model.SComment to true. Comments entered in a task during execution are archived in executed tasks in archived cases.  To archive a process instance each time its state changes, set org.bonitasoft.engine.core.process.instance.model.SProcessInstance to true.  To archive transition instances, set org.bonitasoft.engine.core.process.instance.model.STransitionInstance to true. This information is not available in Bonita Portal.  To archive an automatic (service) task each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SAutomaticTaskInstance to true.  To archive a manual task (e.g. sub-tasks) each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SManualTaskInstance to true.  To archive a user (human) task each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SUserTaskInstance to true.  To archive a receive task each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SReceiveTaskInstance to true. This information is not available in Bonita Portal.  To archive a loop activity each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SLoopActivityInstance to true.  To archive a multi-instances activity each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SMultiInstanceActivityInstance to true.  To archive a call activity each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SCallActivityInstance to true.  To archive a gateway each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SGatewayInstance to true. This information is not available in Bonita Portal.  To archive a sub-process activity each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SSubProcessActivityInstance to true.  To archive a connector instance each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SConnectorInstance to true.To configure the archiving strategy, edit the file bonita-tenant-sp-custom.properties and specify the items that you want archived. By default, the archiving strategy is that everything is archived, so the value for each type of information is set to true. Change this setting to false for the items that you do not want to archive.",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/configurable-archive",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-multi-tenancy-and-tenant-configuration": {
      "title": "Multi-tenancy and tenant configuration",
      "content"     : "Multi-tenancy and tenant configurationNote: For Enterprise and Performance editions only.This page explains the architecture and configuration of a multi-tenant system using Bonita.Platform architecturePlatform configurationTenant creationREST APIJava PlatformAPITenant accessBonita PortalBonita APIsPause and resume a tenantPlatform architectureBy default, all installations of Bonita create a single tenant. However multi-tenancy is possible with the Enterprise or the Performance edition.Multi-tenancy involves a single software installation, called a platform, that can serve multiple independent organizations, called tenants.Each tenant is a separate, self contained configuration for a single client/company. Artifacts are deployed at tenant level, so a tenant has its own organization (users, groups, roles), processes (apps, cases, trasks), reports, and custom pages.Data within a tenant are completely isolated. A tenant cannot access data from any other tenant. A user logged in to a tenant cannot access any other tenant.After the installation of any Bonita version (Community or Subscription), a single default tenant is created and ready for use.If you are using the Enterprise or the Performance edition, you can create additional tenants, using the Platform API (through Java or REST API).These tenants are configured with a single database. This illustration shows a platform with three tenants.Platform configurationThe platform is the part of the system that is common to all tenants.Before the platform has been initialized, its configuration can be customized in setup/platform_conf/initial. However, in order to modify the configuration on aninstallation whose platform has already been initialized, you need to use the platform setup tool to retrieve the currentconfiguration and update the files in setup/platform_conf/current/. Then use the tool again to save your changes into the database.The engine platform configuration directory is located in sub-folder: current/platform_engine/.The portal platform configuration directory is located in sub-folder: current/platform_portal/.There is a separate engine configuration directory for each tenant, located in: current/tenants/&amp;lt;tenant_id&amp;gt;/tenant_engine.There is a separate portal configuration directory for each tenant, located in: current/tenants/&amp;lt;tenant_id&amp;gt;/tenant_portal.There is also a default tenant engine configuration directory, located in: current/tenant_template_engine.There is also a default tenant portal configuration directory, located in: current/tenant_template_portal.Tenant creationA tenant can be created using the Java PlatformAPI (see the Engine Javadoc) or the platform REST API.Note:If business objects will be deployed in the newly created tenant do not forget to create the business data database and configure specific data sources.This must be done for each tenant that will use the Business Data feature.ImportantOnce a tenant has been created and activated, default theme is not yet loaded.Therefore, as long as you have not logged in to the new tenant, the login page will miss the default theme.After the first login, default theme will be loaded and the login page will look as usual.REST APIThe platform REST API is a REST layer around the Java PlatformAPI to create the tenant.Walk-throughInstall curl command line toolcurl is available on Linux OS and it transfers data from or to a server with various protocols such as HTTP and HTTPS.$ sudo apt install curlNOTE: this is to be done only once.Start a tomcat  Download a BonitaSubscription-7.*-Tomcat-8.5.31.zip  Unzip it  Provide a valid license file  Start the tomcatLogin$ curl -v -c saved_cookies.txt -X POST --url &#39;http://localhost:8080/bonita/platformloginservice&#39; --header &#39;Content-Type: application/x-www-form-urlencoded; charset=utf-8&#39; -d &#39;password=platform&amp;amp;redirect=false&amp;amp;username=platformAdmin&#39; -O /dev/nullThe response to this REST API call (HTTP) generates 2 cookies, which must be transfered with each subsequent calls.One of the cookie is X-Bonita-API-Token.Note that the security against CSRF attacks is enabled by default for all fresh installations; the subsequence REST API calls using DELETE, POST, or PUT HTTP methods must define the X-Bonita-API-Token header, with the value transmitted via the associated cookie.The cookies have been saved on the disk, in the saved_cookies.txt file:$ cat saved_cookies.txt #HttpOnly_localhost	FALSE	/bonita/	FALSE	0	JSESSIONID	46EF8A05819B6C268EE700F3C3FC939Alocalhost	FALSE	/	FALSE	0	X-Bonita-API-Token	a94cbf84-6b71-409a-981f-f91b17466929Create the new tenant$ curl -b saved_cookies.txt -X POST &#39;http://localhost:8080/bonita/API/platform/tenant&#39; -H &quot;Content-Type: application/json&quot; -H &#39;X-Bonita-API-Token: a94cbf84-6b71-409a-981f-f91b17466929&#39; -d &#39;{&quot;name&quot;:&quot;MyTenant&quot;, &quot;description&quot;:&quot;My tenant&quot;, &quot;username&quot;:&quot;install&quot;, &quot;password&quot;:&quot;install&quot;}&#39;{  &quot;id&quot;: &quot;101&quot;,  &quot;creation&quot;: &quot;2017-06-09 15:11:01.191&quot;,  &quot;icon&quot;: &quot;/default.png&quot;,  &quot;username&quot;: &quot;&quot;,  &quot;description&quot;: &quot;My tenant&quot;,  &quot;name&quot;: &quot;MyTenant&quot;,  &quot;state&quot;: &quot;DEACTIVATED&quot;,  &quot;password&quot;: &quot;&quot;} The new tenant has the id `101` and its state is `DEACTIVATED`Activate the tenant with id 101$ curl -v -b saved_cookies.txt -X PUT &#39;http://localhost:8080/bonita/API/platform/tenant/101&#39; -H &quot;Content-Type: application/json&quot; -H &#39;X-Bonita-API-Token: a94cbf84-6b71-409a-981f-f91b17466929&#39; -d &#39;{&quot;state&quot;:&quot;ACTIVATED&quot;}&#39;* Connected to localhost (127.0.0.1) port 8080 (#0)&amp;lt; HTTP/1.1 200 OK$ curl -b saved_cookies.txt -X GET &#39;http://localhost:8080/bonita/API/platform/tenant/101&#39; {  &quot;password&quot;: &quot;&quot;,  &quot;name&quot;: &quot;MyTenant&quot;,  &quot;icon&quot;: &quot;/default.png&quot;,  &quot;description&quot;: &quot;My tenant&quot;,  &quot;id&quot;: &quot;101&quot;,  &quot;state&quot;: &quot;ACTIVATED&quot;,  &quot;creation&quot;: &quot;2017-06-09 15:11:01.191&quot;,  &quot;username&quot;: &quot;&quot;}Logout$ curl -v -b saved_cookies.txt -X GET --url &#39;http://localhost:8080/bonita/platformlogoutservice?redirect=false&#39;Java PlatformAPIThis solution can be used when the portal is not needed.The Java PlatformAPI creates the tenant by updating the database and creating configuration based on the tenant template files (in database too). The following example code uses the Engine Java APIs to create a tenant called “myNewTenantName”:// Get platform login API using the PlatformAPIAccessor:PlatformLoginAPI platformLoginAPI = PlatformAPIAccessor.getPlatformLoginAPI();// Log in to the platform:PlatformSession platformSession = platformLoginAPI.login(&quot;platformAdmin&quot;, &quot;platform&quot;);// Get the platform API:PlatformAPI platformAPI = PlatformAPIAccessor.getPlatformAPI(platformSession);// Create a new tenant:TenantCreator tenantCreator = new TenantCreator(&quot;myNewTenantName&quot;);tenantCreator.setUsername(&quot;install&quot;);tenantCreator.setPassword(&quot;install&quot;);long tenantId = platformAPI.createTenant(tenantCreator);platformAPI.activateTenant(tenantId);// Log out of the platform:platformLoginAPI.logout(platformSession);Tenant accessA tenant is identified by an id, which is used to log in and to retrieve the tenant. A tenant also has a name. You can use the tenant name to retrieve the tenant id.To use the newly created tenant:// use tenant-level api client:APIClient apiClient = new APIClient();// login on the new tenant with the only existing &#39;technical&#39; user, ...apiClient.login(TENANT_ID, &quot;install&quot;, &quot;install&quot;);   // here, replace TENANT_ID by the ID of the tenant you just created above// ... in order to create other users:user = apiClient.getIdentityAPI().createUser(&quot;john&quot;, &quot;bpm&quot;, &quot;John&quot;, &quot;Doe&quot;);apiClient.logout();// now login with the new user:apiClient.login(TENANT_ID, &quot;john&quot;, &quot;bpm&quot;);// retrieve an API to interact with the engine:ProcessAPI processApi = apiClient.getProcessAPI();// and use the processApi on the new tenant...[...]// Don&#39;t forget to logout finally:apiClient.logout();Bonita PortalIn order to access Bonita Portal desktop and mobile application, add the parameter tenant=TENANT_ID (where TENANT_ID is the tenant identifier) in the URL before you login.Example for Bonita Portal desktop version and tenant 2:http://localhost:8080/bonita/login.jsp?tenant=2Example for Bonita Portal mobile version and tenant 2:http://localhost:8080/bonita/mobile/?tenant=2Bonita APIsUse the PlatformAPI to perform operations on tenants.Example: retrieving a tenant from its name and log into it// Get platform login API using the PlatformAPIAccessorPlatformLoginAPI platformLoginAPI = PlatformAPIAccessor.getPlatformLoginAPI();// Log in to the platformPlatformSession platformSession = platformLoginAPI.login(&quot;platformAdmin&quot;, &quot;platform&quot;);// Get the plaform APIPlatformAPI platformAPI = PlatformAPIAccessor.getPlatformAPI(platformSession);// Retrieve your tenant by nameTenant tenant = platformAPI.getTenantByName(&quot;myTenant&quot;);// Log out of the platformplatformLoginAPI.logout(platformSession);// Log in to the tenant using the APIClientAPIClient apiClient = new APIClient();apiClient.login(tenant.getId(), &quot;install&quot;, &quot;install&quot;);// Perform some operations on the tenant...// Log out of the tenantapiClient.logout();Pause and resume a tenantTo perform certain maintenance operations (notably when updating the business data model), you must pause the BPM service of a tenant. The TenantAdministrationAPI contains the following methods related to pausing a tenant:  TenantAdministrationAPI.isPaused() returns true if the Tenant BPM service is paused.  TenantAdministrationAPI.pause() pauses the tenant BPM service.  TenantAdministrationAPI.resume() resume the tenant BPM service.For example, to resume the service in a tenant:TenantAdministrationAPI tenantAdministrationAPI = TenantAPIAccessor.getTenantAdministrationAPI(apiSession);if (tenantAdministrationAPI.isPaused()) {tenantAdministrationAPI.resume();}While service is paused in a tenant, only the following methods are valid:  IdentityAPI method calls  ProfileAPI method calls  themeAPI method calls  TenantAdministrationAPI method callsIf you attempt an operation that is not permitted while a tenant is paused, a TenantStatusException is thrown.You can also pause and resume a tenant using the REST API or Bonita Portal.",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/multi-tenancy-and-tenant-configuration",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-performance-troubleshooting": {
      "title": "Performance troubleshooting",
      "content"     : "Performance troubleshootingThis page contains information about monitoring your Bonita platform. We recommend that you monitor your system regularly, so that if you suspect a performance degradation, you can repeat these checks and identify the potential problem areas by comparing the performance to the normal level.When troubleshooting a performance problem, we recommend that you first check your system and network, and then check your Bonita platform and configuration. Follow the order of the topics in this page. This will help you identify problems that occur because the actual load on the system exceeds the expected load so the provisioning is not sufficient. They will also help you identify transient problems.SystemNetworkJVMDatabaseBonita Engine connectionsConnectorsCron jobsPerformance tuningSystemThese are the key indicators to check:  CPU: monitor CPU usage for each hardware platform, and check that it does not exceed 80%  CPU: check that all available CPUs are used on each hardware platform  Memory: monitor memory swap, and check that it is not used  Memory: monitor the amount of memory used  Disk: monitor disk I/OMany tools exist in every operating system for system monitoring. For example:  For Linux: ps, top, iotop, vmstat, iostat, sysstat  For Windows : tasklist, process monitor, process explorerThese tools can be used in conjunction with monitoring systems such as like Nagios or Zabbix.Bonita also provides a PlatformMonitoringAPI that you can use to obtain some of this information.NetworkNetwork performance has a direct impact on the duration of an instance. We recommend that you measure network performance at the following points:  Between the server hosting the Bonita Engine and the database server. Check that the servers ping time duration is less than 1ms. There are many connections between Engine and the database, so network performance between these two servers has huge impact on performance.  between the server hosting the Bonita Engine and any other servers used (typically those called by connectors). As connectors are often used to enable Bonita to communicate with outside world, network performance has impact on performance.JVMThese are the key indicators to check:  Memory: heap, memory used by objects  Threads: Number of threads, number of deadlocksA large number of deadlocks, or memory heap starvation may indicate a performance issue.Follow the JVM performance tuning recommendations and increase provisioning to get the optimum performance.Many OpenSource and proprietary tools exist for JVM monitoring. These parameters can be obtained through monitoring system like Nagios or Zabbix. You can also retrieve them using the PlatformMonitoringAPI.DatabaseAll databases provide information to monitor the following:  Connections: monitor the number of connections in parallel  Transaction: monitor the number of transactions that are committed, and the number that are rolled back  Memory : Size used by database,  Disk space used by databaseIf actual usage reaches the limit of available capacity, this can indicate a performance issue.These values can be monitored through a monitoring system like Nagios or Zabbix. You can also get the number of active transaction using the MonitoringAPI.Bonita Engine connectionsBonita Engine performance is strongly linked by the number of connections. The number of connections from the Bonita Portal directly influences the number of connections to the database through the number of workers, and the number of connector threads.To avoid overloading the Engine, check that the following connection numbers are coherent:  Bonita client  Bonita Engine  DatabasePredict and then monitor the following:  Users: the total number of users and the maximum number of parallel users  Processes: the total number of instances of all processes and the maximum number of parallel tasksAll connection numbers must be defined according to the performance tuning recommendations:  Monitor connection number managed by client (see Client Threads)  Check connection number managed by Bonitasoft Server (See Work Service, Connector service, and Scheduler Service)  Check number of database connections defined in Bonitasoft (see Database connections and Datasource settings)  Check maximum number of simultaneous connections on database  Monitor number of simultaneous connections on database  Monitor SQL request duration timeConnectorsUse the connector time tracker to check connector performance.Cron jobsThe Bonita Engine uses the Scheduler service to trigger jobs in a recurrent manner. It might be possible to improve performance by optimizing the cron settings.Performance tuningSee Performance tuning.",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/performance-troubleshooting",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-performance-tuning": {
      "title": "Performance tuning",
      "content"     : "Performance tuningNote: For Enterprise and Performance edition only.This page contains information that you can use to tune the Bonita Engine to get the best performance in your platform.It assumes that you are familiar with Java threads, concurrent execution, XML, DB connection pools, your DB instance, cache policies, scheduling, connectors, network speed, I/O, Java Virtual Machine configuration, JTA and transaction management.You need to know how to install and configure Bonita.This information applies primarily to the Enterprise and Performance edition, though some details also apply to the Teamwork and Efficiency editions.It is also possible to use gzip compression on your application server to improve performance.SummaryEngine accessConcurrent executionVolumeHardware and networkDatabase, Transaction Manager, and logsConnector time trackerTime trackerProcess design, event handlers, and cron jobsSummaryThis section is a summary of the key recommandations from the rest of the page. You can use it as a checklist of things to consider when tuning system performance.To understand these recommendations in detail, read the sections below.Two key definitions:  The maximum possible number of parallel threads that could be required at any given time is the sum of:  the number of workers  the number of scheduler threads  the number of external API callsThe processing capacity is the desired number of parallel threads, and is the sum of:  the number of workers  a percentage of the number of concurrent scheduler threads  a percentage of the number of concurrent external API calls  Performance tuning checklist of best practises:  Access Engine APIs in Local mode whenever possible.  Make sure that the network between your client and the Bonita Engine server is fast if you access the APIs remotely.  Install your Database on a powerful machine (hardware that meets to your DB vendor requirements: sufficient memory, powerful CPU, and fast I/O).  Make sure that the network between your Bonita Engine server and your database server is very fast.  Set the Work service threadpool and Connector service threadpool to the same size.  Set the maximum DB connections for the bonitaDS datasource to the desired processing capacity number of parallel threads.  Configure a suitable sequence manager range size for your typical process designs and expected volume.  Make sure that the maximum DB connections for sequenceManagerDS datasource is more than 1 and is appropriate for the SequenceManager range size configuration.  Tune the application cache to your hardware capabilities (if you have more memory available, increase the cache size).  Set the basic JVM options to make it fast and well-sized.  Optimize your database configuration for your most frequent usage (read or write) and the level of robustness that you want.  Configure your transaction manager for the level of robustness that you want.  Tune the log levels of Bonita Engine and all its dependencies.  Design your processes following the best practises.  Add a reasonable number of well-developed event handlers.  Tuned the Bonita Engine cron jobs for your needs.Engine accessThis section deals with performance impact of your choice of Engine access mode.There are various ways to access the Engine APIs provided by Bonita Engine. Choose the most suitable access mode for your deployment, requirements, and preferences.The access modes rely on different technologies and have different benefits and drawbacks. In this section, we will describe the performance characteristics of each mode.Local accessThis is undoubtedly the fastest way to access this engine, because it means a direct Java call with nothing additional between client and server.The deployment constraint is that the client of the engine must be located in the same JVM as the engine server.Remote accessThe remote access modes enable you to have an engine client connected remotely to the engine server.All remote access modes share a set of common benefits and constraints. There is a loss of performance mainly because of serialization between client and server.If your client is not located on the same machine than your server JVM, the network becomes an additional potential source of performance reductions to monitor.Tip: In some deployments, it is possible to benefit from the best of both local and remote modes.The engine server access mode is defined per client and does not need to be the same for all clients.If you have a client located in the same JVM as your server, configure it to use the local access mode.You can then configure other clients to use one of the remote modes but you do not penalize the client able to leverage the local access performance.EJB3EJB3 access is serialized data using RMI protocol.This protocol comes with a cost, and this cost is dependent of the implementation in the EJB container you are using.HTTPThe HTTP access mode is available using our natively provided bonita-client library. It can also be used from othertechnologies like PHP, .Net or Javascript (in that case, you need to develop your our client).We do not guarantee to keep the http protocol stable, so we strongly recommend that you use  the standard bonita-client library  the same version for both the client and the serverThis mode  provides remote connection to the server without requiring a JEE application server with an EJB container  can be easily used inside a web container like Tomcat or Jetty.The bonita-client library  sends data over the network using the HTTP protocol using the Apache HttpComponents.open source library  uses org.apache.http.impl.conn.PoolingClientConnectionManager as connection manager .  Currently, there is no  configuration for this pool though this might be added in the future.  See the HttpComponents documentation  for more information.Data sent is serialized using a Java library called XStream. This serialization also has a cost.RESTThis method of accessing the Bonita capabilities is not yet integrated as an engine service but exists as a web application service accessed using the Web REST API.No details are provided here as it is currently out of scope.In general, the constraints are almost the same as for the HTTP mode, but we do not provide any Java client for this access mode.Concurrent executionThis section describes some aspects of engine configuration that have a performance impact if there is a high level of concurrent execution.Before you read this, make sure you are familiar with the engine execution sequence, states, and transactions.There are two main entry points for load on the engine:  API calls coming from outside the engine  Engine-generated calls for internal processing, specifically the Work service and the Scheduler serviceThe Bonita Engine is an asynchronous BPM process engine.This means that every thread that deals with process execution applies the following rule: do the minimum that makes sense in the current transaction to get to a stable state, and then continue in another transaction inside another thread.The great benefit of this is that the caller is not locked while the engine processes something that might be long (such as a long sequence of tasks with connectors.).Client ThreadsClient threads are responsible for a large part of the load generated inside the engine.The number of client threads is related to the number of parallel users.If you are running your own application, you have one thread if your applicaiton is not multi-threaded, or you have the number of threads you decided to create explicitly in the application or using your own threadpool.If you are running Bonita Engine inside a container, the maximum number of client threads is defined by a parameter of the container. For example:  Apache Tomcat maxThreads set in Tomcat_folder/conf/server.xml. Default value 20.See the Tomcat documentation for information about the maxThreads parameter.  Red Hat WildFly : add the attributes io-threads=&quot;10&quot; and task-max-threads=&quot;20&quot; in the default worker element in the io subdomain in &amp;lt;WILDFLY_HOME&amp;gt;/setup/wildfly-templates/standalone.xml.   The WildFly administrator guide lacks some information about advanced worker configuration. Undertow (WildFly web service handler) relies on the XNIO API for creating Worker threads. See IO Worker configuration for Undertow for information about worker configuration.Work serviceThe work service is responsible for asynchronously processing execution of process instances. The work service has its own thread pool, which can be configured for each tenant.This is one of the key configurations to optimize, because even though there are many client threads, client threads are held only for a short time before being released, and then execution flow continues using work service threads.A thread from the pool of the work service is known as a worker.The work service is configured in bonita-tenant-community-custom.properties.bonita.tenant.work.terminationTimeout=30bonita.tenant.work.corePoolSize=25bonita.tenant.work.maximumPoolSize=25bonita.tenant.work.keepAliveTimeSeconds=60bonita.tenant.work.queueCapacity=10000It is very similar to the constructor provided in the default JDK ThreadPoolExecutor.For a reminder of how the threadpool behaves, see the Queuing section of the ThreadPoolExecutor documentation.In the default Bonita configuration, corePoolSize is equal to maximumPoolSize because we have observed that the default implementation of the threadpool executor allocates work to available threads using a round robin algorithm.Therefore, if the maximum is reached, the thread pool size is unlikely ever to reduce to corePoolSize, because work is always allocated to available threads.The current implementation of the RejectedExecutionHandler queues the work, and reduces the system load because it does not release the caller (normal behaviour for a BlockingQueue).After a lot of profiling, we have concluded that having an arbitrarily high number of threads in the work service does not positively impact the performance of the whole system, because it leads to a lot of contentions, mostly on the database (see Database connections).The size of the threadpool (corePoolSize in the default configuration) is key, and correlates to the number of process instances the engine can handle in parallel.In other words, if you want the engine to be capable of handling X process instances concurrently, you should set the corePoolSize value of the work service to X.You then need to ensure that your platform infrastructure can handle X concurrent instances, checking that all other engine dependencies including the network and the database are able to process all incoming requests without loss of performance.Setting a high queueCapacity limit means that more work can be queued, but can reduce throughput as work is queued rather than causing a new thread to be created.It is essential to ensure that the queue never becomes full (queueCapacity is never reached).If the queue becomes full, the application restarts in order to force the engine to generate all work from the database. This means that work is lost.Connector serviceThe connector service executes connectors. To improve tenant isolation (and to protect against denial-of-service attacks), the default implementation of the connector service has its own threadpool and requires executes connectors in a separate thread from the worker. The configuration of the threadpool of this service must be correlated to the configuration of the work service.This mapping between the configurations of the two threadpools depends on your processes. If you have processes that use a lot of connectors, then you need as many connector threads as work threads.If you are unsure, our recommendation is to configure the two threadpools with the same values.The Connector service is configured in bonita-tenant-community-custom.properties and bonita-tenant-sp-custom.properties (cf platform setup)Community:bonita.tenant.connector.queueCapacity=10bonita.tenant.connector.corePoolSize=5bonita.tenant.connector.maximumPoolSize=100bonita.tenant.connector.keepAliveTimeSeconds=100Subscription only:bonita.tenant.connector.timeout=300For details of these parameters, see Work service.Scheduler serviceThe Scheduler service is responsible for executing jobs.A job is executed inside a thread of the scheduler service.There are various kinds of jobs, some resulting from internal requirements such as API session cleaning, or batch deletion of a table row, and some related to process design such as BPMN2 events.The Bonita Engine Scheduler service uses the Quartz Scheduler. Quartz takes the size of the threadpool as an input parameter.   Quartz uses threads to execute jobs concurrently.The Scheduler service configuration is in bonita-platform-community-custom.properties.You can configure:bonita.platform.scheduler.quartz.threadpool.size=5bonita.platform.scheduler.batchsize=1000Database connectionsTwo datasources are defined:  bonitaSequenceManagerDS is used for distributing ID requests  bonitaDS is used for everything elseNote that the sum of the maximum values configured for bonitaDS and bonitaSequenceManagerDS should be less than or equal to the maximum number of simultaneous connections allowed to your database.bonitaSequenceManagerDSThis datasource needs only a few connections: between 5 or 10% of bonitaDS number should be sufficient. However, this is closely correlated to the range size.bonitaDSThis datasource requires a higher value, because Bonita Engine stores almost everything in the database.This means that every single thread from any of the entry points requires a database connection through bonitaDS.To make sure that this datasource is not a bottleneck, define the maximum number of database connections to be equivalent to the desired number of parallel processing threads.The desired number of parallel processing threads is the sum of the number of workers (see Work service) plus a percentage of the number of scheduler threads (see Scheduler Service) plus a percentage of the number of concurrently external API calls (see Client threads).Datasources settingsYou need to configure the maximum pool size for datasources (the following paths are for bundle users):For Tomcat:  For bonitaSequenceManagerDS, edit setup/tomcat-templates/bonita.xml and set maxTotal=”yourvalue”.  For bonitaDS, edit setup/tomcat-templates/bitronix-resources.properties and set resource.ds1.maxPoolSize=”yourvalue”.For WildFly:  For both bonitaDS and bonitaSequenceManagerDS, edit server/default/deploy/bonita-ds.xml and set &amp;lt;max-pool-size&amp;gt;yourvalue&amp;lt;/max-pool-size&amp;gt;.VolumeThis section deals with some aspects of engine configurations that have a performance impact in the case of high volume.Sequence managerBonita Engine manages a dedicated sequence for each table for ID generation.This implementation allows fast delivery of IDs and a single point of usage inside the application: the persistence service.The sequence manager keeps in memory a range of reserved IDs by table.This range size is configurable by sequence so that it can be adapted to the volume you have.The bigger a range is, the less frequently the sequence manager will have to query the database for a new range, because it is managed in memory for as long as possible.However, all the IDs that are reserved in memory are lost when the JVM is shut down, so the number should not be too big or you might reach Long.MAX_VALUE too quickly.The sequence manager allows you to set the range size for each sequence and a default range size value, which is applied to any sequence that does not have a specific range defined. If you want to tune these values, you have to understand the correlation between them.For example, if you have an average of 20 steps in your process, then it would be reasonable to set the ActivityInstance range size to be 20 times bigger than the ProcessInstance range.The sequence manager configuration is in bonita-platform-community-custom.properties.The sequence manager has its own database connection.This should be appropriately sized for the number of times the sequence manager will query the database, which is a consequence of the range size values. See Database connections.Persistence cacheFor the Teamwork, Efficiency, Performance and Enterprise editions, Bonita Engine has a cache providing a persistence layer using Hibernate caching.EhCache configuration for this persistence layer is defined in a file named bonita-platform-hibernate-cache.xml.notused and bonita-tenant-hibernate-cache.xml.notused.To apply the configuration of those files, remove the ‘.notused’ suffix.It is possible to modify the cache settings in those files for each kind of object.Before going into production, we encourage to finely tune the “Level-2” object cache in a pre-prod environment:  activate Hibernate cache statistics by setting to true the parameter bonita.platform.persistence.generate_statistics in file bonita-platform-community-custom.properties  activate logs at INFO level:```* run load tests to simulate a production environment* analyse the &quot;2nd Level Cache Ratio&quot; log messages generated, combined with the &quot;soft-locked cache entry was expired&quot; **warnings messages** to change the configuration in file **hibernate-cache-tenant.xml**.  For instance, if on entity **org.bonitasoft.engine.core.document.model.impl.SDocumentImpl**, the &quot;soft-locked cache entry was expired&quot; warnings message occurs, it means the size of the **maxElementsInMemory** parameter must be increased, provided it is a reasonable memory size and provided the &quot;2nd Level Cache Ratio&quot; is not low for this element. If the &quot;2nd Level Cache Ratio&quot; is low or even 0, it means the cache is never used to read several times the same entity, which means the **timeToLiveSeconds** parameter should be increased, or that the cache should be completely deactivated for this entity.Below is an example of a &quot;soft-locked cache entry was expired&quot; warning message:WARNING: Cache org.bonitasoft.engine.core.process.instance.model.impl.SFlowNodeInstanceImpl Key org.bonitasoft.engine.core.process.instance.model.impl.SFlowNodeInstanceImpl#org.bonitasoft.engine.persistence.PersistentObjectId@25505ff Lockable : nullA soft-locked cache entry was expired by the underlying Ehcache. If this happens regularly you should consider increasing the cache timeouts and/or capacity limits&amp;lt;a id=&quot;app_cache&quot;/&amp;gt;#### Application cacheBonita Engine uses an application cache to store specific objects. The default implementation of this service relies on EhCache. It is configured in these files:* `bonita-platform-community-custom.properties`* `bonita-tenant-community-custom.properties`* `bonita-platform-sp-cluster-custom.properties`* `bonita-tenant-sp-cluster-custom.properties`The following cache configurations can be defined:| Configuration | Purpose| |:-|:-|| connectorCacheConfig | stores connector implementations for a given connector definition| | processDefCacheConfig | stores process definition objects| | userFilterCacheConfig | stores user filter implementations for a given user filter definition| | migrationPlanCacheConfig | not yet used| | breakpointCacheConfig | not yet used| | groovyScriptCacheConfig | stores compiled versions of Groovy scripts| | synchroServiceCacheConfig | used by the benchmark test infrastructure (and has no meaning outside of it)| | transientDataCacheConfig | stores transient data| | platformCacheConfig | used to store platform object, which contains general platform information such as the version, or start date| | parameterCacheConfig | stores process parameters| &amp;lt;a id=&quot;jvm&quot;/&amp;gt;#### Java Virtual MachineYou can configure the JVM settings for the engine to tune performance.  Check the [JVM documentation](http://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html) for details of the available settings.Notably, we recommend you to set the initial (`-Xms`) and maximum (`-Xmx`) heap sizes to the same value.  This reduces the likelihood of the JVM garbage collector starting.  While the garbage collector is running, it prevents creation of new objects, which slows down the application server.&amp;lt;a id=&quot;network&quot;/&amp;gt;&amp;lt;a id=&quot;hardware&quot;/&amp;gt;## Hardware and network{:#hardware-and-network}This section deals with performance impact of hardware elements.Bonita performance is very correlated to the database connectivity and its behavior.Almost everything (API call, internal processing using workers, jobs scheduling, and so on) requires a database access.  Two elements are critical: network latency, as in most cases your database is located on another server, and the I/O of your hard drives.  In case of issues, you should monitor these two elements and consider improvements. For example:* locate your database in the same datacenter as the Bonita Engine, using gigabit network connections* use SSD hard drives, and RAID configuration with stripingNetwork connectivity also impacts access to the engine APIs when you are not using local access, that is, if you are using [EJB3](#ejb3), [HTTP](#http), [REST](#rest).## Database, Transaction Manager, and logs{:#database-transaction-manager-and-logs}This section is a reminder about some of the main dependencies Bonita Engine has that have a strong impact on the performance of the whole system.Bonita Engine relies on several other components that each have their own performance tuning options.Some of them are key for the system and you should pay a lot of attention to them.  In most cases, the key things to consider are the [database](#db), [transaction manager](#tm), and [logs](#logs).&amp;lt;a id=&quot;db&quot;/&amp;gt;#### DatabaseBonita Engine uses the database heavily, so in consequence a slow database makes the engine slow.It is essential that the hardware configuration of the server hosting the DB is powerful, considering resources like CPU, memory or others depending on your database instance.In addition to this, make sure that your database instance is well configured.  Most database software provides many options for tuning, and some of them are easy to set up.  Others may be more difficult and present choices between robustness and performance, fast read or fast write, etc.  Your database configuration must be correlated with the Bonita Engine usage pattern.To find the right characteristic to optimize, one good starting point is to consider whether you are creating a lot of process instances (in which case optimize database writes) or you are executing a lot of read queries like `getTaskList` (in which case optimize database reads).&amp;lt;a id=&quot;tm&quot;/&amp;gt;#### Transaction managerBonita Engine is natively compatible with the Java Transaction API. This means transaction management relies on a transaction manager.If you are using a JEE Application server, then you only have to configure Bonita Engine to use the transaction manager that is provided.Otherwise, you have to embed a transaction manager (for example, we embed Bitronix by default in the Tomcat bundle).A transaction manager manages a transaction log and also frequently has notions of internal pooling.  For example, in [Bitronix](https://github.com/bitronix/btm/wiki/JDBC-pools-configuration) you can configure some options for the transaction journal. &amp;lt;a id=&quot;logs&quot;/&amp;gt;#### LogsIn general, increasing the log level is useful for debugging but has a performance cost.  With this in mind, [define the log level for technical logs, queriable logs and archives](/bonita_doc/bonita/7.7/installation/advanced-bonita-platform-installation/set-log-and-archive-levels).Remember that Bonita Engine dependencies also have their own log and debug options that may impact strongly the system performance.Be sure to configure these appropriately.## Connector time tracker{:#connector-time-tracker}It is now possible to track the duration of actions in a connector using a new time tracker. The tracker service tracks several connector lifecycle operations.  This service can impact performance so is disabled by default.  It is configured by editing the following parameters in `bonita-tenant-community-custom.properties`.  Time tracker#bonita.tenant.timetracker.startTracking=false#bonita.tenant.timetracker.maxSize=1000#bonita.tenant.timetracker.flushIntervalInSeconds=30#bonita.tenant.timetracker.csv.activateAtStart=true#bonita.tenant.timetracker.csv.folder=$ {java.io.tmpdir}#bonita.tenant.timetracker.csv.separator=;#bonita.tenant.timetracker.memory.activateAtStart=false#bonita.tenant.timetracker.memory.maxSize=1000000```To activate connector time tracking:  Uncomment all the previous lines except ## Time tracker.  Change the value of startTracking from false to true.The other parameters can be left at their default value, left commented, or set to the desired value. What each of them does:  maxSize maximum of records that will be saved by the time tracker before a flush. If the maximum number of records is reached before the scheduled flush, the older ones are discared. To avoid the loss of information, a number sufficiently big in comparison with flushIntervalInSeconds should be chosen  flushIntervalInSeconds the interval beetween two flushes on the timetracker thread.  csv.activateAtStart wether to save the result of the timetracker into a csv file.  csv.folder the folder where to save the csv file.  csv.separator the separator character in the csv file  memory.activateAtStart wether to save the result of the timetracker in memory.  memory.maxSize maximum amount of records saved in memory. If the maximum number of records is reached before the scheduled flush, the older ones are discared. To avoid the loss of information, a number sufficiently big in comparison with flushIntervalInSeconds should be chosenThe non-relevant options will be ignored at execution. Note that memory and csv can both be activated at the same time.Process design, event handlers, and cron jobsProcess designThere are several things you can do during the process design to reduce performance overheads.This is mostly related to reducing usage of extension points when possible.Consider carefully your usage of connectors, groovy scripts, XML and serializable data.Event handlersEvents handlers are extensions of the engine configuration.You can add event handlers for several purposes and you can configure which events you want to catch.We strongly recommend that you add only appropriate handlers and carefully code the handler filters to handle only those events that you are interested in.Cron jobsBonita Engine uses the Scheduler service to trigger jobs in a recurrent manner.The Bonita Scheduler service implementation uses the Quartz Scheduler.A cron job in Quartz can run at maximum every second (you cannot set a lower value than 1 second).Three cron jobs are defined:  Event handling. This job processes BPMN2 messages. It runs every 5 seconds by default.If you want your process instances to react faster, you can reduce this value.   Property name: org.bonitasoft.engine.cron  Delete dirty objects. This job cleans objects that have been tagged as dirty.To increase performance, during process instance execution, Bonita Engine tags some frequently used objects as dirty instead of deleting them.   This is done like this to reduce contention on database.   Those dirty objects have to be cleaned periodically and this is done by default every 5 minutes.   Property name: delete.job.frequency  Delete invalid sessions. This job cleans Bonita Engine sessions kept in memory.   It iterates over engine sessions and removes any that are invalid. By default this is done every 2 hours.   If you are creating a lot of new sessions in a short time, increase this frequency to avoid allocating too much memory to those invalid sessions and to avoid out-of-memory errors.   Property name: org.bonitasoft.engine.clean.invalid.sessions.cronThese property values are configured in bonita-tenant-community-custom.properties and are used to initialize the Quartz trigger tables the first time that the Engine starts.They are not read subsequently, so changing the values in bonita-tenant-community-custom.properties after the Engine has been started has no effect on Quartz.For value definition, and information about how to update the Quartz trigger tables, see the Quartz documentation about Cron Triggers.",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/performance-tuning",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-security-and-authentication-active-directory-or-ldap-authentication": {
      "title": "Active Directory or LDAP authentication",
      "content"     : "Active Directory or LDAP authenticationNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.Important notes:  This documentation applies to an existing and working Bonita installation (see the installation instructions).  In order to have functioning Active Directory/LDAP authentication, the user login (username) must exist both in the LDAP directory and in the Bonita database (user password is checked against the LDAP server but user information is read from Bonita database).  We recommend that you use the LDAP synchronizer to create Bonita users in a Bonita database.OverviewBefore you startCreate a JAAS configuration fileConfiguration stepsJAAS configuration files examplesKnown limitationsTroubleshootingOverviewBonita can be configured to perform user authentication against an LDAP server such as Active Directory, Apache Directory Server, or OpenLDAP.This type of configuration relies on a specific implementation of the Bonita Engine authentication service that delegates the actual user name and password verification to a JAAS service configured with an LDAPspecific Login Module.Before you startIn order to configure LDAP successfully, make sure you have the following information:  LDAP server type: Active Directory (AD), Apache Directory Server, or OpenLDAP  LDAP server address  LDAP listening port (e.g. 389 by default)  Is it possible to build the user distinguished name with user name that the user specifies when logging in?For example, if the user name is: john.smith and the user DN is: CN=John	Smith,CN=Users,DC=MyDomain,DC=com, it’s not possible to build the DN dynamically.  But it’s possible to do so if the DN is: uid=john.smith,ou=people,dc=example,dc=com.If it’s not possible to build the DN using the user name you will need the following extra information:  The DN of the LDAP entry under which all users are located (e.g. CN=Users,DC=MyDomain,DC=com)  The user entry objectClass (the most restrictive one). E.g. usually user on AD, inetOrgPersonor organizationalPerson for other LDAP servers.  The user entry attribute used for authentication (e.g. userPrincipalName on AD, value: john.smith@mydomain.comor uid on other LDAP servers, value: john.smith)Does the LDAP server allow anonymous search?  Does the LDAP server allow search for all users that can possibly log in?  If search can only be performed by a limited number of “technical” accounts you will need the user name and password of such an account.Create a JAAS configuration fileThis section explains how to put together all the LDAP server information you have to create or edit a JAAS configuration file compatible with your JEE application server.Login context nameThe JAAS configuration can include one or several login contexts. The Bonita login context must be named BonitaAuthentication-&amp;lt;TENANT_ID&amp;gt; (where &amp;lt;TENANT_ID&amp;gt; is your tenant id).LdapLoginModule attributes to setIt’s important to identify which LdapLoginModule attributes you need to set.This will be at least one of authIdentity, userFilter, tryFirstPass, java.naming.security.principal or java.naming.security.credentials.Based on the information described in the “Before you start” section, you can identify which of the following cases applies:  If you can build the user DN by directly injecting the user name =&amp;gt; set only the authIdentity attribute  If you cannot build the DN and anonymous search is allowed =&amp;gt; set only the userFilter attribute  If you cannot build the DN and anonymous search is disallowed and authenticated users can search =&amp;gt; set the userFilter and authIdentity attributes  If you cannot build the DN and anonymous search is disallowed and authenticated users cannot search =&amp;gt; set the userFilter,authIdentity, tryFirstPass, java.naming.security.principal and java.naming.security.credentials attributesValues for LdapLoginModule attributesIn this section we explain how to set LdapLoginModule attributes values.userProvider: set this to ldap://&amp;lt;ldap server address&amp;gt;:&amp;lt;ldap server port&amp;gt;/&amp;lt;DN of the LDAP entry under which all users are located&amp;gt;.For example: ldap://localhost:389/CN=Users,DC=MyDomain,DC=comuserFilter (only if needed): the value must be a search request that will find your users in the LDAP server. The search request can be for example: (&amp;amp;(objectClass=user)(userPrincipalName={USERNAME}@mydomain.com)).Use an LDAP tool (such as Apache Directory Studio) to validate that the request returns the expected result if you replace {USERNAME} with an actual username.authIdentity (only if needed): there are two cases:If you can build the user DN, set the attribute value with the user DN and {USERNAME} tag. For example uid={USERNAME},ou=users,dc=example,dc=com.If you use a userFilter and users are allowed to search, set the value with {USERNAME}@mydomain.com for AD and user the DN (same as above) for other LDAP servers.tryFirstPass(only if needed): set this to true.java.naming.security.principal(only if needed): specify the username (AD) or the user DN (other LDAP servers) of a user that can perform searches on the server.java.naming.security.credentials(only if needed): specify the password of a user that can perform searches on the server.Create or edit the configuration file for your application serverNote: all configuration files are case sensitive. You can find more examples in the JAAS configuration files examples section of this page.WildFlyEdit the &amp;lt;WILDFLY_HOME&amp;gt;/setup/wildfly-templates/standalone.xml file to specify the configuration. Use HTML encoding for any strings in the configuration (for example, a space character is written as %20).Add the Bonita login context using the WildFly specific syntax just before the &amp;lt;/security-domains&amp;gt; tag. Note that security-domain-name is in fact the JAAS login context name (e.g. Bonita).The following example is for a tenant with id 1:&amp;lt;security-domain name=&quot;BonitaAuthentication-1&quot;&amp;gt;&amp;lt;authentication&amp;gt;&amp;lt;login-module code=&quot;com.sun.security.auth.module.LdapLoginModule&quot; flag=&quot;required&quot;&amp;gt;&amp;lt;module-option name=&quot;userProvider&quot; value=&quot;ldap://localhost:389/ou=all%20people,dc=example,dc=com&quot;/&amp;gt;&amp;lt;module-option name=&quot;userFilter&quot; value=&quot;(&amp;amp;amp;(objectClass=user)(userPrincipalName={USERNAME}@myExampleDomain.com))&quot;/&amp;gt;&amp;lt;module-option name=&quot;authIdentity&quot; value=&quot;{USERNAME}@myExampleDomain.com&quot;/&amp;gt;&amp;lt;module-option name=&quot;useSSL&quot; value=&quot;false&quot;/&amp;gt;&amp;lt;module-option name=&quot;debug&quot; value=&quot;true&quot;/&amp;gt;&amp;lt;/login-module&amp;gt;&amp;lt;/authentication&amp;gt;&amp;lt;/security-domain&amp;gt;TomcatOn Tomcat, the JAAS configuration file follows the default JVM syntax.Here is an example of JAAS configuration file:BonitaAuthentication-1 {  com.sun.security.auth.module.LdapLoginModule sufficient  userProvider=&quot;ldap://localhost:389/ou=people,dc=example,dc=com&quot;  authIdentity=&quot;uid={USERNAME},ou=people,dc=example,dc=com&quot;  useSSL=false;};We recommend that you name your JAAS configuration file jaas.cfg and that you add the file under &amp;lt;TOMCAT_HOME&amp;gt;/server/conf folder.Configuration stepsChanging Bonita authentication serviceThe default Bonita installation comes with an authentication service implementation based on the Bonita Engine database. Inorder to activate Active Directory/LDAP authentication the service implementation needs to be changed. To do this, edit bonita-tenant-sp-custom.properties.You will need to perform following changes:  Comment out the authenticationService line  Add this new line: authentication.service.ref.name=jaasAuthenticationServiceConfigure JAASWildFlyAs the JAAS configuration in WildFly is already done in a file that already exists, no further configuration is necessary.TomcatTo define the JAAS configuration file location you need to set a JVM property, java.security.auth.login.config. To do this for a system running Tomcat you need to edit the setenv script provided with Bonita and located in &amp;lt;TOMCAT_HOME&amp;gt;/server/bin folder.For Linux and Mac OS  Edit this file: &amp;lt;TOMCAT_HOME&amp;gt;/setup/tomcat-templates/setenv.sh  Locate the line that starts: #SECURITY_OPTS  Uncomment this line, i.e. remove the # sign and set property value to: %CATALINA_HOME%confjaas.cfg.  Locate the line that starts: CATALINA_OPTS=  Add the tag ${SECURITY_OPTS}  after the tag ${PLATFORM_SETUP}  Push into database the changes: ./setup.sh pushFor Windows  Edit this file: &amp;lt;TOMCAT_HOME&amp;gt;/setup/tomcat-templates/setenv.bat  Locate the line that starts: rem set SECURITY_OPTS  Uncomment it, i.e. remove “rem” keyword and set property value to: ${CATALINA_HOME}/conf/jaas.cfg  Locate the line that starts: set CATALINA_OPTS=  Add the tag %SECURITY_OPTS% after the tag %PLATFORM_SETUP%  Push into database the changes: .setup.bat pushJAAS configuration files examplesNote: Remember to remove the debug flag for production.Note: These examples use the JAAS standard syntax (as used by Tomcat). They can easily be adapted to the WildFly XML syntax.Active DirectorySearch allowed for all usersIn this example, the user name is john.smith:BonitaAuthentication-1 {  com.sun.security.auth.module.LdapLoginModule sufficient  userProvider=&quot;ldap://localhost:389/CN=Users,DC=MyDomain,DC=com&quot;  userFilter=&quot;(&amp;amp;(objectClass=user)(userPrincipalName={USERNAME}@mydomain.com))&quot;  authIdentity=&quot;{USERNAME}@mydomain.com&quot;  debug=true  useSSL=false;};In this example, the user name is john.smith@mydomain.com:BonitaAuthentication-1 {  com.sun.security.auth.module.LdapLoginModule sufficient  userProvider=&quot;ldap://localhost:389/CN=Users,DC=MyDomain,DC=com&quot;  userFilter=&quot;(&amp;amp;(objectClass=user)(userPrincipalName={USERNAME}))&quot;  authIdentity=&quot;{USERNAME}&quot;  debug=true  useSSL=false;};Search allowed only for a technical usersIn this example, the user name is john.smith:BonitaAuthentication-1 {  com.sun.security.auth.module.LdapLoginModule sufficient  userProvider=&quot;ldap://localhost:389/CN=Users,DC=MyDomain,DC=com&quot;  userFilter=&quot;(&amp;amp;(objectClass=user)(userPrincipalName={USERNAME}@mydomain.com))&quot;  tryFirstPass=true  java.naming.security.principal=&quot;technical.user@mydomain.com&quot;  java.naming.security.credentials=&quot;technical_user_password&quot;  debug=true  useSSL=false;};Other LDAP serversBuild the user DN using the user nameBonitaAuthentication-1 {  com.sun.security.auth.module.LdapLoginModule sufficient  userProvider=&quot;ldap://localhost:389&quot;  authIdentity=&quot;uid={USERNAME},ou=grenoble,dc=example,dc=com&quot;  debug=true  useSSL=false;};Known limitationsThe Active Directory configuration has been tested in single domain configuration. If you a running with multiple domains it’s likely that the user will have to type a username including domain name when logging in.TroubleshootingIf necessary, you can enable JAAS debug mode by editing your configuration file and adding the following line: debug=trueOn Active Directory, a common error code is:LDAP: error code 49 - 80090308: LdapErr: DSID-0C0903A9, comment: AcceptSecurityContext error, data 52e, v1db1.This error code can have several root causes:  The user doesn’t exist in AD: in the JAAS configuration, verify the user filter and validate it using a tool such asApache Directory Studio.  The username doesn’t include the domain name: in the JAAS configuration, make sure that the authIdentity valueincludes the domain name.  The user password provided is not correct.",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/security-and-authentication/active-directory-or-ldap-authentication",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-security-and-authentication-csrf-security": {
      "title": "CSRF security",
      "content"     : "CSRF securityThis page explains how Bonita REST API is secured against Cross-Site Request Forgery (CSRF) attacks.CSRF (also known as XSRF and Sea-Surf), is an example of a malicious attack on a trusted website.While the user is authenticated, by being logged on to a trusted website, malicious requests are transmitted without the user knowing, or giving their consent. For example, by clicking on a link, the user is tricked into performing actions using their ID and privileges, such as giving personal information, bank details, making purchases or payments.If the targeted end user is an administrator, the entire web application can be compromised.Default security setup in BonitaHow it worksIs there an impact on REST API calls?How do I disable it?How to secure the X-Bonita-API-Token cookie (HTTPS only)?How to Migrate your pages to 7.4.0 or greater when CSRF security is enabledDefault security setup in BonitaIn Bonita, since version 7.4.0, the CSRF protection is enabled by default.How it worksTo prevent malicious attacks a token is generated server-side when logging in and added to the HTTP session (server-side as well).A cookie named X-Bonita-API-Token is created (hence, client-side) with the value of the token if the login is successful.Then for all subsequent REST API calls this token is added to the HTTP request headers.For each call, the server is checked to verify that the value in the Header is equal to the value stocked in the HTTP session. If so, the request proceed. Otherwise, this is considered to be an unauthorized access. (HTTP Status 401).In addition of the cookie, it is also possible to retrieve the token by performing a call to the resource /API/system/session/unusedId. The token is then returned in the headers of the HTTP response.An attacker cannot retrieve the value of the token unless they can inject some JavaScript (which has been mitigated thanks to our SecurityFilter), to make a call to the resource /API/system/session/unusedId,get the header X-Bonita-API-Token, and create their own requests.Is there an impact on REST API calls?If you are using Bonita Portal there is no impact.If you have developed an external application or some custom pages using the REST API to communicate with bonita, you need to send the X-Bonita-API-Token header in all requests other that GET. There are 2 ways of doing this:  Using the X-Bonita-API-Token cookie:  Retrieve the X-Bonita-API-Token cookie value (you can retrieve it once and store it in a variable if you don’t want to read the cookie each time you perform a call).  In each API request, add a header named X-Bonita-API-Token whose value is the token.Using the session API resource  Send an initial request to the session API resource (/API/system/session/unusedId).  Retrieve the X-Bonita-API-Token from the response header and store it.  In all future API requests, add a header named X-Bonita-API-Token containing the stored token.  The X-Bonita-API-Token is valid for the whole client session.How do I disable it?Disabling the CSRF protection is not recommended as it will makes Bonita REST API unprotected from malicious attacks.But if you need to, the deactivation of the CSRF protection can be done in the file security-config.properties for the whole platform.The default version of this file is located in setup/platform_conf/initial/platform_portal. In order to change the configuration on an installation whose platform has already been initialized, use the platform setup tool to retrieve the current configuration and update the file in setup/platform_conf/current/platform_portal. Then use the tool again to save your changes into to the database.When CSRF protection is enables, this file contains this line: `security.csrf.enabled true`To disable the CSRF protection, edit the configuration file and change the security.csrf.enabled  value to false.How to secure the X-Bonita-API-Token cookie (HTTPS only)?You can set the secure flag on the X-Bonita-API-Token cookie to make sure the browser will only transmit the cookie if the page is HTTPS.Activating the addition of the secure flag can be done in the file security-config.properties for the whole platform.The default version of this file is located in setup/platform_conf/initial/platform_portal. In order to change the configuration on an installation whose platform has already been initialized, use the platform setup tool to retrieve the current configuration and update the file in setup/platform_conf/current/platform_portal. Then use the tool again to save your changes into to the database.When the secure flag is not active, this file contains this line: `security.csrf.cookie.secure false`To activate the addition of the secure flag, edit the configuration file and change the security.csrf.cookie.secure  value to true.User authentication overviewRead more about CSRF attacksHow to Migrate your pages to 7.4.0 or greater when CSRF security is enabledTo use a UI page or form that was created in lower version than 7.4, you need to re-import this old page in actual UI designer. If you don’t update your page, any API call in your outdated version will be failed because X-Bonita-API-Token will be absent in the response header. Follow this few steps to update your page or form:In UI designer:1) Import the page from 7.3.X or lower version.1) Export the page you previously imported.In the portal as Administrator:1) Go on Resources entry.1) Edit the existing page by uploading the new one.",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/security-and-authentication/csrf-security",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-security-and-authentication-enable-cors-in-tomcat-bundle": {
      "title": "Enable CORS in Tomcat bundle",
      "content"     : "Enable CORS in Tomcat bundleIf you try to call the REST API from a page hosted on another domain than the one of the tomcat bundle,you will face some issues due to the ‘same-origin policy’ enforced by web browsers.For instance you may see in your browser a message such as:  Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at XXX.This can be fixed by moving the resource to the same domain or enabling CORS.By configuring the CORS filter on the tomcat bundle, you will be able to access the Bonita REST API from a page hosted on a different domain from the one of the tomcat bundle.Tomcat configurationHTML Example test pageTomcat configurationEdit the web.xml of the bonita.war to add the CORS filter:&amp;lt;filter&amp;gt;  &amp;lt;filter-name&amp;gt;CorsFilter&amp;lt;/filter-name&amp;gt;  &amp;lt;filter-class&amp;gt;org.apache.catalina.filters.CorsFilter&amp;lt;/filter-class&amp;gt;  &amp;lt;init-param&amp;gt;&amp;lt;param-name&amp;gt;cors.allowed.origins&amp;lt;/param-name&amp;gt;&amp;lt;param-value&amp;gt;*&amp;lt;/param-value&amp;gt;  &amp;lt;/init-param&amp;gt;  &amp;lt;init-param&amp;gt;&amp;lt;param-name&amp;gt;cors.allowed.methods&amp;lt;/param-name&amp;gt;   &amp;lt;param-value&amp;gt;GET, HEAD, POST, PUT, DELETE, OPTIONS&amp;lt;/param-value&amp;gt;  &amp;lt;/init-param&amp;gt;  &amp;lt;!-- List of the response headers other than simple response headers that the browser should expose tothe author of the cross-domain request through the XMLHttpRequest.getResponseHeader() method.The CORS filter supplies this information through the Access-Control-Expose-Headers header. --&amp;gt;  &amp;lt;init-param&amp;gt;  &amp;lt;param-name&amp;gt;cors.exposed.headers&amp;lt;/param-name&amp;gt;  &amp;lt;param-value&amp;gt;Access-Control-Allow-Origin,Access-Control-Allow-Credentials,X-Bonita-API-Token&amp;lt;/param-value&amp;gt;  &amp;lt;/init-param&amp;gt;  &amp;lt;!-- The names of the supported author request headers. These are advertised through the Access-Control-Allow-Headers header.The CORS Filter implements this by simply echoing the requested value back to the browser.  --&amp;gt;  &amp;lt;init-param&amp;gt;  &amp;lt;param-name&amp;gt;cors.allowed.headers&amp;lt;/param-name&amp;gt;  &amp;lt;param-value&amp;gt;Content-Type,X-Requested-With,accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers,X-Bonita-API-Token&amp;lt;/param-value&amp;gt;  &amp;lt;/init-param&amp;gt;&amp;lt;/filter&amp;gt;...&amp;lt;filter-mapping&amp;gt;  &amp;lt;filter-name&amp;gt;CorsFilter&amp;lt;/filter-name&amp;gt;  &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;&amp;lt;/filter-mapping&amp;gt;Important Note 1: The filter must be inserted in the file webapps/bonita/WEB-INF/web.xml (not in the Tomcat conf/web.xml)Important Note 2: It must be the first filter, inserted right after the &amp;lt;/error-page&amp;gt; tagfor more information:https://tomcat.apache.org/tomcat-8.5-doc/config/filter.html#CORS_FilterHTML Example test pageHere is an example of html page that:  logs in using the loginservice,  get the current session, via the REST api resource system/session  edit a user using the REST api resource identity/userThis page can be hosted on a different domain, and thanks to the CORS filter, the requests will be successfully processed.Important Note 1: this example works on a bundle where the CSRF security filter is activated. As the header “X-Bonita-API-Token” is set with the “session apiToken”.Important Note 2: to use this page you will need to replace the BONITA_ACCESS_URL by your own tomcat bundle URL.&amp;lt;!doctype html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt; &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt; &amp;lt;title&amp;gt;Demo&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;CORS INDEX&amp;lt;/h1&amp;gt; &amp;lt;script src=&quot;http://code.jquery.com/jquery-2.1.4.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;   var formData = { username: &quot;walter.bates&quot;, password: &quot;bpm&quot;, redirect: false   };   $.ajax({ url: &quot;BONITA_ACCESS_URL/bonita/loginservice&quot;, type: &quot;POST&quot;, data: formData, xhrFields: {withCredentials: true}, success: function(data, textStatus, jqXHR) {   $.ajax({ url: &quot;BONITA_ACCESS_URL/bonita/API/system/session/1&quot;, type: &quot;GET&quot;, xhrFields: {withCredentials: true}, success: function(data, textStatus, jqXHR) {   console.log(&#39;success getting session&#39;);   var apiToken = jqXHR.getResponseHeader(&#39;X-Bonita-API-Token&#39;);   console.log(&#39;X-Bonita-API-Token: &#39; + apiToken);   var formData = {&quot;title&quot;:&quot;Mr&quot;,&quot;manager_id&quot;:&quot;0&quot;,&quot;job_title&quot;:&quot;Chief Executive Officer&quot;,&quot;lastname&quot;:&quot;Jobs&quot;,&quot;firstname&quot;:&quot;Will&quot;};   $.ajax({ url: &quot;BONITA_ACCESS_URL/bonita/API/identity/user/1&quot;, type: &quot;PUT&quot;, contentType: &quot;application/json&quot;, /*passing the X-Bonita-API-Token for the CSRF security filter*/ headers: {&#39;X-Bonita-API-Token&#39;: apiToken}, data: JSON.stringify(formData), xhrFields: {withCredentials: true}, success: function(data, textStatus, jqXHR) {   console.log(&#39;success updating user info&#39;);   console.log(data); }, error: function(jqXHR, textStatus, errorThrown) {   console.log(&#39;error updating user info&#39;); }   }); }, error: function(jqXHR, textStatus, errorThrown) {   console.log(&#39;error getting session&#39;); }   }); }, error: function(jqXHR, textStatus, errorThrown) {   console.log(&#39;error login&#39;); }   }); &amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/security-and-authentication/enable-cors-in-tomcat-bundle",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-security-and-authentication-enforce-password-policy": {
      "title": "Enforce password policy",
      "content"     : "Enforce password policyNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.OverviewHow to create a custom password policyHow to create a Java class containing your own password validation characteristicsOverviewBy default, no password policy is set for users of Bonita. It is therefore highly recommended to set a policy to protect your data.There are three options:  Leave the default setting as is: “non-protected”.  Apply our ready-to-use policy to a tenant. This requires a password to contain the following:  at least 10 characters long  at least 2 special characters  at least 2 upper case characters  at least 2 lower case characters  at least 3 digits  To apply this policy edit security-config.properties and change DefaultPasswordValidator to RobustnessPasswordValidator.  Create a custom password policy by following the tutorial below.How to create a custom password policyThis will enable the System administrator to create a custom class and define the characteristics for a particular password policy.It will be applied to all users.PrerequisitesYou should have Maven installed to create a project.Import Toolkitview into your workspace.How to create a Java class containing your own password validation characteristicsHere are the steps to add a custom password validator:  Open Maven, and create a new Maven Project. This will create a pom.xml  Add a new dependency in your pom.xml to get toolkit-view (x.y.z is the Bonita version number).```xmlorg.bonitasoft.console  console-common  x.y.z`&amp;lt;div class=&quot;alert alert-warning&quot;&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Note:&amp;lt;/strong&amp;gt; As this artifact is not available in public repositories, youhave to follow this given procedure (example given for the x.y.z version):&amp;lt;/p&amp;gt;&amp;lt;ul&amp;gt;  &amp;lt;li&amp;gt;retrieve the console-common-x.y.z.jar from a Bonita distribution or liveinstance (in the bonita.war or in the explosed war)&amp;lt;/li&amp;gt;  &amp;lt;li&amp;gt;retrieve poms from the github repository&amp;lt;ul&amp;gt;  &amp;lt;li&amp;gt;bonita-console: https://github.com/bonitasoft/bonita-web/blob/x.y.z/pom.xml&amp;lt;/li&amp;gt;  &amp;lt;li&amp;gt;console-common: https://github.com/bonitasoft/bonita-web/blob/x.y.z/common/pom.xml&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;  &amp;lt;/li&amp;gt;  &amp;lt;li&amp;gt;manually put the jars and pom in your local repository or deploy theminto your repository manager&amp;lt;ul&amp;gt;  &amp;lt;li&amp;gt;bonita-console pom.xml file in &amp;lt;M2_REPO&amp;gt;/org/bonitasoft/console/bonita-console/x.y.z&amp;lt;/M2_REPO&amp;gt;&amp;lt;/li&amp;gt;  &amp;lt;li&amp;gt;console-common pom.xml and jar files in &amp;lt;M2_REPO&amp;gt;/org/bonitasoft/console/console-common/x.y.z&amp;lt;/M2_REPO&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;  &amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;3. Create your class, eg. `PasswordLengthValidator` with a name for the package, eg. `org.bonitasoft.ext.password.validator`.```javapackage org.bonitasoft.ext.password.validator;import static org.bonitasoft.web.toolkit.client.common.i18n.AbstractI18n._;import org.bonitasoft.web.toolkit.client.common.i18n.AbstractI18n;import org.bonitasoft.web.toolkit.client.common.i18n.AbstractI18n.LOCALE;import org.bonitasoft.web.toolkit.client.data.item.attribute.validator.AbstractStringValidator;/** * @author John Doe */public class PasswordLengthValidator extends AbstractStringValidator {@Overrideprotected void _check(String password) {LOCALE Locale = AbstractI18n.stringToLocale(locale);// Check number of lengthint minimalLength = 10;if (password.length() &amp;lt; minimalLength) {addError(_(&quot;Password is not long enough&quot;, Locale));}}}  Then, you can build your project. In command-line and type mvn package  Go in the target/ folder and you have your JAR archive, eg. password-validator-0.0.1-SNAPSHOT.jar  Take a bundle and start it once. This will extract the bonita.war.  Start it by typing: cd binthen ./catalina.sh run  Copy your JAR archive in the folder webapps/bonita/WEB-INF/lib  Modify all security-config.properties files to add your new password validator. e.g.# content of the filesecurity.password.validator org.bonitasoft.ext.password.validator.PasswordLengthValidatorStart your bundle againcd bin and then ./catalina.sh run  Create a new user and check that your password policy has been set. To check that the validation is correct, you can type a password to force an error. An exception will be displayed listing all the non-filled criteria.If the password complies with the criteria in the new password policy, no exception error message will be displayed.",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/security-and-authentication/enforce-password-policy",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-security-and-authentication-rest-api-authorization": {
      "title": "REST API authorization",
      "content"     : "REST API authorizationThe Bonita Portal, or any application that uses the Web REST API, enables user to access resources.The set of resources that a user can access is determined by default by the user’s profile.This authorization mechanism ensures that users can only access the appropriate resources.This means, for example, that a user with only the User profile cannot perform actions intended for the Administrator.The authorization mechanism is a “white list” implementation.It has two phases,a dynamic phase, which uses a script to grant or deny authorization,and a static phase, which checks in the static configuration to see whether the user is authorized to access a given resource.The static configuration is fixed when the application server is started.To access a given resource, a user must have a certain permission.These permissions are defined as simple permissions, which are the smallest units of permission, or compound permissions, which are groups of simple permissions.A user is granted set of permissions. These permissions define the set of resources the user is authorized to access.SummaryStatic authorization checkingDynamic authorization checkingCasePermissionRuleInitializationUser loginRuntime behaviorAuthorizing access to a custom pageAuthorization and custom profilesGranting permissions to a given resourceRestricting access to a BDM object or its attributesActivating and deactivating authorizationPermissions and resourcesSummaryFor a new Bonita installation, a basic set of authorization checks is activated by default but you might also want to deactivate the HTTP API.Here are the key points of the authorizations configuration :  The static checks (activated by default on a fresh installation) create an authorization layer that exactly matches the standard Bonita Portal features and profiles.If you are using the standard Portal, you do not need to configure anything.  If you want to add extra authorization restrictions based on business rules, turn on the dynamic checks that you want.The configuration file defines standard rules for the most frequent cases, so all you need to do is uncomment the rules you want to apply.  If you add a custom page, include a resources=[ list ] in your page.properties to specify which resources your custom page requires the users to have access to.  If the previous points do not meet your security needs, you can still manually customize the configuration and rules as much as you want.If you have migrated your platform from a version of Bonita earlier than 6.4.0, security is deactivated by default.You need to add authorization to your custom pages before you activate authorization.Static authorization checkingThe static phase uses a set of configuration files:  resources-permissions-mapping-*.properties  compound-permissions-mapping-*.properties  custom-permissions-mapping.propertiesThese files grant permissions to sets of users based on profile or user name.You cannot remove permissions in a configuration file, so you must ensure that the default definitions grant the minimum permissions that you want to give to any user.The default versions of these files are located in setup/platform_conf/initial/tenant_template_portal.In order to change the configuration on an installation whose platform has already been initialized, use the platform setup tool toretrieve the current configuration and update the files in setup/platform_conf/current/tenants/[tenantId]/tenant_portal.Then use the tool again to save your changes into the database.Resources permissions mappingThe resources-permissions-mapping-*.properties files define the mapping of REST resources to simple permissions.This tells you what permission is needed to access a given resource.For example: GET|identity/user=[organization_visualization,organization_management]This specifies that a user with the organization_visualization, or organization_management permissions can see information about users.By default, this file contains a mapping of each Bonita resources to at least one simple permission.You can modify the file resources-permissions-mapping-custom.properties to add your own mappings.For example: GET|identity/user/3=[organization_management]This specifies that information about the user with id 3 can only be seen by users with the Organization_management permission.If there are conflicts between permissions, the more restrictive definition overrides the more general.You can see this in the example above, where the specific permission for user 3 overrides the general permission for seeing user information.Do not modify file resources-permissions-mapping.properties directly, as it is reserved for default values.Custom values should be added manually in file resources-permissions-mapping--custom.propertiesCompound permissions mappingThe compound-permissions-mapping-*.properties files define sets of simple permissions that are grouped together into a compound permission.You can use a compound permission as “shorthand” for a list of simple permissions.By default, the file resources-permissions-mapping.properties contains a compound permission that corresponds to each page of the Bonita Portal,including custom pages.For example: userlistingadmin=[profile_visualization, process_comment, organization_visualization, tenant_platform_visualization, organization_management]This specifies the REST API permissions that are granted with the Bonita Portal Administrator page that lists all the users in the tenant.By default, there is a compound permission defined for each page in the standard Bonita Portal and there is also one for each provided custom page.When you install a custom page in the portal, if the page declares its resources properly, then a new compound permission will be added in an internal versionof this file (compound-permissions-mapping-internal.properties). Then all the users being able to access this page (because it is part of a custom profile orLiving Application they have access to) will also be automatically granted the necessary permissions to call the required REST API resources.Do not modify file compound-permissions-mapping.properties directly, as it is reserved for default values.Custom values should be added manually in file compound-permissions-mapping-custom.propertiesCustom permissions mappingThe custom-permissions-mapping.properties file contains custom rules that supplement the resource permissions and compound permissions.By default, this file is empty, because the compound permissions definitions automatically manage the permissions needed for default and custom profiles, and for default and custom pages.If you want to override the default behavior, you can add a rule to this file. You can add a simple or compound permission to a profile.For example, to give users with the User profile the ability to manage the Bonita Portal look &amp;amp; feel: profile|User=[look_and_feel]You can also assign a permission to a specific user. This is useful if you want to give a named user access to a resource that is not accessible through the user’s profiles.For example, if the user John.Smith is assigned the User profile, he does not have permission to manage the portal Look &amp;amp; Feel.You can add this specific permission to custom-permissions-mapping.properties by adding this line: user|John.Smith=[look_and_feel]This means that in addition to the permissions given to him by the User profile, John.Smith can also manage the Portal Look &amp;amp; Feel. It does not modify the permissions for any other user.If you do not use Bonita Portal but still want to manage REST API authorizations, you can do this using the custom-permissions-mapping.properties file.To do this, create a custom profile and configure the relevant permissions.For example, you could create a profile called CustomProcessManager and assign the permissions needed to monitor and manage processes:profile|MyCustomProfile=[process_visualization, process_management, process_manager_management, custom_process_manager_permission]In this example, the custom_process_manager_permission can be defined in the compound-permissions-mapping-custom.properties file.Dynamic authorization checkingIf the static authorization checks are not suitable for your applications, you can override the rules as you want using dynamic checks.A user is then granted a permission only if the dynamic check authorizes it.A dynamic check is implemented as sequence of conditions, including a Groovy script.This enables you to tailor the permissions needed to access a resource using dynamic information related to processes.A dynamic authorization check for a resource is specified by a line in the file dynamic-permissions-checks-custom.properties.The line specifies the checks to be made for a request type for a method.There can be several terms in the line. Checking stops when the system returns success, indicating that the user is authorized.For example: POST|bpm/case=[user|william.jobs, user|walter.bates, profile|Administrator, profile|User, check|org.bonitasoft.permissions.CasePermissionRule]This specifies that a POST action can be done for a case resource if the user is william.jobs or walter.bates,or any user with the Administrator profile, or any user with the User profile, or if the CasePermissionRule grants authorization.A check term indicates the name of a class to be called. The class must implement org.bonitasoft.engine.api.permission.PermissionRule.This example defines a dynamic check that is made whenever a user makes a GET request for the “bpm/case” resource.If the script returns true, the user is authorized. If the script returns false or any other result (including an error), the user is not authorized.The dynamic-permissions-checks.properties file contains a placeholder line for each method and resource. For example:## CasePermissionRule{:#casepermissionrule}#GET|bpm/case=[profile|Administrator, check|org.bonitasoft.permissions.CasePermissionRule]#POST|bpm/case=[profile|Administrator, check|org.bonitasoft.permissions.CasePermissionRule]#DELETE|bpm/case=[profile|Administrator, check|org.bonitasoft.permissions.CasePermissionRule]#GET|bpm/archivedCase=[profile|Administrator, check|org.bonitasoft.permissions.CasePermissionRule]To specify a dynamic check for a method and resource, uncomment the line in the file dynamic-permissions-checks-custom.properties and add the conditions.If you specify a condition that calls a Groovy script, you must add the new script:If the platform has never been started yet:  add the script to the setup/platform_conf/initial/tenant_template_security_scripts folder  it will be pushed to database at first runIf the platform has already been started:  use the platform setup tool to retrieve the current configuration  add the script to the setup/platform_conf/current/tenants/[tenantId]/tenant_security_scripts folder  then use the platform setup tool again to push the new / modified scripts to databaseThe tenant_security_scripts folder contains a script sample that can be used to write your own.Bonita also provides default scripts that should fit common usages. They are packages internally in the binaries, but thesource code is available.These provided scripts can be used as a base for you own scripts.If you write your own scripts:  make sure you either inherit from an existing rule, or implement the PermissionRule interface, by overriding the isAllowed() method  make sure you use the default package declaration at the top of your groovy class (no package keyword used)  make sure this .groovy file is placed in the default directory, under ‘initial/tenant_template_security_scripts/’ if the platform has never been started,or under ‘current/tenants/TENANT_ID/tenant_security_scripts/’ if the platform has already been startedDo not modify file dynamic-permissions-checks.properties directly, as it is reserved for examples, and may be overwritten during migration to a newer version.Custom values should be added manually in file dynamic-permissions-checks-custom.propertiesExample dynamic check scriptThis script is an example of how to write a dynamic check. It checks two conditions, depending on the method called for a case.If the method is a POST, which would start a case of a process. the user can only start the case if they are eligible to start the process itself.If the user action triggers a GET, the user can view the case information only if they are involved in the case.The Engine API Java method isInvolvedInProcessInstance is used to check whether the user is involved. For an archived case, the only check possible is whether the user started the case.import org.bonitasoft.engine.api.*import org.bonitasoft.engine.api.permission.APICallContextimport org.bonitasoft.engine.api.permission.PermissionRuleimport org.bonitasoft.engine.bpm.process.ArchivedProcessInstanceNotFoundExceptionimport org.bonitasoft.engine.identity.Userimport org.bonitasoft.engine.identity.UserSearchDescriptorimport org.bonitasoft.engine.search.SearchOptionsBuilderimport org.bonitasoft.engine.search.SearchResultimport org.bonitasoft.engine.session.APISessionimport org.json.JSONObjectclass CasePermissionRule implements PermissionRule {@Overrideboolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {long currentUserId = apiSession.getUserId()if (&quot;GET&quot;.equals(apiCallContext.getMethod())) {return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)} else if (&quot;POST&quot;.equals(apiCallContext.getMethod())) {return checkPostMethod(apiCallContext, apiAccessor, currentUserId, logger)}return false}private boolean checkPostMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {def body = apiCallContext.getBodyAsJSON()def processDefinitionId = body.optLong(&quot;processDefinitionId&quot;)if (processDefinitionId &amp;lt;= 0) {return false;}def processAPI = apiAccessor.getProcessAPI()def identityAPI = apiAccessor.getIdentityAPI()User user = identityAPI.getUser(currentUserId)SearchOptionsBuilder searchOptionBuilder = new SearchOptionsBuilder(0, 10)searchOptionBuilder.filter(UserSearchDescriptor.USER_NAME, user.getUserName())SearchResult&amp;lt;User&amp;gt; listUsers = processAPI.searchUsersWhoCanStartProcessDefinition(processDefinitionId, searchOptionBuilder.done())logger.debug(&quot;RuleCase : nb Result [&quot; + listUsers.getCount() + &quot;] ?&quot;)def canStart = listUsers.getCount() == 1logger.debug(&quot;RuleCase : User allowed to start? &quot; + canStart)return canStart}private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {def processAPI = apiAccessor.getProcessAPI()def filters = apiCallContext.getFilters()if (apiCallContext.getResourceId() != null) {def processInstanceId = Long.valueOf(apiCallContext.getResourceId())if (apiCallContext.getResourceName().startsWith(&quot;archived&quot;)) {//no way to check that the were involved in an archived case, can just show started bytry {return processAPI.getArchivedProcessInstance(processInstanceId).getStartedBy() == currentUserId} catch(ArchivedProcessInstanceNotFoundException e) {logger.debug(&quot;archived process not found, &quot;+e.getMessage())return false}} else {def isInvolved = processAPI.isInvolvedInProcessInstance(currentUserId, processInstanceId)logger.debug(&quot;RuleCase : allowed because get on process that user is involved in&quot;)return isInvolved}} else {def stringUserId = String.valueOf(currentUserId)if (stringUserId.equals(filters.get(&quot;started_by&quot;)) || stringUserId.equals(filters.get(&quot;user_id&quot;)) || stringUserId.equals(filters.get(&quot;supervisor_id&quot;))) {logger.debug(&quot;RuleCase : allowed because searching filters contains user id&quot;)return true}}return false}}InitializationAfter the application server starts, the first time that one of the configuration files is accessed, the information from all the files is cached in memory for fast access.If you update a file, the changes become active the next time the application server restarts.In your development environment, you can use the debug mode to makes any changes to the configuration filesand dynamic check scripts available immediately.User loginWhen a user logs in, after the user is authenticated, a map of LoggedUserPermissions is created.LoggedUserPermissions is a combination of the information from compound-permissions-mapping.properties andCustomUserPermissionsMapping that is relevant to the user.It takes into account all the profiles assigned to the user, not only the current profile, so when you change profile the map does not need to be recreated.Runtime behaviorAt runtime, when a user requests access to a resource, the system checks to see if a dynamic check is defined for this resource. If so, it executes the check, and the result grants or denies the user access to the resource.If there is no dynamic check for the resource, the system uses the static checks: it uses the information in the ResourceRequiredPermissions to see what permissions areneeded to access the resource (or page), and checks the LoggedUserPermissions to see whether the user has the necessary permissions.If so, the user is authorized.Otherwise, access is refused.If access is not authorized, a message is written in the log so that the Administrator is aware that an unauthorized user has tried to gain access.Note that this level of logging is only available if you set the logging level to FINEST.Authorizing access to a custom pageWhen a new custom page is added, the permissions defined in the page properties are added to the permissions configuration files and the cache.It is not necessary to restart the applications server to activate security for the new custom page.Depending on the permissions that a user of the page already has, it might be necessary to log out and log in again to get access to the new custom page.If the page declares resources provided by a REST API extension (link to the REST API extention page), then the REST API extension must be deployed before the page,otherwise the compound permissions won’t be automatically created when deploying the page.Authorization and custom profilesWhen a new custom profile is created, the permissions mappings are updated in the configuration files and in the cache.It is not necessary to restart the application server to activate security for the new custom profile.Granting permissions to a given resourceIf you only develop custom pages and you declare the resources they use properly, you should never have to create custom permissions.However, you may need to do so if you need to manually grant permissions to a given REST API resource (so that it can be called programatically for example). In order to do that, you need to:  Look into the file resources-permissions-mapping.properties for the permissions that grant access to the resource.For example, in order to perform a GET on bpm/task, I can see that I need the permission flownode_visualization (syntax: GET|bpm/task=[flownode_visualization])  Edit the file custom-permissions-mapping.properties to give the permission flownode_visualization to the required profiles or users.For example, to add the permission to the user walter.bates (username), add the following line : user|walter.bates=[flownode_visualization]Restricting access to a BDM object or its attributesStarting with the Bonita efficiency subscription edition, you can use a simpler mechanism to grant or deny access to BDM objects or some of their attributes to specific profiles, using the BDM Access Control feature.It is also possible to protect instances of the BDM objects, using REST API authorizations.For more details see : BDM access controlActivating and deactivating authorizationsecurity-config.properties contains a Boolean property that specifies whether authorization is activated. To activate authorization, set this property to true: security.rest.api.authorizations.check.enabled trueTo activate authorization, edit security-config.properties and set the value of the security.rest.api.authorizations.check.enabled property to true, then restart the application server.To deactivate authorization, set the property to false, then restart the application server.If you activate authorization, you must also deactivate the HTTP API, so that is cannot be used to bypass the authorization settings.To do this, you can either filter the HTTP API in the Tomcat configuration (that is, accept only specific IP addresses), or you candeactivate the HttpAPIServlet. To deactivate the servlet, go to the webapps/bonita/WEB-INF folder of your web server,edit web.xml and comment out the following definitions:&amp;lt;!-- For engine HTTP API --&amp;gt;&amp;lt;!--&amp;lt;servlet&amp;gt;&amp;lt;servlet-name&amp;gt;HttpAPIServlet&amp;lt;/servlet-name&amp;gt;&amp;lt;servlet-class&amp;gt;org.bonitasoft.engine.api.internal.servlet.HttpAPIServlet&amp;lt;/servlet-class&amp;gt;&amp;lt;/servlet&amp;gt;--&amp;gt;&amp;lt;!-- &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;HttpAPIServlet&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;/serverAPI/*&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; --&amp;gt;Running in debug modeIf debug mode is activated, whenever you update a configuration file or a dynamic check script, the changes take effect immediately.To activate debug mode, edit security-config.properties and set the value of the security.rest.api.authorizations.check.debug property to true, then restart the application server.To deactivate authorization, set the property to false, then restart the application server. Debug mode should be deactivated in production, so as not to impact performance.MigrationWhen you migrate from a version earlier than 6.4.0, authorization is configured to be off (security.rest.api.authorizations.check.enabled is set to false).If you have an existing custom page and want to activate authorization, you need to add permissions to the definition of the custom page.To add authorization to an existing custom page:  Export the custom page.  Update the page properties with permissions.  Activate authorization, by editing security-config.properties and setting the value of the security.rest.api.authorizations.check.enabled property to true.  Restart the application server.  Import the custom page.If you have an existing custom profile, the permissions relating to the profiles is automatically added to the permissions files, so you do not need to update the profile.However, if a custom profile use a custom page, you must update the custom page definition to add permissions before you activate authorization.Permissions and resourcesThe table below shows the default permissions and the resources to which they grant access.| Permission | Resources||:-|:-|| activity_visualization | [GET|bpm/processResolutionProblem]| | application_management | [POST|living/application, PUT|living/application, DELETE|living/application, POST|living/application-page, PUT|living/application-page, DELETE|living/application-page, POST|living/application-menu, PUT|living/application-menu, DELETE|living/application-menu]| | application_visualization | [GET|living/application, GET|living/application-page, GET|living/application-menu]| | bdm_management | [POST|tenant/bdm]| | bdm_visualization | [GET|bdm/businessData, GET|bdm/businessDataReference]| | bpm_monitoring_management | [POST|monitoring/report, DELETE|monitoring/report]| | bpm_monitoring_visualization | [GET|monitoring/report]| | case_delete | [DELETE|bpm/case, DELETE|bpm/archivedCase]| | case_management | [POST|bpm/case, PUT|bpm/caseVariable, PUT|bpm/caseDocument, POST|bpm/caseDocument, DELETE|bpm/caseDocument, DELETE|bpm/archivedCaseDocument]| | case_start | [PUT|bpm/process, POST|bpm/case]| | case_start_for | [PUT|bpm/process]| | case_visualization | [GET|bpm/case, GET|bpm/archivedCase, GET|bpm/caseVariable, GET|bpm/caseDocument, GET|bpm/archviedCaseDocument]| | command_management | [POST|bpm/command, PUT|bpm/command, DELETE|bpm/command]| | command_visualization | [GET|bpm/command]| | connector_management | [PUT|bpm/process, PUT|bpm/processConnector, PUT|bpm/connectorInstance]| | connector_visualization | [GET|bpm/process, GET|bpm/processConnector, GET|bpm/processConnectorDependency, GET|bpm/connectorInstance, GET|bpm/archivedConnectorInstance, GET|bpm/connectorFailure]| | demo_permission (since 7.0.0) | [GET|extension/demo/getExample, GET|extension/demo/headerExample, GET|extension/demo/logExample, GET|extension/demo/soapExample, GET|extension/demo/xmlExample, POST|extension/demo/postExample]| | document_management | [PUT|bpm/caseDocument, POST|bpm/caseDocument, DELETE|bpm/caseDocument, PUT|bpm/archivedCaseDocument, POST|bpm/archivedCaseDocument, DELETE|bpm/archivedCaseDocument, POST|bpm/document, PUT|bpm/document, DELETE|bpm/document]| | document_visualization | [GET|bpm/caseDocument, GET|bpm/document, GET|bpm/archiveddocument, GET|bpm/archivedCaseDocument]| | flownode_management | [PUT|bpm/flowNode, PUT|bpm/activity, PUT|bpm/task, PUT|bpm/timerEventTrigger]| | flownode_visualization | [GET|bpm/processResolutionProblem, GET|bpm/flowNode, GET|bpm/activity, GET|bpm/task, GET|bpm/activityVariable, GET|bpm/archivedFlowNode, GET|bpm/archivedActivity, GET|bpm/archivedTask, GET|bpm/timerEventTrigger]| | license | [GET|system/license]| | look_and_feel | [POST|portal/theme, PUT|portal/theme, POST|userXP/theme, PUT|userXP/theme]| | organization_management | [POST|identity/user, PUT|identity/user, DELETE|identity/user, POST|identity/personalcontactdata, PUT|identity/personalcontactdata, POST|identity/professionalcontactdata, PUT|identity/professionalcontactdata, POST|identity/role, PUT|identity/role, DELETE|identity/role, POST|identity/group, PUT|identity/group, DELETE|identity/group, POST|identity/membership, PUT|identity/membership, DELETE|identity/membership, POST|customuserinfo/definition, DELETE|customuserinfo/definition, PUT|customuserinfo/value]| | organization_visualization | [GET|identity/user, GET|identity/personalcontactdata, GET|identity/professionalcontactdata, GET|identity/role, GET|identity/group, GET|identity/membership, GET|customuserinfo/user, GET|customuserinfo/definition, GET|customuserinfo/value]| | platform_management (since 7.1.0) | [GET|platform/license]| | process_actor_mapping_management | [PUT|bpm/process]| | process_actor_mapping_visualization | [GET|bpm/process]| | process_categories | [GET|bpm/process, PUT|bpm/process, POST|bpm/processCategory, DELETE|bpm/processCategory, GET|bpm/category, POST|bpm/category, PUT|bpm/category, DELETE|bpm/category]| | process_comment | [GET|bpm/comment, POST|bpm/comment, GET|bpm/archivedComment]| | process_deploy | [POST|bpm/process, DELETE|bpm/process]| | process_management | [PUT|bpm/process, GET|bpm/processConnector, PUT|bpm/processConnector, GET|bpm/processConnectorDependency, POST|bpm/processCategory, DELETE|bpm/processCategory, GET|bpm/processParameter, PUT|bpm/processParameter, POST|bpm/actorMember, PUT|bpm/actorMember, DELETE|bpm/actorMember]| | process_manager_management | [POST|bpm/processSupervisor, DELETE|bpm/processSupervisor, POST|bpm/actorMember, PUT|bpm/actorMember, DELETE|bpm/actorMember]| | process_manager_visualization | [GET|bpm/processSupervisor, GET|bpm/actorMember]| | process_visualization | [GET|bpm/process, GET|bpm/actor, GET|bpm/actorMember, GET|bpm/diagram]| | profile_management | [POST|portal/profile, PUT|portal/profile, DELETE|portal/profile, POST|portal/page, PUT|portal/page, DELETE|portal/page, POST|portal/profileEntry, PUT|portal/profileEntry, DELETE|portal/profileEntry, POST|userXP/profile, PUT|userXP/profile, DELETE|userXP/profile, POST|userXP/profileEntry, PUT|userXP/profileEntry, DELETE|userXP/profileEntry]| | profile_visualization | [GET|portal/profile, GET|portal/bonitaPage, GET|portal/page, GET|portal/profileEntry, GET|userXP/profile, GET|userXP/profileEntry, GET|userXP/bonitaPage]| | profile_member_visualization | [GET|portal/profileMember, GET|userXP/profileMember]| | profile_member_management | [POST|portal/profileMember, DELETE|portal/profileMember, POST|userXP/profileMember, DELETE|userXP/profileMember]| | task_management | [PUT|bpm/humanTask, PUT|bpm/userTask, POST|bpm/hiddenUserTask, DELETE|bpm/hiddenUserTask, POST|bpm/manualTask, PUT|bpm/manualTask]| | task_visualization | [GET|bpm/humanTask, GET|bpm/userTask, GET|bpm/hiddenUserTask, GET|bpm/manualTask, GET|bpm/archivedHumanTask, GET|bpm/archivedUserTask, GET|bpm/archivedManualTask]| | tenant_platform_management | [PUT|system/tenant, POST|platform/platform, PUT|platform/platform, DELETE|platform/platform, POST|platform/tenant, PUT|platform/tenant, DELETE|platform/tenant]| | tenant_platform_visualization | [GET|system/session, GET|system/log, GET|system/tenant, GET|system/feature, GET|system/monitoring, GET|system/i18nlocale, GET|system/i18ntranslation, GET|platform/platform, GET|platform/jvmDynamic, GET|platform/jvmStatic, GET|platform/systemProperty, GET|platform/tenant ]",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/security-and-authentication/rest-api-authorization",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-security-and-authentication-single-sign-on-with-cas": {
      "title": "Single sign-on with CAS",
      "content"     : "Single sign-on with CASNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.This pages explains how to configure your Bonita Platform system to use CAS to provide single sign-on (SSO). It assumes you already have a working CAS service. All Bonita users must be registered in CAS.This information applies to a Bonita platform deployed from a bundle, not to the Engine launched from Bonita Studio.CAS configuration is at tenant level. Each tenant can use a different CAS service.Note: On a system using CAS to manage logins, if a user who is not already logged in tries to access a page in the Portal by clicking on a URL link, they are re-directed to the login page. After logging in, the requested page is not displayed automatically. The user must click the link again.Configure Bonita Engine and WildFly for CASConfigure Bonita Engine and Tomcat for CASTroubleshootConfigure logout behaviourManage passwordsLDAP synchronizer and CASSingle sign-on with CAS using the REST APIConfigure Bonita Engine and WildFly for CASThe deploy bundle contains the files needed to use CAS with Bonita platform and a WildFly 10 application server.They are contained in cas-3.3.1-module.You can use this folder to configure CAS for a platform deployed from the WildFly bundle or from the deploy bundle.The cas-3.3.1-module folder contains some jar files that are required.It also contains a configuration file for the module, module.xml, which defines the jar files to be loaded from the module itself and the dependencies of the module. For example:&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;module xmlns=&quot;urn:jboss:module:1.0&quot; name=&quot;org.jasig.cas&quot;&amp;gt;&amp;lt;resources&amp;gt;&amp;lt;resource-root path=&quot;cas-client-core-3.3.1.jar&quot; /&amp;gt;&amp;lt;resource-root path=&quot;slf4j-api-1.7.1.jar&quot; /&amp;gt;&amp;lt;resource-root path=&quot;slf4j-log4j12-1.7.1.jar&quot; /&amp;gt;&amp;lt;resource-root path=&quot;log4j-1.2.15.jar&quot; /&amp;gt;&amp;lt;/resources&amp;gt;&amp;lt;dependencies&amp;gt;&amp;lt;system&amp;gt;&amp;lt;paths&amp;gt;&amp;lt;path name=&quot;org/xml/sax&quot;/&amp;gt;&amp;lt;path name=&quot;org/xml/sax/helpers&quot;/&amp;gt;&amp;lt;path name=&quot;javax/net/ssl&quot;/&amp;gt;&amp;lt;path name=&quot;javax/xml/parsers&quot;/&amp;gt;&amp;lt;path name=&quot;javax/security/auth/spi&quot;/&amp;gt;&amp;lt;path name=&quot;javax/security/auth/login&quot;/&amp;gt;&amp;lt;path name=&quot;javax/security/auth/callback&quot;/&amp;gt;&amp;lt;path name=&quot;javax/security/auth&quot;/&amp;gt;&amp;lt;/paths&amp;gt;&amp;lt;/system&amp;gt;&amp;lt;/dependencies&amp;gt;&amp;lt;/module&amp;gt;For a standard installation, it is not necessary to modify this file.To configure Bonita Engine for CAS:  If you do not already have it, download the Subscription edition deploy zip from the customer portal.  Add the CAS module. To do this, copy BonitaSubscription-x.x.x-deploy/cas-x.x.x-module/org to WILDFLY_HOME/server/modules to merge the CAS module with the existing modules.  Make the CAS module global so that it can be used by any application. To do this, edit WILDFLY_HOME/setup/wildfly-templates/standalone.xml and change the definition of the ee subsystem to the following: &amp;lt;subsystem xmlns=&quot;urn:jboss:domain:ee:1.0&quot;&amp;gt;&amp;lt;global-modules&amp;gt;&amp;lt;module name=&quot;org.jasig.cas&quot; slot=&quot;main&quot;/&amp;gt; &amp;lt;/global-modules&amp;gt;&amp;lt;/subsystem&amp;gt;  Edit WILDFLY_HOME/setup/wildfly-templates/standalone.xml and add the BonitaAuthentication module. Right after the opening &amp;lt;security-domains&amp;gt; tag, insert these lines (specifying the relevant IP addresses and port numbers):&amp;lt;security-domain name=&quot;BonitaAuthentication-1&quot;&amp;gt;&amp;lt;authentication&amp;gt;&amp;lt;login-module code=&quot;org.jasig.cas.client.jaas.CasLoginModule&quot; flag=&quot;required&quot;&amp;gt;&amp;lt;module-option name=&quot;ticketValidatorClass&quot; value=&quot;org.jasig.cas.client.validation.Cas20ServiceTicketValidator&quot;/&amp;gt;&amp;lt;module-option name=&quot;casServerUrlPrefix&quot; value=&quot;http://cas_ip_address:cas_port/cas&quot;/&amp;gt;&amp;lt;module-option name=&quot;tolerance&quot; value=&quot;20000&quot;/&amp;gt;&amp;lt;module-option name=&quot;service&quot; value=&quot;http://cas_ip_address:cas_port/bonita/loginservice&quot;/&amp;gt;&amp;lt;module-option name=&quot;defaultRoles&quot; value=&quot;admin,operator&quot;/&amp;gt;&amp;lt;module-option name=&quot;roleAttributeNames&quot; value=&quot;memberOf,eduPersonAffiliation&quot;/&amp;gt;&amp;lt;module-option name=&quot;principalGroupName&quot; value=&quot;CallerPrincipal&quot;/&amp;gt;&amp;lt;module-option name=&quot;roleGroupName&quot; value=&quot;Roles&quot;/&amp;gt;&amp;lt;module-option name=&quot;cacheAssertions&quot; value=&quot;true&quot;/&amp;gt;&amp;lt;module-option name=&quot;cacheTimeout&quot; value=&quot;480&quot;/&amp;gt;&amp;lt;/login-module&amp;gt;&amp;lt;/authentication&amp;gt;&amp;lt;/security-domain&amp;gt;Warning: module names must be unique (from the example above, BonitaAuthentication-1 is the module name). Therefore, remove the unecessary ones  In the CasLoginModule configuration, check that the principalGroupName property is set to CallerPrincipal. This is required to retrieve the username from the Bonita application. Bonita uses the CAS LoginModule in the JASIG implementation, so see the CAS LoginModule section of the Jasig documentation for more information.  Update bonita-tenant-sp-custom.properties from setup/platform_conf/initial/tenant_template_engine/ if platform has not been initialized yet or setup/platform_conf/current/tenants/[TENANT_ID]/tenant_engine/ and setup/platform_conf/current/tenant_template_engine/.If the platform has already been initialized, every update to the configuration files under setup/platform_conf/current must be done using the setup tool:  setup pull  edit configuration file(s)  setup push  Remove the comment flags from these lines:authentication.service.ref.name=jaasAuthenticationService  Specify the relevant IP address and port number.  Optionally, to enable anonymous user to access a process, uncomment this lines:authenticator.delegate=casAuthenticatorDelegateauthentication.delegate.cas.server.url.prefix=http://ip_address:portauthentication.delegate.cas.service.url=http://ip_address:port/bonita/loginservice  Configure Bonita Engine and Tomcat for CAS  The CAS implementation relies on JAAS, and is defined in the BonitaAuthentication module of the JAAS configuration file.Set the Java system property java.security.auth.login.config in the Tomcat startup script to point to the JAAS configuration file, TOMCAT_HOME/server/conf/jaas-standard.cfg.For example, on Linux, edit TOMCAT_HOME/setup/tomcat-templates/setenv.sh, uncomment the line that defines SECURITY_OPTS, and insert the variable SECURITY_OPTS in the line CATALINA_OPTS=...The TOMCAT_HOME/server/conf/jaas-standard.cfg file contains the following (replace ip_address:port with the relevant IP addresses and port numbers, in two places):BonitaAuthentication-1 {  org.jasig.cas.client.jaas.CasLoginModule requiredticketValidatorClass=&quot;org.jasig.cas.client.validation.Cas20ServiceTicketValidator&quot;casServerUrlPrefix=&quot;http://ip_address:port/cas&quot;tolerance=&quot;20000&quot;service=&quot;http://ip_address:port/bonita/loginservice&quot;defaultRoles=&quot;admin,operator&quot;roleAttributeNames=&quot;memberOf,eduPersonAffiliation&quot;principalGroupName=&quot;CallerPrincipal&quot;roleGroupName=&quot;Roles&quot;cacheAssertions=&quot;true&quot;cacheTimeout=&quot;480&quot;;};  Warning: module names must be unique (from the example above, BonitaAuthentication-1 is the module name). Therefore, remove the unecessary onesThe JAAS configuration file, jaas-standard.cfg, is sorted by sets of authentication modules. For Bonita, each set matches a tenant configuration and the name is prefixed with BonitaAuthentication-&amp;lt;tenant-id&amp;gt;. Make sure there is a set of authentication modules for each tenant in your platform. For each tenant, set the CAS service to point to the application login page and set casServerUrlPrefix to point to the CAS server.  In the CasLoginModule configuration, check that the principalGroupName property is set to CallerPrincipal.This is required to retrieve the username from the Bonita application.Bonita uses the CAS LoginModule in the JASIG implementation, so see the CAS LoginModule section of the Jasig documentation for more information.  Copy cas-client-core-x.x.x.jar from BonitaSubscription-x.x.x-deploy/cas-x.x.x-module/org/jasig/cas/main into the TOMCAT_HOME/server/lib directory.  Copy commons-logging-x.x.x.jar from BonitaSubscription-x.x.x-deploy/BonitaSubscription-x.x.x-LDAP-Synchronizer/BonitaSubscription-x.x.x-LDAP-Synchronizer/lib into the TOMCAT_HOME/server/lib directory.  Update bonita-tenant-sp-custom.properties from setup/platform_conf/initial/tenant_template_engine/ if platform has not been initialized yet or setup/platform_conf/current/tenants/[TENANT_ID]/tenant_engine/ and setup/platform_conf/current/tenant_template_engine/.If the platform has already been initialized, every update to the configuration files under setup/platform_conf/current must be done using the setup tool:  setup pull  edit configuration file(s)  setup push  Remove the comment flags from these lines:authentication.service.ref.name=jaasAuthenticationService  Optionally, to enable anonymous user to access a process, uncomment this lines:authenticator.delegate=casAuthenticatorDelegateauthentication.delegate.cas.server.url.prefix=http://ip_address:portauthentication.delegate.cas.service.url=http://ip_address:port/bonita/loginserviceSpecify the relevant IP address and port number.  Configure the Bonita Portal for CAS SSO  For each tenant, edit authenticationManager-config.properties to enable the CASRemoteAuthenticationManager and its properties.Edit the authenticationManager-config.properties located in platform_conf/initial/tenant_template_portal for not initialized platform or platform_conf/current/tenant_template_portal and platform_conf/current/tenants/[TENANT_ID]/tenant_portal/.If the platform has already been initialized, every update to the configuration files under setup/platform_conf/current must be done using the setup tool:  setup pull  edit configuration file(s)  setup pushMake sure that auth.AuthenticationManager property is set to org.bonitasoft.console.common.server.auth.impl.jaas.cas.CASRemoteAuthenticationManagerImplUncomment Cas.serverUrlPrefix and Cas.bonitaServiceURL properties as shown below (specify the relevant IP addresses and ports):#auth.AuthenticationManager = org.bonitasoft.console.common.server.auth.impl.standard.StandardAuthenticationManagerImplExt#auth.AuthenticationManager = org.bonitasoft.console.common.server.auth.impl.oauth.OAuthAuthenticationManagerImplExt# OAuth.serviceProvider = LinkedIn# OAuth.consumerKey = ove2vcdjptar# OAuth.consumerSecret = vdaBrCmHvkgJoYz1# OAuth.callbackURL = http://ip_address:port/loginserviceauth.AuthenticationManager = org.bonitasoft.console.common.server.auth.impl.jaas.cas.CASRemoteAuthenticationManagerImplCas.serverUrlPrefix = http://ip_address:port/casCas.bonitaServiceURL = http://ip_address:port/bonita/portal/homepagelogout.link.hidden=trueCAS SSO and Java client applicationTo enable a Java client application to access the engine using CAS autentication, the simplest way is to enable REST authentication on CAS server and have the Java client retrieve the ticket for the bonita service URL.Then, use the LoginAPI with the java.util.Map having the ticket and service.Cluster considerations and bonita webapp for TomcatIf you are configuring Bonita and Tomcat in a cluster environment for CAS, there are some extra steps to do:  Copy commons-logging-x.x.x.jar from BonitaSubscription-x.x.x-deploy/BonitaSubscription-x.x.x-LDAP-Synchronizer/BonitaSubscription-x.x.x-LDAP-Synchronizer/lib into the TOMCAT_HOME/server/lib directory.  Remove the WEB-INF/lib/commons-logging-x.x.x.jar file from the TOMCAT_HOME/server/webapps/bonita.war.  Remove the TOMCAT_HOME/server/webapps/bonita/WEB-INF/lib/commons-logging-x.x.x.jar file (if it is present).TroubleshootTo troubleshoote SSO login issues, you need to increase the log level to ALL in order for errors to be displayed in the log files (by default, they are not).Configure logout behaviourBonita PortalIf you are using CAS, when users log out of Bonita Portal, they log out of CAS. Therefore they are logged out of all applications that are using the CAS service. To avoid this, you can hide the logout option of the portal. To do this, set the logout.link.hidden=true option in authenticationManager-config.properties located in platform_conf/initial/tenant_template_portal for not initialized platform or platform_conf/current/tenant_template_portal and platform_conf/current/tenants/[TENANT_ID]/tenant_portal/.If the platform has already been initialized, every update to the configuration files under setup/platform_conf/current must be done using the setup tool:  setup pull  edit configuration file(s)  setup pushIf this option is set, when users navigate away from the Portal, they are still logged in to CAS.Bonita EngineBy default, logging out from Bonita Engine logs the user out of CAS. You can change this behavior by implementing your own Authentication Service.Manage passwordsWhen you are using CAS, the password for a user is managed in your CAS system. However, when you create a user in Bonita Portal, specifying a password is mandatory. This password is ignored.LDAP synchronizer and CASIf you are using an LDAP service and the LDAP synchronizer to manage your user data, you can continue to do this and use CAS. The LDAP synchronizer user must be registered in CAS. Alternatively, the LDAP synchronizer could be run with the tenant technical user, because this bypasses the SSO login.We recommend that you use LDAP as your master source for information, synchronizing the relevant information with your CAS server.Single sign-on with CAS using the REST APICAS is a browser-oriented protocol (based on http automatic redirection, cookies, forms, etc…), therefore, we only have securized browser-oriented resources. This is why only a subset of pages are handled to be automatically SSO CAS-verified but not the whole web application.The default AuthenticationFilter that manages CAS authentication applies only to the following pages:  /portal  /mobile/*  /portal.js/*  /apps/*  /services/*REST API are not part of them, but if an http session already exists thanks to cookies, REST API can be used.The recommended way to authenticate to Bonita Portal to use the REST API is to use the CAS server REST API.It allows to retrieve authentication tickets to authenticate to Bonita Portal.For detailed information about the procedure to install Restful access on your CAS SSO server, see the following links:  CAS SSO RESTful API  Bonita REST APINote: All calls issued to get the TGT or ST are made to the CAS SSO server.Getting the Ticket Granting Ticket (TGT)The Ticket Granting Ticket is an exposed resource. It has a unique URL.Request for a Ticket Granting Ticket Resource| | ||:-|:-|| Request URL | http://www.your_cas_server_url/cas/v1/tickets || Request Method | POST || Form Data | Username: walter.bates   Password: bpm |Response for a Ticket Granting Ticket Resource      Response  201 created  Location: http://www.your_cas_server_url/cas/v1/tickets/{TGT}  Take the TGT response and paste it in the url of the ST request, belowGetting the Service Ticket (ST)Request for a Service Ticket      Request URL  http://www.your_cas_server_url/cas/v1/tickets/{TGT}  Request Method  POST  Form Data  service={form encoded parameter for the service url}  For instance, in a Bonita Portal deployed on Tomcat bundle on a server with IP 192.168.1.9, service url can be http://192.168.1.9:8080/bonita/portal/homepage. Its form encoded value would be http%3A%2F%2F192.168.1.9%3A8080%2Fbonita%2Fportal%2Fhomepage.Response for a Service (ST)      Response  200 OK   {ST}  Take the ST response and paste it in the url of the Bonita Engine login request, belowLogging into Bonita Engine with Rest API using the service ticketUse a Bonita Portal URL where the CAS AuthenticationFilter applies for authentication to work.Prefer GET over POST to authenticate because experience has shown that in some server configuration, POST parameters cannot be retrieved in the CAS authentication web filter.Authentication to Bonita Engine with GETThe form encoded parameter URL used as service in the previous step must be used as access point because it will be sent to the CAS server to check ticket validation.      Request URL  {service url}  Request Method  GET  HTTP Params  ticket={ST}  Authentication to Bonita Engine with POSTUse a Bonita Portal SSO protected URL for this action.      Request URL  &amp;lt;bonita portal url&amp;gt;  Request Method  POST  Form Data  service={form encoded parameter for the service url}&amp;amp;ticket={ST}  Response for a Service (ST)      Response  200 OK  You are now logged into Bonita Portal and REST API calls will succeed.Cookies must be enabled in REST client side for authentication to persist across REST API calls.Therefore, calling web application root context may not work (e.g. /bonita by default) because session cookie seems not to be set on all web server configurations.Use a protected URL to authenticate to Bonita Portal when using the ticket parameter with POST method.",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/security-and-authentication/single-sign-on-with-cas",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-security-and-authentication-single-sign-on-with-saml": {
      "title": "Single sign-on with SAML",
      "content"     : "Single sign-on with SAMLNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.This pages explains how to configure your Bonita Platform system to use the SAML protocol to provide single sign-on (SSO). It assumes you already have a SAML Identity Provider server up and running (IdP).This information applies to a Bonita platform deployed from a bundle (Tomcat or WildFly), not to the Engine launched from Bonita Studio. &amp;lt;BUNDLE_HOME&amp;gt; refers to the root directory of the bundle.SAML configuration is at tenant level. Each tenant can use a different authentication method (over SAML or not).Note: Bonita uses Keycloak as SAML Service Provider adapter.SAML overview for BonitaConfigure Bonita Bundle for SAMLConfigure the Identity ProviderConfigure logout behaviourTroubleshootManage passwordsLDAP synchronizer and SAMLSingle sign-on with SAML using the REST APISAML overview for BonitaThis is an overview that relates the steps required to integrate a bonita bundle with an SAML Identity Provider.Here some details about the Bonita SAML2 module,it is composed of:  A servlet filter that intercept all the requests to bonita portal pagesIt checks if the user is already logged in on Bonita  If already logged in =&amp;gt; Allow the access  If not logged in =&amp;gt; Redirect to IdP (with user info)One Assertion Consumer Service ACS URL (technically this is also handled by the servlet filter through a different URL mapping  /saml),This service validates and process the SAML response :  Decode SAMLResponse  Check if the answer is valid (certificate, date, origin)  Extract the username from it (NameId or subject attribute)  Connect to bonita using username  Redirect to the initial requested resource (relayState)  Bonita “username” should match the NameId or one attribute of the subject returned by the IdP in the response.  If some users need to be able to log in without having an account on the IDP, you can authorize it by activating an option in the file authenticationManager-config.properties (see 2. below). Users will then be able to log in using the portal login page (/login.jsp) provided they have a bonita account and their password is different from their username.Configure Bonita Bundle for SAMLYou need to execute the following actions in the folder of each tenant for which you want to support authentication over SAML.If you want this configuration to also apply to each tenant created later, make sure to also perform those actions in the template tenant configuration folder:&amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenant_template_* (if you have not started the Bonita bundle yet, the files are located in &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/initial/tenant_template_*)The bundle already contains the files needed to use SAML with Bonita platform.To configure Bonita for SAML:  If you do not already have one:  Download a Subscription edition bundle from the customer portal  Configure it as needed  Run it a first time, so that the first default tenant is created (TENANT_ID = 1)  Stop it before modifying the configuration files belowIn the tenant_portal folder of each existing tenant: &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_portal,edit the authenticationManager-config.properties as follows:--&amp;gt;  #auth.AuthenticationManager = org.bonitasoft.console.common.server.auth.impl.standard.StandardAuthenticationManagerImpl--&amp;gt;  auth.AuthenticationManager = org.bonitasoft.console.common.server.auth.impl.saml.SAML2AuthenticationManagerImpl--&amp;gt;  saml.filter.active = true--&amp;gt;  saml.auth.standard.allowed = false--&amp;gt;  saml.logout.global = false--&amp;gt;  auth.tenant.admin.username = install--&amp;gt;  auth.passphrase = BonitaBPM #auth.AuthenticationManager = org.bonitasoft.console.common.server.auth.impl.oauth.OAuthAuthenticationManagerImpl # OAuth.serviceProvider = LinkedIn # OAuth.consumerKey = ove2vcdjptar # OAuth.consumerSecret = vdaBrCmHvkgJoYz1 # OAuth.callbackURL = http://127.0.0.1:8888/loginservice #auth.AuthenticationManager = org.bonitasoft.console.common.server.auth.impl.jaas.cas.CASRemoteAuthenticationManagerImpl # Cas.serverUrlPrefix = http://127.0.1.1:8180/cas # Cas.bonitaServiceURL = http://127.0.1.1:8080/bonita/loginservice--&amp;gt;  logout.link.hidden=true Make sure to set the right tenant admin username. It is recommended to also replace the value of the passphrase (property auth.passphrase) which is used by the engine to verify the authentication request. The value must be the same as in the file bonita-tenant-sp-custom.properties. If you need some users to be able to log in without having an account on the IDP, you can authorize it by setting the property saml.auth.standard.allowed to true. Users will then be able to log in using the portal login page (/login.jsp) provided they have a bonita account and their password is different from their username.In the tenant_engine folder of each existing tenant: &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_engine/,  edit the file bonita-tenant-sp-custom.xml to uncomment the bean passphraseOrPasswordAuthenticationService: &amp;lt;bean id=&quot;passphraseOrPasswordAuthenticationService&quot; class=&quot;com.bonitasoft.engine.authentication.impl.PassphraseOrPasswordAuthenticationService&quot; lazy-init=&quot;true&quot;&amp;gt;&amp;lt;constructor-arg name=&quot;logger&quot; ref=&quot;tenantTechnicalLoggerService&quot; /&amp;gt;&amp;lt;constructor-arg name=&quot;identityService&quot; ref=&quot;identityService&quot; /&amp;gt;&amp;lt;constructor-arg name=&quot;configuredPassphrase&quot; value=&quot;${authentication.service.ref.passphrase}&quot; /&amp;gt;&amp;lt;/bean&amp;gt;In the tenant_engine folder of each existing tenant: &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_engine/  edit the file bonita-tenant-sp-custom.properties as follows: # Authentication service to use. Some are natively provided: # authenticationService #   * binded to bonita authentication mode #   * impl: org.bonitasoft.engine.authentication.impl.AuthenticationServiceImpl # jaasAuthenticationService #   * to use JAAS #   * impl: com.bonitasoft.engine.authentication.impl.JAASGenericAuthenticationServiceImpl #   * this is the one to configure SSO over CAS (CAS properties to be defined hereafter # noAuthenticationService #   * does no authentication on the engine side #   * impl: com.bonitasoft.engine.authentication.impl.NoAuthenticationServiceImpl # passphraseOrPasswordAuthenticationService #   * Used by SAML2 implementation, login only if a passphrase is valid, or if a username/password is valid. #   * Requires PassphraseOrPasswordAuthenticationService bean to be uncommented in bonita-tenant-sp-custom.xml #   * impl: com.bonitasoft.engine.authentication.impl.PassphraseOrPasswordAuthenticationService # you can provide your own implementation in bonita-tenant-sp-custom.xml and refer to the bean name of your choice--&amp;gt;  authentication.service.ref.name=passphraseOrPasswordAuthenticationService # If authentication.service.ref.name equals &quot;PassphraseOrPasswordAuthenticationService&quot;, # you need to configure the following passphrase --&amp;gt;  authentication.service.ref.passphrase=BonitaBPM # CAS authentication delegate : enables the user, providing login/password, # to be logged in automatically against CAS web application  # To be used in conjunction with the generic authentication service configured with CAS (jaasAuthenticationService) #authenticator.delegate=casAuthenticatorDelegate #authentication.delegate.cas.server.url.prefix=http://ip_address:port #authentication.delegate.cas.service.url=http://ip_address:port/bonita/loginserviceIt is recommended to also replace the value of the passphrase (property auth.passphrase). The value must be the same as in the file authenticationManager-config.properties updated previously.If your Identity Provider (IdP) requires requests to be signed, generate a private key.For example on linux, you can use the command ssh-keygen, then go to “cd ~/.ssh” to retrieve the key from the file id_rsa (more id_rsa, then copy the key).Note: The expected format for Keys and certificates is PEM (with or without the comment header and footer).  In the tenant_portal folder of each existing tenant: &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_portal, edit the file keycloak-saml.xml to setup Bonita webapp as a Service provider working with your IdP.  The entityID is the Service Provider given to your bonita installation. You can change it if you want but you need to provide it to your IdP.  If your IdP requires the SSO requests to be signed replace the following strings in the Keys section of the SP:  put your private key here  put your certificate herewith you current server’s private key and with the certificate provided by the IdP.If your IdP does not require the SSO requests to be signed, you can remove the Keys node from the SP and set the attribute signRequest to false.If your IdP responses are signed, replace the following strings in the Keys section of the IDP:  put your certificate herewith the certificate provided by the IdP (same certificate as in the SP section).If your IdP responses are not signed, you can remove the Keys node from the IDP and set the attribute validateResponseSignature to false.The PrincipalNameMapping policy indicates how to retrieve the subject attribute that matches a bonita user account username from the IdP response.The policy can either be FROM_NAME_ID or FROM_ATTRIBUTE (in that case you need to specify the name of the subject attribute to use).  You may also need to change the requestBinding and/or responseBinding from POST to REDIRECT depending on your IdP configuration.  The url binding to your IdP also needs to be define by replacing the following string:  http://idp.saml.binding.url.to.changeNote 1: If both the requests to the IdP and the responses are signed, this means you need to add the certificate twice: in the SP section as well as in the IDP section.Note 2: More configuration options can be found in Keycloak official documentation   &amp;lt;keycloak-saml-adapter&amp;gt;   &amp;lt;SP entityID=&quot;bonita&quot;   sslPolicy=&quot;EXTERNAL&quot;   forceAuthentication=&quot;false&quot;   isPassive=&quot;false&quot;   turnOffChangeSessionIdOnLogin=&quot;true&quot;&amp;gt;   &amp;lt;Keys&amp;gt;   &amp;lt;Key signing=&quot;true&quot;&amp;gt;--&amp;gt;&amp;lt;PrivateKeyPem&amp;gt;put your private key here&amp;lt;/PrivateKeyPem&amp;gt;--&amp;gt;&amp;lt;CertificatePem&amp;gt;put your certificate here&amp;lt;/CertificatePem&amp;gt;   &amp;lt;/Key&amp;gt;   &amp;lt;/Keys&amp;gt;   &amp;lt;PrincipalNameMapping policy=&quot;FROM_ATTRIBUTE&quot; attribute=&quot;username&quot;/&amp;gt;   &amp;lt;IDP entityID=&quot;idp&quot;&amp;gt;   &amp;lt;SingleSignOnService signRequest=&quot;true&quot;  validateResponseSignature=&quot;true&quot;  requestBinding=&quot;POST&quot;  responseBinding=&quot;POST&quot;--&amp;gt;   bindingUrl=&quot;http://idp.saml.binding.url.to.change&quot;/&amp;gt;   &amp;lt;SingleLogoutService signRequest=&quot;false&quot;  signResponse=&quot;false&quot;  validateRequestSignature=&quot;false&quot;  validateResponseSignature=&quot;false&quot;  requestBinding=&quot;POST&quot;  responseBinding=&quot;POST&quot;  postBindingUrl=&quot;http://idp.saml.binding.url.to.change&quot;  redirectBindingUrl=&quot;http://idp.saml.binding.url.to.change&quot;/&amp;gt;   &amp;lt;Keys&amp;gt;   &amp;lt;Key signing=&quot;true&quot;&amp;gt;--&amp;gt;&amp;lt;CertificatePem&amp;gt;put your certificate here&amp;lt;/CertificatePem&amp;gt;   &amp;lt;/Key&amp;gt;   &amp;lt;/Keys&amp;gt;   &amp;lt;/IDP&amp;gt;&amp;lt;/SP&amp;gt;   &amp;lt;/keycloak-saml-adapter&amp;gt;  If your Identity Provider is corectly configured (see the section Configure the Identity Provider), you are done.Then you can try to access a portal page, an app page or a form URL (or just http://&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/bonita[?tenant=&amp;lt;tenantId&amp;gt;]) and make sure that you are redirected to your Identity Provider to log in (unless you are already logged in).Note that if you try to access http://&amp;lt;bundle host&amp;gt;:&amp;lt;port&amp;gt;/bonita/login.jsp, then you won’t be redirected as this page still needs to be accessible in order for the tenant administrator (or another user if you set the property saml.auth.standard.allowed to true) to be able to log in without an account on the Identity Provider.Note: If your Bonita platform is behind a proxy server, You need to make sure the reverse proxy is configured to include the correct Host: header to the requests and the application server is configured to use this header (it is usually the case by default).This is required so that HttpServletRequest.getRequestURL returns the URL used by the user and not the internal URL used by the reverse proxy.For example, if you are running Apache &amp;gt;=2.0.31 as reverse proxy, this configuration is controlled by the property ProxyPreserveHost.If you need more fine tuning or if you cannot update the reverse proxy configuration, you can consult the official documentation for Tomcat or WildFly.Configure the Identity ProviderYour IdP should declare a Service Provider named bonita (or the value of the entityID set in the file keycloack-saml.xml of Bonita bundle if it is different) with the following configuration:  ACS URL or SAML Processing URL: http[s]://&amp;lt;bundle host&amp;gt;:&amp;lt;port&amp;gt;/bonita/saml  request binding and response binding configured with the same values as in keycloack-saml.xml (POST or REDIRECT)  Client signature required configured with the same values as the property signRequest in keycloack-saml.xml  if the IdP responses are signed, make sure the certificate of the IdP has been set in keycloack-saml.xml  the Name ID or a user attribute of the user principal sent back by the IdP should match the username of the user accounts in Bonita and the PrincipalNameMapping policy (and attribute value) in keycloack-saml.xml should reflect thatNote: If the IdP declares a redirect/target URL, it might override the target URL set by the Service Provider request, and you may always end up on the same page after logging in. In that case, try to remove the redirect URL. Bonita supports redirection to the URL initially requested after logging in on the IdP, provided the IdP doesn’t force this URL.Configure logout behaviourIf your Bonita platform is configured to manage authentication over SAML, when users log out of Bonita Portal, they do not log out of the SAML Identity Provider (IdP).Therefore they are not logged out of all applications that are using the IdP.To avoid this, you have two options :Hide the logout button of the portalThis is the most commonly used solution. Users are logged in as long as they don’t close their web browser (unless their session times out).To do this, set the logout.link.hidden option to true in authenticationManager-config.properties located in &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/initial/tenant_template_portal for not initialized platform or &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenant_template_portal and &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenants/[TENANT_ID]/tenant_portal/.Note: When a user logs out from the IdP directly, Bonita Portal’s session will remain active. The user’s session time to live will be reset to the configured session timeout value upon each user interaction with the server.Setup Bonita platform for SAML global logoutGlobal logout allows to log out from the Identity Provider as well as all the registered Service Providers when logging out from Bonita platform. This is sometimes required for example if users are on public computers.As Identity Providers do not necessarily support single logout and have different ways of handling it (there are several SAML Single Logout methods), Bonita only offers SAML global logout as an experimental feature. Meaning that this feature has only been tested with Keycloack server acting as Identity Provider.Therefore, there is no guaranty that the global logout will work with your Identity Provider. However, if your IdP supports the Service Provider initiated flow of SAML’s Web Browser Single Logout profile, single logout is likely to work.To setup Bonita for global logout:  Set the saml.logout.global option to true in authenticationManager-config.properties located in &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/initial/tenant_template_portal for not initialized platform or &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenant_template_portal and &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_portal/.  Update the SingleLogoutService section of keycloak-saml.xml located in &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/initial/tenant_template_portal for not initialized platform or &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenant_template_portal and &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_portal/ to match your Identity Provider configuration.  Update your Identity Provider configuration to setup the Logout Service POST/Redirect Binding URL to /bonita/samlLogoutNote: If the single logout flow supported by your IdP is not the same as the one supported by Bonita platform, the preferred solution to handle it anyway is to intercept the requests to /logoutService and handle the logout programmatically.TroubleshootTo troubleshoot SSO login issues, you need to add a logging handler for the package org.keycloak and increase the log level to ALL for the packages org.bonitasoft, com.bonitasoft, and org.keycloak in order for errors to be displayed in the log files bonita-*.log (by default, they are not).In order to do that in a Tomcat bundle, you need to edit the file `/server/conf/logging.properties.  Add the lines:org.keycloak.handlers = 5bonita.org.apache.juli.AsyncFileHandlerorg.keycloak.level = ALLUpdate the existing lines (to set the level to ALL):org.bonitasoft.level = ALLcom.bonitasoft.level = ALL  In a WildFly bundle, you need to edit the file &amp;lt;BUNDLE_HOME&amp;gt;/server/standalone/configuration/standalone.xml in the domain urn:jboss:domain:logging:3.0 of the subsystem tag.Edit the logger tags which category matches org.bonitasoft and com.bonitasoft packages: change the level name attribute of each logger to ALL and add a new logger with the category org.keyclock (also with a level name set to ALL).Manage passwordsWhen your Bonita platform is configured to manage authentication over SAML, the user password are managed in your SAML Identity Provider (IdP).However, when you create a user in Bonita Portal, specifying a password is mandatory. This password is ignored when logging in with the IdP.LDAP synchronizer and SAMLIf you are using an LDAP service and the LDAP synchronizer to manage your user data, you can continue to do this and manage authentication over SAML.The LDAP synchronizer user must be registered in Bonita (no need for an SAML IdP account). It is recommended though to use the tenant admin account. We recommend that you use LDAP as your master source for information, synchronizing the relevant information with your Bonita platform.Note : By default the LDAP synchronizer sets the password of the accounts created with the same value as the username. So, even if you allow standard authentication (by setting the property saml.auth.standard.allowed in authenticationManager-config.properties), users won’t be able to log in with the portal login page directly without going through the IdP.Single sign-on with SAML using the REST APISAML is a browser-oriented protocol (based on http automatic redirection, forms, etc…), therefore only resources that require a direct access from a web browser are handled by the SAML filter. Access to other resources won’t trigger an SAML authentication process. Here is the subset of pages filtered by the SAML filter:  /saml  /samlLogout  /portal/homepage  /portal/resource/*  /portal/form/*  /mobile/*  /apps/*  /logoutserviceREST API are not part of them, but if an http session already exists thanks to cookies, REST API can be used.The recommended way to authenticate to Bonita Portal to use the REST API is to use the login service..",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/security-and-authentication/single-sign-on-with-saml",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-security-and-authentication-ssl": {
      "title": "SSL",
      "content"     : "SSLConfiguring SSL for Bonita is the same as configuring it for any other application. No changes are necessary to forms or to process definitions, just configuration. This page contains examples of how to set up SSL for Bonita. This enables you to use secure HTTP (HTTPS) to access the portal.OverviewWildFly with keystoreTomcat with APR and OpenSSLTomcat with a keystoreTomcat and SSL OffloadingOverviewIf you are using an HTTP load balancer, configure it to handle SSL connections. Otherwise, configure it in the application server.To configure your system to use SSL:  Create a certificate for your system.  Update your application server configuration to enable SSL.  Update the Bonita web application to add the security definition.The details of each step depend on your application server and SSL implementation. See your application server documentation for details.There are some examples below. In these examples:  We use the default application server SSL port number, 8443, for connections. If you use this port number, it needs to be specified in the URL by users. If you use the default HTTPS port number, 443, users do not need to specify the port in the URL.  You must ensure that the SSL connector is configured with the parameter URIEncoding=&quot;UTF-8&quot;.  When the configuration is complete, the web application is only available through HTTPS. For other configuration, allowing both HTTP and HTTPS access, see your application server or SSL service documentation.  The operating system is Ubuntu.  The starting point is a bundle that has been installed and configured but not started.WildFly with keystoreFor details of how to set up SSL with WildFly 10, see the SSL Configuration on the WildFly 10 web site.Tomcat with APR and OpenSSLThis example show how to configure SSL with APR and OpenSSL for a Bonita using Tomcat.  Go to the TOMCAT_HOME/conf directory and create a directory called ssl to store certificate files.  Create the self-signed certificate and its private key using openssl:  openssl req -new -x509 -days 365 -nodes -out conf/ssl/test.bonitasoft.net.pem -keyout conf/ssl/test.bonitasoft.net.key  Provide the information about your system that openssl requires.  Edit conf/server.xml and add the following definition for the Connector:```xml5. Install the Tomcat native library, which contains APR: `sudo apt-get install libtcnative-1`6. Edit `TOMCAT_HOME/webapps/bonita/WEB-INF/web.xml` and add the following security definition:```xml&amp;lt;web-app&amp;gt;   ...   &amp;lt;security-constraint&amp;gt;  &amp;lt;web-resource-collection&amp;gt; &amp;lt;web-resource-name&amp;gt;Bonita Portal Secure URLs&amp;lt;/web-resource-name&amp;gt; &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;  &amp;lt;/web-resource-collection&amp;gt;  &amp;lt;user-data-constraint&amp;gt; &amp;lt;transport-guarantee&amp;gt;CONFIDENTIAL&amp;lt;/transport-guarantee&amp;gt;  &amp;lt;/user-data-constraint&amp;gt;   &amp;lt;/security-constraint&amp;gt;&amp;lt;/web-app&amp;gt;  Start Tomcat: ./bin/startup.sh  Check that everything is correctly configured, by opening https://127.0.0.1:8443/bonita in your browser. Your browser should warn you about the self-signed certificate used to perform the HTTPS connection. You can safely add this self-signed certificate to the exceptions allowed.Tomcat with a keystoreThis example shows how to configure SSL with a keystore for Bonita on Tomcat.  Run the Java keytool to create a certificate and store it in the keystore. (Note: if you are using Windows, you need to run keytool as administrator.)keytool -genkey -alias tomcat -keyalg RSA -keystore conf/ssl/keystore  Answer the questions that keytool asks. When asked for your first name and last name, provide the hostname of your system.  Edit conf/server.xml and include the following configuration for the Connector:```xml4. Edit `TOMCAT_HOME/webapps/bonita/WEB-INF/web.xml` and add the following security definition:```xml&amp;lt;web-app&amp;gt;   ...   &amp;lt;security-constraint&amp;gt;  &amp;lt;web-resource-collection&amp;gt; &amp;lt;web-resource-name&amp;gt;Bonita Portal Secure URLs&amp;lt;/web-resource-name&amp;gt; &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;  &amp;lt;/web-resource-collection&amp;gt;  &amp;lt;user-data-constraint&amp;gt; &amp;lt;transport-guarantee&amp;gt;CONFIDENTIAL&amp;lt;/transport-guarantee&amp;gt;  &amp;lt;/user-data-constraint&amp;gt;   &amp;lt;/security-constraint&amp;gt;&amp;lt;/web-app&amp;gt;  Start Tomcat: ./bin/startup.sh  Check that everything is correctly configured, by opening https://127.0.0.1:8443/bonita in your browser. Your browser should warn you about the certificate used to perform the HTTPS connection. You can safely add this certificate to the exceptions allowed.Tomcat and SSL OffloadingThis example shows you how to configure SSL if you run Tomcat behind a load balancer that features in SSL Accelerator or Offloading (sometimes called SSL Termination).  Make sure that your load balancer adds X-Forwarded-Proto and X-Forwarded-For headers. If you use HAProxy you can add following lines into your HAProxy configuration :option forwardforreqadd X-Forwarded-Proto: httpsEdit conf/server.xml and include the RemoteIpValve configuration for the host:```xml```Note: Make sure that the regular expression set with `internalProxies` matches your IP addresses.As explained by the [RemoteIpValve documentation](https://tomcat.apache.org/tomcat-8.5-doc/api/org/apache/catalina/valves/RemoteIpValve.html): &quot;This valve replaces the apparent client remote IP address and hostname for the request with the IP address list presented by a proxy or a load balancer via a request headers (e.g. &quot;X-Forwarded-For&quot;). Another feature of this valve is to replace the apparent scheme (http/https) and server port with the scheme presented by a proxy or a load balancer via a request header (e.g. &quot;X-Forwarded-Proto&quot;).&quot;3. If you use the AccessLogValve, edit `conf/server.xml` and set `requestAttributesEnabled=&quot;true&quot;`:```xml&amp;lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;  prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot; requestAttributesEnabled=&quot;true&quot;  pattern=&quot;%a %{X-Forwarded-Proto}i %l %u %t &quot;%r&quot; %s %b&quot; /&amp;gt;```If you omit this, %a will log your load balancer&#39;s IP address and not the client&#39;s IP address.",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/security-and-authentication/ssl",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-security-and-authentication-tenant-admin-credentials": {
      "title": "Tenant administrator credentials",
      "content"     : "Tenant administrator credentialsEach tenant has an administrator, with a tenant-specific username and password. The tenant administrator is also known as the tenant technical user.How it worksImportant notice (only for default tenant)How it worksWhen the platform is created, default values of the administrator username and password, for the default tenant, are defined in the file&amp;lt;WEBSERVER_HOME&amp;gt;/setup/platform_conf/initial/tenant_template_engine/bonita-tenant-community-custom.properties, by the following properties:  userName defines the username (default value install)  userPassword defines the password (default value install)If you modify these values before the first start of the platform, the new values will be the default values for all tenants that will becreated in the future, including the default tenant.When you create a tenant, or when the default tenant is created on the first start of the platform, the tenant administrator is createdwith the default username and password, unless you specify new values.For an already existing tenant, you can change these tenant-specific credentials by updating the userName and userPassword properties in the file&amp;lt;WEBSERVER_HOME&amp;gt;/setup/platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_engine/bonita-tenant-community-custom.propertiesImportant notice (only for default tenant)The engine and the portal can be installed on different machines / Tomcat / WildFly installations. For that reason, the portal has its own configuration filethat define the tenant technical user credentials, in order to communicate with the (potentially remote) engine.For this matter, if you change the tenant admin credentials (default tenant only) on engine side (see above), you must also update the corresponding values in the file:&amp;lt;WEBSERVER_HOME&amp;gt;/setup/platform_conf/initial/platform_portal/platform-tenant-config.properties if you have never started the platform yet, and&amp;lt;WEBSERVER_HOME&amp;gt;/setup/platform_conf/current/platform_portal/platform-tenant-config.properties if the platform has been already started.",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/security-and-authentication/tenant_admin_credentials",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-security-and-authentication-user-authentication-overview": {
      "title": "User authentication overview",
      "content"     : "User authentication overviewThis page describes how user authentication is achieved in Bonita (running with default configuration).If you want to find out how to customize authentication refer to the dedicated documentation pages:  LDAP server / Active Directory  CAS single sign-on (SSO)Bonita Portal authentication scenarioInformation about sessionsHow does the Bonita Portal know if a user is authenticated?Bonita Portal authentication scenarioTo help understand how user authentication is performed, let’s take a typical case where a user accesses the Bonita Portal for the first time. This scenario is the default (no LDAP authentication, nor CAS).  In a web browser, the user types the URL of Bonita Portal(e.g. http://localhost:8080/bonita) that will initiate aHTTP request handled by the application server that delegatesprocessing to the Bonita web application.  When asked for the Bonita root, the URL server will provide a index.html file (you can find the index.htmlin the bonita.war file). This is defined by the welcome-fileproperty in the Bonita web application deployment descriptor (a web.xmlfile located in bonita.war/WEB-INF).  Javascript in index.html will redirect the user to /portal/homepage(e.g. http://localhost:8080/bonita/portal/homepage).  AuthenticationFilterapplied to the HTTP request send to /portal/homepage.The filter will check if the user is already authenticated. To do so, it will look in the HTTP session for an apiSession attribute (see AlreadyLoggedInRule).If an apiSession attribute exists, this means a user is already authenticated.  If the attribute apiSession is not set, the user will be redirected to the login page. Note: Information about the original page the user tried to reach is included in a URL parameter named redirectURL.The login page URL is determined by the AuthenticationManagerimplementation. The implementation to use for the current tenant is configured in a file authenticationManager-config.properties(located in setup/platform_conf/initial/tenant_template_portal or setup/platform_conf/current/tenants/[tenantid]/tenant_portal and updatable using the platform setup tool).The default AuthenticationManageris StandardAuthenticationManagerImpl.Its behavior is to redirect to the login.jsp page embedded in the webapp.Supporting different implementations enables authentication on an external application (useful for SSO deployement for example).  login.jsp page will ask the user for the usernameand password (HTML form). When submitting the form, a POSTrequest is sent to /loginservice. The request includes theusername, password, tenant id (if provided in the URL, only applied tosubscription editions), locale (optional, by priority order: providedin the URL, stored in HTTP cookie) and the redirectURLinformation.  URL /loginservice is handled by LoginServlet.  LoginServletcalls login method of LoginManager  LoginManagersearches for an AuthenticationManagerimplementation based on configuration file for current tenant (authenticationManager-config.properties). The default AuthenticationManageris StandardAuthenticationManagerImpl.  authenticate method is called on the AuthenticationManager.authenticate method of StandardAuthenticationManagerImplimplementation of this method does nothing (the subsequent engine login is enough to authenticate the user)  The authentication is considered successful if no Exception is thrown by the authenticate method.  LoginManagerwill then call engine API LoginAPI.login()  At this point, operations are processed on Bonita Engine side. Engine (see LoginAPIImplclass) verifies that the username and password are not empty. A verification is also done to validate that the tenant is enabled (use provided tenant id or default one if not provided). Then LoginAPIImplwill call LoginService(one implementation available: SecuredLoginService).  SecuredLoginService calls GenericAuthenticationService.The default implementation is: AuthenticationServiceImpl.  The AuthenticationServiceImplverifies that your username and password are valid.  After call of the GenericAuthenticationService,SecuredLoginServiceImplperforms an extra check to verify that the provided username exists in the Bonita database (SecuredLoginServiceImpldoes not trust AuthenticationServiceImpl).Note: A specific behavior applies for the tenant technical user.  SecuredLoginServiceImplreturns an object that represents the session. This is a server side only object (SSession)  Call get back to LoginAPIImplthat converts SSessionto APISession.  APISessionis provided back up to the LoginManagerthat will add session information as HTTP session attribute.  Call get back to LoginServletthat will redirect the user to the requested page.Note: If you configure your Bonita platform to use CAS, the logical flow of authentication is the same as above. The difference is that at step 7 the CASRemoteLoginManager is used instead of the default loginManager and at step 12 the JAASGenericAuthenticationServiceImpl is called instead of the default authentication service, AuthenticationServiceImpl. The loginManager-config.properties file for a tenant controls which login manager and authentication service (cfg-bonita-authentication-impl.xml) are used.Information about sessionsTwo type of session are involved when using Bonita Portal:  The HTTP session  The Bonita Engine sessionThe sessoin timeout values for these two sessions should be set to the same value.The HTTP session.This session is created by the application serverand corresponds to one user.The Bonita Engine sessionSee APISessionclass. This session is created by Bonita Engine on the Bonita Portal request, when the user submits a login page.Session expirationIf the Engine session has expired and the user tries to reach one of the Bonita Portal pages,an exception will be raised. Bonita Portal will catch this exception,invalidate the HTTP session and redirect the user to the login page.Note: The Bonita Engine default session duration is one hour (default valuedefined in SessionServiceImpl). You can configure a different session duration by editing the bonita.tenant.session.duration property in bonita-tenant-community-custom.properties. Specify the duration in milliseconds.If the HTTP session has expired, Bonita Portal will redirect the user to theauthentication page. The Bonita Engine session associated with the HTTPsession that has just expired will remain active until it reaches theinactivity timeout. A cron job takes care of cleaning up inactiveEngine sessions.Note: The HTTP session default duration depends on your application server (for example, 30 minutes for Tomcat).LogoutIn Bonita Portal, if a user clicks on the logout button, both theEngine session and HTTP session will be invalidated.How does the Bonita Portal know if a user is authenticated?The Bonita Portal checks if a valid Bonita Engine session (APISessionobject) is found in theapiSessionattribute inside the HttpRequest. If the engine session is still valid, the user will have access to the required resource.",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/security-and-authentication/user-authentication-overview",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-set-log-and-archive-levels": {
      "title": "Set log and archive levels",
      "content"     : "Set log and archive levelsThere are three ways to record the information about a running process:  Archive: used by a business analyst or process administrator using Bonita Portal, during the production phase, to trace the running of the process instances in their life cycle. Records who did what and when.  Technical log: used by an application developer for troubleshooting, debugging and process tuning.  Queriable log: used by a database administrator extracting information related to business actions that is stored in the internal database to be retrieved by a database request.You can configure the information that is recorded in the archive and the logs.ArchiveTechnical logQueriable logArchiveIn the portal, after a process is executed, it can be viewed using the “Archived” filter.There you can find the information on the process instances (the cases). This information is also available using the Web REST API. By default, all the information is archived but in the Enterprise and Performance editions this is configurable.Recommended configuration (Enterprise and Performance only):  To keep all the user activity, set all the flowNode types to true.  To maximize the overall performance of the system and reduce the disk space used by the database, set all the values to false. Completed tasks will not be visible.Between these two extreme cases, you can customize archiving to your exact need.Technical logThe technical logger service is part of the Bonita Engine. The default implementation is based on the framework Java Util Logging.You can configure the log level. The log level can be set on several categories in the logging.properties file. Some categories are very specific to a particular issue. For example:  If you have an issue related to the database access, it might be interesting to change the level of org.hibernate.level from the default, WARNING, to FINE.  When debugging cache issues, change the level of net.sf.ehcache.level.  For the process execution, the relevant properties are org.bonitasoft.level and (for Subscription editions) com.bonitasoft.level.Queriable logYou can use the queriable logger service to log in a database the creation, deletion or update of bonita objects that are not related to a process (for instance users, groups, roles, profiles). Items that can be archived cannot be included in the queriable log.To configure what information you want to record in the quieriable log, modify the bonita-tenant-sp-custom.properties.This file contains a map of available events. By default all are logged (the value is set to true). If you do want to log a particular event, set the value to false and restart the Bonita Engine.",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/set-log-and-archive-levels",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-two-main-types-of-deployment": {
      "title": "Two main types of deployment",
      "content"     : "Two main types of deploymentNote: It is highly recommended to use the provided Tomcat or WildFly bundles or the artifacts bonita.war and bonita.ear provided in the deploy bundle, in order to carry out these deployments successfully.There are two main types of deployment.Bonita Portal + Bonita Engine on the same application serverBonita Engine on a remote application serverAccessible through HTTPAccessible through RMI (EJB3)Bonita Portal + Bonita Engine on the same application serverThis is the simplest deployment configuration. The engine used is the one embedded in the webapp bonita.war. Using the pre-packaged Tomcat bundle is the easiest way to achieve this kind of deployment, but it is also possible to retrieve the bonita.war webapp provided in the deploy.zip and deploy it on another application server/servlet container.It is fast because the Bonita Portal and the Bonita Engine run on the same JVM and so there is no serialization and network overhead every time the Bonita Portal calls the engine.Advantages  simple (single webapp and application server)  works out of the box if you use the provided Tomcat bundle  you can still access the embedded Bonita Engine API (or the Bonita Portal REST API) through HTTP if you need an external application to access it  improved performanceDrawbacks  may not be adapted to some architecture constraintsBonita Engine on a remote application serverEven if the bonita.war comes with an embedded Bonita Engine, you can choose not to use it.In this deployment you must configure the JVM containing the client Bonita Portal to use the remote connection to the engine. To do so see configuring the connection to a remote engine.Don’t forget to set in this JVM the following properties:  org.bonitasoft.platform.username must be set with the username of the platform admin  org.bonitasoft.platform.password must be set with the password of the platform adminAccessible through HTTPWith this deployment, the Bonita Engine is accessed by the portal (and possibly other applications) through HTTP. The Bonita Portal is deployed on one application server and the engine on another one.But you can still use the pre packaged Tomcat bundles or the bonita.war webapp provided in the deploy.zip, in both servers. On one of them, only the Bonita Portal part will be used and on the other one, only the engine server. Access to the portal can be de-activated by server or webapp configuration if necessary.Advantages  may be adapted to some architecture and network constraintsDrawbacks  more complex than the first deployment option (two application servers instead of one)  impact on performance (serialization + network overhead)Accessible through RMI (EJB3)With this third type of deployment, the engine is accessed by the Bonita Portal (and possibly other applications) through the EJB.The Portal is deployed on one application server and the engine on another one.However, you can still use the pre packaged Tomcat bundle for the Bonita Portal and the pre-packaged WildFly Bundle for the Bonita Engine.In this case, you will need to add the WildFly client libraries to the classpath of the Bonita Portal webapp.You can also use the bonita.war webapp provided in the deploy zip on the portal application server and use the bonita.ear application on the engine application server. On one of the application servers, only the portal part will be used and on the other one, only the engine server. Access to the Bonita Portal can be deactivated by server or app configuration, if necessary.Advantages  may fit some architecture and network constraintsDrawbacks  more complex than the first deployment option (two application servers instead of one)  impact on performance (serialization + network overhead) but it should be faster than the second option though (no HTTP protocol overhead)",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/two-main-types-of-deployment",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation"
    }
    ,
  

    "bonita-7-7-installation-advanced-bonita-platform-installation-use-gzip-compression": {
      "title": "Use gzip compression",
      "content"     : "Use gzip compressionUsing gzip compression in your application server can improve performance by reducing network load for some resources. This page describes how to activate gzip compression for a Bonita Platform with Tomcat and with WildFly.WildFlyTomcatCheck changesWildFlyTo activate compression for WildFly:  For Linux systems: edit bin/standalone.conf and uncomment this line:JAVA_OPTS=&quot;$JAVA_OPTS -Dorg.apache.coyote.http11.Http11Protocol.COMPRESSION=on&quot; For Windows systems: edit bin/standalone.conf.bat and uncomment this line:set &quot;JAVA_OPTS=%JAVA_OPTS% -Dorg.apache.coyote.http11.Http11Protocol.COMPRESSION=on&quot;  TomcatTo activate gzip compression for http requests, you need to modify the server.xml configuration.Open server.xml and find the Connector configuration that you use. Edit the section to add following parameters:compression=&quot;on&quot;compressionMinSize=&quot;X&quot;noCompressionUserAgents=&quot;Y&quot;compressableMimeType=&quot;Z&quot;| Property | Description | Example ||:-|:-|:-|| compression | Activates or deactivates gzip compression. | on || compressionMinSize | The minimum size of resources to be compressed. It is not useful to compress resources that are already small. | 2048 || noCompressionUserAgents | The User Agents for which compressions is not to be used. Some older browseers do not support compression. | gozilla, traviata || compressableMimeType | The MIME types of the resources to be compressed. We recommend that all text files be compressed. | text/html,text/xml |If you use the Tomcat bundle, the file to edit is conf/server.xml.If you use a different package, use the corresponding path; for example on Ubuntu the file is located in /etc/tomcat8/server.xml.Connector configuration:&amp;lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;   connectionTimeout=&quot;20000&quot;   redirectPort=&quot;8443&quot;   maxPostSize=&quot;-1&quot;   URIEncoding=&quot;UTF-8&quot;   compression=&quot;on&quot;   compressionMinSize=&quot;2048&quot;   noCompressionUserAgents=&quot;gozilla, traviata&quot;   compressableMimeType=&quot;text/html,text/xml,text/plain,text/javascript,text/css&quot;&amp;gt;&amp;lt;/Connector&amp;gt;Check changesAfter you modify the file, restart your application server and test with the following curl command:curl -I -H &#39;Accept-Encoding: gzip&#39; http://ip_address:port/bonita/login.jspCheck that the header returned contains the line Content-Encoding: gzip. For example, on a WildFly system the output will be similar to this:HTTP/1.1 200 OKServer: Apache-Coyote/1.1Expires: 0Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidatePragma: no-cacheX-XSS-Protection: 1; mode=blockX-Frame-Options: SAMEORIGINX-Content-Type-Options: nosniffX-Powered-By: JSP/2.2Content-Type: text/html;charset=UTF-8Transfer-Encoding: chunkedContent-Encoding: gzipVary: Accept-Encoding",
      "url": " /bonita/7.7/installation/advanced-bonita-platform-installation/use-gzip-compression",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation"
    }
    ,
  

    "bonita-7-7-installation-back-up-bonita-bpm-platform": {
      "title": "Back up Bonita Platform",
      "content"     : "Back up Bonita PlatformAny basic one node (non-clustered) installation can be backed up to be restored later. In a Bonita cluster, you need to back up the nodes, the shared database.A cold backup (total shutdown) is recommended, to avoid losing data being processed during the backup process. Note: make sure your database server is backed up. (Please refer to the specific documentation for your database concerning the backup procedure).  Stop the application server  Save the Application Server configuration files modified during Bonita setup.  Save the deployed web application (i.e. bonita.war) (for Tomcat [TOMCAT_HOME]/webapps/bonita.war), or you can redeploy all applications at startup. If you decide not to save the webapps directory, make sure that you have a copy of your Bonita application available.  Back up your database (Please refer to the specific documentation for your database concerning the backup procedure).  Start the application server.",
      "url": " /bonita/7.7/installation/back-up-bonita-bpm-platform",
      "author": "",
      "categories": "Installation"
    }
    ,
  

    "bonita-7-7-installation-basic-bonita-platform-installation-bonitabpm-platform-setup": {
      "title": "Platform configuration",
      "content"     : "Platform configurationIn this section you will learn what the Platform setup tool is and how to use it to configure the Bonita Platform, manage your licenses (for Subscription users), and more…Note: First thing to know is that for all basic installation and start scenarios, you don’t need to use the setup tool. We made it easy for you by creating start-bonita.bat(for Windows) or start-bonita.sh (for Unix), a script that initializes, configures and starts the bundle, using the Platform setup tool.Platform setup tool overview and useStructureFunctionsPre-requisitesAdvanced use of the *Platform setup tool*Database configuration using system propertiesAdvanced database configuration using file internal.propertiesTroubleshootingPlatform setup tool overview and useThe Platform setup tool handles:  The creation of the database tables  The configuration of the Tomcat or WildFly bundle with this database without the need for a fully manual configuration  The management of Bonita Platform configuration (stored in the database)  The management of licenses (also stored in the database)It is located in both Tomcat and WildFly bundles, and also in the deploy bundle. In Tomcat and WildFly bundles, you can find the tool in the setup folder.StructureIt is composed of the following items:  platform_conf/  initial/: contains the default configuration of Bonita Platform, that can be customized and will be pushed when the database is created.  current/: contains configuration files after a pull from the database is made.  licenses/: (Subscriptions only) folder to put the license file to allow Bonita Platform to start without error.  sql/: SQL scripts used to create Bonita database tablesdatabase.properties: used as a simplified entry form to get property values to connect to the database. Those values will be used by the file internal.properties.  internal.properties: used internally by the setup tool to properly configure and initialize the bundle. It is made of both data entered in database.properties as well as other data like database driver class name, connection URL, etc. This file should not be modified manually in most cases, unless for specific use-cases like adding parameters in the connection URL or using a specific database driver.  setup.sh: Unix / Mac script to run.  setup.bat: Windows script to run.FunctionsThe script setup comes with 4 commands:  init, to initialize the databaseIt creates the database tables and pushes the initial configuration in the database.This initial configuration is taken from the platform_conf/initial folder.It is run by the global script start_bonita, but you can also insert it in your own scripts.Eg. setup.sh initEg. setup.sh init -Ddb.vendor=postgres (see Advanced use for information on using -D properties)  When db.vendor and bdm.db.vendor properties are both set to h2 - which is the default configuration - the init command asks you to confirm this choice before continuing. The following message is displayed:  [WARN] Default H2 configuration detected. This is not recommended for production. If this is not the required configuration, change file &#39;database.properties&#39; and run again.  Are you sure you want to continue? (y/n):If you want to bypass this confirmation prompt you can add the h2.noconfirm property to setup or start-bonita scripts.Eg. setup.sh init -Dh2.noconfirm  Eg. start-bonita.sh -Dh2.noconfirm  configure, to configure the server of a Bonita Tomcat / WildFly bundle to use the appropriate database: If run from inside a Bonita bundle, it configures the Application Server environment, so you don’t need to configure all Tomcat / WildFly basic configuration files manually.It is run by the global script start-bonita, but you can also insert it in your own scripts.Eg. setup.sh configure  You do not need to configure Tomcat / WildFly files directly anymore. The command setup configure does it for you.If you decide to do it anyway, the tool will overwrite your custom values (after storing a restore backup into folder tomcat-backups or wildfly-backups).If you need to finely tune the configuration, modify the following template files, as they serve as a basis for configuration:For Tomcat:  tomcat-templates/bitronix-resources.properties  tomcat-templates/bonita.xml  tomcat-templates/setenv.sh  tomcat-templates/setenv.batFor WildFly:  wildfly-templates/standalone.xml  pull, to retrieve the current configurationIt gets the current configuration of Bonita Platform from the database and saves it locally in the platform_conf/current folder.Note: You must pull the configuration from the database every time you need to update your license file or edit the configuration of Bonita Platform. Since some information is inserted by the platform itself in the database, this prevents database inconsistency.Eg. setup.sh pullpush, to update the configuration of Bonita Platform, and update your licenseIt gets the platform configuration you have edited locally in the folder platform_conf/current folder and pushes it to the database.To make the platform take your changes into account, you must (re-)start Bonita Platform.Eg. setup.sh push  Note that the Platform Setup tool does not need Bonita Server to be running for the configuration to be updated. However, the server needs to be restarted for the changes to be taken into account.Type setup help or setup help &amp;lt;command&amp;gt; to get detailed help on the tool syntax or on a specific command.Eg. setup.sh help configureKeep in mind that the folder platform_conf/initial is not used anymore once the platform has been initialized for the first time. To update your configuration, only the platform_conf/current folder is taken into account.Pre-requisitesBefore running it, make sure the setup tool is configured to point to the database of the Bonita Platform.Note: If you have already run start-bonita script inside a Tomcat bundle or a WildFly bundle, those steps are already done.Here is how to do so:  Create the database  Customize it so it works with Bonita  Modify the database.properties file: Set the right db vendor and change connection url, user credentials, database name and so on.  If you are using an Oracle or Microsoft SQL Server database, add the related JDBC driver in the lib folder.Advanced use of the Platform setup toolDatabase configuration using system propertiesInstead of modifying the database.properties file, you can set the required database values through the command line (with Java-like system properties).If these latter are defined, they have prevalence on the values defined in the database.properties file.e.g. for Unix command line:./setup.sh configure -Ddb.vendor=postgres -Ddb.server.name=localhost -Ddb.server.port=5432 -Ddb.database.name=bonita -Ddb.user=bonita -Ddb.password=bpm -Dbdm.db.vendor=postgres -Dbdm.db.server.name=localhost -Dbdm.db.server.port=5432 -Dbdm.db.database.name=business_data -Dbdm.db.user=bonita -Dbdm.db.password=bpme.g. for Windows command line:setup.bat configure &quot;-Ddb.vendor=postgres&quot; &quot;-Ddb.server.name=localhost&quot; &quot;-Ddb.server.port=5432&quot; &quot;-Ddb.database.name=bonita&quot; &quot;-Ddb.user=bonita&quot; &quot;-Ddb.password=bpm&quot;For Windows users: Due to Windows Batch limitations, only 8 parameters are supported.If you need to pass more than 8 parameters, modify file database.properties instead.Advanced database configuration using file internal.propertiesThe file internal.properties is used internally by the Platform setup tool to properly configure and initialize the bundle.It is made of both data entered in file database.properties as well as other data like database driver class name, connection URL, etc.This file should not be modified manually in most cases, unless for specific use-cases like adding parameters in the connection URL or using a specific database driver.This file contains the Database configuration information that are not inside file database.properties (database driver class name, connection URL, etc).Those information are used internally by the Platform setup tool to configure properly the bundle (See configure command) and the database initialization procedure (See init command).The Platform setup tool uses the values provided in file database.properties as replacement strings to the properties defined in file internal.properties. Those new processed values are then used by the tool.Usage:You are allowed to modify these values if, in the example of Oracle RAC, you need to add parameters in the connection URL, or for mysql you need to add characterEncoding or other parameters:   oracle.url=jdbc:oracle:thin:@(description=(address_list=(address=(protocol=tcp)(port=${db.server.port})(host=${db.server.name})))(connect_data=(INSTANCE_NAME=${db.database.name}))(source_route=yes))   oracle.bdm.url=jdbc:oracle:thin:@(description=(address_list=(address=(protocol=tcp)(port=${bdm.db.server.port})(host=${bdm.db.server.name})))(connect_data=(INSTANCE_NAME=${bdm.db.database.name}))(source_route=yes))   oracle.bdm.url=jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=myrac1.us.oracle.com)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=myrac2.us.oracle.com)(PORT=1521))(LOAD_BALANCE=ON)(FAILOVER=OFF)(CONNECT_DATA=(SERVICE_NAME=myrc.us.oracle.com)(FAILOVER_MODE=(TYPE=SELECT)(METHOD=BASIC))))   mysql.url=jdbc:mysql://${db.server.name}:${db.server.port}/${db.database.name}?dontTrackOpenResources=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;profileSQL=trueOr also if you need to use a specific database Driver java class name:   sqlserver.nonXaDriver=net.sourceforge.jtds.jdbc.DriverBut in most cases, you don’t need to modify this file.TroubleshootingIssue: When I run Platform setup tool, I get the exception Cannot determine database vendor (valid values are h2, postgres, sqlserver, oracle, mysql).Potential cause: property db.vendor is not found when reading file database.propertiesSolution: Edit file database.properties and ensure there is a valid db.vendor value. Also ensure the line is not commented (no # at the beginning of the line)Issue: My database name / password / … contains a backslash () character. It seems to be ignored in file database.propertiesCause: Backslash () characters are special characters in a .properties fileSolution: Replace your backslash () characters by double-backslashes () everywhere in file database.properties (and also in file internal.properties if you have modified it)",
      "url": " /bonita/7.7/installation/basic-bonita-platform-installation/BonitaBPM_platform_setup",
      "author": "",
      "categories": "Installation, Basic Bonita Platform installation"
    }
    ,
  

    "bonita-7-7-installation-basic-bonita-platform-installation-database-configuration": {
      "title": "Database creation and customization to work with Bonita",
      "content"     : "Database creation and settings to work with BonitaDatabase usageDefault H2 databaseSteps to switch to another RDBMSProprietary Jdbc driversCreate the database(s)Customize RDBMS to make it work with BonitaBundle database configurationDatabase usageBonita uses an RDBMS (Relational DataBase Management System) for the following purposes:  One database schema is required by Bonita Engine to store information about deployed process definitions, process configurations, history of process execution, users, as well as Bonita Platform configuration information.  We recommend that you configure a different database schema if your project uses business data.Bonita supports MySQL, PostgreSQL, SQL Server, and Oracle RDBMSs.You can find the list of RDBMSs versions supported on the supported database list page.Default H2 databaseBonita Studio, the WildFly bundle, the Tomcat bundle, and the deploy bundle come by default with an embedded H2 RDBMS. The database is automatically created at first startup, and can be used for all purposes described earlier.However, H2 is only suitable for testing purposes. When building a production environment, you must switch to another RDBMS.Steps to switch to another RDBMSPlease note this procedure cannot be performed using the Bonita Studio. The Bonita Studio can run only on the H2 Database. To use Bonita on another RDBMS, please use a bundle or set up a standalone server.Here are the steps to follow. They are the same for the engine database and the business data database:  Create the database  Customize RDBMS to make it work with Bonita  Add the JDBC driver to the bundle if the database is proprietary  Configure the bundle with database informationSteps 1 and 2 are detailed further down this page, steps 3 and 4 are part of the configuration part of Tomcat bundle and WildFly bundle pages.All RDBMSs require specific customization, which must be done before you complete your installation.If you do not complete the specific configuration for your RDBMS, your installation may fail.There is a known issue between Bitronix (the Transaction Manager shipped by Bonitasoft for the Tomcat bundle &amp;amp; inside Deploy bundle for Tomcat) and Microsoft SQL Server driver (refer to: MSDN note, Bitronix note).Therefore, using Bitronix as a Transaction Manager with SQL Server is not recommended.We recommend that you use the WildFly bundle provided by Bonitasoft.Proprietary Jdbc driversBonita provides out of the box the Jdbc drivers for H2, PostgreSQL and MySQL. For other RDBMS, you have to retrieve the related Jdbc drivers.SQL Server  Download the zip package of Microsoft SQL Server JDBC Driver 6.0 and unzip it.  Get the sqljdbc42.jar file from %JDBC_DRIVER_INSTALL_ROOT%sqljdbc_6.0enujre8Oracle Database  For Oracle 11.2.0.x, download ojdbc6.jar  For Oracle 12.1.0.x, download ojdbc7.jarCreate the database(s)The first step in configuring Bonita with your RDBMS is to create the new databases (i.e. schemas): one for engine data, and another one, optionally, if you use business data.To do so, you need a RDBMS user account that has sufficient privileges (i.e. privileges to create new schema).Also, note that the owner of the new schemas must own the following privileges:  CREATE TABLE  CREATE INDEX  SELECT, INSERT, UPDATE, DELETE on created TABLECREATE TABLE and CREATE INDEX privileges are not required after first start in normal use.If the same SQL user is used with the migration tool, then this user needs such grants.To create the database(s), we recommend that you refer to your RDBMS documentation:  PostgreSQL  Oracle database  SQL Server  MySQLYour database(s) must be configured to use the UTF-8 character set. Also, you are recommended to configure the database(s) to be case-insensitive so that searches in Bonita Portal are case-insensitive.Customize RDBMS to make it work with BonitaPostgreSQLConfigure the database to use UTF-8.Edit postgresql.conf and set a non-zero value for max_prepared_transactions. The default value, 0, disables prepared transactions, which is not compatible with Bonita Engine.The value should be at least as large as the value set for max_connections (default is typically 100).See the PostgreSQL documentation for details.Oracle DatabaseMake sure your database is configured to use the AL32UTF8 character set.If your database already exists, see the Oracle documentation for details of how to migrate the character set.Bonita Engine uses datasources that handle global transactions that span resources (XADataSource), so the Oracle user used by Bonita Engine, requires some specific privileges, and there are also specific settings for XA activation.Important information for a successful connectionThe procedure below is used to create the settings to enable Bonita Engine to connect to the Oracle database.It is assumed in the procedure that:  Oracle product is already installed and running  An ‘Oracle’ OS user is already created  A database already exists  The environment is already set:  ORACLE_HOME=/u01/app/oracle/product/11.2.0/dbhome_1  ORACLE_SID=...Connect to the database as the System Administrator.oracle@ubuntu:~$ sqlplus / as sysdbaCheck that the following components exist and are valid:SQL query &amp;gt;select comp_name, version, status from dba_registry;Comp_name  Version  Status  Oracle Database Catalog Views  11.2.0.1.0  VALID  Oracle Database Packages and Types  11.2.0.1.0  VALID  JServer JAVA Virtual Machine  11.2.0.1.0  VALID  Oracle XDK  11.2.0.1.0  VALID  Oracle Database Java Packages  11.2.0.1.0  VALID  Add XA elements:SQL query &amp;gt;@/u01/app/oracle/product/11.2.0/dbhome_1/javavm/install/initxa.sqlThis only needs to be done once, after the installation of Oracle.Create the database user to be used by the Bonita Engine and grant the required rights:SQL query &amp;gt;@/u01/app/oracle/product/11.2.0/dbhome_1/rdbms/admin/xaview.sqlThe following queries must be done for each new user: i.e. one user = one database schema.SQL query &amp;gt;CREATE USER bonita IDENTIFIED BY bonita;GRANT connect, resource TO bonita IDENTIFIED BY bonita;GRANT select ON sys.dba_pending_transactions TO bonita;GRANT select ON sys.pending_trans$ TO bonita;GRANT select ON sys.dba_2pc_pending TO bonita;GRANT execute ON sys.dbms_system TO bonita;GRANT select ON sys.v$xatrans$ TO bonita;GRANT execute ON sys.dbms_xa TO bonita;GRANT FORCE ANY TRANSACTION TO bonita;  SQL ServerReminder: There is a known issue between Bitronix (the Transaction Manager shipped by Bonitasoft in the Tomcat bundle and in the Tomcat directories of the Deploy bundle) and the Microsoft SQL Server driver(refer to: MSDN note, Bitronix note).Therefore, using Bitronix as a Transaction Manager with SQL Server is not recommended. Our recommendation is to use the WildFly bundle provided by Bonitasoft.XA TransactionsTo support XA transactions, SQL Server requires a specific configuration.You can refer to MSDN for more information.Here is the list of steps to perform (as an example, the database name BONITA is used):  Download the zip package of Microsoft SQL Server JDBC Driver 6.0 and unzip it.  Copy the sqljdbc_xa.dll from %JDBC_DRIVER_INSTALL_ROOT%sqljdbc_6.0enuxax64 (x64 for 64 bit version of Windows, x86 for 32 bit version of Windows) to %SQLSERVER_INSTALL_ROOT%MSSQL13.&amp;lt;instance_name&amp;gt;MSSQLBinn.  Copy/paste the content of install.sql file (located in %JDBC_DRIVER_INSTALL_ROOT%sqljdbc6.0enuxa) to SQL Server Management Studio’s Query Editor.  Execute the query in the Query Editor.  To confirm successful execution of the script, open the “Object Explorer” and go to: Master &amp;gt; Programmability &amp;gt; Extended Stored Procedures. You should have 12 new procedures, each with a name starting with dbo.xp.sqljdbc_xa_.  Assign the new role ‘SqlJDBCXAUser’ to the user who owns the Bonita Engine database (bonitadev in our example). To do so, execute the following commands in SQL editor:USE master;GOCREATE LOGIN bonitadev WITH PASSWORD = &#39;secret_password&#39;;GOCREATE USER bonitadev FOR LOGIN bonitadev;GOEXEC sp_addrolemember [SqlJDBCXAUser], &#39;bonitadev&#39;;GOIn the Windows “Start” menu, select Administrative Tools-&amp;gt; Services.  In the “Services” window, make sure that the Distributed Transaction Coordinator service is set to start automatically. If it’s not yet started, start it.  Make sure that the other services it depends on, namely “Remote Procedure Call” and “Security Accounts Manager”, are also set to start automatically.  Run the dcomcnfg command, or go to the “Start” menu, then Administrative Tools &amp;gt; Component Services.  In the left navigation pane, navigate to Component Services &amp;gt; Computers &amp;gt; My Computer &amp;gt; Distributed Transaction Coordinator.  Select and right-click on Local DTC and then Properties.  Click on Security tab. Ensure that the checkbox for Enable XA Transactions is checked.  Click Apply, then click OK  Then stop and restart SQLServer.  Create the BONITA database: CREATE DATABASE BONITA GO.  Set bonitadev as owner of BONITA database (use, for example, ‘Microsoft SQL Management Studio’)Recommended configuration for lock managementRun the script below to avoid deadlocks:ALTER DATABASE BONITA SET SINGLE_USER WITH ROLLBACK IMMEDIATEALTER DATABASE BONITA SET ALLOW_SNAPSHOT_ISOLATION ONALTER DATABASE BONITA SET READ_COMMITTED_SNAPSHOT ONALTER DATABASE BONITA SET MULTI_USERSee MSDN.Recommended configuration for in-doubt xact resolutionRun the script below to avoid that the SQL Server changes the status of databases to SUSPECT during database server startup when in-doubt XA transactions are found.The value 2 in the block below means presume abort.To minimize the possibility of extended down time, an administrator might choose to configure this option to presume abort, as shown in the following examplesp_configure &#39;show advanced options&#39;, 1GORECONFIGUREGOsp_configure &#39;in-doubt xact resolution&#39;, 2 GORECONFIGUREGOsp_configure &#39;show advanced options&#39;, 0GORECONFIGUREGOSee in-doubt xact resolution Server Configuration Option.MySQLMaximum packet sizeMySQL defines a maximum packet size on the server side. The default value for this setting is appropriate for most standard use cases.However, you need to increase the packet size if you see the following error:Error: 1153 SQLSTATE: 08S01 (ER_NET_PACKET_TOO_LARGE) Message: Got a packet bigger than &#39;max_allowed_packet&#39; bytesYou need to update the file my.ini (for Windows) or my.cnf (for Linux) to avoid the ER_NET_PACKET_TOO_LARGE problem.Look for max_allowed_packet setting and increase the value.For more information, see the MySQL website.Surrogate characters not supportedMySQL does not support surrogate characters.If you want to use surrogate characters in your processes, you need to use another type of database.Bundle database configurationNow that your databases are created and customized to work with Bonita, you are ready to configure Bonita bundles, either the Tomcat bundle or the WildFly bundle.",
      "url": " /bonita/7.7/installation/basic-bonita-platform-installation/database-configuration",
      "author": "",
      "categories": "Installation, Basic Bonita Platform installation"
    }
    ,
  

    "bonita-7-7-installation-basic-bonita-platform-installation-deploy-bundle": {
      "title": "Deploy bundle",
      "content"     : "Deploy bundleWhat is the purpose of the Bonita Deploy bundle?Deploy bundle contentInstallationTomcat installationInstall Bonita Platform in TomcatConfigure data sourcesConfigure RDBMS vendorAdd Jdbc driverWildfly installationInstall Bonita Platform in WildflyConfigure data sourcesConfigure RDBMS vendorAdd Jdbc driverLicense installationDatabase initializationNext stepsWhat is the purpose of the Bonita Deploy bundle?  The Bonita Deploy bundle is used if you have already installed a Java EE Application Server.  The Bonita Deploy bundle is a way of setting up a Bonita Platform. You’ll be able to get a setup quite similar to WildFly or Tomcat bundle.  It’s also used to package other tools such as the LDAP synchronizer.This installation procedure only specifically targets the Java EE application Servers that have been installed under a single root folder (typically, from a .zip file).Thus, for installations using native distribution packages (that more often than not split the binaries and the configuration files into separate folder hierarchies),it would be up to you to adapt the documented steps to your very own folder layout.Deploy bundle content  Tomcat-version: a folder/file structure to be merged with an existing setup of Apache Tomcat, in order to install Bonita Portal and Bonita Engine.  Wildfly-version: a folder/file structure to be merged with an existing setup of WildFly in order to install Bonita Portal and Bonita Engine.  setup: a command-line tool that creates the Bonita Platform before it can be run. It creates the Bonita Platform internal database, and stores the runtime configuration.It is useful to update the configuration, locally or from a remote computer.  Request_key_utils-key_utils.version: include script files to generate license request keys.  BonitaSubscription-_LDAPSync.version_-LDAP-Synchronizer : LDAP synchronizer to synchronize your organization in Bonita with your LDAP  cas-cas.version-module: Module files and description to enable CAS dependency to bonita EAR.  License: license files that apply to Bonita components.  README.TXT: See this file for more details about the deploy.zip contents and structure.Installation  Download the deploy.zip file from the Bonitasoft download page for the Community edition or from the Customer Portal for Subscription editions.  Unzip the deploy.zip into a temporary folder (DEPLOY_ZIP_HOME).  Follow the Tomcat bundle steps or WildFly bundle stepsTomcat installationInstall Bonita Platform in TomcatCopy all files and directories from DEPLOY_ZIP_HOME/Tomcat-8.5.31/server to your Tomcat root directory (TOMCAT_HOME).Some configuration files from the deploy zip will overwrite some default tomcat configuration files. Proceedwith care in a tomcat where other applications are already installed.There is an issue on tomcat 8.0.32 preventing the portal Look &amp;amp; feel to be compiled. If you deploy bonita on an existing tomcat installation, make sure it is a different version of tomcat (preferably 8.5.x with x&amp;gt;=23).Configure data sourcesConfiguration of data source for Tomcat is split in two parts: because Tomcat doesn’t support JTA natively,one data source will be configured in the Bitronix configuration file and the other data source will be configuredin the standard Tomcat context configuration file.Non-transactional data source  Open the file TOMCAT_HOME/conf/Catalina/localhost/bonita.xml  For Bonita Standard data source, remove or comment out the lines regarding the h2 database.  Uncomment the lines matching your RDBMS.  Update following attributes value:  username: your RDBMS user name.  password: your RDBMS password.  url: the URL, including the RDBMS server address, RDBMS server port and database (schema) name.Repeat operations 2. to 4. for Business Data data sourceJTA data source (managed by Bitronix)  Open the file TOMCAT_HOME/conf/bitronix-resources.properties  For Bonita Standard data source, remove or comment out the lines regarding the h2 database.  Uncomment the lines matching your RDBMS and edit values for each settings (resource.ds1.*) according to your database installation.  Repeat operations 2. and 3. for Business Data data source (resources.ds2.*)Configure RDBMS vendor  Open the file TOMCAT_HOME/bin/setenv.(bat  sh)  Change the value of sysprop.bonita.db.vendor according to your RDBMS vendor  Change the value of sysprop.bonita.bdm.db.vendor according to your RDBMS vendorAdd Jdbc driverYou need to add your jdbc driver in TOMCAT_HOME/lib. MySQL and PostgreSQL drivers can be found in deploy bundle under DEPLOY_ZIP_HOME/setup/lib directory. For other RDBMS, use the jdbc driver provided by your RDBMS vendorWildfly installationInstall Bonita Platform in WildflyCopy all files and directories from DEPLOY_ZIP_HOME/wildfly-10.1.0.Final/server to your Wildfly root directory (WILDFLY_HOME).Configure data sources  Open the file WILDFLY_HOME/standalone/configuration/standalone.xml  For Bonita Standard data source, remove or comment out the default definition for h2.  Uncomment the settings matching your RDBMS vendor.  Modify the values of the following settings to your configuration: server address, server port, database name, user name and password.  Repeat operations 2. to 4. for Business Data data sourceConfigure RDBMS vendor  Open WILDFLY_HOME/standalone/configuration/standalone.xml and look for system-properties tag  Set the value for sysprop.bonita.db.vendor (Bonita Platform database vendor)  Set the value for sysprop.bonita.bdm.db.vendor (Business Data database vendor)Add Jdbc driver  Create a folder structure under WILDFLY_HOME/modules folder. Refer to the table below to identify the folders to create. The last folder is named main for all JDBC drivers.Database vendor  Module folders  Module description file  PostgreSQL  modules/org/postgresql/main  module.xml           Oracle  modules/com/oracle/main  module.xml           SQL Server  modules/com/sqlserver/main  module.xml           MySQL  modules/com/mysql/main  module.xml         Put the driver jar file in the relevant main folder.  In the same folder as the driver, add the module description file, module.xml. This file describes the dependencies the module has and the content it exports. It must describe the driver jar and the JVM packages that Wildfly does not provide automatically. The exact details of what must be included depend on the driver jar. Caution: you might need to edit the module.xml in order to match exactly the JDBC driver jar file name.License installationIf you are installing a Subscription edition, you need to request a license.When you receive your license, copy the file to the DEPLOY_ZIP_HOME/setup/platform_conf/licenses folder of your application server.Database initializationWe assume here that the database has already been created and configured for Bonita.Once created and configured you need to initialize it using the setup tool provided in the deploy bundle archive.This will create database schema and initial values.  In DEPLOY_ZIP_HOME/setup folder, edit the file database.properties with properties matching your rdbms. Beware of backslash characters.  In DEPLOY_ZIP_HOME/setup/lib add your jdbc driver if needed (only for Microsoft SQL Server or Oracle, see proprietary jdbc drivers)  In DEPLOY_ZIP_HOME/setup folder, run setup.(sh|bat) initNext stepsYou’re done with Bonita installation. You can now start your application server as usual.When you have finished installing the deploy bundle, complete the setup of your system by validating the installation, setting passwords, and creating the Administrator user.",
      "url": " /bonita/7.7/installation/basic-bonita-platform-installation/deploy-bundle",
      "author": "",
      "categories": "Installation, Basic Bonita Platform installation"
    }
    ,
  

    "bonita-7-7-installation-basic-bonita-platform-installation-first-steps-after-setup": {
      "title": "First steps after setup",
      "content"     : "First steps after setupThis page explains the post-installation setup tasks that you must carry out.Check the installationSecurity Best PracticesWhen installing BonitaWhen developping using BonitaCreate a Bonita Portal administratorCheck the installationTo verify that the installation was successful and the database is correctly configured, connect to Bonita Portal.In the URL field of your web browser, enter the local host address, e.g. http://localhost:8080/bonita.Note: If the Bonita Portal login page is not displayed, empty your browser cache and cookies and then reload the page.At this stage no organization information is loaded: only the technical user account exists.Security Best PracticesThere are a number of ways you can improve the security of your platform.When installing BonitaChange default password for Technical User and System AdministratorSystem Administrator and Technical User accounts allow corresponding user(s) to completely configure Bonita. As for demo and ease of installation purposes, Bonita is delivered with default user and password for these two accounts. Such credentials are accessible in the documentation over the Internet. It’s highly recommended to change such passwords and replace them with strong ones to better protect administration consoles. Use HTTPS for all communicationsHTTPS helps with the protection of web application data from unauthorized disclosure and modification when it is transmitted between clients (web browsers) and the web application server. Session cookies, authentication credentials and any sensitive data  are considered as application data. Bonita already supports HTTPS functionality. To better protect your deployed application, it is highly recommend to enable HTTPS for all communication towards the web server. Please refer to OWASP TLS Certificates and Bonita’s SSL Documentation to securely implement this functionality for your application.Enforce strong secure password policies to Bonita usersA key security concern when using passwords for authentication is password strength. A “strong” password policy makes it difficult or even improbable for one to guess the password through either manual or automated means. So if you are using Bonita’s default authentication mechanism, it is highly recommended that you apply the password policies and enforce the users to choose strong and secure passwords. Such functionality is already provided by Bonita (See Strong Password Policies). It is recommended to activate this option in the deployed application to better protect your application and users.Choose a strong password for your databaseThe database is at the heart of your application. It is where all entreprise data (sensitive or non-sensitive) is stored. As a result, the database username and password are of great value to the business and they need to be protected. It is highly recommended to choose strong, random and long passwords, since they make it difficult or even improbable for one to guess the password through either manual or automated means. Choose a strong password for your connectorsIn Bonita, connectors enable connections to your local information system or online services. The authentication credentials used for these connections are of great value to the business and as a result, they need to be protected. It is highly recommended to choose strong, random and long passwords, as explained above, to makes it difficult or even improbable for one to guess the password. Deactivate or limit the usage of Bonita Engine APIIf Bonita Engine API is of no use for your application, it is highly recommended to deactivate it in the configuration files in your deployment environment. Otherwise, its usage must be limited to administrators using a local connection or authorized IP addresses.Protect your web server configuration fileThe web server configuration (Tomcat, WildFly, etc) must be protected. This implies limiting access to the file so that it could be read only by the user that web server process runs as and root (or the administrator on Windows). It should be also noted that the file must be saved outside of web root directory (as an example, here are some security tips for Apache Tomcat: Ref1, Ref2)When developping using BonitaOpt for a strong authentication mechanismAuthentication is the process of verification that an individual, entity or website is who it claims to be. Today authentication shall be one of the main functionalities of modern web applications. Bonita provides you with a wide range of authentication methods. However, for ease of use and deployment purposes, Bonita can be also configured with ”No_Authentication” option. This is ONLY provided for users for whom Bonita does not support the authentication method in place. Other than this special case, ”No_Authentication” option shall be always avoided and the users shall opt for a strong authentication option, e.g. SSO.Perform input validation in your applications and extensionsInput validation is performed to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components.If you use BonitaStudio for developing your forms, then define authorized min and max values, max length and type for input fields.For more information, please take look at the REST API authorization](/bonita_doc/bonita/7.7/installation/advanced-bonita-platform-installation/security-and-authentication/rest-api-authorization) and the other features relating to  that are available in Bonita and in your operating system, and update your platform as required for your production environment.Create a Bonita Portal administratorCreate a user with the “administrator” profile:Note: do not create a user or an administrator with the same login and password as the technical users (platform and tenant)  Log in to Bonita Portal as the technical user.Note: If your system is using single sign-on with CAS, you need to log in with the following URL: http://hostname:port/bonita/login.jsp?redirectUrl=portal/homepage.  Create a user with the standard profile.  Go to Organization &amp;gt; Profiles. Select “Administrator” profile.  Click on the “More” button (in the top right corner).  Under “Users mapping”, click on “Add a user”.  Select your user and click on the “Add” button. Log out as the Technical user and log back in as the newly created user with administrative rights.  Create users with the standard profile.  You can add newly created users to the “User” (standard) profile or to a custom profile.If you already have a system that stores information about end users, you can use it to create user accounts in Bonita.If you use an LDAP or Active Directory system, you can use the LDAP synchronizer tool to keep the Bonita Portal organization synchronized with it.",
      "url": " /bonita/7.7/installation/basic-bonita-platform-installation/first-steps-after-setup",
      "author": "",
      "categories": "Installation, Basic Bonita Platform installation"
    }
    ,
  

    "bonita-7-7-installation-basic-bonita-platform-installation-hardware-and-software-requirements": {
      "title": "Hardware and software requirements",
      "content"     : "Hardware and software requirementsHardwareSoftwareFixing procedureHardwareNote: The hardware recommended for Bonita Platform is strongly dependent on your environment andprocesses (number of processes instances, number of current users, operations and complexity…).Hardware required for Bonita Platform (Bonita Engine and Bonita Portal)| Type | Minimum | Recommended ||:-|:-|:-|| Processors | 4 CPU cores | 4 CPU cores or more || Memory (RAM) | 4 GB | 8 GB or more || Disk space | 10 GB | 30 GB or more, depending on usage |SoftwareSoftware required for Bonita Platform (Bonita Engine and Bonita Portal).| | Version|:-|-| Operating system || Microsoft Windows Server | 2016 64 bits and higher || Red Hat Enterprise Linux |  6.5 64 bits and higher || Ubuntu | 16.04 LTS 64 bits and higher || Java Virtual Machine || Oracle Java SE Runtime Environment | 8u112 (see note 1) || OpenJDK | 8u112 (see note 1) || Application Server || Apache Tomcat | 8.5.x (x &amp;gt; 23) || Red Hat WildFly | 10.1.x || Database | (see note 2)| MySQL | 5.5.27 and higher (see note 3) || PostgreSQL | 9.3 and higher || SQL Server | 2016 (see note 4) || Oracle  | 11gR2 (11.2.0.x) and 12c (12.1.0.x.y) || Browser || Mozilla Firefox | latest version || Google Chrome | latest version (see note 5) || Microsoft Edge | latest version || Internet Explorer | 11.0.x || Mobile || Mozilla Firefox | latest version || Google Chrome | latest version || Apple Safari | latest version |Notes:  Bonita can be executed on Java 8 and above. All development artifacts (connectors, REST API extensions, etc) must be compiled with Java 8 byte code (target version).  Your database must be configured to use the UTF-8 character set.  MySQL must be configured with innoDB storage engine.  There is a known issue between Bitronix (the transaction manager shipped by Bonitasoft for the Tomcat bundle and inside the Deploy bundle for Tomcat) and Microsoft SQL Server JDBC driver(refer to: MSDN note, Bitronix note).Therefore, using Bitronix as a transaction manager with SQL Server does not work and is not supported. To use SQL Server database requires that you use the WildFly bundle provided by Bonitasoft.  Chrome version 60.0.3112 introduced an incompatibility impacting the functionality of Bonita Portal. So from that Chrome version onwards, once Bonita Platform is installed, apply the following procedure to resolve this issue:Fixing procedureSubscription usersNote: In order to apply this procedure, you MUST use a Chrome browser version that doesn’t suffer from the incompatibility, or you can use Firefox, Internet Explorer/Edge or Safari, for example.  Log in to Bonita Portal as Administrator.  In the menu, click on ‘Portal’.  Click on ‘Export the current Look&amp;amp;Feel’.  Make a back-up copy of the exported file.  Unzip the exported file ‘portal-theme.zip’.  Edit ‘BonitaConsole.html’ file:  In the &amp;lt;head&amp;gt; section, add the code below:&amp;lt;script&amp;gt;// Monkey Patch xhr// Due to a specification change in the xhr.getAllResponseHeaders method Bonita Portal does not behave as expected // in browsers that implement this new specification (currently only Chrome &amp;gt;60).// This patch fixes xhr.getAllResponseHeaders unwanted behavior within Bonita Portal context//See https://bugs.chromium.org/p/chromium/issues/detail?id=749086//See https://github.com/whatwg/xhr/issues/146(function (xhr) {var caseSensitiveHeaders = [&#39;Content-Range&#39;, &#39;X-Bonita-API-Token&#39;];  var getAllResponseHeaders = xhr.getAllResponseHeaders;  xhr.getAllResponseHeaders = function () {var headers = getAllResponseHeaders.apply(this);for (var i = 0; i &amp;lt; caseSensitiveHeaders.length; i++) {headers = headers.replace(new RegExp(&#39;^&#39; + caseSensitiveHeaders[i].toLowerCase(), &#39;m&#39;), caseSensitiveHeaders[i]);}return headers;}})(XMLHttpRequest.prototype) &amp;lt;/script&amp;gt;  Zip all the files and folders again into ‘portal-theme.zip’. (BEWARE: make sure not to zip the ‘portal-theme’ folder, but its contents. If the ‘portal-theme.zip’ contains a ‘portal-theme’ folder at the base, Bonita Portal will not recognize it as a valid zip structure.)  In the portal, click on ‘Import and apply a new Look&amp;amp;Feel’ and choose the updated ‘portal-theme.zip’ file.  Back to the Chrome update 60 browser, empty the cache.Community users  In an installed Bonita bundle, edit file ‘server/webapps/bonita/portal/scripts/includes/common.js’:  Add the code below before or after the existing code:`  // Monkey Patch xhr// Due to a specification change in the xhr.getAllResponseHeaders method Bonita Portal does not behave as expected // in browsers that implement this new specification (currently only Chrome &amp;gt;60).// This patch fixes xhr.getAllResponseHeaders unwanted behavior within Bonita Portal context//See https://bugs.chromium.org/p/chromium/issues/detail?id=749086//See https://github.com/whatwg/xhr/issues/146(function (xhr) {var caseSensitiveHeaders = [&#39;Content-Range&#39;, &#39;X-Bonita-API-Token&#39;];var getAllResponseHeaders = xhr.getAllResponseHeaders;xhr.getAllResponseHeaders = function () {var headers = getAllResponseHeaders.apply(this);for (var i = 0; i &amp;lt; caseSensitiveHeaders.length; i++) {headers = headers.replace(new RegExp(&#39;^&#39; + caseSensitiveHeaders[i].toLowerCase(), &#39;m&#39;), caseSensitiveHeaders[i]);}return headers;}})(XMLHttpRequest.prototype)`  Back to the Chrome update 60 browser, empty the cache.",
      "url": " /bonita/7.7/installation/basic-bonita-platform-installation/hardware-and-software-requirements",
      "author": "",
      "categories": "Installation, Basic Bonita Platform installation"
    }
    ,
  

    "bonita-7-7-installation-basic-bonita-platform-installation-licenses": {
      "title": "Licenses",
      "content"     : "LicensesNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.Bonita 7.1 introduces a case-counter mechanism to align with the Bonita Subscription edition licensing model. This page explains how to manage the license for your Bonita Platform.The License menu in Bonita Portal displays information about the current license. This information is available to the platform administrator only.The license for Bonita Studio is managed through a wizard when you start the studio for the first time after installation (or after the previous license expires).Case-counter licensingGet a new licenseGenerate the request keyGenerate the new licenseInstall the licenseLicense renewal schedulingCase-counter licensingA case-counter license defines the maximum number of cases (process instances) that the platform is permitted to start in the counter period.The counter period is typically one year and starts when your Subscription starts or on the anniversary.Each time a case starts, the case counter is increased by one.Case-counter licenses are available for development and for production. A development license must not be used for production, and typically has a lower case limit than a production license.The maximum number of cases is defined in your commercial contract, in discussion with your sales person.You can monitor the case counter using Bonita Portal License page in the Administrator profile, or using the REST API to create a custom monitoring / alerting tool.Those two means also allow you to check the expiration date of the license.When the case counter reaches the limit set in the license, no more cases can be started. Active cases continue to completion.If a user tries to submit an instantiation form after the case counter maximum limit is reached, the form is not submitted and an error message is displayed.Note: If the process still uses legacy, 6.x, forms, there is no error message.Get a new licenseYour contract with Bonitasoft specifies the details of the subscription you have purchased, including the edition, and case limit for case-counter licensing. A license matching the subscription details is generated on request.If this is a license renewal, you can find your request key in the Bonita Portal License menu of the Administrator profile or using the platform REST API.A request key looks like this: (CIVpYDRB8bhouXdWadLY1M9TVctwYUYuv7ou7sqeIrSUSuCqUIkjQAs0ZGgzbtqv3gguFOHlyMZkyvwdr4HLgg==).If this is the first time you generate a license, you need to generate a request key.Generate the request keyOn the server where you installed Bonita Platform:  Go to the request_key_utils folder  Run the generateRequestKey.bat script (for Windows) or the generateRequestKey.sh script (for other operating systems)Generate the new licenseCopy your request key and go to the Customer Portal license request page.Then fill in the details in the form, copy the request key in the Request Key field, and submit.Note: keep the brackets () in the key; if the key is separated by a line break, remove it and put the key on a single line.The license file will be sent to you by email.Install the licenseWhen you receive the license file (.lic file extension):  If this is the first time you start the bundle, copy the file to the&amp;lt;TOMCAT_HOME&amp;gt;/setup/platform_conf/licenses folder or &amp;lt;WILDFLY_HOME&amp;gt;/setup/platform_conf/licenses/ folder before starting the bundle.  If the bundle has already been started, you need to use the Platform setup tool.License renewal schedulingIf you are still within the Subscription period when you approach the license expiration date, request a new license that starts on the last day of your current license.Put the license you receive in the license folder alongside the existing license.When you reach the “changeover” date for the licenses, Bonita Engine switches automatically from the expired license to the valid one.Note: We recommend to regularly remove license files of expired licenses from the server.If you approach both the license expiration date and the end of the Subscription period, contact your sales person.The case counter is reset at the end of the counter period.If your license expiration date comes before the end of the counter period, get and install a new license as usual. The case counter will continue from its current value under the new license.If you approach or reach the case counter limit before the end of the license period, contact your sales person to get a new license with additional cases.",
      "url": " /bonita/7.7/installation/basic-bonita-platform-installation/licenses",
      "author": "",
      "categories": "Installation, Basic Bonita Platform installation"
    }
    ,
  

    "bonita-7-7-installation-basic-bonita-platform-installation-tomcat-bundle": {
      "title": "Tomcat bundle",
      "content"     : "Tomcat bundleYou will find here steps needed to install and configure a Tomcat bundle.The Tomcat bundle is a .zip archive that contains the Apache Tomcat Java EE application server prepackaged along with Bonita and Bonita platform setup tool.The Tomcat bundle is a regular .zip archive based on Tomcat zip distribution.There is a known issue between Bitronix (the Transaction Manager shipped by Bonitasoft in the Tomcat bundle) and the Microsoft SQL Server JDBC driver(refer to: MSDN note, Bitronix note).Therefore, using Bitronix as a Transaction Manager with SQL Server is not recommended. Our recommendation is to use the WildFly bundle provided by Bonitasoft.Installation of the Tomcat bundleDownload and unzip the Tomcat bundleGet and install a license (Subscription editions only)Change the default credentials (optional, recommended for production)Configure the Tomcat bundleStarting and shutting down TomcatAfter installationFirst steps after installationConfiguration updateLicense updateTroubleshootingInstallation of the Tomcat bundleDownload and unzip the Tomcat bundleDownloadFor the Community edition:  Go to the Bonitasoft website and get the Bonita Community edition Tomcat bundle.For a Subscription edition:  Go to the Customer Portal and download the Bonita Subscription edition Tomcat bundle.UnzipThe fully qualified folder path (including the Bonita-x.y.z-Tomcat-8.5.31 folder) to the folder where you unzip the Tomcat bundle is referred to as &amp;lt;TOMCAT_HOME&amp;gt;. We recommend the following locations:  Windows: C:Bonita.  Linux: in /opt/Bonita. Make sure that Linux user account used to execute Tomcat is the owner of the folders and files.Whatever location you choose, do not leave blank spaces in the path to the directory, nor in the folder name.Content of the Tomcat bundleThe Tomcat bundle is based on a standard Tomcat installation with the following additions:  setup/tomcat-templates/setenv.bat: script to configure JVM system properties for Windows.  setup/tomcat-templates/setenv.sh: script to configure JVM system properties for Linux.  setup/tomcat-templates/bonita.xml: Tomcat context configuration for Bonita web application. Define data sources used by Bonita Engine.  server/conf/catalina.properties: modified to include lib/bonita folder to Tomcat classpath.  server/conf/context.xml: modified to add JTA support using Bitronix library.  server/conf/logging.properties: modified to create a log file dedicated to Bonita.  server/conf/server.xml: modified to add listener for Bitronix and h2 (see below for modification needed if you want to switch to another RDBMS).  server/conf/bitronix-*.properties: configuration files for Bitronix.  server/lib/bonita: extra libraries needed by Bonita. The following libraries are included: Bitronix JTA Transaction Manager, h2, SLF4J (required by Bitronix).  server/request_key_utils: folder containing script to generate license request keys (Subscription editions only).  server/webapps/bonita.war: the Bonita web application.  setup/: a tool to manage Bonita Platform configuration, stored in database instead of filesystem. Also ships a tool to centralize all the required Tomcat bundle configuration.  start-bonita.bat: script to start the bundle on Windows.  start-bonita.sh: script to start the bundle on Linux.  stop-bonita.bat: script to stop the bundle on Windows.  stop-bonita.sh: script to stop the bundle on Linux.Note: Beginning with version 7.3.0, Bonita Platform configuration, including the license file, is stored in the same database as the Bonita Engine data, namely in the CONFIGURATION table.The initialization of this configuration happens during start-bonita.bat (for Windows) or start.bonita.sh (for Linux) execution.Once initialized, to update this configuration, use the Platform setup tool embedded in Bonita bundles.Get and install a license (Subscription editions only)First, request a license.If this is the first time you generate a license, you need to generate a request key.Generate the request keyOn the server where you installed Bonita Platform:  Go to the request_key_utils folder  Run the generateRequestKey.bat script (for Windows) or the generateRequestKey.sh script (for Linux)Request the new license  Copy your request key and go to the Customer Portal license request page.  Fill in the details in the form, copy the request key in the Request Key field, and submit.   Note: keep the brackets () in the key; if the key is separated by a line break, remove it and put the key on a single line.The license file will be sent to you by email.When you receive your license:Copy the file to the &amp;lt;TOMCAT_HOME&amp;gt;/setup/platform_conf/licenses folder before starting the bundle.Change the default credentials (optional, recommended for production)As a security precaution, we strongly recommend that before you start your application server, you change the default username and password used for the platform administrator and for the default tenant administrator.Platform administratorThe username and password are defined in a text file:  Before the very first Tomcat start: &amp;lt;TOMCAT_HOME&amp;gt;/setup/platform_conf/initial/platform_engine/bonita-platform-community-custom.properties  After the first Tomcat start: &amp;lt;TOMCAT_HOME&amp;gt;/setup/platform_conf/current/platform_engine/bonita-platform-community-custom.propertiesThe properties are listed below:  platformAdminUsername defines the username (default platformAdmin)  platformAdminPassword defines the password (default platform)This password is used for platform-level administration tasks, such as creating a tenant.Tenant administratorEach tenant has an administrator, with a tenant-specific username and password. The tenant administrator is also known as the tenant technical user.When the platform is created, default values for the tenant administrator username and password are defined in the file &amp;lt;TOMCAT_HOME&amp;gt;/setup/platform_conf/initial/tenant_template_engine/bonita-tenant-community-custom.properties, by the following properties:  userName defines the username (default install)  userPassword defines the password (default install)When you create a tenant, the tenant administrator is created with the default username and password, unless you specify new values. Change these tenant-specific credentials for an existing tenant by updating the userName and userPassword properties in &amp;lt;TOMCAT_HOME&amp;gt;/setup/platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_engine/bonita-tenant-community-custom.properties.For the default tenant, the tenant administrator username and password must also be changed in file:  Before the very first Tomcat start: &amp;lt;TOMCAT_HOME&amp;gt;/setup/platform_conf/initial/platform_portal/platform-tenant-config.properties  After the first Tomcat start: &amp;lt;TOMCAT_HOME&amp;gt;/setup/platform_conf/current/platform_portal/platform-tenant-config.properties,For further details and a better understanding, please read the section Tenant administrator credentials.Configure the Tomcat bundleIf you just want to try Bonita Platform with the embedded H2 database (only for development and testing phases of your project), you can skip the next paragraph.For production, you are recommended to use one of the supported databases, with the following steps.  Make sure your databases are created and customized to work with Bonita.  Edit file &amp;lt;TOMCAT_HOME&amp;gt;/setup/database.properties and modify the properties to suit your databases (Bonita internal database &amp;amp; Business Data database). Beware of backslash characters.  If you use Microsoft SQL Server or Oracle database, copy your jdbc driver in &amp;lt;TOMCAT_HOME&amp;gt;/setup/lib/ folder.  Run &amp;lt;TOMCAT_HOME&amp;gt;setupstart-bonita.bat (Windows system) or &amp;lt;TOMCAT_HOME&amp;gt;/setup/start-bonita.sh (Unix system) to run Bonita Tomcat bundle (see Tomcat start script)The start-bonita script does the following:  Runs the setup init command:  initializes the Bonita internal database (the one you have defined in file &amp;lt;TOMCAT_HOME&amp;gt;/setup/database.properties): creates the tables that Bonita uses internally + stores the configuration in the database.  installs the license files (Subscription editions only) in the database.Runs the setup configure command: The Setup Configure command configures the Tomcat environment to access the right databases:  updates the file setenv.sh (Unix system) or setenv.bat (Windows system) to set the database vendor values for Bonita internal database &amp;amp; Business Data database  updates the file &amp;lt;TOMCAT_HOME&amp;gt;/setup/tomcat-templates/bitronix-resources.properties with the values you set in file database.properties Bonita internal database &amp;amp; Business Data database  updates the file &amp;lt;TOMCAT_HOME&amp;gt;/setup/tomcat-templates/bonita.xml with the values you set in file database.properties  copies your database vendor-specific drivers from &amp;lt;TOMCAT_HOME&amp;gt;/setup/lib to &amp;lt;TOMCAT_HOME&amp;gt;/setup/server/lib/bonitaStarts the Tomcat bundleFor advanced server configuration needs: check out Bundle configuration to finely tune your Tomcat bundle, using templates used by Bonita.Starting and shutting down TomcatTomcat start scriptTomcat can be started by executing the following script:  Windows: &amp;lt;TOMCAT_HOME&amp;gt;start-bonita.bat  Linux: &amp;lt;TOMCAT_HOME&amp;gt;/start-bonita.shTomcat stop scriptTomcat can be shut down by executing the following script:  Windows: &amp;lt;TOMCAT_HOME&amp;gt;stop-bonita.bat  Linux: &amp;lt;TOMCAT_HOME&amp;gt;/stop-bonita.shTroubleshooting:If you see checkThreadLocalMapForLeaks errors, they probably indicate that Tomcat is shutting down before all work threads are completed.You can increase the work service termination timeout to ensure that work is complete before shutdown.After installationFirst steps after installationOnce you have your Tomcat bundle up and running, complete these few extra steps to get Bonita Platform fully operational.Configuration updateTo update Bonita configuration after the first run, take a look at the platform setup toolNote:  The file database.properties is the entry point to configure the Tomcat environment and the Bonita Platform configuration.  You can use command line arguments to specify database properties directly from the command line. Use &amp;lt;TOMCAT_HOME&amp;gt;/setup/setup.sh --help on Linux or &amp;lt;TOMCAT_HOME&amp;gt;setupsetup.bat --help on Windows to have a list of available options.License updateTo update the licenses after the first run, take a look at the platform setup toolTroubleshootingProblem:My Microsoft SQL Server or Oracle database drivers do not seem to be taken into account when I put them in &amp;lt;TOMCAT_HOME&amp;gt;/setup/lib folder.Cause:Driver file must respect some naming convention.Solution:For Microsoft SQL Server, rename it so that the name contains at least the word sqlserver or sqljdbc or mssql (case insensitive)For Oracle, rename it so that the name contains at least the word oracle or ojdbc (case insensitive)Issue: When I run start-bonita.sh or start-bonita.bat, I get the error message Invalid Java version (1.7) &amp;lt; 1.8. Please set JRE_HOME or JAVA_HOME variable to a JRE / JDK 1.8+Cause: Bonita 7.5+ requires Java 1.8 to runSolution: Ensure your running environment has a JDK or JRE 1.8 installed and set either JRE_HOME or JAVA_HOME environment variable to point to it.",
      "url": " /bonita/7.7/installation/basic-bonita-platform-installation/tomcat-bundle",
      "author": "",
      "categories": "Installation, Basic Bonita Platform installation"
    }
    ,
  

    "bonita-7-7-installation-basic-bonita-platform-installation-wildfly-bundle": {
      "title": "WildFly bundle",
      "content"     : "WildFly bundleYou will find here steps needed to install and configure a WildFly bundle.The WildFly bundle is a zip archive that contains the Red Hat WildFly Java EE application server packaged with Bonita and Bonita platform setup tool.The WildFly bundle is a regular zip archive based on the WildFly zip distribution.Installation of the WildFly bundleDownload and unzip the WildFly bundleGet and install a license (Subscription editions only)Change the default credentials (optional, recommended for production)Configure the WildFly bundleStarting and shutting down WildFlyAfter installationFirst steps after installationConfiguration updateLicense updateTroubleshootingInstallation of the WildFly bundleDownload and unzip the WildFly bundleDownloadFor the Community edition:  Go to the Bonitasoft website and get the Bonita Community edition WildFly bundle.For a Subscription edition:  Go to the Customer Portal and download the Bonita Subscription edition WildFly bundle.UnzipThe folder where you unzip the WildFly bundle is known as &amp;lt;WILDFLY_HOME&amp;gt;. We recommend the following locations:  Windows: C:Bonita.  Linux: in /opt/Bonita. Make sure that Linux user account used to execute WildFly is the owner of the folders and files.Whatever location you choose, do not leave blank spaces in the path to the directory, nor in the folder name.Content of the WildFly bundleThe WildFly bundle is based on a standard WildFly installation with the following additions:  server/bin/standalone.conf: script to configure JVM system properties on Linux systems.  server/bin/standalone.conf.bat: script to configure JVM system properties on Windows systems.  server/modules/system/layers/base/sun/jdk/main/module.xml: list of base jdk module necessary for WildFly and Bonita to execute.  server/request_key_utils: script to generate license request keys (Subscription editions only).  server/standalone/deployments/bonita-all-in-one-[version].ear: Bonita Portal (web application) and EJB3 API.  setup/: a tool to manage Bonita Platform configuration, stored in database instead of filesystem. Also ships a tool to centralize all the required WildFly bundle configuration.  setup/wildfly-templates/standalone.xml: WildFly context configuration for Bonita Portal. It defines data sources used by Bonita Engine.  start-bonita.bat: script to start the bundle on Windows.  start-bonita.sh: script to start the bundle on Linux.Note: Beginning with version 7.3.0, Bonita Platform configuration, including the license file, is stored in the same database as the Bonita Engine data, namely in the CONFIGURATION table.The initialization of this configuration happens during start-bonita.bat (for Windows) or start.bonita.sh (for Linux) execution.Once initialized, to update this configuration, use the Platform setup tool embedded in Bonita bundles.Get and install a license (Subscription editions only)First, request a license.If this is the first time you generate a license, you need to generate a request key.Generate the request keyOn the server where you installed Bonita Platform:  Go to the request_key_utils folder  Run the generateRequestKey.bat script (for Windows) or the generateRequestKey.sh script (for Linux)Request the new license  Copy your request key and go to the Customer Portal license request page.  Fill in the details in the form, copy the request key in the Request Key field, and submit.Note: keep the brackets () in the key; if the key is separated by a line break, remove it and put the key on a single line.The license file will be sent to you by email.When you receive your license:If this is your first installation, copy the file to the &amp;lt;WILDFLY_HOME&amp;gt;/setup/platform_conf/licenses folder before starting the bundle.If this is a license update, use the Platform setup tool.Change the default credentials (optional, recommended for production)As a security precaution, we strongly recommend that before you start your application server, you change the default username and password used for the platform administrator and for the default tenant administrator.Platform administratorThe username and password for the platform administrator are defined in the file &amp;lt;WILDFLY_HOME&amp;gt;/setup/platform_conf/initial/platform_engine/bonita-platform-community-custom.properties, by the following properties:  platformAdminUsername defines the username (default platformAdmin)  platformAdminPassword defines the password (default platform)This password is used for platform-level administration tasks, such as creating a tenant.Tenant administratorEach tenant has an administrator, with a tenant-specific username and password. The tenant administrator is also known as the tenant technical user.When the platform is created, default values for the tenant administrator username and password are defined in the file &amp;lt;WILDFLY_HOME&amp;gt;/setup/platform_conf/initial/tenant_template_engine/bonita-tenant-community-custom.properties, by the following properties:  userName defines the username (default install)  userPassword defines the password (default install)When you create a tenant, the tenant administrator is created with the default username and password, unless you specify new values. Change these tenant-specific credentials for an existing tenant by updating the userName and userPassword properties in &amp;lt;WILDFLY_HOME&amp;gt;/setup/platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_engine/bonita-tenant-community-custom.properties.For the default tenant, the tenant administrator username and password must also be changed in file &amp;lt;WILDFLY_HOME&amp;gt;/setup/platform_conf/initial/platform_portal/platform-tenant-config.properties,with exactly the same values that you set in bonita-tenant-community-custom.properties (see above). At platform creation, this file contains the default username and password for the default tenant.For further details and a better understanding, please read the section Tenant administrator credentials.Configure the WildFly bundleIf you just want to try Bonita Platform with the embedded H2 database (only for development and testing phases of your project), you can skip this paragraph.For production, you are recommended to use one of the supported databases, with the following steps.  Make sure your databases are created and customized to work with Bonita.  Edit file &amp;lt;WILDFLY_HOME&amp;gt;/setup/database.properties and modify the properties to suit your databases (Bonita internal database &amp;amp; Business Data database). Beware of backslash characters.  If you use Microsoft SQL Server or Oracle database, copy your jdbc driver in &amp;lt;WILDFLY_HOME&amp;gt;/setup/lib folder.  Run &amp;lt;WILDFLY_HOME&amp;gt;start-bonita.bat (Windows system) or &amp;lt;WILDFLY_HOME&amp;gt;/start-bonita.sh (Unix system) to run Bonita WildFly bundle (see WildFly start script)The start-bonita script does the following:  Runs the setup init command:  initializes the Bonita internal database (the one you have defined in file &amp;lt;WILDFLY_HOME&amp;gt;/setup/database.properties): creates the tables that Bonita uses internally + stores the configuration in database.  install the license files (Subscription editions only) in the database.Runs the setup configure command: The Setup Configure command configures the WildFly environment to access the right databases:  updates the file &amp;lt;WILDFLY_HOME&amp;gt;/setup/wildfly-templates/standalone.xml with the values you set in file database.properties for Bonita internal database &amp;amp; Business Data database  creates the file(s) &amp;lt;WILDFLY_HOME&amp;gt;/server/modules/**/main/modules.xml that WildFly needs, according to your database settings  copies your database vendor-specific drivers into &amp;lt;WILDFLY_HOME&amp;gt;/server/modules/**/main/ foldersStarts the WildFly bundleFor advanced server configuration needs: check out Bundle configuration to finely tune your WildFly bundle, using templates used by Bonita.Starting and shutting down WildFlyWildFly start scriptWildFly can be started by executing the following script:  Windows &amp;lt;WILDFLY_HOME&amp;gt;start-bonita.bat  Linux &amp;lt;WILDFLY_HOME&amp;gt;/start-bonita.shWildFly stop scriptWildFly can be shut down by executing the following script:  Windows &amp;lt;WILDFLY_HOME&amp;gt;serverbinjboss-cli.bat --connect --command=:shutdown  Linux &amp;lt;WILDFLY_HOME&amp;gt;/server/bin/jboss-cli.sh --connect --command=:shutdownYou can also press Ctrl + C.After installationFirst steps after installationOnce you have your WildFly bundle up and running, complete these first steps to get Bonita Platform fully operational.Configuration updateTo update the configuration after the first run please take a look at the Platform setup toolFile database.properties is the only entry point to configure the WildFly environment and theBonita Platform configurationLicense updateTo update the licenses after the first run, take a look at the platform setup toolTroubleshootingIssue: When I restart the WildFly bundle, the Bonita application starts and then stops with message WFLYSRV0009: Undeployed &quot;bonita-all-in-one-...Potential cause: There are too many elements to restart.Solution: Increase the WildFly application deployment timeout in file standalone.xml in folder setup/wildlfy-templates. Look for &#39;&amp;lt;deployment-scanner ... deployment-timeout=&quot;600&quot; ...&#39;and change it to a higher value (in seconds).Issue:My Microsoft SQL Server or Oracle database drivers do not seem to be taken into account when I put them in &amp;lt;WILDFLY_HOME&amp;gt;/setup/lib folder.Potential cause:Driver file must respect some naming convention.Solution:For Microsoft SQL Server, rename it so that the name contains at least the word sqlserver or sqljdbc or mssql (case insensitive)For Oracle, rename it so that the name contains at least the word oracle or ojdbc (case insensitive)Issue: When I run start-bonita.sh or start-bonita.bat, I get the error message Invalid Java version (1.7) &amp;lt; 1.8. Please set JAVA or JAVA_HOME variable to a JDK / JRE 1.8+Cause: Bonita 7.4+ WildFly bundle requires Java 1.8 to runSolution: Ensure your running environment has a JDK or JRE 1.8 installed and set either JAVA or JAVA_HOME environment variable to point to it.Issue: When I start the Wildfly bundle configured to use a Microsoft SQL Server database, I get the error message java.lang.NoClassDefFoundError: javax/xml/bind/DatatypeConverterCause: The WildFly configuration has not been properly updatedSolution: In the _/server/modules/com/sqlserver/main/module.xml_ file, add `` in the list of dependencies",
      "url": " /bonita/7.7/installation/basic-bonita-platform-installation/wildfly-bundle",
      "author": "",
      "categories": "Installation, Basic Bonita Platform installation"
    }
    ,
  

    "bonita-7-7-installation-bonita-bpm-installation-overview": {
      "title": "Bonita installation overview",
      "content"     : "Bonita installation overviewBonita exists in several editions: Enterprise, Performance, Efficiency, Teamwork, and Community.For the Bonita Subscription editions: Enterprise, Performance, Efficiency, and Teamwork, you need to install a license during the installation procedure. This license depends on the edition, the deployment environment, the number of cases purchased or the number of cores.For the Bonita Community edition, no license is needed.Bonita Studio Bonita Studio contains an embedded test platform that includes an Apache Tomcat application server, an h2 database and the Bonita web application (that itself includes Bonita Engine).To install Bonita Studio you can either use:  The installer for your operating system (Windows, Mac OS, Linux).Used to install Bonita Studio (using a wizard) on your computer. No configuration necessary.  The OS independent package. Used to manually set up Bonita Studio.The package contains the individual launchers in one .zip file, and creates the same installation environment as the installers.To know more, go to Bonita Studio installation.Bonita Platform  Bonita Platform can be installed in several ways:  If you want to migrate an existing installation to the latest version follow the migration guide.  If you want to do a fresh install, get one of our prepackaged bundles that include an Application Server  Tomcat + Bonita  WildFly + BonitaIf you want to do a custom installation, use the Deploy bundle.For all options, you will need to configure Bonita Engine to work with the database of your choice (e.g. PostgreSQL or Oracle).Starting from Bonita 7.3.0, there is no more bonita home to store the configuration, all the configuration is in the database. For more information, take a look at Bonita Platform configurationFor detailed information on the Supported Environment Matrix, see the Support Guide or ask to be contacted by our commercial team.",
      "url": " /bonita/7.7/installation/bonita-bpm-installation-overview",
      "author": "",
      "categories": "Installation"
    }
    ,
  

    "bonita-7-7-installation-bonita-bpm-studio-installation": {
      "title": "Bonita Studio installation",
      "content"     : "Bonita Studio installationThis page explains how to install Bonita Studio for developing processes. There are installer wizards for Windows, Linux, and Mac systems, and an OS-independent archive that can be installed on any system.PrerequisitesDownload Bonita StudioInstall using a wizardInstall using Zip archive (Windows or Linux)Start Bonita StudioLicenseCache configuration TroubleshootingPrerequisitesCheck the hardware and software requirements.Before you download Bonita Studio, make sure that you know whether you are using a using a 32 or 64-bit system, and that you have the appropriate Java version installed:  For Linux, to find out whether you are using a 32 or 64 bit Linux, run the following command: getconf LONG_BIT, which returns either 32 or 64.  For Windows, see the 32 and 64 bit Windows FAQ.  For Mac, 32-bit Java is no longer supported, so there is no 32-bit version of Bonita for Mac systems.Both Windows and Mac have default security settings that will prevent execution of Bonita. See below for further details about what you can do to bypass those security protectionsNote for users of macOS 10.12.x and above : There is an known issue on macOS Sierra and Java about the slowness of   java.net.InetAddress getLocalHost() which results in a slowness of the Bonita Studio (find more info on thoeni or plumbr). To resolve this issue you shoud add your computer name to your /etc/hosts file : In a terminal, edit your /etc/hosts with sudo privilege, add your computer name to the local IP addresses 127.0.0.1 localhost &amp;lt;mycomputername.local&amp;gt; and ::1 localhost &amp;lt;mycomputername.local&amp;gt; (To find your macOS computer name, look at Apple support dedicated page).Note for users of OS X 10.7.5 and above: a new security feature called Gatekeeper prevents the installation of software that is not officially recognized by Apple.For more information and details of how to install Bonita Studio on a system running Gatekeeper, see the Apple support site.Not for users of Windows 10: the security feature called SmartScreen prevents execution of Bonita Studio installer.  When you get the “Windows protect your PC” pop up window, click on “More info” link and click on “Run anyway” button.Download Bonita StudioFor a Subscription edition of Bonita Studio, go to the Customer Portal and request a download.For the Community edition of Bonita Studio, go to the Bonitasoft website downloads page. On the download page you will get a download button based on your operating system auto-detection. If you want to download a different version (e.g. switch from 32 to 64-bit version), click on the Customize you download link.On this page there are buttons to download the Studio installer for your current operating system and the all in one, OS-independent version.To download the installer for a different operating system, select it from the Operating system section.Then click the Download button.When the download is complete, you have one of the following new files:LinuxCommunity edition  32 bit: BonitaStudioCommunity-x.y.z-x86.run  64 bit: BonitaStudioCommunity-x.y.z-x86_64.runSubscription editions  32 bit: BonitaSubscription-x.y.z-x86.run  64 bit: BonitaSubscription-x.y.z-x86_64.runWindowsCommunity edition  32 bit: BonitaStudioCommunity-x..zy-x86.exe  64 bit: BonitaStudioCommunity-x.y.z-x86_64.exeSubscription editions  32 bit: BonitaSubscription-x..zy-x86.exe  64 bit: BonitaSubscription-x.y.z-x86_64.exeMacCommunity edition  32 bit: Not provided  64 bit: BonitaStudioCommunity-x.y.z-x86_64.dmgSubscription editions  32 bit: Not provided  64 bit: BonitaSubscription-x.y.z-x86_64.dmgZip, no Installer (Windows or Linux)Community edition  BonitaStudioCommunity-x.y.z.zipSubscription editions  BonitaStudioSubscription-x.y.z.zipInstall using a wizardTo run the installer wizard for Linux, Windows, or Mac, double-click the downloaded file.Then follow the installation wizard through to the end of the installation procedure.For subscription editions: the installer import workspace feature applies only to local repositories.If you have shared repositories in your workspace, you will need to reconnect to these manually, and possibly migrate the processes to your new version of Bonita Studio.The default workspace is automatically initialized at the end of the installation.Install using Zip archive (Windows or Linux)To install Bonita Studio using the zip archive, unzip the downloaded .zip file to a folder on your hard drive. Avoid using a folder with a long path. Do not use a path that contains spaces.Start Bonita StudioTo start Bonita Studio, go to the directory where you installed it, and run the launcher for your operating system:Linux Community edition  32-bit: BonitaStudioCommunity-linux  64-bit: BonitaStudioCommunity64-linuxSubscription editions  32-bit: BonitaStudioSubscription-linux  64-bit: BonitaStudioSubscription64-linuxWindowsCommunity edition  32-bit: BonitaStudioCommunity.exe  64-bit: BonitaStudioCommunity64.exeSubscription editions  32-bit: BonitaStudioSubscription.exe  64-bit: BonitaStudioSubscription64.exeMac Community edition  32-bit: Not provided  64-bit: BonitaStudioCommunity64.appSubscription editions  32-bit: Not provided  64-bit: BonitaStudioSubscription64.appLicenseThis information applies to the Subscription editions. No license is needed for the Community edition.When you launch Bonita Studio for the first time, you need to install a license:  Click Copy to clipboard to copy the request key from the pop-up  Use the generated request key to request a license on the Customer portal  Check your email box (after a few minutes) and open the email from no-reply@bonitasoft.com  Download the attached file (.lic)  Go back to your Bonita Studio, click Install license…, and select your .lic file.Cache configurationBy default cache is disable for the web server embedded by Bonita studio, as it is more comfortable to realise development without cache. But you can decide to activate cache, to be closer to the production display time. To do this, you need to follow those steps.  Close your Bonita Studio if he’s up.  Go in the studio installation folder.  Open BonitaStudioSubscription.ini file if you use a 32-bits version (BonitaStudioSubscription64.ini for a 64-bits).  Change -Dtomcat.extra.params=-DnoCacheCustomPage=true to -Dtomcat.extra.params=-DnoCacheCustomPage=false.  Save file.  Start your Bonita studio. Now you have a cache for your living application and your custom page.TroubleshootingLog filesIn case of trouble when running Bonita Studio, you might want to take a look at log files.Studio log file can be displayed from Bonita Studio in “Help” -&amp;gt; “Show Bonita Studio log” menu.If Studio fails to start, you can open the log file manually. File is named .log and is located in &amp;lt;studio_folder&amp;gt;/workspace/.metadata folder. Note that folder might be hidden and file might not be displayed if you choose to hide file extensions in your file manager.OutOfMemory error in Bonita StudioAfter installation, you might see an OutOfMemory error in Bonita Studio.This error sometimes occurs when importing a large process definition.The log messages are similar to the following:!ENTRY org.bonitasoft.studio.importer 4 0 2014-04-25 09:43:49.467!ERROR Import has failed for file Autorisation Engagement Depenses-2.0.bos!ENTRY org.bonitasoft.studio.importer 4 0 2014-04-25 09:43:49.470!ERROR!STACK 0java.lang.reflect.InvocationTargetExceptionCaused by: java.lang.OutOfMemoryError: GC overhead limit exceededTo fix this issue, you need to increase the memory allocated to the JVM that runs Bonita Studio.Edit the *.ini file that corresponds to the executable you use to launch the Studio (e.g. BonitaStudioSubscription64.ini if you run BonitaStudioSubscription64.exe) and modify this line: -Xmx512m to -Xmx1024m (or higher).Then restart Bonita Studio.",
      "url": " /bonita/7.7/installation/bonita-bpm-studio-installation",
      "author": "",
      "categories": "Installation"
    }
    ,
  

    "bonita-7-7-installation-migration-migrate-from-an-earlier-version-of-bonita-bpm": {
      "title": "Migrate from an earlier version of Bonita",
      "content"     : "Migrate from an earlier version of BonitaOverviewHow it worksConstraintsEstimate time requiredMigrate your platformMigrate your clusterMigrate your client applicationsOverviewThis page explains how to migrate your platform to a newer version of Bonita.You can migrate your platform using the Bonita Migration Tool. There is 2 version of the migration tool:  The version 1.x that migrate the platform from version 6.0.2 or later to any version up to 7.0.0  the version 2.x that migrate the platform from version 7.0.0 or later to any version up to the last one.For example, if you are migrating from 6.5.3 to 7.1.0, you must migrate from 6.5.3 to 7.0.0 using version 1.x of the Bonita Migration Tool, and then migrate from 7.0.0 to 7.1.0 using version 2.x. Caution:You should always migrate to the latest version of a major version. Usually, maintenance version might contain bug fixes made after the release of subsequent major or minor release.For example, the 6.5.4 release contains fixes to certain bugs that were found in early 7.x.y versions, up to 7.1.0.When you are ready to migrate from 6.5.4 to a 7.x.y version, make sure you migrate to at least 7.1.1 to be sure that these fixes are present in your new version after migration. To migrate from 6.5.4 to 7.1.1 or later there are two phases: first you upgrade to 7.0.0 then to the latest version. You are recommended not to start 7.0.0 after you migrate to it, but to proceed immediately with the second phase of the migration.JRE requirements:Versions 7.0 to 7.4 only support JRE version 7. If you comes from older versions of Bonita supporting JRE 6, you must also upgrade your JRE to version 7.Version 7.5 only supports JRE version 8. If migrating to version 7.5, please upgrade your JRE to version 8.For more info, see Support Guide and Supported Environment Matrix for Server.The tool migrates your platform (bonita_home folder and the database). You cannot change edition while migrating. If you are running aBonita Subscription Pack edition, you need a valid license for your target version.If you are upgrading to a new maintenance version and not changing the minor version number (for example, you are migrating from 6.3.0 to 6.3.1),your current license remains valid after migration.Starting from version 7.3 there is no more bonita home folder. This means that, if your installation does not have any custom change, then you do not need to configure the bundle any further for an installation migrated in 7.3 or above.On the other hand, if you have customized your configuration, you will have to use the platform setup tool to send your customized configuration files to the database where configuration is stored, for versions 7.3 and above.How it worksThe Bonita Migration Tool contains a set of script that execute changes on the data to make it compatible with earlier version of Bonita Platform.This tool is provided as a zip archive and contains an executable script that will determine your current configuration and ask you in which version you want to migrate.The migration is step-wise by maintenance version and the script manages the sequence of steps from your current version to the target version.After each minor or maintenance version upgrade, you have the option to pause or continue to the next step.The migration script migrates the following:  Engine server  Engine database, including all data on active and archived process instances  Organization definition  Runtime data in Bonita Home, until 7.3  Configuration files in Bonita Home, which are replaced with the default configuration files for the new version  Log files from the previous version are not impacted by migrationThe following are not migrated automatically:  Configuration of the platform: Before 7.3 in the Bonita Home folder and after 7.3 in database. Reapply your customizations manually after the migration script has finished (using platform setup tool if migrated to 7.3.0+).  Deployed process definitions: The processes will continue to run using the definition created in the previous version of Bonita.  Process definition sources (.bos files): Migrate these by importing them into the new version of Bonita Studio.  Business data model, and the business data database: if the migration path include version 7.0.0,7.2.0 or 7.2.4, the Business data model must be redeployed after migration, using Define and deploy the BDM). Otherwise, no action is required.  Custom connectors, actor filers, data types: These might continue to work in the new version, but should be tested, depending on your custom code.  Custom pages: These might continue to work in the new version, but should be tested depending on your custom code.  Custom reports: These might continue to work in the new version, but should be tested depending on your custom code.  REST API Extensions: These might continue to work in the new version, but should be tested depending on your custom code.When the script has finished,you need to complete the migration by unzipping and configuring a bundle for the new version.See Migrate your platform for step-by-step instructions.ConstraintsIf you have added indexes to certain tables in the Engine database, you must remove them before migrating from 6.2.6 to a later version.If you do not remove these indexes, the migration will not complete.This applies to the following tables: arch_process_instance, arch_connector_instance, arch_flownode_instance, arch_data_instance and arch_data_mapping.There is no guarantee that the Look &amp;amp; Feel definition is compatible across maintenance versions.For example, in 6.2.2, jquery+ was renamed jqueryplus in BonitaConsole.html, for compatibility with more application servers.If you are using a custom Look &amp;amp; Feel, export it before migrating.Then after the migration is complete, export the default Look &amp;amp; Feel from the new version,modify your custom Look &amp;amp; Feel to be compatible with the new definition, and with the recommendations for form footers.Then import your updated custom Look &amp;amp; Feel into Bonita Portal.The migration script supports MySQL, Postgres, Oracle, and MS SQLServer. There is no migration for h2 databases.Important:The migration operation resets the Bonita configuration files to default version for new settings to be applied (from the $BONITA_HOME folder in &amp;lt;7.3.0 version or inside database in &amp;gt;=7.3.0).Therefore, you must do a backup of your configuration files before starting the migration.You will need to merge custom properties and configurations to the migrated environment.Furthermore, from the database point of view, as any operations on a production system, a migration is not a zero risk operation. Therefore, it is strongly recommended to do a backup of your database before starting the migration.Estimate time requiredThe platform must be shut down during migration.The time required depends on several factors including the database volume, the number of versions between the source version and thetarget version, and the system configuration,so it is not possible to be precise about the time that will be required. However, the following example can be used as a guide:|   | ||:- |:-   || Database entries: | data: 22541  flownode: 22482  process: 7493  connector: 7486  document: 7476|| Source version:   | 6.0.2   || Target version:   | 6.3.0   || Time required:| 2.5 minutes |Migrate your platformThis section explains how to migrate a platform that uses one of the Bonita bundles.  Download the target version bundle and the migration tool for your Edition from theBonitaSoft site for Bonita Community editionor from the Customer Portal for Bonita Subscription Pack editions.  Unzip the migration tool zip file into a directory. In the steps below, this directory is called bonita-migration.  If you use Oracle or Microsoft SQL Server, add the JDBC driver for your database type to bonita-migration/lib. This is the same driver as you have installed inyour web server lib directory.  Configure the database properties needed by the migration script, by editing bonita-migration/Config.properties.Specify the following information:Property  Description  Example  bonita.home  The location of the existing bonita_home. Required only until 7.3  /opt/BPMN/bonita (Linux) or C:BPMNbonita (Windows)  db.vendor  The database vendor  postgres  db.driverClass  The driver used to access the database  org.postgresql.Driver  db.url  The location of the Bonita Engine database  jdbc:postgresql://localhost:5432/bonita_migration  db.user  The username used to authenticate to the database  bonita  db.password  The password used to authenticate to the database  bpmNote: If you are using MySQL, add ?allowMultiQueries=true to the URL. For example,db.url=jdbc:mysql://localhost:3306/bonita_migration?allowMultiQueries=true.  If you use a custom Look &amp;amp; Feel, export it, and then restore the default Look &amp;amp; Feel.  If you use a Business data model that require to be redeployed (see above), you can pause the tenant so that as a tenant admin, you’ll be able to redeploy the BDM on a paused tenant once migration is done.  Stop the application server.  IMPORTANT:Back up your platform and database in case of problems during migration.  Go to the directory containing the migration tool.  Run the migration script:  For version 1.x of the migration tool, run migration.sh (or migration.bat for Windows).  For version 2.x of the migration tool, go to the bin directory and run the migration script for your edition and operating system:      Community edition  bonita-migration-distrib (Linux) or bonita-migration-distrib.bat (Windows)  Subscription editions  bonita-migration-distrib-sp (Linux) or bonita-migration-distrib-sp.bat (Windows)The script detects the current version of Bonita, and displays a list of the versions that you can migrate to. Specify theversion you require.The script starts the migration.  As the script runs, it displays messages indicating progress. After each migration step, you are asked to confirm whether toproceed to the next step. You can pause the migration by answering no.To suppress the confirmation questions, so that the migration can run unattended, set the ` (-Dauto.accept=true) systemproperty.When the migration script is finished, a message is displayed showing the new platform version, and the time taken for the migration.The bonita_home` and the database have been migrated.  Unzip the target bundle version into a directory. In the steps below, this directory is called bonita-target-version.  Configure the bundleto use the migrated database.Do not recreate the database and use the setup tool of the bonita-target-version Edit the bonita-target-version/setup/database.properties file to point to the  migrated database.Reapply configuration made to the platform, using the setup tool of the bonita-target-versionDownload the configuration from database to the local disk.There is below a Linux example: cd setup ./setup.sh pullYou must reapply the configuration that had been done on the original instance’sbonita_homein the bonita-target-version/setup/platform_conf/currentPlease refer to the guide on updating the configurationfile using the platform setup toolWhen done, push the updated configuration into the database: ./setup.sh pushIf you have done specific configuration and customization in your server original version, re-do it by configuring the application server at bonita-target-version/server (or bonita-target-version if target version is 7.3.n): customization, libs etc.   If your Bonita version is 7.4 or above before migrating, you can skip this point.In the case where deployed resources have required dedicated authorizations to use the REST API, these authorizations are not automatically migrated. Some manual operation have to be done on files that are  located in the $BONITA_HOME folder if version &amp;lt;7.3.0 or in the extracted platform_conf/current folder in version &amp;gt;=7.3.0 (see Update Bonita Platform configuration for more information ). You need to merge the previous file version and the migrated one.  tenants/[TENANT_ID]/conf/compound-permissions-mapping.properties : contains list of permissions used for each resources  tenants/[TENANT_ID]/conf/resources-permissions-mapping.properties : contains permissions for REST API extensions  tenants/[TENANT_ID]/conf/custom-permissions-mapping.properties : contains custom permissions for users and profiles  tenants/[TENANT_ID]/conf/dynamic-permissions-checks.properties : used if dynamic check on permissions is enabledConfigure License:you need to put a new license in the database: see Platform configuration for further details. There is below a Linux example: cd setup vi database.properties ./setup.sh pull ls -l ./platform_conf/licenses/If there is no valid license in the ./platform_conf/licenses/, these 2 pages will help you to request and install a new one:  Licenses  Platform configurationInstall the new license: cp BonitaSubscription-7.n-Jerome-myHosname-20171023-20180122.lic ./platform_conf/licenses/ ./setup.sh pushStart the application server. Before you start Bonita Portal, clear your browser cache. If you do not clear the cache, you might see old, cached versions of Portal pages instead of the new version.Log in to the Portal and verify that the migration has completed. If you did not set the default Look &amp;amp; Feel before migration and you cannot log in, you need to restore the default Look &amp;amp; Feel using a REST client or the Engine API.The migration is now complete. If you were using a custom Look &amp;amp; Feel before migration, test it on the new version before applying it to your migrated platform.Migrate your clusterA Bonita cluster must have the same version of Bonita on all nodes. To migrate a cluster:  Download the migration tool:  In version 1.x you need to download the tool for Performance cluster, the ordinary Performance migration tool does not support migration of a cluster.  In version 2.x there is only one kind of migration tool. It will work for both cluster and non cluster installation.Shutdown all cluster nodes.  On one node, follow the procedure above to migrate the platform.  When the migration is complete on one node, follow steps 12 to 16 on all the other nodes.The migration of the cluster is now complete, and the cluster can be restarted.Migrate your client applicationsIf you have applications that are client of Bonita, you may have to change your client code or library. Most of thetime, we guarantee backward compatibility. In any cases, please read the release notes to check ifsome changes have been introduced.In addition, if your application connect to the Bonita Engine using the HTTP access mode, see the bonita-client librarydocumentation page.",
      "url": " /bonita/7.7/installation/migration/migrate-from-an-earlier-version-of-bonita-bpm",
      "author": "",
      "categories": "Installation, Migration"
    }
    ,
  

    "bonita-7-7-installation-migration-migration-overview": {
      "title": "Migration overview",
      "content"     : "Migration overviewMigrating your platform to the new versionMigrating your Bonita StudioMigrating your process definitionsMigrating your platform to the new versionYou can automatically migrate the platform from an earlier version of Bonita. You cannot migrate your platform from a version earlier than 6.0.2. After migration, a process continues to run unchanged. You can modify the process definition later to take advantage of the new features in this version of Bonita.Migrating your Bonita StudioTo migrate to a newer version of Bonita Studio, install the new version using the Studio installer wizard for your operating system.If you want to keep the artifacts in your workspace, select the option to migrate your workspace.Warning: if you do not migrate your workspace, or if you use the OS-independent archive to install the new Bonita Studio, your workspace is not automatically migrated. In this case, you must manually export each item from the older Bonita Studio and import it into the newer version.Migrating your process definitionsA process definition created using Bonita 6.x can be run on this version after the platform migration. However, you might choose to update the process definition to take advantage of new features. To update a process definition, export it from the older version of Bonita Studio as a .bos file, then import it into the newer version and update it.Note: you cannot import a process definition .bos file into a version of Bonita Studio that is older than the version that was used to create it.You can import a .bos file containing a process definiiton from a Bonita 6.x or Bonita Open Solution 5.x. The guided migration converts the 5.x process definition to use the legacy 6.x tooling so that the process can run on a Bonita 7.x platform. You can modify the process definition later to take advantage of the new features in this version of Bonita.",
      "url": " /bonita/7.7/installation/migration/migration-overview",
      "author": "",
      "categories": "Installation, Migration"
    }
    ,
  

    "bonita-7-7-installation-platform-installation-examples-ubuntu-openjdk-tomcat-postgresql": {
      "title": "Ubuntu + OpenJDK + Tomcat + PostgreSQL",
      "content"     : "Ubuntu + OpenJDK + Tomcat + PostgreSQLThis page explains how to set up a Bonita Platform in a specific environment. This environmentincludes the following set of components:Operating SystemJava Virtual MachineDatabaseInstallCreate databases and userEnable prepared transactionsApplication ServerInstall Tomcat 8.5Add JDBC driverBonita PlatformDownload and unzip the Bonita deploy bundleJVM system variablesAdd extra libraries to TomcatConfigure Bonita to use PostgreSQLLicenseDeploymentFirst connectionOperating SystemSimply follow a standard Ubuntu installation procedure. You won’t need any specific settings here.Note: make sure you got a text editor installed such as nano. In order to install it: sudo apt-get install nanoNote: we use aptitude command line tool to install packages such as OpenJDK or PostgreSQL. You can also use different tool suchas apt-get or a graphical package manager such as synaptic.Java Virtual MachineTo install the OpenJDK JVM you need to install the openjdk-8-jre-headless package:  Run the following command line: sudo aptitude install openjdk-8-jre-headless  If needed, type your Ubuntu user password  Type Enter to confirm that you want to continue installationTo check that Java is correctly setup in a console/terminal, type: java -version.You should get a similar message to the one below:openjdk version &quot;1.8.0_111&quot;OpenJDK Runtime Environment (build 1.8.0_111-8u111-b14-2ubuntu0.16.04.2-b14)OpenJDK 64-Bit Server VM (build 25.111-b14, mixed mode)DatabaseInstallTo install the PostgreSQL 9.3 you need to install the postgres-9.3 package:  Run the following command line: sudo aptitude install postgresql-9.3  If needed, type your Ubuntu user password  Type Enter to confirm that you want to continue installationCreate databases and userYou now need to create: a new PostgreSQL user and two new databases for Bonita, and grant the user the appropriate privileges to accessthe databases. In a terminal or console, type following commands:  Switch to a shell for postgres user account: sudo -u postgres -i  To create a new database user named bonita_db_user type: createuser -P bonita_db_user  Enter (twice) the password for the newly created database user. E.g.: bonita_db_password  Create a new database (for Bonita Engine) named bonita_db and give ownership to bonita_db_user: createdb -O bonita_db_user bonita_db  Create another database (for BDM) named bonita_bdm and give ownership to bonita_db_user: createdb -O bonita_db_user bonita_bdm  Exit postgres session, type command: exitYou can now verify that user and database are correctly created. In a terminal or console type following commands:  Start PostgreSQL client program by typing: psql -d bonita_db -h 127.0.0.1 -U bonita_db_user  Type the PostgreSQL user password. E.g.: bonita_db_password  You can run test query that should return 1: SELECT 1;  Now you can quit PostgreSQL client, type: qEnable prepared transactionsPrepared transactions is disabled by default in PostgreSQL. You need to enable it:  Edit the postgresql.conf configuration file: sudo nano /etc/postgresql/9.3/main/postgresql.conf  Look for the line with max_prepared_transactions (line 117)  Uncomment the line: remove # character  Change the value from zero to 100  Save modification and quit text editor  Restart PostgreSQL server: sudo service postgresql restartApplication ServerInstall Tomcat 8.5Run the following command lines:  sudo aptitude install curl  cd /tmp/  wget http://apache.mirrors.ionfish.org/tomcat/tomcat-8/v8.5.31/bin/apache-tomcat-8.5.31.tar.gz  sudo tar xzvf apache-tomcat-8.5.31.tar.gz -C /usr/share/tomcat8 --strip-components=1Tomcat 8.5 should now be installed on your computer. Now you should enable tomcat to be run as a service  sudo nano /etc/systemd/system/tomcat.service  Copy the following code into the file```[Unit]Description=Apache Tomcat Web Application ContainerAfter=network.target[Service]Type=forkingEnvironment=JAVA_HOME=Your Java HomeEnvironment=CATALINA_PID=/usr/share/tomcat/temp/tomcat.pidEnvironment=CATALINA_HOME=/usr/share/tomcatEnvironment=CATALINA_BASE=/usr/share/tomcatEnvironment=’CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC’Environment=’JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom’ExecStart=/usr/share/tomcat/bin/startup.shExecStop=/usr/share/tomcat/bin/shutdown.shUser=yourUserGroup=yourGroupUMask=0007RestartSec=10Restart=always[Install]WantedBy=multi-user.target```  Save and close the file  Reload the systemd daemon: sudo systemctl daemon-reloadIn case of problems with this part refer to the documentations pages How to Install and Configure Apache Tomcat 8.5 on Ubuntu 16.04Add JDBC driverYou need to include JDBC driver in Tomcat classpath:  Change to Tomcat libraries directory: cd /usr/share/tomcat8/lib  Install wget tool in order to be able to download JDBC driver: sudo aptitude install wget  Download the JDBC driver: sudo wget http://jdbc.postgresql.org/download/postgresql-9.3-1102.jdbc4.jarBonita PlatformDownload and unzip the Bonita deploy bundleDownload the Bonita deploy bundle from the Customer Portal(Subscription editions) or get the Community edtion. Instructionsbelow will be given for Bonita Subscription Pack. You can easily adapt files and folder names to your edition.  Go to Bonitasoft Customer Portal  In Download menu, click on Request a download  Select your version and click on Access download page button  On the download page, go to the Deploying Server Components section  Click on Download BonitaSubscription-x.y.z-deploy.zip link. If your server only has a terminal availableyou can copy the link and use wget to download the file or use SSH with scp command to copythe file from another computer.  Make sure that the BonitaSubscription-x.y.z-deploy.zip is located in your home folder (e.g. /home/osuser).If you type cd ~ &amp;amp;&amp;amp; ls you should see the file listed.  Make sure the unzip command is installed: sudo aptitude install unzip  Unzip the deploy bundle: unzip -q BonitaSubscription-x.y.z-deploy.zipFinally, make sure that the user that runs the Tomcat server, is the owner of all Bonita “home” files:  Change folders and files ownership: sudo chown -R tomcat8:tomcat8 /opt/bonitaJVM system variablesTo define JVM system properties, you need to use a new file named setenv.sh:  Copy the file from deploy bundle to Tomcat bin folder: sudo cp ~/BonitaSubscription-x.y.z-deploy/Tomcat-8.5.z/bin/setenv.sh /usr/share/tomcat8/bin/, where “x.y.z” stands for your current product version.  Make the file executable: sudo chmod +x /usr/share/tomcat8/bin/setenv.sh  Edit setenv.sh file: sudo nano /usr/share/tomcat8/bin/setenv.sh  Change sysprop.bonita.db.vendor from h2 to postgres  Change btm.root from ${CATALINA_HOME} to /opt/bonita/btm  Change bitronix.tm.configuration from ${CATALINA_HOME}/conf/bitronix-config.properties to /opt/bonita/btm/conf/bitronix-config.propertiesAdd extra libraries to TomcatBonita needs extra libraries such as Bitronix, in order to run on Tomcat:  Change to the Deploy bundle Tomcat lib folder: cd ~/BonitaSubscription-x.y.z-deploy/Tomcat-8.5.z/lib, where “y.z” stands for the last digits of the product version  Copy the libraries (.jar files) from the Deploy bundle to your Tomcat folder: sudo cp btm-2.1.3.jar btm-tomcat55-lifecycle-2.1.3.jar jta-1.1.jar slf4j-api-1.6.1.jar slf4j-jdk14-1.6.1.jar /usr/share/tomcat8/lib/ (carefully check and replace with the product versions you currently have)Configure Bonita to use PostgreSQLYou need to configure the data source for Bonita Engine.Warning: make sure you stop Tomcat before performing following operations: sudo service tomcat8 stop  Create new folders in order to store Bitronix files: sudo mkdir -p /opt/bonita/btm/conf &amp;amp;&amp;amp; sudo mkdir /opt/bonita/btm/work  Set the ownership of the Bitronix folder: sudo chown -R tomcat8:tomcat8 /opt/bonita/btm  Copy the Bitronix configuration files to /opt/bonita/btm/conf folder: sudo cp ~/BonitaSubscription-x.y.z-deploy/Tomcat-8.5.z/conf/bitronix-* /opt/bonita/btm/conf/  Edit bitronix-resources.properties file, comment (using #) h2 section, uncomment PostgreSQL exampleand update the username, password and DB name (“bonita” in the URL property) to match your configuration (e.g.bonita_db_user, bonita_db_password and bonita_db): sudo nano /opt/bonita/btm/conf/bitronix-resources.properties  Also in bitronix-resources.properties update the section for resource.ds2 (BDM data source) and set the value for the BDM data base (e.g. bonita_db_user, bonita_db_password and bonita_bdm)  Save and quit: CTRL+X, Y, ENTER  Copy the bonita.xml file (Bonita web app context configuration): sudo cp ~/BonitaSubscription-x.y.z-deploy/Tomcat-8.5.z/conf/Catalina/localhost/bonita.xml /etc/tomcat8/Catalina/localhost/  Edit the bonita.xml file by commenting the h2 datasource configuration (using ),uncomment PostgreSQL example and update username, password and DB name (bonita in the URL property) to match yourconfiguration (e.g. bonita_db_user, bonita_db_password and bonita_db): sudo nano /etc/tomcat8/Catalina/localhost/bonita.xml  Also in bonita.xml file update data base configuration for BDM to match your configuration (e.g. bonita_db_user, bonita_db_password and bonita_bdm)  Save and quit: CTRL+X, Y, ENTER  Copy and overwrite logging.properties file: sudo cp ~/BonitaSubscription-x.y.z-deploy/Tomcat-8.5.z/conf/logging.properties /etc/tomcat8/logging.properties  Copy and overwrite context.xml file: sudo cp ~/BonitaSubscription-x.y.z-deploy/Tomcat-8.5.z/conf/context.xml /etc/tomcat8/context.xml  Copy and overwrite server.xml file: sudo cp ~/BonitaSubscription-x.y.z-deploy/Tomcat-8.5.z/conf/server.xml /etc/tomcat8/server.xml  Edit server.xml (sudo nano /etc/tomcat8/server.xml) and comment out h2 listener line  Fix ownership on the copied files: sudo chown -R root:tomcat8 /etc/tomcat8LicenseIf you run the Subscription Pack version, you will need a license:  Generate the key in order to get a license:  Change the current directory to license generation scripts folder: cd ~/BonitaSubscription-x.y.z-deploy/request_key_utils-x.y-z  Make the license generation script executable: chmod u+x generateRequestKey.sh  Run the script: ./generateRequestKey.sh  For License type: enter 1 to select 1 - Case counter license. (Note: If your subscription type is cpu based, please refer to the knowledge-base in the customer portal)  You will get a license key number that you can copy. Make sure that you keep the brackets. If the key is separated by a linebreak, remove it and put the key on a single line.Connect to Bonitasoft Customer Portal  Go to Licenses &amp;gt; Request a license  Fill in the license request forms  You should receive the license file by email  Copy the license file to the Bonita “home” folder: sudo cp BonitaSubscription-x.y-Your_Name-ServerName-YYYYMMDD-YYYYMMDD.lic /opt/bonita/bonita_home-x.y.z/server/licenses/  Change folders and files ownership: sudo chown -R tomcat8:tomcat8 /opt/bonitaDeploymentDeploy the Bonita web application:Copy bonita.war to Tomcat webapps folder: sudo cp ~/BonitaSubscription-x.y.z-deploy/Tomcat-8.5.z/webapps/bonita.war /var/lib/tomcat8/webapps/Take care to set the proper owner: sudo chown tomcat8:tomcat8 /var/lib/tomcat8/webapps/bonita.warStart Tomcat: sudo service tomcat8 startFirst connectionYou can access the Bonita Portal using your web browser, just type the following URL http://&amp;lt;your_server_hostname&amp;gt;:8080/bonita (your_server_hostname can be either an IP address or a name).You can log in using the tenant administrator login: install and password: install.The first step is to create at least one user and add it to “administrator” and “user” profiles.",
      "url": " /bonita/7.7/installation/platform-installation-examples/ubuntu-openjdk-tomcat-postgresql",
      "author": "",
      "categories": "Installation, Platform installation examples"
    }
    ,
  

    "bonita-7-7-installation-upgrade-from-community-to-a-subscription-edition": {
      "title": "Community to Subscription upgrade",
      "content"     : "Community to Subscription upgradeUpgrading means moving from a Bonita Community edition environment to any Bonita Subscription edition environment.Warnings:  An upgrade can only be performed on a single Bonita  version. You cannot migrate to a new version at the same time as you upgrade to Subscription edition.Eg. Migrate from Bonita 7.3.3 Community edition to Bonita 7.3.3 Subscription edition.  After it is applied, an upgrade cannot be undone.An upgrade is performed in two phases.Bonita Studio upgradeBonita platform upgradeBonita Studio upgradeTo upgrade a Community edition Bonita Studio and its resources (such as process diagrams, data models), follow these steps:  Install a Bonita  Studio Subscription edition.  Export your resources from the Bonita Studio Community edition to .bos files. We recommend that you keep these resource files as a backup.  Import your resource files into the Bonita Studio in Subscription edition.The upgrade is performed automatically and silently when importing resources into Bonita Studio Subscription edition.Remember that an upgrade is a non-reversible operation: after your resources are imported in the Subscription edition, you will not be able to export from the Subscription edition Studio and then import them back into the Community edition.Bonita platform upgradeUpgrading a Bonita platform allows you to keep the platform data (process definitions, cases, BDM…) while benefiting from the Subscription edition features.The upgrade procedure is quite simple and only requires a limited service downtime (less than an hour for basic configurations).A Bonita platform upgrade can only be performed on the same database type.To upgrade a Bonita platform from Community edition to a Subscription edition, follow these steps:  Install the Subscription Bundle but do not start it. We will call this installation folder bonita-subscription.  Configure the Subscription installation to use your existing database editing the file &amp;lt;bonita-subscription&amp;gt;/setup/database.properties. Beware of backslash characters.  Shut down the Community server being migrated using the stop-bonita script, we will call this installation folder bonita-community.  Run &amp;lt;bonita-community&amp;gt;/setup/setup(.sh/.bat) pull to fetch your current Community configuration in &amp;lt;bonita-community&amp;gt;/setup/platform_conf/current and copy this last in a different folder, we will call this new folder bonita-community-configuration.  Backup your Bonita platform and databases.  Update the configuration using the Platform setup tool in bonita-subscription:  Create the folder &amp;lt;bonita-subscription&amp;gt;/setup/platform_conf/current, we will call it bonita-subscription-configuration.  Copy the content of the &amp;lt;bonita-subscription&amp;gt;/setup/platform_conf/initial to bonita-subscription-configuration.  In the bonita-subscription-configuration, reapply the modifications for all the folders but the one named tenants (use bonita-community-configuration as a reference).  Create the folder &amp;lt;bonita-subscription-configuration&amp;gt;/tenants.  For each folder contained in &amp;lt;bonita-community-configuration&amp;gt;/tenants.  We will call this folder bonita-community-configuration-tenant.  Create one folder with the same name as bonita-community-configuration-tenant in &amp;lt;bonita-subscription-configuration&amp;gt;/tenants, we will call it bonita-subscription-configuration-tenant.  Copy all folders with prefix tenant_template_ from bonita-subscription-configuration to bonita-subscription-configuration-tenant and remove the prefix in their names.  In the bonita-subscription-configuration-tenant, reapply the modifications (user bonita-community-configuration-tenant as a reference).Run &amp;lt;bonita-subscription&amp;gt;/setup/setup(.sh/.bat) push to push the migrated configuration bonita-subscription-configuration in database.Start the migrated platform using the start-bonita script located in bonita-subscription.The Upgrade is now finished, you can verify that you are now running a subscription edition in the portal user interface, the dialog displayed from the top right “Settings / About” menu should indicate the correct Subscription edition.",
      "url": " /bonita/7.7/installation/upgrade-from-community-to-a-subscription-edition",
      "author": "",
      "categories": "Installation"
    }
    ,
  

    "bonita-7-7-release-notes": {
      "title": "Release notes",
      "content"     : "Release notesNew values addedCollaborative development with Git (starting with Teamwork edition)Business data access control (BDM AC) (starting with Efficiency edition)Save a Form temporarily (starting with Teamwork edition)New case overview ImprovementsLDAP synchronizer to synchronize Custom User Information too (starting with Teamwork edition)[Readable UI Designer artifact names](ui-designer-overview.md#readable-page-name) in Bonita repositoriesUI Designer artifacts last update dateUI Designer logs separate from Engine logsA responsive login page BDM meta-information for Portal AdministratorNew layout for the Administrator Portal &quot;User details&quot; pageBonita Studio status bar and coolbarBusiness objects relationshipsApplication descriptor &quot;deploy&quot;Application descriptor refactoring upon a change on a profileFrench repository is now &quot;dépôt&quot;Official signatures on WindowsForm mapping API error messagesTechnology updatesSupported Tomcat versionHazelcast on AWSFeature removalsJasper 5 connectorAPI behavior changeUI Designer URL changeAdd comment with a Groovy script in an open caseDeprecated Workspace APILimitations and known issuesBug fixesFixes in Bonita 7.7.0AcknowledgmentsNew values addedCollaborative development with Git (starting with Teamwork edition)Working as a team on a Bonita project, securing resources on a shared server, and keeping track of the resources revisions is now possible with the integration of Eclipse EGit plug-in in Bonita Studio, as well as the creation of a dedicated gitignore file.Managing branches, viewing the differences between two revisions of a file, or between the local and remote repositories, as well as managing conflicts for a given file can be performed. Find more in the dedicated documentation page section and in the howto: Share a repository on GitHub.Combining Git capabilities with Bonita Continuous Delivery add-on offers best of breed technologies for multi-disciplinary teams to sustain a DevOps approach.Business data access control (BDM AC) (starting with Efficiency edition)It is now possible to protect the access to BDM data through REST API calls.This feature, BDM access control, is available in Bonita Studio and works as a white list mechanism: through access rules, access is granted to entire business objects or to some attributes only, so that only users mapped with the selected profiles can access the data.Help is provided on consistency checking between BDM, profiles, and BDM access control when changes are made on the BDM or the profiles.A “profile access” tooling is also provided, to validate BDM access by profile.This new resource can be installed and updated on a Bonita platform while BPM services are running, via the Administrator Portal.Save a Form temporarily (starting with Teamwork edition)When a form contains lots of fields, or when the user misses some information required to fill out the form at once, saving the form to complete it later is a need. This is now possible with the new “Save Button” widget, that can be added to any form.JavaScript information entered by the user is temporarily saved in the web browser local storage while the task is still in “pending” status. When the user comes back to the task, the values entered are displayed on the form, missing data can be added, so the user efficiently submits the form to either start a process instance or execute a task.New case overviewAlthough the default case overview page has always been customizable, it was an AngularJS page, not editable in Bonita UI Designer. Moreover, its history section reported actions that occurred in the past.The new default case overview page is now designed in the UI Designer and it displays the current available task(s) and, if available, the current assignee(s). You can export if from the Administrator Portal &amp;gt; Resources menu, as the “Autogenerated Case Overview” and import it in the UI Designer to make it suit your needs. As a Portal Administrator, in processes details pages, update the “Mapping” of “Overview” to replace it with your custom overview, and there you go.ImprovementsLDAP synchronizer to synchronize Custom User Information too (starting with Teamwork edition)More information than groups can now be synchronized from a Company’s LDAP into a Bonita organization: the LDAP synchronizer can input those additional fields into Custom User Information. Such information is defined in Bonita Studio, and viewed or edited in Bonita Administrator Portal, and is used in actor filters for better task allocation.Readable UI Designer artifact names in Bonita repositoriesNew pages, forms, layouts, and fragments created with Bonita UI Designer now use the name given by the developer as IDs in the repository.Easier to find when they need to be updated.For existing artifacts, nothing has changed: their IDs is a UUID. You can switch them to the new mechanism by renaming them.UI Designer artifacts last update dateLast update date of all UI Designer artifacts is not updated with the use of the preview any more. Only when changes are made.UI Designer logs separate from Engine logsIn Bonita Studio Help menu, you can now find UI Designer logs, distinct from Engine logs, to better monitor UI Designer activities.A responsive login pageThe login page, used in Bonita Portal as well as in the Living Applications, is now responsive, so as to look at its best on a desktop, tablet or mobile environment.BDM meta-information for Portal AdministratorSince installing or updating BDM requires BPM Services to be paused, such rights are only granted to the Technical User.However, since the Portal Administrator can now install and update the BDM Access Control file from the Administrator Portal, he can now get information on BDM status and last update date.New layout for the Administrator Portal “User details” pageAll details of a user in the organization are now diplayed on an AngularJS page of the Administrator Portal, bringing still more consistency to the Administrator Portal.Bonita Studio status bar and coolbarTo allow you to work in Bonita Studio while some back-end activities are taking place, especially in case of operations on remote repositories, the Eclipse status bar is now displayed at the bottom right hand corner of the studio window. To keep the same working space in the studio, we have set the default size of the coolbar at “small”. If you prefer big icons, with labels, go to “Edit &amp;gt; Preferences &amp;gt; Appearance” and set the “Coolbar default size” to “Normal”. You can also click on the little down arrow at the very right end of the coolbar to expand it.Business objects relationshipsThe default relationship type between business objects is now “agreggation”. It was “composition” before, which led to some validation errors: a single object cannot be linked to several parents with a composition relationship, but it can with an aggregation relationship.Application descriptor “deploy”Just like for profiles or BDM access control, there is now a “Deploy” option in the Application descriptor menu of Bonita Studio, on top of the toolbar button already available in the editor.Application descriptor refactoring upon a change on a profileWhen a change is made on a profile in Bonita Studio, the application descriptors that reference the profile are now refactored in Bonita Studio to take the change into account.French repository is now “dépôt”For local or shared repositories, Bonita Studio in French is now tuned to the official translation: “dépôt”.Official signatures on WindowsBonita binaries as well as Studio installer are now officially signed on Windows OS, to prevent useless security alerts.Form mapping API error messagesImprovements of messages in case of error on form mapping API calls have been done to explain the cause of error and give options for easier error recoveries.Technology updatesSupported Tomcat version  The supported Tomcat version for this new release is Tomcat 8.5.31, in the Bonita Studio as well as in the Tomcat bundle.Hazelcast on AWS  (Enterprise and Performance editions) Bonita 7.7 now supports the usage of Hazelcast on AWS out-of-the box. Previous versions requiredmodifying the Bonita installation.Feature removalsJasper 5 connectorJasper connector has been removed from provided connectors in Bonita Studio. If you have a process that depends on this connector and want to migrate in 7.7+, you have two options:  Export the Jasper connector from a previous Studio version  Download the connector from the community websiteThen just import the connector using the Development &amp;gt; Connectors &amp;gt; Import connector... menu.API behavior changeUI Designer URL changeThe UI Designer webapp embedded in Bonita Studio is now deployed with the name “bonita” (instead of “designer”) in its own container (different from the one of Bonita Engine and Portal). As a result, it is now accessible through the URL http://localhost:/bonita instead of http://localhost:/designer.This name update was a requirement in order for the UI Designer preview to continue working with bonita portal resources URLs starting with &quot;/bonita&quot;.Add comment with a Groovy script in an open caseaddProcessComment() method in ProcessRuntimeAPI has had a behavior change that went unnoticed in 7.4.0:when called from a groovy script, it will systematically write the process comment as having been made by the “System” user, while previously it was using the user executing the task. It is caused by the fix to the bug BS-14276. Operations on human tasks are now asynchronous (as it should have been from 7.0.0). Hence all methods relying on the Session to get the userID, as addProcessComment() does, will find -1 as a value.All scripts that want to perform an action on behalf of the user executing the task, should rely on the task assignee to do so, as there is no user logged during the script execution hence the -1 value in the sessions; as the execution is asynchronous.This behavior will not be reverted to pre 7.4.0 state for the addProcessComment() method, or any other method that might suffer from a similar problem.A new method has been introduced : addProcessCommentOnBehalfOfUser(), that will allow to replicate the previous behavior of the addProcessComment() method.This new API method is designed so that a script can leave  a comment on behalf of the user.Note: This use case has never been considered before. As a comment was thought to be left by the user himself / herself.In practice, it means that if your process has been designed prior to Bonita 7.3 :  If you are calling the method outside of groovy scripts, you can use the method you like ( addProcessComment() being probably more practical), and your process will not require any additional modifications  If you are calling the method from a groovy script, in a process designed prior to 7.3 and migrated to 7.7, and want to maintain the previous behavior, you will have to modify your groovy scripts to use the new API method.  If your process has been designed in Bonita 7.4, 7.5 or 7.6, the behavior of your process will not change. You will however have now access to a new API method upon migration, which will open new possibilities.Deprecated Workspace APIThe Workspace API tooling (headless studio build) has been deprecated. You are recommanded to use the LA builder which is part of the tooling suite of Bonita Continuous Delivery add-on.Limitations and known issues  The EGit plug-in, on which relies the Bonita Studio Git feature, integrates many features, and only a few have been translated to French and English so far. In order to contribute the best translation to the Eclipse community, we need more time. Therefore, translations in French and Spanish will all come in 7.7.1. Stay tuned.  MacOS environment: starting from MacOS El Capitan 10.11.4 (March 2016), new security rules block the launch of Bonita Studio. You must temporarily remove security on App launching in System Preferences&amp;gt;Security &amp;amp; Confidentiality.  Process display name is now used everywhere in Bonita Portal (when it has been set in the process design) except in the default provided Jasper reports.  Since 7.6.0, the default living application layout does not re-encode the URL passed to the living application iframe anymore.Bug fixesFixes in Bonita 7.7.0Fixes in Documentation  BS-16862 Cannot fully deploy a REST API extension with Engine APIs  BS-17598 Documentation steps about “Create your own password validator” lead to maven error: Could not find artifact  BS-17659 “BDM Management in Bonita Portal” section leads customer to believe updating the BDM in production is supported  BS-17699 Broken link to 7.6 Engine Javadoc  BS-17770 Studio preferences Documentation still speaks about Studio profiles  BS-17795 Single sign-on with SAML not described with Wildfly  BS-17930 Documentation about ‘Changing technical user’ needs more detailed explanations  BS-18134 Workaround or guidance missing for time-zoned Java 8 Date types usage in REST API extensions  BS-18167 Live update of script fails if a new “provided variable” is added to the scriptFixes in Engine componentBS-15900 EventTriggers are not always deleted from the EVENT_TRIGGER_INSTANCE table  BS-16750 FILE contract input type generates a big usage of the heap memory with big documents  BS-17009 Hazelcast jar is no more available for AWS Discovery  BS-17267 engine-server temp folder keeps growing in size on windows environment  BS-17464 CMIS list documents connector and probably the others CMIS connectors generate a ClassNotFoundException on WildFly only  BS-17514 Setup tool should release files after a pull operation  BS-17624 7.3.3 and prior java client failed to deserialize an object when communicating with java Engine API 7.4.0 or higher  BS-17679 Prevent unsupported use case when defining BDM  BS-17716 Setup tool does not prevent the removal of critical configuration files  BS-17725 add() to an empty multiple BO (List) is failing  BS-17726 Case counter for Unlimited instances license is not incremented  BS-18196 BoundaryEvent stays behind in ‘waiting’ state if task is skipped  BS-18201 ProcessAPI.searchConnectorInstances fails with SearchOptions using .filter(ConnectorInstancesSearchDescriptor.STATE, ConnectorState.FAILED)  BS-18208 logged user / task assignee : Task Operation behavior has changed  BS-18228 Terminate and End event is not terminating the process after a failed task with a boundary event had been skipped  BS-18336 HazelcastSerializationException: Failed to serialize ‘org.bonitasoft.engine.work.WorkDescriptor’  BS-18350 Fix Aws discovery sample hostHeader in bonita-platform-sp-cluster.properties  BS-18389 Tomcat outputs TechnicalLoggerSLF4JImpl for all logs in subscription editionsFixes in Studio componentBS-17267 engine-server temp folder keeps growing in size on windows environment  BS-17749 : surounded with space chars in task name generates an error when user clicks on the task in the portal’s tasklist  BS-17939 Content Assist doesn’t work without keyboard shortcut in Groovy expression editor  BS-18101 Process contract inputs missing from process-design.xml when building with BonitaStudioBuilder  BS-18154 Catch message - Correlation mapping value doesn’t display expression editor properly  BS-18178 Studio splash screen doesn’t work on windows  BS-18191 Automatic dependency resolution can fails in Groovy Expression Editor  BS-18197 Studio deploys too many sub process versions and the wrong one is used at run-time.  BS-18269 “Create a parameter…” wizard is not popping-up  BS-18270 Parameter type is lost on version when re entering process to call section  BS-18301 Welcome page displays outdated RSS flux content in welcome page  BS-18343 Using loop “for” in Input Constraints fails with a validation error and a warning in the Editor  BS-18344 CPU spike and GC overhead limit exceeded when using groovy editor for Inputs constraints  BS-18381 Installer fails to launch BonitaStudio at end, if path contains space charactersFixes in UI Designer componentBS-16696 Autocomplete widget issue with asynchronous data (Rest API call)  BS-16997 File viewer preview display cut and not scrollable with pdf file in Mobile portal  BS-17809 HTML is not interpreted anymore after page import in studio 7.7.0 from 7.6.x and lower  BS-18062 UI Designer Devices size Preview doesn’t reflect the one selected in the main UI Designer  BS-18179 Form import in UI Designer displays a non-translated artifact type  BS-18222 Bonita API resource not exported in page.properties when single resource call with id  BS-18256 Infinite loop creating css file after migration error  BS-18385 URL parameters are not decoded in UI DesignerFixes in Web componentBS-16440 Instance counter starts one day before subscription start date  BS-17924 CSRF cookie needs to be handled when implementing authentication manager  BS-18137 Changing filter does not refresh the case list properly  BS-18149 REST API Not compliant with the If-Modified-Since HTTP header  BS-18223 Licensing admin page does not handle unlimited case number correctly  BS-18231 Select widget fails to pre select Value  BS-18335 Process visu is not display when process contains an intermediate catch event signal  BS-18341 Error message not explicit in Portal when change password policy enforced  BS-18367 Click inside a Living application raises a warning in the logs and a 404 on an undefined URL path  BS-18375 User profile - Done Task list cannot be ordered on ‘performed date’ column or any other date column; it used to be possible in 7.2.2AcknowledgmentsThank you Jerome Ventribout (Engine) for your contribution.",
      "url": " /bonita/7.7/release-notes",
      "author": "",
      "categories": ""
    }
    ,
  

    "bonita-7-8-application-and-process-design-application-and-process-design-overview-comparison-of-7-x-and-6-x": {
      "title": "Comparison of 7.x and 6.x",
      "content"     : "Comparison of 7.x and 6.xPackaging comparisonConcept comparisonFeature improvements in Bonita StudioFeature improvements in Bonita PortalFeature improvements in Bonita EnginePackaging comparisonIn Bonita 6.x, two versions are available for download:  the Bonita Subscription Pack edition version for the Enterprise, Performance, Efficiency, and Teamwork editions  and the Bonita Community edition version for the Community editionFor each version, there are several packaging options.See the Installation overview.Concept comparisonFeature  Bonita 6.x  Bonita 7.x  Contract  Not in 6.x  A contract defines a clear separation between the process and the forms, making it possible to update the process user interface on the live system. See Contracts  Live update  Not in 6.x  A live update is a change that is applied to a process or application on the live system, without needing to pause the platform or take a process out of service. See Live update  Form mapping  Not in 6.x  A form is mapped to process instantiation, to case overview, or to a task. Any form that respects the relevant contract can be used. This separation between the process and the forms makes it possible to to the live update feature  Business data  A process or application can use business data managed by the Bonita Platform. (Subscription editions only)  Now available in all editions. See BDM  Actor mapping  Each actor in a process can be mapped to a Group, Role, Membership or User within an organization. The mapping can be refined using an actor filter.  No change. See Actor mapping and Actor filtering  Environments  An Environment is a set of configuration information for a particular process. It contains the following information:  actor mapping, actor filters, parameters, connector implementations, dependencies for processes and applications. By having these Environments set up in the Studio, the developer can export processes that are ready to be run for a specific target platform. At any point in time, there is only one active Environment in Studio  No change. See Environments  Parameters  A Parameter is configuration information that can be attached to a process. Parameters are configured for an Environment. Parameter values can be updated at runtime.  Now available in all editions. See Parameters and Environments  Workspace API  The Workspace API is provided to generate .bar files from the command line, ready for production. .BAR files are for deployment only and cannot be read by the Studio. .BOS files are for Studio interchange only and cannot be deployed to production. Each file format is optimal in term of content and is optimized for the target use case  No change. The Workspace API can export pages that are mapped to process instantiation, process overview, or to tasks. It cannot export application pages that are not elements of a process. See Automating process builds  Feature improvements in Bonita StudioFeature  Bonita  6.x  Bonita 7.x  UI designer  Not in 6.x  A new development environment for creating sophisticated, data-driven pages and forms for process-based applications. The UI designer is accessed through the Studio. See live update. The 6.x form tooling is still supported, so that you can continue to run 6.x processes and to ease migration  Process migration  A process exported from Bonita Open Solution 5.9 or 5.10 must be modified to run in Bonita. When you import a process from 5.9 or 5.10 into Bonita Studio, you see a report that guides you through the changes that are necessary. See Migrate a process from Bonita Open Solution 5.9 or 5.10  A process created in Bonita 6.x will run in 7.x without any modification. However, to take advantage of the new features in Bonita 7.x, you need to add contracts and migrate the forms. See Contracts and Migrate a form from 6.x  Application theme and layout  Not in 6.x  You can create custom layout and theme for a process-based application constructed from UI designer pages and forms. See Appearance  REST API extensions  Not in 6.x  You can create custom REST API extensions, to supplement the standard REST API interfaces or to optimize REST API calls used UI designer pages and forms. See REST API extensions  Improved UI  Not in 6.x  Improvements to the Details panel so that tab structure reflects typical worksflow  Variable definition  Easy variable definition for process data, using the expression editor to set the initial or default values  Easy variable definition for both business data and process data. See Business data model and Process variables  Expression Editor  This expression editor enables a developer to define a constant, an expression, a comparison or a Groovy script. Very often, there is no need to resort to a Groovy script, a constant, a comparison or an expression being enough. A number of predefined expressions are provided.  Convenience Groovy functions are provided to help write scripts more quickly. These functions provide simple access to frequently used information, such as information on the current user and the process initiator. It is now very easy to retrieve the manager or the email of the current user or the process initiator  No changes to the expression editor. It is not available from the UI designer. See Using expressions and scripts  Validation  The validation view shows all validation errors in the same location in the Studio. This enables developers to quickly locate validation errors wherever they appear  The existence of mapped forms is verified, but the form definition is not validated for forms created with the UI designer. See Process testing overview  Iteration  Iteration can be by loop or by multi-instantiation. Multi-instantiation no longer requires a specific Bonita connector nor implementation of a specific java class. You can use a variable of type Collection or specify the cardinality using an expression. The completion condition is a simple expression  No change. See Iteration  Connectors  A number of standard connector are provided, and it is possible to create your own custom connectors  No change. See Connectivity  Organization for testing  Several organizations can be defined in the Studio, for test purposes. The organization can be then pushed to the Portal (published) for testing, or exported and imported into the Portal for deployment  No change. See Organization overview  Anonymous user  You can define a process that has an unknown initiator. See Start a process as an anonymous user  Not supported  Feature improvements in Bonita Portal| Feature  | Bonita 6.x  | Bonita 7.x  | | ——– | ————— | ————— | | Dynamic reconfiguration  | The process configuration is defined in Bonita Studio. With the Enterprise or the Performance Edition, you can modify the configuration in Bonita Portal after the process is deployed. You can dynamically update the following configuration items: actor mapping (all editions), parameters (Enterprise or Performance edition), connector implementation (Enterprise or Performance edition), dependencies (Enterprise or Performance edition), actor filter replay by Java call (Enterprise or Performance edition) | New live update feature expands the dynamic reconfiguration to other editions and to other items. The following items can be updated “live”: Groovy scripts (Efficiency, Performance and Enterprise editions), process forms (Efficiency, Performance and Enterprise editions), actor mapping (all editions), parameters (all editions), connector implementation (all editions), dependencies (all editions), actor filter replay by Java call (Enterprise or Performance edition). See Live update  || User interface  | For users, a simple interface for starting cases and performing tasks. For administrators, an interface for managing processes and applications, and the organization, with views for monitoring process and case status  | No change for users. For adminsitrators, the case process and case monitoring views have been improved, new live update features have been added, and the application editor has been improved. See Bonita Portal interface overview  || Task management  | Users can choose how to manage tasks. They can perform one task after another in list order, or select my tasks for themselves then perform them in the order they choose.  | No change for users. An administrator or process manager (or a user with an appropriate custom profile) can see at a glance that status of all tasks in a case, and can perform a task for a user. See Manage a task  || Mobile web portal  | A specially designed mobile interface to Bonita Portal enables users to carry out tasks from a browser on mobile devices  | No change. See Mobile overview  || Subtasks  | A Subtask is a part of a self-assigned existing task. A Subtask must be assigned to a specific person, by name. The assignee can be the creator  | No change. See Manage a subtask  || Replay tasks and connectors in error  | It is now possible for the administrator to replay a task or a connector that is in error. This enables a resolution of failed tasks and better service to end users. and connectors in error  | No change. See Process configuration overview and Mobile overview  || Anonymous user  | You can now complete a task as an anonymous user, that is, without being registered in the organization. For example, on an e-commerce site, a new user can browse stock and save items to a basket, then register with the site if they want to save their basket for later or to buy something  | Not supported  |Feature improvements in Bonita Engine| Feature  | Bonita 6.x  | Bonita 7.0/1/2  | Bonita 7.3 | | ——– | ————— | ——————- | ————– | | bonita_home  | A separate bonita_home for each edition and for cluster  | A common  bonita_home used for all editions, simplifying download and installation. Improved structure for bonita_home/server that is easier to maintain and customize. See Bonita Home  | No more bonita_home. See  platform setup",
      "url": " /bonita/7.8/application-and-process-design/application-and-process-design-overview/comparison-of-7-x-and-6-x",
      "author": "",
      "categories": "Application and Process Design, Application and process design overview"
    }
    ,
  

    "bonita-7-8-application-and-process-design-application-and-process-design-overview-design-methodology": {
      "title": "Design methodology",
      "content"     : "Design methodologyThis page presents a summary of the phases in creating a process-based application using Bonita:Setting objectivesDefining application scopeDrawing the process diagramDefining the process detailsDesigning the applicationTestingDeploymentSpecifying the organizationMonitoring and improvementSetting objectivesObjectives are a vital part of any project to implement or improve a business application or process. If you set measurable objectives, you can set performance indicators in a process to monitor how well it meets objectives.Objectives can be qualitative or quantitative, and should cover the expected lifecycle of the process. For example, if you want to create an automated process to replace an existing process that uses paper forms, you could define objectives for how long it takes to fill out a form in the initial roll-out period, and after 6 months when users have become familiar with the new system. You could also define an objective for the savings achieved by no longer storing paper documents, or quality objectives that the process mustmeet before deployment.Bonita will not help you to define the objectives for a project, but it will help you create metrics to check that your objectives are met.Defining application scopeDefining the application scope means defining the people who use it and their usage patterns, the information concerned, the level of security needed, and connections to external systems.  Application or process: Is the process completely automatic with no human users? Does the process interact with other processes that have human users? If there is no human interaction, there is no need to create an application.  People: Who owns the application? Who owns the processes in the application? Who uses the application and processes? Who are the keyusers? Who just needs to know the application exists? When and how is it used? Is it used frequently, on a schedule, in emergencies? Isit used by just one person or by many people at the same time?  Information: What business information does the application need, and what information does it deliver? What are the expected results of the processes, and of the application?  Security: What kind of controls are needed for people using the application? Is a simple login sufficient?  Connections: What connections to external systems are needed? Does the application need to access information in a database, to send email, or to use some other business application? Do these external systems have APIs accessible by Java?Drawing the process diagramUsing Bonita Studio, you can quickly sketch out the process flow, and create a diagram of the starting points, main steps, branches, decision points, and end points. Do this for each process in the application. At this stage, get agreement from the process owner and the key users before going further.Things to think about:  Most business processes have a single start and a single end, but it is possible to have multiple starts and ends.  If there are activities that happen in parallel, use symmetric gates to map out the beginning and end of the parallel phases of the process.There is no requirement to create a diagram for an application, because it is not executable in the same way as a process.However, you should create a specification so that you can get agreement from the application owner and key users. One option is to use the Bonita Studio to create a diagram showing the usage patterns.This diagram would not be executable, and should not be exported as a /bar file, nor deployed.Defining the process detailsIn the development phase of each process in an application, there are several aspects to define:  Data. Define the inputs and outputs of each step. Define the data model, sourcing and storage, and data types.  Step details. Make sure each step is the correct type, and has a descriptive name.  Transition and flow details. Make sure all transitions have a descriptive label. Make sure there is always a default path at each branch in the process. If the process contains a loop on a step, make sure there is a maximum number of iterations defined.  Connectors. Attach connectors to the relevant steps. Note that it can be more efficient to split steps with both user activity and connector activity into two steps, a human task for the user and a system task for the connector. Configure each connector.  Actors. Define the actor for each step, applying an actor filter where necessary.  Monitoring: Specify the key performance indicators (KPIs) to be collected. These will enable you to monitor the application using a business activity monitoring (BAM) application. Make sure that the KPIs will provide the data required to monitor the objectives you defined for the process.  Exception handling: Plan for how errors and unexpected events will be handled. Consider whether it is necessary to stop the case or process, or whether the case can take an alternate path. Decide whether to use event sub-processes.  Process maintainability. Add annotations to explain the process. Make sure all elements have descriptive labels. Generate the process document and check it.Designing the applicationWhen the application definition and process definitions are complete, you will have defined what interaction users have with application pages and with each process task. Create the pages and forms needed.Use the Bonita Studio UI designer to create pages and forms by manipulating widgets.You can add, remove, and reorder widgets, and you can change the appearance of a form.TestingTest each process individually before testing the application as a whole.You can validate a process definition in Bonita Studio, in teh Details panel, Validation status tab. The validation status indicates any errors or omissions in the definition. Correct any errors flagged in validation before testing the process.Bonita Studio includes an environment for testing a process locally, before deployment. You can test the process without connectors by clicking Debug, test each connector independently using teh connector wizard Test button, then run the process by clicking Debug to test it with connectors. You need to configure the process before testing it locally.Bonita Studio contains an example organization, ACME, which you can use for testing a process or application.When local testing is complete, depending on the environment where the application will run, you might also need to test the processes in a realistic system before putting the application into production, or perhaps to put it into production but for a limited number of users or cases.DeploymentWhen testing is complete, the processes are ready to be deployed in Bonita Portal and the application is ready to be put into production. You need to configure each process for deployment before putting it into production.Specifying the organizationBefore you can run a process in production, you need to define your organization with entries for all process users, groups, and roles. You also need to map the process actors to the real people who will carry out process steps. You can manage your organization in Bonita Portal for a production system. While you are in the testing phase, you can manage the organization in Bonita Studio.Monitoring and improvementAfter deployment, you can monitor usage and collect key performance indicators, to assess how well the process is meeting the objectives you defined.",
      "url": " /bonita/7.8/application-and-process-design/application-and-process-design-overview/design-methodology",
      "author": "",
      "categories": "Application and Process Design, Application and process design overview"
    }
    ,
  

    "bonita-7-8-application-and-process-design-application-and-process-design-overview-getting-started-tutorial": {
      "title": "Getting started tutorial",
      "content"     : "Getting started tutorialThis tutorial explains how to create an application that includes a process. The application is created using the Bonita Community Edition, and uses features that are available in all editions. The example application is a business travel tool.Important: these instructions are also available as a video. The complete solution is available on GitHub.Here is the use-case: An employee opens the Travel Tool application to view their pending and approved travel requests. They create a new travel request. Then the request is sent to the employee’s manager.The manager reviews the request and approves or refuses it.In a real travel management application, there would be several process steps after approval: estimating costs, possibly getting a second level of approval if the cost passes a certain threshold, submitting an expenses claim after the travel, reviewing the expenses claim, escalating anything out of policy, and authorizing payment. However, for this tutorial you will consider only the first part of the process, where a travel request is submitted and then reviewed.This tutorial assumes that you are a developer using Bonita for the first time.It gives instructions for using Bonita Studio, the UI Designer, and Bonita Portal. It assumes you are familiar with JavaScript, JSON and REST APIs.Use Bonita Studio to define your process, including using the UI Designer to create pages and forms. Then use Bonita Portal to build the application.This is the recommended sequence for creating an application, but generally application pages, data model and processes are defined in parallel and evolve as you go deeper in the application details:Design application pagesCreate the data modelCreate the process definitionCreate formsRun processBuild the applicationDesign application pagesThe first step in creating an application is to design the application pages in the UI Designer using dummy data, creating a prototype application as seen by users. This enables you to review the application with the stakeholders and get validation of the application design before proceeding to more complex tasks.The Bonita Studio UI Designer is an environment for creating application pages and forms. To start the UI Designer, click the UI Designer icon in the Bonita Studio coolbar (at the top of the screen). The UI Designer opens in a browser.The travel tool has a home page that displays a list of pending and approved travel requests to the current user. It contains a button for starting a new travel request.There are also some forms that are associated with the travel management process:  Create a travel request  Review a travel request and approve or refuse itThe easiest way to create these forms is from the process definition, so that is what you will do later in the tutorial.The following sections explain how to create the application page and then populate it with dummy data. At any stage, you can click Preview and see a preview of the layout of the page as it will appear to users.Remember to click Save to save your work frequently.Create travel tool home pageIn Bonita Studio, start the UI Designer by clicking the icon in the coolbar. This opens the UI Designer in your browser, at the home page.  In the UI Designer home page, click on the Create button. This brings a pop-up.  In the pop-up, set the type to Application page and name to TravelTool. The name must not contain spaces or special characters. This name is used in Bonita to identify the page. It is not displayed to the application user.  Click on Create. This opens the new page in the Page editor.Create the page structure by dragging widgets from the palette on the left and dropping them on the whiteboard (the central panel).Specify the characteristics of a widget by selecting it and updating the properties in the panel on the right. Add the following widgets:  A TEXT widget, with the Text property set to username.  A TITLE widget, with the Text property set to Travel tool.  A TEXT widget, with text introducing the application: This page lists your pending and approved travel requests.  A CONTAINER for the user pending requests, with the following widgets:  A TITLE widget with a lower title level than the page title (for example, “Level 3”), with the text My pending requests.  A TABLE widget for listing pending travel requests, with the following properties:  Headers set to Departure date, Number of nights, Hotel needed, Destination, Reason  Columns key set to departureDate, numberOfNights, hotelNeeded, destination, reasonA LINK widget with text Create new travel request and Style property set to primary.A CONTAINER for the user approved requests, with the following widgets:  A TITLE widget with a lower title level than the page title (for example, “Level 3”), with the text My approved requests.  A TABLE widget for listing approved travel requests, with the following properties:  Headers set to Departure date, Number of nights, Hotel needed, Destination, Reason.  Columns key set to departureDate, numberOfNights, hotelNeeded, destination, reason.When you have added the widgets, click Preview to see how the page displays. Change the arrangement of the widgets in the whiteboard using drag and drop and using the Width property, until you are happy with the result.Remember to click the topmost Save button, or type Ctrl+S to save your work.Add dummy dataNow use some dummy data to see how the tables will look when there is data. First create a variable containing the data, and then bind the variable to the widget Value property. In the application, the real data will be business data retrieved by a REST API call. The dummy data for the travel requests is in JSON. You need two JSON variables, myPendingRequests and myApprovedRequests.To create myPendingRequests:  In the Variables panel (at the bottom of the page), click Create a new variable.  Enter the variable name, myPendingRequests.  Select the JSON type.  Enter this value:  [  {  &quot;userId&quot;: 3,  &quot;destination&quot;: &quot;Grenoble&quot;,  &quot;departureDate&quot;: &quot;2016-02-09&quot;,  &quot;numberOfNights&quot;: 1,  &quot;hotelNeeded&quot;: true,  &quot;reason&quot;: &quot;Bonita 7.2 launch&quot;,  &quot;status&quot;: &quot;pending&quot;,  &quot;refusalReason&quot;: &quot;&quot;  },  {  &quot;userId&quot;: 3,  &quot;departureDate&quot;: &quot;2016-10-09&quot;,  &quot;numberOfNights&quot;: 3,  &quot;hotelNeeded&quot;: false,  &quot;destination&quot;: &quot;Paris&quot;,  &quot;reason&quot;: &quot;Open source conference&quot;,  &quot;status&quot;: &quot;pending&quot;,  &quot;refusalReason&quot;: &quot;&quot;  },  {  &quot;userId&quot;: 3,  &quot;departureDate&quot;: &quot;2016-07-07&quot;,  &quot;numberOfNights&quot;: 4,  &quot;hotelNeeded&quot;: false,  &quot;destination&quot;: &quot;San Francisco&quot;,  &quot;reason&quot;: &quot;BPAD training&quot;,  &quot;status&quot;: &quot;pending&quot;,  &quot;refusalReason&quot;: &quot;&quot;  }  ]  Click Save.  Select the table widget for the pending requests.  In the Content property, click the link icon at the right (“fx”), then click in the box and choose myPendingRequests from the list of variables (start typing the variable name to get auto-completion).  Click Preview to see the page with data for pending requests.  Now follow the same steps to create myApprovedRequests with the following content:  [   {   &quot;userId&quot;: 3,   &quot;destination&quot;: &quot;Tokyo&quot;,   &quot;departureDate&quot;: &quot;2016-10-10&quot;,   &quot;numberOfNights&quot;: 5,   &quot;hotelNeeded&quot;: true,   &quot;reason&quot;: &quot;BPM for HR conference&quot;,   &quot;status&quot;: &quot;approved&quot;,   &quot;refusalReason&quot;: &quot;&quot;   },   {   &quot;userId&quot;: 3,   &quot;departureDate&quot;: &quot;2015-12-11&quot;,   &quot;numberOfNights&quot;: 3,   &quot;hotelNeeded&quot;: false,   &quot;destination&quot;: &quot;San Francisco&quot;,   &quot;reason&quot;: &quot;Meetings with team&quot;,   &quot;status&quot;: &quot;approved&quot;,   &quot;refusalReason&quot;: &quot;&quot;   }  ]  When you have defined this variable, select the table widget for the approved requests and set the value of the Content property to myApprovedRequests (remember to click on the “fx” icon).Review and improve the pageYou now have a prototype of the TravelTool page with dummy data. View the prototype, and adjust the arrangement of the widgets until you are happy with the appearance of the page. You can drag and drop widgets to reorder them, and you can change properties including Width and Alignment. For example, to improve this page, you could make the following changes:  Select the username widget, and change the Alignment to right.  Select the “Travel Tool” title and drag it beside the username. The size of the username widget will automatically adjust, so that both widgets are in the same row.  Select the “Create new travel request” link widget and change the Alignment to center.Create the data modelThere are two stages to defining variables: first you define the business data model, and then you specify how the process handles objects of the model. The model is defined as a set of Java classes, and the process uses instances of these classes. If you are not familiar with the terminology, all you need to remember is that the model is the global definition, with a collection of structured variables.For your process, you select the subset that is relevant.First, we will create the business data model, which will then be available for all processes. We will use a model with one object:  TravelRequest contains the details of the travel that is being requested and its approval status.To define the business data model:  Go to the Development menu, choose Business Data Model, and then choose Manage…. This opens the dialog to manage the business data model.  Beside the list of business object types, click Add. A temporary type name, such as BusinessObject1 is added to the list.  Click on the temporary name, and change it to TravelRequest.  Select the TravelRequest business object type, and add its attributes. This table shows the attributes and their types:Variable  Data type  Mandatory  userId  Long  yes  departureDate  Date Only  yes  numberOfNights  Integer  yes  hotelNeeded  Boolean  yes  destination  String  yes  reason  String  yes  status  String  yes  refusalReason  String  noTo add each attribute:  In the Attributes tab, click Add. A temporary attribute name (“attribute1”) is added to the Name column.  Change the temporary name to the attribute name.  Select the type from the drop-down list. To display the list, click at the right end of the Type column.  There are no Multiple attributes in this object, so you can ignore this column.  In the Mandatory column, check the box for the attributes that are mandatory.  Add a custom query that you will use to search for data using both the userId and the status:  In the Queries tab, select Custom.  Click Add. A temporary query name (“query1”) is added to the Name column.  Change the temporary name to findByUserIdAndStatus.  Click in the query column, and then click the edit icon at the right. This opens a popup with a proposed custom query that uses all the attributes.  In the JPQL Query field, remove these lines:AND t.departureDate = :departureDateAND t.numberOfNights = :numberOfNightsAND t.hotelNeeded = :hotelNeededAND t.destination = :destinationAND t.reason = :reasonAND t.refusalReason = :refusalReason  In the Parameters list, delete all the attributes except userId and status.  Click OK to save the query.Click Finish to save the business data model.Create the process definitionCreate the diagramThe first stage is to create the new diagram, which you do using Bonita Studio. While you are working on a diagram, save your work from time to time, by clicking the Save icon in the coolbar (at the top of the screen) or typing CTRL+S.Create the diagram as follows:  Click New diagram on the Bonita Studio Welcome page. This creates an almost empty diagram for you to start updating:  The large rectangle with a name at the left is the pool.  Inside the pool there is a lane, which is also a rectangle. You can see the border of the lane at the left side, beside the pool name. The other borders of the lane coincide with the pool border so are not visible.  The green circle in the lane is a start event.  The blue box in the lane is a human task.The first thing to do is to give the diagram a more descriptive name. Click on the diagram outside the pool, then go to the Details panel. This is the area on the bottom-right of the screen.  In the General tab, Diagram pane, click Edit… next to the Name field.  Enter the new diagram name, Simple Travel Request, in the popup and click OK. You can see in the tab at the top of the whiteboard that the diagram name has changed.  Now give the Pool a more descriptive name. Select the pool by clicking in the space between the pool border and the lane border at the left side of the diagram.Then go to the Details panel, General tab, Pool pane, and click Edit… next to the Name field. Enter the new pool name, Travel Request, in the popup.When you have renamed the diagram and the pool, the diagram looks like this:  This process starts when an employee fills in a travel request form. You do not need to create a task for this because it is this action that triggers the process to start. This is known as process instantiation. A form for process instantiation is defined at the pool level.  Define what happens after the user submits a request form: the manager reviews the travel request and approves or refuses it. You can use the example task that was added to the diagram automatically. Click on the task name and change it to Manager review.  In a future evolution of this process, the next task would be to send the travel request details to the admin team so they can handle the booking. For now, though we are just interested in getting the first part of the process working, so add an end after the review task. You can do this by dragging the end icon (red circle) from the palette to the whiteboard, and then connecting to the Manager review task with a flow element.When you have finished, your diagram should look like this:Define business variablesYou have already defined the data model, but now you need to specify how the model is applied to this process.Define a travelRequest business variable, which is an instance of the TravelRequest object type. Follow these steps:  Select the pool.  Go to the Details panel, Data tab, Pool variables pane and click Add… beside the Business variables box.  In the Name field, type travelRequest.  Add a description to document your development if you want to.  From the Business Object list, choose TravelRequest.  Do not configure the default value. The default value uses information that is in the contract, so you will define it later.  Click Finish to save the definition.The attributes of travelRequest are the information that is used in the process. There are no other variables to define.Create contractsA contract is the specification of what a form must return to the process instance. Define a contract for process instantiation, and for each human task.The contract does not need to include information that is sent from the process instance to the form. This is included in the context, which is the set of information passed to the form. You cannot configure the context.The information that you specify in the contract is a subset of the information used in the process.To specify the process instantiation contract, select the pool and follow these steps:  Go to the Details panel, Execution tab, Contract pane.  In the Inputs tab, click Add from data…. This opens a popup for creating the contract using the business data variables that are defined for the process.  Select travelRequest and click Next.  Specify the attributes to include. By default, all the attributes are checked, so uncheck those that are not relevant: userId, status and refusalReason.  Leave the radio button on automatic generation of initialization script.  Click Finish and safely ignore the warning related to contract generation as we will take care of those in time.Now that the case instantiation contract is set up, we will add two constraints on its values. The first one will ensure that the departure date is in the future and the second will validate that the number of nights is greater or equal to zero.  Still in the Contract pane, switch to the Constraints tab and click Add. This adds a placeholder constraint.  Click on the placeholder name and change it to departureInFuture.  Click in the Expression field, then click on the icon that appears at the right of the field. This opens a popup where you can enter the constraint expression.  Define the constraint with this script:travelRequestInput.departureDate.isAfter(java.time.LocalDate.now())  In the Error message column, add this text: Departure date must be in the future.  Add a second constraint as following:  Name: zeroOrMoreNights  Expression: travelRequestInput.numberOfNights &amp;gt;= 0  Error message: Number of nights must be greater or equal to zero.  In the Details panel, Execution tab, Contract pane, Inputs tab click the arrow next to travelRequestInput to expand the list of attributes.For each attribute, add a Description. The description is displayed in the automatically generated form used for process testing, so include information that will help the user complete the form correctly, as follows:Attribute  Description  departureDate  Specify the date that the travel starts  numberOfNights  Enter the number of nights  hotelNeeded  Specify if you need a hotel reservation  destination  Enter the destination city  reason  Explain the reason for this travel. Give the business justification  The process instantiation contract is now complete.The contract for the Manager review task only has two inputs, status and refusalReason, so you can create it directly instead of from data.It also has a constraint: a refusalReason must be specified if the manager refuses the request. To define this contract:  Select the Manager review task.  Go to the Details panel, Execution tab, Contract pane.  In the Inputs tab, click Add and specify the following attributes:Name  Type  Multiple  Description  status  Text  No  Indicate whether you approve or refuse this request  refusalReason  Text  No  If you refuse a request, you must give a reason  Go to the Constraints tab and click Add. This adds a placeholder constraint.  Click on the placeholder name and change it to reasonRequired.  Click in the Expression field, then click on the icon that appears at the right of the field. This opens a popup where you can enter the constraint expression.  Define the constraint with this script:status == &quot;approved&quot; || (status == &quot;refused&quot; &amp;amp;&amp;amp; refusalReason?.trim())  In the Error message column, add this text: If you refuse a request, you must give a reason.Define business object initial valuesNow that the contract is defined, you can configure the initial value of travelRequest, as follows:  Select the pool and go to the Details panel, Data tab, Pool variables pane.  Double-click travelRequest to edit it.  Click the pencil icon beside the Default value field. This opens the expression editor.  An initTravelRequest() script was automatically generated to initialize our data with the contract. We will complete this script by setting up the userId and status attributes.Insert the following code after the first line:travelRequestVar.userId = BonitaUsers.getProcessInstanceInitiator(apiAccessor, processInstanceId).idtravelRequestVar.status = &quot;pending&quot;Click OK to save the expression.  Click OK again to save the updated object definition.Update business object with review dataYou need to define operations to update the business object with the values entered for status and refusalReason in the Manager review form.Select the Manager review task, and go to the Details panel, Execution tab, Operations pane. First define the operation for status, as follows:  Create a new operation by clicking Add.  In the first field, click the down-arrow to display a list of variables on which an operation can be performed, and double-click travelRequest.  Click the Takes value of link. This opens a popup listing the available operations. Choose Use a Java method. The popup displays a list of available methods. Click setStatus(String) - void, and then click OK.  In the last field, click the down-arrow to display a list of variables, and double-click status.Repeat these steps to define the operation for refusalReason.When both of the operations are defined, the Details panel should look like this:Specify actorsThe next stage is to define who carries out the steps in the process. This is done by assigning actors. An actor is a placeholder for the person who will do a task. When you configure a process, you make the connection between the actors defined in the process definition and the real-world people who will do process steps. Bonita Studio comes with a test organization, called ACME, which you can use for testing. In this example, we have two people, the employee who initiates the process, and the employee’s manager.The managers are also employees, so you can use the same actor for process instantiation and for the review task, but use a filter to specify who does the approval step. This is how it works:  In the diagram, select the pool and go to the Details panel, General tab, Actors pane. This is where you define all the actors for the process.By default, there is already an Employee actor, which is defined for testing. You can change the organization and the actors later, but for initial testing, this will work fine.The default settings mean that any employee in the organization can start a case of the travel request process. You do not need to change anything.  Next, select the Manager review step and define who can do this. This step will be done by the manager of the person who initiated the request.All the managers are also employees, and the employee actor is defined for the lane, so check the button for Use the actor defined in the lane.  To make sure that the review task is sent to the right manager, use an actor filter:  Click the actor filter Set… button.  Open up the list of process actor filters.  Select Initiator manager. This means that the review task is to be done by the manager of the person who submitted the request that initiated the process. Click Next  Specify a name for the actor filter definition, requestersManager, and click Finish.  The process is now defined. The next section shows you how to configure and run it to verify that the process definition is correct before you define forms and create the application.Run process with temporary formsYou can run a process that is in development before you create forms, by using temporary forms that are created automatically.This section explains how to configure the process and run it from Bonita Studio.Before you can run the process, you need to configure it. For the first run we will use the default setting.You can run the process and see the temporary forms, to check that the process definition is correct.  Click Run in the coolbar. This opens a browser window, logs you in to Bonita Portal as Walter Bates (user used for authentication in the default process configuration), and displays the travel request form.  Fill out the form. Make sure that you use the right format for each field in the temporary forms (“yyyy-mm-dd” format for dates and either “true” or “false” value for booleans).  When you have filled out the form, click Start. This submits the form and starts the process instance.  At the top-right of the Portal window, click the arrow beside Walter’s name and choose Logout.  Log in as Walter’s manager, Helen Kelly, with username helen.kelly and password bpm. The Tasks view is displayed, where there is a task called Manager review.  Select the Manager review task. The temporary form for the manager review is displayed in the right hand panel.It contains fields for the items defined in the contract for this step, but not the information that Walter entered in the request.When you create your own forms, you will add this information, so that the manager can see the details of the request before approving or refusing it.For now, you can see the form, so you have verified that the process definition is correct.Create formsThe easiest way to create a process form is to generate it automatically from the contract. This automatically creates a mapping between the process and the form and defines form data. You can then update the form manually to add or remove field, and to change the layout.While using the UI Designer, click Save frequently to save your work.To create the process instantiation form:  In Bonita Studio, select the pool and go to the Details panel, Execution tab, Contract pane.  At the top-right of the Details panel, click the UI Designer icon. This opens the UI Designer in a browser window, with the automatically generated form.  Change the form name. All forms that are generated automatically are called newForm, so you must rename them to avoid confusion.To do this, double-click on the name in the top bar, and then specify a new form name, submitTravelRequest.The form is now created. A form is a UI Designer page that is mapped to a process and a contract. A page is a collection of widgets, and each field is defined by a widget.Widgets are arranged in rows and each row is divided into 12 columns. Each widget has a width that spans across one or more column. In addition to their width, widgets have a set of editable properties that can be set on the right side of the window.To change the appearance and behavior of a page, you update the widgets. At any time, you can click Preview to see how the page will look to a user.To have more space to update the page, you can hide the Variables and Assets tabs, by clicking on the down-arrow.Before improving the look of the form, we will enforce some validation rules on the different fields:  Select the Number Of Nights widget and set its Min value property to 0.  Preview the form and try to enter some values to make sure that the validation works. Submit button should be disabled until all widgets contain valid values.The form should now look like this in the page editor:Now that the form is functional, we are going to improve its appearance to make it more user-friendly:  Select the title widget, and change the Text property to Submit a new travel request.  Make the Departure date widget narrower. To do this, select it and change the value of the Width property to 4 columns.  Move the Destination widget up to the top of the form (below the title).  Move the Number of nights and Hotel needed widgets to the same row as the Departure date, and reduce the widths.Note: when you add a widget to a row, it automatically takes all the remaining columns, so set the width after you move the widgets.  Clear the initial value for Number of nights to show the placeholder at run time:  In the Variables panel (at the bottom of the page), locate the row containing the formInput variable.  Click on the pencil icon located at the right side of this row.  Change the value of the numberOfNights attribute from 0 to null.  Click on Save.  When you have finished, the preview of the form looks like this:Now define the form for the Manager review task. Start by automatically generating the form from the context, then add widgets to display the request details for the manager to review. Follow these steps:  In Bonita Studio, select the Manager review task and go to the Details panel, Execution tab, Contract pane.  At the top-right of the Details panel, click the UI Designer icon. This generates a form and opens it in the UI Designer.  Change the form name to reviewTravelRequest.  Add a variable to get the information that the user enters in the request form. To do this:  In the Variables tab, click Create a new variable.  Specify the name, request.  Set the Type to External API.  Set the value to ../.  Click Save.Add a variable to hold the different request status values:Name  Type  Value  statusValues  JSON  [{&quot;label&quot;: &quot;Approve request&quot;, &quot;value&quot;: &quot;approved&quot;},{&quot;label&quot;: &quot;Refuse request&quot;, &quot;value&quot;: &quot;refused&quot;}]  Edit the formInput variable and set the value for the status attribute to “approved”.  All of the other widgets you will add will be placed inside the form container (identified with a dashed border).  Add a title widget and set its text property to Review travel request. Set the Level property to Level 4, so it is the same size as the title of the form for creating a request.  Add read-only widgets to display the details of the travel request, using the following information:Label  Widget type  Value binding  Read-only  Destination  Input  request.destination  yes  Departure date  Date picker  request.departureDate  yes  Number of nights  Input  request.numberOfNights  yes  Hotel needed  Checkbox  request.hotelNeeded  yes  Reason for travel  Text area  request.reason  yes  Remove the “Refusal reason” widget that was added automatically, we will replace it by something more user-friendly in the next step.  Add a Text area widget with the following properties:Property  Value  Hidden  formInput.status === &#39;approved&#39; (click on “fx”/”bind” icon first)  Label  Refusal reason  Value  formInput.refusalReason  Required  yes  The dynamic Hidden property will hide the widget when the request status is set to ‘approved’.Otherwise, the field will be marked as required and the form validation will prevent the user from refusing a request without a reason.Remove the Status widget that was added automatically.  Add a Radio buttons widget with the following properties:Property  Value  Label  Review decision  Available values (click on the “fx” binding icon next to the input field first)  statusValues  Displayed keys  label  Returned keys  value  Selected Value  formInput.status  Preview the form to test the validation and rearrange the widgets until it looks like this in the editor:Run processYou can now run the process using the forms that you created. Make sure that you have saved everything in the UI Designer. Then click Run in the Studio coolbar.Fill out the request form as Walter, then log in as Helen and do the review task.When the review form is displayed, it contains the information that Walter entered in the request form. You can approve or refuse the request.Once process is finished you can see the request information as stored in the business data database in Bonita Studio:  From the menu bar, choose Development menu, choose Business Data Model, and then choose Brows data (h2 console)…. This opens the h2 (business data database) web interface in a web browser.  In the left tree menu click on TRAVELREQUEST. This will generate an SQL select query.  Click on Run (Ctrl+Enter) button. You should view all the requests created by running the Travel Request process.You process is now complete, so you can include it in an application.Build the applicationThis section explains how to build the application from the pages and process that you have already created. There are the following steps:  In the UI Designer, update the application page to use business data instead of the dummy JSON data and to specify the connection between the page and the process.  In Bonita Portal, create the application.Update the TravelTool application pageIn the UI Designer edit the TravelTool page and create the following variables:Name  Type  Value  session  External API  ../API/system/session/unusedId  processDef  External API  ../API/bpm/process?p=0&amp;amp;c=1&amp;amp;f=name=Travel%20Request  Update (edit) the following variables:Name  Type  Value  myPendingRequests  External API  ../API/bdm/businessData/com.company.model.TravelRequest?q=findByUserIdAndStatus&amp;amp;p=0&amp;amp;c=10&amp;amp;f=userId=&amp;amp;f=status=pending  myApprovedRequests  External API  ../API/bdm/businessData/com.company.model.TravelRequest?q=findByUserIdAndStatus&amp;amp;p=0&amp;amp;c=10&amp;amp;f=userId=&amp;amp;f=status=approved  Now update the widgets to use the new variables:  Select the username widget at the top of the page, and update the Text to this value: ``.  For both pending and approved requests, set the Column keys to departureDate | date, numberOfNights, hotelNeeded, destination, reason, to set the date format.Link button to processWhen the user clicks the button on the Travel Tool page for creating a travel request, the application displays the form for creating a request.This is the instantiation form for the Travel Request process.To configure this, select the button and set the target URL property by first clicking on the change to bind to an expression button (‘fx’ to the right of the field) and then updating the expression to  &quot;/bonita/portal/resource/process/Travel%20Request/1.0/content/?id=&quot;+processDef[0].id.After the user submits the form, the Tasks view of Bonita Portal is displayed.Build applicationTo build the Travel Tool application, you need to export the page from the UI Designer, deploy the process, and then create the application in Bonita Portal.To export the page, click the Export icon in the Page editor (next to the Save button) or on the home page. The page is exported as a zip file in your default browser download location.To deploy the process, you can simply run it from Bonita Studio. If you have no changed the process since you last ran it, it is already deployed.To create your application in Bonita Portal:  Log in to Bonita Portal by clicking the Portal icon in the coolbar and click the arrow beside “User” and select “Administrator” to switch to Administrator profile .  From the menu bar, choose Resources, and then click Add and import the TravelTool page that you exported from the UI Designer.  Go to Applications and click New.  Name your application Travel App, set its URL to travel, and click Create. The application is created.  In the list of applications, click the edit (triple dot) icon to configure your new application.  In the Pages section, click Add.  Select the Travel tool page you imported. Set its URL to requests. Click Add.  Make this page the application home page by clicking on the home icon that appears when hovering on it.  Delete the default home page.  Check that the application is correctly defined, by clicking the URL. The travel requests summary page is displayed, with a link to the form to create a new request.When you click the link, the form for submitting a new travel requests is displayed.Congratulations, you have just created your first Living Application!",
      "url": " /bonita/7.8/application-and-process-design/application-and-process-design-overview/getting-started-tutorial",
      "author": "",
      "categories": "Application and Process Design, Application and process design overview"
    }
    ,
  

    "bonita-7-8-application-and-process-design-application-and-process-design-overview-key-concepts": {
      "title": "Key concepts",
      "content"     : "Key conceptsThis page introduces some of the key concepts related to designing an application or process with Bonita, and the terminology used in Bonita Studio.Applications and processesProcess definitionBusiness dataBusiness Data ModellingConnectorsOrganizationActorsEnvironments and parametersApplications and processesAn application is a collection of processes, user interfaces (called pages) and shared data. A page that is a user interface to a process is called a form.You can use Bonita to create a process-based application or a process that is accessed only through Bonita Portal. A process that is in an application is also visible in the Portal.Process definitionA process is a sequence of tasks performed by people (human tasks) or automatically (service tasks). The sequence has a start and an end, and can contain decision points, known as gateways. A process definition is constructed in Bonita Studio as a flow diagram. You add data, gateways, connectors, scripts and expressions to control the process flow, and configure the process components and dependencies. The diagram uses the Business Process Model and Notation, which is the standard for defining a business process. Version 2.0, BPMN 2.0, was published in January 2011.If a process is visible to users, you can use the UI designer to design forms to input data and forms to display information.The result is a process that can be deployed to Bonita Portal.Business dataA business application exists to support a business goal, either a specific goal related to your business, such as parts reordering in a manufacturing plant, or a generic goal, such as improving efficiency through an automated expense reporting system.The key data in any application or process is business data. Because this data is probably used by more than one process, it needs to be stored at a global level, with two options:  If business data is not used by other applications than Bonita,  you can store it in Bonita Business Data database, that provides fast access and easy exchange between process and User Interfaces.  If it is global company data, Bonita can access it in your data source, so you do not need to copy or duplicate the data.Some processes also manipulate data that is only useful within the process itself. In this case, Bonita stores it in its local database or in memory.Business Data ModellingBonita supports modelling and persistence of business objects that applications and processes interact with. Such data can either be automatically stored in a database dedicated to business data, or can reside in existing information system databases, in which case the interaction is by connector.ConnectorsA connector is a link between a process and an external information system such as a database or information service. A number of standard connectors are provided, and you can create additional connectors if required. Separating the connector configuration and implementation from the process means it is easier to update or replace the connector without having to modify the process. You can use the same connector in more than one process.See the Connectivity overview for details.OrganizationYour organization is the set of all the users who play a part in all the applications and processes that your business uses. The organization is stored in Bonita Engine and can be managed in Bonita Portal. Typically, the organization corresponds to the hierarchy of teams within your business.If your clients and suppliers have access to your processes, those users must also be included in the organization. You can also feed Bonita Portal by synchronizing with an external LDAP directory. During process modelling, you need to create a draft organization in Bonita Studio with the main entities (groups, roles) to map it to process actors.See the Organization overview for details.ActorsAn actor is a placeholder specified in the process definition for the users. Using an actor instead of specifying real people directly makes the process definition more flexible: when the list of users changes, you change only the process configuration, which can be done while the process is running. You can also use the same process definition with completely different sets of users, for example, if a service business sells a process to several clients. Making the connection between the actor definition and the set of users is called actor mapping.See Configure a test organization and actors for details.Environments and parametersAn environment (available in the Bonita Enterprise, Performance, Efficiency, and Teamwork editions) is the context in which a process will run.There are three standard environments: Local, Qualification, and Production. You can define additional environments that are useful when designing and deploying a process for your business.A parameter is a piece of information in a process that has a value specific to the environment. See Environments and Parameters for more details.",
      "url": " /bonita/7.8/application-and-process-design/application-and-process-design-overview/key-concepts",
      "author": "",
      "categories": "Application and Process Design, Application and process design overview"
    }
    ,
  

    "bonita-7-8-application-and-process-design-application-and-process-design-overview-lifecycle-and-profiles": {
      "title": "Lifecycle and profiles",
      "content"     : "Lifecycle and profilesThis page explains the lifecycle of creating an application or a process using Bonita and putting it into production. At different stages in the lifecycle, different people with different knowledge and skills play roles. These people are identified by profiles.There are three major phases in the lifecycle.This page introduces these three phases, and explains how the Bonita components use components to manage the features presented to users.Application creation phaseSystem creation phaseProduction phaseProfiles and Bonita componentsApplication creation phaseDuring this phase, the business analyst specifies the processes that are in the application and creates the process diagrams. The application developer takes the specification of each process and creates a running process, adding forms, scripts or Java code if required. Each process is tested and debugged. When a process is complete, it is exported ready for deployment.This phase needs only the Bonita Studio component of Bonita. See the Bonita Studio installation overview for details of how to install Bonita Studio for process creation.The application developer also creates the application pages. When the pages are complete, they are exported and deployed in Bonita Portal. The application developer then builds the application, specifying the menus and navigation.System creation phaseDuring this phase, which typically runs in parallel with the end of the application creation phase, the platform administrator preparesthe infrastructure needed to support the deployed application. This infrastructure includes Bonita, and prerequisites such as adatabase and an application server. There are many options for how Bonita can be installed: see the Installation overview for details.Preparing the system also includes defining the organization, with all the users, groups, and roles required for running processes and applications. Bonita Studio contains an example organization, ACME, which you can use for testing.When configuration is complete, the system is ready for application deployment. The administrator deploys the processes and the application pages, and updates the configuration as needed, including mapping process actors to users in the organization.Production phaseTo deploy a process, you import it into Bonita Portal and start it. After the process is started, process instances can be started. The details of how process instances are started depend on the process definition.To deploy an application, you import pages into Bonita Portal and then use the application builder to specify the application menus and navigation.After deployment, you can use the Bonita Portal live update options to update an application or process that is in production.Profiles and Bonita componentsBonita Studio and Bonita Portal manage the features available according to the profile of the user.In Bonita Studio, a user selects a profile at login, and can change profile at any time. The application developer profile gives access to all features of Bonita Studio. You can also configure the features that are visible to your profile, hiding items that are not relevant to your activity, to make the interface cleaner and easier to navigate.In Bonita Portal, a profile is associated to a login, and by default only a user with the administrator profile can change the profile of a user. A user can have any number of profiles. It is also possible to define custom profiles.",
      "url": " /bonita/7.8/application-and-process-design/application-and-process-design-overview/lifecycle-and-profiles",
      "author": "",
      "categories": "Application and Process Design, Application and process design overview"
    }
    ,
  

    "bonita-7-8-application-and-process-design-applicationcreation": {
      "title": "Application descriptor",
      "content"     : "Application descriptorOverviewDefinition Create and build an Application DescriptorOverviewIn Bonita 7.5, we introduced the possibility to manage application descriptors from the Studio.It accounts for an additional step to ease the management of Living Applications in Bonita, since our objective is to offer a unique application deployment artifact, managed from the Studio.Then, all resources used by applications will be centralized and shared by the Bonita development suite: Bonita Studio and the UI Designer.DefinitionBasically, an application descriptor is an XML file. It represents the skeleton of an application, as it contains references to resources installed in Bonita Portal and used by a given application.An application descriptor must be imported onto the portal (Administrator profile), in the Applications tab, to enable the application.Before Bonita 7.5, this portal tab was the only way to create and manage applications.For development purposes, the Studio can deploy applications descriptors onto the portal for you (only for Enterprise, Performance and Efficiency editions).Application descriptors are packaged in application files.An application file is an XML file containing one or more application descriptors.&amp;lt;!--  Application File --&amp;gt;&amp;lt;applications&amp;gt;	&amp;lt;application&amp;gt;		&amp;lt;!--  First Application Descriptor --&amp;gt;	&amp;lt;/application&amp;gt;	&amp;lt;application&amp;gt;		&amp;lt;!--  Second Application Descriptor --&amp;gt;	&amp;lt;/application&amp;gt;&amp;lt;/applications&amp;gt;However, application descriptors in a given application file are totally independent.The purpose of grouping application descriptors in one file is to manage together applications with the same company purpose, each of them dedicated to a different user profile.For example, the four leave management applications for employees, managers, Human Resources officers, and Administrators should be managed together, therefore grouped in the same application file.Create and build an Application DescriptorNote: All Bonita editions come with an .xml editor for this feature. Only Enterprise, Performance and Efficiency editions also come with a graphical UI.From Bonita Studio, click on Development -&amp;gt; Application Descriptor -&amp;gt; New…It will create an empty application file with a default name and open an editor. You can rename this application file from the graphical UI or from the menu Open.Here is the application descriptor graphical UI provided. It is bound to the XML source, so you can use it to build your application descriptor without writing xml.You can switch from the graphical UI to the xml source at any moment, using the tabs Editor and Source at the bottom of the editor.A toolbar is embedded to the editor, use it to:  Add an application descriptor to this application file  Deploy this application file (i.e all the application descriptors in this file). ⚠  For development purposes, it also deploys their referenced pages and layout, but if those resources use REST API Extensions, you have to deploy those manually. In production environment, you still need to deploy pages, layouts and REST API Extensions manually before to deploy the application descriptor.  Rename this application file  Export this application file (download the .xml)  Delete this application file from your current workspaceThe application Token is the identifier of your Application Descriptor; it has to be unique. It is used to define the URL root of your Application:  ../apps/APPLICATIONTOKEN/..The fields Profile, Layout, Theme, Application Page and Home page token come with an auto complete feature.Be aware that we only suggest options known by Bonita Studio and the UI Designer.It means that custom themes, or custom pages and layouts created with another editor than the UI Designer will not appear as options, since they are only known by Bonita Portal.You can still reference such an “unknown” resource, but you will have to write the exact identifier by yourself, and make sure the resource is imported onto the portal before you deploy/install the application descriptor.Since Bonita 7.6, and for Enterprise, Performance and Efficiency editions only, custom profiles can be created in the studio.Therefore, such profiles will be suggested. Those created in the portal will not, but you can still export them from the portal and import them in the studio to get them in the suggested options.There are two ways to reference pages used by your application. In the Navigation table or in the Orphan pages table.Use the Navigation table to create the application menus/submenus, and bind those menus to pages.A page needs a unique token (unique in the context of the application descriptor). It will be use to define the URL to reach this page: ../apps/applicationToken/PAGETOKENUse the Orphan pages table to reference pages that will be accessed using the associated URL, but won’t be attached to a menu. It can be the application home page, or pages accessible from other pages but not from a menu.⚠ You don’t need to define your pages twice. If a page is accessed both from a menu and from another page, you only need to reference it in the Navigation table: pages defined in the Navigation table will be accessible in the whole application.A preview link is also provided, at the top of the Overview section. Clicking on the link will first deploy the selected application descriptor, and then open the application home page in your browser.",
      "url": " /bonita/7.8/application-and-process-design/applicationCreation",
      "author": "",
      "categories": "Application and Process Design"
    }
    ,
  

    "bonita-7-8-application-and-process-design-bonita-bpm-overview": {
      "title": "Bonita overview",
      "content"     : "Bonita overviewBonita 7 is a powerful BPM-based application platform for building highly engaging, personalized, process-based business applications to get things done, take full advantage of BPM, and adapt to business changes in real time.Bonita has two parts: the development environment, Bonita Studio, and the runtime environment, Bonita Platform.Bonita StudioBonita PlatformEditionsGetting startedBonita StudioBonita Studio is a graphical environment for creating processes, applications, data models, and users views (pages and forms). It contains three major design tools:  the whiteboard, for drawing a process flow diagram and defining the detail of steps, transitions, decision points and other process elements  the Development menu, to extend the Studio capabilities and create your data models  the UI Designer, which is used to create application pages and process formsBonita Studio is the development tool for the Business Analyst and Application Developer. Back-end java developers work in Bonita Studio and collaborate with front-end developers working in the UI Designer.You can install Bonita Studio on your computer, then create and test processes, create data models, applications and application views (pages and forms).Bonita Studio contains a Bonita Platform (Tomcat, UI Designer, Bonita Portal, Bonita Engine, and an h2 database), suitable for testing an application that is in development. When you run a process, it is automatically deployed onto the development platform.Process forms, used to complete the human tasks, are created in the UI Designer, and use the data models created in the Studio.Users can use Bonita Portal (User profile) to view and complete the process tasks for all processes. You can also build personalized process-based applications. To do so, use the UI Designer to create application pages that display business data from the data models, link the pages to processes thanks to action buttons, then use the Bonita Portal application builder to construct the application piece by piece.Bonita PlatformBonita Engine is the execution engine of Bonita.As mentioned before, Bonita Portal is the part of Bonita that is visible to process users, who use it to view tasks and take actions thanks to a generic task list for all processes they are involved in.But Bonita Portal is also the tool used by the tenant administrator to install, deploy and manage processes and to build applications. We use the word “tenant” here, in case the platform would be made of several tenants.To install Bonita Engine and Bonita Portal in a qualification or production environment, install Bonita Platform.In Bonita Studio, once a process is ready, you can build it and deploy it on your Bonita qualification or production platform.EditionsBonita is provided in five different editions: Community, Teamwork, Efficiency, Performance and Enterprise.Getting startedI’m currently using Bonita 6.x. Will 7.x be a big change?Bonita 7.x provides new and improved features, including the UI Designer for creating application pages and forms, as well as contracts and context to create a clear split between the process logic, the data, and the user views. You will also find lots of familiar features, which continue to work as they did in 6.x.Tell me about the documentation.We’re continually updating the documentation. There are four main information categories: Application and process design, Installation, Portal administration, and Development.Tell me about using Bonita.See Lifecycle and profiles.Can I migrate an existing process into Bonita 7.x?You can import a process from any earlier Bonita release. You can also migrate a process from Bonita Open Solution 5.9 or 5.10 to this release. A 6.x process will continue to run unchanged in 7.x, but to take advantage of the new features, you will need to update the process and migrate the forms.Tell me about creating an application.An application is a collection of related processes, user interfaces, and shared data. See design methodology.Tell me about creating a process.A process can be included in an application or can be accessed through Bonita Portal. See design methodology.Tell me about creating a diagram.See diagrams.How can I get started?Download and install Bonita 7.x: see the installation instructions.",
      "url": " /bonita/7.8/application-and-process-design/bonita-bpm-overview",
      "author": "",
      "categories": "Application and Process Design"
    }
    ,
  

    "bonita-7-8-application-and-process-design-bonita-bpm-studio-hints-and-tips": {
      "title": "Bonita Studio hints and tips",
      "content"     : "Bonita Studio hints and tipsThis page contains some information about smart ways to use Bonita Studio.Adding items to a diagramUsing the tree view and searchChanging the diagram name and versionChanging the diagram appearanceOpen a recently modified diagramAdding items to a diagramThere are several ways to add an item to the diagram:  Click-and-hold on a icon in the BPMN elements menu and drag it to where you want the item in the whiteboard.  Click-and-release on an icon in the BPMN elements then click where you want it to appear in the whiteboard.  Select the previous item in the flow, and drag the item from the context menu to where you want it in the whiteboard.  Copy and paste an item from another pool.The advantage of selecting items from the BPMN elements menu is that you can choose precisely the item you want.The advantage of using the content menu is that the transition is automatically created.If you add an icon to the diagram over a transition, the transition will be broken into two parts and the new item inserted between them. This is called break-and-insert, and can be used with any BPMN flow element except text annotations. You can also use break-and-insert when moving an item to a different place in a pool, if the transitions can be resolved.Using the tree view and searchThe tree view shows all the information that is in a diagram, arranged in a hierarchical structure. It can be a useful way to see all the information related to a particular step or form, or to find where a specific item is configured. For example, you can see the step where a variable is defined without having to check all the steps.To find a term in your diagram, go to the Tree View panel (by default, at the bottom-left of the screen), enter the term in the filter field and press return.The tree view is updated to show only the items that match the term.Changing the diagram name and versionClick on the background (outside of a pool) and go to the Diagram tab in the Details panel. Click on Edit… then specify the new name and version number.You can use the same dialog to change the name and version of any pools in the diagram.Changing the diagram appearanceYou can modify the appearance of an item in the diagram by selecting it and going to the Appearance tab in the Details panel.In addition to changing the appearance of individual items in the diagram, there are some tools that you can use to make the layout clearer, by selecting a group of items and making the vertical or horizontal alignment regular. If a diagram is being developed or maintained by more than one person, it is important to keep the layout clear, to prevent misunderstanding.The alignment tools, and others, are accessed from the icons at the bottom-left of the whiteboard.Open a recently modified diagramTo see a list of recently modified diagrams without having to go to the Welcome page, go to the Diagram menu and choose Recently modified.A submenu of the last ten diagrams you have modified is displayed. Click the name of a diagram to open it.",
      "url": " /bonita/7.8/application-and-process-design/bonita-bpm-studio-hints-and-tips",
      "author": "",
      "categories": "Application and Process Design"
    }
    ,
  

    "bonita-7-8-application-and-process-design-bonita-bpm-studio-preferences": {
      "title": "Bonita Studio preferences",
      "content"     : "Bonita Studio preferencesThis page provides information about Bonita Studio preferences and the Bonita Studio embedded Tomcat configuration.Bonita Studio preferencesGeneral preferencesDeployment preferencesWeb preferencesOther preferencesBonita Studio embedded Tomcat configurationDefault configurationChanging the configurationBonita Studio preferencesTo configure Bonita Studio preferences, click Preferences in the Cool bar.General preferencesDatabase   Database clean-up: by default, the database (used by Bonita Engine) is purged when Bonita Studio exits, which is useful when you are testing processes. You can override this in order to preserve all data.   Organization load: by default, the default organization is loaded with Bonita Studio starts. You can override this.AppearanceCoolbar size: Normal (default) or small. Grid options for process diagrams. You can choose to use a grid positioning for all new process diagramsLanguage   Bonita Studio language.   Web applications language: the language to use by default when loading process forms and Bonita PortalJava   The JRE (Java Runtime Environment) to used by default. JRE will be used when compiling and running Java codeDeployment preferencesRun mode   Validation: whether to validate the process before it runs. We recommend to keep this option enabled.   The default look &amp;amp; feel for application forms. Will be applied to any newly created process.Server settings   Port number: Studio embedded Tomcat HTTP listening port.   Log in: the username and password of the user who will be logged when Bonita Portal or an application is started from Bonita Studio. The password can be obscured.The default look &amp;amp; feel for the PortalDatabase connectors   Manage the JDBC drivers associated with database connectors. You should use that to include JDBC drivers for commercial DBMS (e.g. DB2)Web preferencesBrowser   Specify the web browser used when a web page is displayed. Note that some application might override this setting and use a different browserProxy   HTTP Proxy settings for web accessOther preferencesAdvanced   SVN connector: the SVN connector used if you are using a remote SVN “repository. Note: if you change this your local working copy might become unstable. To avoid this, commit any outstanding changes before you modify the connector setting, and reinitialize your local working copy after the update6.x legacy   Controls whether the 6.x legacy features are shown are hiddenEclipse   Give access to all Eclipse settings (Bonita Studio is based on Eclipse)Bonita Studio embedded Tomcat configurationDefault configuration  Embedded Tomcat listens on the following ports:  8080: HTTP. This value can be modified using Bonita Studio preferences (see above).  8006: shutdown.  8009: AJP.  9091: embedded h2 database server.Bonita Studio also uses the following port:  6969: watchdog  Changing the configurationYou might need to edit the Tomcat configuration files for example to:  Configure logging  Change listening ports (shutdown, AJP, h2) to prevent conflicts  Declare a datasource to connect to a business databaseThe Tomcat configuration files are located in the Bonita Studio workspace/tomcat/conf folder.  To change a port number, edit server.xml.  To add a data source, edit context.xml or workspace/tomcat/conf/Catalina/localhost/bonita.xml.For more details, see the Tomcat documentation.",
      "url": " /bonita/7.8/application-and-process-design/bonita-bpm-studio-preferences",
      "author": "",
      "categories": "Application and Process Design"
    }
    ,
  

    "bonita-7-8-application-and-process-design-build-a-process-for-deployment": {
      "title": "Build a process for deployment",
      "content"     : "Build a process for deploymentWhen a process is ready for deployment, build an archive file in Bonita Studio that can be installed in Bonita Portal.You also need to initialize the organization information needed in Bonita Portal.Build a process for deploymentInitialize the organization in Bonita PortalBuild a process for deploymentA process is deployed by installing a business archive (.bar) file in Bonita Portal.To create the business archive:  Choose Build… from the Server menu.  Select the process to be exported.  Specify whether you want to export a configuration with the process. Exporting a configuration will export all the information and other items that you configured, including connectors and dependencies.  Specify the location where the .bar file will be created. The filename is determined by the process name and cannot be changed at this stage.  Click Finish. The business archive is created.You can now install the process in Bonita Portal.Initialize the organization in Bonita PortalTo prepare your production system (unless you are using a Subscription editions and the LDAP synchronizer), you must create the organization that you need for all the processes that will be deployed, export it from Bonita Studio,and import it into Bonita Portal.To export the organization, go to the Organization menu and choose Export…. Youcan then import the organization into Bonita Portal. After the organization is imported into Bonita Portal, you can manage the groups, roles, and users in the organization.",
      "url": " /bonita/7.8/application-and-process-design/build-a-process-for-deployment",
      "author": "",
      "categories": "Application and Process Design"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-alfresco": {
      "title": "Alfresco",
      "content"     : "AlfrescoBonita Studio contains connectors for Alfresco 3.4 and Alfresco 4.2. For each version, there are the following connectors:  Delete an item by ID (folder, file, etc)  Delete folder by path (delete a folder and its contents)  Create a folder by path  Upload a file to a destination folderNotes for using these connectors:  Warning:There is a conflict between libraries provided with the Alfresco connector and libraries provided by other connectors or the platform itself if you use a data of type Object.When you configure a process that uses the Alfresco connector, you must manage the jar files.  To delete a folder, it must be empty.  In the path, all parameters have to be URL Encoded. Spaces are not allowed. For example: /User Homes/user has to be written /User%20Homes/user.",
      "url": " /bonita/7.8/application-and-process-design/connectivity/alfresco",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-cmis": {
      "title": "CMIS",
      "content"     : "CMISOverviewAlfresco specific configuration for document versioningExample: How to upload a documentExample: Creating a folder on AlfrescoOverviewContent Management Interoperability Services (CMIS) is an open standard that allows different content management systems to inter-operate over the Internet.CMIS provides a common data model covering typed files and folders with generic properties that can be set or read. There is a set of services for adding and retrieving documents (‘objects’). There may be an access control system, a checkout and version control facility, and the ability to define generic relations.Two protocol bindings are defined, one using WSDL and SOAP and another using REST, using the AtomPub convention. The model is based on common architectures of document management systems.Bonita Studio contains the following CMIS connectors:  Upload a new version  Upload a document  Create a folder  Delete a document version  Delete a folder  Delete a documentNote: If you have processes that use CMIS connectors from previous versions, these connectors will no longer work. You need to update the configuration of each connector, including any scripts that construct the URLs used.Alfresco specific configuration for document versioningDocument versioning is disabled by default in Alfresco.If you wish to use the “Upload a new version” connector to upload a new document version, you will have to enable document versioning following the official Alfresco documentation.If this configuration is not set, new versions of documents will overwrite previous ones.Example: How to upload a document  In the Connector list window:  Select the CMS/CMIS connector category.  Select the Upload a document connector.  Click Next.In the General window:  Enter a name.  Click Next.In the Server window, enter the information necessary to connect to the repository:  Username and password  Repository name (for example Main Repository)  Binding type: webservices (or atompub)  The URL (server address) for the atompub binding if it is used  If using webservices, there are four new URLs:  RepositoryService, for example https://localhost:12345/alfresco/cmis/RepositoryService?wsdl  RepositoryService endpoint  ObjectService, for example https://localhost:12345/alfresco/cmis/ObjectService?wsdl  ObjectService endpoint  * Click Next.In the Document window:  Enter the Document name of the document to upload.  Enter the relative or absolute path to the Parent folder that contains the document.  Enter the Destination name to be assigned to the document after it is uploaded.  Click Next.In the Output operations window:  You can store the returned document_id in a variable.  Click Finish.  Example: Creating a folder on AlfrescoThis example presents the creation of a folder on a local installation of Alfresco 5.0 with a CMIS connector configured with AtomPub.  In the Connector list window:  Select the CMS/CMIS connector category.  Select the Create a folder connector.  Click Next.In the General window:  Enter a name.  Click Next.In the Server window, enter the information necessary to connect to the repository:  Username and password  Repository name: -default-  Binding type: atompub  URL: http://localhost:8080/alfresco/api/-default-/public/cmis/versions/1.1/atom/  Click Next.In the Folder window, enter the location and name of the folder you wish to create:  Parent folder: / (root folder)  Folder name: bonita  Click Next.In the Output operations window:  You can store the returned folder_id in a variable.  Click Finish.  ",
      "url": " /bonita/7.8/application-and-process-design/connectivity/cmis",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-connectivity-overview": {
      "title": "Connectivity overview",
      "content"     : "Connectivity overviewOverviewAdd a connectorConnectors and formsEdit a connectorOverviewA connector is an element in a process that accesses an external system to read or write information. By extension, it also accounts for tools that modify data within a process like Office connectors that modify Bonita documents.Bonita contains a set of standard connectors. You can also create custom connectors using the connector development toolkit.A connector consists of a definition, an implementation, and a configuration.  The definition specifies the external interfaces for input and output, including the configuration wizard.  The implementation is the Java code that acts on the inputs, interacts with the external system, and returns outputs to the process. There can be any number of implementations for a given definition.  The configuration is the specification of how the connector is used in a specific process or task. The main part or connector configuration is done at pool and tasks levels, through a wizard. The choice of connector implementation though is done when you configure the process.You can add a connector to a pool or a task, at the start (connector in) or at the end (connector out).A pool connector in is executed when the process is instantiated. A pool connector out is executed when the process instance terminates, regardless of the reason for termination. If a process has more than one terminate end event or flow leading to the end of the process instance, make sure that it is always appropriate for the pool connector out to be executed. If it is not, use task connectors instead.A task connector in is executed before the task executes. This means it can be used to retrieve information that will be presented in a task form. A task connector out is executed after the task has been executed and after any operation defined on the task. This means that information entered in a form by a user can be an input to the connector.Add a connectorTo add a connector to a pool or task:  Select the pool or task.  Go to the Details panel, Execution tab.  Go to the Connectors in or Connectors out panel, depending on whether you want to add a connector at the start or the end of the pool or task.  Click Add.  Choose the category.  Choose the connector from the list.  Follow the wizard to configure the connector. For details, see the connector-specific documentation pages.Connectors and formsIn Bonita 6.x, you could add a connector to a form. This is no longer possible with forms created with the UI Designer. To achieve the same result, create a REST API extension. There is an example showing how to execute SQL queries on a external database.Edit a connectorTo change the implementation of a connector for a process, update the process configuration.The implementation can also be changed after deployment:  In versions 7.0.x, if you are using the Enterprise or Performance edition  In versions 7.1.0 and above, if you are using the Enterprise, Performance or Efficiency editionTo change connector configuration for a pool or task, use the connector wizard:  Select the pool or task.  Go to the Details panel, Execution tab.  Go to the Connectors in panel or the Connectors out panel, depending on whether you want to update a connector at the start or the end of the pool or task. A list of the connectors already defined is displayed.  Choose the connector you want to edit, and click Edit.  Follow the wizard to modify the configuration. For details, see the connector-specific documentation pages.",
      "url": " /bonita/7.8/application-and-process-design/connectivity/connectivity-overview",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-database-database-connector-configuration": {
      "title": "Database connector configuration",
      "content"     : "Database connector configurationThere are two types of configuration for database connectors:  A JDBC connector is a point-to-point connection configured with information to access the database directly.  A datasource connector is a connection to a datasource that is an intermediate point between the user (the Bonita process) and the database. The advantage of using a datasource is that it can use a connection pool. The details of how the datasource retrieves information and the database it uses are hidden from the connector.How to configure a JDBC connectorHow to configure a datasource connectorHow to configure a JDBC connectorThese configuration steps are the same for all database connectors except the datasource connector.  Select the Database connector, for example, JDBC 4 database query. Click Next.  Enter the Name, description, event anderror message (if any). Click Next.  Select the .jar file of the database driver. Click Next.  Enter the Access information. Click Next.  Enter the Input query. This is a query to send to the database. You can put single or multiple queries separated by a separator. You can also use the graphical query builder to specify the query. Click Next.  Choose how you want to specify the operations on connector outputs. Choose Graphical mode or Scripting mode. The Graphical mode does not require scripting. Click Next.  Specify the output operations, using the Graphical mode or using expressions.  In the Edit expression window, set the provided variable to get data from the external database.  Click Finish.Note: in the return type, the type of the variable from the database must match the type of variable which is saved to the process variable.How to configure a datasource connectorBefore you can configure the datasource connector, you need to configure the datasource itself, which is done in the application server.Follow the instructions in your application server documentation. See here for an example using Tomcat with PostgreSQL.Configure the connections of the datasource to be created with auto commit set to true.Make sure that all elements using connections return them to the pool with auto commit still set to true.A datasource connector can be used in a Database Connection Pool (DBCP). A DBCP is a group of connections. Multiple connections are “reserved” and used as needed.To configure the datasource connector, you need the following information:  The datasource name (for example java:/comp/env/yourDataSource).  Optionally, depending on how the datasource is configured, the properties needed to access it. These are specified as name-value pairs.To configure the datasource connector, follow these steps:  Select the Datasource database query connector. Click Next.  Enter the Name, Description, Event and error message (if any). Click Next.  Specify the datasource name and, optionally, properties. Click Next.  Enter the Input query. This is a query to send to the database. You can put single or multiple queries separated by a separator. You can also use the graphical query builder to specify the query. Click Next.  Choose how you want to specify the operations on connector outputs. Choose Graphical mode or Scripting mode. The Graphical mode does not require scripting. Click Next.  Specify the output operations, using the Graphical mode or using expressions.  In the Edit expression window, set the provided variable to get data from the external database.  Click Finish.",
      "url": " /bonita/7.8/application-and-process-design/connectivity/database/database-connector-configuration",
      "author": "",
      "categories": "Application and Process Design, Connectivity, Database"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-database-graphical-query-builder": {
      "title": "Graphical query builder",
      "content"     : "Graphical query builderNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.The graphical query builder helps you configure a database connector by showing you the structure of database content to help you construct the database query.Connect to the databaseBuild a queryCreate a select queryCreate an update queryCreate an insert queryCreate a Delete queryConnect to the databaseIn the Database access information screen, check Use the graphical query builder and click Connect.In the popup, enter the information needed to connect to the database. A popup tells you when the connection is established.The graphical query builder connects to a database and retrieves information that you can use to construct the query graphically.The first time you provide the connection information, it is for the connection used by the graphical query builder.Subsequently, you may be asked to give the connection information again: this is to configure the connector for the running process.It is possible to use one database with the graphical query builder and a different database when running the process, provided that the structure of the data in the two databases is the same.When the database access information is configured, click Next to go to the graphical query builder.Build a queryWith the graphical query builder you can construct a select, update, insert, or delete query.At any point, you can switch from the graphical query builder to entering the SQL query directly, by clicking on the Query tab.From the Query tab, you can go back to the graphical view by clicking on the Designer tab.Create a select queryUse a select query to get information out of the database. To define a select query:  Specify the table, by clicking Add a table… and selecting the table from the list in the popup. The query builder shows the columns of the database table.  Check the column or columns from which you want to retrieve the values.  If you want to ignore duplicate values and retrieve only the distinct values, check the DISTINCT box.  Optionally, set a condition on the values to be retrieved. If you do not set a condition, you will get all the values from the selected columns (with or without duplicates, depending on the DISTINCT setting).Setting a condition is a way of choosing the rows from which you want to get the value from the specified column.You can also specify groups to group the selected values, and group conditions to filter the results based on the value of a database element.Create an update queryAn update query modifies a value in the database. To define an update query:  Specify the table, by clicking Add a table… and selecting the table from the list in the popup. The query builder shows the columns of the database table.  Check the column or columns where you want to update the values.  Optionally, go to the Where tab and specify a condition to identify the specific row to be updated.  Go to the Set tab and specify how the identified value is to be updated:  In the left-hand list, select the item to be updated.  Click the right-arrow to move it to the Update Column list.  In the Expression column, specify the new value for the item. This can be a constant entered directly, the value of a field, or the value of a process variable.You can also specify DEFAULT to set the value to the default defined in the database.Create an insert queryAn insert query adds a new entry to the database. To define an insert query:  Specify the table, by clicking Add a table… and selecting the table from the list in the popup. The query builder shows the columns of the database table.  Check the column or columns to include in the new entry. They are added to the Column column in the table. The default value, if one is defined, is shown in the Value column.In the Value column, specify the value to be added for each item. A value can be specified directly as a constant, or can be a process variable or a field value.Create a Delete queryA delete query removes an entry from the database. To define a delete query:  Specify the table, by clicking Add a table… and selecting the table from the list in the popup. The query builder shows the columns of the database table.  Specify a condition to identify the entry or entries to be deleted:  In the Column column, specify the column name. This can be specified directly, or can be a field value or a variable.  In the Operator column, choose the logical operator.  In the Value column, specify the value as a constant, field value, or variable.You can combine conditions by specifying AND or OR operators in the last column of the table.",
      "url": " /bonita/7.8/application-and-process-design/connectivity/database/graphical-query-builder",
      "author": "",
      "categories": "Application and Process Design, Connectivity, Database"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-database-initialize-a-variable-from-a-database-without-scripting-or-java-code": {
      "title": "Initialize a variable from a database without scripting or Java code",
      "content"     : "Initialize a variable from a database without scripting or Java codeThis page explains how to set the value of a variable using the output of a database connector without using scripts or Java code.You can initialize single valued items and multivalued items. The connector automatically populates the data structure of the variable.Before you configure the database connector, define the pool-level variable to be initialized. If you do not define the variable first, you can define it from inside the wizard but only at the level when the connector is defined. This means that if you define the connector on a service task, which is recommended, the variable is only available in that service task.To configure the database connector to initialize the variable, add the connector as usual and follow the steps in the wizard until you get to the Output operations definition screen.Then complete the following instructions:  In the Output operations definition screen, check Graphical mode, then specify the structure of the output result that corresponds to the data you specified in the query builder:  single value if you selected one cell to initialize a single-valued variable  1 row x n columns if you selected all or part of a row to initialize a list variable  n rows x 1 column if you selected all or part of a column to initialize a list variable  n rows x n columns if you selected items from more than one row and more than one column to initialize a table (list of lists)Then click Next.  Specify the name of the variable being initialized. The variable type must be compatible with the structure you specified.  Then click Finish.When the process runs, the variable is initialized with the value from the database.",
      "url": " /bonita/7.8/application-and-process-design/connectivity/database/initialize-a-variable-from-a-database-without-scripting-or-java-code",
      "author": "",
      "categories": "Application and Process Design, Connectivity, Database"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-database-list-of-database-connectors": {
      "title": "List of database connectors",
      "content"     : "List of database connectorsThis page lists the database connectors provided with Bonita. For some connectors there are special considerations, included in a section below.If you are configuring a connector to a database that is the same type of database used by Bonita Engine, you are recommended to use the same driver for both, to limit possible conflicts.Here is the list of database connectors. The links take you to sections of this page giving dedicated best practice information.  Ingres 10.1  MySQL 5.5  Teradata 14  Informix 11  DB2 9.7  HSQL 2.2  Microsoft SQL Server  PostgreSQL 8.4 or 9.2  h2 1.3  Oracle 10G or 11G  JDBC 4  AS 400  Sybase ASE 15  Datasource db queryTo configure a database connector, follow the instructions in the wizard.MySQL 5.5It is not possible to execute more than one SELECT command in a single script.Teradata 14If you are using the terajdbc4.jar, you also need the tdgssconfig.jar file.Import both terajdbc4.jar and tdgssconfig.jar into Bonita Studio and add them to the connector configuration.Specify terajdbc4.jar as the active driver. To test the connector, you must specify both files. When you configure the process, specify both files in the process dependencies.HSQL 2.2Allows only one connection per destination at a timeMicrosoft SQL ServerSupported versions: This connector supports SQL Server 2008, 2012, 2014 and 2016.Language encoding: MS SQL Server uses only one encoding at a time. To avoid errors when creating the database, please do the following when using alternative languages:Define the encoding:  Option collation  Choose the language from the list  Save the configurationUsing a named instance: To use a named instance with your connector, you need to retrieve some information from the SQL Server Configuration Manager.  Go to MS SQL Server network configuration.  Go to Protocols for instance (where instance the name of the instance).  Open TCP/IP.  In the TCP properties, get the port number.When you configure the connector, use this port number in the URL. For example: jdbc:sqlserver://localhost:53165.Sybase ASE 15Two driver jar files are available, and the Driver and URL values to specify in the configuration wizard depend on which jar you use:  For jconn4.jar:Driver: com.sybase.jdbc4.jdbc.SybDriverURL: jdbc:sybase:Tds:host:port/database  For jtds-1.3.1.jar:Driver: net.sourceforge.jtds.jdbc.DriverURL: jdbc:jtds:sybase://host:port/database",
      "url": " /bonita/7.8/application-and-process-design/connectivity/database/list-of-database-connectors",
      "author": "",
      "categories": "Application and Process Design, Connectivity, Database"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-generate-pdf-from-an-office-document": {
      "title": "Generate PDF from an Office document",
      "content"     : "Generate PDF from an Office documentNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.The Generate PDF from and Office document connector converts a document from .odt or .docx format to PDF.It can be used in conjunction with the Insert data in a .docx/.odt template connector. The generated document can then be sent by email or stored in an external information system using the relevant connector.For proper conversion, you must specify the character encoding that is used in the source document. On most Windows configurations, encoding “windows-1252” is used.UTF-8 is assumed if you do not specify the encoding (that is, if the field is left blank in the connector configuration wizard).Warning: As an example when using special characters like ‘€’ with an invalid encoding will generate a PDF without those characters.Known limitations  Warning: there are known issues when adding an image in a docx using drag’n drop instead of copy/paste. The image is not rendered properly when converted into PDF.Rendering issues (at worst the element will not be visible in the generated PDF; at best, it will be visible but not exactly as in the Office document):  Bullet points  Strike-through (text with this formatting will not be visible in the generated PDF)  Exponents (text with this formatting will not be visible in the generated PDF)  Indexes (text with this formatting will not be visible in the generated PDF)  Highlighting (text with this formatting will not be visible in the generated PDF)  Asian characters  PDF Conversion of documents using asian fonts does not work  Asian fonts support need a specific iText jar that has a non-compliant license, so it cannot be provided by defaultImage positioning  Drawing shapes  Alignment of some text elements  HTML conversion generates a single html file. For that matter, linked resources (like images, …) are not supported. If you have images, use PDF conversion instead.This connector is build upon XdocReport third party library, for more information check their Wiki at https://github.com/opensagres/xdocreport/wiki",
      "url": " /bonita/7.8/application-and-process-design/connectivity/generate-pdf-from-an-office-document",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-google-calendar": {
      "title": "Google Calendar",
      "content"     : "Google CalendarOverviewCreate a service accountConfigure client in your domainSpecify connector connection parametersOverviewThe Google Calendar (API v3) connectors enable client applications to view and update calendar events by using Google Data API feeds. For details of the API, see the Google Developer’s Guide.Your business application, or set of processes, can create new Google calendar events, can edit, move, or delete existing events, and can query for events that match particular criteria. The connectors available are as follows:  Get event  Create event  Update event  Delete event  Move eventThis page describes how to create a Google Apps service account and get connection credentials, then how to configure the calendar client in your domain. You only need to get one set of credentials, and configure the client once, and then you can configure any number of Google calendar connectors. Use the connector wizard as usual to configure a Google Calendar connector. For each connector, you need to provide the parameters specific to the connector actions, and you need to specify the connection parameters.Create a service accountThe Google Calendar connectors use a service account, which calls the Google APIs on behalf of the process user. You need to create a Google Apps account and configure it as a service account with the necessary credentials. Complete these steps:  Create a project:  Go to the Google Developer’s Console.  Click Create Project and create a project that identifies your business application or set of processes.  Create the client Id that is used to identify your application when accessing the Google APIs:  In the left-hand menu, select APIs &amp;amp; auth then Credentials. The credentials page is displayed.  Click Create New Client ID.  In the popup list of Application types, select Service Account. Then click Create Client ID. The Google console generates the Client Id and a private key, which is stored in a file with the extension .p12.  Copy the .p12 file to a place where the connectors can use it. If your project name contains spaces, the filename will contains spaces. Rename the file to remove the spaces. Make a note the full path to this file because it is an input parameter, p12key, of the connectors.  Make a note of the CLIENT ID, which is needed for configuring your Google domain to authorize the client.  Make a note of the EMAIL ADDRESS, which is an input parameter, Service account ID, required when you configure connection parameters for a connector.  Make sure that the Calendar APis are enabled for your project:  In the left-hand menu, select APIs &amp;amp; auth then APIs. The APIs page is displayed.  Select the Calendar API row.  If the API is not already active, click on it and change the activation state from OFF to ON.The client application is now registered and your have the credentials needed to run a connector. If you need more information about the Developer’s Console, see the Google Developer documentation.Configure client in your domainYou need to authorize the client application to manage calendar events in your Google domain. To do this:  Go to the Google admin console, then go to the Security section.  Go to Advanced setting, and then click Manage API client access.  Enter the Client Id, which you obtained from the Developer Console.  In the API Scopes input text box, enter https://www.googleapis.com/auth/calendar.  Click Authorize.The configuration in your domain is now complete. You can now configure Google Calendar connectors.Specify connector connection parametersWhen you add a Google Calendar connector to a process diagram, you need to specify connection parameters in the wizard. The table below explains what to specify:Parameter name  Required information  Application name  A unique name that identifies the calling application in the Google reporting and statistics  Calendar ID  The email address that identifies the calendar that the created event will belong to. Typically, this will be a process or business variable  Service Account ID  The email address of the Google client, which you noted earlier from the Credentials page  Service Account P12 file  The full path to the private key file, which you noted earlier  Service Account User  The email address of the user who is creating the event. This user must have appropriate access rights to create or modify events in your domain  ",
      "url": " /bonita/7.8/application-and-process-design/connectivity/google-calendar",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-insert-data-in-a-docx-odt-template": {
      "title": "Insert data in a .docx/.odt template",
      "content"     : "Insert data in a .docx/.odt templateNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.The insert data in a .docx/.odt template connector allows to fill a specified template file by inserting values coming from the current process instance, for example from a form attached to a human task.The template is a LibreOffice/OpenOffice .odt file or a Microsoft Word.docx file with special placeholders called keys.A key is a replaceable element in the template that is identified with a dollar sign and surrounded by braces, (eg. ${element}), following the Velocity Template Language.To configure the connector for a task, add a connector (in or out) to the task, choose the “Office” category, and select “insert data in a .dox/odt template”.In the connector configuration, the keys are mapped to variables from the process or from any other data source.At some point in the process instance, the template file must be set as the content of a document created at pool level.When the connector runs, it creates a file based on the template and inserts the current values of the relevant variables into the appropriate placeholders (keys) in the file.The generated file can replace the template in the same document or be stored in another document of the process. A common usage is to send the document by email or store it in an external information system using another connector.How to insert `keys` in a template fileUsing Word (docx)Using LibreOffice (odt)ExampleBusiness Data ModelConnector configurationHow to insert keys in a template fileUsing Word (docx)Note: Tested versions are Microsoft Word 2007/2010. This connector may work with later versions.Create a field  Insertion &amp;gt; QuickPart &amp;gt; Field…  Select FusionField (or MergeField in some Word versions) and use a template (see Velocity templating language) as field name (eg: ${name}, ${user.Name}…etc)  Click OKUpdating an existing key  Right click on the Fusionfield to edit  Click on Update field…Using LibreOffice (odt)  Insert &amp;gt; Fields &amp;gt; More fields…  Go to Variables tab, select UserField and use a template (see Velocity templating language) as value (eg: ${name}, ${user.Name}…etc)  Choose Text format  Click InsertFor further information about the template design, click hereWarning: there is a known issue when adding an image in a .docx using drag’n’drop instead of a copy/paste. The image is not rendered properly if you convert the generated file into PDF.ExampleThis example uses key values taken from a business variable.Business Data ModelHere is a template example for Leave Request submission and approval.  for Leave Request submission and approval. This .docx file uses keys, most of which will be replaced by values from business variables created from the following Business Data Model:Connector configurationThe configuration is as follows:In this example, the key named user is mapped to the business variable user, the key named leave is mapped to the business variable studyLeave, and the key named today is mapped to a groovy script expression with the following content:import java.text.SimpleDateFormat;new SimpleDateFormat(&quot;yyyy/MM/dd&quot;).format(new Date())  If the keys are mapped with complex objects, pass the high level object to the mapping (eg. ‘user’). The connector will handle the sub-structure of this complex object (eg. ${user.firstName})  When using business variables, relations “loaded when needed” (lazy mode) are not loaded in a connector execution context. To use such relations, create new keys, like “userAddress” in the above example.  If the replacement value is null, then the field key will be rendered (eg. ${userAddress.line2}). Use a “!” mark to render blank value, like $!{userAddress.line2} if userAddress.line2 may be null.And the output file mapping:In this business example, the requesting user enters personal information in a process form. In a subsequent step, the reviewing user adds Approval information. The entered values are then provided as inputs to the insert data in a .docx/.odt template connector to replace the keys.The generated output file is then stored in a document of the process.This connector is built upon XdocReport third party library, for more information check their Wiki at https://github.com/opensagres/xdocreport/wikiYou will find out advanced report design documentation:  Loop for keys in table rows  Use a MS Word macro to design the report  Report samples  …",
      "url": " /bonita/7.8/application-and-process-design/connectivity/insert-data-in-a-docx-odt-template",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-ldap": {
      "title": "LDAP",
      "content"     : "LDAPThe LDAP connector searches in an LDAP directory and returns a list.Configuring an LDAP connector with the wizard:  In the General screen:  Enter a name and description for the connector.  Specify whether the connector runs at the start or the end of the step.  Specify the behavior if the connector fails.  Click Next.Specify the LDAP server information:Input  Description  Type  Host  IP address or name of server hosting LDAP directory  string  Port  LDAP directory port number  number  Protocol  LDAP directory port number  select  user  LDAP user name  string  password  LDAP user password  string  Then click Next.  Specify the search criteria:Input  Description  Type  Base DN  the Distinguished Name at which to start search  string  Filter  specify a subset, e.g. (&amp;amp;(objectClass=person)(givenname=John))  string in accordance with LDAP syntax  Attributes  define attributes to return in result entries using LDAP syntax  string of strings separated by “,”  Scope  subtree: entire subtree starting as the base DN, one level: entries immediately below the base DN, base: search just the named entry  select  Size limit  maximum number of entries to return  number  Time limit (in seconds)  maximum time to allow search to run  number  Referral handling  ignore or follow referrals  select  Alias dereferencing  always: always dereference aliases, searching: dereference aliases only after name resolution, never: never dereference aliases, finding: dereference aliases only during name resolution  select  Then click Next.  Specify the output operations. The connector returns a list object.  Click Finish.",
      "url": " /bonita/7.8/application-and-process-design/connectivity/ldap",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-messaging": {
      "title": "Messaging",
      "content"     : "MessagingThis connector will send an email message when activated. There is no output returned.Note: There is no way to set proxy server settings in this wizard.If there is a Proxy server setup in the company, ask the IT department for the specific configuration.Use the wizard and the information below to configure the connector.You can use the expression editor to specify an expression to provide the value, including scripts or variables. The expression must return a value of the required type. To specify the message content, you can also use a rich text editor.Connection information:Input  Description  Type  SMTP Host  IP address or name of email server  String  SMTP Port  Port defined for email system  Number  Security &amp;gt; SSL (not required)  Check the box if SSL security authorization is required     Security &amp;gt; STARTTLS (not required)  Check the box if STARTTLS security authorization is required     Authentication &amp;gt; Username  User name for the host account  String  Authentication &amp;gt; Password  User password for the host account  String  Addressing information:Input  Description  Type  From  Sender email address  String  To  Receiver email address  String  Other &amp;gt; Reply to  Email address to use when user tries to reply  String  Other &amp;gt; CC  Email address to use for a copy  String  Other &amp;gt; BCC (hidden copy)  Email address to use for a hidden copy  String  Message content:Input  Description  Type  Subject  Text  String  Message  Message content, which can be specified with the expression editor or with a WYSIWYG editor  String  Attachments  Include email attachments defined as a variables or expressions  String  Character set and additional header information (optional):Input  Description  Type  Character set  Character set  String  Headers  Add optional header information  String  ",
      "url": " /bonita/7.8/application-and-process-design/connectivity/messaging",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-salesforce": {
      "title": "Salesforce",
      "content"     : "SalesforceSalesforce version 24.0.0Available Salesforce connectors are:  Create Object - Create a Salesforce object (e.g.: Account, Contact)  Delete Object(s) - Delete one or several Salesforce object with list of objects identifiers in parameters  Query Object - Execute query on Salesforce objects (e.g.: SELECT Name FROM Account)  Retrieve Object(s) - Retrieve one or several Salesforce objects  Update Object(s) - Updates one Salesforce object with a list of objects identifiers in parametersParameters are:  Type of object you want to retrieve (e.g.: Account)  List of objects identifiers  List of fields of the object (e.g.: Name, Phone)  Update object - Update a Salesforce object.Parameters are:  Type of object you want to update (e.g.: Account)  Object identifier  Map of fields of the object to update (e.g.: Name = MyNewName, Phone = 1234)A Salesforce account is necessary. See the Salesforce web site for details.All connectors have these required parameters in common:  Username  Password  Security Token (it could be obtained via the Salesforce user interface)There are also optional parameters:  Endpoint: Endpoint URL  Authentication endpoint: Endpoint configuration  Service endpoint: Service endpoint URL  REST endpoint: REST endpoint URL  Proxy (if you use a proxy)  Proxy port  Proxy name  Proxy password  Timeout: timeout  Read timeout",
      "url": " /bonita/7.8/application-and-process-design/connectivity/salesforce",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-sap-jco-2": {
      "title": "SAP JCo 2",
      "content"     : "SAP JCo 2Note: For Enterprise, Performance, Efficiency, and Teamwork editions only.The SAP Java Connector (SAP JCo 2) is a toolkit that allows a Java application to communicate with any SAP system.It combines an easy to use API with unprecedented flexibility and performance.The package supports both Java to SAP System as well as SAP System to Java calls.  The SAP Jco2 connector can be used to call a SAP function (BAPI, RFC or ZBAPI)  High-performance JNI-based RFC middleware  Supports R/3 3.1H and higher  Supports inbound (Java client calls BAPI or RFM) and outbound (ABAP calls Java server) calls  Supports synchronous, transactional (important for IDocs), and queued RFC  Supports client pooling (good for web servers)  JCO 2.1.x is no longer supported by SAP since 31.03.2013PrerequisiteDownload and install the SAP connector.zip filesHow to use the contents of the zip fileInstallation of system filesHow to import the SAP JCo2 libraryHow to configure the SAP JCo2 connectorThe resultAdvanced features in Subscription EditionsPrerequisiteYou must have an SAP license and an SAP server to use the connector.Download and install the SAP connector.zip filesTo connect to an SAP system from Bonita Studio, and have the correct graphic display, you must install the SAP .dll and .jar files onto your (Windows) machine.You must have a SAP User ID and password to enter the SAP Support Portal to download the files. Go to the SAP Service marketplace (you will need to log in first with an account login and password).JCo2: sapjco-ntamd64-2.1.9Contents of sapjco-ntamd64-2.1.9.zip  demo folder: contains some demos; not needed  docs folder: contains the HTML help pages for installation and librfc32.dll: must be installed in the System32 directory  Readme.txt: contains instructions  sapjco.jar: must be installed in the libraries directory /endorsed of your var-studio install directory  sapjcorfc.dll: must be installed in the System32 directoryHow to use the contents of the zip fileNote: The indications below are found in the Readme.txt.  Unzip the contents of the .zip file into a temporary directory, for example: C:tempsapjco-ntamd64-2.1.9.  In docsjco, click on installation.html.Installation of system filesFor Windows:There are different distribution packages for various JRE versions and hardware processors available:  sapjco-ntintel-2.1.9.zip for a 32-bit JRE running on a 32-bit INTEL x86 or a 64-bit INTEL Itanium processor  sapjco-ntia64-2.1.9.zip for a 64-bit JRE running on a 64-bit INTEL Itanium processor  sapjco-ntamd64-2.1.9.tgz for a 64-bit JRE running on a 64-bit AMD or INTEL x86 processorTo install JCo for Windows:  Unzip the appropriate distribution package into an arbitrary directory {sapjco-install-path}.Important: Do not forget to install the .dll files in the System32 directory for the approptiate Jc0 version.If you already have an older librfc32.dll in the {windows-dir}system32 directory, replace it with the one that comes with JCo.  Add {sapjco-install-path} to the PATH environment variable.  Add {sapjco-install-path}sapjco.jar to your CLASSPATH environment variable.For Linux:There are different distribution packages for various JRE versions and hardware processors available:  sapjco-linuxintel-2.1.9.tgz for a 32-bit JRE running on a 32-bit INTEL x86 processor  sapjco-linuxia64-2.1.9.tgz for a 64-bit JRE running on a 64-bit INTEL Itanium processor  sapjco-linuxppc64-2.1.9.tgz for a 64-bit JRE running on a 64-bit PowerPC processor  sapjco-linuxx86_64-2.1.9.tgz for a 64-bit JRE running on a 64-bit AMD or INTEL x86 processor  sapjco-linuxs390x-2.1.9.tgz for a 64-bit JRE running on a 64-bit IBM eServer zSeries processorTo install JCo for Linux:  Copy the appropriate distribution package into an arbitrary directory {sapjco-install-path}.  Change to the installation directory: cd {sapjco-install-path}  Extract the archive: tar zxvf sapjco-linux*2.1.9.tgz   Add {sapjco-install-path} to the LD_LIBRARY_PATH environment variable.  Add {sapjco-install-path}/sapjco.jar to your CLASSPATH environment variable.How to import the SAP JCo2 libraryIn the Teamwork, Efficiency, Performance, and Enterprise editions, import of the jar file by clicking on the Import sapjco.jar button in the connection configuration window. Then restart Bonita Studio.In the Community edition, there is no import button. The JCo2 library must be imported into the /endorsed directory of your Bonita Studio installation by hand. Then restart Bonita Studio.How to configure the SAP JCo2 connectorUse the wizard to configure the connector. Note the following:  In the **Function definition window, only the function name is required. Enter the name of the function e.g. GET_SYSTEM_NAME  No parameters are needed in the Input parameters window.  In the Output parameters window, the function name is displayed to confirm that the input is this function. Note:You can create a blank .html file on your C: drive, which will be filled with the output information from the SAP connector.  In the Output results window, you can specify an expression, by clicking the pencil to open the Expression editor.Set the expression type to Script, and enter outputResults.get(0). In the Return type, enter string.The resultThe result will be shown in the Bonita Portal as a value in a field and in the .html file as a table containing the value or values.Note: if you have already created a SAP connector and saved the settings, you can simply click on load, to automatically load the connection settings.Advanced features in Subscription EditionsIn the Bonita Teamwork, Efficiency, Performance, and Enterprise editions, the SAP wizard has advanced features: You do not need to know the names of the functions by heart, as the functions are suggested in a dropdown menu.  Filter functions by group: a dropdown list listing all the functions by group  Function description: a dropdown list listing all the functions, with auto-complete (just type the first letter e.g. G to give a list of Get functions  Function name: dropdown list  Input parameters: click on a button More information to show a graphic display in the form of a table, of the chosen function",
      "url": " /bonita/7.8/application-and-process-design/connectivity/sap-jco-2",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-sap-jco-3": {
      "title": "SAP JCo 3",
      "content"     : "SAP JCo3Note: For Enterprise, Performance and Efficiency editions only.The SAP Java Connector is a toolkit that allows a Java application to communicate with any SAP system. It combines an easy to use API with unprecedented flexibility and performance. The package supports both Java to SAP System and SAP System to Java calls.Prerequisite You must have an SAP license and an SAP server to use the connector.JCo 3  The SAP JCo3 connector can be used to call a SAP function (BAPI, RFC or ZBAPI).  High-performance JNI-based RFC middleware.  Supports R/3 3.1H and higher.  Supports inbound (Java client calls BAPI or RFM) and outbound (ABAP calls Java server) calls.  Supports synchronous, transactional (important for IDocs), and queued RFC.  Supports client pooling (good for web servers).  Has monitoring capabilities.Download and install the SAP connector .zip filesTo connect to an SAP system from Bonita Studio, and have the correct graphic display, you must install the SAP .dll and .jar files onto your (Windows) machine. You must have an SAP User ID and password to enter the SAP Support Portal to download the files.Go here (you will need to login first) SAP Service marketplace.JCo 3: sapjco3-ntamd64-3.0.3Contents of sapjco-ntamd64-3.0.3.zip  Readme.txt: contains instructions  sapjco3.jar: must be installed in the /endorsed directory of your Bonita Studio installation and in the webapp libraries directory of the application server.  sapjcorfc.dll (sapjcorfc.so): must be installed in the native library search path:  Windows: usually the dll file is stored in C:windowssystem32  Linux: usually the dll file is stored in /usr/libjavadoc: contains the .html help pages for installation  examples: contains some examplesHow to use the contents of the .zip file with an application server  Extract the contents of the .zip file into a temporary directory, for example: C:tempsapijco3.  Read the installation page provided with the sapjco distribution and follow the instructions.  Put the sapjco3.jar file in the webapp libraries directory of the application server, so that the jar is in the classloader used by the Bonita Engine.  Put the sapjco.dll or .so libraries in the native library search path: C:windowssystem32 for windows, or /usr/lib for Linux.Studio: How to import the SAP JCo3 library and make a request with an example function using the graphic displayThere is below a step by step procedure on Windows. It is assumed that the Studio had been started at least once successfully.  Store the sapjco.dll in the C:windowssystem32 directory  Reboot  Store the sapjco3.jar in the bonita webpapp library directory, deployed in the tomcat embedded with the Studio: e.g. C:BonitaSubscription-7.6.3workspacetomcatwebappsbonitaWEB-INFlib  Store the sapjco3.jar in the endorsed directory of your Bonita Studio installation: e.g. C:BonitaSubscription-7.6.3endorsed.  Start the Studio  Open a diagram  Select a Service task  Add a SAP JCo 3 connector  Fill in all the connection fields with the correct settings. Note that the SAP JCo 3 connector supports a single destination for all connector instances in Bonita Engine.  Once all the fields are filled, test the connection by clicking on the _**test **_button.  In the function definition window, only the function name is required.  Click on the arrow at the end of the field to display a dropdown list of functions.  Click on GET_SYSTEM_NAME for example  Click Next  This will display the Input Parameters window  Click Next  This will display the Output Parameters window  The GET_SYSTEM_NAME is displayed to confirm the input is this function. Note: You can create a blank .html file on your c: drive, which will be filled with the output information from the SAP connector  Enter the path to the .html file in the field called “HTML File”  Click Next  This will display an Ouput operations window  Click FinishAdvanced features in Subscription EditionsAdvanced features in Subscription EditionsIn the Efficiency, Performance and Enterprise editions, the SAP wizard has advanced features: You do not need to know the names of the functions by heart, as the functions are suggested in a dropdown menu.  Filter functions by group: a dropdown list listing all the functions by group  Function description: a dropdown list listing all the functions. Auto complete (just type the first letter e.g. G to give a list of Get functions  Function name: dropdown list",
      "url": " /bonita/7.8/application-and-process-design/connectivity/sap-jco-3",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-script": {
      "title": "Script",
      "content"     : "ScriptThese are the following script connectors:  Groovy 1.8 which executes a Groovy 1.8 script.  Groovy 1.8 (deprecated), which is provided for backward compatibility only so that you can continue to run processes with this connector. Do not use this for new connector instances.  System script, which executes a command or script, generally a shell script (bash for Linux or cmd for Windows).How to configure the system script connectorHow to configure the Groovy script connectorHow to configure the system script connectorFollow the steps in the wizard to configure the connector. For the Parameters of the script, enter this information:  In the first field, enter the script interpreter e.g. /bin/sh  In the second field, enter the execution parameter e.g. -c  In the third field, enter the script e.g. find /home/ -name &quot;*.xml&quot;How to configure the Groovy script connectorFollow the steps in the wizard to configure the connector. When you have entered the script, click Evaluate to test the validity of the script. If the script is not valid, a popup window will display an error message.",
      "url": " /bonita/7.8/application-and-process-design/connectivity/script",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-twitter": {
      "title": "Twitter",
      "content"     : "TwitterThis page explains how to configure the Twitter connectors in Bonita Studio.The following Twitter connectors are available:  Update Twitter status: to publish your own Tweet  Send a tweet: to send a “Direct Message”To publish Tweets or send direct messages, you need to register your application with Twitter. When you register, you will get authorization credentials:  Consumer key  Consumer secret  Access token  Access token secretYou need to provide these when you configure a Twitter connector.To add a Twitter connector, follow the steps in the wizard, and use the following information:  After you specify the authorization credentials, you can check that the connection will work by clicking Test connection. If your application is protected by a firewall, you can also specify the proxy to be used.  For theUpdate Twitter status connector (i.e. “Send a Tweet”), you can enter the Tweet content directly in the wizard for a fixed status, or you can click Switch editor and enter the text using the expression editor.  For theSend a Tweet connector (i.e. “Direct message”), specify the message and the recipient using the expression editor.",
      "url": " /bonita/7.8/application-and-process-design/connectivity/twitter",
      "author": "",
      "categories": "Application and Process Design, Connectivity"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-web-service-web-service-connector-overview": {
      "title": "Web service connector overview",
      "content"     : "Web service connector overviewGeneric configurationInputOutputResultGeneric configuration  Go to Web services in the connectors list.  SelectWeb Service Client.  Click on Next  Enter a name and description for the connector.  Click on Next.To format your entries according to SOAP specifications, go to SOAP!See a working example of a web service connector in this tutorial.Warning: this connector uses the StAX API. StAX libraries cannot be loaded in more than one classloader but must instead be placed in a single location where they can be called by all the items that use them.When you configure a process that uses this connector, you must manage the jar files.InputInput type  Description  Type  Target NS  Target NS (URL)  String  Service name  Name of web service  String  Port name  Web service port name  String  Request  Request entity  String  End point address  URL  String  Binding  Specify protocol and data format  String  Password  Password of user authorized to access  String  Service NS  Target namespace (URL)  String  Service name  Name of web service  String  Port name  Web service port name  String  End point address  URL  String  Binding  Specify protocol and data format  String  Output| Output type  | Description  | Type  || ———— | ———— | —– || Response  | Result of execution  | Source  |ResultThe connector will locate and execute the specific web service and return and output in the form of a Java object.",
      "url": " /bonita/7.8/application-and-process-design/connectivity/web-service/web-service-connector-overview",
      "author": "",
      "categories": "Application and Process Design, Connectivity, Web service"
    }
    ,
  

    "bonita-7-8-application-and-process-design-connectivity-web-service-web-service-tutorial": {
      "title": "Web service connector tutorial",
      "content"     : "Web service connector tutorialNote: This example uses the 6.x Application legacy forms.This example process will use a Web Service connector to call a sample Web Service to display a weather report.  Create the diagram (as shown in the example above)  Select the Pool &amp;gt; Data and click on the Variables tab and add the following process variables:  city (text)  country (text)  weatherData (Java Object of type java.util.Map)Create a case start form for the Pool. Select the pool and go to the Details panel, 6.x Application tab, Pageflow pane, Forms tab and add the following widgets:  City (text field)  Country (text field)  Get weather forecast (submit button)Set the : transition conditions on the gateway  Select the transition to Display Weather and check Default Flow  Select the transition to No Result Found and edit the condition by clicking on the Pencil icon  Select script in the edit window and enter the following Groovy to evaluate the condition:   return (weatherData==null)  set a name and click OKSelect the Get weather service task  Add a WebService 1.2 connector to this task and configure it using the wizard.In the Connection parameters window:  For the Community edition, provide these settings:  Service NS: GlobalWeather  Service name: http://www.webserviceX.NET  * For the Teamwork, Efficiency, Performance, or Enterprise edition. provide these settings:  Enter the WDSL URL http://www.webservicex.net/globalweather.asmx?WSDL and click on the Introspect button, then leave the login info fields empty  Set the Port: GlobalWheatherSoap12 and leave other parameters with default values  * In the Request parameters window (for all editions), provide these settings:  SOAP action: http://www.webserviceX.net/GetWeather  Port name: GlobalWeatherSoap12  End point address: http://www.webservicex.net/globalweather.asmx  Binding: http://www.w3.org/2003/05/soap/bindings/HTTP/  Envelope &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;env:Envelope xmlns:env=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&amp;gt; &amp;lt;env:Body&amp;gt;   &amp;lt;tns:GetWeather xmlns:tns=&quot;http://www.webserviceX.NET&quot;&amp;gt; &amp;lt;tns:CityName&amp;gt;${city}&amp;lt;/tns:CityName&amp;gt; &amp;lt;tns:CountryName&amp;gt;${country}&amp;lt;/tns:CountryName&amp;gt;   &amp;lt;/tns:GetWeather&amp;gt; &amp;lt;/env:Body&amp;gt;&amp;lt;/env:Envelope&amp;gt;  In the Response configuration window, check the Returns body checkbox to use the response body in the output operations.  In the Output operations window, edit the first output operation:  Select the weatherData variable as the connector output target  Click on the pencil icon to edit. Edit the expression of the data to be saved and enter the following Groovy script (the script parses the XML output of the Web Service):  In Expression type, click on Script  The script should be as follows:import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import org.w3c.dom.Document;import org.w3c.dom.Element;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import org.xml.sax.InputSource;// Clean response xml documentresponseDocumentBody.normalizeDocument();// Get result nodeNodeList resultList = responseDocumentBody.getElementsByTagName(&quot;GetWeatherResult&quot;);Element resultElement = (Element) resultList.item(0);String weatherDataAsXML = resultElement.getTextContent();// Check for empty resultif (&quot;Data Not Found&quot;.equalsIgnoreCase(weatherDataAsXML))return null;// Parse embedded XML of resultDocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();InputSource inputSource = new InputSource();inputSource.setCharacterStream(new StringReader(weatherDataAsXML));Document weatherDataDocument = documentBuilder.parse(inputSource);Node weatherNode = weatherDataDocument.getDocumentElement();// Save weather dataMap&amp;lt;String,String&amp;gt; data = new HashMap&amp;lt;String,String&amp;gt;();NodeList childNodes = weatherNode.getChildNodes();for (int i=0; i&amp;lt;childNodes.getLength(); i++) {Node node = childNodes.item(i);if (node.getNodeType() == Node.ELEMENT_NODE) {String key = node.getNodeName();String value = node.getTextContent();data.put(key, value);}}return data;  In Return type enter java.util.Map  Select the Display weather task and add a blank form (without any widget) by going into the Application &amp;gt; Pageflow tab  In the form builder, drag and drop a table widget to create a table  Select the table widget, click on the Data tab  Click on Edit as an expression, then click on the pencil next to the first field (initial value)  Use the following Script:List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; table = new ArrayList&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;();Set&amp;lt;Entry&amp;lt;String,String&amp;gt;&amp;gt; weatherDataEntries = weatherData.entrySet();for (Entry&amp;lt;String,String&amp;gt; entry : weatherDataEntries) {List&amp;lt;String&amp;gt; row = new ArrayList&amp;lt;String&amp;gt;();row.add(entry.getKey());row.add(entry.getValue());table.add(row);}return table;  In Return type enter: java.util.list  Create a submit button called Close  Select the **No result found task **and add a blank form by going into the Application &amp;gt; Pageflow tab  Add a message widget and sets its initial value to “Sorry, no result found.”  Add a submit button and name it “Close”Once you have finished creating the diagram and configuring the tasks, the script and form fields, click Run to deploy and run the process in Bonita Portal.  In the first form, enter a country and a city e.g. France, Grenoble  Click Get Weather Forecast  Click Display weatherThe ResultThe result is a form displaying all the weather information retrieved, for Grenoble.Weather forecastStatus  Success  Time  Jan 02, 2014 - 08:00 AM EST / 2014.01.02 1300 UTC  RelativeHumidity  81%  Temperature  51 F (11 C)  Location  Grenoble / St. Geoirs, France (LFLS) 45-22N 005-20E 386M  DewPoint  46 F (8 C)  Visibility  greater than 7 mile(s):0  Pressure  29.85 in. Hg (1011 hPa)  Wind  from the SSW (200 degrees) at 8 MPH (7 KT) (direction variable):0  ",
      "url": " /bonita/7.8/application-and-process-design/connectivity/web-service/web-service-tutorial",
      "author": "",
      "categories": "Application and Process Design, Connectivity, Web service"
    }
    ,
  

    "bonita-7-8-application-and-process-design-data-data-handling-overview": {
      "title": "Data handling overview",
      "content"     : "Data handling overviewIn a BPM-based application, use:  Business variables for information that:  is mostly used by Bonita  has meaning after a process instance is archived  is used at several places in the process  is read by a process to orientate its flow  is shared across several process instances  is displayed in an application pageTask-level process variables for:  intermediate computation results (for example a connector result to be used as input of the next connector)  information that is private to the process, not used elsewhere in the applicationPool-level process variables for information that:  can be read by the process to orientate its flow  can be used at several places in the process  is private to the process, not used elsewhere in the applicationExternal databases, with connectors and custom data types, for information that:  is used by multiple applications besides Bonita  Key benefits of using business data:  Control of indexing strategy  Definition of custom queries to efficiently read the data  Full control of lifecycle of the data through the set of processes that handle it (add, update and delete)  Improved performance compared with process variables or external databases  Easier application maintenanceAn application page accesses business data using the bdm REST API. A page also contains page variables, which have no meaning outside the page.The data that is passed from a form to a process is defined using a contract. Define a contract for process instantiation and for each human task. These contracts are part of the process definition. A form has access to business data and documents using the context](/bonita_doc/bonita/7.8/application-and-process-design/define-access-control-on-business-objects/contracts-and-contexts) and the . A form also contains form variables, which have no meaning outside the form.",
      "url": " /bonita/7.8/application-and-process-design/data/data-handling-overview",
      "author": "",
      "categories": "Application and Process Design, Data"
    }
    ,
  

    "bonita-7-8-application-and-process-design-data-define-and-deploy-the-bdm": {
      "title": "Define and deploy the BDM",
      "content"     : "Define and deploy the Business Data Model (BDM)The business data model is the definition of the business data that is shared by processes and process-based applications in a tenant. This page explains how to define the business data model and how to deploy it. After the model is defined, you can use it to specify the business data used in a process.Business data model (BDM)Business data storageBDM specificationDefine the BDMExport the BDMBusiness objects in processesBusiness data model (BDM)Your business data is the information that is shared between your processes and applications. It is defined as a set of business object in a business data model (BDM). There is one BDM that is used by all processes and applications in a tenant.  A BDM is defined at tenant level. It means you can have different BDM per tenant on the same Bonita platform. See BDM data storage for more information on how to configure a business data model per tenant.When you define a process, you specify the business objects that are relevant to the process. When a process is instantiated (a case is started), the specified business objects are instantiated as required, becoming variables within the process instance.You are recommended to use business data instead of process data for any data that has meaning outside of one single process. The business data objects are stored in a database that can be accessed by all applications and processes in a tenant. There is no need to import data from an external system or write it back after a change. The data is automatically stored persistently. It is simple to specify the business objects relevant to a process or task, using Bonita Studio. You can also access a business object programmatically by its data access object (DAO).To design your BDM, you need to consider the following:  In a BDM, you create predefined business object definitions that represent key concepts which are manipulated by your processes. For example, Orders, Invoices, and Leave requests are be shared by all processes when running in the Bonita Engine during production.  A BDM is composed of simple and complex business objects, and the composition and aggregation relationships between them.  There is one BDM for a tenant, so it must include all the objects needed. Updating a model must be done with care, so that the changes do not cause problems for deployed processes or applications.  Business objects are instantiated at diagram or process level, not at task or form level.The BDM specification explains the details of what you must configure in a BDM. Use Bonita Studio to define a BDM.Business data storageThe business data specified in the BDM is stored in a database. It requires two datasources, BusinessDataDS and NotManagedBizDataDS. When you define the BDM in Bonita Studio, the built-in H2 database and the datasources are created automatically in your development environment.During development, you can use the tools in the h2-1.3.170.jar in the workspace Tomcat library to view the business data in the h2 database. If you modify database content manually, there is risk of losing data and losing synchronization with business objects in a process instance. However, it can be useful to view the database for debugging processes. If you change the BDM during development, this can also cause problems in existing process definitions.When you are ready to go to production, you need to configure a database and datasources for business data in your production environment.BDM specificationA BDM is a structured hierarchy of business objects. It is identified by a package name.A business object definition consists of the following:  An object name. This must be a Java class name, because a business object is implemented as a Java class. The fully-qualified object name must be unique.  Attributes. These are the components of the object. There can be any number of attributes. For each attribute, you can specify:  A name  The data type  The length, when relevant for the data type  Whether it is mandatory  Whether the object can contain multiple instances  Any unique constraintsA set of default queries, created automatically, and optionally some custom queries  Indexes for some attributes (optional)  A persistenceId, created automaticallyBusiness objects can be combined using composition or aggregation relationships. They are managed using standard create, read, update, delete actions. A business object can be read directly using the Engine Java API specifying the Java DAO, or using the REST API. To read a business object in a Groovy expression, use the DAO. A business object can be updated only in a process, using an operation.MultipleIn some processes, user interfaces or system activities might need to handle multiple instances of a business object. Use cases include the ability to modify data on mass (for example, approving several leave requests from a list in a user form), and initializing a set of data coming from an external system (for example, loading a list of products from an external datasource and saving each of them in a business object instance).To support handling of multiple instances of a business objects:  Specify that a given business data is multiple, using a checkbox in the new business data wizard.  Use a java.util.list of objects when accessing multi-instance business data from a Groovy expression.  Set the list of business object instances in an operation using takes value of with a right operand that consists of a list of existing (possibly modified) and new business object instances.  Delete all instances from a list of business object instances with an Is Deleted operation.Unique constraintAn SQL UNIQUE constraint is a single field or a combination of fields that uniquely defines an entry in a database. A unique constraint on a single field means that every entry has a different value for this field. A unique constraint for a combination of fields means that this combination is unique, even though some of the component field values might be common or null.You can specify a unique constraint for an attribute, to require that every value of the attribute is unique. This means that you can use this attribute in data queries knowing that it is not possible for two entries to have the same value.QueriesJPQL queries are used to get information about data objects stored in the database. A set of default queries is defined automatically for each object in the BDM. You can also create custom queries.The default queries are find and find_by queries. There are three types:  based on unique constraints (which returns a single result)  based on simple attributes (with = criterion)  based on Select All (which returns all Business data on the Business Object)To create a custom query, use the query tab of the Expression editor to write a query script. You can use one of the default queries as an example. A custom query can be on multiple attributes. Only SELECT queries are supported.To use paged results with a custom query on a business object, you need to define a related query that counts the total number of results that the query would return without paging. The count query name is based on the custom query name; for example, for a query named query1, the count query must be named countForQuery1. For a default query, the count query is created automatically.When you call a query via the REST API, the relevant count query is automatically called in the background to get the total count, which can be used to calculate the number of pages necessary to retrieve all matching results. The result of the count query is visible in the HTTP response header, in the Content-Range field.To call a query, use the DAO instance. For a Groovy expression, there is a provided variable that implements the business object DAO class.Example: When handling business objects in a form, you want to reload business objects from a query and use a Groovy script to repopulate the form accordingly. Suppose that a form shows a list of contracts that can be filtered according to the choice of client in a selection widget. When the user selects a client, this triggers the execution of a business object query, Contracts.findByClient(). A script parses the resulting list of Contracts and repopulates the contract list widget. This scenario requires DAO objects to be called from a Groovy script expression.IndexesThe purpose of an index is to retrieve data more rapidly. You can specify indexes on business objects to optimize performance of application. For example, for a process to modify purchase orders with an instantiation form used to search for the appropriate purchase order, define an index on purchase order number.When you view a business object in the Bonita Studio business data model wizard, you can see the attributes that can be indexed. You can define an index on a single attribute or on an ordered list of attributes. An index is automatically created on the PersistenceID, as a primary key. This index is not visible in the BDM wizard. The BDM defines the indexes needed for all applications and processes that use business data. There is no limit to the number of indexes you can define. However, if you define a large number of indexes and have a high volume of business data, it takes longer to build the indexes.Note: If you are using an Oracle database, do not define an index on a unique constraint attribute. The database creates indexes automatically for unique constraint attributes, so there are problems during execution if you also specify an index on a unique constraint attribute.In a production environment, indexes are built when a tenant starts or after a new BDM is deployed. In a development environment, indexes are built when Bonita Studio starts and when the Studio BDM wizard is closed.Composition and aggregationComposition and aggregation are two ways in which you can define a composite business object that includes relationships with other business objects in the BDM.  In a composition relationship, a child object cannot exist independently of the parent. The composite business object contains attributes that are business objects. It can also contain attributes with simple data types. For example, a room object that is a child of a house object cannot exist if there is no house object.  In an aggregation relationship, a child object can exist independently of the parent. The composite business object refers to other business objects, as well as containing simple attributes.Example: A Purchase Order object consists of a set of primitive attribute variables (such as PO number, client, creation date), and a set of order item objects. The order items have no meaning outside the order, so have a composition relationship with the purchase order. An order item contains a product object and a simple attribute for quantity. The product object has an existence outside the order item (it is used in the product catalog), so has an aggregation relationship with the order item.In the Bonita Studio BDM wizard, you can specify the objects that are related by composition and aggregation, as well as the simple attributes. A child object can be mandatory or optional. A child object can be multiple, which means that the composite object contains zero or more (if optional) or one or more (if mandatory) instances of the child object. You cannot set a unique constraint on a child object. The default relationship is composition.When you configure an object in the Bonita Studio BDM wizard, the attribute dropdown list contains the names of the objects that can be included by composition or aggregation. You cannot specify the object you are configuring or its parent.A composed object is automatically saved to the database using an appropriate schema. For a composition relationship, the child object contains the id of the parent object as a foreign key. For an aggregation relationship, if the child object is not multiple, the parent object contains the id of the child object as a foreign key. If the child object is multiple, the child object ids are stored in a dedicated association table.When you create a process that uses a business object with a composition or aggregation relationship, treat the object as a typical business object, with the following exceptions:  A composite object cannot be automatically mapped to page widgets or groups of widgets.  To set the value of a composite object, either use a Groovy expression or directly assign the value to the child object from an existing class instance.  You can use getter and setter methods in process or activity operations to set the composed objects as a single instance or as a java.util.list for a list of instances.  If your process uses a query from a Groovy expression or uses DAO objects from a client Java application, load the complete composite objects including the child objects.LoadingThere are two options for loading complex business objects, lazy or eager.With lazy loading, the parent object instance is loaded, but child object instances are loaded only when they are needed.With eager loading, child object instances are loaded when the parent object instance is loaded.The default is lazy loading. You can override this for any business object by configuring it to use eager loading when you specifythe object relationship properties. This means that the specified object and all objects related to it by composition or aggregationrelationships are loaded.There is an overhead for the additional data load and maintenance of the information in memory, but there is a saving in data access time because the data is already loaded.Multi-instantiation using business object variables in a listThe list can be a multiple business data variable, a multivalued process variable, or any type of list.You can use a list business object or variable to create multiple instances of a task. The MultiInstanceIterator reference created at task level uses each item of the list to create an instance of the task.Define the BDMYou define the BDM using Bonita Studio. It is automatically deployed to the built-in Bonita Engine and available to processes being run from Studio.This means that you can have a different BDM in each Studio during development, which enables you to test the BDM before deploying it in your tenant.However, if you are sharing diagrams and other artifacts in development, you need to synchronize BDM definitions, either by exporting your BDM manually for importinto other development systems, or by using a shared repository (not available in the Community edition).To define the BDM, go to the Bonita Studio Development menu, BDM, and choose Manage. The current BDM definition is displayed. Specify the package name for the BDM in the field below the List of Business Objects.To add an object:  Go to the List of Business Objects and click Add.  The newly created object is added to the list, with a temporary name.  Click the name of the new object to select it, and specify the name you want to use by typing over the temporary name.  Then modify the object to specify the details.To modify a new or existing object:  Select the object in the List of Business Objects. The details are displayed on the right-hand side of the popup.  Enter a description for the object. This is optional, but recommended for maintenance and for communicating with other developers using the same BDM.  In the Attributes tab, specify the attributes of the object. For each attribute:  Specify a name. This must be unique within the object.  Specify the type, by clicking on the exiting type and choosing the new type from the drop-down list.  If the attribute is multi-valued, check the box in the Multiple column.  If the attribute is mandatory, check the box in the Mandatory column.  If the attribute is of type String, set the attribute length in the field below the attribute list.  If the attribute is of type of a BDM object, set type the Relationship (Aggregation or Composition) and the loading configuration (for lazy, select Only load related objects when needed, for eager, select Always load related objects)In the Unique constraints tab, specify the attributes and sets of attributes that have a uniqueness constraint.  Click Add to add a constraint. The constraint is added to the list with a temporary name.  Click the name of the new constraint to select it, and specify the name you want to use by typing over the temporary name.  Click in the Attribute column of the constraint, and click the icon at the right end of the file to open the Select attributes popup.  In the popup, check the boxes to select the combination of attributes that must be unique. You can specify a single attribute or a set.  Click OK to close the popup. The attributes are shown in the constraints list.In the Queries tab, you can view the default queries and manage custom queries. To add a custom query:  Click the Custom radio button.  Click Add to add a constraint. The query is added to the list with a temporary name.  Click the name of the new query to select it, and specify the name you want to use by typing over the temporary name.  Click in the Query column, and click the icon at the right end of the file to open the Create query popup.  In the popup, specify the query in JPQL. All the parameters used in the query must be specified in the list.  Select the result type from the drop-down list.  Click OK to close the popup. The query is saved.In the Indexes tab, specify the indexes for the object.  Click Add to add an index. The index is added to the list with a temporary name.  Click the name of the new index to select it, and specify the name you want to use by typing over the temporary name.  Click in the Attribute column of the index, and click the icon at the right end of the file to open the Select attributes popup.  In the popup, specify the attributes that you want indexed. To specify an attribute to index, select the attribute in the Available attributes list and click Add.  Use the Add, Remove, Up and Down buttons to specify the index attributes in order.Click OK to close the popup. The index is saved.  Click Finish to save the business data model, which saves all the objects and create BDM database structure. A confirmation dialog will ask to optionally reset BDM database. Reset database is required when changes impact the mandatory or multiple setting for an attribute, a unique constraint, or when a non primitive attribute type is modified.Export the BDMThere are two ways to export a business data model: in a ZIP file for deployment, or in a BOS file for sharing with other Bonita Studios.Export the BDM for deploymentTo deploy the BDM, you export it as a ZIP file from Bonita Studio and then import it into Bonita Portal. Warning: Before deploying the business data model, you must pause the BPM services, so that the update can be performed without affecting ongoing processes. Important: You are recommended Back up your platform and database before deploying a new BDM in case of problems during the update.Follow these steps:  In Bonita Studio, open the Development menu in the cool bar.  Click Business Data Model &amp;gt; Export.  Select a destination folder.  Click Export. A file called bdm.zip is written to the folder that you specified.  Log in to Bonita Portal as the technical user.  Go to the BPM Services page.  Click Pause.  When the BPM services are paused, go to the Business Data Model menu (and, for Efficiency, Performance and Enterprise editions, choose Definition).  Specify the file containing the business data model that you exported from Bonita Studio.  Click Activate. A warning is displayed, reminding you that installing this new BDM will overwrite the existing BDM.  Click on Install to complete the deployment. Bonita Portal loads the file, and retrieves the object definition enabling processes to use them at runtime. It also creates or updates the database schema in the business database, to store business objects appropriately when modified by processes. When the deployment is complete, a message is displayed. If deployment fails, use the Engine logs to analyze the problem.  Go to the BPM Services page.  Click Resume. BPM services are resumed.Warning: the database model is automatically updated when you deploy a new BDM. Avoid changing the database schema manually as it may jeopardize the persistence of business objects and cause errors at process runtime.Export the BDM to share with another Bonita StudioThe bdm.zip exported from the Bonita Studio Development menu is designed for import into the Portal, and cannot be imported into another Bonita Studio. Instead, create a .bos file, as follows:  Choose Export from the Diagram menu or click Export in the Cool bar.  In the popup of exportable items, select only the Business Data Model.  Specify the filename and location or use the default suggested.  Click Finish.The resulting .bos file can be imported into any Bonita Studio with a Subscription license.Warning: Bonita Studio can contain only one business data model. When you import a .bos file that contains a business data model, it overwrites the model that is already in the Studio.View the BDMThe BDM ZIP file contains a business object model file, bom.xml. You can open this file in a text editor to view the BDM definition.Example contents of the bom.xml file:&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;&amp;lt;businessObjectModel&amp;gt;&amp;lt;businessObjects&amp;gt;&amp;lt;businessObject qualifiedName=&quot;com.company.model.LeaveRequest&quot;&amp;gt;&amp;lt;fields&amp;gt;&amp;lt;field id=&quot;startDate&quot; type=&quot;DATE&quot; nullable=&quot;false&quot; length=&quot;255&quot; collection=&quot;false&quot;/&amp;gt;&amp;lt;field id=&quot;endDate&quot; type=&quot;DATE&quot; nullable=&quot;false&quot; length=&quot;255&quot; collection=&quot;false&quot;/&amp;gt;&amp;lt;field id=&quot;returnDate&quot; type=&quot;DATE&quot; nullable=&quot;false&quot; length=&quot;255&quot; collection=&quot;false&quot;/&amp;gt;&amp;lt;field id=&quot;daysOff&quot; type=&quot;DOUBLE&quot; nullable=&quot;false&quot; length=&quot;255&quot; collection=&quot;false&quot;/&amp;gt;&amp;lt;field id=&quot;leaveType&quot; type=&quot;STRING&quot; nullable=&quot;false&quot; length=&quot;255&quot; collection=&quot;false&quot;/&amp;gt;&amp;lt;field id=&quot;approved&quot; type=&quot;BOOLEAN&quot; nullable=&quot;true&quot; length=&quot;255&quot; collection=&quot;false&quot;/&amp;gt;&amp;lt;/fields&amp;gt;&amp;lt;uniqueConstraints/&amp;gt;&amp;lt;queries&amp;gt;&amp;lt;query id=&quot;query1&quot; content=&quot;SELECT l.daysOffFROM LeaveRequest lWHEREl.leaveType = &#39;Test&#39;&quot; returnType=&quot;java.lang.Double&quot;&amp;gt;&amp;lt;queryParameters/&amp;gt;&amp;lt;/query&amp;gt;&amp;lt;/queries&amp;gt;&amp;lt;/businessObject&amp;gt;&amp;lt;/businessObjects&amp;gt;&amp;lt;/businessObjectModel&amp;gt;Business objects in processesWhen you design a process, you specify the variables to be used in the process. These can include variables that are instances of business objects defined in the BDM. You define a business object variable in Bonita Studio in a similar way to defining other process variables.persistenceIDEach object created in the database has a unique read-only ID called a persistenceID. For each new persistenceID created, the number is incremented. The persistenceID is invisible to the end user in Bonita Portal. A developer can recover this Id by using the method getPersistenceID.When you declare a persisted business object instance in a process, there are two ways you can initialize it:  as a new instance: it is created automatically at runtime when the process is instantiated, with the structure defined for the object in the BDM (for example, a process designed to manage employee leave requests will create a new instance of the Leave Request business object). The initial value of each BDM attribute can be set via a groovy script. This way, you may set the process instantiation contract inputs to attributes. Go to Update BDM attributes from contract inputs for more information.  as an existing instance: the data is loaded by identifying a business object instance that already exists (for example, a process designed to let employees modify unapproved leave requests will modify an existing instance of the Leave Request business object).After it is declared in the process, a business object instance can be adapted by reading or modifying its data attributes. The Engine will handle the persistence of the modification.Initialize BDM attributes from process instantiation contract inputsIn the contract definition panel of the Studio (Details panel, Execution tab, Contract pane), you can import contract inputs from a BDM definition using the Add from data… button. It creates a complex input mapping the BDM class attributes (if an attribute is not a primitive Java element, another complex input is created and it goes on).By selecting Auto-generate the initialization script, the default value of the selected business data will be automatically initialized with an auto-generated script when clicking on finish.If you select No, thanks. I’ll manually define how to use the contract, you will need to create a Groovy script that will set input to BDM attribute.For instance, with the above com.company.model.LeaveRequest class, using the Add from data… action in the Details panel, Execution tab, Contract pane will create the following complex input :  leaveRequestInput : COMPLEX  startDate : DATE  endDate: DATE  returnDate: DATE  daysOff: DECIMAL  leaveType: TEXT  approved: BOOLEANThen, you need to go back to the process variable list (Details panel, Data tab, Parameters pane) and add a new variable of type com.company.model.LeaveRequest or edit an existing one of the com.company.model.LeaveRequest type and click on the Pencil to open the Groovy script editor.  Enter the following code snippet to have a new BDM com.company.model.LeaveRequest instance set with the contract inputs:var leaveRequest = new com.company.model.LeaveRequest();leaveRequest.setStartDate(leaveRequestInput.getStartDate());leaveRequest.setEndDate(leaveRequestInput.getEndDate());leaveRequest.setReturnDate(leaveRequestInput.getReturnDate());leaveRequest.setDaysOff(leaveRequestInput.getDaysOff());leaveRequest.setLeaveType(leaveRequestInput.getLeaveType());leaveRequest.setApproved(leaveRequestInput.getApproved());return leaveRequest;Initialize BDM attributes from contract inputs in task operationsIn the case where a business object has to be initialized from task level inputs, you can set contract inputs from the Add from data… action like in previous section and generate automatically operations by selectionning Auto-generate the initialization script. The operations will be generated for business data attributes you selected. You can manage it inside the Details panel, Execution tab, Operations pane.If you select No, thanks. I’ll manually define how to use the contract or create inputs manually, you can go to operation pane and add a new operation using the Add button.In the first select box, choose the variable of type com.company.model.LeaveRequest, then, click on Takes value of link and select Instantiate with in Operator type and click OK.Then, click on the pencil button to open the Edit Expression editor. Choose the Script expression type and enter the same code snippet than the one above to have a new BDM com.company.model.LeaveRequest instance set with the contract inputs.Business Objects and connectorsYou can use business data in a Java program by using the DAO. DAO gives read access to business objects. Warning: In a connector, code is executed outside a transaction, so retrieving or updating business data by DAO is not supported.You can however manipulate the business object outside the connector, and use business objects as connector input or output:  For a read, retrieve the business object with an expression (for example, employeeDAO.findByFirstNameAndLastName(&quot;William&quot;,&quot;Jobs&quot;). Then use the object as input to the connector.  For a create or update, return the new or updated business object as output of the connector.Then use the business object (which is stored only in memory at this point) in an operation to update the business object in the business database, persisting the change.BDM and custom REST APIsBe aware that a poor implementation of a custom REST API accessing BDM objects can lead to poor performance results. See the best practice on this matter.Handle BDM database schema manuallyThis section is for advanced usage. You should fully understand the database changes made when you update the Business Data Model before considering usingthis alternative.You can use an alternative database SchemaManager implementation. A SchemaManager is responsible for updating the BDM Database schema, according to the changes you have made to yourBusiness Data Model. As our third-party persistence layer Hibernate does not support all type of schema updates, you may want to use a SchemaManager that does not update the databasetables directly, but rather let you (or your Database Administrator) update the database “manually”.For that, you can use the alternative we provide, by uncommenting the following lines in file platform_conf/current/tenants/[TENANT_ID]/tenant_engine//bonita-tenants-custom.xml using setup tool.&amp;lt;!-- Schema Manager that avoids to update the database schema when updating BDM --&amp;gt;&amp;lt;!--&amp;lt;bean id=&quot;schemaManager&quot; class=&quot;org.bonitasoft.engine.business.data.impl.SchemaManagerReadOnly&quot;&amp;gt;&amp;lt;constructor-arg name=&quot;loggerService&quot; ref=&quot;tenantTechnicalLoggerService&quot; /&amp;gt;&amp;lt;/bean&amp;gt;--&amp;gt;With this alternative, you should carefully update the database before deploying the new BDM version. Otherwise, there are a number of pitfals you may fall into.Errors you can get if you:  use a business object without updating the database schema:15-May-2018 12:04:12.106 ERROR [http-nio-52162-exec-8] org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logExceptions Table &quot;BUSINESSOBJECT1&quot; not found; SQL statement:insert into BUSINESSOBJECT1 (persistenceId, ATTRIBUT1, ATTRIBUT2, ATTRIBUT3, persistenceVersion) values (null, ?, ?, ?, ?) [42102-175]15-May-2018 12:04:12.113 GRAVE [http-nio-52162-exec-8] org.restlet.resource.ServerResource.doCatch Exception or error caught in server resource org.bonitasoft.engine.exception.BonitaRuntimeException: USERNAME=walter.bates | org.bonitasoft.engine.commons.exceptions.SRetryableException: javax.persistence.PersistenceException: org.hibernate.exception.SQLGrammarException: could not prepare statementextend the length of a business object attribute without updating the database column:15-May-2018 16:09:28.066 WARN [http-nio-52162-exec-4] org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logExceptions SQL Error: 22001, SQLState: 2200115-May-2018 16:09:28.067 ERROR [http-nio-52162-exec-4] org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logExceptions Value too long for column &quot;ATTRIBUT1 VARCHAR_IGNORECASE(20)&quot;: &quot;CAST(STRINGDECODE(&#39;   30 caractu00e8res__________&#39;) AS VARCHAR_IGNORECASE) (30)&quot;; SQL statement:insert into BUSINESSOBJECT1 (persistenceId, ADDEDCOLUMN, ATTRIBUT1, ATTRIBUT2, NEWBOOLEAN, persistenceVersion, RENAMEDCOLUMN) values (null, ?, ?, ?, ?, ?, ?) [22001-175]15-May-2018 16:09:28.075 GRAVE [http-nio-52162-exec-4] org.restlet.resource.ServerResource.doCatch Exception or error caught in server resource org.bonitasoft.engine.exception.BonitaRuntimeException: USERNAME=walter.bates | org.bonitasoft.engine.commons.exceptions.SRetryableException: javax.persistence.PersistenceException: org.hibernate.exception.DataException: could not execute statementchange the type of a business object attribute without updating the database column:15-May-2018 17:00:08.083 WARN [http-nio-52162-exec-5] org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logExceptions SQL Error: 22018, SQLState: 2201815-May-2018 17:00:08.084 ERROR [http-nio-52162-exec-5] org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logExceptions Data conversion error converting &quot;&#39;now is a String&#39; (BUSINESSOBJECT1: NEWBOOLEAN BOOLEAN)&quot;; SQL statement:insert into BUSINESSOBJECT1 (persistenceId, ADDEDCOLUMN, ATTRIBUT1, ATTRIBUT2, NEWBOOLEAN, persistenceVersion, RENAMEDCOLUMN) values (null, ?, ?, ?, ?, ?, ?) -- (NULL, ?1, ?2, ?3, ?4, ?5, ?6) [22018-175]15-May-2018 17:00:08.085 GRAVE [http-nio-52162-exec-5] org.restlet.resource.ServerResource.doCatch Exception or error caught in server resource org.bonitasoft.engine.exception.BonitaRuntimeException: USERNAME=walter.bates | org.bonitasoft.engine.commons.exceptions.SRetryableException: javax.persistence.PersistenceException: org.hibernate.exception.DataException: could not execute statementchange a relation between two business objects without updating the database / constraints:[...]Caused by: groovy.lang.MissingMethodException: No signature of method: com.company.model.Invoice.addToLines() is applicable for argument types: (com.company.model.InvoiceLine) values: [com.company.model.InvoiceLine@623c31c]remove a composition relation without removing the foreign key in database:16-May-2018 10:25:01.030 WARN [http-nio-52162-exec-10] org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logExceptions SQL Error: 23502, SQLState: 2350216-May-2018 10:25:01.030 ERROR [http-nio-52162-exec-10] org.hibernate.engine.jdbc.spi.SqlExceptionHelper.logExceptions NULL not allowed for column &quot;INVOICE_PID&quot;; SQL statement:insert into INVOICELINE (persistenceId, persistenceVersion, TITLE) values (null, ?, ?) [23502-175]16-May-2018 10:25:01.038 GRAVE [http-nio-52162-exec-10] org.restlet.resource.ServerResource.doCatch Exception or error caught in server resource org.bonitasoft.engine.exception.BonitaRuntimeException: USERNAME=walter.bates | org.bonitasoft.engine.commons.exceptions.SRetryableException: javax.persistence.PersistenceException: org.hibernate.exception.ConstraintViolationException: could not execute statement  ",
      "url": " /bonita/7.8/application-and-process-design/data/define-and-deploy-the-bdm",
      "author": "",
      "categories": "Application and Process Design, Data"
    }
    ,
  

    "bonita-7-8-application-and-process-design-define-access-control-on-business-objects-contracts-and-contexts": {
      "title": "Contracts and contexts",
      "content"     : "Contracts and contextsOverviewContract purpose and valueContract definitionContextOverviewThe notion of contract is available at two levels: process instantiation and human task execution. A contract is composed of inputs and constraints. Inputs are pieces of information that must be provided to the process or the human task. The constraints are applied to the input to check that the values of the inputs are valid.As an example, a Leave Request Process could declare the following contract:  Inputs:  Start Date  End Date  Leave typeConstraints:  End Date after Start Date  Start Date in the future  Leave type in (“Annual Leave”, “Unpaid Leave”)  Contract purpose and valueA contract specifies the pieces of information the process requires to be started. Without this information the process cannot execute its business logic, and it is not useful to try to start an instance of the process. That is to say, if you try to start an instance of the process without providing the expected input, the system will refuse to start the process. The same is true for a human task: if you try to perform the task without providing the expected input, the system will refuse to execute the task. A contract protects the process from malformed external interaction. After validation, the inputs are used to initialize business data, or process data, or are passed through connectors.Contract definitionIn Bonita Studio select the pool to create the process instantiation contract, or select a human task to create a task contract.Go to the Details panel, Execution tab, Contract pane. In the Inputs tab, declare each expected input and its type. You have two options: declare the input manually or from a business variable using the Add from data option. Defining an input based on a variable saves you time, and is the preferred option if the aim of the input is to initialize (or update) the business variable. In addition, using Add from data on a task contract automatically generates operations to update the selected business variables with the task inputs. In the Constraints tab, declare expressions that check the validity of the value of each input. A constraint has a name, a content, and a error message. The message is logged if the constraint is not met. Make sure to provide a meaningful name and message to help process users understand why the system rejected the order to start the process or execute a task.In the Leave Request Process example, the contract inputs and the constraints would be similar to the following:Stacktrace example in case of contract violation:  Supported input types:  Boolean: accepts true or false values  complex: a tree structure that is equivalent to a key-value map where keys are fixed (e.g. if an input named user with children attributes firstname and lastname)  date: a date respecting the following pattern : yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss or yyyy-MM-ddTHH:mm:ssZ or yyyy-MM-ddTHH:mm:ss.SSSz (ISO_8601)  decimal: a decimal value (e.g. 5.128)  file: a document  integer: a numeric value (e.g. 4)  long: a long value (e.g. 3 000 000 000). Can be used at pool-level only (not at task-level). In called processes, this is helpful to receive IDs from call activities.  text: a stringCheck multiple to specify that the input is a list of its primary type (for example, a list of integers).  The type long can be used in a POST with JSON without precision lost. However, it is important to keep in mind that while manipulating numbers in javascript the max integer is 2^53-1 which is a smaller subset of Java max long type (2^63-1). Example:  If your value is in JavaScript safe integer range: Text widget (number) &amp;gt; JavaScript number &amp;gt; JSON number &amp;gt; Contract java.lang.Long  If value is out of JavaScript safe integer range: Text widget (text) &amp;gt; JavaScript String &amp;gt; JSON String &amp;gt; Contract java.lang.LongConstraintsA constraint is a Groovy expression that returns a Boolean. If the value is false, the constraint is not met, so the contract not fulfilled and the system will not execute the instantiation or task.Note: the constraint scope is limited to contract input and cannot reference external systems (such as connectors, databases or bonita APIs).When is the contract validated ?Whatever means is used to submit information to process or human task, the system will validate the contract. If the contract is not satisfied, an exception is thrown and the process or human task is untouched. Information can be submitted by Java API call, REST API call, Bonita form, or an external system including a third-party form.Best practice: Define the contract prior to creating your forms. This will save you time during development phase as auto-generated forms enable you to submit information and validate that your contract definition is stable. After the contract is defined, you can go to UI Designer using top-right pencil icon of the Details panel. It will generate a form with the appropriate widget for each contract input to enable the user to provide the expected value.ContextTo display contextual information of the task or the process instance in a form, you can leverage the business data and document references made publicly available through the context. The notion of context is available at two levels : process instance and human task. The context is a list of references to the business data and documents manipulated by the process instance during its execution.Currently, context is the same for a human task and its process instance. All the business data and documents defined are public.Limitation : there is currently no way to customize which business data or document are public.",
      "url": " /bonita/7.8/application-and-process-design/define-access-control-on-business-objects/contracts-and-contexts",
      "author": "",
      "categories": "Application and Process Design, Define access control on business objects"
    }
    ,
  

    "bonita-7-8-application-and-process-design-define-access-control-on-business-objects-create-a-complex-data-type": {
      "title": "Complex data types",
      "content"     : "Complex data typesNote: For Bonita Enterprise, Performance, Efficiency, and Teamwork editions only.If the standard data types are not suitable for a variable in your process, you can create a new custom complex data type. It is useful for example to reference data from an external database.A complex data type is a collection of attributes, each attribute having a data type. Complex data types are defined in a JAR or XSD file. Each file can contain more than one definition. To add a new complex data type, create a new JAR or XSD file.If you are using the Enterprise, Performance, Efficiency, or Teamwork edition, you can also use Bonita Studio to add a new data type:  From the Development menu, choose Data types, then choose New data type…. In the dialog box that opens, you can define a set of data types.  At the top of the dialog box, specify a name for the set of data types.  For each type, specify a name, and the set of attributes. Each attribute has a name, a type, and can be either single or multiple.  When you have defined all the data types required, click OK.  Click Create as JAR or Create as XSD, then click Finish.When the new data type has been defined, as a JAR or XSD definition, it can be used to define a variable.Warning: Java data types (defined in a JAR file) use the STAX API. Stax libraries cannot be loaded in more than one classloader but must instead be placed in a single location where they can be called by all the items that use them. When you configure a process that uses Java data types, you must manage the jar files.",
      "url": " /bonita/7.8/application-and-process-design/define-access-control-on-business-objects/create-a-complex-data-type",
      "author": "",
      "categories": "Application and Process Design, Define access control on business objects"
    }
    ,
  

    "bonita-7-8-application-and-process-design-define-access-control-on-business-objects-define-a-search-index": {
      "title": "Define a search key",
      "content"     : "Define a search keyNote: For Bonita Enterprise, Performance and Efficiency editions only.A search key is data that is attached to a process and is used to distinguish between cases of the process in Bonita Portal.You can define up to five search keys for a process.For example, in a process handling insurance claims, you could define the claim number that is automatically assigned from a database to be a search key, so that you can search in Bonita Portal and find the case associated with a given claim. The value of this search key would be fixed for the entire lifetime of a case. You could also define a claimState search key that is updated at certain milestones while the claim is being handled, and could be used to find all your cases that are in a given state.You can define a search key using any valid expression in the expression editor (constant, script, parameter, or variable). In most cases, a search key is a variable, either visible to users (like the claim number) or not. It can be initialized from a form field (typically on the initialization form), from the business data repository, or from an external database, or it can be assigned a default value in the definition. The value is initialized when the case is created.The search key value can be fixed for the lifetime of a case or it can be updated with an operation during the process instance lifetime. If you define a search key whose value is a variable (or an expression including a variable), the search key value is not automatically updated when the variable value changes. You must use an operation to update the search key value at all points in the process definition where the variable value might change. Note that you cannot update a search key in a form field operation, action, Groovy script or Connector.To configure a search key:  In a process diagram, select a pool.  Go to the Details panel, General tab, Search pane.  In the Label column, enter a label for the search key. You can use the expression editor to specify the label, but as it is a constant, you can just type the label into the field. The label is used to identify the search key in Bonita Studio and in Bonita Engine.  In the Value column, open the expression editor by clicking the pencil icon.  Define the search key value using an expression.In Enterprise, Performance and Efficiency editions, search keys are displayed in the Bonita Portal case list and in the case more details view.In this way, you can use search keys for adding business information to your cases. You can search on search keys typing the value of a search key in the Search field. For example, if you have a process called Issue E111 that uses the applicant social security number as a search key, you can type the number of an applicant into the search field and see the status of the tasks in the case.",
      "url": " /bonita/7.8/application-and-process-design/define-access-control-on-business-objects/define-a-search-index",
      "author": "",
      "categories": "Application and Process Design, Define access control on business objects"
    }
    ,
  

    "bonita-7-8-application-and-process-design-define-access-control-on-business-objects-documents": {
      "title": "Documents",
      "content"     : "DocumentsMany business processes require documents, or exist because of documents. For example:  A process to claim travel expenses includes scanned copies of receipts, a company credit card statement, and a list of currency exchange rates.  A process for considering candidates for a position includes CVs and a job description.  A process for approving a document for publication includes the document itself and a quality checklist.Documents can also be attached to processes to provide supplementary information. For example, a travel expense claim process could have an attached document detailing the expense policy of the company. Users have the option to download the document if required.Document definitionDocuments storageDefine a document in a process definitionDocuments and called processesSpecify a document in a process formConnectors and documentsDocument definitionA document is a self-contained structured set of information that is attached to a process instance. It is created and updated by a tool that is not part of the process. It can have a lifecycle that begins before the process instance is created and continues after the process instance is completed and archived.  Create: The lifecycle of a document begins before the process instance is created. A document is created in an external system.  Add to process instance: When a process instance is created, the document instances defined for the process are initialized, in the form of document objects.At this point, the documents have the content specified in the document definition (which might be no content).  Update in process instance: A document in a process instance is updated by an automatic action in the process definition or following information specified by a user in a form. Updating a document creates a new object.  Delete from process instance: A document object can be deleted from an active process instance but not from an archived process instance.A document in a process instance is a Java object. When you update a document in a process instance, you create a new object. A document has the following:  Name: the name of the document, defined in the process definition  Description: a description of the document, defined in the process definition (optional)  Content: the content of the document, set from a file or URL. The initial content source is specified in the process definition. The content does not have to be initialized when the process instance is created. The content can be initialized or updated in a process task by the system or as a result of user action.  MIME type: the type of content of the document. This is defined for the initial content in the process definition. A browser (or your computer) uses the MIME type to select the best application to use to display the document content. If you do not specify the MIME type, the browser reads the beginning of the file to discover the MIME type.  Submitter: the name of the user who uploaded the content.  Creation date: the date and time when the content was uploaded.Document listsA document list is a collection of related documents attached to a process. Each component of the list is itself a document object, but it is not necessary to define each one separately. The number of components in the list does not have to be fixed. For example, a process to claim travel expenses includes a document list for the scanned copies of receipts. When the process instance is created, the number of receipts is unknown and the receipts can be in any image format.In a process definition, you can specify multiple documents or document lists. Use a document list if you have several documents that you need to handle as a set as well as individually. Use multiple documents if you have documents that have independent lifecycles. For example, a process to claim travel expenses could have a document list for expenses receipts and a document with the expenses policy.To initialize a document list, use a script that returns a list of DocumentValue objects. For example:import org.bonitasoft.engine.bpm.document.DocumentValue[  new DocumentValue(&quot;http://url.to.my.cms.document&quot;),//External  new DocumentValue(&quot;exampleContentType&quot;.getBytes(), &quot;text/plain&quot;, &quot;example.txt&quot;)//Internal]  To update a document list, you need to specify the whole list again using a script,. You cannot just add or replace one component of the list.Documents storageThe decision about where to store a document is critical to your process definition. There are three options:  CMS  File  Resource  The table below shows the possible interactions between each storage option and a process.Storage option  Update process instance from storage  Update storage from process instance  CMS  URL (in process definition or form widget), connector (in process definition)  Connector (in process definition)  File  URL (in process definition or form), file (in process definition or form widget)  File (in form widget)  Resource  Resource name (in process definition)  Cannot update resource from process instance  For most use cases, we recommend storing documents in a CMS.CMSTypically, business documents are stored in an external system such as a CMS, and accessed by other applications in addition to Bonita. Bonita is not iteself a CMS, and it is more efficient for performance to store documents in an external system and store only links in the process instance. This is particularly true if you have many documents attached to a process instance.You can initialize a document object in a process instance by specifying a URL that identifies the document. The document object stores a reference to the URL, not the content itself. The document can be updated in the process instance when the user specifies a URL in a form, or using a connector. You can also use a connector to push an update to the CMS.If the document is stored in a CMS, you need to consider the lifecycle of the content in the CMS when you are designing your process.For example, the content might be updated by some other applications after you have initialized the document object in the process instance, so you need to be sure that the content that is referenced in the CMS is the relevant version. If your process requires the latest version of the content, you should minimize the time between getting the content from the CMS and making it available in the process instance. Also, if your process updates a document and sends new content to the CMS, consider whether you need to handle multiple concurrent updates to the CMS. This might be handled automatically by the CMS itself, or might need to be managed by the connector.For example, in a process to approve a document for publication, the document exists in an external file store or CMS before the process is instantiated. At a step in the process, the document is approved for external publication, and a new revision of the file is created with a “Confidential” watermark removed. This new revision is uploaded to the CMS by connector, and continues to exist after the process instance is completed and archived.FileA document that is stored as a file can be used to initialize or update the document object in a process instance. This is done when the user specifies the file in a form. Typically, this is useful for information that does not have to be stored outside the process, where the file can be deleted after the document object is created. For example, a file containing a scanned copy of a travel receipt does not need to be kept after the receipt object has been added to a travel expense claim process instance.ResourceThe Bonita Studio Document Repository contains documents that have been imported from the file system. After a document is imported, it is called a resource. When you build a process bar file for deployment, the resources used in the process are automatically included. A resource is available to all processes in an installation of Studio. A resource cannot be updated directly in Studio, but is updated by uploading a new file. Typically, resources are used for information that is stable and common to all instances of a process, or is used in several processes. The resource is used to initialize the document object in the process instance. You cannot use a resource to update a document object.When you export a process in a bos file for import into another Studio, you must select the resources that are used so that they are included.The dialog for adding a resource to the document repository is inside the dialog for adding a resource to a process definition.   However, you can add a resource without updating the process definition, as follows:  Open any process diagram and select the pool. This definition will not be updated.  Go to the Details panel, Data tab, Documents pane.  Select any document, and check From local file. If there are no documents defined for the process, click Add and specify a name for the document.  Click Browse…. A popup shows the list of resources in the repository.  Click Import…. A file selector popup is displayed.  Select the file that you want to import. The filename is added to the list of resources.  Click Cancel to close the list of resources in the repository.  Click Cancel to close the document editor or creator. The process diagram and document definition are not updated.When you deploy a process, the documents included in the bar file are stored in the local Bonita database. They are used to initialize document objects when a process instance is created or when a form is initialized.Document maximum size settingBy default, the maximum size of a document is 25Mb. You can reduce or increase this in your production environment by modifying the value of the form.attachment.max.size property in the console-config.properties file of your tenant.For the V6 forms, you also need to change the form.attachment.max.size property of the forms-config.properties file. Those modifications will be applied after a server restart.The maximum document size cannot exceed the capacity of the database column. This value depends on your database. This setting applies to all processes in the tenant.This maximum document size will also depend on your web server configuration, it can’t be more than the maximum post size of the web server.Document versioning in a process instanceIn a process instance, there is no specific versioning. When a document is updated, a new object is created. These objects are archived with the associated activity instance, and can be retrieved using Bonita Engine API.Document archivesWhen a process element is archived the associated documents are also archived. It is possible to delete the archived documents using the Engine API or REST API when they are no longer needed, to save space. You can delete an archived document from a live process instance or from an archived process instance. When you delete an archived document, only the content is deleted. The metadata, such as the name, last updated date, and uploader, is kept so that it can be retrieved if needed for audit.Define a document in a process definitionThis section explains how to specify a document or document list in a process definition.Add a documentA document is added to a process definition at pool level. It is similar to defining a pool-level process variable. You must define at pool level all the documents that will be used in the process.To define a document in Bonita Studio:  In your process diagram, select the pool.  Go to the Details panel, Data tab, Documents pane.  Click Add. A popup for defining a document is displayed.  In the popup, specify the following:  The name of the document, used to identify it in the Studio. This must be a valid Java identifier.  A description of the document. This is optional, but we recommend that you add a description stating the document purpose in the process, for collaboration and maintenance.  Whether the document is single or multiple. Specify multiple to define a document list.  The source of the initial content of the document. For a document, there are the following options:  Choose None if there is no initial content for the document when the process instance is created.  Choose From contract if the document content is to be retrieved from the contract input.  Choose From local file if the document content is to be retrieved from a resource.  Choose From an external system if the document content is to be retrieved from an external system by URLFor a document list, initial content is defined using a script. The script must return a java.util.List.  * Optionally, for a local file, you can specify the media type of the content, by setting the MIME type of the document.If you want to specify the MIME type, click Manage MIME type…, and then specify the MIME type in the field that is displayed.  When you have provided all the information for the document, click either Finish &amp;amp; Add to define another document or Finish if you have no more documents to define for this pool.Edit a document in the process definition  In your process diagram, select the pool.  Go to the Details panel, Data tab, Documents pane. The list of documents defined for the pool is displayed.  Click the name of the document that you want to edit, and click Edit.  Update the document information in the popup.  Click OK to save your changes.Remove a document from a process definition  In your process diagram, select the pool.  Go to the Details panel, Data tab, Documents pane. The list of documents defined for the pool is displayed.  Click the name of the document that you want to edit, and click Remove.Documents and called processesA document is defined in a pool. You can map documents to other pools similarly to how you map variables.To map a document when using a call activity:  Define a document in the main process, for example “mainDoc”.  Define a document in the called process, for example “subDoc”.  In the call activity of the main process, add a task variable of type long (for example called “docId”) that will contain the id of the instance of mainDoc. Set the default value of docId with the following code: apiAccessor.getProcessAPI().getLastDocument(processInstanceId, &quot;mainDoc&quot;).getId();  In the called process, add a pool-level variable of type long (for example called docId).  Define the variable mapping in the call activity so that docId in the call activity is mapped to docId in the called process.  In the called process, as the first task add an automatic task that will get the mainDoc, create a DocumentValue object with the content of mainDoc, and use it to update the content of subDoc.To do this, define an operation in the automatic task as follows:  In the first field, select subDoc.  Set the operator type to Set document.  Open the expression editor for the second field and create a script expression with the following content:```javaimport org.bonitasoft.engine.bpm.document.Document;import org.bonitasoft.engine.bpm.document.DocumentValue;Document doc=apiAccessor.getProcessAPI().getDocument(sub_docId);DocumentValue docValue=new DocumentValue(apiAccessor.getProcessAPI().getDocumentContent(doc.getContentStorageId()), doc.getContentMimeType(), doc.getContentFileName());return docValue;```  Specify a document in a process formWhen you have specified the documents in the process definition, you need to define how they are handled in the process tasks.A document is represented in a form definition by the upload widget.Connectors and documentsDuring a process instance, you can use connectors to manipulate documents. In addition to the connectors that interact with content management systems (such as the Alfrecso and CMIS connectors), some other connectors can also manipulate documents. For example:  A task that uses the Email connector to send a message can attach a document to the message.  A task that uses the Google Calendar connector to create a calendar event can attach a document as content.Note that connectors handle single documents. If your process contains a document list, you can manipulate component documents using connectors.The standard connectors provided with Bonita (CMIS, Alfresco) take a document as input. They cannot handle document lists. The email connector can handle a document list that specifies the attachments to be added to a message. The standard connectors do not provide a documentValue as output. This means that you cannot use a connector to get a document. Instead, specify the URL of the document, as you would for initialization.",
      "url": " /bonita/7.8/application-and-process-design/define-access-control-on-business-objects/documents",
      "author": "",
      "categories": "Application and Process Design, Define access control on business objects"
    }
    ,
  

    "bonita-7-8-application-and-process-design-define-access-control-on-business-objects-expressions-and-scripts": {
      "title": "Expressions and scripts",
      "content"     : "Expressions and scriptsExpressions and scripts are used in Bonita Studio for many purposes, including setting the initial or default value of a variable.An expression is a simple statement; a script is a sequence of expressions, and has a program-like structure.This page explains the features of Bonita Studio that enable you to use expressions and scripts.Note that the expression editor cannot be used in the UI Designer, which has a different concept model for data.Start the expression editorManage Groovy scriptsUse variables in a script expressionProcess variablesProvided variablesLog messages in a Groovy scriptStart the expression editorThe expression editor is used throughout Bonita Studio to create and modify expressions or scripts.To start the expression editor, click the crayon icon next to the field where you want to enter an expression.There are different types of expression:  Comparison: compares the value of a variable, parameter, or constant using the operators !, ==, !=, &amp;lt;, &amp;gt;:, &amp;lt;:= or &amp;gt;=.  Constant: sets the expression to a constant (fixed) value.  Parameter: sets the expression to the value of the parameter at the time the expression is evaluated.  Script: the result of the script sets the value of the expression.  Variable: sets the expression to the value of the variable at the time the expression is evaluated.The types available differ depending on the context of the expression. For example, comparison expressions are available only for transitions.Manage Groovy scriptsYou can create a Groovy function and store it in Bonita Studio separate from the definition of a process. You can then use the function in any process definitions. This feature is available if you are using Bonita Studio with the Application Developer profile.To create a function, choose Manage Groovy scripts… from the Development menu, and click Create…. Enter a name for the new function.To edit the content of a function (or to create it), select the function name and click Open. This opens the expression editor.Enter the function details in the pop-up window. For a function to be included in the Expression editor list of user-defined functions, it must be declared as static and it must have suitable visibility. To validate the function, click Evaluate. To save the function, click OK.Note that you can use this feature to save any Groovy script, not just a function. However, only a predefined script that defines a function can be used in an expression. You can declare a method in a Groovy script, but must not declare a class.In addition to any user-defined functions, there are a number of standard functions, in the Bonita, Collection, Number, String, and Others categories. Click a function name to see a description in the Documentation box of the Expression editor.To add a user-defined or standard function to an expression:  In the Expression editor, Expression type list, select Script.  Enter your script, and position the cursor where you want to include the function.  In the Categories list, select User defined. The function list will show the user-defined functions that are available.  In the Function list, double-click the function you want to include in your expression. The function is inserted in the script at the point where the cursor was positioned.At concatenation points in the script, the expression editor displays a popup with a list of possible terms. In the popup, you can toggle between Groovy terms and process variables. For example, if you select activityInstanceId from the list of provided variables then type a period, the expression editor displays a list of terms available. This is known as autocompletion.Use variables in a script expressionYou can use a variable in an expression. When the expression is evaluated during process execution, the current value of the variable is used in the expression.Process variablesWhen you define an expression in the context of a step, the expression can contain a variable that is defined at process level in the pool containing the step. The expression cannot contain a variable that was defined for this step or in another step in the process. To add a process variable to an expression, select the variable from the Select a process variable… drop-down list.Provided variablesYou can also use a variable that is provided by Bonita Engine that is executing the process. For example, an expression can include the id of the user performing a task in the process. To add a provided variable to an expression, select the variable from the Select a provided variable… drop-down list.The provided variables are:  activityInstanceId: the identifier of the activity instance (not available for a process-level expression)  loggedUserId: the identifier of the user who is performing an activity at the time when the expression is evaluated  processDefinitionId: the identifier of the process  processInstanceId: the identifier of the process instance  rootProcessInstanceId: for a called process or an event subprocess, the identifier of the root process (note that if there are multiple layers of called processes or subprocesses, this is the root of the hierarchy, not the parent called process or subprocesses)The provided variables list also contains a special variable, apiAccessor. This enables you to construct API calls in a script using autocompletion. For example, to get the number of overdue open tasks, choose apiAccessor from the list of provided variable, then add the processAPI, and then add getNumberOfOverdueOpenTasks.Log messages in a Groovy scriptYou can add logging to Groovy scripts or Java code that you develop.",
      "url": " /bonita/7.8/application-and-process-design/define-access-control-on-business-objects/expressions-and-scripts",
      "author": "",
      "categories": "Application and Process Design, Define access control on business objects"
    }
    ,
  

    "bonita-7-8-application-and-process-design-define-access-control-on-business-objects-operations": {
      "title": "Operations",
      "content"     : "OperationsAn operation is an action that updates the value of a variable (using an expression) when a task is performed. You can specify any number of operations on a task. Operations are executed in the order they are listed.Define operations at task levelOperation typesBusiness object (BO)Simple data and List of optionsJava ObjectXML ObjectDocumentDefine operations at task levelAn operation at task level updates the value of a variable defined for the task or at process level. You can also use an operation at a task to update the value of a search index.To define an operation at task level:  Select the relevant task and go to the Details panel, General tab, Operations pane.  Click Add to add an operation.  From the drop-down list, choose the variable to be updated.  Launch the Expression Editor, by clicking the crayon icon.  Using the Expression Editor, enter the expression to define the new value of the variable. If you define the expression with a script, you can use the current value of the variable being updated in the script, so, for example, you can increment a counter. Make sure that the return type matches the type of the variable being updated.You can define a sequence of operations at a task. The operations are performed in the order in which they are listed, at the end of the task. You cannot re-order operations after they are defined, so you need to define the operations in the order they are to be performed.Operation typesBusiness object (BO)  takes value of : the value of the right operand variable is used to update the value of the left operand (the BO) using the “=” operator  Java method: the left BO is updated with the value from the right operand using an invoked Java method  instantiate with: at runtime, when the operator is called, the business data variable points to the selected BO instance if it uses a Query expression type. The BO instance must exist in the business data database; otherwise the operator throws an exception.  The BO instance is not modified during the operation but from that point onward, any expression or operation in the process can reference this object instance to make changes.   If it uses a Script expression type, you can use the contract inputs to fill in the BO attributes.  Go to Initialize BDM attributes from contract inputs in task operations for more information.  isDeleted: an operator ‘Is Deleted’ can be called on a business data variable. The BO instance that the business data references is deleted from the database, at runtime, after the task is completed.Warning: Calling other operations (including instantiate with) after calling isDeleted on the same Business Object, in the same task, is not supported. If you want to re instantiate your Business Object, and perform operations on it, you should do it in a separate task.Warning: Operations on business objects can be done only at task level.Simple data and List of options  takes value of: the value of the right operand variable is used to update the value of the left operand using the “=” operatorJava Object  takes value of: the value of the right operand variable is used to update the value of the left operand using the “=” operator  Java method: the left object is updated with the value from the right operand using an invoked Java methodXML Object  takes value of: the value of the right operand variable is used to update the value of the left operand using the “=” operator  **XPath update **: the left object is updated with the value from the right operand using an XPath expressionDocument  set document: the value of the right operand document is used to create a new version of the document",
      "url": " /bonita/7.8/application-and-process-design/define-access-control-on-business-objects/operations",
      "author": "",
      "categories": "Application and Process Design, Define access control on business objects"
    }
    ,
  

    "bonita-7-8-application-and-process-design-define-access-control-on-business-objects-parameters": {
      "title": "Parameters",
      "content"     : "ParametersYou can use a parameter to store a value that differs between deployments but is fixed for all cases of a deployed process. The value is set when you configure the process. For example, if you have a process for approving expense reports, you could define a parameter for the approver’s email address that is set at deployment.The value can also be changed after deployment: - In versions 7.0.x, if you are using the Enterprise or the Performance edition - In versions 7.1.0 and above, if you are using the Enterprise, Performance or Efficiency editionDefining a process parameterConfiguring parameter valuesParameter usage in formsDefining a process parameterYou can define a parameter for a pool or for a lane. A parameter can be of type text, Boolean, integer, or double.To define a parameter:  Open the process diagram and select the pool or lane.  In the Data tab, go to the Parameters pane. A table of the parameters already define is displayed.  Click Add, enter the parameter name, choose the type from the drop-down list, and optionally add a description of the parameter.To modify a parameter (for example to change its type), click on the existing type on in the table of parameters and choose the new type from the drop-down list.To remove a parameter, select it in the table of parameters and click Remove.Configuring parameter valuesParameter values are set in Bonita Studio when the process is configured (see the process configuration overview for other details of how to configure a process).To set a parameter value:  Open the process diagram in Bonita Studio.  Choose an environment from Configure menu in the cool bar.  Click Parameters in the left-hand menu of the configuration wizard. A table of process parameters and their current values is displayed.  Select the table cell for the parameter value you want to set or modify, and enter the new value.  When all the parameters values have been set, click Finish.You can export the parameter values to a file by clicking Export parameters as file…. The default file name is process_name_Parameters.properties. You can also set parameter values by importing a parameter.properties file. The values in the file are used to set the values of the corresponding parameters. Note that importing a parameters.properties file does not create parameters in the process, just sets the values of those that exist if they are present in the file.When you build a process for deployment (see Import and export a process), the .bar archive that is created also contains a parameters.properties file.You can edit a parameters.properties file to change the value of a parameter before importing it into Bonita Studio or before deploying the .bar. You can also edit the file after process deployment, but this is not recommended if the process is running. If you need to change a parameter value for a process that is in production, update the process configuration in Bonita Portal).Parameter usage in formsFrom 7.x, to use parameters in forms, you need to retrieve them using the REST API.",
      "url": " /bonita/7.8/application-and-process-design/define-access-control-on-business-objects/parameters",
      "author": "",
      "categories": "Application and Process Design, Define access control on business objects"
    }
    ,
  

    "bonita-7-8-application-and-process-design-define-access-control-on-business-objects-specify-data-in-a-process-definition": {
      "title": "Specify data in a process definition",
      "content"     : "Specify data in a process definitionBy data, we mean variables and documents.This page explains how to handle data in a process, including specifying process and task-level data.Variable scopeTransient dataSubprocess dataExternal dataDefine a variableData typesVariable namingDefine a simple data type variableDefine a Java object variableDefine an XML variableDefine a variable as a list of optionsDefine the default valueDefine available valuesVariable scopeYou can define a variable at process, task, or form level:  A process variable is available throughout the life of a process. Process variables can be uses to store data for transition conditions, and identifiers for business data stored in an external database. They are typically items of data which affect the path of the process, or are used at several steps of the process, but which become redundant, once the process instance has completed.  A task variable is available for the task and its outgoing transitions. It can be used to pass data to a connector in the same step. Activity variables are similar to Process variables, but exist only within the life of a process instance activity.  A form variable is available only in the form, and is used to store data used in the form. You can also use form variables with connectors that are associated with the form.See also:Data types and defining a variableComplex data typesData handling in a formBest practice:  Use XREFbusiness data for information that is shared between applications or processes.  For external data that is stored in a database or other information system, use a connector to read or write the data when required, and use transient form variables to hold the value temporarily while it is displayed or updated in a form. ***check still true for Page Designer***  Define a variable at the lowest level possible, using a process variable only when required for the process flow.  Use the minimum number of variables possible; having an unnecessarily large set of variables has an impact on performance.There are also a number of variables that are provided by default in a process, such as the id of the current user. They are available through the expression editor.Transient dataA variable can be transient or persistent. A transient variable is stored only in memory, saving database transactions. A persistent variable is stored in the Bonita Engine database.It is possible to update the value of a transient variable in a task, but this is not recommended. The value of a transient variable in a task is not preserved when the app server restarts. The value is reset to the initial value. When deciding whether to use a transient or persistent variable, consider whether the the variable is used in an operation. In particular, if a operation script does several things, one of which is to update a transient variable and the app server restarts after the script has run but before the end of the task, the transient variable is reset but the other changes made by the script survive the restart.  Task variables can be transient or persistent.  Form variables are transient.Best practice:  Use transient variables to store information temporarily in a process step or form.  Do not update the value of a transient variable.If the value of a transient variable is updated, this triggers a warning message in the log. You can deactivate these warnings by editing logging.properties and uncommenting the relvant section of the file.Subprocess dataAn event subprocess has access to the data in the parent process. This includes parameters and process-level variables. A subprocess called from a call activity is in fact an independent process, defined in a separate pool. It does not have direct access to the data in the calling process. When you define a call activity, you can define mappings that make copies of the data in the calling process available in the subprocess.External dataA process or application can use data that is stored in an external database and accessed using a database connector. For example, in a process for requesting annual leave, there could be a step that uses a connector to retrieve the number of days available for an employee and stores this in a transient variable. This variable is thencompared with the number of days requested to see whether the employee is entitled to take the requested number of days. In a later step, another connector is used to update the number of available days after this request is approved, by subtracting the number of days requested.You can also use data stored in external information system components, such as a CRM document storage system. These systems are also accessed using a connector.Define a variableWhen you define a variable, you specify a name and the data type. Optionally, you can specify a default value or a list of available values.  Data types  Variable naming  Define a simple data type variable  Define a Java object variable  Define an XML variable  Define a variable as a list of options  Define the default value  Define the available valuesData typesBonita has a number of predefined data types: Boolean, date, integer, long, double, text, Java object, XML schema (XSD) and option list. You can also define a variable as multiple, that is, an array or collection of values of the specified type.Note that since 7.0, Business data is now available. For a detailed explanation, see the Business Data overview.You can also define additional complex data types as Java objects or as XML objects.Variable namingYou are recommended to use meaningful names for variables. This make process debugging and maintenance easier, particularly if more than one person is working on a process. It can be useful to use a system of prefixes to identify the context in which a variable is used, or the task it is associated with. For example, you could label all transient data variables with the prefix trans_, or you could label variables defined on a task called getData with the prefix task_getData_. Java language keywords cannot be used as variable names.Define a simple data type variableThe simple data types are Boolean, date, integer, long, double, and text. To define a variable with one of these types:  Open your process diagram in Bonita Studio.  Select the process pool or the step where you want the variable.  Go to the Details panel, General view, Data pane. A list of the variables already defined is displayed.  Choose if you want to add Process data or Business data. Click Add….Note: if you add Business data, only add it at the pool/lane level. See this tutorial as a guide for the next stepsHow to add Business data to a process.  Specify a name for the variable. The name must be unique within the scope of the variable. For easier process maintenance, it is a good idea to make all variable names unique within the process, even though this is not strictly necessary for variables defined in a step.  Optionally, add a description of the variable.  Select the data type from the drop down list.  If you are defining a date variable, you can pick an initial date.  Optionally, set a default value. You can use the expression editor to set the value, or type directly in the field.  To define the variable as multiple, check the box.  To define the variable as transient, check the box. This option is not available for process-level variables.  To automatically add a widget corresponding to this variable when you generate a form for this step, check the box.  Save the definition: if you want to continue on and define another variable, click Create &amp;amp; New, otherwise click Finish.Define a Java object variableYou can define a variable whose data type is Java object. Before you define the variable, you must create the data type definition.To add a Java object variable:  Open your process diagram in Bonita Studio.  Select the process pool or the step where you want the variable.  Go to the Details panel, General view, Data pane. A list of the variables already defined is displayed.  Click Add….  Specify a name for the variable. The name must be unique within the scope of the variable. For easier process maintenance, it is a good idea to make all variable names unique within the process, even though this is not strictly necessary for variables defined in a step.  Optionally, add a description of the variable.  Select Java Object from the drop down list of data types.  Specify the class that defines the Java object.  Optionally, set a default value. You can use the expression editor to set the value, or type directly in the field.  To define the variable as multiple, check the box.  To define the variable as transient, check the box. This option is not available for process-level variables.  To automatically add a widget corresponding to this variable when you generate a form for this step, check the box.  Save the definition: if you want to continue on and define another variable, click Create &amp;amp; New, otherwise click Finish.When you configure the process, add the JAR file that contains the data type definition to the application or process dependencies.Define an XML variableAn XML variable has a data type that is defined by an XML schema file. Before you define the variable, you must create the XML schema that contains the data type definition.The data type definition is stored in an XML schema (XSD) file that belongs to a namespace.To add an XML variable:  Open your process diagram in Bonita Studio.  Select the process pool or the step where you want the variable.  Go to the Details panel, General view, Data pane. A list of the variables already defined is displayed.  Click Add….  Specify a name for the variable. The name must be unique within the scope of the variable. For easier process maintenance, it is a good idea to make all variable names unique within the process, even though this is not strictly necessary for variables defined in a step.  Optionally, add a description of the variable.  Select XML from the drop down list of data types.  In the XML namespace field, select the XSD file that contains the data type definition.  In the Namespace element field, specify the element in the XSD file that defines the data type for the variable you are defining.  Optionally, set a default value. You can use the expression editor to set the value, or type directly in the field.  To define the variable as multiple, check the box.  To define the variable as transient, check the box. This option is not available for process-level variables.  To automatically add a widget corresponding to this variable when you generate a form for this step, check the box.  Save the definition: if you want to continue on and define another variable, click Create &amp;amp; New, otherwise click Finish.Define a variable as a list of optionsYou can use a list of options when the value of a variable is one or more of a fixed set of possible values. If the possible values change frequently, or are related to business data, this method is not recommended. Instead, for business data, you should use a connector to retrieve the possible values from a database.To add a static list of options variable:  Open your process diagram in Bonita Studio.  Select the process pool or the step where you want the variable.  Go to the Details panel, General view, Data pane. A list of the variables already defined is displayed.  Click Add….  Specify a name for the variable. The name must be unique within the scope of the variable. For easier process maintenance, it is a good idea to make all variable names unique within the process, even though this is not strictly necessary for variables defined in a step.  Optionally, add a description of the variable.  In the Data type line, click List of options…. The dialog box that opens shows the option lists that are already defined.  Click Add to add a new list of options, specify a name and, optionally, a description.  Specify and sort the options in the list, using the Add, Remove, Up, and Down buttons.  Click OK. The list of options is saved.  Optionally, set a default value. You can use the expression editor to set the value, or type directly in the field.  To define the variable as multiple, check the box. This means that more than one option from the list can be selected.  To define the variable as transient, check the box. This option is not available for process-level variables.  To automatically add a widget corresponding to this variable when you generate a form for this step, check the box.  Save the definition: if you want to continue on and define another variable, click Create &amp;amp; New, otherwise click Finish.After a list of options has been defined, you can define another variable that uses the same list of options, by choosing the list name from the Data type menu.Define the default valueYou can specify a default value for a variable either by entering it directly, or by using the expression editor. To launch the expression editor, click the crayon icon beside the Default value field.When a form widget related to the variable is displayed, the default value you defined is used as the initial value of the widget in the form.Define available valuesThe set of available values for a checkbox, checkbox list, dropdown list, radio button set, select list, or suggestion box is set using either a connector or a list of options.If you do not want to define a set of available values but need to specify constraints on the value, you can use a validator.",
      "url": " /bonita/7.8/application-and-process-design/define-access-control-on-business-objects/specify-data-in-a-process-definition",
      "author": "",
      "categories": "Application and Process Design, Define access control on business objects"
    }
    ,
  

    "bonita-7-8-application-and-process-design-import-and-export-a-process": {
      "title": "Import and export a process",
      "content"     : "Import and export a processImport a process diagram into Bonita StudioWhat is supported or compatible?Export a process diagram as a BPMN 2.0 archiveExport process elementsBuild a process for deploymentExport a process diagram as an imageImport a process diagram into Bonita StudioTo import a diagram:  From a .bos archive (a diagram from another Bonita studio)  Choose Import -&amp;gt; BOS archive from the Diagram menu or click Import in the Cool bar.  Specify the archive to be imported.  Manage eventual conflicts  Click Import, the .bos archive is imported, a new diagram is created.From an other format  Choose Import -&amp;gt; other from the Diagram menu.  Select the input format.  Specify the file to be imported.  Click Import. A new diagram is created.  You can import diagrams that were exported from the following tools:  Bonita  BPMN 2.0  Microsoft Visio 2010  ARIS BPM 7.x  XPDL 1.0  jBPM 3.2You can also migrate a process diagram from Bonita Open Solution 5.x.What is supported or compatible?A diagram that was exported from the same edition of Bonita, or a lower edition, can be imported successfully. You cannot import a diagram from a higher edition. For example, you can import a diagram created with the Community edition into an Enterprise edition Bonita Studio, but you cannot import a diagram that was created with the Enterprise edition into a Community edition Bonita Studio.If the format to be imported is BPMN 2.0 compatible, any of the BPMN 2.0 elements displayed in the Bonita Studio BPMN elements menu, can be imported successfully. However, if the element to be imported is not displayed **in the **BPMN elements menu, it is not supported by Bonita, so Bonita Studio will interpret the element and create the closest BPMN elementthat is supported. The following specific changes are made for all import formats:  If a task in an imported process is not recognised, Bonita Studio will create an abstract task for it by default.  A task format can be redimensioned (Height/width) when it is imported.  If a multiple event is not recognised, Bonita Studio takes the first element in order that it can interpret.  If a gateway is not supported, it will be interpreted by default as an AND gateway.  If there are **multiple pools **in a *.bar file, they will all be imported into a single process diagram.The following sections list restrictions for specific import formats.BPMN 2.0 (*.bpmn)Most BPM applications export in the BPMN 2.0 file format. This format is the most compatible with Bonita Studio. See here for a list of applications which export in the .bpmn format.Microsoft Visio 2010 (*.vdx)This feature is available in the Enterprise, Performance, Efficiency, and Teamwork editions.  The Visio import format must be .vdx. The .vsd format is not supported in Bonita Studio.  Only horizontal display is supported.  The vertical display will be converted and interpreted as a mirror image of the process.  Visio supports all shapes defined in the BPMN 1.2 standard. See here for more info about Visio compatibility.Aris BPM 7.x (*.xml)  This feature is available in the Enterprise, Performance, Efficiency, and Teamwork editions.See the Aris website for more information about exporting in the BPMN 2.0 format ready for importing into Bonita Studio.XPDL from Bonita 4 (*.xpdl)The .xpdl format will only be compatible if it was created in Bonita 4.x. If the .xpdl file was created by an application other than Bonita 4.x, it cannot be imported into Bonita Studio.jBPM 3.2 (processdefinition.xml)jBPM uses the BPMN 2.0 standard.Export a process diagram as a BPMN 2.0 archiveIf you export a process diagram as a BPMN 2.0 archive you can import it into any BPM application that supports this format, including Bonita Studio.To export a diagram in BPMN 2.0 format from Bonita Studio:  Open the diagram.  Choose Export as… from the Diagram menu and select BPMN2… from the drop-down list.  Specify the location and filename for the exported diagram, and click OK.Export process elementsYou can export files related to elements of the processes in the Bonita Studio repository. The files are exported into a .bos archive that can be imported into another Bonita Studio.You can export the following:  Application resources  Business Data Model  Configurations  Dependencies  Diagrams  Environments  Organizations  XSD filesTo create a .bos archive:  Choose Export from the Diagram menu or click Export in the Cool bar.  Select the items to be exported.  Specify the filename and location or use the default suggested.  Click Finish.The resulting .bos file can be imported into Bonita Studio.Build a process for deploymentWhen a process is ready for deployment, you must create an executable business archive (.bar file) for deployment.To create the business archive:  Choose Build… from the Server menu.  Select the process to be exported.  Specify whether you want to export a configuration with the process. Exporting a configuration will export all the information and other items that you configured, including connectors and dependencies.  Specify the location where the .bar file will be created. The filename is determined by the process name and cannot be changed at this stage.  Click Finish. The business archive is created.Export a process diagram as an imageThis section explains how to export a diagram as an image.To export a diagram from Bonita Studio:  Open the diagram.  Choose Export as… from the Diagram menu and select Image… from the drop-down list.  Specify the image format and quality.  Specify the location and filename for the exported diagram, and click OK.",
      "url": " /bonita/7.8/application-and-process-design/import-and-export-a-process",
      "author": "",
      "categories": "Application and Process Design"
    }
    ,
  

    "bonita-7-8-application-and-process-design-organization-approaches-to-managing-organizations-and-actor-mapping": {
      "title": "Approaches to managing organizations and actor mapping",
      "content"     : "Approaches to managing organizations and actor mappingThere are several possible approaches to managing the organization information required by Bonita. The most appropriate approach for your organization depends on many factors, including the size and stability of your organization, the actors that are defined in the processes you are using, and whether you have a central repository for user data that is LDAP-compatible.If your organization structure is maintained in LDAP, to avoid duplication of the organization data and its maintenance, you are recommended to use the LDAP synchronizer, which is available with the Bonita Enterprise, Performance, Efficiency, and Teamwork editions.The next three sections describe typical approaches, two using LDAP and one maintaining the organization data manually:Maintain organization in LDAP and map actors to groupsMaintain organization in LDAP and map actors to roles or membershipsMaintain organization manuallyOther considerationsMaintain organization in LDAP and map actors to groupsIf the groups within your organization are suitable for mapping to the actors in your processes, you can use these groups when mapping actors.If you are using the Bonita Enterprise, Performance, Efficiency, or Teamwork edition, you can define the actor mapping in Bonita Portal after a process is deployed.For the Community edition, you specify the actor mapping in Bonita Studio, so you need to define the groups in Bonita Studio. However, you only need to create the groups that are used in actor mappings, not your whole organization hierarchy.Maintain organization in LDAP and map actors to roles or membershipsIf the groups within your organization are not suitable for mapping to actors in your processes, you can use roles or memberships when mapping actors.A membership is a combination of a group and a role.If you are using the Bonita Enterprise, Performance, Efficiency, or Teamwork edition, you can define the actor mapping in Bonita Portal after a process is deployed.For the Community edition, you specify the actor mapping in Bonita Studio, so you need to define the roles and memberships in Bonita Studio. However, you only need to create the roles and memberships that are used in actor mappings.In Bonita Portal, define the roles and memberships used in the actor mappings, and specify the roles of the users. User roles are specified using a membership.Maintain organization manuallyFor smaller organizations that do not use LDAP, or if you are using the Community edition, you can maintain your organization manually.Typically, you manage an organization manually using Bonita Studio, and then import it into Bonita Portal. This means that the organization management and actor mapping are carried out in the same tool, from a single set of data.Alternatively, you can initialize the organization in Bonita Studio with just the elements needed for actor mapping. Then export this to Bonita Portal and manage the users in the Bonita Portal.Other considerations  If you are specifying actor mapping in Bonita Studio, you do not need to duplicate the whole organization structure in Bonita Studio, only the elements that are used in actor mapping.However, you can choose to have the whole structure in the Studio. In this way, you can manage all the information in one place, then load it into Bonita Portal using the organization export/import features.  It is possible to map an actor to an individual user. This is not generally recommended, but in rare cases it can be useful, typically for solving a problem or escalating an issue.  When deciding how to map actors for a process, you also need to take into account the actor filters that are specified in the process definition.  If you are using the LDAP synchronizer, consider using LDAP authentication.",
      "url": " /bonita/7.8/application-and-process-design/organization/approaches-to-managing-organizations-and-actor-mapping",
      "author": "",
      "categories": "Application and Process Design, Organization"
    }
    ,
  

    "bonita-7-8-application-and-process-design-organization-custom-user-information-in-bonita-bpm-studio": {
      "title": "Custom User Information in Bonita Studio",
      "content"     : "Custom User Information in Bonita StudioYou can use custom user information to assign task to users based on information that is specific to your organization and not included in the standard organization definition. You define the attributes that you want to store, and then add the values for the users.ValueDefine custom user informationAdd custom user information values for each userSet an actor filter on custom user informationValueFor example, you may want to create a security badge with an individual value (number) for each user, or an office skill for a user, a special professional activity, or geographical details. All these types of information are not displayed in standard information tabs but you may want to filter candidates to a human task thanks to those attributes.Define custom user informationIn the Organization menu &amp;gt; Manage organizations &amp;gt; Organization users, the second tab User information management offers a summary of the default information and allows to create custom user information. Use “Add” to create your own, with a name and an optional description.  In Bonita Studio, go to Organization in the cool bar  Click on Manage in the dropdown menu  Click on Next 3 times to get to the Organization users window  Click on the User information management tab  In the Custom information pane on the right hand side of the window, click on Add  This will put a default name Information1 in the Name column  Add a description (if needed). This will only appear in Bonita Studio.  Double click on the default name Information1, to modify it to your needs  Click on Finish  A message is displayed: The Organization has been modified. It is recommended to re-publish it. Do you want to do it now?  Click on Yes  A confirmation message is displayed showing the organization was successfully re-published  Click on Ok  A new custom tab is applied to all users.If the value is changed in Bonita Portal by the admin, and the filter value does not exist in the organizationAdd custom user information values for each userIn the Organization menu &amp;gt; Manage organizations &amp;gt; Organization users, the first tab List of users shows detail information for each user on the right hand-side panel, spread over five tabs:  General (Title, First and last name, Job title)  Membership (Group/role)  Personal (Email, phone, website, address etc.)  Business card (Email, phone, website, address etc.)  CustomTo add custom user information values for a user, select a user in the List of users, click on the Custom tab, and enter the value for each relevant information. You also see a link Manage custom information, to go back and manage the list of custom user information. Note: this value can be changed by a user with the Admin profile in the Bonita Portal. See How to edit Custom information for a single userSet an actor filter on custom user informationA task or a lane is linked to an actor. An actor is mapped to a list of users. An actor filter applies to the set of users mapped to the actor. The actor filter configuration can be added to an actor at lane or human task level.When all relevant users have their Custom User Information set, you can add an actor filter:  In a process diagram, select a lane or a task  In the Details panel, Go to General &amp;gt; Actors and select an actor to apply the filter (actors are defined at pool level)  At Actor filter level, click Set  In the Actor filters window &amp;gt; Categories, click on Organization and choose  Users with Custom information  Click on Next  Enter a name and a description for the filter configuration  Click on Next  Enter a custom user information Name or click on the drop down list to select the one you need  Enter a value for the information  To filter on several values using the same string, click **Partial match **  If you expect the filter to return only one user, then it’s good that the task is assigned to her automatically. In this case, click the Assign tasks automatically checkbox.  Click on FinishThe filter is set for the actor and is displayed in the actor filter field. Users from the actor and with the relevant value for the custom information chosen will become candidates to perform the task, or all the tasks in the lane if you set it at lane level.Note that the filter will not work if you change values in the organization but do not re-publish the organization. This will throw a synchronization error.",
      "url": " /bonita/7.8/application-and-process-design/organization/custom-user-information-in-bonita-bpm-studio",
      "author": "",
      "categories": "Application and Process Design, Organization"
    }
    ,
  

    "bonita-7-8-application-and-process-design-organization-ldap-synchronizer": {
      "title": "LDAP synchronizer",
      "content"     : "LDAP synchronizerNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.The LDAP synchronizer is a service for synchronizing Bonita and LDAP directory users and groups in a single direction, LDAP to Bonita.The LDAP synchronization service keeps the Bonita organization information synchronized with an external LDAP directory, by creating, updating, or removingusers and groups in the organizationto match as closely as possible the user list attributes defined in LDAP. It does not modify the LDAP directory.The LDAP Synchronizer connects to both the LDAP server and Bonita Engine to read the data from the LDAP server and modify the organization in the Bonita Engine database using the API.Both the Engine and the LDAP server must be running when the LDAP Synchronizer tool is run.The synchronizer program runs in the background. There is no user interface: all configuration settings are specified in files andall output is written to a log file.LDAP objects supportedInstallationConfiguration filesbonita.propertiesldap.propertieslogger.propertiesmapper.propertiessync.propertiesRunning the synchronizerUsing the LDAP synchronizer in a non-default tenantLDAP objects supportedThe synchronizer will synchronize LDAP objects that inherit from the “person” class as users in Bonita.The synchronizer application does not support user meta data and cannot synchronize passwords. A new user password is initialized with the user name.The tool supports LDAP groups of the following classes:  group  groupOfURLs  groupOfNames  groupOfUniqueNames  ds-virtual-static-groupInstallationTo install the synchronizer, unzip the provided deploy.zip file and configure the files located under the conf directory. This directory contains a sample configuration in the conf/default subfolder which is used to perform LDAP synchronizationon the default tenant. This is also possible to perform the synchronization on a non default tentantwhich requires dedicated configuration.Two way to connect the Bonita Engine is possible:1/ Connection using the Environment variables:Set the API access mode used by the LDAP Synchronizer, by editing the &amp;lt;LDAP_SYNCHRONIZER&amp;gt;BonitaSubscription-&amp;lt;version&amp;gt;-LDAP-Synchronizer.(bat or sh) file.Add between java and -classpath:-Dorg.bonitasoft.engine.api-type=HTTP -Dorg.bonitasoft.engine.api-type.server.url=http://localhost:8080 -Dorg.bonitasoft.engine.api-type.application.name=bonitaThe LDAP Synchronizer can use the HTTP, or EJB3 modes, but not local access. For more information about API access modes,see the Engine API overview.2/ Connection using Bonita.properties files:See bonita.properties sectionCustomize the configuration for your system, by editing the configuration files. There are some additional considerations for using the LDAP synchronizer in a non-default tenant.Configuration filesThere are five properties files:  bonita.properties defines the Bonita connection settings and specifies the account used for user synchronization (requires administration privileges).  ldap.properties defines the LDAP connection settings and specifies the account used for user browsing.  logger.properties provides the settings for the logger. Default settings should be fine for most uses.  mapper.properties specifies the translation between Bonita and LDAP directory user attributes.  sync.properties defines the synchronization settings.All configurations files can be found in the conf directory.Note: to use a special character in a properties file, use the Unicode equivalent. For example, for à use u00E0. You can use a tool such as native2ascii to convert any special characters in the configuration files to Unicode.You also need to configure connection on Bonita Engine for the LDAP Synchronizer.bonita.propertiesThis file defines the connection settings and specifies the account used for user synchronization (requires administration privileges).Item  Description  Default  bonita_home  The path to the Bonita Home folder of the LDAP Synchronizer. (deprecated)     apiType  The API Type to access the Bonita Engine: HTTP or EJB3  (1)  serverUrl  Url to access the Bonita Server (http://myHost:8080)  (1)  applicationName  Application name (bonita is the general name)  (1)  ejbReference  Ejb reference when Bonita Server is deployed on an Application server  (1)  login  The login to provide is a userName.  install  password  Password of the Bonita account used for synchronization.  install  technicalUser  This is the username of the platform adminstrator.  platformAdmin  technicalPassword  This is the password of the platform adminstrator.  platform  (1): if apiType properties is not defined, then the variable environment mechanism is used to connect to the Bonita Engine.ldap.propertiesThis file defines the LDAP connection settings and specifies the account used for user browsing.Item  Description  Default  host_url  LDAP server URL  ldap://localhost:389  auth_type  LDAP authentication type (supported values: none, simple or strong)  simple  principal_dn  distinguished name (DN) of the user account used for browsing through the LDAP users  cn=Directory Manager  principal_password  password of the LDAP ?browser account  root  directory_user_type  type of the user object (“user” for an Active Directory, “person” for an LDAP)  person  logger.propertiesThis file provides the settings for the logger. Default settings should be fine for most uses.Item  Description  Default  log_dir_path  directory path where the log files will be stored. The log files are named on the following template: log_file_date_prefix_LDAP-BOS_Synchronizer.log  logs/  log_file_date_prefix  date format used for prefixing the log file name  yyyy=MM=dd  log_level  level of reporting of the logger (relevant values are INFO for production use, FINE for debug use)  INFO  The date format in log file names follows the syntax of the Java SimpleDateFormat class. This is useful to control the number of log file create as the logger will append information to an existing log file if the file name already exists. Example: if you set the format to “?yyyy-mm”, you will get one new log file per month.mapper.propertiesThis file specifies the translation between Bonita and LDAP directory user attributes such as:bonita_property = ldap_propertyThe only mandatory property is user_name, which is the key defined for matching users. All other properties are optional.An LDAP property may be used several times in the configuration file but each Bonita property should be defined only once. Unused properties should be commented out.These are the supported Bonita user properties:General information  Professional information  Personal information  Custom User Information  user_name   first_name   last_name   title   job_title   manager  pro_email   pro_phone   pro_mobile   pro_fax   pro_website   pro_room   pro_building   pro_address   pro_city   pro_zip_code   pro_state   pro_country  perso_email   perso_phone   perso_mobile   perso_fax   perso_website   perso_room   perso_building   perso_address   perso_city   perso_zip_code   perso_state   perso_country  custom_&amp;lt;Custom User Information&amp;gt;  The following items are configured by default:Item  Default  user_name  uid  last_name  sn  title  title  pro_email  mail  pro_phone  telephoneNumber  pro_mobile  mobile  perso_phone  homePhone  Custom User InformationThe prefix ‘‘custom_’’ is used to map any ‘Custom User Information’. For example, to map the ‘Custom User Information’ “skypeId” and “room”from LDAP property “skype” and “roomNumber”, the syntax is:custom_skypeId = skypecustom_room = roomNumber sync.propertiesThis file defines the synchronization settings.  error_level_upon_failing_to_get_related_user: optional parameter that specifies whether an error should be blocking upon getting related users (manager)Supported values: ignore, warn or fatalDefault value: warn  bonita_username_case: optional parameter that specifies whether the LDAP user names should be converted to a given case upon being imported in Bonita.Supported values: mixed, uppercase or lowercaseDefault value: mixed (conserves the current LDAP user name case)  ldap_watched_directories: defines the LDAP directories to watch.Supported values: list of LDAP watched directory object identifiers separated by commas.The syntax for watched directory object properties is detailed in the next section.  bonita_nosync_users: specifies the list of users who should not be synchronized.Supported values: user names separated by commas.  bonita_user_role: specifies the role assigned to Bonita users.Default value: user  bonita_deactivate_users: optional parameter that specifies whether the tool should deactivate Bonita users who are not present in LDAP. When bonita_deactivate_users is set to true, a Bonita user who is not present in LDAP is deactivated. The user are not removed from Bonita, but they cannot start process instances or do tasks.  bonita_reactivate_users: optional parameter that specifies whether the tool should reactivate Bonita users who are deactivated in bonita but present in LDAP.Supported values: true or falseDefault value: true  allow_recursive_groups: optional parameter that specifies whether sub-groups should also be synchronized. The operation does not preserve the group hierarchy however, and the LDAP sub-groups will be created at root level in Bonita organization.Supported values: true or falseDefault value: true  ldap_groups: optional parameter that specifies the LDAP groups that should be synchronized.Supported values: list of LDAP Group object identifiers separated by commas.The syntax for group object properties is detailed in a later section.bonita_user_custominfo_policy: Define the policy to synchronize the ‘Custom User Information’. The different policy is detailed in a later section.Default value: noneallow_custominfo_creation: define the strategy when a Custom User Information is detected in the mapper.properties configuration, and not exist in the Bonita database. If this property is true, then the Custom User Information is created.Default value: falsePolicy to synchronize the Custom User InformationIn Bonita, you can defined a set of Custom User Information attributes. Then, each user has a value for each attribute.A policy named  bonita_user_custominfo_policy gives the strategy to synchronize this information.All examples are based on  Two Custom User Information exist in the Bonita database : badgeId and roomThe mapper.properties contains  custom_badgeId = ldapBadgeIdentificationThe room is not declared in the mapper.properties.  none:bonita_user_custominfo_policy = noneno ‘Custom User Information’ is synchronized.  partial :bonita_user_custominfo_policy = partialSynchronize only ‘Custom User Information’ declared in the mapper.properties.A ‘Custom User Information’ not declared in mapper.properties will not be modified. When the Ldap Object doesn’t have a property, it will not be modified.LDAP object  LDAP property  Synchronization  WalterBates  ldapBadgeIdentification== ‘walterSid’  (Synchronized) badgeId==’walterSid’  HelenKelly  no property ldapBadgeIdentification defined  (No synchronization)scope:bonita_user_custominfo_policy = scopeSame as partial, plus if the Ldap Object doesn’t have a property, it will be set to null   (all the scope is synchronized)LDAP object  LDAP property  Synchronization  WalterBates  ldapBadgeIdentification== ‘walterSid’  (Synchronized) badgeId==’walterSid’  HelenKelly  no property ldapBadgeIdentification defined  (Set to null) badgeId==nullfull:bonita_user_custominfo_policy = fullSynchronize all ‘Custom User Information’. If a ‘Custom User Information’ is not declared in mapper.properties, or the Ldap doesn’t have the property, it is set to nullLDAP object  LDAP property  Synchronization  WalterBates  ldapBadgeIdentification== ‘walterSid’  (Synchronized) badgeId==’walterSid’room==null  null        LDAP Watched directory object properties syntaxA watched directory is defined by an id that is declared in the “ldap_watched_directories” list. This id provides access to the object properties with this syntax: object_id.property.Here are the available object properties:      ldap_search_dn  DN of the LDAP watched directory that will be used to get the list of the LDAP users.  ldap_search_filter  LDAP user search filter (mandatory attribute, but can be a wide filter such as “cn=*”).  Example of a watched directory declaration:# Declare a list of LDAP watched directoriesldap_watched_directories = dir1,dir2# Specify dir1 settingsdir1.ldap_search_dn =   ou=People,dc=example,dc=comdir1.ldap_search_filter =   cn=*# Specify dir2 settingsdir2.ldap_search_dn =   ou=OtherPeople,dc=example,dc=comdir2.ldap_search_filter =   cn=*LDAP Group object properties syntaxThe tool will automatically detect the group class from LDAP. Here are the LDAP group classes supported by the LDAPSynchronizer:  group  groupOfURLs  groupOfNames  groupOfUniqueNames  ds-virtual-static-groupThe tool can determine the list of users belonging to a group by looking these properties, depending on the group’s objectClass:  member: group objectclass  memberURL: groupOfURLs objectclass  member: groupOfNames objectclass  uniqueMember: groupOfUniqueNames objectclass  ds-target-group-dn: ds-virtual-static-group objectclassThere are two ways (they can be configured individually or at the same time) to synchronize groups  declare a list of groups  perform a LDAP searches to find the list of groups to synchronizeSynchronize a list of groupsAn LDAP group is defined by an id which is declared in the “ldap_groups” list. This id provides access to the object properties with this syntax: object_id.property.You can also specify groups with a search: all groups that match the search are synchronized.Groups will be synchronized based on the matching of their LDAP common name (CN) and their Bonita BPM names.Groups can be declared individually in the configuration file with the following properties :ldap_group_dnmandatory attribute that specifies the DN of the LDAP group.forced_bonita_group_nameoptional attribute that renames the Bonita group instead of using the original LDAP group name.force_add_non_existing_usersoptional Boolean attribute (true by default) that defines whether group members that are not present in Bonita should be imported (if false, these users are ignored).Example of group declarations:# List of groups to synchronizeldap_groups = group1, group2# Specify group1 settingsgroup1.ldap_group_dn  =  cn=group1,ou=groups,dc=bonita,dc=comgroup1.forced_bonita_group_name  =  forced group1# Specify group2 settings: # sync the group with specified dn but not the users inside this groupgroup2.ldap_group_dn  =  cn=group2,ou=groups,dc=bonita,dc=comgroup2.force_add_non_existing_users  =  falseSynchronize a list of groups retrieved using a LDAP searchIn combination or as an alternative, groups can be declared using the result of an LDAP search that is defined in the configuration file with the following properties :      ldap_group_search_dn  DN of the LDAP watched directory that will be used to get the list of the LDAP groups.  ldap_group_search_filter  LDAP group search filter (mandatory attribute, but can be a wide filter such as “cn=*”).  force_add_non_existing_users  optional boolean attribute (true by default) that defines whether group members that are not present in Bonita should be imported (if false, these users are ignored).  Example of group searches:#Specify search of groupsldap_search_filter_groups  =  search1,search2# Specify search1 settings: # sync all groups under ou=people,dc=bonita,dc=com with cn starting with &quot;A_&quot;search1.ldap_group_search_dn  =  ou=people,dc=bonita,dc=comsearch1.ldap_group_search_filter  =  cn=A_*# Specify search2 settings: # sync all groups under ou=people,dc=bonita,dc=com with cn starting with &quot;B_&quot; # but without importing new users inside these groupssearch2.ldap_group_search_dn  =  ou=people,dc=bonita,dc=comsearch2.ldap_group_search_filter  =  cn=B_*search2.force_add_non_existing_users  =  falseRunning the synchronizerBelow are all the actions completed by the LDAP synchronizer tool:  Reads all Users in the source LDAP directory  Creates all Users in the bonita engine db  Reads all Groups in the source LDAP directory  Creates all Groups in the Bonita Engine db  Retrieves all Users that are belonging to the groups in the source LDAP directory  Retrieves all Users that are belonging to the groups in the Bonita Engine db  For all Users belonging to the groups in the Bonita Engine db and not in the groups in the source LDAP directory, do Delete membership (user, role-in-ldap-tool-config, group)  Creates all memberships for all users and groups with a configured role (user, role-in-ldap-tool-config, group)To run the LDAP synchronizer, execute the script BonitaSubscription-x.y.z-LDAP-Synchronizer.bat (for Windows) or BonitaSubscription-x.y.z-LDAP-Synchronizer.sh (for Linux), where x.y.z is the version of Bonita you are running.Warning: Do not modify the Organization from the Bonita Portal while the tool is running, as this will cause a synchronization error.Using the LDAP synchronizer in a non-default tenantInstallation: The LDAP Synchronizer is installed on the platform as described above. After installation, Check that the “User” profile is defined for the tenant. The default tenant has a “User” profile by default, but it must be created manually when a tenant is created. The LDAP synchronizer will fail if this profile is not defined.Configuration: To configure the LDAP synchronizer for a tenant that is not the default tenant:  Create a new folder in $BonitaSynchronizerFolder/conf with the same name as the name of the tenant (not the id) that was set when the tenant was created.  Copy the contents of the default folder from $BonitaSynchronizerFolder/conf to this new tenant-specific folder.  Configure the LDAP synchronizer for the tenant by editing the configuration files in the tenant-specific folder, as described above.Running: To run the LDAP Synchronizer on a tenant, give the name of the tenant as a parameter of the script.",
      "url": " /bonita/7.8/application-and-process-design/organization/ldap-synchronizer",
      "author": "",
      "categories": "Application and Process Design, Organization"
    }
    ,
  

    "bonita-7-8-application-and-process-design-organization-organization-management-in-bonita-bpm-studio": {
      "title": "Organization management in Bonita Studio",
      "content"     : "Organization management in Bonita StudioIn Bonita, the organization is the set of users who performs tasks in your business processes.Within Bonita Studio, more than one organization can be defined. This is useful if you are developing a process that will be deployed in several different organizations. It is also useful for testing, because you can create a reduced version of your organization that has the same structure but fewer users, saving time in managing your test environment.The ACME example organizationCreating an organizationExporting and importing an organizationModifying an organizationDeploying an organization to Bonita PortalProfile managementThe ACME example organizationBonita Studio includes a sample organization, called ACME. This organization contains a small number of users, who belong to different groups, with realistic roles.You can use this example organization to explore how to manage an organization in Bonita Studio, for example by adding a user, or changing the role of a user.You can also use this sample organization to test a process that you develop.Creating an organizationYou must load an organization into Bonita Engine before running a process. There are two ways to do this:  Create the organization in Bonita Studio, export it, and then import it into Bonita Portal.  If you have a Subscription edition, use the LDAP synchronizer to automatically load information from your LDAP directory into Bonita Engine.To specify an organization manually, you create the organization, create the group hierarchy, specify roles, and then add users and their memberships.  Start Bonita Studio.  Go to the Organization menu and select Manage….  Add a new organization:  Click Add. A line will be added to the table of organizations, with a placeholder name such as Organization1.  Change the placeholder name to the name of your organization, and add a description.Add groups to your organization:  Select the name of your organization and click Next.  Click Add to add a group. You can specify the following:  the group Name, which is used internally by the Bonita software.	**NB:** Bonita doesn&#39;t support the &#39;/&#39; character in the group name field. A group name that contains a &#39;/&#39; may lead to unstable behaviour and may be forbidden in the future. * the Display name, which is the name displayed in Bonita Portal * the Path, which shows the hierarchical relationship between groups * a Description of the group* Click **_Add_** to add the next group, and continue until you have added all the groups required. Note that each time you add a group, it is added as a subgroup of the group that is currently selected (by default this is the last group added). You can change the group hierarchy by specifying the Path.* When you have added all the groups you need, click **_Next_**. 1. Specify roles in your organization:* Click **_Add_**, and add a role called _member_. This will be the default role for users within a group.* Click **_Add_** and add the other roles you require. Typically, most organizations have a Manager role so the group manager can be easily identified, but the specific roles you require will depend on your processes. Remember that it is not necessary to copy all the role information from your business organization into your Bonita organization, but instead you should just create the roles that are useful in processes.* When you have specified all the roles the processes/applications require, click **_Next_**. 1. Add users to your organization.* Click **_Add_**. A default username is added to the list of users. * You can change the username, but the value must be in a format Bonita can use: only unaccented alphanumeric characters are permitted plus a period (.).   One option is to use the personal part of the user&#39;s email address, that is, the part before the @ sign.* Specify a password for the user. The password characters are not displayed, so keep note of the password you choose.* Specify the manager of the user. * In the **General** tab, specify the Title, First name, Last name, and Job title of the user.* In the **Membership** tab, specify the groups that the user belongs to, and what role they have in each group.* You can also specify **Personal contact** and **Professional contact** information for the user.  1. Add all the users needed to test your processes and applications.  1. When you have finished, click **_Finish_**.Exporting and importing an organizationYou can export an organization definition from Bonita Studio. The exported file is in XML, so can be modified.You can import an organization definition in this XML format that was exported from another Bonita Studio running the same version of Bonita, or that was constructed by some other method but has the same format.Choose Export… or Import… from the Organization menu.To prepare your production system (unless you are using the LDAP synchronizer), you must create the organization that you need for all the processes that will be deployed, export it from Bonita Studio, and import it into Bonita Portal. After the organization is imported into Bonita Portal, you can manage groups, roles, and users in the organization.Modifying an organizationTo modify an organization, choose Manage… from the Organization menu and use the same dialogs that you used to create the organization.To modify an item in an organization, select it in the item list and modify the information on the right-hand side of the list.To delete an item, select and it click Remove.Deploying an organization to Bonita PortalDeploying an organization means uploading the organization data to Bonita Portal temporarily so that you can test your process.The organization that you deploy overwrites one in Bonita Portal.Importing an organization overwrites the existing organization in Bonita Portal, which could have an impact on deployed processes.To deploy the organization data:  Choose Deploy… from the Organization menu.  Click the organization to be deployed, and  Specify the username of the user that will beused to log in to Bonita Portal when a process is started fromBonita Studio. This user must be in the organization you haveselected.  Click Deploy.Profile managementIn order to log in to bonita UIs (Portal, applications…), a user must have at least one profile (User, Adminstrator…etc).In Community, only provided profiles are supported (User and Adminstrator). When deploying an organization from the Studio, each user is automatically mapped to all those profiles.In Teamwork edition, 3 provided profiles (User, Process Manager and Adminstrator) can be edited in the Studio using an XML editor (Go to Organization &amp;gt; Profiles &amp;gt; Open). For development purposes, all users mapped to role member (cf ACME organization) will benefit from all profiles in the Portal to let you log in with any of those users and test your processes.This will not be true for other environments.In Efficiency, Performance and Enterprise editions, in addition to provided profiles it is possible to defined custom profiles in the Studio using the Profile Editor.When creating or importing other organizations, you need to make sure that all users are mapped to at least one profile, through a group, a role, a membership, or as a user, to grant them access to Bonita Portal or applications.",
      "url": " /bonita/7.8/application-and-process-design/organization/organization-management-in-bonita-bpm-studio",
      "author": "",
      "categories": "Application and Process Design, Organization"
    }
    ,
  

    "bonita-7-8-application-and-process-design-organization-organization-overview": {
      "title": "Organization overview",
      "content"     : "Organization overviewThere are two stages to specifying who will perform a step in a process:  When the process is designed, the designer designates an actor for the step. An actor is a placeholder that defines the theoretical user who will perform the step.  Before a process is deployed, the actors are mapped to the real users in an organization.This page explains the concepts of actors and organizations in Bonita.Actors and usersWhat is an organization?Tools for managing an organizationCustom user informationIn Bonita Studio:In Bonita Portal:Organization schema XSD fileActors and usersWhen you define a process, you define who will carry out a step in the process by specifying an actor. For example, if a step can be done by any member of the HR team, you could call the actor hr, or if a step can only be done by the sales team manager in Europe, you could call the actor sales_mgr_europe.A user is a person who has a username and a password in a Bonita organization, and can therefore perform steps in a process. Before you deploy a process, you need to map the process actors. This mapping defines who can carry out steps in the process.What is an organization?An organization is a collection of users, usually defined in a hierarchical structure that is aligned with the structure of the business entity that the users belong to.Within the organization, users belong to one or more groups.For each group a user belongs to, the user has a role. You can define roles as required. The combination of a group and a role for a user is called a membership. A user can have several memberships but each one must apply to a different group.In this corporation, there is a hierarchical structure, with the following units:MyCorpMyCorp/AdministrationMyCorp/Administration/PurchasingMyCorp/Administration/Order adminMyCorp/HRMyCorp/Production/Parts receptionMyCorp/Production/ManufacturingMyCorp/Production/DeliveryThese hierarchical units can be used as groups within the Bonita organization. In addition, you can create transverse groups that do not correspond to the hierarchical structure, or that also take account of some other factor, such as location. For example, suppose that MyCorp has two sites, one in the US that is corporate headquarters and production, and one in Europe that is just a production site. You could create two groups, MyCorp/US and MyCorp/Europe, each containing the users at the relevant site.A group can be created based on any set of criteria useful to a process. For example, if MyCorp is conducting trials of a new process to control just-in-time parts delivery from a supplier, you could create a group that contains the specific users involved in the trials. The figure below shows the groups in the MyCorp organization, seen in Bonita Studio.All the users who participate in a process must be in the same Bonita organization. For example, if you use a process to track order processing with a supplier, the supplier employees who perform steps in the process must be in the organization.Tools for managing an organizationThe Bonita model for managing an organization assumes that you use the same organization information for other tools and that it is stored in an LDAP directory. Bonita has three tools you can use to manage your organization information:  LDAP synchronizer (in the Enterprise, Performance, Efficiency, and Teamwork editions of Bonita), for keeping the Bonita organization synchronized with your external LDAP directory. Synchronization is one-way, from LDAP to Bonita. You can run the synchronizer once to load the organization then manage it within Bonita Portal, or you can run the synchronizer on a schedule and manage the organization externally.  Bonita Portal, for managing organization information in production within Bonita. You can manage users, groups, and roles. You can also import or export the organization information.  Bonita Studio, for creating your initial organization definition, which must be imported into Bonita Portal prior to production, and for managing organization information while you test a process in development. Bonita Studio contains an example organization, called ACME.This organization contains a small number of users, who belong to different groups with realistic roles. You can use this sample organization to test a process that you develop. You can modify the ACME organization and you can create other organizations.Custom user informationCustom user information enables custom details to be added to a user in the Organization.In Bonita Studio:Use the Custom tab in Organization users to add Custom information to a user.This custom information is defined in Bonita Studio, then applied to an actor filter, and when deployed in Bonita Portal, enables the filtering of users mapped to tasks.The custom user information is saved in the Organization schema and published so it can be used in Bonita Portal.The Users with Custom information actor filter is provided by default, and can be applied to an actor. It uses the custom information added to a user to map users to perform tasks in Bonita Portal.When the process is deployed in Bonita Portal in a production environment, the filter definition is static, so it cannot be changed. However, the value associated with a filter definition can be modified by a user with an admin profile.The organization will be modified on the remote server. This enables tasks to be re-assigned to users in processes that are already deployed, which is then used to filter users for tasks.See custom user information in Bonita Studio for setting the definition and values for the filterIn Bonita Portal:This custom information can only be seen and edited by users who have the Administrator profile.Note that if the custom user information does not exist in Bonita Studio, modifying its value for a user in Bonita Portal will not make any difference to the filter, apart from creating an error.Synchronize the Organization between Bonita Studio and Bonita Portal first by publishing it so all values are up to date.Organization schema XSD fileIf you want to modify the organization by hand, it is important to respect the structure of the .xsd file.You can see the standard Bonita organization .xsd file on Github, to view the xml structure and tags.",
      "url": " /bonita/7.8/application-and-process-design/organization/organization-overview",
      "author": "",
      "categories": "Application and Process Design, Organization"
    }
    ,
  

    "bonita-7-8-application-and-process-design-page-and-form-development-6-x-legacy-forms": {
      "title": "6.x legacy forms",
      "content"     : "6.x legacy formsAttention: By the end of 2018, V6 GWT forms won’t be available for modeling or execution.We strongly advise you to switch to forms created with Bonita UI Designer to benefit from technologies like html/AngularJS and use contracts in tasks and process instantiation.Continue to use 6.x forms in Bonita 7.xHide/Show 6.x specific featuresContinue to use 6.x forms in Bonita 7.xFrom the Execution tab, in the Form, Instantiation form, and Overview page panes, you can choose the 6.x option. This enables you to continue to use the 6.x forms in a Bonita 7.x platform. You need to apply this configuration at each form, and each overview page. This means that a process can work with a mix of 6.x and 7.x forms/overview pages to make it easier to migrate forms from 6.x.Hide/Show 6.x specific featuresWhen you no longer need access to the 6.x features, you can hide them to simplify the Bonita Studio UI.  Go to Preferences.  In the Other category, click 6.x legacy.  Uncheck the checkbox to hide some 6.x-only features.",
      "url": " /bonita/7.8/application-and-process-design/page-and-form-development/6-x-legacy-forms",
      "author": "",
      "categories": "Application and Process Design, Page and form development"
    }
    ,
  

    "bonita-7-8-application-and-process-design-page-and-form-development-cache-configuration-and-policy": {
      "title": "Cache configuration and policy",
      "content"     : "Cache configuration and policy Cache policy over viewLiving application and custom pages  Cache configuration and policyThis page explain how the portal cache and the living application cache are configured in bonita 7.6 version. You will also find details about this cache configuration impact for the end user, and tutorial on how you can modify this configuration.Cache policy over viewThe default cache policy configured on your bonita bundle will allow your browser to store recently used information so thatit can be quickly accessed at a later time, thereby improving performance.When you browse through different forms or custom pages that use the same images, CSS, or JavaScript, your browser will not have to re-download the files. Instead, the browser can simply load them from the cache, which is stored on your local hard drive.This cache policy will have impacts at three different levels:  Bonita portal display time and look and feel update.  Living applications display time and look and feel update.  Mobile application display time and look and feel update.Note that in every cases, custom pages and forms take advantage of the cache mechanism, whether contained in the portal, in an Application or in the Mobile application.Development configurationBy default cache is disable for the web server embedded by Bonita studio, as it is more comfortable to realise development without cache. But you can decide to activate cache, to be closer to the production display time. To do this, see Cache configuration documentation.Portal and MobileAs the portal or mobile update frequency is specific for each users, cache duration is set to 10 hours by default. So if you update your bonita portal in production, or if you change the portal look and feel,the end user will see the modification within a period of 10 hours.To fit your needs, you can change this duration into your server configuration, by following those steps:  Go in workspacetomcatserverwebappsbonitaWEB-INF  Open web.xml file.  Search CacheFilter filter-name.  Change value for duration param to value what you want and save file.  This update will be up when last cache expiration down or when end user empty cache browser.Living application and custom pagesAs the pages generated by the UI Designer take advantage of a cache busting mechanism, we can set the cache duration to 6 months.To fit your needs, you can change this duration into your server configuration, by following those steps:  Go in workspacetomcatserverwebappsbonitaWEB-INF  Open web.xml file.  Search CustomPageCacheFilter filter-name.  Change value for duration param to value what you want and save file.  This update will be up when last cache expiration down or when end user empty cache browser.Note: Html resources will be not caching.",
      "url": " /bonita/7.8/application-and-process-design/page-and-form-development/cache-configuration-and-policy",
      "author": "",
      "categories": "Application and Process Design, Page and form development"
    }
    ,
  

    "bonita-7-8-application-and-process-design-page-and-form-development-page-and-form-development-overview": {
      "title": "Page and form development overview",
      "content"     : "Page and form development overviewA page presents information to a user. It can also collect information entered by a user. A page is displayed in a browser.A form is a page that belongs to a process. In a process, there can be forms for process instantiation and for human tasks, and there can be overview forms.Form sourcesForm typesForm sourcesYou are recommended to use the UI Designer to create forms for Bonita 7.x processes. UI Designer forms enable you to take full advantage of the separation between the process definition and the UI definition, by using contracts.You can also use external forms referenced by URL. If an external URL is being used, the information submitted to the Engine by the form must fulfill the contract. You can store external forms wherever you want as long as they are accessible by URL.For certain cases, you can specify that there is no form. This is required for a process that is instantiated programmatically (by a call activity or by an API call from an application, for example), or for a process or a task that does not have any contract input.A human task with no form and no contract represents a manual task, completed outside Bonita. The user will indicate in the application or Portal that the manual task is complete. A process or a human task with a contract but no form expects the information needed to fulfill the contract to be provided programmatically.For backward compatibility, so that processes created in Bonita 6.x can continue to be used and maintained, the 6.x legacy form builder and associated tooling are still supported. You are recommended to migrate 6.x forms to the UI Designer so that you can take advantage of the new features in Bonita 7.x.Attention: By the end of 2018, V6 GWT forms won’t be available for modeling or execution.We strongly advise you to switch to forms created with Bonita UI Designer to benefit from technologies like html/AngularJS and use contracts in tasks and process instantiation.Form typesA form is a page that belongs to a process. It could be a process instantiation form, a human task form, or an overview form. There are some extra things to consider when you are creating a form compared with an ordinary page, concerning how data is passed between the process instance and the form.A context is the set of data provided by the process instance or task instance to the form. There is no context for a process instantiation form.A contract is the definition of that data that the form returns to the process instance. There is no contract for an overview form.During process development, some temporary forms are generated if necessary when you run a process from Bonita Studio, for process instantiation, for human task execution, and for the case overview. These forms are generated if the “UI Designer” option is chosen but no form is specified in the process definition.The process instantiation and step execution temporary forms are based on the relevant contract and they are a useful tool for testing and debugging your application.The case overview contains three main sections:  List of business data: the content of the business variables used by the case  List of documents: the content of each document used by the case  Timeline: information in chronological order about all the actions that have been performed in the selected case",
      "url": " /bonita/7.8/application-and-process-design/page-and-form-development/page-and-form-development-overview",
      "author": "",
      "categories": "Application and Process Design, Page and form development"
    }
    ,
  

    "bonita-7-8-application-and-process-design-page-and-form-development-ui-designer-appearance": {
      "title": "Appearance",
      "content"     : "AppearancePage and form appearance is based on the Bootstrap v3.3.2 CSS framework. To define the appearance of a page or form you can use an application theme resource, apply a Boostrap theme, or manually add a custom CSS class that you implement.Apply an application resource themeApply a Boostrap CSS themeCustomize appearanceApply an application resource themeBy default, pages designed with the UI Designer are deployed in an application and use the theme chosen for the application.Apply a Boostrap CSS themeMany Bootstrap CSS themes are available (for example at https://bootswatch.com/).To apply a Bootstrap theme, download it and add it to your page or form as a CSS asset. To see the result, preview your page. Applying a Bootstrap theme as a CSS asset will override the application theme.Customize appearanceThe appearance of a page or form widget can be modified with a CSS stylesheet.The UI Designer use the Bootstrap CSS, so the markup provided for widgets uses Bootstrap CSS classes. You can add classes by using the CSS classes property field available for each widget in the whiteboard.Then, to customize the widget appearance, include a CSS asset in your page or form. In this CSS file you can either overwrite the Bootstrap CSS classes or implement the classes you specify in the CSS classes property field.",
      "url": " /bonita/7.8/application-and-process-design/page-and-form-development/ui-designer/appearance",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-8-application-and-process-design-page-and-form-development-ui-designer-assets": {
      "title": "Assets",
      "content"     : "AssetsAssets enable you to add web resources to pages, layouts and forms. We will use “page” to refer to those three artifacts.Available asset types are JavaScript, CSS, image, and (in the Subscription editions) Localization. Assets can be Local (file stored in the artifact) or External (URL). A localization asset is always local and its name is always “Localization.json”. An external asset name must be a standard URL.Assets in the page editorJavaScript assetsCSS assetsImage assetsLocalization asset (Subscription editions only)Asset listAssets in the custom widget editorJavaScript assetsImage assetsAsset listAssets in the page editorManage assets using the Assets tab in the bottom panel of the whiteboard.JavaScript assetsWith a Javascript asset you can add a script. It will be loaded in the global scope and you can use it in data.For example, add a script myscript.js to display this welcome message:function hi(name){  return &#39;Welcome &#39; + name + &#39; to the UI Designer&#39;;}To add and use this asset:  In the Assets panel, click Add a new asset.  Select the type: JavaScript.  Set the source to Local.  Upload your JavaScript file. The file appears in the asset list.  In the Variables panel, add a new String variable called “name”.  Create a JavaScript expression that calls the “hi” function.  Add an input widget linked to the “name” variable and a text widget linked to the hi variable.  Click on the preview button. You will see a page containing the welcome message. The name will change when you change the value of the name variable.CSS assetsAdd CSS assets at page level and use them to edit the CSS classes property of any widget. The UI Designer integrates the default Bootstrap style.For example, you can create a file mycss.css with this content:.myOwnStyle{  background-color : #404853;  color: #ffffff;}  In the Assets panel, click Add a new asset.  Select the type: CSS.  Set the the source to Local.  Upload your CSS file. The file appears in the asset list.  Drag a widget text onto the whiteboard.  Select this widget.  In the property panel add your CSS class  Click on the preview button. You will see white text on a gray background.Image assetsAn image asset can be displayed in a custom widget (see the Custom widget editor &amp;gt; Assets help). Add an image asset at page level if the image is used as a custom widget property.Localization asset (Subscription editions only)The localization asset of a page is a local file called localization.json that contains the text presented in the page with translations into the languages that you want to support. This enables you to create multi-language pages.A page can not have more than one localization asset. When you upload a new localization.json asset file, it overwrites the existing one.Asset listThe list contains both page assets and the assets of the custom widgets used in this page.In the list, you can delete page assets only, view local assets, and edit external assets of a page. You can not manually change the order of assets in the page. You can also indicate whether an asset is active. To avoid dependency clashes with multiple version of assets, make sure only one version of an asset is active in a page.At runtime, custom widget assets are loaded in alphabetical order of the custom widgets. For each custom widget, the assets are loaded in the order they are listed. Then page assets are loaded. JavaScript and CSS assets are loaded in the page header.Assets in the custom widget editorTo use the same asset in several pages, you can add it to a custom widget and use this custom widget in your application pages or forms. When you add a custom widget with assets to a page, those assets are automatically linked to the page. A custom widget can not contain a localization asset. Instead, include the text and translations in the page localization asset for each page where the custom widget is used.JavaScript assetsIn a custom widget JavaScript asset, you can specify a dependency on an Angular module. First add the JavaScript asset, and then add the module name in the dedicated section. You can find the the available modules on http://ngmodules.org/.Image assetsNote: Applies to 7.0.0 and 7.0.1. From 7.0.2, use the image widget.In the custom widget editor, create a widget with two properties:{name : &quot;src&quot;, type : &quot;text&quot;, &quot;Default value&quot; : &quot;assets/img/assetname.png&quot;}{name : &quot;description&quot;, type : &quot;text&quot;}You do not need to define a controller but you must create an HTML template: &amp;lt;img ng-src=&quot;&quot; alt=&quot;&quot;&amp;gt;You can now use this custom widget in any page, by adding an image asset and changing the property src to point to it. For an external asset, specify a URL. To load a local image, specify a relative path as follows:  assets/img/[image name] for a local image added in the page  widgets/[custom widget name]/assets/img/[image name] for a local image added in a widgetAsset listIn a custom widget, you can use the arrows to reorder assets, view local assets, edit external assets, and delete an asset.You can also indicate whether an asset is active. To avoid dependency clashes with multiple version of assets, make sure only one version of an asset is active in a page.At runtime, assets of a custom widget are loaded in the order defined.",
      "url": " /bonita/7.8/application-and-process-design/page-and-form-development/ui-designer/assets",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-8-application-and-process-design-page-and-form-development-ui-designer-create-or-modify-a-page": {
      "title": "Create or modify UI artifacts",
      "content"     : "Create or modify UI artifactsThe UI Designer is a powerful application to design Bonita custom pages, layouts, forms, custom widgets and fragments.Custom pages are used in Bonita Portal custom profiles or in custom BPM applications.Forms are used to instantiate a process or to execute a human task.The UI Designer runs in a browser. Launching it from Bonita Studio starts a web server and opens your default browser.Starting the UI DesignerFrom Bonita Studio menu barFrom a form mapping tabDesign a page, layout, form, or fragmentPreview a page, layout, form, or fragmentExport an artifactImport an artifactPages and forms in .bos/.bar fileStarting the UI DesignerFrom Bonita Studio menu barOpen the Development menu then choose Open UI Designer, or click the UI Designer icon in the coolbar. This is useful to create application pages that are not linked to a process, but display business information whose changes are managed by underlying processes.From a form mapping tabSelect a human task or a pool, go to the Details panel, Execution tab. Then go to the relevant form mapping tab:  Instantiation form for a form to start a process instance  Form for a form on a human taskWith the form type set to UI Designer, you can select a form from the dropdown list and click the pencil icon to edit it, or you can choose Create a new form. This is the way to go to create forms as the Studio will auto-generate a form based on the process instantiation or task execution contract.You can also create a customized overview form, to display a summary of the case to the users, either in a case details page, or in the tasklist, to give some context to the task to do.To do so, go to the pool Details panel, Execution tab, and click _Overview page.With the form type set to UI Designer, you can select a form from the dropdown list and click the pencil icon to edit it, or you can choose Create a new form.Design a page, layout, form, or fragmentAfter a page, layout, form, fragment is created, you can update it in the Page editor. Update your page, form or fragment by dragging and dropping widgets from the palette to the whiteboard. Edit widget properties in the widget properties panel, create data, and bind it to the widgets.In the Enterprise, Performance and Efficiency editions, you can optimize the page or form design for a given device type by configuring device-specific values for the Width property for widgets. Use the a device types bar in the Page editor to choose the target device type.Custom widget is a special artifact that we will explain in a later chapter.Preview a page, layout, form, or fragmentYou can preview page, form and fragment rendering by clicking the Preview button. Another browser window opens with the artifact as it will be displayed after deployment. If you update the page, form or fragment, the preview is automatically refreshed when you save (not available for Internet Explorer 9).In the Enterprise, Performance and Efficiency editions, you can use the a device types bar on the preview screen to choose the target device type.The preview displays the artifact as it would be displayed on the selected type of device.Custom widget is a special artifact that we will explain in a later chapter.Export an artifactYou can export a page or a layout to deploy it in Bonita Portal as a custom page.You can export any artifact to import it into another UI Designer.To export an artifact, click the Export button  on the Page editor or the UI Designer home page. A zip file is downloaded to your computer. It contains a Bonita custom page, which also suitable for import into another UI Designer. on the Page editor or the UI Designer home page. A zip file is downloaded to your computer. It contains a Bonita custom page, which also suitable for import into another UI Designer.After export you can modify your page or layout code by directly editing the code located in resources folder. Be aware that such a modification to the code will work when the page or layout is deployed in Bonita Portal but it may be broken if you import the page into another UI Designer.Import an artifactTo import an artifact from another UI Designer, go to the UI Designer home page and click the Import button . When you import a page, layout, form or fragment, its dependencies (such as custom widgets and fragments used are automatically be imported too.Warning: an artifact that has not been designed with the UI Designer cannot be imported into the UI Designer.Pages and forms in .bos/.bar fileWhen you generate the .bar file of a process, the mapped forms created with the UI Designer are embedded in the file. Application pages are not embedded. When you deploy the process in Bonita using the .bar file, forms are imported and deployed. Pages and layout must be imported one by one.To import artifacts in another Studio, you can export pages and forms in the process .bos file. In the list of artifacts to insert in the .bos file, forms are checked by default, but not pages. When you import this .bos file into another Bonita Studio, forms and pages that you have checked are available in the UI Designer of that Studio.",
      "url": " /bonita/7.8/application-and-process-design/page-and-form-development/ui-designer/create-or-modify-a-page",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-8-application-and-process-design-page-and-form-development-ui-designer-custom-widgets": {
      "title": "Custom widgets",
      "content"     : "Custom widgetsIf the standard widgets do not meet your needs, you can create a custom widget to match exactly what you want to achieve.After creation, a custom widget is available in the palette to design pages, application layouts, forms or fragments.  DescriptionCustom widget propertiesUsing an external AngularJS directive or service in a custom widgetTranslation filterAdvanced exampleDescriptionIn UI Designer editor, custom widgets are composed of:  A description that briefly describes the widget  Properties exposed by the widget  A template that describe the widget HTML markup  A controller that describe the widget logic  Some assets if the widget uses external JavaScript libraries, CSS definitions, or images  AngularJS modules declaration if the widget uses services or directives that are not built in to the AngularJS frameworkCustom widget implementation is based on the AngularJS framework.When you open the custom widget editor to create a new custom widget, a simple example is displayed to show the basic uses of these concepts.For more information, see the AngularJS guide on templates and controllers.For now, the definition of custom containers is not yet available in the product.  Note that UI Designer always prefix the ID of the custom widgets by “custom”, whereas the standard widgets are internally using the prefix “pb”.If you build a widget outside of the UI Designer, your widget ID must not start with “pb”.Custom widget propertiesProperties are variables that can be set in the properties panel when adding a custom widget to a page, layout, form, or fragment.A property is constant, dynamic, a bidirectional bond, or an interpolation. You can chose between these treatments when you edit the widget property. Use properties when you want the front-end developer using the widget to customize widget appearance or behavior. In a custom widget, a property can be used either in the template or in the controller.A property has a name which can be referenced in the controller or the template, a label which will be printed in the properties panel in an editor, a default value, and a type. There are several property types:  text user specifies the property value with some text  choice user chooses the property value from a list that you define  html user specifies the property value with some text that can contain basic HTML tags  integer property value is an integer  boolean property value is a Boolean  collection property value is an arrayEach of these types will allow the front-end developer to bind the property value to a variable.Using an external AngularJS directive or service in a custom widgetMany Angular libraries are available on the Internet and can be used in a custom widget. To do so, download the library you want to use and add it to your custom widget as a JavaScript asset. The downloaded library will specify a module to add to your application: add this module to the custom widget definition in the Required Angular modules field. Now you can use the imported library directives in the custom widget templates and services in the controller by injecting them in function arguments (example: function($scope, myImportedService)).Translation filterThe Multi-language pages tutorial explains how to manage localization (l10) inside developped pages, layouts, forms or fragments. During page loading, the l10n strings are loaded to the l10n mechanism.You can use this mechanism in your custom widgets to process content to translate. There are two ways to use the localization: either the uiTranslate angular filter or ui-translate directive:  Use the uiTranslate filter in custom widgets for dynamic content to be translated  Use the ui-translate directive in custom widgets for static content to be translatedFor instance, with a custom link widget :&amp;lt;div&amp;gt;&amp;lt;a title=&quot;&quot; ui-translate&amp;gt;Submit&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;The link text which is static is translated using the ui-translate directive. The link text title held inside the properties.title variable is translated using the uiTranslate filter.Advanced exampleThis section explains how to use the carousel and slide directives from the ui.bootstrap library.Following the ui.bootstrap documentation, download ui-bootstrap-tpls.min.js and declare the module ui.bootstrap as a dependency of the application. Specifically, to use these directive in a custom widget, you need to:  Download ui-bootstrap-tpls.min.js.  Add it as local JavaScript asset to the custom widget.  Declare the ui.bootstrap module in the Required angular modules field.You can now use the carousel and slide directives in your template. Here is a simple example of the template and controller for a carousel.Template:&amp;lt;div uib-carousel&amp;gt;  &amp;lt;div uib-slide ng-repeat=&quot;slide in slides track by $index&quot; index=&quot;$index&quot; &amp;gt;&amp;lt;img ng-src=&quot;&quot; style=&quot;margin:auto;&quot; alt=&quot;&quot;&amp;gt;  &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;Note:If you want use carousel and slide directives in the same page as widgets that import ui-bootstrap-tpls-0.13.0.min.js as asset, please use this syntax for carousel and slide directives in your template.&amp;lt;uib-carousel&amp;gt;  &amp;lt;uib-slide ng-repeat=&quot;slide in slides&quot; &amp;gt;&amp;lt;img ng-src=&quot;&quot; style=&quot;margin:auto;&quot; alt=&quot;&quot;&amp;gt;  &amp;lt;/uib-slide&amp;gt;&amp;lt;/uib-carousel&amp;gt;Controller:function ($scope) {  $scope.slides = [{ url: &#39;http://placekitten.com/601/300&#39;, alt:&#39;kitty looking down&#39; },{ url: &#39;http://placekitten.com/602/300&#39;, alt:&#39;kitty in hand&#39; },{ url: &#39;http://placekitten.com/603/300&#39;, alt:&#39;kitty outside&#39; },{ url: &#39;http://placekitten.com/604/300&#39;, alt:&#39;4 kitten in basket&#39; }   ];}",
      "url": " /bonita/7.8/application-and-process-design/page-and-form-development/ui-designer/custom-widgets",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-8-application-and-process-design-page-and-form-development-ui-designer-fragments": {
      "title": "Fragments",
      "content"     : "FragmentsNote: For Bonita Enterprise, Performance, Efficiency, and Teamwork editions only.A fragment is a piece of a page, form or layout, composed of one or more widgets and/or containers. It can be inserted in other pages.A fragment has its own widget configurations and data, but can also expose data to the pages that include it.Fragments are available in the Bonita Enterprise, Performance, Efficiency, and Teamwork editions.Fragment editorCreate a fragmentUpdate a fragmentVariables and fragmentsExport a fragmentImport a fragment Fragment editorThe editor used to create or update a fragment is the same as the Page editor. Create and update fragments in the same way you create and update a page.Create a fragmentYou can create a fragment from scratch in the UI Designer home page.  Click on the generic Create button.  Choose the type Fragment  Type a fragment name  Click on the Create button to confirm  The fragment editor opens.You can also convert a plain container used in a page, a form, a layout or a fragment into a fragment:  Select the container in the page editor.  Click the link Save as fragment in the properties panel.  Specify a name.  Click the Save button.  The Fragment editor opens.Update a fragmentFragments are listed in the Fragments tab of the UI Designer home page. Click the name of a fragment to open it in the Fragment editor.You can also update a fragment in the page editor when you are editing a page, form or layout that uses the fragment. Select the fragment in the Page editor and click the Edit fragment button. The changes you make to the fragment are applied everywhere the fragment is used, not just the page you are currently editing.Variables and fragmentsA fragment has its own variables, but can also expose variables to the pages that include it.When you add a variable to a fragment, specify whether the variable will be exposed in the pages, forms or layouts using this fragment.  If a fragment variable is not exposed, the variable data is specific to the fragment.  If a fragment variable is exposed, it can be bound to a variable of the page, layout or fragment that embeds the fragment.For example, take a fragment called “MyFragment”. This fragment has two variables, one exposed (exposedVariable) and the other not (notExposedVariable). When you add this fragment to a page in the Page editor, you can bind the exposedVariable with a variable defined in the page.At runtime, when fragment and page variables are bound, data changes can be made in either the page or the fragment.If several fragments expose a variable and these variables are linked to the same page variable, if you change the variable in the page, or in one of the fragments, the change is made in all the fragments.Export a fragmentYou can export a fragment from the UI Designer home page. The fragment is exported as a zip file that contains the following:  an HTML page  a resources folder containing  CSS files  JavaScript dependencies  Widget files used by the fragment (a widget is an Angular JS directive)  any sub-fragments that are used  You can use the HTML page as it is. You can also update the code outside the UI Designer. However, if you make changes that are not compatible with the UI Designer, you will not be able to import the fragment back into the UI Designer.Import a fragmentYou can import a fragment that has been created in the UI Designer into the same or another UI Designer. The format of the imported zip file must be the same than the zip file created during an export, and no modification should have been made to the html, CSS, or JavaScript codes.",
      "url": " /bonita/7.8/application-and-process-design/page-and-form-development/ui-designer/fragments",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-8-application-and-process-design-page-and-form-development-ui-designer-migrate-a-form-from-6-x": {
      "title": "Migrate a form from 6.x",
      "content"     : "Migrate a form from 6.xAttention: By the end of 2018, V6 GWT forms won’t be available for modeling or execution.We strongly advise you to switch to forms created with Bonita UI Designer to benefit from technologies like html/AngularJS and use contracts in tasks and process instantiation.Although a form created with Bonita 6.x will work with Bonita 7.x, you are recommended to migrate your 6.x forms and process definitions to take advantage of the new features, namely live update of a form. There is no specific tooling to assist with migration, and you do not have to migrate all apsects of a process definition at the same time.You can take a staged approach, testing that your process continues to behave as expected after each change.The most efficient sequence for migrating a process and its forms to benefit from Bonita 7.x features is as follows:  BDM: create your business data model. If you already have a BDM from 6.x, no change is needed.  Business data: if you have created a new BDM, populate your business data database by importing it from where it was previously stored (process data or external data).You can do so with a process that uses a connector to retrieve external data and an operation using the REST API to store the business objects.  Process: check that the process runs with the business data, and update it if necessary.  Contracts: define contracts based on your business data, for process instantiation and for each human task.  Forms: generate the forms from the contracts into the UI Designer, then update them as needed.  In the Studio, at pool level and for each human task, go to the Details panel, Execution tab, Form section, and change the option from Legacy (6.x) to UI Designer. You can also generate them in another development environment. In this case, choose External URL option.When you export a diagram, forms created in the UI Designer are embedded by default in the .bos and .bar files, to share between Bonita Studios (.bos) or install in a Bonita Portal (.bar), so you don’t need to manually export them and import them one by one.",
      "url": " /bonita/7.8/application-and-process-design/page-and-form-development/ui-designer/migrate-a-form-from-6-x",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-8-application-and-process-design-page-and-form-development-ui-designer-multi-language-pages": {
      "title": "Multi-language pages",
      "content"     : "Multi-language pagesNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.In the Bonita Subscription editions, the UI Designer includes a mechanism to add translations for page, layout and forms elements, to support multi-language applications.The text displayed in the preview and at runtime adapts to the locale or browser language automatically. The UI Designer itself, that speaks to developers, not end-users, is displayed in the language of your Bonita Studio.The Preview window is displayed in the language set for Bonita Portal, since it speaks to the end-users.You can translate all text strings displayed on a page, layout or form: the labels, the placeholders, the available values of a list, and the date format of the Date Picker widget. You can also translate fragments and custom widgets strings that the page, layout or form embeds.How it worksTutorial: creating a multi-language pageTranslate the textAdd languages to Bonita PortalAdd a localization asset to the pageTranslate contents in custom widgetsTranslate content in fragments (Subscription editions)Preview the pageDeploySharing translationsHow it worksEach page has a localization asset that contains the keys and the translations for all strings and all languages that the page supports, one section by language.The asset is a file, localization.json. Each language is identified by the ISO 639 language attribute (for example, fr-FR, es-ES). Open the default localization.json asset to see how this file must be formatted, and to update it with the needed strings and translations.To use a localization asset, replace the default localization.json file with an updated localization.json file of the same format containing all the keys as well as the translations into the target languages. The format of file must be:{&quot;ISO 639-1 code for language-A&quot;:   {&quot;english key&quot;:&quot;translated key for language-A&quot;,&quot;english key2&quot;:&quot;translated key2 for language-A&quot;, ...   },&quot;ISO 639-1 code for language-B &quot;:   {&quot;english key&quot;:&quot;translated key for language-B&quot;,&quot;english key2&quot;:&quot;translated key2 for language-B&quot;, ...   }  ...The code that specifies a language in localization.json must be the same as the code in the .po files used to add the language to the Portal.By default, US english strings are used as the keys for translation. But you could use any code or language for the keys, and create an en-US section of translations to consider english as any other translated language. That option allows to freely change english strings with no duplication on every other language section.In production, a page, layout or form is displayed in the language specified by the BOS_locale cookie value. This value must match exactly one of the language codes in the localization.json asset. The BOS_locale value is set by selecting a language in Bonita Portal or in a custom widget. If BOS_locale is not set or its value does not match a language code, the browser language is used. If neither the BOS_locale nor the browser language matches a language code in localization.json, the untranslated keys are displayed in the page.Tutorial: creating a multi-language pageThis tutorial explains how to create a multi-language version of the Travel Tool application page from the getting started tutorial, adding french and russian text to the page, initially developped in US-english. It assumes that you have already created the Travel Tool page following the instructions in the getting started tutorial.French is supported by default in Bonita, along with US-english and Spanish. Russian is not.Translate the textThe first step is to create a list of all the english text strings used in the page. These strings are the keys for translation. For this simple page, you could create the key list by hand from the text that is visible in the Page editor.However, to be sure that you identify all the items that need to be translated, export the page zip file, and edit the page.json file to retrieve all the text strings. In addition to the text strings, look for any date format strings and URLs that could contain a locale attribute.For the Travel Tool application page, this is the set of text strings to translate:Travel ToolThis page lists your pending and approved travel requests.My pending requestsDeparture dateNumber of nightsHotel neededDestinationReasonCreate new travel requestMy approved travel requestsyesnoNow translate the text outside of Bonita, in any suitable translation editor, or spreadsheet.Add languages to Bonita PortalBefore you can view a page in a language, that language must be supported for Bonita web applications. French is one of the default languages supported, so you just need to add support for Russian. To do this, add Russian from the Community translations to your Bonita Portal. Make sure that you add both the Community and Subscription files. Then restart your Bonita Studio, start the Portal, and change the language to Russian to check that it is available.Add a localization asset to the pageCreate a localization.json file in the format shown above, containing the french and russian translations of the page text.The language identifier must match the language identifier in the .po files containing the Portal translations.Use an online Json checker to make sure there are no format errors in the file. The file will look something like this:{  &quot;ru_RU&quot;: {&quot;Travel Tool&quot;: &quot;Путешествия Инструмент&quot;,&quot;This page lists your pending and approved travel requests.&quot;: &quot;Эта страница содержит список ожидающие и одобренные запросы в поездке.&quot;,&quot;My pending requests&quot;: &quot;Мои ожидающие запросы&quot;,&quot;Departure date&quot;: &quot;Дата отбытия&quot;,&quot;Number of nights&quot;: &quot;Количество ночей&quot;,&quot;Hotel needed&quot;: &quot;Отель нужны&quot;,&quot;Destination&quot;: &quot;Hазначения&quot;,&quot;Reason&quot;: &quot;причина&quot;,&quot;d/M/yyyy&quot;: &quot;dd/MM/yyyy&quot;,&quot;Create new travel request&quot;: &quot;Создать новый запрос пути&quot;,&quot;My approved travel requests&quot;: &quot;Мои запросы туристические утвержденные&quot;,&quot;yes&quot;: &quot;Да&quot;,&quot;no&quot;: &quot;Нет&quot;  },  &quot;fr-FR&quot;: {&quot;Travel Tool&quot;: &quot;Gestionnaire de déplacements&quot;,&quot;This page lists your pending and approved travel requests.&quot;: &quot;Cette page affiche la liste de vos demandes de déplacements en attente et de celles qui ont été approuvées.&quot;,&quot;My pending requests&quot;: &quot;Mes demandes en attente&quot;,&quot;Departure date&quot;: &quot;Date de départ&quot;,&quot;Number of nights&quot;: &quot;Nombre de nuits&quot;,&quot;Hotel needed&quot;: &quot;Besoin d&#39;une réservation d&#39;hôtel&quot;,&quot;Destination&quot;: &quot;Destination&quot;,&quot;Reason&quot;: &quot;Motif&quot;,&quot;d/M/yyyy&quot;: &quot;dd/MM/yyyy&quot;,&quot;Create new travel request&quot;: &quot;Créer une nouvelle demande de déplacement&quot;,&quot;My approved travel requests&quot;: &quot;Mes demandes approuvées &quot;,&quot;yes&quot;: &quot;oui&quot;,&quot;no&quot;: &quot;non&quot;  }}You can download a copy of this localization.json file for testing. for testing.In the UI Designer, import this file as an asset of the travel tool page. This will replace any existing localization.json file. Save the page.Translate contents in custom widgetsIn the custom widget editor, use the the uiTranslate filter or the ui-translate directive to indicate the content to translate.   Then add the strings to the localization.json file of each page, layout and forms using it. See Custom widgets section for more information.Translate content in fragments (Subscription editions)The strings to translate in a fragment must be added to the localization.json file of each page, layout or form using the fragment.Preview the pageNow preview the page in each language. To do this, you need to modify the language used for Bonita web applications, which you do by setting the Portal language from the Portal Settings menu.Check the translated versions of the page, and update the translated text if necessary. To update the translations, edit your localization.json file and then upload it again. Adjust the page layout if necessary to allow for language differences. Your multi-language page is now complete, ready to be included in an application and deployed.Note: Always update the localization.json file as an asset and then export your page or form from the UI Designer to make it an available resource. If you edit the localization.json file in the file system and zip the page or form from there, the updated translations will not be taken into account.DeployTo put a multi-language page into production in an application, follow the same steps as for a single-language page: upload the page to the Portal and then add it to the application. You can follow the steps for building the application from the getting started tutorial.After deployment, an application user will see the page in the language configured for their Bonita web applications. A user can set this by selecting the language in the Bonita Portal. If the selected language is not supported by the page localization.json file, the untranslated keys are displayed.Sharing translationsDepending on the applications and processes you have, there could be some strings that are common to many pages or forms. If this is the case, consider using a single localization.json for all pages. You still need to attach it as an asset to each page or form, but it could make your translation process more efficient by avoiding duplication. Alternatively, your translation management tools might provide a mechanism for sharing the translations required for various pages and forms, which would enable you to extract the keys and translations required for a page or form and construct the .json file.",
      "url": " /bonita/7.8/application-and-process-design/page-and-form-development/ui-designer/multi-language-pages",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-8-application-and-process-design-page-and-form-development-ui-designer-ui-designer-overview": {
      "title": "UI Designer overview",
      "content"     : "UI Designer overviewThe UI Designer is a graphical development environment for creating pages and forms for a Bonita application. It is a web-based tool that is launched from Bonita Studio.A page is defined in HTML extended by the AngularJS JavaScript framework. Use the UI Designer to create and update pages for business applications, forms to start process instances or execute human tasks, and application layouts that apply to all pages of an application.  Create pages directly in the Bonita UI designer.  Start form design in Bonita Studio from the appropriate contract.  Create layouts by duplicating the default layout available in the Bonita Portal resources and then updating it.You can import an existing page, form, or layout to edit, or duplicate existing ones.Page structureIntegration with Bonita PlatformUI Designer target users&#39; needed skillsUI Designer with collaborationPage structureA page (but also a form or a layout) is constructed as a vertical arrangement of rows.A row is a mechanism for aligning widgets, from top left to bottom right. When you create a new, empty, page, it contains a row. A row occupies the whole width of the page, which is considered to be 12 units. The actual width is calculated when the page is displayed. The rows are indicated by a thin pale grey rectangle on the left side of the whiteboard.To move or delete a row, position your mouse in the row, and the row toolbar is displayed.Use the controls in the toolbar to move the row up or down, or to delete it.In a row, you can add containers and widgets.Each widget accounts for an item of information to be entered or displayed in a page. To add a widget to a page, drag it from the palette on the left of the screen and drop it into the whiteboard. It must be adjacent to another widget (or to the top of the page for the first widget).You cannot leave empty space between widgets. If you try to drop a widget that is not adjacent to another, the drop will fail.When the widget is dropped, you need to specify the widget width, up to a maximum of 12 units (default value).There is a set of standard widgets. If these do not meet your needs, you can define a custom widget.There are also some structure widgets called containers, which you can use to structure a page.There are different types of containers:  The plain container is invisible to page users. It is useful during page development as a way to manipulate or configure multiple widgets or iterate over elements to display.  The tab container is used to create tabs in a region of a page. The tabs are visible to page users, who can switch between tabs by clicking the tab name.Once a container is added to the page, it contains a row. Therefore, widgets can be dropped in a container row or directly on a whiteboard row. In this example, you can see a container with four rows.The behavior of a page is determined by the widget properties. Any property you configure for a container is applied to all widgets in the container unless you override it with a widget-specific value.In the Enterprise, Performance, Efficiency, and Teamwork editions, you can also use fragments, which are groups of widgets. They allow to reuse the same group of widgets with the same behavior in several pages or forms.The UI Designer generates standard HTML application code, based on AngularJS. Export pages if you want to further customize them in your favorite web development environment. Note that once customized, you can not reimport them in the UI Designer.Integration with Bonita PlatformThe UI Designer is part of the development tools integrated in Bonita Studio. It runs in a tomcat instance managed by Bonita Studio. This tomcat instance is separated from the engine/portal tomcat instance.To use a page in a business application, export it from the Bonita UI designer, import it as a portal resource, and from the relevant application, add it to the list of pages and then insert it in a navigation menu.To use a form in a process, map it in the Bonita Studio to the relevant process or human task. It will be automatically packaged in the .bar archive ready to deploy in the Bonita Portal.In the Subscription editions, you can update a form in production, by exporting a new version of the form from the Bonita UI designer, importing it into the relevant process in the portal, and then mapping it to the relevant task or process start event.To use a layout in a business application, export it from the Bonita UI designer, import it as a Bonita Portal resource, and map it as the layout of the relevant application.UI Designer target users’ needed skillsThe UI Designer is intended for web developers creating pages and forms that will be part of a BPM application. It requires a good understanding of JavaScript and CSS.If you are a business analyst, you can use the UI Designer to create the page structure and define basic behaviors. However, most properties of a page are defined using JavaScript.UI Designer with collaborationPages which have been created with a version of bonita older than 7.7.0 have a UUID-like identifer.With version 7.7 and the improvements made for the collaboration features, the Id of created artifacts is now more human readable and understandable. This Id is now equal of the name. This change also applies to fragments in subscription editions.For pages only, if the id is already taken by another page, it is suffixed with a number (same behavior as in operating system file browsers).For example:  Create a new page named “myPageExample”.  Create another page with the name “myPageExample”.Following the second creation, when you are redirected to the editor, you can see in the URL that the id is in fact myPageExample1.However, it is a good practice to use a unique name for your page.No migration is performed for existing artifacts (pages and fragments).If you want to benefit from readable Ids for your existing artifacts, you need to rename your artifacts from the homepage or the editor. The link with the process in Bonita Studio will be kept.If your repository is under version control and you rename an artifact, you could loose the history of the artifact’s resources depending on your version control system. If you use git, “git-log –follow” allows you to keep track of moved files.",
      "url": " /bonita/7.8/application-and-process-design/page-and-form-development/ui-designer/ui-designer-overview",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-8-application-and-process-design-page-and-form-development-ui-designer-variables": {
      "title": "Variables",
      "content"     : "VariablesVariables is a key concept of the UI Designer. They define page, layout, form, and fragment behavior, they are used to fetch external resources, to manipulate and process information, and much more. It is important to understand how to define and use variables in those artifacts, and how the data contained in the variables works when combined with widget properties. Unless otherwise stated, we will use “page” as the generic for page, layout, form, and fragment.There are several types of variables:  Static  String  JSONDynamic  JavaScript Expression  External API  URL parameter  Evaluation cycleExternal APIJavaScript expressionUsing a variableIn Bonita formsEvaluation cycleString and JSON are initialization types. Variables with these types are used at page data model instantiation and their values do not change subsequently.Expression, external API and URL parameter variables are dynamic. They are evaluated every time something happens on the page, such as when receiving data or on a user interaction. The call of an External API variable is triggered every time the URL of the resource it points at changes.External APIExternal API variables are used to fetch data from outside the page. This is typically a REST API. The call to the specified URL is done using an HTTP GET request. The result is stored in the page data model. You can parameterize the URL construction with other data using `` syntax. You can retrieve information using the Bonita REST APIs.Here are some examples:  Get the id of the current user - API URL:../API/system/session/This variable is evaluated every time the value of userId changes. Also, if userId is not yet defined then the call is not triggered.  Retrieve the taskId:API URL: ../API/bpm/humanTask/Retrieve a business object associated with a process instance:API URL: ../API/bdm/businessDataReference//Retrieve business data using the reference in the context when building a form:API URL: ../  JavaScript expressionAn JavaScript expression variable is a JavaScript function. During the evaluation, the function can use the $data variable, which provides access to the page data model. For example:var result = $data.expenses * 2;return result;An expression often relies on other variables as dependencies. When one of these variables changes, the expression is reevaluated and the previous value is overwritten. For example, create a login expression variable: return $data.firstname.toLowercase() + &#39;-&#39; + $data.lastname.toLowercase(). Its dependencies are the two variables firstname and lastname. Create two input widgets “First name” and “Last name” bound the two variables, and a text widget “Login” to display the result of the expression. When the user fills out the two input fields, the expression is updated. If the login value is manually edited before the user fills out the fields, then its value is overwritten.Using a variableA variable is used with a widget. There are many ways to use a variable in widget properties:  In a property containing text or HTML to be displayed in a widget, you can use the syntax __ in the content to make it dynamic content. For example, you could display the user’s name in a welcome message.  In the case of user input (for example the Value property of a text input) the variable value is used both to set the initial value and retrieve the user input.A binding is dynamic, so every time the value of a variable changes, the whole data model is re-evaluated and the UI is updated.In Bonita formsOne of the goals of the UI Designer is to enable you to build forms for process instantiation and human tasks execution. The contract eases the decoupling between the user views and the process. When a form is submitted for process instantiation or for human task execution, the UI Designer sends data to fulfill the contract.To ease the definition of the form data to send back to the process, when you create a form from the Bonita Studio, the UI Designer generates the following variables:  formInput. It is a JSON object. Its structure is defined by the contract inputs and the attributes are initialized with default values. It could be used to set initial values for form fields. You can set the values in formInput either by editing the default values with constants (useful for test and debug) or with values from an object in an external source that has the same model (such as with a BDM external API). You can also set the initial values of a form from some other source without using formInput. However, you will then have to edit formOutput manually.  formOutput. It is a JavaScript expression returning an object. The object structure matches the contract requirements and it is filled with formInput by default. On Submit, values entered or modified by the user and aggregated in the formOutput object (as defined by the Data sent on click property of the Submit button) are submitted to the process or task to fulfill the contract.  taskId. It is the id of the current BPM task. You can use it as a BPM API parameter.  context. It is an External API that provides references to all business variables and documents in the process instance. To retrieve a business variable instance, create an External API variable with value ../.",
      "url": " /bonita/7.8/application-and-process-design/page-and-form-development/ui-designer/variables",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-8-application-and-process-design-page-and-form-development-ui-designer-widget-properties": {
      "title": "Widget properties",
      "content"     : "Widget propertiesA page is constructed from widgets. The behavior of a widget is determined by the its properties. Any property you configure for a container is applied to all widgets in the container unless you override it with a widget-specific value.Specifying a widget propertyConstantDynamic - ![Expression icon](images/images-6_0/UID-property-bond-expression.svg)Bidirectional bond - ![Dynamic icon](images/images-6_0/UID-property-bond-chain.png)Interpolation - ![interpolation icon](images/images-6_0/UID-property-bond-interpolation.png)General widget propertiesWidthCSS classesHiddenMigrate a page from 7.0.0 and 7.0.1Specifying a widget propertyTo specify the properties of a widget, select the widget and go to the properties panel on the right of the whiteboard. A property value can be constant, dynamic, a bidirectional bond, or an interpolation.Note: In versions 7.0 and 7.0.1, a property value was specified as either a constant or an expression, but all values were in fact treated as dynamic.ConstantA property that requires a constant value is presented in the Properties panel as a radio button set, drop-down list, or number selector (for the Width property). Select the required value.Dynamic - Use a dynamic value field to specify a constant (the default) or an expression. Click the expression icon fx to switch from constant to expression. Click the constant icon X to switch from expression to constant. An expression can include a variable to make the property value dynamic, or can simply be the name of a variable. You can apply a filter to a variable value using a pipe. The binding to thevariable is a read. If you want to write to the variable, use a bidirectional bond.Examples:  Define a condition for widget visibility, userAge &amp;gt; 18  Define table headers as the value of a variable: myArrayVariable  Apply a filter to the value of a variable: _selectedUser  json_Bidirectional bond - Use a bidirectional field to specify a read-write binding between the property value and a variable.Interpolation - Use an interpolation field to enter text to display in the widget. The text can include variables that are interpreted using AngularJS interpolation. When the page is displayed, the variables are replaced by the interpolated values. Specify a variable as a simple expression enclosed in double braces, using the same format as for a dynamic value field.Example: I’m sorry, __. I’m afraid I can’t do that.General widget propertiesSome general properties are common to all widgets except containers.WidthSpecify the width of the widget relative to the container it is in, or to the page if it is not in a container. A widget can occupy one to 12 units. The actual widget widths are proportional, automatically adjusted for the device display.In the Enterprise, Performance and Efficiency editions, you can set a different value for the width property for each device type. Select the target device type in the top bar, then set the value of the Width property.Example: A form has three fields, First name, Last name, and Membership number. On a mobile device, you want the fields to occupy the maxiumum width of the screen, each one of a separate line. On a tablet device, you want the first name and last name to be on the same line but the membership number to be on the line below. For laptop and desktop devices, you want all three fields to be in the same line. Set the width properties as follows:   Mobile  Tablet  Laptop  Desktop  First name  12  6  4  4  Last name  12  6  4  4  Membership number  12  12  4  4  When you preview the form for each of the device types, you see the following:CSS classesFor each widget, you can associate one or more CSS classes (use a space-separated list for multiple classes). By default, the Bootstrap CSS library is available so you can add any CSS class that it contains.HiddenThis property controls whether the widget is hidden. Bind this property to a variable. The value of the variable determines whether or not the widget is displayed. You can use this to control conditional display, for example when a widget becomes visible when the user enters a certain value in a form.Migrate a page from 7.0.0 and 7.0.1In Bonita 7.0, property values were all dynamic. Pages and forms that were created with 7.0 and are already deployed will continue to work with 7.1. You should note that when you import a 7.0.0 or 7.0.1 page or form into 7.0.x later versions or the 7.1 Bonita Studio or UI designer, widgets properties stay dynamic.",
      "url": " /bonita/7.8/application-and-process-design/page-and-form-development/ui-designer/widget-properties",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-8-application-and-process-design-page-and-form-development-ui-designer-widget-use-examples-repeat-a-container-for-a-collection-of-data": {
      "title": "Repeat a container for a collection of data",
      "content"     : "Repeat a container for a collection of dataOverviewSimple collectionModifiable simple collectionStructured collectionNested collectionsOverviewThe content of a container can be included multiple times in a page, once for each element in a collection of data. The content is repeated as many times as necessary to display all the data in the collection.A collection is an array of data referenced by a variable. The UI Designer provides some built-in variables that you can use to specify the collection or an element within it:  $index: the index of the current iteration of the collection (counting from zero)  $item: the element of the current iteration  $collection: the current collection (not available in releases earlier than 7.1.3)The rest of this page contains some examples of how to repeat the content of a container over a collection.Follow the examples in sequence, because each one builds on the previous example.Simple collectionThis section explains how display the elements from a simple collection in a repeatable container.In this example, the collection of data is a list of fruits. You want to display this list in a table and enables users to modify the name of a fruit. To create the table in a page:  In a UI designer page, create a variable to specify the collection, which must be an array. In a typical application, a collection is defined by a JavaScript or External API variable, but for easy page development, you can use a fixed JSON array. For this example, create a JSON variable called fruits containing [&quot;banana&quot;,&quot;apple&quot;,&quot;pineapple&quot;,&quot;cherry&quot;].  Add a container widget to your page and bind the variable fruits to the Repeat contents property.  In the container, add an input widget with the following properties:  Bind the Value property to $item.  Set the Label property to Fruit type.  Set the Label position property to Left.Check the Preview, which should look something like this:A user can modify the name of a fruit by typing in the input field.Modifiable simple collectionThis section shows how to update the container that you defined in the previous section, to enable the user to add an element to a collection or to remove an element. Adding an element adds a repeat of the container content. Removing an element removes the repeat.  In the page, add a button widget above the container (not in the container) with the following properties:  Label: Add a fruit  Alignment: right  Style: success  Action: Add to collection  Collection: fruits  Add: Last, to add the new item at the end of the collection  Value to add: leave this empty because there is no specific structure to addIn the container, add a button widget on the same line as the input widget labelled Fruit type, with the following properties:  Label: Remove this fruit  Alignment: right  Style: danger  Action: Remove from collection  Collection: $collection, to point to the current collection, fruits  Remove: Item, to remove the current item related to this line  Item to remove: $item, to reference the current elementCheck the Preview, which should look something like this:A user can now add a new fruit or remove a fruit, dynamically changing the collection.Structured collectionThis section explains how to update the container to display a structured collection using repeated content. The previous examples used a simple array of names of fruits, where each item was a primitive String type. This example uses a more complex array with a list of producing countries nested within each item in the list of fruits. It has the following structure:{   &quot;fruit&quot;:&quot;fruit name&quot;,   &quot;producingCountries&quot;: [&quot;country1&quot;,&quot;country2&quot;] }  Create a new variable, fruitsProducingCountries, with the following value:[ {   &quot;fruit&quot;:&quot;banana&quot;,   &quot;producingCountries&quot;: [&quot;India&quot;,&quot;China&quot;] }, {   &quot;fruit&quot;:&quot;apple&quot;,   &quot;producingCountries&quot;: [&quot;China&quot;,&quot;USA&quot;] }]Select the container and change the Repeat contents property so that it binds to fruitsProducingCountries instead of fruits.  Select the input widget that displays the fruit and change the Value property to bind to $item.fruit.  Select the Add fruit button and change the Collection property to bind to fruitsProducingCountries.  Check the Preview. You see the same result as in the previous example. The country information is present in the data collection but is not displayed. You can still change the name of a fruit, and add or remove an entry.Nested collectionsThis section explains how to update the container configuration to handle a structured collection that includes nested structures, to enable a user to add or remove elements at any level of the collection. The updated page displays the producing countries for each fruit. A user can rename, add, or remove a fruit, and add or remove a producing country for a fruit.  Add a button widget in the existing container, below the row that contains the Fruit type input widget and the Remove this fruit button. Configure the button widget properties as follows:  Label: Add producing country  Alignment: left  Style: success  Action: Add to collection  Collection: $item.producingCountries, to specify the element of the data structure to which the element is added  Add: Last, to add the new item is added at the end of the collection  Value to add: leave this empty because there is no specific structure to addAdd a new container widget inside the existing container below the Add producing country button.  To repeat the content of this new container for the collection of producing countries associated with each fruit type, bind the Repeat contents property of this container to $item.producingCountries.  Add an input widget in the new container to display the producing countries. Set the widget properties as follows:  Label: Producing country  Label position: left  Value: bind to $item, to specify the current item within the collection producingCountries.To enable the user to remove a producing country item, add a button widget in the container in the same row as the Producing country input widget. Configure the button widget properties as follows:  Label: Remove this producing country  Alignment: righ  Style: danger  Action: Remove from collection  Collection: $collection, to specify the current collection, producingCountries. (You could also specify the collection explicitly as fruitsProducingCountries.producingCountries, but for better maintainability this is not recommended because if you specify the collection explicitly and subsequently change the collection name or the parent collection name, you need to remember to update this property setting)  Remove: Item, to remove the current item related to this line  Item to remove: $item, to specify the current elementCheck the Preview, which should look something like this:You can rename, add, and remove fruits, and add or remove countries, dynamically changing the structure of your collection.",
      "url": " /bonita/7.8/application-and-process-design/page-and-form-development/ui-designer/widget-use-examples/repeat-a-container-for-a-collection-of-data",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer, Widget use examples"
    }
    ,
  

    "bonita-7-8-application-and-process-design-page-and-form-development-ui-designer-widgets": {
      "title": "Widgets",
      "content"     : "WidgetsThe UI Designer is a tool for creating pages and forms to use in a BPM application. A form is mapped to process instantiation or to a human task and must fulfill a contract. To gather the inputs that will be sent to the contract, it embeds input fields and a submit button. A page is not mapped to any part of a process, it displays business information and gives access to forms or action buttons that send information to the process. Besides this, there is no difference between a page and a form, so the procedure for designing them is the same. This documentation uses the term page for both pages and forms, unless otherwise stated.Page structureContainersAdding a widget to a rowAdding a rowRepeat contentSave as fragmentTab container widgetForm container widgetInput widgetsPlain input widgetText area and rich text area widgetsAutocomplete widgetSelect widgetCheckbox widgetChecklist widgetRadio buttons widgetDate picker widgetDate time picker widgetFile upload widgetButton widgetSave button widget (Subscription editions)Display widgetsTable widgetData table widget (Subscription editions)Image widgetChart widget (Subscription editions)File viewer widget (Subscription editions)Rich Text Area widget (Subscription editions)Page structureA page consists of widgets that are arranged in rows, and optionally, containers. The UI Designer provides a set of default widgets that you can use to design a page. The default widgets are available from the palette panel, which is on the left side of the Page editor. A widget has properties that control how it appears and how it is used. There are some general properties that all widgets have, and some properties that are specific to the widget type. You can also create custom widgets.Each widget in the palette has a description. To show a widget description, just roll over the widget in the palette.ContainersA container is a widget that contains other widgets. You can create nested containers. A typical use for containers is to control the main layout of your page. For example, if you want to create a two-column layout, you will start your page by adding two containers on the same row, each one spanning six columns of the page. A page does not need to have a container, but it is useful.By default, a container contains one row, where you can drop component widgets or containers. You can also make the page layout dynamic by repeating a container to display a collection of data.Adding a widget to a rowIf the row has some space at the end, the widget will fill the remaining empty space in the row. If the row has no empty space, the dropped component will be automatically resized to fit a row width.Adding a rowAccording your needs, a container can have any number of rows.To add a widget in a new row, a container has two dropzones where you can drop a widget from the palette. These dropzones are located at the top of the container and at the bottom of the container. When your mouse hovers the upper or lower border of a widget in a row, the dropzone becomes visible, as shown in these examples:Example 1: add a title widget in a new row above a paragraph widget:Example 2: add a paragraph widget in a new row below a title widget:When you drop a widget in one of these two zones, a new row is automatically created.Repeat contentA container can repeat the content dynamically. This is useful if you need to repeat a set of components for each element in a data collection. Bind the Repeat content property to an array variable. To specify the current element of the collection, use $item.This is useful if you want to display some property of the current element.Save as fragmentIf you are using the Enterprise, Performance, Efficiency, or Teamwork edition, you can save any container as a fragment. This enables you to reuse the set of widgets in other pages.Tab container widgetUse the tab container to structure a page using tabs. To edit a tab name, select the corresponding tab to display its properties.Each tab is a container widget.Form container widgetUse the form container to enable form validation for input widgets. The form container also exposes a local $form which is the AngularJS form object associated to the form container. In the Bonita Studio, if you define a contract for the task or process and click on the UI Designer icon, the generated form already contains a form container to embed default input widgets to collect the information that need to be passed to the contract to be verified. You can then define the validation you need on the input.For example, you can bind the button’s disabled property to $form.$invalid to prevent user from clicking the button, until the form inputs are valid.Input widgetsUse an input widget to enable a user to provide input. In addition to the general widget properties, all input widgets have the following:  A Required property which prevents button from being clicked when put inside a form container  A Read-only/disabled property which prevents the user from modifying the value  A Label (which can be hidden)  A property to specify whether input is mandatory  A Value property that is used to capture the value entered by the user.The sections below describe the available input widgets.Plain input widgetUse the input widget on a form or page. There are four types of input:  text: a free-form text field  email: an email address  number: a decimal or integer number  password: like text but each character is replaced by an asterisk.Text area and rich text area widgetsUse the text area input widgets on a form or page to collect large text.The rich text area allows the user to format and style their input, add images, links, and so on.You can customize the toolbar for the end-users by selecting options among the available values of the toolbar properties.Autocomplete widgetUse an autocomplete widget to offer the user a list of possible values based on data entered in the field. For example, in a firstName field, if the user types chri, the values chris, christine, christian, christiane are proposed. The user selects the correct value. To define the available values, bind a data source to initialize the suggestions. For suggestions that are an array of objects, you can specify a displayed key to identify the attribute to show as a suggestion in the widget. The value must be bound to a variable that will hold the selected suggestion.Select widgetUse a select widget to offer the user a drop-down list of values. The user selects the required value.The available values property is used to populate the list of available values. Alternatively for simple data, you can provide a comma-separated list of values (for example, red, green, blue).You can also use data binding and specify a variable to populate the list of available values. In this case, specify a label key, which identifies the attribute to be displayed in the widget.Checkbox widgetUse a checkbox widget to create a unique checkbox. The value property will be true or false, depending on the checked value of the checkbox.Checklist widgetUse a checklist widget to create a set of checkboxes for the available values, from which the users picks any number of values. To define the available values, you can provide a comma-separated list for simple values (for example: red, green, blue), or bind to a variable that holds an array of values.If the values are JavaScript objects, you can also specify a displayed key that identifies the attribute to be used to label the checkboxes and a returned key so selected value will return only a specific key rather that the whole corresponding object.The selected values are captured through the Selected values property.Warning: Do not bind the Selected values property to a specific item from the available values collection because selected values will be updated each time you modify a checkbox. Do not bind the Selected values to the Available values collection, because this could lead to unexpected behaviors.Radio buttons widgetUse a radio button widget to create a set of radio buttons for the available values, from which the user picks one value. To define the available values, you can provide a comma-separated list for simple values (for example: red, green, blue), or bind to a variable that holds an array of values.If the values are JavaScript objects, you can also specify a displayed key that identifies the attribute to be used to label the radio buttons and a returned key so selected value will return only a specific key rather that the whole corresponding object.The selected value should be bound to a variable that will hold the data for the chosen radio button.Date picker widgetUse a Date picker widget to display a calendar from which the user can select a date or set a date manually (e.g., a date of birth).To select a date and a time (e.g., to schedule a meeting), use the Date time picker widget instead.The Date picker widget supports the following types for its Value property as input:  ISO 8601 String variables (with or without time information)  Date objects  Long number values (Milliseconds since epoch)However, the output of the widget is always a Javascript Date object. So it will change the type of the variable bound to the widget Value to a Date object when the user selects a date. This is required in order to ensure backward compatibility for pages designed with older UI Designer versions.  When sent in the JSON body of a request, the Date object is serialized into an ISO 8601 formatted String variable with the time set to midnight UTC (e.g., 2016-12-31T00:00:00.000Z).You can configure the displayed date format using a pattern, using yyyy for year, MM for Month, dd for day.Use the Today button to select automatically and quickly the current day.For more information about supported formats, read the Angular documentation for date filter.For a detailed example using the Date picker widget, you can consult the following Howto: Manage dates and times in BDM and User Interfaces.In the Subscription Edition,  the calendar can be localized with the usual localization mechanism (localization.json file).Date time picker widgetUse a Date time picker widget to display a calendar from which the user can select a date and a time or set them manually (e.g., to schedule a meeting).To select only a date (e.g., a date of birth), use the Date picker widget instead.Date and time can reflect the user time zone (e.g., a meeting day and time) or be absolute, identical everywhere (e.g., opening hours of a store somewhere). This is controlled by the property Handle time zone.The input/output of the widget (its Value) is an ISO 8601 formatted String variable (e.g., “2016-12-31T16:30:00.000Z”).You can configure the displayed date format using a pattern, using yyyy for year, MM for Month, dd for day, HH or h for hours, mm for minutes, ss for seconds.Use the Today and Now buttons to select automatically and quickly the current day and time.For more information about supported formats, read the Angular documentation for date filter.For a detailed example using the Date time picker widget, you can consult the following Howto: Manage dates and times in BDM and User Interfaces.In the Subscription Edition,  the calendar can be localized with the usual localization mechanism (localization.json file).File upload widgetUse an upload widget to perform a file upload (POST) on the specified URL. Data returned by the server is stored in the value property.Button widgetUse a button widget to enable to user to trigger an action. The button can perform a PUT, POST, GET (from 7.1.3), or DELETE (from 7.1.3) request and send data to a given URL.You can use a variable to hold the resulting data after success or failure.For pages that are displayed in a task or process context, the button widget can be used to submit a form, completing the human task or starting a process instance. For form submission, you need to define only the data to send. The URL is extracted from the context.Finally, you can use the widget button to add or remove a data from a given collection.When inside a form container, the button is automatically disabled while the form is invalid.Save button widget (Subscription editions)Use the Save button widget to store data in the browser LocalStorage.For instance, to let users save the draft of the current form, bind the formInput variable of your form to the value property.A single entry will be created in the LocalStorage identified by the form URL.Whenever this form is reloaded, either by hitting F5 or browsing away and back again, the entry will be reloaded automatically from LocalStorage.Note: The LocalStorage entry will automatically be deleted when the form is finally submitted.Display widgetsUse a display widget for information that the user can read on a page. This includes titles, paragraphs, and text. For each, you can specify the text and its alignment. There are several types of display widgets:  File viewer, to display a preview of files, either Bonita documents, or external documents. Users can also download the file thanks to this widget.  Link, to embed an HTML link for navigation to an external site.  Title, for headings. You can set the level from 1 to 6.  Text, for chunks of text. Text supports basic HTML tags such a paragraph, list or image…Table widgetUse a table widget to display data in a table. In order to display the data, first define the headers property with a comma-separated list of column headings.Then bind the content to an array of JavaScript objects.Finally, provide a comma-separated list for the columns keys indicating the attribute to display in each column.To get the data from a selected row, bind selected row to a variable.Note: table widget only supports text values. HTML content passed in table data will not be rendered.Data table widget (Subscription editions)An extended table widget that provides column sorting, filtering, and paging in addition to the standard table widget facilities.Set the Data source to Bonita API to populate the data table with records from a Bonita REST API. Then enter a REST API URL in the URL property. Use the API request parameters property to pass additional parameters to the request.Supported parameters are described in the REST API Overview and in the REST API documentation for the relevant resource.You do not need to specify paging parameters (such as ?p=0&amp;amp;c=10), because the data table handles paging automatically when you use a Bonita API data source.The value of the Page size property controls how many rows are displayed in a table view, and automatically adds buttons to show subsequent pages of the table.Alternatively, you can set the Data source to Variable and use a variable definition to point ot the table content. Note that if you use a Variable datasource and an External API variable, the paging of the table content is not handled automatically.SortThe Sortable columns property enables to list the columns which allow a sorted search.Each element of this property has to match an element of the Columns key property to figure out which table column can be sorted upon.When a data table is displayed (including in the Preview), the user can click on a column heading to reorder the table rows by this column.Some fields do not support sorting but still display the sort button which is a known limitation. The ordering applies to the visible rows in the table, not to the entire table.The sort is backend when datasource is Bonita API. It is frontend, otherwise.Note: BDM APIs are not yet sortable. For other APIs, test in the preview or refer to the BonitaBPM documentation ‘REST API’ pages.FilterYou can provide a filter for users to update the displayed table to show only the rows that match the filter. To do this:  Add a widget to the page where the user will specify the filter. This can be an Input widget for free-form text, or a Select widget to choose from a preset list.  Create a filter variable in the variable panel. If you are using an Input widget, this variable has no value.  Bind the filter variable to the widget.  Bind the filter variable to the Data table widget Filter property.When the table is displayed, each time the user updates the filter, the table display is updated accordingly. The filter is applied to the table rows that are currently displayed.Note: it is only possible to filter on attributes that are searchable in the REST resource definition. To search on an attribute of a business object, make sure that the BDM contains the necessary queries.Image widgetUse an image widget to display an image. The image widget is able to display images from local assets or an image from a URL:  To use an image asset in the image widget, set the Source type property to Asset, and then enter the image name in the Asset name input field.  To use an online image in the image widget, set the Source type property to URL, and then enter the image URL in the URL input field.Note: Applies from 7.0.2Chart widget (Subscription editions)Use the chart widget to create a graphical display of data to ease understanding. This widget is based on angular-chart-0.8.1, which is based on Chart.js.For information, see the Angular chart documentation or Chart.js documentation.The widget can display several styles of chart:  For a single set of data points:  Bar  Line  RadarFor one or more sets of data points:  Pie  Doughnut  Polar area  Provide each set of data for display in a JSON array, containing numeicral values.You can enter a single array directly in the Value property, or bind it to any variable that provides an array.For a multiple set chart, bind it to any variable that provides an array of arrays, all sets having have the same length.The list of values in the Labels property must be have same length as an associated set.Charts can be customized more deeply using the Advanced options property. To specify advanced options, bind this property to a JSON variable that specifies the options.Options are specific to each chart type and are listed in the Chart.js documentation in the Chart options section for each chart style (for example, there are spacing options for bar charts).File viewer widget (Subscription editions)Use the file viewer widget to preview or download a file or a process document in any UI Designer artifact (page or form for instance). You can display a document in a modal dialog box or directly in a page.The previewable documents are limited to documents supported by the end user browser (by default pdf and images on usual browsers). Documents that are not previewable are prompted to be downloaded.Rich Text Area widget (Subscription editions)Use the rich text area widget to edit HTML formatted text in any UI Designer artifact (page or form for instance).You can add rich text area inputs for end users to create text to be exported in HTML format for integration on emails, etc.It can be prefilled with an HTML template.A options toolbar exposed to end users can be customized and localized with the usual localization mechanism (localization.json file).",
      "url": " /bonita/7.8/application-and-process-design/page-and-form-development/ui-designer/widgets",
      "author": "",
      "categories": "Application and Process Design, Page and form development, UI Designer"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-configuration-configuring-a-process": {
      "title": "Configure a process",
      "content"     : "Configure a processTo configure a process in Bonita Studio, open the process diagram, select the pool, and click Configure in the Cool bar.If you are using a Enterprise, Performance, Efficiency, or Teamwork edition of Bonita, you can configure a process for an environment: with the process diagram open and the pool selected, choose an environment fromthe Configuration menu in the Cool bar.The configuration wizard indicates the items that need to be configured, with a reminder in the wizard title bar for each category. Check the Display advanced configuration box to see all the items that need to be configured. Follow the instructions in the configuration wizard to complete the configuration.The following items can be configured:  Actor mapping  Connectors  Parameters  Actor filters  Process dependencies  Application dependencies  Run userAfter deployment, depending on the Bonita edition that you are using, you can update the process configuration in production for some aspects of the process.",
      "url": " /bonita/7.8/application-and-process-design/process-configuration/configuring-a-process",
      "author": "",
      "categories": "Application and Process Design, Process configuration"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-configuration-environments": {
      "title": "Environments",
      "content"     : "EnvironmentsNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.An environment is a set of configuration definitions for a project. You can configure a process for several environments. In this way, one process can run in several environments without any modification, because the information that is specific to an environment is set at configuration. In the Enterprise, Performance, Efficiency, and Teamwork editions, Bonita Studio proposes three environments, Local,  Production, and Qualification. You can also define custom environments.You can configure, run, and debug a process in a specific environment.The default environment is the one most recently selected in the Configure, Run, or Debug menus in the Cool bar.Define a custom environmentConfigure a process in an environmentRun a process in an environmentDebug a process in an environmentDefine a custom environmentTo define a custom environment for a process, open the process in Bonita Studio Enterprise, Performance, Efficiency, or Teamwork edition and select the pool. Then choose New environment… from the Configure, Run, or Debug menu in the Cool bar, enter a name for the new environment, and click OK. The new environment will appear in the  Configure, Run, and Debug menus in the Cool bar.Configure a process in an environmentTo configure a process for an environment, select the environment from the Configure menu in the Cool bar. Then use the configuration wizard to configure the process.Run a process in an environmentTo run a process from Bonita Studio in an environment, select the environment from the Run menu in the Cool bar. The process will be launched using the information configured for the specified environment.Debug a process in an environmentUse Debug in Bonita Studio to disconnect any connectors that you know cannot run successfully when you run the process in development or test mode. To debug a process from Bonita Studio in an environment, select the environment from the Debug menu in the Cool bar. Specify the connectors to be skipped, then click Debug. The process will be launched using the information configured for the specified environment but the specified connectors will be ignored.",
      "url": " /bonita/7.8/application-and-process-design/process-configuration/environments",
      "author": "",
      "categories": "Application and Process Design, Process configuration"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-configuration-manage-jar-files": {
      "title": "Manage JAR files",
      "content"     : "Manage JAR filesA JAR file is an archive container for Java code. Process and application dependencies are managed by managing the JAR files that contain the required code.For example, if your process uses a connector, the relevant JAR file must be referenced when you configure the process.The configuration dialog shows the JAR files that are known to Bonita Studio. To add a JAR file, choose Manage jars… from the Development menu.The popup shows the JARs that are known. To add a JAR, click Import and browse to the file to be imported. After the JAR file is imported, it can be used in a process.You can also access the Manage jars… dialog from the process configuration wizard.Duplicate libraries There is a problem at integration if you have several elements in your platform that use certain libraries that cannot be included in more than one classloader.Typically, this occurs when a process contains data of type Java or multiple connectors (notably with the Webservice, Alfresco, and CMIS connectors).For example, the Stax libraries, which are used in the Webservice and Alfresco connectors and for Java data cannot be loaded in more than one classloader.This problem is indicated by the following exceptions:  A ClassCastException for com.ctc.wstx.stax.WstxInputFactory or com.ctc.wstx.stax.WstxOutputFactory  A null pointer exception in BaseRequestEntity  java.lang.LinkageError loader constraint violation: when resolving overridden method org.apache.cxf.jaxb.attachment.JAXBAttachmentMarshaller.addMtomAttachment(Ljavax/activation/DataHandler;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; the class loader (instance of org/bonitasoft/engine/classloader/BonitaClassLoader) of the current class, org/apache/cxf/jaxb/attachment/JAXBAttachmentMarshaller, and its superclass loader (instance of &amp;lt;bootloader&amp;gt;), have different Class objects for the type shaller.addMtomAttachment(Ljavax/activation/DataHandler;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; used in the signature.We are aware of issues with the following JAR files (-n is a version number):  jsr181-api-n.MR1.jar (for the Webservice connector, 6.3.3 and earlier) – this is embedded in Java (since version 6) so should be removed from the dependencies of the connector  xercesImpl-n.jar (for the Alfresco connector, 6.3.3 and earlier) – this is embedded in Java (since version 6) so should be removed from the dependencies of the connector  wstx-asl-n.jar (for the Alfresco connector) – this should be placed in a shared library  geronimo-stax-api_1.0_spec-n.jar (for the Alfresco connector) – this should be placed in a shared library  geronimo-javamail_1.4_spec-n.jar (for the Alfresco and CMIS connectors) – this should be placed in a shared library  geronimo-activation_1.0.2_spec-n.jar (for the Alfresco connector) – this should be placed in a shared library  stax2-api-n.jar (for the CMIS connector) – this should be placed in a shared libraryTo avoid problems with duplicate libraries, you should always check before you build the bar file for deployment that no modules are duplicated.Click Configuration in the Cool bar, and check in the Process dependencies and Application dependencies that there are no duplicate .jar files.If you build a bar file for deployment that contains several processes, you need to check there is no duplication between processes.",
      "url": " /bonita/7.8/application-and-process-design/process-configuration/manage-jar-files",
      "author": "",
      "categories": "Application and Process Design, Process configuration"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-configuration-managing-dependencies": {
      "title": "Manage dependencies",
      "content"     : "Manage dependenciesA dependency is an external code module, not provided in Bonita, that is used by a process. This page explains how to manage dependencies usingBonita Studio, so that when you build a process for deployment, all the dependencies are met.Dependencies are primarily managed through the Development menu of Bonita Studio. This makes the external module available for all processes.You can also import a dependency when you configure a process, but in this case, it is only available for the process you are configuring.From the Development menu, you can manage:  Connectors  Actor filters  Data types  Business data model  Validators  Scripts  Other jar filesTo specify the dependencies for a process, click Configure in the coolbar. You can then define Process dependencies and Application dependencies.  Process dependencies are modules required by the process when it runs. These are specified in Studio and are managed by the Engine.  Application dependencies are modules required by clients of the engine, including forms.If forms (or any client) manipulate objects programmatically, the dependencies must be in the client’s classpath.The classpath is initialized with the application dependencies specified in the Studio. The most common use case for application dependencies is custom datatypes.Note that certain libraries cannot be included in more than one classpath. To avoid this problem, we recommend that you always check for duplicate libraries when you configure a process.",
      "url": " /bonita/7.8/application-and-process-design/process-configuration/managing-dependencies",
      "author": "",
      "categories": "Application and Process Design, Process configuration"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-configuration-process-configuration-overview": {
      "title": "Process configuration overview",
      "content"     : "Process configuration overviewThere are two reasons for configuring a process:  Configuring a process for testing  Configuring a process before deploymentBefore you can run a process from Bonita Studio for testing, you must configure it. The configuration is partly set implicitly by the Deployment and Web preferences set as Bonita Studio preferences and is partly set explicitly by configuring the process using the configuration wizard.Before you export a process for deployment, you need to set the initial configuration using the configuration wizard. This configuration is exported with the process if you check the Configuration option in the export dialog when you build a .bar archive. If you are using the Enterprise or the Performance edition, you can update the configuration after deployment. For other editions, you can modify the actor mapping only.",
      "url": " /bonita/7.8/application-and-process-design/process-configuration/process-configuration-overview",
      "author": "",
      "categories": "Application and Process Design, Process configuration"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-modeling-actor-filtering": {
      "title": "Actor filters",
      "content"     : "Actor filtersAn actor filter refines the list of users who can perform a task, by filtering the list of users mapped to the actor.The following standard actor filters are provided:  Single user assigns the task to the specified user.  Task performer assigns the task to the user who performed the specified previous human task (in earlier versions with was known as actor continuity).  Initiator assigns the task to the user who initiated the process.  Initiator manager assigns the task to the manager of the user who initiated the process.  User manager assigns the task to the manager of the user who would be assigned to the task if the filter were not present.  Users with Custom information is a new actor filter used to assign tasks to users based on custom information (available from 6.3.2).You can create additional actor filters to meet the needs of your process. An actor filter consists of a definition and an implementation. This means that you can modify the definition and implementation independently. For example, if you update the implementation to improve performance, there is no need to modify the definition.An actor filter definition defines the properties of the actor filter and defines the wizard that used to configure the actor filter when it is used in a process. An actor filter implementation consists of a set of properties and a Java class. Bonita Studio provides the following options from the Development menu for managing actor filters:  New definition… Create a new actor filter definition, specifying the properties, the input required by the actor filter, the dialog in the configuration wizard, and the languages supported in the wizard.  Edit definition… Modify the definition of an actor filter. You cannot modify the definition of a standard actor filter.  New implementation… Create the implementation of an actor filter by specifying the properties including the Java class name and package. The wizard automatically creates a stub of the Java code, with comments indicating where you need to supply code. You can create a new implementation for a standard actor filter.  Edit implementation… Modify the implementation of an actor filter. You cannot modify the implementation of a standard actor filter; however, you can create a new implementation.  Export… Export the actor filter files in a zip.  Import… Import a zip containing the actor filter files.You can also create additional actor filters by creating the necessary files directly, as described in Creating an actor filter.For details of how to apply an actor filter to a task or lane, see Actors.When you add an actor filter to a process, Bonita Studio automatically adds an implementation snapshot jar file for the actor filter to your workspace. For example, if you add the single user actor filter, the file bonita-userfilter-single-user-impl-x.y.z-SNAPSHOT.jar is added to your workspace, where x.y.z is the version of the implementation jar file.",
      "url": " /bonita/7.8/application-and-process-design/process-modeling/actor-filtering",
      "author": "",
      "categories": "Application and Process Design, Process modeling"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-modeling-actors": {
      "title": "Actors",
      "content"     : "ActorsThere are two stages to specify who performs a step in a process:  When the process is designed, the business analyst designates an actor for the step. An actor is a placeholder that defines the theoretical user who will perform the step.  Before a process is deployed, the actors are mapped to the real users in an organization.Define an actorAllowing anonymous users (6.x forms)Set the initiatorUse an actor filterMap an actorUpdate task assignment dynamicallyExport or import actor mappingDefine an actorWhen you define a process, you define who will carry out a step in the process by specifying an actor. For example, if a step can be done by any member of the HR team, you could call the actor hr, or if a step can only be done by the sales team manager in Europe, youcould call the actor sales_mgr_europe.Typically, an actor is defined for each step in a process, but you can also specify an actor for all steps in a pool or lane. You canalso use an actor filter to specify the logical relationships between actors. For example, in a process to request vacation days, the request step can be carried out by any user, but the approval step must be carried out by the manager of the requesting user.You can define an actor at pool, lane, or step, and the definitions are related. You must define actors in the order pool, lane, step.To define actors for a process:  Define the actors for the pool:  Select the  pool and go to the Details panel, General tab, Actors pane. If you have already defined any actors, they are shown in the table.  Click Add. A new row is added to the table, with a temporary name for the new actor (for example, Actor1). To change thename, select it and type the name you want to use. You can also add a description.  Repeat step 2 to add all the actors required for the process. You can also remove an actor, by selecting it and clicking Remove.  Select the actor that will be the initiator of the process cases, and click Set as initiator. If you do not define an initiator for the pool, the process cannot be started in Bonita Portal. Instead, it will have to be started programmatically.For each lane, define the actor. You can either select an actor that was defined for the pool, by selecting the actor from the drop-down list, or you can use an actor filter.  For each step, define the actor. You can use the actor defined for the lane, or specify an actor for the step. To specify an actor for the step, you can either select an actor that was defined for the pool, by selecting the actor from the drop-down list, or you can use an actor filter.See Custom User Information in Bonita StudioSee Custom User Information in Bonita PortalAllowing anonymous users (6.x forms)If you use 6.x forms, you can configure a process to be started by an anonymous user. For example, on an e-commerce site,a new user can browse stock and save items to a cart, then register with the site if they want to savetheir cart for later or to buy something. This is known as supporting anonymous users. Anonymous users are always process initiators.To support anonymous users in a process report to the 6.x documentation page.Set the initiatorThe initiator is the user who starts a process instance. For a process that is started by a person, you must specify at least one actor to be the initiator. Any user who maps to this actor can then start a process instance. If a process is started automatically (for example on a schedule), it is not necessary to designate an initiator.Use an actor filterTo specify an actor filter, click Set…, choose one of the predefined actor filters from the list, and follow the instructions in the wizard to configure the actor selector.To change the configuration of an actor filter, select the actor filter, click Edit… and modify the information using the wizard.To delete an actor filter, select the actor filter and click the Erase icon. Note that this does not remove the actor filter from the list of predefined actor filters, just from the process definition.For information about creating a new actor filter, see Creating an actor filter.Map an actorBefore a process can be tested, you must map the actors in the process to users in the organization. Before you can do this, you mustdefine your organization Bonita Studio and upload it to Bonita Portal.To map the process actors:  Open the process diagram in Bonita Studio, and click Configure in the cool bar. The actor mapping dialog is displayed, andindicates any actors in the process that are not yet mapped.  For each unmapped actor, click the actor name to select it. You can then map it to a group, role, membership (that is, a role within a group), or specific user.When you deploy a process, if you have the same organization definition in Bonita Studio and Bonita Portal, you can map the actors first in Bonita Studio then include the mappings when you build the process for deployment. Otherwise, you can configure the actor mappings in Bonita Portal after the process is deployed, when you resolve the process.Update task assignment dynamicallyThe Bonita Engine API contains a method to re-evaluate the assignment of a task by reapplying the actor mapping any actor filters. This means that if there are changes in your organization, you can update any active process instances to assign tasks to the correct people. This is known as dynamic task assignment.Export or import actor mappingWhen you have mapped the actors for a process, you can export the mapping as a file. The exported file is in XML. To export the mapping as a file, open the process diagram in Bonita Studio, click Configure in the cool bar, and select Actor mapping. The actor mapping dialog is displayed. Click Export actor mapping as file… and specify the name and location of the file to becreated.You can also import an actor mapping file that was exported from Bonita Studio. To import a mapping file, open the process diagramin Bonita Studio, click Configure in the cool bar, and select Actor mapping. The actor mapping dialog is displayed. Click Import actor mapping file… and specify the name and location of the file to be imported. Warning: When the actor mapping information is imported, it overrides the existing mappings defined for the process.",
      "url": " /bonita/7.8/application-and-process-design/process-modeling/actors",
      "author": "",
      "categories": "Application and Process Design, Process modeling"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-modeling-diagrams-called-processes": {
      "title": "Called processes",
      "content"     : "Called processesOverviewDefine a called processExtract a called processOverviewA called process is a complete process that is called from another process.There is a parent-child relationship between the calling process and the called process, that is, the flow in the child process is essentially contained within the parent process.A called process is an independent process that is called from a call activity in a parent process.Process flow goes from a call activity in the parent process to the start element in the called process. While the called process is executing, the parent process is paused.When the flow reaches an end element of the called process, processing returns to the call activity.A called process is defined in exactly the same way as any other process. It can call called processes and can contain event subprocesses. A parent process can call more than one called process.A called process can be called by more than one parent.A called process can be in a pool in the same diagram as a parent process or can be in a separate diagram. If a process is called from several parent processes, it is usually easier for maintenance and for deployment to define it in a separate diagram.If the diagram containing the called process is in the same workspace, the called process is deployed automatically when you build and deploy the parent process.If the parent process and called process are not in the same workspace, they need to be deployed separately.Data in a called process is defined in the same way as for any process. In addition, you can map data from the parent process, making it available in the called process. Specify data mapping when you define a call activity that calls a called process.You can define a called process in the same way as you define a process. You can also extract a called process from a process diagram.Define a called processThere are two parts to defining a called process: defining the called process, and defining the call activity. It is easier to define the call activity if the called process already exists, but not essential.Define the called process as you would define any other process. When you create the variables in the called process, make a note of those that are related to variables in the parent process.In the parent process, define a call activity task. Define the normal task characteristics. Note that although a call activity cannothave forms associated with it, it can have connectors and task-level data.In the Details panel, General tab, General pane, specify the name of the called process. If you know the process name, you can enter it directly, otherwise use the expression editor.In the Details panel, General tab, Mapping pane, specify the mapping of data or contract inputs between the parent process and called process. You can only map variables or inputs of the same type.It is recommended to set a contract up on the called process. This way, you can map the parent process variable to a contract inputs of the called process.You can use Auto map to automatically map data from the called process to the parent process for a pair variables that have the same name in the parent and called process variables.You can also specify the mapping of variables of called process variable to parent process variable explicitly.Extract a called processYou can also extract a called process from a process. To do this, open the process diagram, click on the marquee tool in the BPMN elements menu, then select the part of the process that you want to extract. There selected part of the process must have a single entry point and a single exit. Then right click on the selected part, and choose Extract called process from the menu. The selected part of process is extracted and put into a new pool, inserted in the diagram below the current pool. The extracted items are replaced in the original diagram by a call activity. The data in the parent process and called process is mapped automatically.",
      "url": " /bonita/7.8/application-and-process-design/process-modeling/diagrams/called-processes",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-modeling-diagrams-diagram-overview": {
      "title": "Diagram overview",
      "content"     : "Diagram overviewA diagram is the visual representation of a group of related processes. It contains one or more pools.Each pool contains a process. One diagram can therefore contain several processes.A diagram has a name and a version number. You can change the diagram name and you can update the version number whenever you want to indicate a major change in the diagram. A pool also has a version number that can be updated manually. There is no link between the diagram version and the pool version.How to create a new diagramTo create a new diagram in Bonita Studio, choose New from the Diagram menu or the Cool bar, or click New Diagram on the Welcome page. Give your diagram a name, and optionally set the version number and add a description.You can also turn on or off validation of your diagram. If validation is on, any errors in your diagram structure are flagged with a red x icon. This helps you correct errors as you build your diagram, instead of correcting them all at the end.To open an existing diagram, choose Open from the Diagram menu or the Cool bar, click Open a Diagram on the Welcome page, or double-click the diagram name in the Recently Modified list on the Welcome page.The Diagram menu contains options for saving a diagram. You can also duplicate a diagram, which is a useful way of making a backup copy of a diagram before you make major changes.",
      "url": " /bonita/7.8/application-and-process-design/process-modeling/diagrams/diagram-overview",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-modeling-diagrams-diagram-tasks": {
      "title": "Tasks",
      "content"     : "TasksA task is an activity in a process. There are several different kinds of task:  A human task is carried out by a person using a form to enter data or to receive information.  A service task is carried out automatically by the Bonita Engine and is invisible to users during normal operation.  A call activity calls a subprocess. The sequence flow of the process passes from the call activityto the subprocess. When the subprocess is complete, the flow returns to the call activity.  A script task executes a script in the Bonita Engine.  An abstract is a generic activity, usually used during diagram creation as a placeholder for a more specific type of task. An abstract task is treated as a service task when a process executes.  A send task sends a message to another process in the same diagram. The message is caught by a catch message event or a receive task.  A receive task receives a message from another process in the same diagram. The message was sent by a throw message event or a send task.The items configured for a task depend on the task type, as shown in the following table:To configure…  Go to…  Applies to task types…  Task name in diagram  Details panel, General tab, General pane  All  Task name in Portal  Details panel, General tab, Portal pane  All  Task description in Studio  Details panel, General tab, General pane  All  Task description in Portal  Details panel, General tab, Portal pane  All  Task description after completion in Portal  Details panel, General tab, Portal pane  All  Task type  Details panel, General tab, General pane  All  Priority  Details panel, General tab, Portal pane  Human, abstract, call activity, service, script  Estimated duration  Details panel, General tab, General pane  Human, abstract, call activity, service, script  Actor  Details panel, General tab, Actors pane  Human  Variables  Details panel, Data tab, Local variable pane  Human, abstract, call activity, service, script  Iteration  Details panel, General tab, Iteration pane  All  Contract  Details panel, Execution tab, Contract pane  Human  Form  Details panel, Execution tab, Form pane  Human  Connectors  Details panel, Execution tab, Connectors in/out pane  Human, abstract, call activity, receive, service, script  Operations  Details panel, Execution tab, Operations pane  All  KPIs (Enterprise, Performance, Efficiency, and Teamwork editions only)  Details panel, Execution tab, KPIs pane  All  Data entry forms (6.x legacy)  Details panel, Application tab, Pageflow pane  Human  Confirmation forms (6.x legacy)  Details panel, Application tab, Confirmation pane  Human  Appearance in diagram  Details panel, Appearance tab, color &amp;amp; font pane  All  Subprocess to execute  Details panel, General tab, General pane  Call activity  Message content handling  Details panel, General tab, Message content pane  Receive  Messages  Details panel, General tab, Messages pane  Send  Correlation keys  Details panel, General tab, Correlation pane  Receive  To create a new task, select the relevant icon from the BPMN elements menu or from the context menu of the preceding element in the diagram, and drop it on the whiteboard. You can change the task typeof an task in the diagram.Setting the task name seen in the Portal When you define a task in Bonita Studio, by default the task name and description in Bonita Portal are the same as the task name and description on the diagram. You can override this by setting the Display name, Display description, and Description after completion in the Details panel, General tab, Portal pane.  Display name: used in the message displayed at the end of a task indicating the name of the new task that is available, and used in the task To Do list.  Display description: displayed in the portal Details panel when a task in the To Do list is selected.  Description after completion: displayed in the portal Details panel when a task in the Done list is selected.We recommend that you set these values with a script that uses some data that is specific to the case. This avoids the problem of having several tasks in your Portal To Do list all with the same name. For instance, for a leave request approval task, you could include the name of the employee making the request in the Display name.",
      "url": " /bonita/7.8/application-and-process-design/process-modeling/diagrams/diagram-tasks",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-modeling-diagrams-event-subprocesses": {
      "title": "Event subprocesses",
      "content"     : "Event subprocessesA event subprocess is embedded within the parent process, used to handle exceptions. It can be started with a timer event, a signal, or an error event from the parent process, or with a signal or message event from another pool. When the event subprocess starts, the parent process is aborted. If the parent process is a called process, flow returns to its parent process, which continues to execute in parallel with the event subprocess. An event subprocess has access to all the process variables of the parent process in which it is embedded. No data mapping is required.Define an event subprocessTo define an event subprocess:  Select the event subprocess icon in the BPMN elements menu and drag it into the process pool (in the same lane as part of the process or in a separate lane).  Configure the name of the event subprocess.  Select the + symbol in the event subprocess element to expand the process drawing space. You can expand it further if necessary, by dragging the lower right corner of the event subprocess outline.  Add a start event. This must be a start message, start timer, or start error.  Configure the start event with the condition that triggers the event subprocess. For example, to handle an error case, configure a start error event that is triggered by a error thrown by an end error event on a task.  Add the steps needed in the subprocess.  Add an end event.When the event subprocess diagram is complete, you can hide it by clicking the - symbol. This collapses the event subprocess to a single element in the process diagram. The element shows the name of the event subprocess and the type of its start event.",
      "url": " /bonita/7.8/application-and-process-design/process-modeling/diagrams/event-subprocesses",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-modeling-diagrams-events": {
      "title": "Events",
      "content"     : "EventsOverviewTimer eventsMessage eventsSignal eventsError eventsEvents with no triggerEvents and multi-instantiated call activitiesOverviewAn event is something that happens during the execution of a process and has an impact on the flow.An event alters the sequence or timing of activities in a process.Some events have a trigger, such as a timer, message, signal, error, manual trigger or API call.There are three types of event: start, end, and intermediate. A start event is at the start of a process flow, and an end event is at the end of a flow.An intermediate event is an element in a flow of the diagram or is attached to the boundary of a task or call activity.The following table shows the events that you can use in a process diagram. Events that can be set as boundary events are marked (B). A non-interrupting time can only be set as a boundary event (B only):Trigger  Start  Intermediate  End  none  start  catch link, throw link  end, terminate end  message  start message  catch message (B), throw message  end message  timer  start timer  timer (B), non-interrupting timer (B only)     signal  start signal  catch signal (B), throw signal  end signal  error  start error  catch error (B)  end error  Timer eventsTimer events are used to:  Start a process on a repeating schedule, at a fixed date and time, or after a specified interval (start timer)  Delay a process for a set amount of time or until a specific date and time (intermediate timer)  Count down during a task until a deadline is reached (boundary timer or non-interrupting boundary timer)There are three types of timer condition:  Cycle, which triggers the event on a recurring schedule (available for Start timer events only)  Fixed date, which triggers the event at a specified date and time  Duration, which triggers the event after a specified delayA timer event can also contain conditions that trigger actions using connectors.Start timerUse a start timer to launch a process on a repeating schedule (cycle), at a fixed date and time, or after a specified delay (duration).To set the schedule, select the start timer event, go to the Details panel, General tab, General pane, and click Edit… to set the timer conditions.If you define a condition based on a duration, the countdown to the process start begins when the process is enabled.Intermediate timerUse an intermediate timer as a delay mechanism to pause a process flow until a specified duration has elapsed or a specified date and time is reached.To define the duration or the end of the delay, select the intermediate timer event, go to the Details panel, General tab, General pane, and click Edit… to set the timer conditions.Boundary timerUse a boundary timer to set a deadline by which an activity should end. You can set a boundary timer on a human task or a call activity. If the activity does not start before the deadline, the timer is triggered and it diverts the normal process flow to an exception flow. For example, you can use a boundary timer to escalate a late task. The deadline can be set as a duration (for example 48 hours) or as a specific time and date.To define the deadline, select the intermediate timer event, go to the Details panel, General tab, General pane, and click Edit… to set the timer conditions.Non-interrupting boundary timerUse a non-interrupting boundary timer to start an exception flow that parallels the normal process flow. You can set a non-interrupting boundary timer on a human task or a call activity.You can define the deadline as a delay (duration) or a fixed date.If the activity does not start before the deadline, the timer is triggered and it starts the exception flow. The normal process flow continues. For example, you can use a non-interrupting boundary timer to trigger a reminder to a user that a task is waiting to be performed.To define the deadline, select the non-interrupting boundary timer, go to the Details panel, General tab, General pane, and click Edit… to set the timer conditions.Example: Using cron to specify a timer cycleExample: Using a script to specify a time or dateMessage eventsA message is used to send information from one process to another and as a synchronization point. A message can contain data. A message is a point-to-point communication, that is, it is sent to a specified task in a specified pool, where the recipient isconfigured to receive the message. It is also possible to use signals for communication between processes: a signal is broadcast so can have many recipients and does not contain data.A message that is sent has always one recipient. To ensure that the messages are sent between the correct process instances, and to verify the validity of the message, you can use key-based correlation.Reminder: As an alternative to a message, you can use a gateway as a synchronization point in your process. There is a performance advantage to using a gateway in place of a message and called processes. To replace messages with gateways, you need to restructure your process diagram.There are five events related to messages, described in the following sections.Throw message eventUse a throw message event to send a message to an element in a different process. A message can be caught by an intermediate catch message event, a boundary catch message event on a task, or a start message event.To configure a throw message event, select it in the diagram, go to the Details panel, General tab, Messages pane, and define the message that can be thrown. For each message, specify the following:  The message name. You use this name to identify the message when you configure the message catching element, so a unique, descriptive name is best.  The target pool. This identifies the target process. When you start to enter the target pool name, Bonita Studio offers a list of the pools in diagrams you currently have open. Double-click a name to select it from the list. You can also specify the name of a process that is defined in a diagram that is not currently open or that is in a different workspace.  The target task. This is the name of the task or event that is listening for the message.  The correlation level. If you want to use key-based correlation, specify the keys and their values. Define the value of a correlation key using the Expression Editor.  The message content. The message content is a collection of id-value pairs. The simplest method is to use the relevant process variables, but you can use an expression to create message content in other formats. The Content item is the id and must be a string.The Content value must be serialized, so that it is kept in the database and persists even after a JVM restart. It can be contructed with a script or variable. it can also be a complex datatype as long as all its attributes are serializable.If the source and target of the message are in the same diagram, they will be connected by a dotted line.Catch message eventUse a catch message event to receive a message from another process. A catch message event can be an intermediate event, used to pausethe process flow until the message arrives, or can be a boundary event on a task, used to divert process flow into an exception path if the message arrives.A message can be sent by a throw message event or an end message event.To configure a catch message event, select it in the diagram, go to the Details panel, General tab, and specify the following:  In the General pane:  Specify the event name. This name is used when configuring a throw message event to identify the target of the message.  Specify the name of the catch message. This is the name of the message that is configured in the throw message event.In the Message content pane, specify how to handle the content of the message. If the message content is based on variables in the sending process and you have variables with the same name in the receiving process, you can click Auto-fill to indicate that the values of the variables in the receiving process are to be set to the values in the message. Otherwise, you can define a set of mapping rules.  Specify the correlation checks required. If the correlation keys for the message are already defined, click Auto-fill to add them to the table.You can modify these correlation keys, or define others.Start message eventUse a start message event to start a process when a specified message is received.To configure a start message event, select it in the diagram, go to the Details panel, General tab, and specify the following:  In the General pane:  Specify the event name. This name is used when configuring a throw message event to identify the target of the message.  Specify the name of the catch message. This is the name of the message that is configured in the throw message event.In the Message content pane, specify how to handle the content of the message. If the message content is based on variables in the sending process and you have variables with the same name in the receiving process, you can click Auto-fill to indicate that the values of the variables in the receiving process are to be set to the values in the message. Otherwise, you can define a set of mapping rules.  If you are configuring a start message event in an event subprocess, specify the correlation checks required. If the correlation keys for the message are already defined, click Auto-fill to add them to the table.You can modify these correlation keys, or define others.The version of the target pool is not specified in the message definition. If you deploy and enable two versions of a process and each is started using the same start message event, when the message is thrown only one process is started and not necessarily the more recent one. To avoid this problem, do not have more than one version of your process enabled.End message eventUse an end message event at the end of a process to send a message to an element in a different process.A message can be caught by an intermediate catch message event, a boundary catch message event on a task, or a start message event.To configure an end message event, select it in the diagram, go to the Details panel, General tab, Messages pane, and define the message that can be thrown. For each message, specify the following:  The message name. You use this name to identify the message when you configure the message catching element, so a unique, descriptive name is best.  The target pool. This identifies the target process. When you start to enter the target pool name, Bonita Studio offers a list of the pools in diagrams you currently have open. Double-click a name to select it from the list. You can also specify the name of a process that is defined in a diagram that is not currently open or that is in a different workspace.  The target task. This is the name of the task or event that is listening for the message.  The correlation level. If you want to use key-based correlation, specify the keys and their values. Define the value of a correlation key using the Expression Editor.  The message content. The message content is a collection of name-value pairs. The simplest method is to use the relevant process variables, but you can use an expression to create message content in other formats.Signal eventsA signal is used to send a notification from one process to another. A signal does not contain data. A signal is a broadcast so can have multiple recipients.There are four events related to signals:  Throw signal: issues a signal.  Catch signal: catches a signal. Can be an intermediate event or a boundary event. An intermediate catch signal causes the process to wait until the signal is received. A boundary catch signal event causes the process to abort the step to which it is attached when the signal is received.  End signal: ends a process and sends a signal. Configured in the same way as a throw signal event.  Start signal: catches a signal and starts a process. Configured in the same way as a catch signal event.Signal event configurationTo configure a signal event, select the element in the diagram, go to the Details panel, General tab, General pane, and specify the content of the signal in the Signal field. The signal content is a string. Either enter the string in the form field, or select it from the list of signals already defined.You can also defined variables at an intermediate catch signal event.Error eventsA error is a notification of an exception that diverts the normal process flow to an exception flow. There are three types of error event:  A catch error event is a boundary event that is thrown if an error occurs during a task or call activity. It stops the normal process flow and diverts the process to an exception flow.  An end error event marks the end of a process branch that corresponds to an exception. A error code is sent to an event subprocess exception handler. Other flows in the process that are not in error remain active.  A start error event marks the start of a error event subprocess.Catch error eventUse a catch error event as a boundary event on a task or call activity to trigger an exception flow if an error occurs.You can specify a particular error to be caught, or catch all errors.A boundary error on a service task indicates an internal fault where the service cannot finish due to a technical problem, for example, a failed connector, lost communication links, or invalid data. This is a technical exception.A boundary error on a human task indicates a user-declared exception, for example, where a human action such as ticking a checkbox can indicate there is a problem.To configure a catch error event, select the element in the diagram and specify the name of the associated error. If no error is specified, the event will catch any error returned during the task or call activity called process.Then create the exception flow out of the boundary error.Start error eventA start error event can only be used to start an error event subprocess. The start error event catches the error from an end error event and starts the event subprocess.To configure a start error event, select the element in the diagram, go to the Details panel, General tab, general pane, and specify the error. If you do not specify an error, the event subprocess is started for all any error in the parent process.End error eventUse an end error event to start an event subprocess exception handler when a given error occurs. Note that an end error ends a branch of the process flow but other flows in the process continue.To configure an end error event, select the element in the diagram, go to the Details panel, General tab, general pane, and specify the error. There must be a corresponding event subprocess configured to start with this specific error or with any error from the process.Events with no triggerStart eventThis is the normal start event for a process. It indicates the start of a process instance started by a user (typically using Bonita Portal) or programmatically.End eventThis marks the end of a flow in a process. It is at the end of a process flow. Other flows continue to execute. Typically, end events are only used in advanced cases when several branches need to be completed before the process instance is finished.If a process has only one end, use a terminate end event instead of an end event.Terminate end eventThis marks the end of all flows in a process. A terminate end event is at the end of a process flow but causes all activity in the process to stop. It is good practice always to have a terminate end event in a process, because this ensures that a process instance is completely finished when the event is reached.Throw link and catch linkA link is jump in a process flow. A link has a source, which is a throw link event, and a target, which is a catch link event. Multiple sources can have the same target. Source and target must be in the same process. Link are used to improve readability of a diagram by breaking up long sequences, to create loops, and to create a “go to” structure.To configure a link, add the throw link event and catch link event elements to the diagram, then go to the Details panel, General tab, General pane and configure each throw link event to specify the catch link event that is the target. You can check that the link configuration is correct by viewing the configuration of the catch link event, which contains a list of the throw link event with this catch link event as target.Events and multi-instantiated call activitiesNormally, if a called process throws an event (notably an end error event), the parent call activity is notified. However, if the call activity is multi-instantiated, it does not receive the error from the called process. In other words, for a multi-instantiated call activity, the behavior attribute specified in the BPMN standard is set to “all”.",
      "url": " /bonita/7.8/application-and-process-design/process-modeling/diagrams/events",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-modeling-diagrams-gateways": {
      "title": "Gateways",
      "content"     : "GatewaysGateways are used to control how sequence flows interact as they converge and diverge within a process.There are three types of gateway available for process design in Bonita Studio: parallel (AND), exclusive (XOR), and inclusive. These gateways behave in accordance with the BPMN2 specification.Parallel (AND) gatewaysExclusive (XOR) gatewaysInclusive gatewaysParallel (AND) gatewaysIn a parallel (AND) gateway, all inputs must be received before the process can continue, and all outputs fire simultaneously. No condition can be put in the output.Exclusive (XOR) gatewaysFor an exclusive (XOR) gateway, the design must ensure that only one input will reach the gateway. Only one output fires. If there areseveral outputs defined, a condition is required to determine which one fires.Inclusive gatewaysAn inclusive gateway waits for the input from all active paths, and activates all outgoing transitions that have a condition thatevaluates to true. If there is only one outgoing transition, no condition is needed and the transition is always activated. If there is more than one outgoing transition, every transition must either be the default or must have a condition.",
      "url": " /bonita/7.8/application-and-process-design/process-modeling/diagrams/gateways",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-modeling-diagrams-migrate-a-process-from-bonita-open-solution-5-x": {
      "title": "Migrate a process from Bonita Open Solution 5.x",
      "content"     : "Migrate a process from Bonita Open Solution 5.xA process exported from Bonita Open Solution 5.x must be modified to run in Bonita because of the modifications and new features.Bonita provides a guided migration for importing a process from 5.9 or 5.10 to the Bonita legacy 6.x concepts and tooling.You can then modify the process definition to take advantage of the new features in the latest version of Bonita.To migrate a process from a version of Bonita Open Solution earlier than 5.9, you must first upgrade it to 5.9.When you import a process from Bonita Open Solution 5.9 or 5.10, Bonita automatically modifies the process where possible, and provides a report indicating the items that need to be checked or that must be modified manually. You can use this report to track the status of the modifications required as you complete them.To migrate a process from Bonita Open Solution 5.9 or 5.10:  Choose Import -&amp;gt; Other.. from the Diagram menu.  Select the Bonita BAR 5.9/5.10 input format, and select the file to be imported.  Click Import.  A pop-up explaining the format of the import status report is displayed. You can choose not to see this popup for subsequent imports.  Click Finish. The process is imported and Bonita Studio displays an Import status report. This report lists the status of each item in the process definition.  Select an item to see what migration action has been done, or to see what manual action is required.When an item has been completely migrated, either automatically or after review or manual action, check the box in the Reviewed column.   You can use this column to track what remaining migration is required.At any stage during migration, you can close the report and move out of migration mode. Note, however, that when you have closed the report you cannot reopen it. To close the report,click on Exit import mode.You can modify the view of the report as follows:  You can sort the report by any of the columns by clicking on the relevant column heading.  You can hide all items that have valid changes, by choosing Hide valid changes from the report menu.  You can hide all reviewed changes, by choosing the Hide reviewed changes from the report menu.You can also create a PDF version of the report, by choosing Export PDF from the report menu.",
      "url": " /bonita/7.8/application-and-process-design/process-modeling/diagrams/migrate-a-process-from-bonita-open-solution-5-x",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-modeling-diagrams-pools-and-lanes": {
      "title": "Pools and lanes",
      "content"     : "Pools and lanesA pool is a container for a process in a diagram. A lane is a division of a pool (think of swimlanes in a swimming pool). You can use lanes to group elements of a pool that are functionally related. Typically, a lane contains all the tasks assigned to an actor.When you create a new diagram it contains one pool, which contains one lane. You can add other lanes to the pool, and you can add other pools.For a pool, you can configure the following:  Name, description, and version number: This information identifies the pool. The name must be unique withing a repository. The pool version number is really the process version number. Update the version number when you make major changes to the process. There is no link between the pool version number and the diagram version number.  Actors: An actor represents the user who will carry out tasks in the pool. Configure the actors that participate in the process. An actor must be defined at pool level before it can be assigned to a lane or task.  Data: A variable is a container for data used in the process. Create the variables that will be used in your process. You can also create variables at task or form level.  Connectors: A connector links a process to an external information source. Specify the connectors used in the process. You can also specify a connector at lane or task level, but if a connector is used more than once it is better to define it at pool level.  Parameters: A parameter is like a variable but has a value that is fixed for a deployment of a process. Define the parameters of your process.  Documents: You can attach documents to a process. List the documents that attached to the process.  Search: A search index is used in the Portal to find a specific instance of a process. Specify the search indexes associated with the process.The items configured for a lane supplement or override those defined for the pool. You only need to configure something at lane level if is not already defined at pool level, or if you want to override the definition. Note that nested lanes are not supported.For a lane, you can configure the following:  Name and description  Actors: From the actors defined for the pool, specify the actors assigned to this lane. You can also configure an actor filter to make the actor assignment more specific.  Data: Define the variables needed in the lane. You can also define variables as task level.  Connectors: Specify the connectors used in the lane. You can also specify a connector at task level, but if a connector is used more than once it is better to define it at pool or lane level.  Parameters (Enterprise, Performance, Efficiency, and Teamwork editions): Define the parameters of the lane. A parameter is like a variable but has a value that is fixed for a deployment of a process.  Documents: List the documents that are attached to the process.",
      "url": " /bonita/7.8/application-and-process-design/process-modeling/diagrams/pools-and-lanes",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-modeling-diagrams-text-annotations": {
      "title": "Text annotations",
      "content"     : "Text annotationsA text annotation is a comment in a diagram.You can attach a comment to a specific element in the diagram, by choosing the text annotation icon above an element and placing it next to the element. You can also attach comments to a pool, independent of any specific element.To do this, select the text annotation icon from the BPMN elements menu to the left of the screen, and drop it on the diagram inside a pool or lane outline.Text annotations are unformatted text. To enter text, select the annotation and go to the Details panel, General tab, General pane. You can also enter text directly into the annotation when you first create it.Text annotations are useful to exchange information with other business analysts viewing or developing the process. They are also a useful way of storing information that might be required for process maintenance (similarly to comments in.md source files).",
      "url": " /bonita/7.8/application-and-process-design/process-modeling/diagrams/text-annotations",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-modeling-diagrams-transitions": {
      "title": "Transitions",
      "content"     : "TransitionsOverviewCondition expressionCondition decision tableDefault transitionOverviewIn Bonita Studio, transitions represent sequence flow. Transition arrows are used to connect all objects, allowing the sequence flow to move from the start to the end of a process.In addition to connecting elements in a process, transitions are used to define the direction of flow between these elements.If a transition is not present between process elements, the sequence flow will stop. The flow is broken and the process will not reach its termination.Sequence flow must start and end within a single process. Transitions cannot cross from one pool to another. It is best practice to label the conditions on transitions so they are easily understood in the process diagram.Some elements, such as tasks and gateways, can have multiple outputs connecting to other elements. These multiple outputs need to be managed to create an order of flow. They can be configured using conditions to determine which path the flow should take, given the state of the process case (e.g. data variables).To configure a transition, select it in the process diagram and go to the Details panel, General tab. You can configure the following:  The name and a description of the transition. The name is used to label the transition in the diagram.  The condition under which this transition is taken. There are three ways to specify this:Condition expressionClick the crayon icon to open the Expression editor. Select the expression type and enter the expression. The most useful type of expression for a transition is a comparison. A comparison expression uses logical operators on variables, parameters, or constants to determine whether the transition is taken.Condition decision tableFor complex or multi-stage conditions, use a decision table. A decision table is a sequence of conditions, one condition in each row of the table. The rows are evaluated in order. Each condition is a comparison expression.Default transitionIf you make a transition the default, this flow is taken if no other outgoing transition from the element meets the conditions defined in an expression or decision table defined for that transition. We recommend that you always specify a default transition.",
      "url": " /bonita/7.8/application-and-process-design/process-modeling/diagrams/transitions",
      "author": "",
      "categories": "Application and Process Design, Process modeling, Diagrams"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-modeling-generate-process-documentation": {
      "title": "Generate process documentation",
      "content"     : "Generate process documentationNote: For Bonita Enterprise, Performance, Efficiency, and Teamwork editions only.OverviewWhat will be exported in the documentation?Generate process documentationResultOverviewWhen a process is open in Bonita Studio, it is possible to generate documentation, containing a summary of individual elements in the process. This is like a process report. Choose the settings for the format of the export file, how the report will be presented, choose a logo to display and its size in pixels.What will be exported in the documentation?You will see the elements contained in the process definition. The documentation generated contains:  a description of BPMN elements  an image of the process  a list of activities  tables showing groups, actors, tasks, sequence flows, connectors, data, data types, deadlines, dependencies, messages, message flows, and KPIs  template settingsThe following are not included in the generated documentation:  contract definitions  context information  form mapping  form informationThe way the different elements in the process are presented on paper can be easily configured in a pop-up window, before exporting.In the optional settings in the pop-up window, you can choose to:  export the report in different formats: .pdf, .doc, .html, .rtf, .ppt  show or hide a description of the BPMN elements  change the colour of headings  display your logoGenerate process documentation  Go to the Menu bar &amp;gt; Process.  In the dropdown menu, click on Generate documentation.A popup window will be displayed where you can configure a number of parameters for the exported file.In the optional settings in the pop-up window, you can choose to:  export the report in .pdf, .doc, .html, .rtf, or .ppt format  show or hide a description of the BPMN elements  show or hide empty properties  change the colour of the background for H1 and H2  define the size of the logo in pixels (10-150 pixels)  set the path where a logo is found on your computer, by browsing straight to it  display a logo on the first page or on all pages  Once the parameters have been set, click on the‚ Generate button to export the fileResultA report about the process will be generated and exported:  in the format you chose  with the presentation you chose  to the place on your computer you chose",
      "url": " /bonita/7.8/application-and-process-design/process-modeling/generate-process-documentation",
      "author": "",
      "categories": "Application and Process Design, Process modeling"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-modeling-iteration": {
      "title": "Iteration",
      "content"     : "IterationIteration means performing a task multiple times.You can start several instances of a task at the same time, which is call multi-instantiation, or you can start another instance of a task when the previous one finished, which is called a loop. You can iterate a task or a call activity. If you have several tasks in sequence that need to be iterated, groups them into a subprocess and define the iteration on the call activity that calls the subprocess.Multi-instantiationUse multi-instantiation if you want several instances of a task to be performed in parallel. For example, in a process for reviewing a document, you would issue the document to all reviewers at the same time, then collect all their feedback before moving to the next step.To configure multi-instantiation, select the element in the diagram and go to the Details panel, General tab, Iteration pane. Specify the following:  Select Parallel or Sequential Multi-instantiation.  Specify how many instances of the task you want. You can:  Specify a defined number: Check Create a defined number of instances, open the expression editor, set the expression type to  Constant, and enter the number. You can also set the number by using the value of an integer parameter or variable.  Define an expression: Check Create a defined number of instances, open the expression editor, set the expression type to Script, and define the script. This is useful if the number of iterations is conditional on some information in the process. The script must return an integer.  Specify the number of iterations from a list: Check Create instances from a list, and choose the list from the existing lists or multiple data.If you are using a list, you may also edit the name of the multiInstanceIterator, a reference that takes the value of each item in the list to create the corresponding instance. Make sure that it has the same type as the list items. To access the referenced data use the same REST API format for retrieving data either using the caseId as in:../API/bpm/case//contextor in the context of a process form:../replacing businessVariableName with multiInstanceIterator or if you edited the reference name use this reference name instead of businessVariableName.  If you want to save the results of user activities during all instances, check the Store output result box and specify:  The result data of each instance to be stored in the output list  The final list of appended resultsSpecify the early completion condition. This is a Boolean that determines whether the iteration is complete. For example, if you have a maximum of 10 possible instances of a task and you require at least 8 to be completed, you could define a counter called completed_instances and set the completion condition to true when completed_instances reaches or exceeds 8. In this expression you have access to the following provided variables :  numberOfActiveInstances: the number of instances that are currently active, that is, not yet finished (for a sequential multi-instance task, this will always be 1)  numberOfTerminatedInstances: the number of instances terminated, successfully or not  numberOfCompletedInstances: the number of instances terminated successfully  numberOfInstances: the total number of instances  LoopsUse a loop if you want a task to be performed several times, one after another, with no result data, until a condition is met. The condition can be a number of iterations, or can be set as an expression. The test for the condition can be done at the end of an iteration or at the start.To configure a loop, select the element in the diagram and go to the Details panel, General tab, Iteration pane. Specify the following:  Select Standard loop.  Specify whether the loop completion test is done before or after the task is performed.  In the Loop while field, specify the condition for continuing to loop. Define the condition as an expression. Here may use a provided variable named loopCounter.  In the Maximum loop field, specify the maximum number of times the loop is to be repeated. If you know in advance the number of times the loop should be executed, you can set this in the Maximum loop field, and set a Loop while condition that is always true. This is optional, but we recommend that you set a limit to avoid infinite loops and errors if a process gets stuck.",
      "url": " /bonita/7.8/application-and-process-design/process-modeling/iteration",
      "author": "",
      "categories": "Application and Process Design, Process modeling"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-modeling-naming-conventions": {
      "title": "Naming conventions",
      "content"     : "Naming conventionsEvery element in a process definition has a name. The only rules about naming are that you cannot use Java language keywords and that you cannot use the same name for more than one element within the same diagram.For example, you cannot have two variables called beanCounter in a diagram, even if they are in different pools.You could, however, have a variable called beanCounter and an actor called beanCounter.Note: Variables are not shared between Studio and UI Designer. Furthermore, in the UI Designer, variables are not shared between pages. For information about to use variables in the UI Designer, go to Variables.Even in a relatively simple process, the number of names quickly becomes large. Adopting a naming strategy improves the readability and maintainability of your processes, and makes it easier to reuse elements. We propose the following best practises.  Make names meaningful. The goal is to make it obvious what something does without needing to open it. It is better to have a long, meaningful name than a short name. In most cases, a name only has to be typed once and then is selected from a list, so there is no advantage to using short names. For example, it is better name a Boolean variable hasRequestedReceipt rather than just receipt.  Names can indicate either what something is or what it does. For a variable, it is more useful to indicate what it is, that is, what it stores. For any other element, indicate what it does.  Be consistent within a process and also between processes, to facilitate reuse or copying. Reuse is more likely if it is easy to find the element you want to reuse or copy.  Name a pool with the high-level business process name. If you have several pools in a business process, use names that convey how the pools are related. For example, if you have a business process for reviewing and approving leave requests that has a main process, a called process for reviewing requests, and a called process for escalations, you could call the pools Leave Request, Leave Request Review, and Leave Request Escalation.  Name a lane to indicate who is acting in the process. In general, you should use the actor name and group activities by the same actor into the same lane. The additional benefit of this is that it makes actors visible in the process diagram.  Name a task according to what is being done. This is important for all types of task, not just human tasks.  Name a form according to what is being done prefixed with the process name. It will be easier to understand where and why forms are used inside the UI designer home page.  For usability as well as maintainability, use the same structure in all task names. In a leave request process, for example, do not call the tasks Manager reviews request and HR review.  Name a gateway for the decision that is being made.  Name all the transitions out of a gateway.  The name of an end events should indicate what is being ended, possibly with the reason. In a process with several flows, you need to know which flow has ended. For example: leaveApproval_ManagerReview, or leaveApproval_RejectionFlow.  For variables, differentiate between process data and task data. You could prefix all process data names with p_ and all task data with t_, or you could append the name with _in_p_ProcessName or in_t_TaskName.  For variables and parameters, indicate the datatype in the name. This can be done implicitly, with terms like is or has (for Booleans), date, price, number, etc. For example:p_hasRequestedReceipt instead of p_RecieptRequested, p_dateOfFirstLeaveDay instead of p_FirstLeaveDay,p_numberOfDaysRequested instead of p_DaysRequested, or p_pricePerDayOfTraining instead of p_TrainingFee. You could also indicate the data type explicitly. For example, p_int_numberOfDaysRequested or p_date_StartOfLeave.  Name a connector instance with a descriptive name to indicate what it is doing, not just the connector type. This is particularly important if a process uses the same connector at several points to handle different data. For example, in a process to update an employee’s contact details, you could use the PostgreSQL connector to get the existing data and to write the updated values, so you could name the connector instances posrgresqlGetEmployeeContactInfo and postgresqlUpdateEmployeeContactInfo.  Name an expression (such as a Groovy script) with a descriptive name that indicates the purpose. Use a name that is unique within the business process.  If you have a library of reusable elements (for example Groovy scripts, or data type definitions), give each element a name that is obvious and descriptive, for maximum reuse. For example, createOperationsListFromVariablesMap, not createOperations. If you import a reusable element but modify it in a process, save it with a new name that is unique in the repository and identifies the process where it is used. This avoids the risk of the amended element overwriting the standard one, which would cause problems for processes using the standard one.Note: There are forbidden keywords which cannot be used in an application name, task name, or process name. The forbidden keywords, which are not case sensitive, are:  content  theme  apiIn addition to using a predictable naming scheme, you can improve the maintainability of a process by specifying a description for every element. It is also possible to use text annotations on the diagram itself. However, a large number of text annotations can make a diagram difficult to read. You are recommended to use a text annotation primarily for a temporary note, as a reminder to complete or correct something, or for communication between business analyst and application designer.",
      "url": " /bonita/7.8/application-and-process-design/process-modeling/naming-conventions",
      "author": "",
      "categories": "Application and Process Design, Process modeling"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-modeling-refactoring": {
      "title": "Refactoring",
      "content"     : "RefactoringRefactoring a process definition means changing the name of a process element without changing the external behaviour. Typically, this is done when a process definition is almost complete, to improve readability and maintainability, or to adopt a new set of naming conventions. In Bonita Studio, when you change the name of an element, the change is propagated to all the places that reference this element. If the change is simple (for example, you rename a variable used in transitions), the change is made automatically. If the change is more complex, such as renaming a variable used in a Groovy script, Bonita Studio displays the update for you to validate before it is implemented.Refactoring is also used when you delete a process element. Expressions using the element directly will be cleared and expressions having dependency on it will clear the dependency and replace it by a blank placeholder in Groovy scripts.Elements and scopeScopeLimitationsExampleElements and scopeRefactoring applies to the following types of element:  variable  form field  actor  parameter  document  contract input  business variable  page  search index (in Bonita Subscription Pack editions Efficiency, Performance and Enterprise)When you change the name of an element of one of these types, the name is changed throughout the process definition, including inside scripts and connector instance definitions.ScopeThe scope of refactoring is the process. If you rename one of the items above in a process, Bonita Studio detects and updates all the places in the same process where it is used. The refactoring does not extend outside the process.If your business process includes a call activity subprocess with mapped data, you need to modify the data mapping manually, checking both the parent process and the subprocess. If you also plan to refactor the subprocess, you should refactor it first, before making any manual changes to data mapping.LimitationsRefactoring is not available for the following process definition elements:  7.x pages do not reflect modifications of business data, documents and contract inputs.  “List of options” elements are not managed by refactoring. If you rename an option, you need to manually update any widgets that use this option as initial value.  Refactoring cannot be used to modify the type of an element, It is limited to renaming.  Expression dependencies are not recomputed in the Groovy script comparison editor. This means that you need to manually go back to each expression dependency and uncheck/check the “automatic dependency resolution” if you added a new element in the Groovy script comparison editor.ExampleSuppose you have a process that loops to collect feedback on a new product feature, and has an process variable called count that is used to count the number of people who complete the survey form. The variable is used in the following places in the process definition:  It is set to zero when a process instance is created.  It is incremented using an operation when a user submits a survey form, that is, it is used as the loop counter.  It is used in script that creates the content for a daily report sent by email to the feature owner, reporting how many survey forms have been submitted. This report is sent using the email connector, and the script is part of the connector definition.For clarity, it would be better to have a more meaningful name for this variable, so you want to change the name from count to numberOfSurveyFormsReturned:  Select the pool and go to the Details panel, General pane, Data panel.  In the list of process-level variables, select count and click Edit.  In the Edit popup, enter the new name, and click OK.  The variable name is automatically updated in the operation to increment the value when a survey form is submitted.  A popup displays the connector definition content script that uses count and shows the script with the new name. Click Finish to confirm that you want the script to be changed.Note: If you click Cancel to refuse the proposed change to the script or code displayed, the changes that were made automatically are cancelled. Modification that you saved in previous scripts for the same name change are also cancelled, even if you have saved them. If you use Ctrl+Z to cancel the change, you need to enter it twice: the first Ctrl+Z cancels the change in the widget, and the second one cancels the change in the related scripts and code.",
      "url": " /bonita/7.8/application-and-process-design/process-modeling/refactoring",
      "author": "",
      "categories": "Application and Process Design, Process modeling"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-testing-configure-a-test-organization": {
      "title": "Configure a test organization",
      "content"     : "Configure a test organizationThis page describes how to set up a test organization in Bonita Studio, for process testing.The ACME example organizationManaging organizationsExport and import an organizationModifying an organizationPublishing an organization to the Bonita PortalThe ACME example organizationBonita Studio includes a sample organization, called ACME. This organization contains a small number of users, who belong to different groups with realistic roles.You can use this example organization to explore how to manage an organization in Bonita Studio, for example by adding a user, orchanging the role of a user. You can also use this sample organization to test a process that you develop.Managing organizationsWithin Bonita Studio, more than one organization can be defined. This is useful if you are developing a process that will be deployed in several different organizations. It is also useful for testing, because you can create a reduced version of your organization that has the same structure but fewer users, saving time in managing your test environment.To an organization, you create the organization, create the group hierarchy, specify roles, and then add users and their memberships.  Start Bonita Studio.  Go to the Organization menu and select Manage….  Add a new organization:  Click Add. A line will be added to the table of organizations, with a placeholder name such as Organization1.  Change the placeholder name to the name of your organization, and add a description.Add groups to your organization:  Select the name of your organization and click Next.  Click Add group to add a group. You can specify the following:  the group Name, which is used internally by the Bonita software.NB: Bonita doesn’t support the ‘/’ character in the group name field. A group name that contains a ‘/’ may lead to unstable behaviour and may be forbidden in the future.  the Display name, which is the group name displayed in lists and wizards  the Path, which shows the hierarchical relationship between groups  a Description of the groupClick Add group to add the next group, and continue until you have added all the groups required. You can also add a subgroup, by selecting a group and clicking Add subgroup  When you have added all the groups you need, click Next.Specify roles in your organization:  Click Add, and add a role called member. This will be the default role for users within a group.  Click Add and add the other roles you require. Typically, most organizations have a Manager role so the group manager can be easily identified, but the specific roles you require will depend on your processes. Remember that it is not necessary to copy all the role information from your business organization into your Bonita organization, but instead you should just create the roles that are useful in processes.  When you have specified all the roles you require, click Next.Add users to your organization.  Click Add. A default username is added to the list of users.  You can change the username, but the value must be in a format the Bonita software can use: only unaccented alphanumeric characters are permitted plus a period (.). One option is to use the personal part of the user’s email address, that is, the part before the @ sign.  Specify a password for the user. The password characters are not displayed, so keep note of the password you choose.  Specify the manager of the user.  In the General tab, specify the Title, First name, Last name, and Job title of the user.  In the Membership tab, specify the groups that the user belongs to, and what role they have in each group.  You can also specify Personal contact and Professional contact information for the user.Add all the users in your organization. When you have finished, click Finish.Export and import an organizationYou can export an organization definition from Bonita Studio. The exported file is in XML, so can be modified. You can import anorganization definition in this XML format that was exported from another Bonita Studio running the same version of Bonita, or that was constructed by some other method but has the same format. You can also import the organization file into Bonita Portal, ready for production.Modifying an organizationTo modify an organization, choose Manage… from the Organization menu and use the same dialogs that you used to create the organization. To modify an item in an organization, select it in the item list and modify the information on the right-hand side of the list. To delete an item, select it and click Remove.Publishing an organization to the Bonita PortalPublishing an organization means uploading the organization data to Bonita Portal so that you can test your process. To upload organization data into Bonita Portal permanently, so a process can run when Bonita Studio is not running, you need to export the organization from Bonita Studio and import it into Bonita Portal.To upload the organization data:  Choose Publish… from the Organization menu.  Click the organization to be uploaded, and then click Next.  Specify the username and password of the user that will be used to log in to Bonita Portal when a process is started from Bonita Studio. This user must be in the organization you have selected.  Click Publish.After it has been uploaded, you can modify the organization in Bonita Portal.",
      "url": " /bonita/7.8/application-and-process-design/process-testing/configure-a-test-organization",
      "author": "",
      "categories": "Application and Process Design, Process testing"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-testing-log-files": {
      "title": "Log files",
      "content"     : "Log filesNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.During development, the Studio log file contains messages about development activities, including any errors.When you run a process for testing, messages are written to the Engine log file.From the Bonita Studio Help menu you can access the Studio log file and the Engine log file.See the Logging overview for details of how logging is implemented in Bonita and how to add logging to Groovy scripts or Java code that you add to a processStudio log fileEngine log fileStudio log fileTo access the Studio log file, choose Bonita Studio log from the Help menu.For Bonita Studio, you can set the level of logging. Edit the config.ini in the Studio root configuration directory and set the value of eclipse.log.level to ERROR, WARNING, INFO, or ALL.      ERROR  Only error messages are logged  WARNING  Only error and warning messages are logged  INFO  Error, warning, and Info message are logged (this is the default)  ALL  All messages are logged, including debug information  Engine log fileWhen you run a process locally from Bonita Studio for testing, you can access the Engine log file by choosing Bonita Engine log from the Help menu. The logging level for Engine when it is started from Studio is always INFO.On a deployed system, you can configure the log level and you can access the log files directly, in $BONITA_HOME/tomcat/logs. Each file name includes the date when the file was created. There are several log files:  bonita.date.log is the Bonita Engine log file.  catalina.date.log is the log file for the Tomcat application server used by Bonita Studio.  host-manager.date.log, localhost.date.log, and manager.date.log are internal Tomcat log files.",
      "url": " /bonita/7.8/application-and-process-design/process-testing/log-files",
      "author": "",
      "categories": "Application and Process Design, Process testing"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-testing-process-testing-overview": {
      "title": "Process testing overview",
      "content"     : "Process testing overviewBonita Studio contains several features that you can use to verify your process while it is in development.You can validate a process diagram: choose Validate from the Diagram menu, or go to the Details panel, Validation status tab and click Refresh. The Details panel contains a listof warnings and errors indicating things to correct in the diagram. Click on a row in the list to highlight the relevant item in the diagram.You can test some process components individually:  Connectors: go to Test connector… in the Development menu.  Expressions: use the Evaluate feature of the Expression editor.You can run the process in debug mode, with the option to skip connector execution: click Debug in the Cool bar.You can run the process locally, launching it from Bonita Studio without first deploying it to Bonita Portal. You must create a test organizationand configure a process before you can run a process from Bonita Studio.In addition to functional testing during development, we recommend that you monitor the system load. This will help evaluate the performance, so you can make your process efficient.When you have finished developing your process, we recommend that you perform a load test with the expected number of simultaneous users of the process, and a realistic rate of use of the process. This will help you evaluate the size of platform (CPU, RAM, etc.) that you will need when the process goes into production.",
      "url": " /bonita/7.8/application-and-process-design/process-testing/process-testing-overview",
      "author": "",
      "categories": "Application and Process Design, Process testing"
    }
    ,
  

    "bonita-7-8-application-and-process-design-process-testing-run-a-process-from-bonita-bpm-studio-for-testing": {
      "title": "Run a process from Bonita Studio for testing",
      "content"     : "Run a process from Bonita Studio for testingWhen you run a process from Bonita Studio it runs on the local Bonita Engine and launches a local Bonita Portal. The process is not deployed, but behaves as it would after deployment. Running a process from Bonita Studio is intended for testing during process development.Before you can run a process, you must configure the processand configure the organization.To run a process, open the process diagram and select the pool, then click Run in the Cool bar. The process in the selected pool runs. Only one pool can be run at a time.If you are using the Enterprise, Performance, Efficiency, or Teamwork editions, you can select the environment in which to run the process. The process must be configured for the environment in which it runs.There are two modes in which you can run a process, standalone and portal:  Standalone mode uses templates to contain the form application, These templates are editable in Studio. When you run a process from the Studio, it runs in standalone mode.  Portal mode uses a different container. When you run a process from the Portal, it runs in portal mode.This means that if you include a script in the templates, which are the standalone container, the script cannot be called by the process when it runs in portal mode.To include a script in a process so it can be used in portal mode, there are the following options:  In the form, add an HTML widget that contains ``.  In the Portal, use a custom Look &amp;amp; Feel that includes the JavaScript files between the `` tags of BonitaForm.html. This makes the script available for all forms in all processes launched from the Portal.To include a script in a process so it can be used in standalone mode:  In Studio, define a custom look &amp;amp; feel for the Application and include the script in one of the template HTML files. The script is then available for all steps in the process.After a process is deployed and initialized in Bonita Portal, it is run by starting a case.",
      "url": " /bonita/7.8/application-and-process-design/process-testing/run-a-process-from-bonita-bpm-studio-for-testing",
      "author": "",
      "categories": "Application and Process Design, Process testing"
    }
    ,
  

    "bonita-7-8-application-and-process-design-profiles-profilecreation": {
      "title": "Profiles editor",
      "content"     : "Profile EditorDefinitionFonctionalTechnicalCreate and build a profileEnable a profileDefinitionFonctionalProfiles work as permissions to give access to:+- Living Applications+- Navigation (menus) of Bonita PortalA profile is made of a name, a description, and a mapping with the organization entities. When the profile is used to access a Portal menu, Portal menu entries must be defined in the profile too.(When used to access a Living Application, the application menu is defined in the application descriptor itself.)All profiles can use the default profiles Administrator and User.Performance and Efficiency users can also use the default profile Process Manager, and can create custom profiles.TechnicalTechnically, a profile is an XML file.Profiles are packaged in files of profiles.A file of profiles is an XML file containing one or more profiles.&amp;lt;!-- file of profiles --&amp;gt;&amp;lt;profiles&amp;gt;	&amp;lt;profile&amp;gt;		&amp;lt;!--  First Profile --&amp;gt;	&amp;lt;/profile&amp;gt;	&amp;lt;profile&amp;gt;		&amp;lt;!--  Second Profile --&amp;gt;	&amp;lt;/profile&amp;gt;&amp;lt;/profiles&amp;gt;However, profiles in a given file of profiles are totally independent.Default profiles (Administrator, Process Manager, and User) belong to the file default_profiles.xml. This file can only contain default profiles. It cannot be renamed or deleted. Neither can be the default profiles within: only the mapping between default profiles and entities of the organization can be edited.Only Enterprise, Performance and Efficiency editions can create new file of profiles, in order to create custom profiles.The purpose of grouping profiles in one file is to manage together profiles related to a same business application.For example, if you want to create a leave management application for four kinds of users (Employees, Managers, Human Resources officers, and Administrators), then you will have to create four applications and four profiles, and to bind each profile to the related application. As for the four applications, the four profiles should be managed together, and so grouped in the same file of profiles.Files of profiles are also handy to be used in different environments: you can create different files, with the same profile names, but each profile is mapped to different entities of the organization depending on the target environment.Therefore, you could have a “profiles_dev.xml”, a “profiles_UAT.xml”, and a “profiles_prod.xml” files of profiles.Create and build a profileNote: All Bonita subscription editions come with an .xml editor for this feature. Only Enterprise, Performance and Efficiency editions also come with a graphical UI.From Bonita Studio, click on Organization -&amp;gt; Profile -&amp;gt; New…It will create an empty file of profiles with a default name and open an editor. You can rename this file from the graphical UI or from the menu Open.The profile graphical UI provided is bound to the xml source, so you can use it to build your profile without writing xml.You can switch from the graphical UI to the xml source at any moment, using the tabs Editor and Source at the bottom of the editor.A toolbar is embedded to the editor, use it to:  Add a profile to this file of profiles: you can add a new profile or duplicate an existing one from your current repository  Save this file of profiles As an other file of profiles (useful to duplicate the whole file)  Deploy this file of profiles (i.e all the profiles in this file) ⚠  For development purposes, it also deploys their referenced pages used as portal menu entries, but if those resources use REST API Extensions, you have to deploy those manually. In production environment, you still need to import pages, and REST API Extensions manually before to import the file of profiles.  Rename this file of profiles  Export this file of profiles (download the .xml)  Delete this file of profiles from your current workspace  Manage the Organization: add users / groups / roles to the organization in order to map them to this profile  Restore the default file of profiles to its initial state (only available for the file default_profile.xml)Using the graphical editor, you can set all the parameters of your profile.The profile name has to be unique in a given file of profiles, else it will lead to conflicts when you will try to deploy the file of profiles.You can duplicate a profile name in different files, but remember that you can only have one instance of a given profile in production.In the mapping section you can map Users / Groups / Roles / Memberships to your profile. You have to map your profile with elements of the active organization.⚠  Nodes in the group tree are independent ⚠  It means that mapping /acme to your profile won’t map /acme/hr to it. Each node has to be mapped individually to be taken into account. However, you can easily add a whole part of your organization, using the add subtree button:  select a node in the tree, and then click on add subtree.The portal menu entries can be edited for custom profiles.Pages proposed are those provided by default in Bonita Portal and those created with the UI Designer. You can reference a custom page only if it is imported to the portal, and you will have to write its exact identifier.The Applications section provides a quick access to the applications mapped to this profile.To map a new application to this profile, you have to open the application and then choose this profile in the profile field of the application descriptor editorEnable a profileTo enable a profile, it must be installed onto the portal. For development purposes, the Studio can deploy profiles onto the portal for you (only for Performance and Efficiency editions).On a production environment, it is done via the Organization &amp;gt; Profiles menu of the Administrator Portal.",
      "url": " /bonita/7.8/application-and-process-design/profiles/profileCreation",
      "author": "",
      "categories": "Application and Process Design, Profiles"
    }
    ,
  

    "bonita-7-8-application-and-process-design-profiles-profiles-overview": {
      "title": "Profiles overview",
      "content"     : "Profiles overviewA profile is an indirection to some entities of the organization: users, groups, roles, and/or memberships.Profiles work as permissions to give access to:  Living Applications  Defined objects and attributes of the BDM (through BDM Access Control)  Navigation (menus) of Bonita PortalOne organization entity can be mapped to several profiles. In Bonita Portal, a loggued user can switch between his/her profiles in the navigation bar.In development, to map entities of the organization to a profile, use the profile editor in Bonita Studio. In production, an administrator must use the Organization&amp;gt;Profiles menu of Bonita Portal.Default profilesUser profileAdministrator profileProcess manager profileCustom profilesDefault profilesBonita comes with 3 default profiles: User and Administrator are available in all editions ; Process Manager is available in Subscription editions only.User profileAn employee mapped to the User profile can perform everyday tasks: start cases, perform tasks, add comments to a task.A manager can also see the More details page for their team members’ tasks, by specifying the task id. To do so, display any task in the Portal, then change the task id in the URL to the id of the task you want to see. You can see only the More details view for the task, unlike in Bonita 6.x where you could also see the task form by using the task id.The manager needs only the user profile for this, not a special profile.User is the profile used in Bonita Mobile Portal. As a consequence, an employee who does not have the User profile cannot access the mobile portal.Administrator profileAn employee mapped to the Administrator profile has administration rights, including importing and exporting processes, monitoring, creating reports, live updating processes or resources, creating and modifying users, creating custom profiles, changing user memberships, creating applications, and so on.Process manager profileThis profile is available for Subscription editions only.An employee mapped to the Process manager profile has limited administration rights for activities related to the processes they manage, as defined by the Administrator.Note: In Bonita ACME organization, all users have the role Member, and the role Member is mapped to all default profiles. This simplifies process testing (log in as any user to see any Portal content).Custom profilesIn addition to the default profiles, users of Enterprise, Performance and Efficiency editions can create [custom profiles](custom-profiles.md).If a custom profile is created to give access to custom content in the portal, its Portal menu (navigation structure and pages) must also be defined in the profile.To create a custom profile, map it to entities of the organization, and create its portal menu, use the profile editor in the studio. In a production environment, an Administrator must use the Organization&amp;gt;Profiles menu.",
      "url": " /bonita/7.8/application-and-process-design/profiles/profiles-overview",
      "author": "",
      "categories": "Application and Process Design, Profiles"
    }
    ,
  

    "bonita-7-8-application-and-process-design-reporting-create-a-report": {
      "title": "Create a report",
      "content"     : "Create a reportNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.The final step when setting up reporting is to create a report template using a Business Intelligence (BI) tool.You are free to choose any BI tool to do so, but if you want to display reports inside the Bonita Portal you should design your reports using one of the following tools:  JasperReports iReport Designer - Older stable tool in maintenance mode  Jaspersoft Studio - Newer toolBonita integration guidelines and tips for Jasper reportsChange the script language to JavaAccess Bonita databaseAdd interactivity with Bonita Portal to your reportAdd style to HTML rendered reportPackage a report for Bonita Portal integrationBonita integration guidelines and tips for Jasper reportsThis documentation does not detail the use of Jaspersoft Studio but provides some guidelines for report integration in Bonita Portal. There are minor differences depending on which Japsersoft tool you are using, but these concern the user interface of the Japsersoft tools, not the Bonita behavior.For details about the use of the Jaspersoft products, please refer to their documentation:  JasperReports iReport Designer documentation  Jaspersoft Studio documentationChange the script language to JavaBy default Jasper reports use Groovy as a script language. However, Bonita Portal does not provide Groovy dependencies to the report so you need to switch the report script language to Java.This is how to do this for iReport:  In the Report inspector tree located on the left-hand side, select the root element.  In the properties table located on the right-hand side, locate the Language property and change it to Java.Access Bonita databaseIf you build a report that requires access to the Bonita database, you need to add the Bonita SQL Query Executor as a report dependency.All queries that fetch Bonita Engine data must use this query executor.This is how to add the query executor as a report dependency in iReport:  Open the Tools menu and select Options.  Make sure the iReport header is selected.  Select the Query Executers tab.  Click on the Add button.  Fill the form using the following values:Field  Value  Language  BONITASQL  Factory class  org.bonitasoft.JRBonitaJdbcQueryExecuterFactoryFields Provider class (optional)com.jaspersoft.ireport.designer.data.fieldsproviders.SQLFieldsProvider  Click on OK.  Still in the Options window, select the Classpath tab.  Click on Add JAR.  Browse to your Bonita Studio installation directory and navigate to workspace/tomcat/webapps/bonita/WEB-INF/lib/.  Select the console-server-sp-X.Y.Z.jar file, where X.Y.Z is the Bonita version.  Click on Open.Add interactivity with Bonita Portal to your reportWhen creating a report you may need to enable Bonita Portal users to interact with it.Bonita Portal integration of the Jasper report viewer makes interactivity possible by providing widgets that can control report parameters.Widgets are configured directly in the Jasper report as properties.Here is the sequence of events when an interactive Jasper report is displayed in Bonita Portal:  Bonita Portal reads the report properties and generates an HTML form containing the widgets.  The HTML code is injected as a report parameter by Bonita Portal.  The report renders the HTML code using the parameter.  The end-user can then interact with the widgets and the report is automatically re-generated if a value changes.To enable interactivity, the first thing to do is to prepare the HTML form rendering parameter and component.This is how to do this in iReport:  In the Report Inspector tree, right click on Parameters and select Add Parameter.  In the parameter properties, update the Name property to BONITA_HTML_FORM.  Drag and drop an HTML component from the Palette onto your report’s Title section.  Select the HTML component that you have added.  In the component properties, set the HTML Content Exp. property to $P{BONITA_HTML_FORM}.When the HTML form rendering parameter and component are ready, you need to set the report properties to configure the widgets that your report will integrate.All widgets share the following mandatory properties (XXX is replaced by a number used to identify the widget):PropertyMandatoryDescriptionBONITA_FORM_XXX_IDYesBase name of the report parameter that will be updated with the widget value.Special rules apply depending on the widget type (see next parameter):For a SELECT widget, the parameter name is the same as the base name.Example: if BONITA_FORM_1_ID is set to p_country then, the report parameter should be named p_country.For a DATE widget, the value will be saved to a parameter with the _from suffix.Example: if BONITA_FORM_2_ID is set to p_birthday, then the report parameter should be named p_birthday_from.For a DATE_RANGE widget, the values will be saved to two parameters: one with a _from suffix and one with a _to suffix.Example: if BONITA_FORM_3_ID is set to p_period, then the two report parameters should be named p_period_from and p_period_to.BONITA_FORM_XXX_WIDGETYesWidget type. Can be one of the following:SELECT for a drop down allowing a single selectionDATE for a date pickerDATE_RANGE for a date range picker with a start date and an end dateBONITA_FORM_XXX_LABELYesWidget labelThe SELECT widget has the following extra properties:  PropertyMandatoryDescriptionBONITA_FORM_XXX_AVAILABLE_VALUESYes: one of these two properties is requiredStatic list of available values defined in a JSON format.  Example: [{&quot;id&quot;:&quot;FR&quot;,&quot;label&quot;:&quot;France&quot;}, {&quot;id&quot;:&quot;US&quot;,&quot;label&quot;:&quot;United States of America&quot;}, {&quot;id&quot;:&quot;ES&quot;,&quot;label&quot;:&quot;Spain&quot;}]BONITA_FORM_XXX_QUERYQuery that dynamically retrieves the list of available values from the Bonita database.BONITA_FORM_XXX_HAS_ALLNoSet this to TRUE if you wish to dynamically add an &quot;All&quot; item to the list of available values. Otherwise, ignore this property.BONITA_FORM_XXX_HAS_ALL_VALUEOnly if the &quot;All&quot; item is activeSpecifies the value returned when the &quot;All&quot; item is selected.  Specifies the value returned when the “All” item is selected.The DATE and DATE_RANGE widgets have the following extra properties:  PropertyMandatoryDescription  BONITA_FORM_XXX_INITIAL_VALUEYes:  one of these two properties is requiredStatic initial value defined in the ISO format for the **DATE** widgetExample: 2015-01-28Static initial values for `_from` and `_to` parameters in the ISO format separated by ` - ` for the **DATE_RANGE** widgetExample: 2015-01-28 - 2015-02-28BONITA_FORM_XXX_QUERYQuery that dynamically retrieves the initial value from the Bonita database.  For a DATE_RANGE widget, if you name the associated parameter p_date then p_date_from and p_date_to initialvalue will automatically be set to one week before today and today respectively. Setting an initial value to thisparameter using BONITA_FORM_XXX_INITIAL_VALUE will not be taken in account.Query that dynamically retrieves the initial value from the Bonita database.Create the report properties using iReport as following:  In the Report Inspector tree, right click on the report’s name and select Properties.  In the More section, configure Properties by clicking on …  Add the properties based on the widgets you need.Here is an example of a report configuration containing a “Period” date range and a “State” select widget:Add style to HTML rendered reportTo change style of your components in the HTML rendered reports, add CSS classes to them and update global Look’n’feel as described in Bonita portal look’n’feel page.Note: If a JRTX file has been packaged inside the imported zip file, it will not be used to style HTML generated reports.Using the global CSS look’n’feel of the Bonita Portal allows to have a consistent look’n’feel between HTML reports and Bonita Portal.To add a CSS class to a component proceed as follow:  In the Component properties pane, click the Properties expression button  Add a Properties expressions:  Set Properties expressions’s name to net.sf.jasperreports.export.html.class  Set Properties expressions’s value to the wanted CSS class.  Then, implement in Bonita Portal’s look’n’feel the expected style for this CSS class.Alternatively, you can also change the HTML tag name of a component by adding a new Property in Properties expressions named  net.sf.jasperreports.export.html.tag(example: name: net.sf.jasperreports.export.html.tag value: h1)Package a report for Bonita Portal integrationIn order to integrate a Jasper report in Bonita Portal, you need to prepare a ZIP archive.The archive should contain at least the compiled Jasper report (a file with a .jasper extension).If your report requires a connection to the reporting database, the archive must contain:  The JDBC driver jar file used to connect to the reporting database. Do not include this file in the archive if the driver is already deployed at server level.  A connection.properties text file that contains the reporting database connection settings:Property  Description  dbUrl  JDBC Url to access the reporting database  dbDriverClassName  The JDBC driver’s class name  dbUser  The login of the database user  dbPassword  The password of the database userFor example, connecting to a local MySQL database named BonitaReport with a user root and password root:dbUrl=jdbc:mysql://localhost:3306/BonitaReportdbDriverClassName=com.mysql.jdbc.DriverdbUser=rootdbPassword=rootIf your report contains sub reports, these should be placed in a directory named sub.If your report uses a style sheet you may also provide a .jrtx file in the archive.Once you have packaged the Jasper report as a ZIP archive, you can install it in the Bonita Portal.",
      "url": " /bonita/7.8/application-and-process-design/reporting/create-a-report",
      "author": "",
      "categories": "Application and Process Design, Reporting"
    }
    ,
  

    "bonita-7-8-application-and-process-design-reporting-reporting-overview": {
      "title": "Reporting overview",
      "content"     : "Reporting overviewNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.This page presents an overview of reporting with Bonita.TerminologyReporting dependenciesReporting main stepsTerminologyReporting is the act of collecting and aggregating Key Performance Indicators (KPIs) to present them in reports.KPIs are defined as a set of measures that are used to assess the operational success of a business process.Reporting is also know as Business Intelligence (BI) or Business Activity Monitoring (BAM).Reporting dependenciesReporting involves Bonita and two other third-party software components:  A reporting database of your choice.  A BI tool of your choice.Reporting main stepsReporting is composed in several ordered steps.At design time:  Reporting database setup  KPI definition in Bonita Studio  Report creation in the BI toolAt execution time:  KPI collection in Bonita Engine and storage in the reporting database (this is performed automatically based on KPI definitions)  Report generation using the BI tool or Bonita Portal",
      "url": " /bonita/7.8/application-and-process-design/reporting/reporting-overview",
      "author": "",
      "categories": "Application and Process Design, Reporting"
    }
    ,
  

    "bonita-7-8-application-and-process-design-reporting-set-up-a-reporting-database": {
      "title": "Set up a reporting database",
      "content"     : "Set up a reporting databaseNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.Before you put reporting in place, you need to create a dedicated reporting database.For performance reasons, it is a best practice to isolate reporting data from live data.This installation is performed manually outside of Bonita.This documentation does not detail the installation procedure of such a database but provides some best practices.Best practices Start by identifying the KPIs you wish to track, then create the reporting database structure. You need to create the appropriate tables and columns to store the reporting data.When creating your reporting database, follow these best practices to ensure quick read/write operations:  Avoid relational structures, in order to reduce the number of joins when querying data. Prefer flat table structures, because data duplication is generally not a concern.  Do not use transactions as these can slow down read/write operations.  Only perform select/insert operations and no update/delete.",
      "url": " /bonita/7.8/application-and-process-design/reporting/set-up-a-reporting-database",
      "author": "",
      "categories": "Application and Process Design, Reporting"
    }
    ,
  

    "bonita-7-8-application-and-process-design-reporting-set-up-kpis": {
      "title": "Set up KPIs",
      "content"     : "Set up KPIsNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.This page presents two implementation options for creating KPIs and integrating them to business processes:Create a KPI using the Bonita Studio KPI featureCreate a KPI definitionAttach a KPI definition to a task or a poolConfigure the JDBC driver as a process dependencyCreate a KPI using a database connectorCreate a KPI using the Bonita Studio KPI featureThis implementation option is preferred if you do not wish to manipulate database connection settings and SQL queries manually when writing your KPI data. The Bonita Studio assists you in setting your connection and automatically generates the SQL insertion queries for you.Keep in mind that this implementation option has some drawbacks:  You can only insert one row at a time. There is no dynamic multi-row insert.  You do not benefit from pooled database connections. This has an impact on performance.In order to use the KPI feature, you need to:  Create a KPI definition  Attach the KPI definition to a task or to a pool  Configure the JDBC driver as a process dependencyCreate a KPI definitionWhen creating a KPI definition, you must specify its database connection settings and its structure.  In Bonita Studio, open the KPI menu and select **Create KPI**.  Fill in the database JDBC connection settings:  Choose the Driver template that matches your reporting database type:Click on the Apply template button. This pre-fills the Driver class name and JDBC URL fields.  Update the configuration with your database name, user name, and password:  Click on Test connection to validate your settings.  Click on Next.Fill in the KPI definition page  Provide a name for the KPI definition. This is used as a reference for the Bonita Studio developers.  Click on the Fetch tables button to select the table to which you wish to attach this KPI. This pre-fills the KPI fields based on your database structure. Alternatively, you can type the name of the database table.  Optionally, specify a description (for documentation purpose only).  Add/remove or update your KPI fields by specifying:  the name (database column name)  the SQL type as defined in the database  whether the values should be surrounded with quotes in the SQL insertion query  Click on Create.Attach a KPI definition to a task or a poolOnce you have specified a KPI definition, you may to attach it multiple times and at different levels:  Pool level - This generates KPI data either at process start or end  Task level - This generates KPI data either at task start or endFollow these instructions to attach a KPI:  In Bonita Studio, either select a task or a process pool.  In the Details panel, Execution tab, KPIs pane, click on the Add button.  Select your KPI Definition from the list  Click on Next.  Review your database connection settings and test your connection (these are imported from your KPI definition so they should be correct).  Click on Next.  Fill in the Advanced configuration page  Make sure the Database table name is correct (this field is preloaded from your KPI Definition so it should be correct).  Select the Error behavior if KPI generation fails: you can either put the process into an error state, or ignore the failure.  Pick a KPI insertion event relative to the object to which you are attaching the KPI (task or pool).  Select an Edition mode for the insertion query. Graphical mode benefits from the mapping that you have provided in the KPI definition, Manual mode will let you write an SQL query.Assuming that you have chosen the Graphical mode and clicked on Next, then configure the KPI field mapping.  Add as many rows as there are KPI fields in your Definition. For each row:  Expand the drop-down menu and choose a KPI field from your Definition.  Specify its value with an expression (a constant, a parameter, or a variable).Click on Finish.Configure the JDBC driver as a process dependencyWhen your KPIs are attached to your process, add a JDBC driver dependency to your process.  In Bonita Studio, select your process pool and click on Configure in the coolbar.  Select Process dependencies from the list on the left.  Check the .jar file of the JDBC driver that matches your reporting database.  Click on Finish.Your process is now ready to be deployed. Reporting data will be generated in the reporting database each time the KPIs are triggered.Create a KPI using a database connectorThis implementation option is better for performance and flexibility reasons:  It enables dynamic multi-row insertions, because you can use Groovy scripts to transform data and generate complex queries.  It benefits from pooled database connections for improved performances.The disadvantage with this implementation option is that it requires basic SQL knowledge because you have to write insertion queries manually.To configure this option, use a database connector to insert a row in the reporting database.Use the datasource database connector with connection pooling for improved performance.",
      "url": " /bonita/7.8/application-and-process-design/reporting/set-up-kpis",
      "author": "",
      "categories": "Application and Process Design, Reporting"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-analytics": {
      "title": "Analytics",
      "content"     : "AnalyticsNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.A report presents the Administrator with data about the usage of cases and tasks in processes.There are four reports available by default:  Case average time - export in .pdf  Case list - export in .pdf  Task list - export in .pdf  Case history - export in .csvYou can also define](/bonita_doc/bonita/7.8/application-and-process-design/reporting/reporting-overview) and . For example, you could define a report to track purchase order progress.Default reportsInstall a custom reportExport a reportManage Japanese PDF reportsDefault reportsCase average timeChoose a filter to display certain parameters:  Case average time: period, processes  Case list: period, state (all, archived, opened), processes (all)  Task list: period, state (all, archived failed, opened)Case listChoose a filter to display certain parameters:  Case average time: period, process  Case list: period, state (all, archived, opened), process (all)  Task list: period, state (all, archived failed, opened)Task list timeChoose a filter to display certain parameters:  Case average time: period, process  Case list: period, state (all, archived, opened), process (all)  Task list: period, state (all, archived failed, opened)Case historyFor Efficiency and Performance editions.This report lists human actions on cases. This enables you to analyse and standardize cases in processes.In the case history report, the format of the exported file is a .csv file. This enables the data to be sorted and filtered.ParametersIn the report, the query parameters are displayed in the Parameters section:  Date range - Period with two fields from and to or select a date  Process - Select All or a specific process and versionIf a selection is made in the Process combo box, the following combo box is displayed:  Case ID list named “Cases” &amp;gt; Select “All” or a specific case ID. This is only available when a process is selectedGenerated export displayThe generated .csv export contains the following in order of display:  Date  Time  Case ID  Process name  Process version  First name  Last name  User name  Action  Started  Skipped  Failed  DoneTask or Subtask  Parent task name (only filled if there is a subtask created for a task)  Due date  Due time  Overdue - (only filled if the task is done after the due date)Note: what is not exported in the .csv report  Comments  Human actions performed on Parameters and variablesInstall a custom reportYou can import a customized report into Bonita Portal.Custom reports are created externally using Jaspersoft Studio.Contents of a .report archive (.zip), used in JasperThe report archive (.zip) contains the Jasper file, a connection properties file and a .jar driver file.Optionally, a properties file can be added if the report is localized in different languages.Install a report created in the standard Jasper format.  Go to Analytics.  Click the Install button in the top left corner of the screen.  Name the report.  Select to your Jasper file (.zip) on your disk drive.  Click Install.ResultA report is displayed in Bonita Portal containing your data.Export a reportA report in the Bonita Portal can be exported as a .pdf file.  Go to Analytics.  Select the report that you want to export. This can be one of the default reports, or a custom report that you have installed.  Click the More button.  Click the Export button.  Specify where the report PDF file will be saved.  Click OK.Manage Japanese PDF reportsJapanese language support for reports is not provided by default. In order to display the Japanese translations in the default PDF reports, you need to download the Japanese translation my_report_ja_jp.properties file from Crowdin. If the tenant is deployed and your report has been displayed, open the directory of the report in the Bonita Home folder(bonita/client/tenants/yourTenantId/work/reports/yourReport). Then add your “ja_jp.properties” translation files to this directory. If your report has never been displayed, go to your deployed war or ear &amp;gt; WEB-INFclasses then edit your report zip file to add the Japanese properties file.",
      "url": " /bonita/7.8/bonita-portal-administration/analytics",
      "author": "",
      "categories": "Bonita Portal Administration"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-applications": {
      "title": "Applications",
      "content"     : "ApplicationsSince 7.3, some changes have been made on the default layout. Those changes live in the layout.css page asset and allow us to better handle the content layout of the page displayed. Another consequence is that it removes a margin which was automatically added at the top of each pages.With Bonita you can build an application that exactly meets your needs and interacts with processes.Instead of the standard, generic, process-centered Bonita Portal, you can create a business-centered web application that provides access to processes.You can modify the application whenever you want, and users will see the changes immediately.This means that you can rapidly adapt an application to your changing business needs or to react to user feedback.Application definitionApplication prerequisitesDeveloping an applicationDefining a new applicationDeploying an applicationUpdating an applicationApplication definitionAn application is a collection of pages and processes that meets a business need. It contains some or all of the following:  Pages: the user interface components of the application. An application must contain at least one page.  Processes: the logic execution components of the application. An application must contain at least one process. A process can contain forms, which are the user interface of the process.  REST API extensions: called from pages or forms to retrieve data to be presented to the user.  Layout: the frame in which application pages are displayed.  Theme: the appearance of application pages, including fonts and colors.Application prerequisitesAn application requires the following to be available:  The business data model (BDM) must be deployed  The organization data must be deployed, so that application users can log in.  The access authorizations that grant users access to the application resources must be defined.Developing an applicationWhen developing an application there are three independent factors to consider:  User interaction: the application interface that users see, where they read or enter information.  Logic: the processes that update data based on user actions or on other factors.  Data: the information displayed to users and manipulated by the processes.If you are developing an application from scratch, start with what users need, then define the data model, then create the processes that will manipulate the data. If you are creating an application that will use existing processes, start by considering user needs, then adjust the existing data model and processes as required to incorporate them into the application.To integrate a process into an application, you specify a link in an application page. This can either be a link to display a processes instantiation form or a task form, or it can be an API call to start a process or run a task without displaying a form.Defining a new applicationSince Bonita 7.5.0, the definition of applications can be done from the studio, which makes it more straightforward to develop and package with other application artifacts.For Enterprise, Efficiency and Performance editions, a graphical editor is provided on top of xml source code.For more details, go to Application descriptorsWhen you have developed all the resources that are used in an application, you are ready to define the application itself.The application builder is a graphical interface in Bonita Portal for specifying the application pages and defining the menus.There is a default application home page that you can adapt or replace.To define an application, you need to be logged in to Bonita Portal using the Administrator profile.You can also create a custom profile to use for creating an application. This profile must have access to the Applications page to create the application.To test the application, the user currently logged in must have the profile defined in the application.  In the menu bar, click Applications. The Applications list page is displayed, showing the applications already defined.  Click New. The Create an Application popup is displayed.  In the popup, specify information about the application:  Display name: The user-friendly name that will be used in Bonita Portal to identify the application.  URL: The URL of the home page of the application.  Version: The version number of the application. By default, this is set to 1.0, but you can set it to any alphanumeric string.  Profile: Select the profile that users must have to access the application. The drop-down list includes all the available profiles, including custom profiles.  Description: A text description of the application.Click Create.The new application is created, with the information that you specified.However, at this stage the application contains only the default home page. You must specify the pages in the application, and then define the navigation.Note: When you define the URL token for an application, you cannot use “API”,”content” or “theme” (case insensitive). Those words are reserved for internal use.Specifying application layout (Subscription editions)Each application is associated with a layout that defines the main frame of this application.To specify the application layout:  In the menu bar, click Applications. The Applications list page is displayed.  Click the edit icon (…) for the application you want to edit. The application details page is displayed.  Go to the Look &amp;amp; Feel zone.  Click in the name of the current layout.  Choose the new layout from the drop down list. Layouts must be previously deployed.  Click on the validate button.Specifying application theme (Subscription editions)Each application is associated with a theme that defines the application appearance. All pages developed with the UI Designer will automatically benefit of application theme.If you develop pages by yourself you need to include the following line in your source to get theme working &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;../theme/theme.css&quot;&amp;gt;.To specify the application theme:  In the menu bar, click Applications. The Applications list page is displayed.  Click the edit icon (…) for the application you want to edit. The application details page is displayed.  Go to the Look &amp;amp; Feel zone.  Click in the name of the current theme.  Choose the new theme from the drop down list. Themes must be previously deployed. By default, there are six Bootstrap based themes.  Click on the validate button.Specifying application pagesWhen you specify application pages, you create a mapping between the application and the pages it contains. The pages themselves must already exist.To specify the application pages:  In the menu bar, click Applications. The Applications list page is displayed.  Click the edit icon (…) for the application you want to edit. The application details page is displayed.  Go to the Pages zone. You can add a page by clicking Add and choosing a page from the popup list, and define the URL token for this page.You can remove a page by clicking the trashcan icon for that page.The pages are listed in alphabetical order.  Select the page that will be the application home page. The default home page is selected by default. To change this, click the Home icon on the row of the relevant page.Note: When you define the URL token for a page, you cannot use “API”,”content” or “theme” (case insensitive). Those words are reserved for internal use.Defining application navigationWhen you specify the navigation, you define the menu names and structure, and the pages that menu items point to. The menu hierarchy is limited to two levels, for usability.At the top level, you can specify two types of item:  A one-page menus is clickable and points to a page.  A multi-page menu is not clickable but is the container for a collection of one-page menu items.To specify the application navigation:  In the menu bar, click Applications. The Applications list page is displayed.  Click the edit icon (…) for the application you want to edit. The application details page is displayed.  Go to the Navigation zone. For example:  Specify the menu structure. At the top level, you can define one-page menus that point directly to pages (like Home in the illustration), or multi-page menus (like Holidays).If you define a multi-page menu, you can add menu items (like Trekking and Safari).  To add a top-level one-page menu, click Add, then in the popup, click One-page menu, specify the name for the menu, select the page, and click Add.  To add a top-level multi-page menu, click Add, then in the popup, click Multi-page menu, specify the name for the menu, and click Add.  To add an item to a multi-page menu, click the plus icon beside the menu name, specify the name for the menu item, choose the page from the popup, and click Add.  To delete a menu or menu item, click the trashcan icon. If you delete a menu that has children, the child entries are automatically deleted from the navigation.  To reorder menu items, drag and drop them.  Deploying an applicationTo deploy an application, you use the Bonita Portal. You need to import (or create in the Portal), the following in this order:  Organization then profiles  API extensions then pages, layout, themes  Business data model then processes  Application definitionDeploying an application means exporting it from the Portal where you developed it and importing it into another for production.When you export an application, it includes the following:  The application metadata  The layout name  The theme name  The navigation definition  The mapping of pages to the navigationIt does not include the pages, layout, or theme themselves, the business data model, the profile definition, the processes, the organization, or the authorization settings. These must all be deployed separately.Export applicationsTo export an application:  Go to the Applications page. The list of applications is displayed.  Select the application you want to export.  Click the Export icon.An XML file, Application_Data.xml, is exported.Import applicationsWhen you import an application, you import the mapping of the application to pages. For the import to be successful, any pages, layout and theme must already be loaded.If you are setting up a new production environment by importing all the data, import it in the following order:  organization  profiles  API extensions  pages  layouts  themes  business data model  processes (including forms)  applicationsYou will also need to apply any custom authorization definitions.To import applications:  Go to the Applications page. The list of applications is displayed.  Click Import.  Specify the Application_Data.xml file to upload.  Click Import.The file is imported and checked.A popup reports the status of the import. It shows the number of applications successfully imported, partially imported, or with errors.If the profile associated with an application is not defined, the application is created without any associated profile.If a page associated with the application is not present, the application is created without this page or the related navigation elements.If the specified layout and/or theme is not present, the application is created with the default layout and theme.Updating an applicationThere are two aspects to updating an application: changing the application definition and changing the resources.Updating an application definition  In the menu bar, click Applications. The Applications list page is displayed.  Click the Edit icon (…) for the application you want to edit. The application details page is displayed. From this page, you can edit the application metadata, layout, theme, pages, and navigation.  To edit the metadata, click the Edit button. In the popup, modify the information about the application, then click Save.  To edit the layout, see Specifying application layout.  To edit the theme, see Specifying application theme. Note that the end user will see this modification with a delay (due to the cache policy)  To edit the pages, go to the Pages zone. You can add a page by clicking Add. You can remove a page by clicking the trashcan icon for that page.Note that if you remove a page, the related menu items are automatically removed from the navigation.  To edit the navigation, go to the Navigation zone. You can add a menu or menu item by clicking Add. You can remove a menu or menu item by clicking the trashcan icon for that page.You can reorder menus and menu items by dragging and dropping them.  Updating application resourcesSome resources of an application can be updated live without needing to stop the processes or require users to log out of the application. Live update is primarily intended for rapid deployment of updates in a pre-production test environment. It can be used to deploy updates in a production environment, but in most production environments applications and their components are versioned, so a planned roll-out is more typical.You can use live update for the following resources:  Pages and forms  Parameters  Connectors",
      "url": " /bonita/7.8/bonita-portal-administration/applications",
      "author": "",
      "categories": "Bonita Portal Administration"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-bonita-portal-interface-about": {
      "title": "About Bonita Portal",
      "content"     : "About Bonita PortalTo see the version of the Bonita platform installed on a system:  Go to the Top menu bar.  Open the Settings menu and choose About.",
      "url": " /bonita/7.8/bonita-portal-administration/bonita-portal-interface/about",
      "author": "",
      "categories": "Bonita Portal Administration, Bonita Portal interface"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-bonita-portal-interface-bonita-bpm-portal-interface-overview": {
      "title": "Bonita Portal overview",
      "content"     : "Bonita Portal overviewMost of the Bonita Portal pages are divided into 3 main panes: left, middle and right.The left pane is for filters, the middle one for lists and the right one for more details about the selected item.Default profilesAccess to menusDefault profilesThere are three default profiles available in the Portal: User, Administrator, and (in the Efficiency, Performance and Enterprise editions) Process manager.The Administrator is responsible for the administration of the Portal at tenant level, and particularly for the management of the processes, the organization, the reports, the custom profiles and the Look &amp;amp; Feel.Example of the Administrator profile interfaceThe Process Manager shares process management responsibilities with the Administrator for the processes he has been declared as the Process Manager.The User is responsible of performing the tasks for which she is a candidate and also for starting new cases of the processes to which she has access.Example of the User profile interfaceTo know more about the use and optimization of the task list, go to User task list.Access to menusEach profile has access to a different set of single page menus or drop down menus, containing filters and action buttons related to their user rights.Note: The tenant administrator, logged as the Technical user, needs to map the Administrator profile with individuals in the company (or groups, or roles) to let the Administrator(s) manage the rest of the organization and other users. See First steps after setup/Create an Administrator user.See also Profiles overview.See also Custom profiles.",
      "url": " /bonita/7.8/bonita-portal-administration/bonita-portal-interface/bonita-bpm-portal-interface-overview",
      "author": "",
      "categories": "Bonita Portal Administration, Bonita Portal interface"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-bonita-portal-interface-languages": {
      "title": "Languages",
      "content"     : "LanguagesLanguages available by defaultSelect BPM Portal user interface languageAdd a language to Bonita PortalTranslate Bonita PortalLanguages available by defaultThe following languages are officially supported:  English (US)  French  Spanish (Latin American)  JapaneseOfficially supported language means that:  Translation is performed by Bonitasoft.  Following Bonita components are translated: Studio, UI Designer and Portal.Select BPM Portal user interface languageFor the web desktop version:  Go to the top right corner and click on Settings/Language  Select a language from the drop-down list.For the web mobile version:  Click on the Tools icon  Click on Languages  Select a new language from the drop-down listAdd a language to Bonita PortalInstructions below assume that the language you want to add is already available in the community translation project. If translation is not available see Translate Bonita Portal for instruction about how to collaborate to a new or ongoing translation.Instructions below explain how to add a language to Bonita Portal. Steps below involve using content created by Bonitasoft community and therefore not officially supported.Download the language files  Go to Bonita translation project.  Select the language you are interested in.  Make sure you click on the “Toggle Hidden Files” button  to see already fully translated files. to see already fully translated files.  Browse the file tree to 7.8.x/bonita-web/portal folder.  For each file in the folder: open it and in the File menu click on Download. Each .po/.pot file has a language indicator and a locale indicator. For example, the files for the Brazilian Portuguese language end with pt_BR.po.  For Subscription editions, you also need to get the files from 7.8.x/bonita-web-sp/portal folder.Install the files and configure java  Create a new folder depending on the situation:  [TOMCAT_HOME]/server/i18n/  [WILDFLY_HOME]/server/i18n/  [STUDIO_HOME]/workspace/tomcat/server/i18n/Copy all the .po/.pot files into the new folder just created.  Declare a new JVM property org.bonitasoft.i18n.folder and set the value to the full path to i18n folder:  Tomcat on Windows, edit the [TOMCAT_HOME]setuptomcat-templatessetenv.bat file: &quot;-Dorg.bonitasoft.i18n.folder=C:path_to_i18n_folder&quot;  Tomcat on Linux, edit the [TOMCAT_HOME]/setup/tomcat-templates/setenv.sh file: -Dorg.bonitasoft.i18n.folder=&quot;/path_to_i18n_folder&quot;  WildFly on Windows, edit the [WILDFLY_HOME]serverbinstandalone.conf.bat file.  WildFly on Linux, edit the [WILDFLY_HOME]/server/bin/standalone.conf file.  Tomcat embedded in Bonita Studio edit the appropriate .ini file and use the following syntax: -Dtomcat.extra.params=&quot;-Dorg.bonitasoft.i18n.folder=C:pathto_i18n_folder&quot;  Windows 64bit: [STUDIO_HOME]/BonitaStudioSubscription64.ini  Linux 64bit: [STUDIO_HOME]/BonitaStudioSubscription64-linux.ini  etc.  Restart your application server (or Click on Server in the Bonita Studio menu bar, click on Restart Web Server).  Check that the new language is listed in Settings menu of the Bonita Portal.Translate Bonita PortalFirst step if to go to Bonita translation project hosted on Crowdin and check if the language you want to contribute to is already listed. If it’s not, please request it by submitting an issue on our community issue tracker.If the language you want to contribute to is already listed:  If you don’t already have one, create a Crowdin account.  On the Bonita translation project page click on the language you want to translate.  At the top of the page, click on the “Join” button.  Wait for us to validate your request to join the project.  Navigate to the Portal .po/.pot files (see information in the “Add a language to Bonita Portal” section above).  Click on a file to begin the translation. You can then use the filter missing translation to only display the strings to be translated.",
      "url": " /bonita/7.8/bonita-portal-administration/bonita-portal-interface/languages",
      "author": "",
      "categories": "Bonita Portal Administration, Bonita Portal interface"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-bonita-portal-interface-log-in-and-log-out": {
      "title": "Log in and log out",
      "content"     : "Log in and log outThis page tells you how to log in as a user with a profile and rights attached to that profile.You can also switch between users with different rights,(e.g. user profile and admin profile), to access different management menus.Note: to avoid login problems, make sure you empty your browser cache Empty your cache for different browsersHow to log in as a userHow to log out and log back in as another userHow to log in as a userIf for example, you receive an email with a link to start a case or a task in the Bonita Portal, you will need to log in.  Enter the login page url, http://hostname:port/bonita/, to get to the login page as a user. The default port number is 8080.  In the user field, enter the login, and the password for this user.  Click on the Login button.How to log out and log back in as another user  Go to the Tool bar at the top of the interface.  Go to username menu (your username in the top right of the screen) and choose Logout.  This will log you out and then display the login form.  In the user field, enter the name of a different user, enter the password for this user.  Click on the Login button.Logging out will send the user back to the login page.Note: in a system that uses CAS to provide single sign-on, the administrator can remove the logout option. In this case, to log out of the portal you must log out of the CAS system or close your browser.See also First steps after setupSee also Active directory/ldap authenticationSee also Accessing Bonita Portal and forms by URL",
      "url": " /bonita/7.8/bonita-portal-administration/bonita-portal-interface/log-in-and-log-out",
      "author": "",
      "categories": "Bonita Portal Administration, Bonita Portal interface"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-bonita-portal-interface-user-task-list": {
      "title": "User task list",
      "content"     : "Users task listOverviewOverviewStarting with Bonita 7.3, users benefit from a configurable task list, to manage tasks involving human actors from all processes in a more efficient fashion.This page is also made available as a custom page in Bonita Portal &amp;gt; Resources, to be used in any application or custom profiles, for users types of profiles.Here are the values of the user task list:  Default Master/Detail design pattern, to view list and form in the same screen  Panel expand feature, to display wide forms in a large modal window  List settings: number of tasks in a page, choice of columns, columns ordering  Easy access to case information, one tab away from the form. This case information is the case overview page, that the development team can customize  Easy access to case comments, also one tab away from the form or case information  Alternate “full width” list, with task information displayed in a large modal windowThis list also leverages two legacy features (prior to Bonita 7.3.0):  Dynamic task display name, for efficient task identification (insert case information in task name)  Word-based search, for efficient task name search (search for any word in the task name)To know more about how to use both features, go to How to create unique task names for user task list.The task list also contains a Done tasks filter, for the user to check if the task has been completed properly.Note: Subtask creation has not been implemented in the task list. However, subtasks created in open cases that were started in a previous Bonita version are still available to their assignees when cases are migrated to Bonita 7.3.",
      "url": " /bonita/7.8/bonita-portal-administration/bonita-portal-interface/user-task-list",
      "author": "",
      "categories": "Bonita Portal Administration, Bonita Portal interface"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-live-update": {
      "title": "Live update",
      "content"     : "Live updateNote: For Enterprise, Performance and Efficiency editions only.This page explains how to update live process definition information. You need to be logged in with the Administrator profile.ParametersConnectorsFormsScriptsCache bustingParametersHow to modify a parameter in Administrator viewNote: In versions 7.0.x, this feature is only available for Bonita Enterprise and Performance editions. Starting from version 7.1.0, this feature is available for Bonita Enterprise, Performance and Efficiency editions.  Go to Process management  Select a process and click on the More…  Select Parameters on the left side menu  A table of parameters is displayed  In the Value column, click on the parameter value you want to edit  Edit the process variable  Click ✔ button to save itConnectorsHow to edit connector implementation in Administrator viewNote: In versions 7.0.x, this feature is only available for Bonita Enterprise and Performance editions. Starting from version 7.1.0, this feature is available for Bonita Enterprise, Performance and Efficiency editions.  Go to Process management  Select a process and click on the More…  Select Connectors on the left side menu  In the connector definitions table, in the actions column, click on the pencil button  Browse to a .zip file containing the new connector implementation  Click on Save to import the new implementation.FormsHow to add/edit a form or a page of a process in Administrator viewNote: For Bonita Enterprise, Performance and Efficiency editions.  Go to Process management  Select a process and click on the More…  Select Forms on the left side menu  Select Form List tab  In the table, in the actions column, click on the pencil button or the plus sign button  Browse to a .zip file containing the new page/form  Click on Next to check the permissions associated with the uploaded page/form.  Click on Confirm to import the new page/form.How to update the form/page mapping of a task, process overview or process instantiation in Administrator viewNote: For Bonita Enterprise, Performance and Efficiency editions.  Go to Process management  Select a process and click on the More…  Select Forms on the left side menu  In the table, click on the current mapping name of the task you want to update  Enter the name of the already uploaded page/form or a URL that will handle the task submission  Click ✔ button to save itScriptsHow to edit a script of a process in Administrator viewNote: For Bonita Enterprise, Performance and Efficiency editions.  Go to Process management  Select a process and click on the More…  Select Scripts on the left side menu  In the displayed tree, find the script you want to update or enter the script name in the înput field  Click on the pencil Button in front of the script name  Edit the script in the displayed editor  Click on Save to update the script contents.The Scripts section of the process more details page allows to update a TYPE_READ_ONLY_SCRIPT Expression or a TYPE_CONSTANT Expression when associated to a Groovy script connector Warning: The script dependencies are fixed, i.e. when the process is implemented the developer designed the script to use some variables and/or parameters. The live update capability cannot go against this design and only allows to change the script content. If the new script tries to use more variables, it will lead to execution errors. To change the script dependencies (data available in the script execution context), the process definition must be updated and a newer version of the process deployed.Cache bustingCache busting has been introduced in Bonita 7.6, along with a new cache policy.It allows end users to benefit from custom page update without the need to empty the browser cache.When you export a page or a layout from the UI Designer, we suffix the resource filename with a hash. If the page is updated, the resource filename will change, and the browser will download it from the server, and not from the cache.If you don’t use the UI Designer to edit and export your custom page, don’t forget to manually trigger the cache busting mechanism. Without this cache busting, end users won’t benefit from the latest custom page changes, unless they empty their browser cache.",
      "url": " /bonita/7.8/bonita-portal-administration/live-update",
      "author": "",
      "categories": "Bonita Portal Administration"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-look-feel-creating-a-new-look-feel": {
      "title": "Create a new Look &amp; Feel",
      "content"     : "Create a new Look &amp;amp; FeelNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.A Look &amp;amp; Feel is defined in a set of files. You can set the Look &amp;amp; Feel for the Bonita Portal Web interface, an application, a custom page, or for the Bonita Portal Mobile interface.This page explains how to modify the Look &amp;amp; Feel of Bonita Portal and of forms in processes run from the Portal.IntroductionBonita Portal Web default Look &amp;amp; FeelBonita Portal Mobile default Look &amp;amp; FeelRecommendation: Form footersIntroductionTo create a new Look &amp;amp; Feel in Bonita Portal, export the default Look &amp;amp; Feel and modify the relevant components. You can either edit the files directly, or you can use a plugin and update the Look &amp;amp; Feel in a browser. When the new Look &amp;amp; Feel is ready, import and apply the new Look &amp;amp; Feel.There are two types of page in the Portal: pages developed with GWT, as in earlier versions, and new pages, such as the Case monitoring page, that have been developed using Angular. The two types of page have different mechanisms for defining Look &amp;amp; Feel.This means that in some cases, you might need to specify a Look &amp;amp; Feel element in two places to get a consistent look for your Portal and custom pages.For GWT pages, the most critical file in the Look &amp;amp; Feel definition is skin/skin.config.less file. Any change you make to this file is automatically implemented in all the pages of the Portal or forms that do not use the Bootstrap Look &amp;amp; Feel, so this is where we recommend that you make all changes, if possible. For example:  To change the color of the menu bar, edit skin/skin.config.less and update the setting of @mainAccentColor to replace the default red (#b20706;) with the hexadecimal code for your preferred color. As an example, this file contains a line that you can uncomment to set the color to blue.  To change the font, edit skin/skin.config.less and update the setting of @skinFont to specify the font you want to use.  To replace the BonitaSoft logo with your own logo, create a transparent .PNG file with your logo and put it in the skin/images directory. Then edit skin/skin.config.less, and replace logo.png with your logo file. If your logo is not the same size as the default BonitaSoft logo, edit the loginPage-logo-width:and loginPage-logo-height: properties and specify the correct width and height.For pages developed in Angular, the Look &amp;amp; Feel is defined using Bootstrap. To modify the Look &amp;amp; Feel, update the skin definition in skinbootstrapportal for Portal pages or in skinbootstrapapplications  for applications.There are five key files that must be present in the zip archive when you import a Look &amp;amp; Feel:  BonitaConsole.html: HTML entry page for Bonita Portal. If you want to add a custom JavaScript or custom CSS, modify this file and add it to the header.  BonitaForm.html: HTML entry page for forms in Bonita Portal. If you want to add a custom JavaScript or custom CSS, modify this file and add it to the header.  main.less: Used to compile the LESS files into the CSS used for the GWT pages in the Portal. You must not rename this file, and we recommend that you do not change it.  skinbootstrapapplicationsmain.less: Used to compile the LESS files into the CSS used for applications.  skinbootstrapportalmain.less: Used to compile the LESS files into the CSS used for Portal pages developed in Angular.If you change any other file, you must test that the change has the required effect.If you have applied a custom Look &amp;amp; Feel in an earlier version, when you migrate to this version, the Look &amp;amp; Feel is automatically migrated to the new structure for both GWT and Angular pages. If you want to see how your custom Look &amp;amp; Feel is defined in this version, export the Look &amp;amp; Feel before and after migration and compare the zip files.Note: To provide you the best flexibility and adaptability, we do not run any security tests on the imported Look &amp;amp; Feel theme, so you must make sure that youdo not upload any malicious or vulnerable code. If you wish to learn more about web security and the most common web vulnerabilities, see the OWASP site.The tables below show the directories and the most important files that are present in the Look &amp;amp; Feel definition.Bonita Portal Web default Look &amp;amp; Feel| Component | Description | | —— | —— || BonitaConsole.html | HTML entry page for Bonita Portal. If you want to add a custom JavaScript or custom CSS, modify this file and add it to the header. | | BonitaForm.html | HTML entry page for forms in Bonita Portal. If you want to add a custom JavaScript or custom CSS, modify this file and add it to the header. | | bonita_ie8.css | Specific CSS content for Internet Explorer 8 support. | | main.less | Used to compile the LESS files into CSS. You must not rename this file, and we recommend that you do not change it. | | css | Directory containing default CSS files used by the process forms. | | css/bonita_forms.css | Default CSS for process forms. | | css/footer.css | CSS for footers in process forms. | | images | Directory of images. These images are the size needed for the standard layout.  If you change the layout, you might need to adjust the images sizes. If you want to use an image that is a different size, you might need to modify the layout. | | init/reset.less | For browser compatibility, do not change. | | PIE.htc | Functions required for some CSS features to work in Internet Explorer. | | scripts | Directory of scripts, including JQuery scripts.  | | skin | Contains LESS files and directories for fonts and images used in the skin. | | skin/bootstrap/applications | Customizations to Bootstrap for applications.  Change these files to modify the appearance of application pages. | | skin/bootstrap/applications/main.less | The entry point that identifies the files to be compiled to create the Bootstrap Look &amp;amp; Feel for applications. | | skin/bootstrap/portal | Customizations to Bootstrap for the Portal. Change these files to modify the appearance of Portal pages. | | skin/bootstrap/portal/main.less | The entry point that identifies the files to be compiled to create the Bootstrap Look &amp;amp; Feel for Portal pages developed with Angular. | | skin/skin.config.less | The main LESS file that defines the appearance. Change this file to modify the appearance of Bonita Portal web &amp;lt;not mobile&amp;gt;. You only need to modify the other LESS files if you want to change the behaviour of the pages. | | tools | Contains special files required for compatibility with Internet Explorer.  | | VERSION | Contains the version flag. Do not update or delete this file.  |Bonita Portal Mobile default Look &amp;amp; FeelComponent  Description  css  Directory containing CSS files.  css/jquery.mobile.structure-1.2.0.min.css  JQuery Mobile default CSS.  css/style.css  JQuery Mobile default theme CSS.  img  Directory of images. These images are the size needed for the standard layout.  If you change the layout, you might need to adjust the images sizes.  If you want to use an image that is a different size, you might need to modify the layout.  themes  Directory containing CSS files overriding the JQuery files (theme for Bonita mobile).  themes/images  Directory of images used in the themes.  themes/bonitasoft.css  Theme CSS.  themes/bonitasoft.min.css  Minified theme CSS.  Recommendation: Form footersThere are sometimes problems with the appearance of form footers after migration. If this is the case, update the moredetails.less file of the Look &amp;amp; Feel to include the following definition:#formframe, .forms-view, .forms-view .frame {  height: 100%;  width: 100%;}.forms-view .toolbar {  margin: 30px 0 40px 0;  padding: 0 35px 0 40px;}.forms-view .toolbar.empty {  margin: 0;  padding: 0;}.page_performTask .body, .page_StartProcess .body, .page_DisplayCaseForm .body {  padding-bottom: 0 !important;  margin-bottom: 0 !important;  display: block !important;  overflow: hidden;}With this definition, the form footer is displayed instead of the Portal footer, and the form’s iframe is now contained in a table row. This is recommended for easier maintenance and to avoid issues at future migrations.",
      "url": " /bonita/7.8/bonita-portal-administration/look-feel/creating-a-new-look-feel",
      "author": "",
      "categories": "Bonita Portal Administration, Look & Feel"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-look-feel-managing-look-feel": {
      "title": "Manage Look &amp; Feel",
      "content"     : "Manage Look &amp;amp; FeelNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.A Look &amp;amp; Feel defines the appearance of Bonita Portal Web interface and Bonita Portal Mobile interface.A Look &amp;amp; Feel is not used to specify Application layout and theme. To modify Application layout and theme, see Specifying application layout and Specifying application themeImport and apply a new Look &amp;amp; FeelExport the current Look &amp;amp; FeelExport the default Look &amp;amp; FeelRestore the default Look &amp;amp; FeelImport and apply a new Look &amp;amp; FeelThe Bonita Portal Web interface and the Bonita Portal Mobile interface each have a Look &amp;amp; Feel, which is defined in a set of files in a zip archive.You can create a new Look &amp;amp; Feel for one of these items. When you have created the new Look &amp;amp; Feel, you apply it using Bonita Portal, as follows:  Log into Bonita Portal as Administrator.  Go to the Configuration menu and choose Look &amp;amp; Feel.  In Filters list on the left, choose the item for which you have a new Look &amp;amp; Feel: Web Portal or Mobile Portal.  In the Import and apply a new Look &amp;amp; Feel zone, use the file chooser to specify the zip file containing the new Look &amp;amp; Feel, and then click Apply.  The new Look &amp;amp; Feel is imported and applied instantly.Export the current Look &amp;amp; FeelYou can export the current Look &amp;amp; Feel to modify it or to import it into other Bonita Portals.Exporting the Look &amp;amp; Feel creates a zip archive containing the files that make up the Look &amp;amp; Feel definition.It has no effect on the Look &amp;amp; Feel currently being used.To export the current Look &amp;amp; Feel:  Log into Bonita Portal as Administrator.  Go to the Configuration menu and choose Look &amp;amp; Feel.  In Filters list on the left, choose the item for which you want to export the Look &amp;amp; Feel: Web Portal or Mobile Portal.  In the Export the current Look &amp;amp; Feel zone, click Export.  In the pop-up, specify the zip archive name and location and click OK. The Look &amp;amp; Feel is exported into a zip archive with the name and location you specified.Export the default Look &amp;amp; FeelYou can export the default Look &amp;amp; Feel to use it as the starting point for creating your own Look &amp;amp; Feel. Exporting the Look &amp;amp; Feel creates a zip archive containing the files that make up the Look &amp;amp; Feel definition.You can always export the default Look &amp;amp; Feel, even if a customized Look &amp;amp; feel is currently in use.To export the default Look &amp;amp; Feel:  Log into Bonita Portal as Administrator.  Go to the Configuration menu and choose Look &amp;amp; Feel.  In Filters list on the left, choose the item for which you want to export the default Look &amp;amp; Feel: Web Portal or Mobile Portal.  In the Export the default Look &amp;amp; Feel zone, click Export.  In the pop-up, specify the zip archive name and location and click OK. The default Look &amp;amp; Feel is exported into a zip archive with the name and location you specified.Restore the default Look &amp;amp; FeelRestoring the default Look &amp;amp; Feel replaces the Look &amp;amp; Feel that is currently in use with the default Look &amp;amp; Feel provided with Bonita.Warning: restoring the default Look &amp;amp; Feel overwrites the current Look &amp;amp; Feel. If you want to keep a copy of the current Look &amp;amp; Feel, export it into a .zip archive before you restore the default.To restore the default Look &amp;amp; Feel:  Log into Bonita Portal as Administrator.  Go to the Configuration menu and choose Look &amp;amp; Feel.  In Filters list on the left, choose the item for which you want to restore the default Look &amp;amp; Feel: Web Portal or Mobile Portal.  In the Restore the default Look &amp;amp; Feel zone, click Restore.  The default Look &amp;amp; Feel is restored.If you have a REST client in your browser (for example a plugin for Chrome or Firefox), you can restore the default Look &amp;amp; Feel using the Web REST API.This is useful if you have accidentally loaded a Look &amp;amp; Feel that contains errors and the Restore button is not usable. To restore the Look &amp;amp; Feel using a REST client:  Use the REST client to log in as a registered user of the Engine.  Create a PUT request of the form http://localhost:8080/bonita/API/portal/theme/default, specifying the relevant hostname and port number.  In the request body, specify {&quot;type&quot;:&quot;portal&quot;} to restore the web Look &amp;amp; Feel, or{&quot;type&quot;:&quot;mobile&quot;} to restore the mobile Look &amp;amp; Feel.  Send the request. This will restore the default Look &amp;amp; Feel.The next time you load a Portal page, the default Look &amp;amp; Feel is used.Restoring the default Look &amp;amp; Feel with a REST clientIt is also possible to restore the default Look &amp;amp; Feel using the Bonita Engine API.",
      "url": " /bonita/7.8/bonita-portal-administration/look-feel/managing-look-feel",
      "author": "",
      "categories": "Bonita Portal Administration, Look & Feel"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-mobile-portal": {
      "title": "Mobile Portal",
      "content"     : "Mobile PortalThe mobile version of Bonita Portal only displays functions available to the logged-in user only. Functions for other profiles are not available.Security loginDo I need a special license?What deployment bundle do I need to access the mobile version?How do I access it?ProfileMobile languageNavigationWhat menus and functions are available?Start a new caseSecurity loginUse the same user login and password as Bonita Portal (based on the same database)Do I need a special license?You will need an Efficiency license (and above) to run the mobile versionWhat deployment bundle do I need to access the mobile version?Bonita Subscription Pack editionHow do I access it?Add /mobile after Bonita in the URLFor example: http://localhost:8080/bonita/mobileProfileOnly the user profile is available.Mobile language  How do I change the language of the mobile interface  You need to change the language in the Bonita Portal firstsee LanguagesNavigationThe navigation is slightly different from the Portal (first choose a filter to list corresponding tasks, then click on a task in the list to display it).Note: to display forms properly in the mobile version, only create a form with one column. If more than one column is used in a form design, then you will have to right scroll to display all the form.What menus and functions are available?Display and perform tasks, create subtasks, add comments.Start a new caseYou can now start a case from the mobile version. Click Apps to see a list of the processes for which you can start a case. Click on an App to start a case.Here some examples of the mobile user screens: ![Mobile_interface  ![Mobile_interface  ![Mobile_interface  ![Mobile_interface  ![Mobile_interface  ![Mobile_interface  ![Mobile_interface  ![Mobile_interface ",
      "url": " /bonita/7.8/bonita-portal-administration/mobile-portal",
      "author": "",
      "categories": "Bonita Portal Administration"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-organization-in-bonita-portal-organization-in-bonita-bpm-portal-overview": {
      "title": "Organization in Bonita Portal overview",
      "content"     : "Organization in Bonita Portal overviewIn Bonita Portal, a user with the Administrator profile active can view all the parts of an organization including:  the parent groups  child groups  the number and list of users in a group  the manager of each user  the email address of a user  the date and time of the user’s last login  the roles created and the number of users with that roleThe Administrator has the right to:  import an organization exported from Bonita Studio  export an organization from Bonita Portal  create and delete groups  create and delete roles  create and manage users and manage membershipsDeveloper environment: When you are testing a process locally by running it from Bonita Studio, the default organization defined in the Studio is automatically published to the Bonita Portal.Production environment: When you first launch Bonita Portal in a Production environment, there is no default organization.You must create a user with the Administrator profile. This user can than create and manage the organization.",
      "url": " /bonita/7.8/bonita-portal-administration/organization-in-bonita-portal/organization-in-bonita-bpm-portal-overview",
      "author": "",
      "categories": "Bonita Portal Administration, Organization in Bonita Portal"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-organization-in-bonita-portal-organization-maintenance-custom-user-information-in-bonita-bpm-portal": {
      "title": "Custom User Information in Bonita Portal",
      "content"     : "Custom User Information in Bonita PortalOverviewHow to view custom information for a userHow to edit Custom information for a single userOverviewCustom User Information defined in the Organization in Bonita Studio is displayed in the Bonita Portal in the More page for a user (only accessible under the Administrator profile).The Users with custom information filter in Bonita Studio uses this custom information to map which users can perform tasks in the Bonita Portal.In Bonita Portal, this custom information can only be accessed and edited by a user (Administrator profile only).Note: if no customer user definitions are set in Bonita Studio, then no information will be displayed in the Bonita Portal. However definitions can be added and modified manually and using the WEB REST APINote: the custom user definition cannot be modified in Bonita Portal by the admin. The custom value for a user can be modified by the Administrator.This gives flexibility to the admin to re-assign tasks to different users.The Organization .xml file can also be exported from Bonita Portal, and modified by hand externally, then re-imported back into Bonita Portal.The API can also modify the organization.See Custom User Information in Bonita StudioHow to view custom information for a user  Log on as a user with&amp;gt;Administrator rights.  Go to the Organization menu and choose Users.  Select a user in the list, by clicking on a name.  Click More.  The custom user definition and value are displayed in the zone called Other.How to edit Custom information for a single user  **Log on ** as a user with Administrator rights.Go to the Organization menu and choose Users.Select a user in the list, by clicking on a name.  Click More.  The custom user definition and value are displayed in the zone called Other.  Click Edit user in the top right corner of the screen.  In the Edit a user pop-up window, click on the Other tab.  Enter a value for the definition (defined in Bonita Studio), which will only be added to this user.  Click Save. This closes the pop-up.  The new value for the the definition will be updated and displayed in the Other zone.Note that changing the value will modify the filtering and map the user to a different task.",
      "url": " /bonita/7.8/bonita-portal-administration/organization-in-bonita-portal/organization-maintenance/custom-user-information-in-bonita-bpm-portal",
      "author": "",
      "categories": "Bonita Portal Administration, Organization in Bonita Portal, Organization maintenance"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-organization-in-bonita-portal-organization-maintenance-group": {
      "title": "Manage groups",
      "content"     : "Manage groupsLogged on with the Administrator profile, you have rights to manage groups as follows:How to create a groupHow to delete a groupHow to edit a groupMore information about the groupHow to create a group  Go to the Organization menu and choose Groups.  Click Create a group.  In the pop-up window, enter the name (required), the parent group and a description.  Click Create.NB: Bonita doesn’t support the ‘/’ character in the group name field. A group name that contains a ‘/’ may lead to unstable behaviour and may be forbidden in the future.How to delete a group  Go to the Organization menu and choose Groups.  Check a box to select a group.  Click Delete.  In the popup window, click Delete.How to edit a group  Go to the Organization menu and choose Groups.  Check a box to select a group.  Click Edit.  In the popup window, update the group information.  Click Save.More information about the group  Go to the Organization menu and choose Groups.  Click on a group in the list of groups. A list of users and subgroups in this group is displayed.  In the Direct users list, you can click a user name to get more information about the user.",
      "url": " /bonita/7.8/bonita-portal-administration/organization-in-bonita-portal/organization-maintenance/group",
      "author": "",
      "categories": "Bonita Portal Administration, Organization in Bonita Portal, Organization maintenance"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-organization-in-bonita-portal-organization-maintenance-import-export-an-organization": {
      "title": "Import/export an organization",
      "content"     : "Import/export an organizationLogged on with the Administrator profile, you have rights to import or export an organization.How to import an organizationHow to export an organizationHow to import an organizationCaution:This will import a file containing your whole organization data. This organization data will be merged with existing data.In case of conflict, the priority is given to the data in the imported file. Take care not to overwrite information that has been updated in Bonita Portal.Note:In 6.3 there was a change to the structure of the .xml file. This means that you cannot import into Bonita Portal 6.3.0 or later an organization .xml file that was created in 6.2.x or earlier.You will need to first import the organization file into Bonita Studio and re-export it, so it is compatible.To import an organization in .xml format, that has already been exported from Bonita Studio, containing your whole organization data.Be careful, your organization will be merged with existing data.  Go to Organization &amp;gt; Import/Export.  Click Click here to choose your file. The xml file will be displayed in the import file field.  Click Import.  Click Save.How to export an organization  Go to Organization &amp;gt; Import/Export.  Click Export.This will export an organization from Bonita Portal. Users, groups and roles will be exported in a file in .xml format.See the video..",
      "url": " /bonita/7.8/bonita-portal-administration/organization-in-bonita-portal/organization-maintenance/import-export-an-organization",
      "author": "",
      "categories": "Bonita Portal Administration, Organization in Bonita Portal, Organization maintenance"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-organization-in-bonita-portal-organization-maintenance-manage-users-deactivate-a-user": {
      "title": "Deactivate a user",
      "content"     : "Deactivate a userNote: If a user is deactivated, the user cannot log in to Bonita Portal. The Administrator cannot add a membership to a deactivated user. In consequence, the **Add membership button ** is not displayed for a deactivated user.How to deactivate a userHow to activate a deactivated userHow to deactivate a user  Go to the Organization menu and choose Users.  Select a user in the Active list.  Click Deactivate.  A warning message is displayed:Warning: You risk interrupting one or more processes.Deactivating the only user able to perform a task will cause the interruption of a process.Before proceeding, you may want to go to the ‘More’ page of the process and check the actor mapping.Are you sure you want to deactivate this user now?  The user is moved from the Active list to the Inactive list.How to activate a deactivated user  Go to the Organization menu and choose Users.  Go to the Inactive list.  Select user from list.  Click activate.  The user is moved from the Inactive list to the Active list.",
      "url": " /bonita/7.8/bonita-portal-administration/organization-in-bonita-portal/organization-maintenance/manage-users/deactivate-a-user",
      "author": "",
      "categories": "Bonita Portal Administration, Organization in Bonita Portal, Organization maintenance, Manage users"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-organization-in-bonita-portal-organization-maintenance-manage-users-manage-a-user": {
      "title": "Manage a user",
      "content"     : "Manage a userLogged on with the Administrator profile, you have rights to manage users as follows.How to create a userHow to edit a userHow to add a membership to a userHow to delete membership of a userHow to edit user rightsHow to create a userReminder: do not create a user with the same login and password as the platform user or the tenant administration (also called the technical user).  In the Portal, go to the Organization menu and choose Users.  Click Create a user.  In the pop-up window, enter the login, password, first name and last name of the new user.  Click Create to confirm the creation.  A page is displayed confirming the information about the new user.How to edit a user  Go to the Organization menu and choose Users.  Click on a user.  Click More.  Click Edit user.  Edit the details about the user in the popup window.  Click Save.How to add a membership to a user  Go to the Organization menu and choose Users.  Click More.  Click Add membership.  In the pop-up window, enter the group and role.  Click Add.How to delete membership of a user  Go to the Organization menu and choose Users.  Click More.  In the Membership table, find the membership to be deleted and click Delete.  In the pop-up window, click Delete.How to edit user rightsThe rights of a user are defined by mapping the user to a profile.To map a user to a profile:  Go to the Organization menu and choose Profiles.  Select a profile.  Click More.  In the Users mapping section, click Add a user.  in the popup, click the checkbox to select the user to add.  Click Add.The user is mapped to the profile.To see all the profiles that are mapped to a user, go to the Organization menu, choose Users and then select the user. The mapped profiles are shown in the Profile section on the right.",
      "url": " /bonita/7.8/bonita-portal-administration/organization-in-bonita-portal/organization-maintenance/manage-users/manage-a-user",
      "author": "",
      "categories": "Bonita Portal Administration, Organization in Bonita Portal, Organization maintenance, Manage users"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-organization-in-bonita-portal-organization-maintenance-role": {
      "title": "Manage roles",
      "content"     : "Manage rolesLogged on with the Administrator profile, you have rights to manage roles as follows:Create a roleAssign a role to a userEdit a roleDelete a roleMore information about a roleCreate a role  Go to the Organization menu and choose Roles.  Click on the Create a role button in the top left corner.  In the pop-up window, enter the avatar (picture) to represent the role (optional).  Enter the name, the display name, and a description of the role.  Click Create. The new role will be displayed in the list of roles.Assign a role to a user  Go to the Organization menu and choose Users. The list of users in the organization will be displayed.  Click on a User.  Click on More  In Memberships, click Add.  Choose the group and role for the user.  Click Add.Edit a role  Go to the Organization menu and choose Roles.  Click a checkbox to select a role.  Click Edit.  In the popup window, update the role information.  Click Save.Delete a role  Go to the Organization menu and choose Roles.  Click a checkbox to select a role.  Click Delete.  In the popup window, click Delete.More information about a role  Go to the Organization menu and choose Roles.  Click a checkbox to select a role. A list of users who have this role is displayed.",
      "url": " /bonita/7.8/bonita-portal-administration/organization-in-bonita-portal/organization-maintenance/role",
      "author": "",
      "categories": "Bonita Portal Administration, Organization in Bonita Portal, Organization maintenance"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-process-maintenance-bdm-management-in-bonita-bpm-portal": {
      "title": "BDM Management in Bonita Portal",
      "content"     : "BDM Management in Bonita PortalProcesses using Business Objects with persisted data need to run with a Business Data Model deployed in the Bonita Portal.Only one model can be deployed at a time in the Portal, so make sure it contains the Business object definition used in all processes that will run within this tenant.The Business objects must match the structure used by the deployed processes. Make sure that when modifying the Business Model, the process is modified accordingly.  To import the Business Data Model created in Bonita  Studio, first export the Business Data Model from Bonita  Studio where it was designed.  In the Bonita  Portal, log in as the technical user (default login ‘install’, default password ‘install’).  Go to the BPM Services menu.  Click on Pause to pause the tenant. Note: The deployment of a Business Data Model requires pausing the service during the operation, so that the update can be performed without affecting ongoing processes.  For Enterprise, Efficiency and Performance editions, you must have no access control file installed in order to be able to install or update the Business Data Model.  When services are paused, go to the BDM menu.  A page called Business Data Model definition is displayed.  Click on install button and choose the file containing the Business Data Model exported from Bonita Studio, and click on install button in the popup.  A warning is displayed: Warning: The Business Data Model will now be installed.Please note that existing business database tables will be modified definitively. This action cannot be reversed. It is highly recommended to back up the database before proceeding.  The Portal will load the file, retrieve the object definition and enable processes to use them at runtime. The portal will also create or update the database schema (set of tables, columns, indexes…)in the business database, so as to store business objects appropriately when modified by processes.  The Business Data Model will now be installed.  Go to the BPM Services menu.  Click on Resume to resume tenant activity. Warning:  Since business continually evolves, you may need to make some changes to a BDM already in production.Bonita uses Hibernate for data persistence, therefore some changes are handled well, like adding new objects or attributes, but some others, like changing the type of an attribute, we cannot guarantee so far.In such cases, you will have to implement the change on your own, through careful actions in a staging environment, and after the backup of your database.This limitation is well known and will be addressed in a future Bonita version.Note: For Enterprise, Efficiency and Performance editions only.It is possible to define Business Data Model access control rules in Bonita Studio and import them in Bonita Portal.The Access control rules must match the Business Data model.  To import the BDM access control rules created in Bonita Studio, first export the Access Control file from Bonita Studio where it was designed.  In the Bonita Portal, log in as the technical user (default login ‘install’, default password ‘install’) or as a user with the administrator profile.  As the tenant technical user or as an administrator, go to the BDM menu.  A page with a section Business Data Model access control is displayed.  Click Install to open import popup and choose the file containing the Business Data Model access control definition exported from Bonita Studio, and click on Install.  A successful import message will be displayed.Please note that a delay is required after the import for the engine to process the access control and for the filtering to be effective. Note: Contrary to the BDM definition, the deployment of a Business Data Model access control file doesn’t require pausing the BPM services during the operation.",
      "url": " /bonita/7.8/bonita-portal-administration/process-maintenance/bdm-management-in-bonita-bpm-portal",
      "author": "",
      "categories": "Bonita Portal Administration, Process maintenance"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-process-maintenance-cases": {
      "title": "Cases",
      "content"     : "CasesLogged on with the Administrator or Process Manager profile, you have rights to manage a case as follows:Add a comment to a caseStart a case for another userView status of casesAdd a comment to a case  Go to BPM &amp;gt; Cases  Click a Case id or ellipsis icon.  Enter a comment in the comment field  Click Add commentStart a case for another userThis feature is available with the Efficiency, Performance and Enterprise editions.To start a case for another user:  Go to BPM &amp;gt; Processes.  Select the process and click Start for.  In the popup, specify the user for whom you are starting the case. Only valid users for the case are displayed.  Click Start.The case is started as though the specified user had started it. For example, if a you start a case for user A and a subsequent task is to be done by the manager of the user, it is assigned to user A’s manager, not to your manager.View status of casesTo view the open or archived cases, go to BPM &amp;gt; Cases. The case table is displayed, showing the open cases. To switch between Open cases and Archived cases cases, use the tabs.In a row in the table, you can click a case id or the ellipsis icon to open the case details page, or click the process name to open the process details page.You can change the view to see only the information that you need:  View the cases of a specified process, by selecting the process name, or name and version, from the dropdown lists.  Search indexes are also available as additional columns. In this way, you can use search indexes for adding business information to your cases. It is also possible to search on search indexes values.  Filter the cases by state, by choosing With failures or All from the State dropdown list. The Failed tasks column shows the number of failed tasks and tasks where a connector has failed when starting or ending a case. A connector failure at a task is counted as a task failure. Connector failures on case start or end are shown by an exclamation point (!).  Add or remove a column in the table, by selecting or deselecting it in the Columns menu.  Change the column order, by dragging and dropping the column name in the Columns menu.  Sort the table in ascending or descending order of one of the columns, by clicking arrow beside the column header. If the table is already sorted by the column you select, the first click reverses the sort order. If the table is currently sorted by some other column, clicking the header sorts by this column in ascending order. You can then click on the arrow to reverse the sort order.These changes to the view are stored in your browser Local Storage: If you navigate away from the page then go back, the view will be as you configured it. If you reload the page, or close and reopen the same browser, your stored changes will be reapplied. If you want to go back to the default view settings, clear your browser cache and local storage.From this table, you can delete a cases, or several cases. Select the cases you want to delete, and click Delete. Confirm in the popup that you want to delete the selected cases.if you are using the Enterprise, Performance or Efficiency edition, you can also open a diagram of a case, by clicking on the picture icon for the case. On the diagram, colored flags on the steps show the number of step instances in the possible states. Click Show key to see an explanation of the display. Remember that a failure at a step does not necessarily mean that the case has failed entirely, but it might indicate that some action is needed, perhaps to replay a connector.The process diagram is constructed from the deployed process definition. This means that some details visible in Bonita Studio, such as comments, are not available.Note: if a process was deployed from a bar file created in Bonita Studio 6.3 or earlier, the diagram display is not available. This is because some details of the .bar structure have changed. To see the diagram for such a process, export the process definition from Bonita Studio 6.3 as a .bos file, import it into Bonita Studio 6.4 or later, generate a new .bar file, and deploy it.",
      "url": " /bonita/7.8/bonita-portal-administration/process-maintenance/cases",
      "author": "",
      "categories": "Bonita Portal Administration, Process maintenance"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-process-maintenance-monitoring": {
      "title": "Monitoring",
      "content"     : "MonitoringNote: For Enterprise, Performance and Efficiency editions only.Monitoring gives information relative to a process.This is only available to the Administrator and Process Manager profile.Go to Process management &amp;gt; Monitoring for Administrator and Monitoring for Process Manager.The Monitor open cases page is displayed, with the following summary information:  Number of cases with failure  Number of healthy cases  Number of open cases  A table of open casesYou can filter the table to show only a specified process, or process and version. You can also filter it by case state.Process Manager users can see only the processes they manage.From a row in the table, you can click the list icon to see a list of cases of the process. You can also open a diagram of a process, by clicking on the picture icon for the process. On the diagram, you can see that number and state of cases in progress at each step.Click Show key to see an explanation of the display.The process diagram is constructed from the deployed process definition. This means that some details visible in Bonita Studio, such as comments, are not available.Note: if a process was deployed from a bar file created in Bonita Studio 6.3 or earlier, the diagram display is not available. This is because some details of the .bar structure have changed. To see the diagram for such a process, export the process definition from Bonita Studio 6.3 as a .bos file, import it into Bonita Studio 6.4 or later, generate a new .bar file, and deploy it.",
      "url": " /bonita/7.8/bonita-portal-administration/process-maintenance/monitoring",
      "author": "",
      "categories": "Bonita Portal Administration, Process maintenance"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-process-maintenance-pause-and-resume-bpm-services": {
      "title": "Pause and resume services",
      "content"     : "Pause and resume BPM servicesFor certain maintenance tasks that require a change to database tables or to information used by several processes (for example to update the business data model), it is necessary to pause your Bonita service temporarily while it is updated. This is done by pausing the tenant. While a tenant is paused, only the technical user has access to Bonita Portal.When you pause a tenant, this has the following consequences:  Only the technical user can log in to the Portal.  Users who are currently logged in, including Administrator users, are automatically logged out.  Users who are filling in forms when the service is paused will lose any information that has not been submitted.  All processes are automatically paused.The following sections explain how to pause and resume service in a tenant using Bonita Portal. You can also use the Engine API or the Web REST API.Pause a tenantResume a tenantPause a tenantTo pause a tenant:  Log in to Bonita Portal as the tenant technical user.  Go to Configuration &amp;gt; BPM services  Click the Pause button.  In the popup, click Pause to confirmation that the tenant is to be paused.  The tenant is immediately paused.Resume a tenant  Log in to Bonita Portal as the tenant technical user.  Go to Configuration &amp;gt; BPM services  Click the Resume button.  In the popup, click Resume to confirm that you want the tenant to resume service.  The tenant resumes activity.After the service is resumed, inform users that they can now log in to the Portal.",
      "url": " /bonita/7.8/bonita-portal-administration/process-maintenance/pause-and-resume-bpm-services",
      "author": "",
      "categories": "Bonita Portal Administration, Process maintenance"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-process-maintenance-processes": {
      "title": "Processes",
      "content"     : "ProcessesLogged on with the Administrator profile, you have rights to manage a process as follows.Install a new processResolve a processEnable a processDisable a processDelete a processCreate a category for a processAdd a category to a processMake start a process available for more usersRemove an entity from an actorModify a parameter in the Administrator profileEdit a connector implementationFix formsUpload a new formEdit an existing formEdit a script contentInstall a new process  Go to the BPM tab  Click Processes  Click Install new process  Click to browse to the .bar file to import  Click InstallThe .bar file is ready to be resolved and enabledNote: if you try to install the same process twice, a message is displayed: “Process [yourProcessName] in version [yourProcessVersion] already exists.”You can only install a .bar file that was exported from a Bonita Studio of the same minor (7.x) version as your Bonita Portal and Bonita Engine. If you have a .bar file that was exported from an earlier version of Bonita Studio (7.x-1), it will not work with Bonita Engine. Export the process definition as a .bos file from your old Bonita Studio, import in into the new Studio, then export it as a .bar. This is necessary for a .bar that has not been deployed. A process that was developed in an older version of Bonita Studio and is already deployed is migrated automatically when you migrate your platform. However, for future maintenance of the process definition, you are recommended to update all your process bar files to the latest version each time you update your platform.Watch the Install a process videoResolve a processResolving a process means completing the configuration in the Portal and making sure that all dependencies are met. A process has to be resolved before it can be enabled.To resolve a process, you must complete the configuration of the actor mappings, parameters, forms, and connectors defined for the process. You can also configure other information such as Categories and Scripts, but this is not mandatory for resolving a process.  Actor mapping; Every actor in a process must be mapped to at least one user, group, role or membership.  Parameters: Every parameter defined in a process must have a value.  Connector definitions: Every connector definition in a process must have a corresponding Class name.  Business Data Model: Every business data object defined in a process must have a corresponding model.  Forms: Every form defined in a process must be mapped to a page or a URL.To resolve a process:  Go to BPM tab.  Click Processes,  Click on a Process. The Configuration section of the right panel shows whether there are items to be resolved.  Click on More.  A summary of configuration problems is displayed below the process name in a well and warning icons are displayed in the left navigation list.  Modify your configuration for each element displayed.Enable a process  Go to the BPM menu tab  Click Processes  Click Resolved filter  Select the process  Click More button  Click Enable  The activation state changes to “enabled”  The process disappears from the disabled filter and is now displayed in the enabled filterNote: You can also select the processes you want to enable by checking the box in the Resolved list, then click ENABLE button in the bulk actions sectionDisable a processDisabling a process blocks the creation of new cases. This does not impact existing cases.  Go to the BPM tab  Click Processes  Click Enabled filter  Select the process  Click Disable  The activation state changes to “disabled”  The process disappears from enabled filter and is located in the disabled filterNote: You can also disable a process in the more details view, by clicking Enabled toggle button.Delete a processNote:A process must be disabled before it can be deleted.  Go to BPM menu tab  Click Processes  Select the process to delete by checking the tickbox next to the process  Click DeleteYou can also delete the process in the more details view of a disabled process by clicking DELETE, then click DELETE in the modal windowCreate a category for a process  Go to BPM tab  Select a process in the list  Click More  In General, click the pencil next to Categories label  In the opened modal, type a new category name then press Enter key  Click SaveAfter you created a category and added to the process, you can add other processes to the category.Add a category to a process  Go to BPM tab  Select a process in the list  Click More  In General, click the pencil next to Categories label  In the opened modal, type a new category name then press Enter key, or use arrow keys to browse among exisiting categories  Click SaveMake start a process available for more usersYou need to map more organization entities to the actor labelled initiator in the process definition. To do so:  Go to the BPM tab.  Click Processes.  Select a process in the list.  Click More.  Click Actors in the left navigation.  In the Actors section, click the + button in the user, group, role or membership column of the actor line.  In the opened popup, click on the dropdown list to select one or several actors. The list displays the first five elements, then a number is displayed representing the other selected entities.  Click APPLY.Note: Notice that only the first 200 actors are displayed in the dropdown.Remove an entity from an actor  Go to the BPM tab.  Click Processes.  Select a process in the list.  Click More.  Click Actors in the left navigation.  In the Actors section, click the pencil button in the user, group, role or membership column of the actor line.  In the opened popup, there is a list of the actors already mapped.  Click the X button next to the actor, or click Remove all.  A list appears filled with the actors you can to remove. You can undo a removal by clicking X button next to the actor or by clicking Enable all  Click APPLY.Modify a parameter in the Administrator profileNote: In versions 7.0.x, this feature is only available for Bonita Enterprise and Performance editions. Starting from version 7.1.0, this feature is available for Bonita Enterprise, Performance and Efficiency editions.  Go to the BPM tab  Click Processes  Select a process  Click MORE  Click Parameters in the left navigation  In the Value column, click on the value you want to edit  A field appears  Click the Tick button to validate your change or X to dismiss your change.Edit a connector implementationNote: In versions 7.0.x, this feature is only available for Bonita Enterprise and Performance editions. Starting from version 7.1.0, this feature is available for Bonita Enterprise, Performance and Efficiency editions.  Go to the BPM tab  Click Processes  Click More button  Click Connectors  In the connector definitions table, in the actions column, click on the Pencil  Browse to a .zip file containing the new connector implementation  Click Save to import the new implementation.Fix formsNote: For Bonita Enterprise, Performance and Efficiency editions only.  Go to the BPM tab.  Click Processes.  Click More button.  Click Forms in the left navigation.  The tables are displayed which list available forms. Click on a red link.  A field input appears.  Starting to type some text, and any matching names of installed forms will be proposed. If there is no match for the name you enter, it will be considered as a URL.  Click the Tick button to validate your change or X to dismiss your change.Note: You can also upload a form in order to create a new mapping.Upload a new formNote: For Bonita Enterprise, Performance and Efficiency editions only.  Go to the BPM tab.  Click Processes.  Click More button.  Click Forms in the left navigation.  Click Form list tab.  A list of form is displayed. These forms are only visible to the current process.  Click the plus button at the bottom of the list.  A file selector popup is displayed.  Browse to a .zip containing a form.  Click NEXT, then if your form requires some authorization, it will be displayed.  Click CONFIRM.Edit an existing formNote: For Bonita Enterprise, Performance and Efficiency editions only.  Go to the BPM tab.  Click Processes.  Click More button.  Click Forms in the left navigation.  Click Form list tab.  A list of forms is displayed. These forms are only visible to the current process.  Click the pencil button of a form line.  A file selector popup is displayed.  Browse to a .zip containing a form  Click NEXT, then if your form requires some authorization, it will be displayed.  Click CONFIRM.Edit a script contentNote: For Bonita Enterprise, Performance and Efficiency editions only.  Go to the BPM tab  Click Processes  Click More button  Click Scripts in the left navigation  A script content tree is displayed.  You can search for a script by typing text in the dedicated field  Click the pencil button next to a script name  A popup window is displayed  Edit your script content  Click SAVE",
      "url": " /bonita/7.8/bonita-portal-administration/process-maintenance/processes",
      "author": "",
      "categories": "Bonita Portal Administration, Process maintenance"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-process-maintenance-subtasks": {
      "title": "Subtasks",
      "content"     : "SubtasksIn Bonita 6.x and up to Bonita 7.2.x, for Enterprise, Performance and Efficiency editions only, it was possible for a user to add a subtask to a task, for example to track an external or off-line activity that needed to be completed before the task itself could be completed.Starting from Bonita 7.3.0, creating subtasks is no longer possible.However, if a process instance has been started in a Bonita 7.2.x version or earlier, if a user has created subtasks, and if the Bonita Platform has been migrated to 7.3.0 or a later version while the case was open, then after migration the subtasks will still be visible to the users assigned to the subtasks, and they will still be able to complete them.To know more about subtasks, please refer to [7.2 documentation].",
      "url": " /bonita/7.8/bonita-portal-administration/process-maintenance/subtasks",
      "author": "",
      "categories": "Bonita Portal Administration, Process maintenance"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-process-maintenance-tasks": {
      "title": "Tasks",
      "content"     : "TasksLogged on with the Administrator or Process Manager profile, you have rights to manage a task as follows.Assign a taskUnassign a taskDo a task for another userSkip a failed taskReplay a failed taskView the failure stack-trace message on a failed taskAssign a taskA task can be assigned and reassigned if necessary to another user.  Go to BPM &amp;gt; Tasks  Click on a task in the list of tasks  Click AssignUnassign a task  Go to BPM &amp;gt; Tasks  Click on a task in the list of tasks  Click UnassignDo a task for another userWith the Efficiency, Performance and Enterprise editions, an Administrator can do a task for another user. This is useful for unblocking a case if the assigned user cannot perform a task.  Go to BPM &amp;gt; Tasks and view the list of pending Human tasks.  Select the relevant task in the list and click Do for.  In the popup, a list of users elligible to do the task is displayed.  Select the user for whom you want to do the task, and click Do it.The task is done as though the selected user has done it.Skip a failed taskIf a failed task does not impact subsequent task in a process, the Administrator can skip it. This means that the task does not have to be done successfully for the following steps to become available.  Go to BPM &amp;gt; Tasks.  Go to Failed.  Click on a Task.  Click More.  In Technical details, the reason for the failure is displayed  Click Skip.The task is moved from Failed to Done.Replay a failed taskThis feature is available with the Enterprise or the Performance edition.  Go to BPM &amp;gt; Tasks.  Go to Failed.  Click on a Task  In technical details, the details of the failure are displayed  Correct the reason for the error e.g. Connector parameters.  Click More.  Click Replay.  In the popup window **Replay task **, tick the task which failed.  Click Replay.Note: You will need to fix any parameter causing the failure, BEFORE clicking on Replay.See Modify a parameterView the failure stack-trace message on a failed taskNormally, a user will start a case of a process. The case might not start as expected. This is a called a faliure.In this case the Admin can check the failure on a connector:  Logged in as Admin, go to BPM &amp;gt; Tasks &amp;gt; Failed  On the Failed page, in the section Technical details, this shows the Connector has failed.  Click on More  There can be a list of connectors in different states. Here we can see the connector that has failed.  Click on the Failed link.  A pop-up window Failure details displays the error message and the details of the message.There are 2 options:  Either click the Skip button, to skip over the task where the connector failed. This will make the Failed message disappear on the Connector, and display Resolved instead.  Fix the problem then click Replay.",
      "url": " /bonita/7.8/bonita-portal-administration/process-maintenance/tasks",
      "author": "",
      "categories": "Bonita Portal Administration, Process maintenance"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-resources-api-extensions": {
      "title": "REST API extensions",
      "content"     : "REST API extensionsA REST API extension is a way to add extra REST resources using Bonita. REST API extensions are exported, imported, updated, and deleted as resources in Bonita Portal.If you want to learn how to create REST API extension, refer to the documentation page about Bonita Studio tooling for creating and testing REST API extensions (for Bonita subscription edition).Page below contains information about deploying a REST API manually, which is possible with all editions.Deploy a REST API extensionUsageREST API extension examplesDeploy a REST API extensionYou need to deploy the REST API zip archive using Bonita Portal:  Connect to the Bonita Portal and switch to “administrator” view.  Go to Resources. You will see the list of all resources, and a filter for each type of resource (Pages, Forms, Layouts, Themes and API extensions).  Click Add button (top left).  Click in the Archive field, then select the REST API extension zip file.  Click Next.  Click Confirm. The resource is added to the portalREST API extensions use the same authorization mechanism as the standard Bonita REST APIs. When you import the extension, the information in page.properties is used to create the appropriate resource permission mappings in Bonita (see REST API authorization for information about REST API security configuration).Note: It is also possible to deploy a REST API extension using REST portal API / “page” resource.Note: The deployment of the REST API extensions should always be made from the portal or its APIs, not directly from Engine APIs. Notably, the createPage() method of the Engine PageAPI would alllow you to deploy a REST API extension, but would not update the security settings, meaning that you would not be able to access it at runtime.Warning: If you are running Bonita in a cluster, after you import a REST API extension, you must restart the application server on all the cluster nodes.UsageA REST API extension must be deployed before any page or form resource using it is deployed.A page that uses REST API extensions must add the required resources in the page resource page.properties file.For example, if a page uses the demoHeaders, demoXml, and putResource API extensions, its page.properties must include this line:resources=[GET|extension/demoHeaders,POST|extension/demoXml,PUT|extension/putResource]If the page declares its resources correctly, then every user being able to access this page (because it is part of a custom profile or Living Application they have access to)will also be automatically granted the necessary permissions to call the REST API extension. This works the same way as with the other resources of the REST API.However, if you need to grant access to this API extension to some users regardless of the pages they have access to, then you need to add custom permissions for these users.In order to do so, edit custom-permissions-mapping.properties to give the permissions (value of the property apiExtension.permissions) declared in the page.properties of the REST API extension to the required profiles or users.Note: REST API permissions are stored in the user’s session and new permissions will only be effective for a user the next time he logs in to the portal.REST API extension examplesA REST API extension example resource and API extension viewer page are provided in administrator portal. They are located in administrator portal.To use the examples, define a custom permissions mapping for demoPermission:In a Tomcat / WildFly bundle:  Retrieve platform configuration using the setup tool.  Edit platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_portal/custom-permissions-mapping.properties.  Add the following line: profile|User=[demoPermission].  Push the changed platform configuration into database using the setup tool.  Restart Tomcat bundleIn Bonita Studio:  Open the custom-permissions-mapping.properties from Development menu &amp;gt; REST API extension &amp;gt; Edit permission mapping  Add the following line: profile|User=[demoPermission]  Save the file  Logout from the current session and log back inREST API extension examples show how to:  Customize response with additional header, cookie and response code  Get resource return a simple echo of query parameters  Use a SLF4J logger  Post resources with Json payload and return a simple echo of parameters  Return an XML content with specific media type and character set  Call to external SOAP webservice (requires internet connexion)Another REST API extension example with SQL data source is available on Bonitasoft Community. This example show how to execute SQL queries on a external database.",
      "url": " /bonita/7.8/bonita-portal-administration/resources/api-extensions",
      "author": "",
      "categories": "Bonita Portal Administration, Resources"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-resources-forms": {
      "title": "Forms",
      "content"     : "FormsThis page explains how to add a form resource to the Bonita Portal and make it available to users. Form resources are intended for use in applications.Pages are exported. imported, modified, and deleted as resources in the Portal.Form definition A form is a page that belongs to a process. It could be a process instantiation form, a human task form, or an overview form. There are some extra things to consider when you are creating a form compared with an ordinary page, concerning how data is passed between the process instance and the form.A context is the set of data provided by the process instance or task instance to the form. There is no context for a process instantiation form.A contract is the definition of that data that the form returns to the process instance. There is no contract for an overview form.Three auto-generated forms are provided by default, for process instantiation, for human task execution, and for the case overview.The process instantiation and step execution auto-generated forms are based on the relevant contract and they are a useful tool for testing and debugging your application.The overview consists of three main sections:  List of business data: it shows the content of the business variables used by the case.  List of documents: it shows the content of each document used by the case.  Timeline: it shows in chronological order information about all the actions that have been performed in the selected case.To learn how to manage the link between process and forms, go to the live update page.Application Theme accessIf your forms is viewed in an application, you will have access facilities for the application theme.The Theme.css is directly accessible by adding the following link in index.html: &amp;lt;link href=&quot;../theme/theme.css&quot; rel=&quot;stylesheet&quot; /&amp;gt;This link is already inserted in the forms you design with the UI Designer.The app URL parameter is used to retrieve the current application related Theme.The living application layout inject this app URL parameter in the targeted page/form URL, and the value is the application token.  If you create your own navigation link, you will need to include this app URL parameter in the forged form URL, in order to be able to benefit from the application theme.In the portal, the link ../theme/theme.css will point the file theme.css from the portal theme. This portal forms theme is empty, and customizable to fit to the current portal theme.",
      "url": " /bonita/7.8/bonita-portal-administration/resources/forms",
      "author": "",
      "categories": "Bonita Portal Administration, Resources"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-resources-layouts": {
      "title": "Layouts",
      "content"     : "LayoutsSince 7.3 we made some changes on the default layout.  Those changes live in the layout.css page asset and allow us to better handle the content layout of the page displayed.  Another consequence is that it removes a margin which was automatically added at the top of each pages.This page explains how to create and add a layout to the Bonita Portal, and how to use it in an application.A layout is a page used to define the main frame of an application.It defines menu positioning, a footer, or any common content that could be displayed on every page of the application.Each application can have it own layout.There is an example of layout in the portal, it is made of three containers:  layout-header  Comes with the living application menu widget to display the navigation of your application.  layout-content  Comes with the living application iframe widget to display pages or forms of your application.  layout-footer  Empty by defaultThe layout was created using the UI designer, so you can export it and edit it with the UI designer. You can add more widgets in the containers layout-header and layout-footer.The ‘layout.css’ file manages the layout behaviour, allows to display the content container in full height, and header and footer with fixed size.But it does not allow to add other widget than the living application iframe into layout-content.For example, you could:  Add elements in the layout-header, on top of the menu, like a login box or brand image  Add somme content in the layout-footerLayouts are exported. imported, modified, and deleted as resources in Bonita Portal.Layout definitionConstraintsLayout resources managementLayout resources API accesTheme accessLayout definitionA layout is imported as a zip archive containing a page.properties file and a resources folder.  The page.properties file contains the metadata for the layout (the name used in the URL, the display name, and a description). For example:name=custompage_layoutdisplayName=Application layout pagedescription=This is a layout page dedicated to new born living applications. It is created and editable using the UI designer. It allows to display an horizontal menu, and an iframe. The menu allows to target some pages and the iframe define the area to display those targeted pages.resources=[GET|living/application,GET|living/application-page,GET|living/application-menu]contentType=layoutThe resources folder must contain an Index.groovy class or an index.html file and optionally can contain some additional resources.If you create a resource with the UI Designer, the exported zip automatically has the correct format (only the contentType will have to be changed to “layout”).In case of layout edition using the UI Designer, the contentType is conserved.Export the examples to see how to structure your layout.ConstraintsA layout can only be use as the main container of an application. It cannot be used as a simple application page.Layout resources managementLayout resourcesIf you are not using Groovy, you can directly access a resource by adding a link in index.html.For example: &amp;lt;link href=&quot;css/file.css&quot; rel=&quot;stylesheet&quot; /&amp;gt;API accesIf your page is viewed in a custom profile or in an application, you will have access facilities for the portal API.you will be able to access the portal API using the following path: “../API/{API name}/{resource name}”Theme accessIf your page is viewed in an application, you will have access facilities for the application theme.The Theme.css is directly accessible by adding the following link in index.html: &amp;lt;link href=&quot;../theme/theme.css&quot; rel=&quot;stylesheet&quot; /&amp;gt;",
      "url": " /bonita/7.8/bonita-portal-administration/resources/layouts",
      "author": "",
      "categories": "Bonita Portal Administration, Resources"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-resources-pages": {
      "title": "Pages",
      "content"     : "PagesThis page explains how to use a page resource (also called a custom page) to the Bonita Portal and make it available to users. Page resources are intended for use in applications. You can also use a page resource to customize the portal, for example:  Add a welcome page, with dashboards showing activity in Bonita and related external applications.  Provide a process owner with a dashboard showing the activity of open cases of the process.  Provide a busy user with a filtered view of the task list.  Provide an administrator with a multi-attribute search facility.  Integrate a page from an external application.  Make a report available to users who do not have the Administrator profile.Pages are exported. imported, modified, and deleted as resources in Bonita Portal.Custom page definitionPageController interfaceAuthorization permissions for custom pagesCustom page examplesReuse Bonita Portal contentDebugging a custom page in developmentConstraintsPage resources managementPage resourcesAPI accessTheme accessCustom page definitionA page resource has the general resource definition. If it contains an Index.groovy file, this must implement the PageController interface optionally with libraries. If you create a custom page with the UI Designer, it has the required structure and content automatically.A custom page is displayed inside an iframe to prevent conflicts between the portal resources (for example JS and CSS) and those used in the custom page. This also reduces the risk of migration issues, for example if a custom page uses the version of JQuery provided with Bonita Portal and it is updated.PageController interfacepublic interface PageController {/*** Let the custom page parse request for specific attribute handling.** @param request the HTTP servlet request intended to be used as in a servlet* @param response the HTTP servlet response intended to be used as in a servlet* @param pageResourceProvider provide access to the resources contained in the custom page zip* @param pageContext provide access to the data relative to the context in which the custom page is displayed*/public void doGet(HttpServletRequest request, HttpServletResponse response, PageResourceProvider pageResourceProvider, PageContext pageContext);}Authorization permissions for custom pagesIf you are using REST API authorization and your custom page is an HTML page using the Web REST API, you need to specify the permissions that a user needs to have in order to access the resources in the custom page. These permissions are defined in the page.properties file. If your custom page is written in Groovy and uses the Bonita Engine Java APIs, you do not need to specify permissions.For each REST resource accessed in the page, specify the authorization needed for each method used.You can find examples of the default resources in resources-permissions-mapping.properties.The following example shows the permissions defined for a custom page that enables a user to view but not update organization information:#The name must start with &#39;custompage_&#39;name=custompage_orgViewerdisplayName=Organization viewerdescription=Organization viewer page. You cannot modify the organization from this page.resources=[GET|identity/user, GET|identity/personalcontactdata, GET|identity/professionalcontactdata, GET|identity/role, GET|identity/group, GET|identity/membership, GET|customuserinfo/user, GET|customuserinfo/definition, GET|customuserinfo/value] Custom page examplesTwo custom page examples are available in the Bonita Portal. Both examples show how to:  Get the Bonita CSS  Write simple HTML code  Get session information, including the locale  Get resources from the custom page definition  Call the Engine Java APIs (in the Groovy example) or the Web REST APIs (in the.md example)  Write a clickable link to an external page  Write a clickable link to a portal page  Write locale-specific messagesGroovy example page defines a custom page using Groovy. HTML example page defines a custom page using only HTML. In practice, you will probably use a combination of Groovy and HTML to create your custom pages.To view an example page, publish the page to a custom profile or an application so that you can view it in the portal. To view the source of an example, export the custom page.On the Customer Portal, there is also an example in the form of a seed project for creating custom pages using AngularJS and a customizable example task list page.Reuse Bonita Portal contentYou can reuse pages from the Bonita Portal in your custom pages. For example, in a page that gives details of a case history, you could include the live case status diagram to show the current status. For example, for case 1 of process definition 8270554088248243867, include these lines in your custom page definition:def idProcess = &quot;8270554088248243867&quot;;def idCase = &quot;1&quot;;out.write(&quot;&quot;&quot;&amp;lt;iframe src=../portal.js/#/admin/monitoring/${idProcess}-${idCase}&quot; style=&quot;width:100%; height:100%&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&quot;&quot;&quot;);This displays the case diagram exactly as it appears in the standard Bonita Portal page. You can modify the view to hide the Portal Back button by adding ?diagramOnly to the URL:out.write(&quot;&quot;&quot;&amp;lt;iframe src=../portal.js/#/admin/monitoring/${idProcess}-${idCase}?diagramOnly}&quot; style=&quot;width:100%; height:100%&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&quot;&quot;&quot;);Debugging a custom page in developmentWhile you are developing a custom page, you can enable custom page debug mode for your portal. In debug mode, you can see changes to your custom page without importing a new zip archive.To enable custom page debug mode, edit console-config.properties and set custom.page.debug to true.To work on a page in debug mode:On a Tomcat installation, &amp;lt;java.io.tmpdir&amp;gt; points to &amp;lt;TOMCAT_HOME&amp;gt;/temp/  Import your custom page zip archive into the portal. This creates a directory &amp;lt;java.io.tmpdir&amp;gt;/bonita_portal_*/tenants/tenant_id/pages/custompage_&amp;lt;your custom page&amp;gt;.  Publish the page to a profile, then log out and log in as a user having this profile.  You can now update Index.groovy and the contents of the lib directory directly in &amp;lt;java.io.tmpdir&amp;gt;/bonita_portal_*/tenants/tenant_id/pages/custompage_&amp;lt;your custom page&amp;gt;.  To view the page after you modify it, refresh the page in the browser.When you have finished developing the page, recreate the custom page zip archive, and then modify the page to import it. This makes your final version of the page permanently available.ConstraintsA custom page is displayed in an iframe in the Bonita Portal, so is isolated from changes to the portal. When you migrate to a newer version of Bonita, your custom page definition should still be valid. However, this cannot be guaranteed for all future migrations.Page resources managementPage resourcesCustom page resources can be accessed by a PageResourceProvider.The bonita.css can be retrieved using pageResourceProvider.getBonitaThemeCSSURL()Other css/js resources can be retrieved using pageResourceProvider.getResourceURL(&quot;&amp;lt;path in the custom page resources folder&amp;gt;&quot;)If you are not using Groovy you can directly access a resource by adding a link in index.html.For example: &amp;lt;link href=&quot;css/file.css&quot; rel=&quot;stylesheet&quot; /&amp;gt;API accessIf your page is viewed in a custom profile or in an application, you will have access facilities for the portal API.you will be able to access the portal API using the following path: ../API/{API name}/{resource name}Theme accessIf your page is viewed in an application, you will have access facilities for the application theme.The Theme.css is directly accessible by adding the following link in index.html: &amp;lt;link href=&quot;../theme/theme.css&quot; rel=&quot;stylesheet&quot; /&amp;gt;",
      "url": " /bonita/7.8/bonita-portal-administration/resources/pages",
      "author": "",
      "categories": "Bonita Portal Administration, Resources"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-resources-resource-management": {
      "title": "Resource management",
      "content"     : "Resource managementThis page explains how to add a resource to the Bonita Portal and make it available to users. A resource is an artifact that extends the portal.It is typed and can be one of the following:Resource definitionAuthorization permissions for resourcesExport a resourceImport a resourceModify a resourceDelete a ResourceResource definitionA resource is a zip archive, and must contains a page.properties file, a resources directory and an index file.  The page.properties file contains the metadata for the page.For example:#The name must start with &#39;custompage_&#39;name=custompage_layoutdisplayName=Application layout pagedescription=This is a layout page dedicated to new born living applications. It is created and editable using the UI designer. It allows to display an horizontal menu, and an iframe. The menu allows to target some pages and the iframe define the area to display those targeted pages.resources=[GET|living/application,GET|living/application-page,GET|living/application-menu]contentType=layout  The resources directory contains all the public files of your resource (for example index.md, images, Javascript files, CSS files).The zip archive must contain at least one of the following index files:  An index.html file in the resources directory  An Index.groovy class at the root of the archive with, optionally, libraries  If a resource contains both Index.groovy and index.html, the Groovy class takes precedence.Authorization permissions for resourcesIf you are using REST API authorization and your resource needs the Web REST API, you need to specify the permissions that a user needs to have in order to access those API. These permissions are defined in the page.properties file. If your resources is a page written in Groovy and uses the Bonita Engine Java APIs, you do not need to specify permissions.For each REST resource accessed in other resources, specify the authorization needed for each method used. You can find examples of the default resources in resources-permissions-mapping.properties.The following example shows the permissions defined for a page that enables a user to view but not update organization information:#The name must start with &#39;custompage_&#39;name=custompage_orgViewerdisplayName=Organization viewerdescription=Organization viewer page. You cannot modify the organization from this page.resources=[GET|identity/user, GET|identity/personalcontactdata, GET|identity/professionalcontactdata, GET|identity/role,GET|identity/group, GET|identity/membership, GET|customuserinfo/user, GET|customuserinfo/definition, GET|customuserinfo/value] contentType=page  Export a resourceYou can export a resource from the portal. The page is exported as a zip archive.To export a resource:  As an Administrator, go to Resources. You will see the list of all resources, and a filter for each type of resource (Page, Forms, Layout, Theme and API extension).  Select the page that you want to export.  Click Export.  In the popup, specify the name and location for the exported zip archive, and click OK.The zip archive is exported to the location you specified.Import a resourceTo add a resource to the portal, import a zip archive that contains the resource definition.  As an Administrator, go to Resources. You will see the list of all resources, and a filter for each type of resource (Page, Forms, Layout, Theme and API extension).  Click Add.  In the Content field, specify the zip archive to be imported. Click in the field, then specify the location and filename in the popup.  Click Add. The resource is added to the portalIf you have specified a resource permission that is not defined in the REST API authorization configuration and REST API authorization is configured to be on, you will see an error message.After a resource is added to the portal, it can be used in an application or in a custom profile.Modify a resourceTo modify a resource in the portal, you upload a zip archive containing the new version.  As an Administrator, go to Resources. You will see the list of all resources, and a filter for each type of resource (Page, Forms, Layout, Theme and API extension).  Select the page that you want to modify.  Click Edit.  To upload a new resource definition, click in the Content field and specify the new zip archive to import.  Click OK to save the changes.The resource is updated.Delete a ResourceTo delete a resource:  As an Administrator, go to Resources. You will see the list of all resources, and a filter for each type of resource (Page, Forms, Layout, Theme and API extension).  Select the pages that you want to delete.  Click Delete.The selected resource is deleted.Note: Either all the selected resources are deleted, or no resources are deleted. If you have selected a page, a layout or a theme that are used in an application or in a custom profile, you will see an error message listing these resources and the applications where they are used. In the case, none of the pages you selected is deleted.",
      "url": " /bonita/7.8/bonita-portal-administration/resources/resource-management",
      "author": "",
      "categories": "Bonita Portal Administration, Resources"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-resources-themes": {
      "title": "Themes",
      "content"     : "ThemesThis page explains how to create a theme and add it to the Portal.A theme is an archive of files used to define and share CSS definitions and images for an application.It enables you to specify the same style for all pages and layout of an application.Each application can have its own theme.There are some examples of themes in the portal.A theme is exported, imported, modified, and deleted as a resource in Bonita Portal. You specify the theme for an application in Bonita Portal.Theme definitionConstraintsTheme definitionA theme is imported as a zip archive containing a page.properties file and a resources folder.  The page.properties file contains the metadata for the theme (the name used in the URL, the display name, and a description). For example:name=custompage_defaultthemedisplayName=Default themedescription=Application theme based on Bootstrap &quot;Simplex&quot; theme (see http://bootswatch.com/simplex/)contentType=themeThe resources folder must contain at least an index.html file and a CSS file named theme.css. The index file must be present in the zip but is ignored, so can be empty.Any CSS, images or JavaScript files can be shared using a theme resource.Export the examples to see how to structure a theme.The default themes are based on the bootswatch example, so you can easily choose another existing theme and package it to define a new theme.It is also possible to customize your own theme using bootstrap-live-customizer or bootstrap basic customization tool.ConstraintsA theme can only be associated with an application to define the style. It cannot itself be used as a simple application page.",
      "url": " /bonita/7.8/bonita-portal-administration/resources/themes",
      "author": "",
      "categories": "Bonita Portal Administration, Resources"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-search-index": {
      "title": "Search keys",
      "content"     : "Search keysNote: For Enterprise, Performance and Efficiency editions only.The search field in Bonita Portal can be used to search for particular values in cases, filter them, and display the result.Note: the search in Bonita Portal is dependent on the search keys configured in Bonita Studio. If nothing has been entered as a value for the task during the design of the process, then no results come up.How to get results from the search in Bonita Portal Only cases which have been given values will be filtered.Technical note: A search key is translated by a database index in Bonita Engine. Currently, when designing in Bonita Studio, you cannot create more than 5 keys/indexes per process.In addition, search keys are now displayed in the case list and in the case more details view. In this way, you can use search keys for adding dynamic and business information to your cases.See also Define a search key.",
      "url": " /bonita/7.8/bonita-portal-administration/search-index",
      "author": "",
      "categories": "Bonita Portal Administration"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-user-profiles-administrator-rights": {
      "title": "Administrator rights",
      "content"     : "Administrator rightsA user with Administration rights has the maximum rights to manage activity on Bonita Portal.  Manage user rights  Manage a user  Manage a group  Manage a role  Manage a process  Manage a case  Manage a task  Manage a subtask  Manage a category  Import/export an organization",
      "url": " /bonita/7.8/bonita-portal-administration/user-profiles/administrator-rights",
      "author": "",
      "categories": "Bonita Portal Administration, User profiles"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-user-profiles-custom-profiles": {
      "title": "Custom profiles",
      "content"     : "Custom profilesNote: For Enterprise, Performance and Efficiency editions only.Reminder: In a development environment, custom profiles definition and testing is done in Bonita Studio profile editor.In a production environment, you can administrate custom profiles in Bonita Portal. To be able to do so, you must be using the Administrator profile or a custom profile with access to the profile management page.What customization can I do?Create a custom profileDelete custom profileEdit a custom profileMap a profile to users or groups, membership or roleCreate a custom navigation barCreate a custom profile  In the Bonita Portal, in the navigation bar, click the Organization menu.  Click Profiles.  Click Add.  In the popup, select Create a profile.  Enter the Name.  Enter the Description (optional).  Click Create.  Refresh the portal webpage.  The new profile will appear in the Profiles menu.For deployment, it is also possible to import a profile by importing an XML file containing the profile definition and mapping to organization and pages.Delete custom profileNote: You will need to check the box to make the delete button available.Select the profile to delete, and click the delete button.Edit a custom profile  In the Bonita Portal, in the navigation bar, click the Organization menu.  Click Profiles.  Click More.  Click Edit.  Change the name or the description of the custom profile  Click Save.Map a profile to users or groups, membership or role  In the Bonita Portal, in the navigation bar, click the Organization menu.  Click Profiles.  Choose a profile. This will display the users mapped to the selected profile.  Click More.  Click Add a user.  Select a user by ticking the checkbox next to the user name.  Click Add.Do the same steps to map a group, role or membership.Create a custom navigation barA custom navigation bar can be created for each custom profile created.Note: The navigation bar will not be used by applications as they have their own navigation menu.  Select profile to add the new menu to  Click on More  This will display the Navigation bar editor  Click Create menu.Here, you will see 3 columns: a check box, a display name and a description.  Check the boxes to select the pages to include in the new menu.You can select from the Default pages that are provided with the standard portal and from Custom pages.  Click Create to confirm your choice of pages and create the menu.When you select the custom profile, the navigation bar will be applied to it.Note: Click Reset to erase the navigation bar if required.When a user logs in with a profile, the page displayed is the first option in the first menu from the left.",
      "url": " /bonita/7.8/bonita-portal-administration/user-profiles/custom-profiles",
      "author": "",
      "categories": "Bonita Portal Administration, User profiles"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-user-profiles-deploying-profiles-with-export-and-import": {
      "title": "Deploy profiles with export and import",
      "content"     : "Deploy profiles with export and importNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.OverviewExport profilesImport profilesOverviewDeploying a profile means exporting it from one portal and importing it into another. This is useful when you have finished testing profiles and custom pages in a limited environment and are ready to go to production.When you export a profile, it includes the following:  The profile definition (name and description).  The mapping of the profile to the organization. This defines the users, groups, roles, and memberships that have the profile.  The mapping of the profile to pages. This defines the pages that someone who is using this profile can see in the portal. A custom profile can include standard pages and custom pages.You cannot change the mapping of a standard profile to pages.You can export and import the default profiles that are provided as standard in Bonita, as a way to export and import the mapping of those profiles to elements in the organization.By default, the profile export and import features are available in the Administrator profile. They can also be available in a custom profile.Export profilesTo export profiles:  Go to the Organization menu and choose Profiles.  In the list of profiles, check the boxes to select the profiles you want to export. You can only select profiles in your current view of the profile list, not from other pages of the list.  Click Export.  A popup confirms the number of profiles that will be exported. Click Export to continue and export these profiles.An XML file, Profile_Data.xml, is exported.Import profilesWhen you import a profile, you import the mapping of the profile to the organization and to pages. For the import to be successful, the organization and any custom pages must already be loaded. If you are setting up a new production environment by importing all the data, import it in the following order:  organization  custom pages  profilesTo import profiles:  Go to the Organization menu and choose Profiles.  Click Add.  In the popup, select Import profiles.  Specify the Profile_Data.xml file to upload.  Click Import.The file is imported and checked. A popup reports the status of the import. It shows the number of profiles successfully imported, partially imported, or with errors.Notes:  A Process manager profile does not include the list of apps assigned to a given process manager. After the Process manager profile is imported, you need to assign a process manager to an app.  The standard profiles defined in Bonita have the flag isDefault set to True in the XML file. Do not change the setting of isDefault for any profile, or you will get an error message on import.",
      "url": " /bonita/7.8/bonita-portal-administration/user-profiles/deploying-profiles-with-export-and-import",
      "author": "",
      "categories": "Bonita Portal Administration, User profiles"
    }
    ,
  

    "bonita-7-8-bonita-portal-administration-user-profiles-process-manager": {
      "title": "Process manager",
      "content"     : "Process managerNote: For Enterprise, Performance and Efficiency editions only.The portal administrator can assign a Process manager to a process, to share responsibility for managing processes.Process manager descriptionAssign a Process manager to a processMonitor the processes I manageList the processes I manageSee a list of cases for a processSee a list of tasks for cases of a processAssign a taskUnassign a taskHow to skip a failed taskStart a case for another userDo a task for another userProcess manager descriptionThe Process manager shares some management responsibilities with the administrator, for specified processes.For the processes they manage, a process manager can:  Perform actions on tasks:  Assign or unassign a task  Replay a failed task  View tasks  Do a task for another userPerform actions on cases:  Delete a case  View cases  Edit case variables  Add a comment  Start a case for another userPerforms actions on processes:  Enable or disable a process  Edit process configuration (update a connector, actor mapping, Process manager mapping, or parameter value)  Assign a Process manager to a processThere are two stages to assigning a Process manager to a process: assign the Process manager profile to an entity, then map the process to the entity. You can assign the PM profile and map a process to a user, groups, role, or membership entity.Assign the Process manager profile to a userTo assign the Process manager profile to a user:  Log in to Bonita Portal as Administrator.  Go to Configuration.  Choose Profiles.  Choose the Process manager profile. This will display the users, groups, roles, and memberships who already have this profile.  Click More.  Click Add a user.  Select a user by checking the box next to the user name.  Click Add. The Process manager profile is now assigned to the user.You can also assign a profile to a group, role, or membership.Assign a process to a Process managerTo assign a process to a user who has the Process manager profile:  Log in to Bonita Portal as Administrator or as a Process manager of the process.  Go to BPM &amp;gt; Processes if you use the Administrator profile or Processes if you use the Process manager profile.  Select the process and click More…. The number of Process managers currently assigned to the process is shown in the Process manager mapping table.  To add a user, click the Plus sign or Pencil button in the User column. A popup shows a list of the users who are currently process managers for this process.  Click _Select users _. A list of users with the Process manager profile is displayed.  Select the user you want to be a Process manager for the process, and click Apply. The selected user is added as a Process manager for the process.You can also assign a process to a group, role, or membership that has the Process manager profile.Monitor the processes I manageA Process manager can monitor the activity of the processes they can manage in Monitoring.List the processes I manageA Process manager can see a list of the processes they can manage in Processes.See a list of cases for a processA Process manager can see a list of cases for the processes they can manage in Cases.See a list of tasks for cases of a processA Process manager can see the tasks for cases of a process they can manage in Tasks.Assign a taskA task can be assigned and reassigned if necessary to another user.  Go to Tasks  Click on a task in the list of tasks  Click AssignUnassign a task  Go to Tasks  Click on a task in the list of tasks  Click UnassignHow to skip a failed taskIf a failed task does not impact subsequent task in a process, the Process manager can skip it. This means that the task does not have to be done successfully for the following tasks to become available.  Go to Tasks.  Go to Failed.  Click on a Task.  Click More.  In Technical details, the reason for the failure is displayed  Click Skip.The task is moved from Failed to Done.Start a case for another userA Process manager can start a case for another user. The user must have the right to start a case of the process.To start a case for another user:  Log in as a Process manager for the process.  Go to Processes.  Select the process and click Start for.  In the popup, specify the user for whom you are starting the case. Only valid users for the case are displayed.  Click Start.The case is started as though the specified user had started it. For example, if a Process manager starts a case for user A and a subsequent task is to be done by the manager of the user, it is assigned to user A’s manager, not to the manager of the Process manager.Do a task for another userA Process manager can do a task for another user. The user must have the right to do the task. This is useful for unblocking a case if the assigned user cannot do a task.To performs a task for another user:  Log in as a Process manager for the process.  Go to Tasks and view the list of pending Human tasks.  Select the relevant task in the list and click Do for.  In the popup, specify the user for whom you are doing the task. Only valid users for the case are displayed. If the task is already assigned, the assigned user is specified automatically.  Click Do it.The task is done as though the specified user has done it.",
      "url": " /bonita/7.8/bonita-portal-administration/user-profiles/process-manager",
      "author": "",
      "categories": "Bonita Portal Administration, User profiles"
    }
    ,
  

    "bonita-7-8-development-api-glossary": {
      "title": "API glossary",
      "content"     : "API glossaryDefinitionProcessInstance (REST: case)FlowNodeInstance (REST: flowNode)DefinitionDefinition: in Bonita Studio you create definition of processes. A definition of a process includes name, version, definition of actors name…A process definition includes definition of tasks.The definition of tasks includes connectors, contract inputs declaration (for user task)…Instance : when you start a process (using Portal or API) what actually happen is a creation of a new process instance based on the selected process definition.Starting a process instance will actually start a new instance of the start event and usually start a new instance of the first task.Note: if a process loops on a task, multiple instances of a same task definition will be created.Case: A case is a process instance.ProcessInstance (REST: case)  id: id of the process instance  callerId (not in REST): id of the call activity use to create this process instance. null/0 if process instance was not created using a call activity.  processDefinitionId: the id of process definition use to create this process instance.  rootProcessInstanceId (rootCaseId for REST): the id of the top parent process instance. Parents exist for event sub-processes and when instance was created using a call activity. If there is no parent it is his own id.  endDate: the date on which the process instance is marked as completed.Note: the completed state is a transitionnary state. Right after a process instance is completed, it is archived.FlowNodeInstance (REST: flowNode)Use to represent an instance of a none start event, user task, call activity, multi instance activity (the container instance and also included instances), gateways…  id: id of the FlowNodeInstance  displayDescription: dynamically generated human readable flow node description. Only apply to UserTaskInstance, empty in REST API and null in Engine API otherwise.  displayName: same as for displayDescription but for the name. Only apply to UserTaskInstance, empty in REST API and null in Engine API otherwise.  executedBy: the id (long) of the user who performed this flow node. If performed by a substitute id is set to 0 and the performer id is stored in executedBySubstitute.  executedBySubstitute: the id (long) of the user who performed this flow node in case where a substitute did it. If flow node was not performed by a substitute the value is set to 0 and the performer is stored in executedBy. It applies only to flow nodes that are user tasks  flownodeDefinitionId (not in REST): the id of the flow node definition who lead to this flow node instance creation. In the case of a multi-activity task instance, each instance points to the original flow node multi instance definition.  parentContainerId (parentCaseId for REST):  Id is not always an id of a process instance:  For UserTask or ManualTaskInstance (i.e. subtask in portal), AutomaticTaskInstance (BPMN service task), BoundaryEventInstance, CallActivityInstance: id of the process instance that include directly the instance of the element. Behavior is the same in case of a process instance created by a call activity: id returned is the id of the child process that includes the flow node.  For a flow node that is created by a mutli-instantiated task definition: parent flow node instance id.  For BoundaryEventInstance: id of the parent of the attached task instance  For tasks in event sub process: event sub process id  parentProcessInstanceId (parentCaseId for REST):  Always returns the immediate containing process instance ID. Don’t escalate to parent process.  For event sub-process: id of the process instance that initiate the sub-process event.processDefinitionId (processId for REST): Returns the ID of the process definition where this FlowNodeInstance is defined  rootContainerId (rootCaseId for REST): Always return the top (root) process instance id. Compare to parentContainerId escalate to the root process instance when called on a FlowNodeInstance that is part of a process instance created by a call activity execution.  parentTaskId for REST: Only apply to sub task (task dynamically added by user at runtime). Represent the id of the task from which the subtask was created.For a complete description of the different elements, check out the following pages:  on the engine side, the Javadoc page  on the web site, the REST API page page",
      "url": " /bonita/7.8/development/api-glossary",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "bonita-7-8-development-bonita-artifacts-connectors-connector-development-toolkit": {
      "title": "Connector development toolkit",
      "content"     : "Connector development toolkitNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.OverviewInstallationPrerequisitesInstallation procedureCreating a new connector definitionCreating a new connector implementationWidget types and parametersMandatory common widget parametersOptional common widget parametersRadioGroup widget parametersSelect widget parametersArray widget specific parametersList widget specific parametersGroup widget parametersOverviewThe Connector Development Toolkit is a set of tools for implementing and testing Bonita connectors independently of the Bonita Studio.A connector implemented with the toolkit can be used in Bonita Studio or in Bonita Portal just like any Bonita connector.This toolkit uses industry-standard tools such as Java IDEs, dependency management tools (Maven), and unit testing frameworks (JUnit, Mockito and AssertJ). It has the following benefits for connector developers:  You can use any Java IDE for implementation, so you have access to all configuration options and can make use of convenient features such as refactoring.  You can unit test connectors, perform integration tests, and automate builds with a CI platforms.  It simplifies refactoring of connector wizards, by enabling them to be regenerated them at any time.  It simplifies dependency management and connector artifact version management, by leveraging Maven capabilities.InstallationPrerequisitesTo develop and test a Bonita connector with the toolkit, you need the following software installed:  Java 8 or later  Maven 3.2.x or laterInstallation procedure  Download the toolkit from the Customer Portal.  Unzip the toolkit file into a temporary installation folder.  Run either install.bat for Windows users or install.sh for Mac or Linux users.  When the installer has finished, delete the temporary installation folder because you no longer not need.Creating a new connector definition  Open a command window and navigate to the folder that will hold your connector definition.  Prepare to run the following command (Windows users: remove the trailing slashes and edit the content to have everything on a single line):mvn archetype:generate -DinteractiveMode=false -DarchetypeGroupId=com.bonitasoft.connector.definition -DarchetypeArtifactId=bonita-connector-definition-archetype -DarchetypeVersion=1.0 -DgroupId=com.mycompany.connectors -DartifactId=myFirstConnector -Dversion=1.0.0Before running the command, update the following parameter values:Parameter  Description  archetypeVersion  This must match the version of the toolkit.  groupId  Maven project group id.  artifactId  Maven project artifact id and Bonita connector definition id.  version  Maven project version and Bonita connector definition version.Run the command. This generates a new folder named artifactId containing the connector definition project files, as follows:```/src/main/resources/category-icon.pngconnector_definition.xmlconnector-icon.pngpom.xml```4. Configure the `src/main/resources/connector_definition.xml` file to define the connector wizard pages with their inputs, widgets,and outputs (see [Connector widget reference](#widgetTypeReference) for details).5. Optionally, change the icons for the connector and the connector category in the `src/main/resources` folder.## Creating a new connector implementation{:#creating-a-new-connector-implementation}A connector definition can hold multiple implementations so the steps described in this section can be repeated.  All implementations will be stored under the definition project folder.**Caution:** Connector implementations that are not located under the definition project folder will not compile.1. Open a command window and navigate to the folder that contains the connector definition project.2. Prepare to run the following command (Windows users: remove the trailing slashes and edit the content to have everything on a single line):```bashmvn archetype:generate -DinteractiveMode=false -DarchetypeGroupId=com.bonitasoft.connector.implementation -DarchetypeArtifactId=bonita-connector-implementation-archetype -DarchetypeVersion=1.0 -DgroupId=com.mycompany.connectors -DartifactId=myFirstConnectorImpl -Dversion=1.0.0 -DdefinitionId=myFirstConnector -DdefinitionVersion=1.0.0```Before running the command, update the following parameter values:| Parameter | Description ||-----------|-------------|| archetypeVersion | This should match the version of the toolkit |  | groupId | Maven project group id and Java package for the Bonita connector implementation || artifactId | Maven artifact id and Bonita connector implementation id || version | Maven version id and Bonita connector implementation version || definitionId | This should match the connector definition artifactId || definitionVersion | This should match the connector definition version |  3. Run the command. This generates a new folder named `artifactId` containing the connector implementation project.4.  In the connector implementation project folder, run the following command :```bashmvn bonita-connector-definition:generate```This generates the connector abstract definition class based on the definition configuration: `/src/main/java//Abstract.java` **Note:**If you subsequently change the connector definition configuration, run this command again to apply your changes.  This will regenerate the abstract definition class, overwriting the previous version.5.  In the connector implementation project folder, run the following command : `mvn bonita-connector-implementation:generate`This generates a stub of the connector implementation and test classes: ```src/main/java//.javasrc/test/java//Tests.java```*Caution:** Do not run this command again at a later stage, because it resets your implementation and test classes.6. Complete your connector implementation and test classes.7.  When you are ready to package the connector, run this command in the implementation project folder: `mvn package`This will produce a connector zip file that can be imported in Bonita Studio: `/target/--dist.zip`## Widget types and parameters{:#widget-types-and-parameters}The following widget types are supported in connectors:| Widget | Description || ------ | ----------- || Text | Text field || Password | Text field with obfuscated characters || TextArea | Multi-line text field || Checkbox | Single checkbox || RadioGroup | Group of radio buttons || Select | Drop down || Array | Editable table with user customizable rows and columns || ScriptEditor | Multi-line text zone for entering a script || List | List in which user can add/remove elements || Group | Collapsile zone that contains one or more widgets |  This is the same as the set of connector widgets available in Bonita Studio.A widget is configured by setting parameters. Some [mandatory parameters](#mandatory-common) and [optional parameters](#optional-common) are common to all types of widget. There are also some specific widget properties for some types of widget, which are listed later in this page.### Mandatory common widget parameters{:#widget-types-and-parameters-mandatory-common-widget-parameters}| Parameter | Description || --------- | ----------- || id | Unique widget identifier. || label | Text displayed beside the widget. || widgetType | Type of the widget. Set this to Text, Password, TextArea, Checkbox, RadioGroup, Select, Array, ScriptEditor, List, or Group. || javaType | Java type used to assign the value of this widget. This is not supported for Group widgets. |### Optional common widget parameters{:#widget-types-and-parameters-optional-common-widget-parameters}| Parameter | Description | Default value || --------- | ----------- | ------------- || mandatory | Boolean flag that indicates whether or not this widget can be left empty. | true || defaultValue | Default value assigned to this widget. | n/a || description | Mouseover text displayed by the &#39;information&#39; icon beside the widget. If there is no description, the icon is not displayed. | n/a |The following example is the configuration for a Text widget:```xmlfirstNameFirst nameTextjava.lang.StringtrueJohnYour first name```### RadioGroup widget parameters{:#widget-types-and-parameters-radiogroup-widget-parameters}| Parameter | Mandatory | Description | Default value || --------- | ----------- | ------------- | --------- || choices | yes | List of values for the radio button group. Each value is specified in a &quot;choice&quot; tag. | n/a || orientation | no | Alignment of the widget values. One of: HORIZONTAL or VERTICAL. | VERTICAL |The following example is the configuration for a RadioGroup widget with three choices:```xmlradioGroupRadioGroup widgetjava.lang.StringRadioGroupChoice1Choice2Choice3VERTICAL```### Select widget parameters{:#widget-types-and-parameters-select-widget-parameters}| Parameter | Mandatory | Description | Default value ||:-|:-|:-|:-|| items | yes | List of values for the widget. Each value is specified in an &quot;item&quot; tag. | n/a |The following example is the configuration for a Select widget with three choices:```xmlselectSelect widgetjava.lang.StringSelectItem1Item2Item3```### Array widget specific parameters{:#widget-types-and-parameters-array-widget-specific-parameters}All Array widget specific parameters are mandatory and must be placed under a single parent &quot;arrayOptions&quot; tag.| Parameter | Description || --------- | ----------- || cols | Initial number of columns in the table. || rows | Initial number of rows in the table. A value of -1 indicates a table with no row (only the column headers are displayed). || fixedCols | Boolean flag that indicates whether the number of table columns can be modified by the end user. If set to &quot;true&quot;, the user cannot add or remove columns. || fixedRows | Boolean flag that indicates whether the number of table rows can be modified by the end user. If set to &quot;true&quot;, the user cannot add or remove rows. || colsCaption | List of captions for the column headers. Each caption is specified in a &quot;colsCaption&quot; tag. |The following example is the configuration for an Array widget two columns and any number of rows:```xmlarrayArray widgetjava.util.ListArray2-1truefalseHeader 1Header 2```### List widget specific parameters{:#widget-types-and-parameters-list-widget-specific-parameters}| Parameter | Mandatory | Description | Default value || --------- | ----------- | ------------- | --------- || showDocuments | no | Boolean flag that indicates whether the end user can select Bonita documents in the list of values. | false |The following example is the configuration for a List widget:```listList widgetjava.util.ListListtrue```### Group widget parameters{:#widget-types-and-parameters-group-widget-parameters}**Note:** A Group widget does not support the common &quot;javaType&quot; parameter.| Parameter | Description || --------- | ----------- || collapsed | Boolean flag that indicates whether the group is collapsed by default. || widgets | Specifies the list of widgets contained in the group. |The following example is the configuration for a Group widget that contains two other widgets:```xmlcredentialsGroupUser credentialstrueloginjava.lang.StringtrueTextLoginpasswordjava.lang.StringtruePasswordPassword```",
      "url": " /bonita/7.8/development/bonita-artifacts/connectors/connector-development-toolkit",
      "author": "",
      "categories": "Development, Bonita artifacts, Connectors"
    }
    ,
  

    "bonita-7-8-development-bonita-artifacts-connectors-connectors-overview": {
      "title": "Connectors overview",
      "content"     : "Connectors overviewA connector is an element in a process that accesses an external system to read or write information. If the default connectors in Bonita are not suitable, you can implement your own connector. In the Bonita Enterprise, Performance, Efficiency, and Teamwork editions, you are recommended to use the connector development toolkit to create new connectors.Otherwise, you can define a new connector definition or implementation in Bonita Studio,using the wizards started from the Development menu, Connectors submenu.This page describes the structure of a connector, and summarizes the connector development features avaialble in Bonita Studio.Connector structureConnector definitionConnector implementationImporting and exporting a connector into Bonita StudioTesting a connectorConfiguringConnector structureA connector is implemented in Bonita in twoparts, the definition and the implementation. This enables you tochange the implementation without changing the definition. Severalimplementations can be created for a single definition.Connector definitionA connector definition controls the external interfaces of theconnector, both those visible to users (the connectorconfiguration wizard and the icon used to identify the connector in Bonita Studio) and those visible to the Bonita Engine (theinputs and outputs).Connector implementationA connector implementation consists of the implementation logic, contained in aJava class. You can create any number of implementations that correspond to a given definition. However, in a process there is a one-to-one relationship betweenthe connector definition and the connector implementation.The Java class must implement the org.bonitasoft.engine.connector.Connector class. This defines thefollowing methods:  setInputParameters to retrieve configuration parameters  &amp;gt;validateInputParameters to check that the configuration of theconnector is well defined  execute to execute the connector and returns a map containingall outputs  connect to create the connector  disconnect to end the connectionNote: All the connector outputs must be set in the implementation; otherwise, the connector execution will fail. The connector outputs must be serializable.For details of the APIs, the methods and related objects, see the Javadoc.Importing and exporting a connector into Bonita StudioYou can import a connector that was created using the connecctor development toolkit or that was exported from another Bonita Studio. The connector is imported as a zip file.  In Bonita Studio, go to the Development menu, Connectors, Import connector….  Upload the zip file.The imported connector is now available in the dialog for adding a connector.It is also possible to export a connector using the option in the Development menu. The connector is exported as a zip file, which you can import into anotherinstance of Bonita Studio. You must specify both the definition and the implementation to export.Testing a connectorTo test the connector independently of a process, go to the Development menu, choose Connectors…, then choose Test connector…. Select the connector you want to test, use the wizard to configure the information required for the test, and click Test. The connector runs, and the results arereported.You need to import a connector into Bonita Studio before you can test it.Configuringand deploying a process with a connectorThere are two stages to configuring a connector:  When you add a connector to a pool or task, you configure the connector behavior.  When you configure a process for deployment, you specify the definition and implementation of each connector it contains. You mustalso specify any connector dependencies as process dependencies.After theconnector has been specified in the configuration, when you buildthe process for deployment referencing the configuration, theconnector code is included in the business archive.After deployment, if you are running the Enterprise or Performance edition, you can update the connector implementation on a live system.",
      "url": " /bonita/7.8/development/bonita-artifacts/connectors/connectors-overview",
      "author": "",
      "categories": "Development, Bonita artifacts, Connectors"
    }
    ,
  

    "bonita-7-8-development-bonita-artifacts-creating-an-actor-filter": {
      "title": "Create an actor filter",
      "content"     : "Create an actor filterAn actor filter is implemented in Bonita in two parts, the definition and the implementation. This enables you to change theimplementation without changing the definition. Several implementations can be created for a single definition. See here for a list of actor filters provided with the product.An actor filter is a type of connector and is created in the same way, using the same schema files as for a connector. You can define a new actor filter definition or implementation in Bonita Studio, using the wizards started from the Development menu, Actor filters sub menu. You can also create a new actor filter definition or implementation externally, and import it into Bonita Studio.This page explains how to create the actor filter definition and implementation and import it into Bonita Studio.Actor filter definitionActor filter configuration wizard definitionLanguage properties fileActor filter implementationActor filter implementation resource fileActor filter implementation Java classActor filter example codeTesting an actor filterImporting an actor filter into Bonita StudioConfiguring and deploying a process with an actor filter Actor filter definitionAn actor filter definition controls the external interfaces of the actor filter, both those visible to users (the actor filter configuration wizard) and those visible to the Bonita Engine (the inputs and outputs). The actor filter definition consists of the following files:  An XML file that defines the configuration wizard  A file containing the image that is used as an icon to represent the actor filter  A properties file for each language that the wizard supportsThe following sections explain the elements of the definition. You can also use Bonita Studio to create the definition.Actor filter configuration wizard definitionThe XML file that defines the actor filter configuration wizard contains definitions for header information identifying the actor filter (including the icon), for inputs and outputs, and for the wizard pages. The definition follows the schema defined in http://documentation.bonitasoft.com/ns/connector/definition/6.0/connector-definition-descriptor.xsd. The table below lists the items in the definition:| | Occurrence | Description||:-|:-|:-|| id | 1 | The identifier of the actor filter definition. Used internally, not displayed in the wizard or in Bonita Studio. Must be unique. || version | 1 | The version of the actor filter definition. Must be unique for the actor filter identifier. || icon | 0 or 1 | The name of a file containing the icon image. || category | 1 | The category to which the actor filter belongs. In Bonita Studio, actor filters are grouped by category. Optionally, the category can have an icon image. || input | 0 or more | Input data passed to the actor filter. Each input has a unique name and a Java type. Optionally, it can be defined as mandatory. Optionally, a default value can be set. || output | 0 or more | Output data passed to the process from the actor filter.  Each output has a unique name and a Java type. || page | 0 or more | A page in the wizard. A page must have a unique id. A page consists of one or more widgets. A page is constructed by displaying the widgets in the order in which the definitions appear in the file. || widget | 1 or more per page | An element within a page, corresponding to an input. A widget must have a unique id, an input name, and a type. The following types of widget are available: text, password, text area, check box, radio button group, select (drop-down list), array, group, script editor, and list. || jarDependency | 0 or more | A dependency that must be satisfied for the wizard to run successfully. |The page and widget definitions are required for an actor filter that is used or configured from within Bonita Studio.The following example is the XML definition for the initiator manager actor filter:&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;definition:ConnectorDefinition xmlns:definition=&quot;http://www.bonitasoft.org/ns/connector/definition/6.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt; &amp;lt;id&amp;gt;initiator-manager&amp;lt;/id&amp;gt; &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt; &amp;lt;icon&amp;gt;initiator-manager.png&amp;lt;/icon&amp;gt; &amp;lt;category id=&quot;process&quot; icon=&quot;process.gif&quot; &amp;gt;&amp;lt;/category&amp;gt; &amp;lt;input name=&quot;autoAssign&quot; type=&quot;java.lang.Boolean&quot; mandatory=&quot;false&quot; defaultValue=&quot;true&quot; /&amp;gt; &amp;lt;page id=&quot;config&quot;&amp;gt;&amp;lt;widget id=&quot;autoAssign&quot; inputName=&quot;autoAssign&quot; xsi:type=&quot;definition:Checkbox&quot; &amp;gt;&amp;lt;/widget&amp;gt;&amp;lt;/page&amp;gt;&amp;lt;/definition:ConnectorDefinition&amp;gt;In this example, there is one input, a Boolean that determines whether or not the task is automatically assigned to the user identified by the filter. There is one page in the configuration wizard, which contains one widget.Language properties fileThe text displayed in a wizard is defined separately from the pages and widgets. This means that one actor filter definition can support multiple languages.For each language, there is a properties file that contains the category name, the actor filter name, the actor filter definition, the name and description of each wizard page, and the name and description of each input widget.The default language properties file is called actorfilter-id_version.properties, where actorfilter-id is the actor filter identifier and version is the actor filter version. You can provide additional properties files to support other languages. These files must be called actorfilter-id_lang_version.properties, where lang identifies the language of the properties file. The language must be supported by Bonita Studio. For example, the French properties file for the initiator manager shown above is called initiator-manager-1.0.0_fr.properties. When a Bonita Studio user launches an actor filter configuration wizard, the wizard is displayed in the language currently configured for Bonita Studio. If there is no properties file for this language, the default file is used.The following example is the English language properties file for the initiator manager actor filter:process.category = ProcessconnectorDefinitionLabel = Initiator managerconnectorDefinitionDescription = Manager of the initiator of the processconfig.pageTitle = Configurationconfig.pageDescription = Configuration of the process initiator-manager filterconnexionConfigPage.pageDescription = Choose here if you want to automatically assign the task to this actorautoAssign.label = Assign task automaticallyautoAssign.description = The task will be claimed automatically by the resolved user Actor filter implementationAn actor filter implementation consists of an XML resource file and a Javaclass. You can create any number of implementations that correspond to a given definition. However, in a process there is a one-to-one relationship between the actor filter definition and the actor filter implementation.Actor filter implementation resource fileThe resource file defines:  the id and version of the definition that is implemented  the id and version of the implementation  the set of dependencies required by the implementation.The resource file follows the schema defined in http://documentation.bonitasoft.com/ns/connector/definition/6.0/connector-implementation-descriptor.xsd .The following example is the resource file of an implementation of theinitiator manager actor filter:&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;implementation:connectorImplementation xmlns:implementation=&quot;http://www.bonitasoft.org/ns/connector/implementation/6.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt; &amp;lt;definitionId&amp;gt;initiator-manager&amp;lt;/definitionId&amp;gt; &amp;lt;definitionVersion&amp;gt;1.0.0&amp;lt;/definitionVersion&amp;gt; &amp;lt;implementationClassname&amp;gt;org.bonitasoft.userfilter.initiator.manager.ProcessinitiatorManagerUserFilter&amp;lt;/implementationClassname&amp;gt; &amp;lt;implementationId&amp;gt;initiator-manager-impl&amp;lt;/implementationId&amp;gt; &amp;lt;implementationVersion&amp;gt;1.0.0&amp;lt;/implementationVersion&amp;gt; &amp;lt;jarDependencies&amp;gt; &amp;lt;jarDependency&amp;gt;bonita-userfilter-initiator-manager-impl-1.0.0-SNAPSHOT.jar&amp;lt;/jarDependency&amp;gt;&amp;lt;/jarDependencies&amp;gt;&amp;lt;/implementation:connectorImplementation&amp;gt;Actor filter implementation Java classThe Java class must implement the org.bonitasoft.engine.filter.AbstractUserFilterclass and use the Engine ExecutionContext. The following methods must be implemented:  validateInputParameters to check that the configuration of the actor filter is well defined  filter to get a list of identifiers of all the users that correspond to a specified actor name  shouldAutoAssignTaskIfSingleResult to assign the step to the user if filter returns one userFor details of the APIs, the methods and related objects, see the Javadoc.Actor filter example codeThe following code is an example of the initiator manager actor filter.public class ProcessinitiatorManagerUserFilter extends AbstractUserFilter {@Overridepublic void validateInputParameters() throws ConnectorValidationException {}@Overridepublic List&amp;lt;Long&amp;gt; filter(final String actorName) throws UserFilterException {try {  final long processInstanceId = getExecutionContext().getParentProcessInstanceId();  long processInitiator = getAPIAccessor().getProcessAPI().getProcessInstance(processInstanceId).getStartedBy();  return Arrays.asList( getAPIAccessor().getIdentityAPI().getUser(processInitiator).getManagerUserId());} catch (final BonitaException e) {throw new UserFilterException(e);}}@Overridepublic boolean shouldAutoAssignTaskIfSingleResult() {final Boolean autoAssignO = (Boolean) getInputParameter(&quot;autoAssign&quot;);return autoAssignO == null ? true : autoAssignO;}} Testing an actor filterThere are three stages to testing an actor filter:  Build the actor filter. If you are using Maven, create two projects, onefor the definition and one for the implementation. Build the artifacts forimport into Bonita Studio, using the following command:mvn clean installThis creates a zip file.  Import the actor filter into Bonita Studio. From theDevelopment menu, choose Actor filters,then choose Import…. Select the zip file to beimported.  Test the actor filter in a process. Create a minimal process and add the actorfilter to a step. Configure the process and run it from Bonita Studio.Check the Engine log (available through the Help menu) forany error messages caused by the actor filter.Importing an actor filter into Bonita Studio  Create a zip file that contains the files used by the definition and implementation.  In Bonita Studio, go to the Development menu, Actor filters, Import actor filter….  Upload the zip file.The imported actor filter is now available in the dialog for adding an actor filter.It is also possible to export an actor filter using options in the Development menu. The actor is exported as a .zip file, which you can import into anotherinstance of Bonita Studio.Configuring and deploying a process with an actor filterWhen you configure a process that uses an actor filter in Bonita Studio, youspecify the definition and implementation. You must also specify anydependencies as process dependencies. After the actor filter has been specifiedin the configuration, when you build the process for deployment referencing theconfiguration, the actor filter code is included in the business archive.",
      "url": " /bonita/7.8/development/bonita-artifacts/creating-an-actor-filter",
      "author": "",
      "categories": "Development, Bonita artifacts"
    }
    ,
  

    "bonita-7-8-development-bonita-bpm-portal-urls": {
      "title": "Bonita Portal URLs",
      "content"     : "Bonita Portal URLsThis page explains how to use a URL to access Bonita Portal or the form for a specific task. In these URLs, the process names, versions and the task names must be URL encoded.URL of Bonita PortalProcess instantiation URLComplete URLShort URLProcess overview URLComplete URLShort URLTask URLComplete URLShort URLUsing autologinURL parameter summaryURL of Bonita PortalYou can connect to Bonita Portal from other tools using a URL of the form http://host:port/bonita#?..... Other forms of URL are liable to change in future versions. For example, use http://localhost:8081/bonita#?process=myProcessId&amp;amp;locale=fr, and do not use http://localhost:8081/bonita/console/homepage#?process=myProcessId&amp;amp;locale=fr.Process instantiation URLThe following code samples show how to generate a link to a process instantiation form.Complete URLThis sample shows how to construct the complete URL. Prefer the short format for backward compatibility.return new StringBuffer(&quot;URL: &amp;lt;a href=&quot;&quot;).append(&quot;http://&quot;);.append(host).append(&quot;:&quot;).append(port).append(&quot;/bonita/portal/resource/process/&quot;).append(processName).append(&quot;/&quot;).append(processVersion).append(&quot;/content/?id=&quot;).append(processDefinitionId).append(&quot;&quot;&amp;gt;here&amp;lt;/a&amp;gt;&quot;).toString();Example:http://localhost:8080/bonita/portal/resource/process/Task%20link%20via%20email/1.0/content/?id=34951576542454Short URLThis sample shows how to construct the short URL. Prefer this format for backward compatibility. You will automatically be redirected to the complete format. return new StringBuffer(&quot;URL: &amp;lt;a href=&quot;&quot;).append(&quot;http://&quot;);.append(host).append(&quot;:&quot;).append(port).append(&quot;/bonita/portal/form/process/&quot;).append(processName).append(&quot;/&quot;).append(processVersion).append(&quot;&quot;&amp;gt;here&amp;lt;/a&amp;gt;&quot;).toString();Example:http://localhost:8080/bonita/portal/form/process/Task%20link%20via%20email/1.0Process overview URLThe following code samples show how to generate a link to a process overview form.Complete URLThis sample shows how to construct the complete URL. Prefer the short format for backward compatibility.return new StringBuffer(&quot;URL: &amp;lt;a href=&quot;&quot;).append(&quot;http://&quot;).append(host).append(&quot;:&quot;).append(port).append(&quot;/bonita/portal/resource/processInstance/&quot;).append(processName).append(&quot;/&quot;).append(processVersion).append(&quot;/content/?id=&quot;).append(processInstanceId).append(&quot;&quot;&amp;gt;here&amp;lt;/a&amp;gt;&quot;).toString();Example:http://localhost:8080/bonita/portal/resource/processInstance/Task%20link%20via%20email/1.0/content/?id=8Short URLThis sample shows how to construct the short URL. Prefer this format for backward compatibility. You will automatically be redirected to the complete format. return new StringBuffer(&quot;URL: &amp;lt;a href=&quot;&quot;).append(&quot;http://&quot;).append(host).append(&quot;:&quot;).append(port).append(&quot;/bonita/portal/form/processInstance/&quot;).append(processInstanceId).append(&quot;&quot;&amp;gt;here&amp;lt;/a&amp;gt;&quot;).toString();Example:http://localhost:8080/bonita/portal/form/processInstance/8Task URL Important: A task is not automatically assigned to the user who accesses the task form. There must first be a REST API call to assign the task to the user. Otherwise, the user will not be able to execute the task.The following code samples show how to generate a link to a human task.Complete URLThis sample shows how to construct the complete URL. Prefer the short format for backward compatibility. return new StringBuffer(&quot;URL: &amp;lt;a href=&quot;&quot;).append(&quot;http://&quot;).append(host).append(&quot;:&quot;).append(port).append(&quot;/bonita/portal/resource/taskInstance/&quot;).append(processName).append(&quot;/&quot;).append(processVersion).append(&quot;/&quot;).append(activityName).append(&quot;/content/?id=&quot;).append(activityInstanceId).append(&quot;&quot;&amp;gt;here&amp;lt;/a&amp;gt;&quot;).toString();Example:http://localhost:8080/bonita/portal/resource/taskInstance/Task%20link%20via%20email/1.0/Task/content/?id=3Short URLThis sample shows how to construct the short URL. Prefer this format for backward compatibility. You will automatically be redirected to the complete format.return new StringBuffer(&quot;URL: &amp;lt;a href=&quot;&quot;).append(&quot;http://&quot;).append(host).append(&quot;:&quot;).append(port).append(&quot;/bonita/portal/form/taskInstance/&quot;).append(activityInstanceId).append(&quot;&quot;&amp;gt;here&amp;lt;/a&amp;gt;&quot;).toString();Example:http://localhost:8080/bonita/portal/form/taskInstance/3Or if you only have the process instance ID and the task name:  return new StringBuffer(&quot;URL: &amp;lt;a href=&quot;&quot;).append(&quot;http://&quot;).append(host).append(&quot;:&quot;).append(port).append(&quot;/bonita/portal/form/processInstance/&quot;).append(processInstanceId).append(&quot;/task/&quot;).append(taskName).append(&quot;&quot;&amp;gt;here&amp;lt;/a&amp;gt;&quot;).toString();Example:http://localhost:8080/bonita/portal/form/processInstance/8/task/request%20approvalWith the above format, the first task with the name “request approval” available for the user found in the process instance with id 8 will be displayed.Using autologinBonita 6.x URL syntax is supported in 7.x. Thus, 6.x autologin feature is supported in 7.0 version with 6.x URL syntax.Go to Accessing Bonita Portal and forms by URL 6.5 documentation for more information about this. Warning: The autologin feature only works with v6-type instantiation forms.URL parameter summary         Parameter  Description  Example  locale=&amp;lt;string&amp;gt;  Optional. Identifies the language to be used.  locale=en  id=&amp;lt;id&amp;gt;  &amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;For process instantiation URL, identifies the process definition id.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;For process overview URL, identifies the process instance id.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;For task URL, identifies the activity instance of the task.&amp;lt;/li&amp;gt;  id=6972973247608922361  user=&amp;lt;userId&amp;gt;  Optional. Identifies the user you perform the task for (for administrators and process managers).  user=201  tenant=&amp;lt;tenantId&amp;gt;  Optional. Identifies the tenant on which the process is deployed for multiple tenants environments (Multi-tenancy is available with the Enterprise and Performance editions only).  tenant=2  ",
      "url": " /bonita/7.8/development/bonita-bpm-portal-urls",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "bonita-7-8-development-bonita-engine-architecture-engine-architecture-overview": {
      "title": "Bonita Engine architecture overview",
      "content"     : "Bonita Engine architecture overviewThis page describes the Bonita Engine.OverviewAPIsBPM servicesGeneric servicesPackagingOverviewThe Bonita Engine is the runtime processor at the core of Bonita.  It executes processes, handling actions related to tasks, such as database access, and housekeeping actions such as logging. The Engine is composed of a number of services and APIs. The services are either BPM services or generic services.The Bonita Engine component services are completely configurable using the plaform setup tool to retrieve the current configuration and update it.Services are provided to the Engine using a ServiceAccessor. By default, this uses Spring to bind services and to retrieve service instances.The Spring configuration files are present in the classpath but beans can be added or overridden using configuration files stored in database under the CONFIGURATION  table.These files are all suffixed with -custom.xml and contain Spring bean declaration examples.Theses files can be retrieved and updated using the platform setup tool.Folder  setup/platform_conf/[initial|current]/tenant_template_engine contains tenant-level template configuration files used when creating a new tenant (Subscription edition):  bonita-tenant-community-custom.properties : contains as comments all the available properties that can be overridden at tenant level.  bonita-tenants-custom.xml: XML file can be modified to add any Spring bean you need to add/override at tenant level.Folder  setup/platform_conf/current/tenants/[TENANT_ID]/tenant_engine where [TENANT_ID] is your tenant id (e.g. 1). Contains same files use for an already existing tenant.The Engine can be installed on a Java Virtual Machine (JVM), in any web/Java EE container, or can be used as a simple Java library.APIsThis section contains a summary of the Bonita Engine APIs. For details of the APIs, the methods and related objects, see the Javadoc.| | ||:-|:-|| Identity API | Manages information about an organization, that is, the set of users who can act in processes. Handles creation, modification, and deletion of organizations, groups, roles, memberships, and users.|| Organization API | Import or export an organization.|| Process API | Handles actions related to processes (deploy, enable, start, disable, delete), executes activities, updates process data, search for a retrieve process entities.|| Login API | Logs in to the engine in a platform and creates a session.|| Monitoring API | Retrieves information about current activity, such as the number of users logged in, or the number of processes currently being executed.|| Log API | provides access to business logs, for searching and to retrieve information about current or archived processes.|| Platform command API | Creates, starts, stops platform.|| Document API | Manages documents that are attached to a process instance.|| Theme API | Manages the Look &amp;amp; Feel of the Bonita Portal web and mobile interfaces and forms.|| Tenant Management API | Used to pause service in a tenant for maintenance, to resume service, and to check whether a tenant is paused. Available in Teamwork, Efficiency, Performance and Enterprise editions.|There is also a Web API, which is for internal use only, and a Command API, which is primarily for internal use.BPM servicesBPM services are related to BPM activities.Actor mapping| | ||:-|:-|| Description: | Manage mapping between actors and users, roles, and groups. | | Used by:  |-| | Implementation: | org.bonitasoft.engine.actor.mapping.impl.ActorMappingServiceImpl|Category      Description:  Manage categories of processes. A category is a way to classify processes. Categories are handled manually by administrators in Bonita Portal and are visible to portal users.  Used by:  Command service  Implementation:  org.bonitasoft.engine.core.category.impl.CategoryServiceImpl  Notes: Store categories with the persistence serviceConnector      Description:  Execute a connector using the ConnectorDefinition: get the connector from the file system, evaluate expressions of input parameters, instantiate/execute the connector and then execute output operations.  Used by:  Command service  Implementation:  org.bonitasoft.engine.core.connector.impl.ConnectorServiceImpl  Expression resolver      Description:  Evaluate expressions and the associated dependencies. The expression resolver default implementation take all expressions and dependencies, flattens them and orders them by type. It then evaluate all expressions starting with expressions that are known to have no dependencies. All expressions that are evaluated at the same time have the same context of evaluation.  Used by:  Any service that evaluates expressions  Implementation:  org.bonitasoft.engine.core.expression.control.api.impl.ExpressionResolverServiceImpl  Login      Description:  Log in to or out of the Engine.  Used by:  APIs  Implementation:  org.bonitasoft.engine.core.login.LoginServiceImpl  Platform login      Description:  Log in to or out of the Engine at the platform level.  Used by:  APIs  Implementation:  org.bonitasoft.engine.core.platform.login.impl.PlatformLoginServiceImpl  Operation      Description:  Execute operations that update data. The Operation service can use different types of update method.  The default methods, called Operators, are ASSIGNMENT, JAVA_METHOD, and XPATH_UPDATE_QUERY.  Used by:  Engine service, APIs when updating data using an operation  Implementation:  org.bonitasoft.engine.core.operation.impl.OperationServiceImpl  Parameter      Description:  For the Enterprise, Performance, Efficiency, and Teamwork editions, manage parameters of a process. Parameters are set for the scope of a process definition and are designed to be used as global configuration of a process, for example, you could store the URL of a database you use in some connectors.  Used by:  Engine, APIs, ExpressionService (using the contributed evaluator) when reading and updating parameters  Implementation:  org.bonitasoft.engine.parameter.propertyfile.PropertyFileParameterService  Notes:  Relies on Java properties in a file to store and retrieve parameters  Process comment      Description:  Create, update, get, list, or delete comments attached to a process instance.  Used by:  APIs  Implementation:  org.bonitasoft.engine.core.process.comment.api.impl.SCommentServiceImpl  Notes:  Relies on persistence service to store comments  Process definition      Description:  Handle process definition objects.  Used by:  Engine  Implementation:  org.bonitasoft.engine.core.process.definition.ProcessDefinitionServiceImpl  Notes:  Stores definition in file system and in cache using XML  Engine      Description:  Handles process execution.  Used by:  APIs when executing processes or activities  Implementation:  the Engine itself  Process instance      Description:  Handle process instance objects.  Used by:  Engine  Implementation:  org.bonitasoft.engine.core.process.instance.impl.ProcessInstanceServiceImpl  Notes:  Relies on the persistence service to store objects  Supervisor mapping      Description:  Define the mapping between a process definition and the user who supervises it.  Used by:  APIs  Implementation:  org.bonitasoft.engine.supervisor.mapping.impl.SupervisorMappingServiceImpl  User filter      Description:  Read and execute a userfilter that filters the set of users eligible to carry out a pending task.  Used by:  Engine  Implementation:  org.bonitasoft.engine.core.filter.impl.UserFilterServiceImpl  Notes:  Uses the cache and read user filter of the file system  Generic servicesGeneric services  perform actions that are not related to BPM but are required for successful process execution. No generic service has a dependency on a BPM service.Archive      Description:  Store and retrieve objects that will no longer change.  For example, a process instance that is finished is archived using this service.  Used by:  ProcessInstance service to store ArchivedProcessInstance objects  Implementation:  org.bonitasoft.engine.archive.impl.ArchiveServiceImpl  Authentication      Description:  Check user credentials using a map.  Used by:  Login service in Bonita Teamwork, Efficiency, Performance, and Enterprise editions  Implementation:  org.bonitasoft.engine.authentication.impl.GenericAuthenticationServiceImpl  Notes:  Uses the Identity service to check user credentials  Querieable logs      Description:  Log information related to business actions. For example, ?Activity ‘step1’ was created with id = 12? or ?Connector email-1.0.0 was successfully executed on activity 1547?. By default, log information is stored in a database for easy query.  Used by:  Any service storing objects: ?deleted activity[..]?  Scheduler service: ?Job executed […]?  Implementations:  org.bonitasoft.engine.services.impl.SyncBusinessLoggerServiceImpl (Community edition: insert logs directly in database)  org.bonitasoft.engine.log.api.impl.BatchBusinessLoggerImpl (Teamwork, Efficiency, Performance, and Enterprise editions: inserts all logs in batch at the end of the transaction)  Tenant cache      Description:  Store objects in the cache, and retrieve them. The service handles different caches that can be configured separately.  Used by:  ProcessDefinition service, Connector service, Expression service: put reusable definition objects in cache  Implementation:  org.bonitasoft.engine.cache.ehcache.EhCacheCacheService  Notes:  Uses EhCache to cache objects  Platform cache      Description:  Store objects in the cache, and retrieve them. The service handles different caches that can be configured separately.  Used by:  ProcessDefinition service, Connector service, Expression service: put reusable definition objects in cache  Implementation:  org.bonitasoft.engine.cache.ehcache.PlatformEhCacheCacheService  Notes:  Uses EhCache to cache objects  ClassLoader      Description:  An abstraction layer of the classloader, making it easy to change the classloader implementation at runtime. There is a hierarchy of classloaders, with a platform classloader handling items used by the whole platform, and a process classloader for items specify to a process. Each classloader is identified by a type and an Id.  Used by:  Server APIs, to create and set the classloader at platform level.  Engine, to handle classloader of type process  Implementation:  org.bonitasoft.engine.classloader.ClassLoaderServiceImpl  Notes:  Relies on the dependency service to load the jar put in dependencies for a specific classloader  Platform command      Description:  Register and execute platform commands. Commands are Java classes that can be executed by the engine using the API. Using this service you can create your own code to be put server side and call it from a client.  Used by:  API to execute platform-level commands  Implementation:  org.bonitasoft.engine.platform.command.impl.PlatformCommandServiceImpl  Notes:  Uses persistence service to store commands  Connector executor      Description:  Execute a connector: take the instantiated Connector object, set its parameters, and execute it.  Used by:  Connector service, to execute the instantiated connector  Implementation:  org.bonitasoft.engine.connector.impl.ConnectorExecutorImpl  Data      Description:  Handle DataSource objects, which describe how to retrieve and store data on an internal or external system. The Engine contains two default implementations: org.bonitasoft.engine.data.instance.DataInstanceDataSourceImpl, which handles data stored in database, and org.bonitasoft.engine.core.data.instance.impl.TransientDataInstanceDataSource, which handles data stored in memory.  Used by:  DataInstance service, to get the data source of a data definition to get its value  Implementation:  org.bonitasoft.engine.data.DataServiceImpl  DataInstance      Description:  Handle data instance objects. A data instance is a variable that has a name, a type, and a value. This service also handles expressions of type VARIABLE_TYPE. A VARIABLE_TYPE expression references a data instance. When an expression is evaluated, the value of the data instance is returned.  Used by:  Process API, Process executor, all services that access data  Implementation:  org.bonitasoft.engine.data.DataInstanceServiceImpl  Notes:  Uses the persistence service to store data instances  Dependency      Description:  Declare Java dependencies on business objects. These dependencies have a name and a content that is the JAR itself. For example, a process that uses an email connector has a dependency on javamail.jar that is declared at deployment.  Used by:  Engine, to declare process dependencies  ClassloaderService, to retrieve dependencies of process  Implementation:  org.bonitasoft.engine.dependency.impl.DependencyServiceImpl  Notes:  Dependency information is stored in database  Platform dependency      Description:  Declare dependencies between entities that are related to the platform, for example,  platform commands declare platform dependencies.  Used by:  Platform Command service, to declare dependency of platform commands  Implementation:  org.bonitasoft.engine.dependency.impl.PlatformDependencyServiceImpl  Notes:  Dependency information is stored in database  Document      Description:  Store content and properties of a document and map the document to an instance of a process.  Used by:  Engine APIs when retrieving documents.  Implementation:  org.bonitasoft.engine.core.document.api.impl.DocumentServiceImpl  Notes:  The mapping of the document is not stored in the same table as the documetn itself.  Expression      Description:  Evaluate an expression using the evaluator provided by another service (but do not evaluate dependencies of the expression). This service is extended by evaluators specific to the kind of expression to be evaluated. For example, in the Enterprise, Performance, Efficiency, and Teamwork editions, the ParameterService contributes an evaluator to evaluate expressions that reference a parameter. To add a new kind of expression, contribute a class implementing org.bonitasoft.engine.expression.ExpressionExecutorStrategy to the ExpressionExecutorStrategy class.  Used by:  ExpressionResolverService. to evaluate an expression and its dependencies  Implementation:  org.bonitasoft.engine.expression.impl.ExpressionServiceImpl  Identity      Description:  Handle information about elements of an organization (users, groups, roles, memberships).  Used by:  ProcessExecutor, to resolve actor mappings.  Implementation:  org.bonitasoft.engine.identity.impl.IdentityServiceImpl  Incident      Description:  Service that reports incidents to an administrator.  An incident is an error that cannot be handled by the engine. The default implementation log is a file named “Incidents.log” inside the tenant folder.  Used by:  Mainly by the work service.  Implementation:  org.bonitasoft.engine.incident.IncidentServiceImpl  Job      Description:  Handle and trace execution of internal jobs of the engine.  A job is an internal action that can be triggered once or several times. (e.g. Timers are implemented using jobs.)  Used by:  Scheduler service.  Implementation:  org.bonitasoft.engine.scheduler.impl.JobServiceImpl,  Lock      Description:  Enable synchronization of code execution. The service enables creation of shared locks and exclusive locks. If a shared lock is taken out, other shared locks can also be taken out. If an exclusive lock is taken out, it blocks execution until the lock is released.  Used by:  ProcessExecutor, for canceling a process or for merging execution of branches  Implementation:  org.bonitasoft.engine.lock.impl.MemoryLockService  Notes:  Uses java.util.concurrent.locks.ReentrantReadWriteLock objects that are in memory only  Monitoring      Description:  Monitor Engine activity, such as active transactions, active users, or JVM status.  Used by:  API  Implementation:  org.bonitasoft.engine.monitoring.impl.MonitoringServiceImpl  Tenant Monitoring      Description:  Provide metrics on a tenant.  Used by:  API  Implementation:  com.bonitasoft.engine.monitoring.impl.TenantMonitoringServiceImpl  Platform Monitoring      Description:  Provide metrics on a platform.  Used by:  API  Implementation:  com.bonitasoft.engine.monitoring.impl.PlatformMonitoringServiceImpl  Persistence      Description:  Handle storage of objects in a persistent medium. There are two services, bonita-persistence-read for reading objects and bonita-persistence-api for reading and writing objects. The default implementation stores objects in the database, but the service could be implemented for any other type of persistent storage. The persistence service gives a unique identifier to an object.  Used by:  All services reading persistent objects (such as processInstanceService) use bonita-persistence-read. All services creating or modifying objects use bonita-persistence-api.  Implementation:  Hibernate  Platform      Description:  Handle creation, activation, and deletion of platform.  The platform is the foundation of the Engine: creating the platform means creating database tables that are used by the Engine.  Used by:  -  Implementation:  org.bonitasoft.engine.platform.impl.PlatformServiceImpl  Notes:  Uses the persistence service to create platform.  Profile      Description:  Handle profiles. A profile is an entity with a name, description, and icon path that is associated with a user, group, role, or membership. A profile entity is used by Bonita Portal to determine a user’s profile (user, process manager, or administrator).  Used by:  API, used by Bonita Portal to modify user profiles.  Implementation:  org.bonitasoft.engine.profile.impl.ProfileServiceImpl  Notes:  Uses persistence service to store privileges  Recorder      Description:  A layer between the persistence service and all services that need to store objects. It ensures that events are triggered and that queriable log entries are written.  Used by:  All services storing objects. For example, the ProcessInstanceService stores a ProcessInstanceObject using the recorder Implementation: org.bonitasoft.engine.recorder.impl.RecorderImpl  Reporting      Description:  Handle storage, retrieval, and update of reports.  Used by:  API  Implementation:  com.bonitasoft.engine.core.reporting.ReportingServiceImpl  Scheduler      Description:  Handle jobs and ensure that they are executed at the required time. There are three kinds of trigger: OneShotTrigger to execute a job once only at a given time, RepeatTrigger to execute a job a finite number of times at a given interval, and CronTrigger to execute a job according to a Unix-type structure.  Used by:  ProcessEngine, for timers and for launching the job that matches a message event  Implementation:  QuartzSchedulerService, org.bonitasoft.engine.scheduler.impl.SchedulerServiceImpl  Notes:  Relies on Quartz to launch jobs  Session      Description:  Handle user sessions. A session is an object stored in memory that contains several kinds of information about the client that uses it, for example, userId, ClientIp, ExpirationDate.  Used by:  LoginService,SchedulerService,WorkService to create sessions  Implementation:  org.bonitasoft.engine.session.impl.SessionServiceImpl  Platform session      Description:  Handle platform sessions. These sessions are created when something logs in to the platform.  Used by:  PlatformLoginService  Implementation:  org.bonitasoft.engine.platform.session.impl.PlatformSessionServiceImpl  Theme      Description:  Handle storage, retrieval, and update of portal themes.  Used by:  API.  Implementation:  org.bonitasoft.engine.theme.impl.ThemeServiceImpl  Transaction      Description:  Handles business transactions. A business transaction is a high-level transaction that contains several technical transactions.  This service is compatible with JTA.  Used by:  Almost all services, including persistence service to register technical transactions.  Implementation:  org.bonitasoft.engine.transaction.TransactionServiceImpl  Technical logger      Description:  An abstraction layer used to access the logger implementation. Clients of this service can log information using different levels: TRACE, DEBUG, INFO, WARNING, ERROR.  Used by:  All services that log information in the technical log.  Implementation:  TechnicalLoggerSLF4JImpl  Notes:  Implementation based on SLF4J  Work      Description:  Trigger work for immediate execution but asynchronously.  Unlike the scheduler service, which uses persistent storage, the Work service stores data in memory for better performance. This means that clients of the service must handle restart if a triggered work does not complete. For example, if the JVM shuts down, when it restarts the client must check for incomplete work and re-trigger it.  Used by:  ProcessExecutor, to trigger work to execute flow elements one after another  Implementation:  org.bonitasoft.engine.work.ExecutorWorkService  Notes:  Trigger launches work in a ThreadPool. For Community Edition, work items are launched in sequence, each one in a new thread. For Teamwork, Efficiency, Performance, and Enterprise Editions, work items are triggered in multiple threads.  XML      Description:  Parse and write XML files.  Used by:  BusinessArchiveBuilder, to read/write process definitions  ConnectorService, to read connector definition  Implementations:  org.bonitasoft.engine.xml.parse.SAXParser (parse using sax) org.bonitasoft.engine.xml.SAXValidator (validate using sax) org.bonitasoft.engine.xml.DOMWriter (write using DOM)  PackagingThe Engine is provided as three .jar files:  bonita-common contains code that is used by both the server and client sides of the application. For example, the API interface is accessed both on the server side, which contains the API implementations, and on the client side, which has a proxy on the API. It also contains objects such as BusinessArchive, which is the JavaObject representation of a .bar file.  bonita-server contains code used on by the server. For example, it contains service implementations, the services accessor, and API implementations.  bonita-client contains client-only code. For example, it contains the Accessor service for the APIs, which is not in the common or server packages to prevent the server code calling the client-side API accessor.In the Enterprise, Performance, Efficiency, and Teamwork editions, these jar files are bonita-common-sp.jar, bonita-server-sp.jar, and bonita-client-sp.jar.",
      "url": " /bonita/7.8/development/bonita-engine-architecture/engine-architecture-overview",
      "author": "",
      "categories": "Development, Bonita Engine architecture"
    }
    ,
  

    "bonita-7-8-development-bonita-engine-architecture-execution-sequence-states-and-transactions": {
      "title": "Execution sequence, states, and transactions",
      "content"     : "Execution sequence, states, and transactionsThis page describes the sequence of actions performed when a process instance is created and when a step is performed by a user.It shows the interactions between the Bonita Portal and Bonita Engine.In the sequences described in this page, some of the actions apply only to Teamwork, Efficiency, Performance, or Enterprise editions, and are marked “Subscription only”.For the Community edition, these actions are not relevant, but the order of the other actions is the same.Instantiation of a process through a user entry formUser Step action sequenceUser Step submission sequenceFlow node states and transitionsExecution of a stepExample: User taskIn the first diagram, the task contains connectors.In the second diagram, there are no connectors in the task.Work service mechanismShort transactions and asynchronismSummary of state typesInstantiation of a process through a user entry form  The Portal displays the process instantiation form to the user  The user enters data in the form  The button of the form having the Start process action in the UI designer sends a POST request with the form data to start the process  The submitted data are validated against the process instantiation contract  If the contract is valid the process instance is created and input values are persisted in database  Process data instances are created and initialized in the order of declaration using:  An operation declared on the process that saves its value to the process data  The initial value expression if no operation is declared  null if no expression or operation is definedThe Engine creates and initializes business data  Subscription only: The Engine creates and initializes search indexes  The Engine initializes process instance Documents with default value coming from the definition or with submitted files  Operations (that does not initialize data) are executed. Operations at process instantiation level can either come from V6 forms or from calling process instances (for processes stared by call-activities)  The Engine instantiates and executes the “on enter” connectors (evaluate input expression, execute, evaluate output operation). Connectors are executed in the order of declarationCommunity: Execution duration is not limited. If the connector never finishes, the process instantiation will never finishSubscription: Execution duration of a connector is limited to a maximum of 5 minutes by default. This timeout value can be changed by configuration. Above this limit,the connector execution is aborted and the process instantiation is considered failed.  The process is instantiated, the API call finish and the Engine executes the process flow asynchronouslyUser Step action sequenceFor a user step, the sequence of actions is as follows:  The Engine initializes task variables with their default values  The Engine executes actor filters and then potentially assigns the task to a user  The Engine launches the “on enter” connectors  The Engine evaluates the task dynamic name and description. This will be evaluated only onceThe user task is now in ready state and is waiting for a user to submit it.User Step submission sequence  The Portal displays the form to the user  The user enters data in the form  The button of the form having the Submit task action in the UI designer sends a POST request with the form data to start the step  The submitted data are validated against the step contract  If the contract is valid input values are persisted in database and the execution continues asynchronously. Otherwise an exception is thrown and the step stays in the same state.  The Engine executes the Operations defined for the step  The Engine launches the “on finish” connectors  The Engine processes the Description after step completion  The step is complete.Flow node states and transitionsA state is either stable or terminal:  stable: the flow node is not yet finished, but paused as it waits for input, typically from the user. The transaction is committed.  terminal: This is the last state of the flow node. A flow node in this state is considered to be finished and the engine triggers the asynchronous execution of the following elements of the process.Each state has a specific behaviour and its execution is wrapped into an ACID transaction.A flow node is defined by a set of states.Execution of a step  Get the current state of the step.  Execute the state’s behavior.  Find the next state of the flow node and set it as the current state.  If the state is stable, the transaction is committed, and the API call is returned.  If the state is terminal, the transaction is committed, the Engine triggers the asynchronous execution of the followings elements of the process and the API call is returned.  If the state is neither stable nor terminal, the transition to the next state is scheduled asynchronously.If there is a connector to execute in the state’s behavior, then the transaction is committed and the connector is executed outside of any transaction.The flow node stays in the current state while the connector is being executed.When the execution of the last connector is complete, the state’s behaviour is completed. If you are using a Bonita Subscription edition, a timeout limit can be set for connector execution.Example: User taskThe diagrams below show the transactions and states when a user task is executed.The vertical line represents the condition necessary to execute the current state.The first state is initializing: it is automatically executed and the flow node goes to next state (Ready) but is executed only after an API call.In the first diagram, the task contains connectors.In the second diagram, there are no connectors in the task.As you can see in these illustrations, there is a non-negligible cost when adding some connectors on an activity:If there is no connector to execute then the state executes in one transaction.If there is at least one connector to execute in the state, the state execution requires at least three transactions:  The first transaction is committed just before the execution of the connectors. There is one transaction for this whatever the number of connectors.  The connectors are not transactional. Nevertheless, a transaction is needed to save the output data of the connector execution. There will be a transaction for each connector that is executed.  The last transaction is used to continue to execute the current state’s behavior, and to set the state to the next reachable one (but not execute it).Work service mechanism  The Engine commits the transaction and then submits a work to execute the connectors asynchronously. The connectors are executed outside any transaction and thus are not a problem for the data integrity if the execution takes too long.  As soon as there is a free slot in the Work Service, it executes the work, which is in fact the connector execution.  When a connector execution is finished, if there are other connectors, they are executed in the same way. If there are no more connectors, the Engine continues to execute the state’s behavior by triggering a new work.  When the Engine executes a state’s behavior, it updates the display name, and then sets the activity to the state “Ready”. As this is a stable state, the Engine commits the transaction and stops.  The state “Ready” will then be executed through an API call.Short transactions and asynchronismTransactions in the Engine are as small as possible, and each transaction is committed as soon as possible.Each unit of work uses a non-blocking queued executor mechanism and is thus asynchronous. There is a dedicated queue for asynchronous executions. (Connector execution is handled in a separate execution queue.)As a consequence of the design, when an asynchronous work unit originates from an API call (which might be a result of a human action), then the call returns and ends the transaction.The work unit is then executed as soon as possible, asynchronously, in a separate transaction.For this reason, a task that is being initialized might not yet be ready for execution, but will be executable after a short while, depending on the work executor availability.A client application therefore needs to poll regularly to check when the asynchronous work unit is finished, or write an event handler in order to be notified.Summary of state types  Initializing: indicates that an activity is being initialized.  Ready: indicates that a human or manual task has been initialized but is not yet being executed.  Waiting: indicates that a RECEIVE_TASK, BOUNDARY_EVENT or INTERMEDIATE_CATCH_EVENT activity is waiting for some external trigger.  Executing: indicates that an activity is being executed.  Failed: indicates that a task has failed because of a problem in execution, for example because of an exception that was not anticipated, a connector that fails, or bad expression design.  Skipped: indicates that a task that failed because of connector execution failure is being skipped instead of re-executed. Skipping a task skips the execution of any connectors not already executed and proceeds to task completion.  Cancelled: indicates that an activity is cancelled by a user.  Aborting: indicates that an activity is cancelled by the system. For example, an interrupting event sub-process can trigger ABORTS for all other active paths.  Completed: indicates an activity that is complete.  Error: not currently used.",
      "url": " /bonita/7.8/development/bonita-engine-architecture/execution-sequence-states-and-transactions",
      "author": "",
      "categories": "Development, Bonita Engine architecture"
    }
    ,
  

    "bonita-7-8-development-bonita-engine-architecture-services-event-handlers": {
      "title": "Event handlers",
      "content"     : "Event handlersNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.An event handler is an extension to the engine that is configured to run when a specified event occurs.You can add event handlers for several purposes and you can configure which events you want to catch.We strongly recommend that you add only appropriate handlers and carefully code the handler filters to handle only those events that you are interested in.An event is a change to any object in the database (user, activity, processDefinition,… ).You can create an event handler to track any change to any object in the database and take the appropriate action. For example:  Catch PROCESSINSTANCE_CREATED to detect that a process instance has started, and notify the process supervisor.  Catch FLOWNODE_INSTANCE_CREATED to detect that a human task is available, and send email to all the users elligible to perform it.  Catch HIDDEN_TASK_CREATED to detect that a service task becomes available, and start an external system that is required to complete the task.At the end of this page there is a list of all the events.In a cluster environment, Event handlers must be Serializable (implements Serializable and have all its fields serializable or transient) because they are shared with other nodes of the cluster.Example: deploy an event handlercreate a maven project for event handler jarCreate event handler class:Deploy jarRegister an event handlerTest itFilter an eventEvent listExample: deploy an event handlerThis example shows an event handler that detects changes in the state of activity instances. When executing, the event handler calls technical logger service.create a maven project for event handler jarpom.xml :&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&amp;lt;groupId&amp;gt;org.bonitasoft.example&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;event-handler-example&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;1.0.0-SNAPSHOT&amp;lt;/version&amp;gt;&amp;lt;properties&amp;gt;&amp;lt;bonita.version&amp;gt;7.8.0&amp;lt;/bonita.version&amp;gt;&amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;&amp;lt;/properties&amp;gt;&amp;lt;dependencies&amp;gt;&amp;lt;dependency&amp;gt;&amp;lt;groupId&amp;gt;org.bonitasoft.engine&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;bonita-server&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;${bonita.version}&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;/dependencies&amp;gt;&amp;lt;build&amp;gt;&amp;lt;plugins&amp;gt;&amp;lt;plugin&amp;gt;&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;&amp;lt;configuration&amp;gt;&amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt;&amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt;&amp;lt;/configuration&amp;gt;&amp;lt;/plugin&amp;gt;&amp;lt;/plugins&amp;gt;&amp;lt;/build&amp;gt;&amp;lt;/project&amp;gt;Create event handler class:Create a class that implements SHandler&amp;lt;SEvent&amp;gt;.src/main/java/org/bonitasoft/example/EventHandlerExample.java:package org.bonitasoft.example;import java.util.UUID;import org.bonitasoft.engine.events.model.SEvent;import org.bonitasoft.engine.events.model.SHandler;import org.bonitasoft.engine.events.model.SHandlerExecutionException;import org.bonitasoft.engine.log.technical.TechnicalLogSeverity;import org.bonitasoft.engine.log.technical.TechnicalLoggerService;public class EventHandlerExample implements SHandler&amp;lt;SEvent&amp;gt; {private final TechnicalLoggerService technicalLoggerService;private TechnicalLogSeverity technicalLogSeverity;public EventHandlerExample(TechnicalLoggerService technicalLoggerService, String loggerSeverity) {this.technicalLoggerService = technicalLoggerService;//set desired logging levelthis.technicalLogSeverity = TechnicalLogSeverity.valueOf(loggerSeverity);}public void execute(SEvent event) throws SHandlerExecutionException {if (technicalLoggerService.isLoggable(this.getClass(), technicalLogSeverity)) {technicalLoggerService.log(this.getClass(), technicalLogSeverity, &quot;ExampleHandler: executing event &quot; + event.getType());}// add your business logic here}public boolean isInterested(SEvent event) {if (technicalLoggerService.isLoggable(this.getClass(), technicalLogSeverity)) {technicalLoggerService.log(this.getClass(), technicalLogSeverity,&quot;ExampleHandler - event &quot;+ event.getType()+ &quot; - asks if we are interested in handling this event instance&quot;);}// add your business logic here// for this example purpose, assume we are always interestedreturn true;}public String getIdentifier() {//ensure this handler is registered only oncereturn UUID.randomUUID().toString();}}Deploy jar  Build event-handle-example-1.0-SNAPSHOT.jar using mvn clean install maven command.  Copy event-handle-example-1.0-SNAPSHOT.jar in webapps/bonita/WEB-INF/lib/ folder (for tomcat bundle)Register an event handlerAn event handler is registered on an event by adding an entry to the appropriate map. The list of handlers registered can be extended in the bonita-tenant-sp-custom.xml file:&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;  xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&amp;gt;&amp;lt;!-- add event handler bean definition --&amp;gt;&amp;lt;bean id=&quot;myEventHandlerExample&quot; class=&quot;org.bonitasoft.example.EventHandlerExample&quot;&amp;gt;&amp;lt;!-- add logging service --&amp;gt;&amp;lt;constructor-arg name=&quot;technicalLoggerService&quot; ref=&quot;tenantTechnicalLoggerService&quot; /&amp;gt;&amp;lt;constructor-arg name=&quot;loggerSeverity&quot; value=&quot;WARNING&quot;/&amp;gt;&amp;lt;/bean&amp;gt;&amp;lt;bean id=&quot;eventHandlers&quot; class=&quot;org.springframework.beans.factory.config.MapFactoryBean&quot;&amp;gt;&amp;lt;property name=&quot;targetMapClass&quot;&amp;gt;&amp;lt;value&amp;gt;java.util.HashMap&amp;lt;/value&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;property name=&quot;sourceMap&quot;&amp;gt;&amp;lt;map&amp;gt;&amp;lt;entry key=&quot;PROCESSINSTANCE_STATE_UPDATED&quot; value-ref=&quot;myEventHandlerExample&quot;/&amp;gt;&amp;lt;/map&amp;gt;&amp;lt;/property&amp;gt;&amp;lt;/bean&amp;gt;&amp;lt;/beans&amp;gt;Test itRestart web server and run a basic process and check bonita log file in folder tomcat/logs:INFOS: THREAD_ID=78 | HOSTNAME=gt | ExampleHandler: event PROCESSINSTANCE_STATE_UPDATED - asks if we are interested in handling this event instance...INFOS: THREAD_ID=78 | HOSTNAME=gt | ExampleHandler: executing event PROCESSINSTANCE_STATE_UPDATEDFilter an eventAn event handler contains a filter, isInterested, which detects the relevant instances of the event.The example below shows how to use the State Id of a flow node to filter for a particular state (in this case, failed).Flownode State Ids are defined in the subclasses of org.bonitasoft.engine.core.process.instance.api.states.FlowNodeState.There is no exhaustive list; the set of states is extensible without notice.public boolean isInterested(SEvent event) {boolean isInterested = false;// Get the object associated with the eventObject eventObject = event.getObject();// Check that event is related to a taskif (eventObject instanceof SFlowNodeInstance) {SFlowNodeInstance flowNodeInstance = (SFlowNodeInstance) eventObject;// Verify that state of the task is failed. See// FailedActivityStateImplisInterested = (flowNodeInstance.getStateId() == 3);}return isInterested;}Event handlers are recursive, that is, if an event handler itself modifies something and triggers an event, the relevant event handler is called. This means you might need to include loop detection in your event handler.Event listThis is a snapshot of the events used in the Engine.| | ||:-|:-|| Service | Events| | ActivityInstanceServiceImpl | ACTIVITYINSTANCE_CREATED, HUMAN_TASK_INSTANCE_ASSIGNEE_UPDATED, ACTIVITYINSTANCE_STATE_UPDATED, ACTIVITY_INSTANCE_TOKEN_COUNT_UPDATED, HIDDEN_TASK_CREATED, HIDDEN_TASK_DELETED, PENDINGACTIVITYMAPPING_CREATED, PENDINGACTIVITYMAPPING_DELETED| | ActorMappingServiceImpl | ACTOR_CREATED, ACTOR_DELETED, ACTOR_UPDATED, ACTOR_MEMBER_CREATED, ACTOR_MEMBER_DELETED| | CategoryServiceImpl | CATEGORY_CREATED, CATEGORY_DELETED, CATEGORY_UPDATED| | CommandServiceImpl | COMMAND_CREATED, COMMAND_DELETED, COMMAND_UPDATED| | SCommentServiceImpl | COMMENT_CREATED, COMMENT_DELETED| | ConnectorInstanceServiceImpl | CONNECTOR_INSTANCE_CREATED, CONNECTOR_INSTANCE_DELETED, CONNECTOR_INSTANCE_STATE_UPDATED, CONNECTOR_INSTANCE_UPDATED| | DependencyServiceImpl | DEPENDENCY_CREATED, DEPENDENCYMAPPING_CREATED, DEPENDENCY_DELETED, DEPENDENCYMAPPING_DELETED, DEPENDENCY_UPDATED, DEPENDENCYMAPPING_UPDATED| | DocumentMappingServiceImpl | DOCUMENTMAPPING_CREATED, DOCUMENTMAPPING_DELETED, DOCUMENTMAPPING_UPDATED| | SEventInstanceServiceImpl | EVENT_INSTANCE_CREATED, EVENT_TRIGGER_INSTANCE_CREATED, EVENT_TRIGGER_INSTANCE_DELETED, MESSAGE_INSTANCE_CREATED, MESSAGE_INSTANCE_DELETED, MESSAGE_INSTANCE_UPDATED| | ExternalIdentityMappingServiceImpl | EXTERNAL_IDENTITY_MAPPING_CREATED, EXTERNAL_IDENTITY_MAPPING_DELETED| | FlowNodeInstanceServiceImpl | ARCHIVED_FLOWNODE_INSTANCE_DELETED, FLOWNODE_INSTANCE_DELETED| | GatewayInstanceServiceImpl | GATEWAYINSTANCE_CREATED, GATEWAYINSTANCE_HITBYS_UPDATED, GATEWAYINSTANCE_STATE_UPDATED| | IdentityServiceImpl | GROUP_CREATED, GROUP_DELETED, GROUP_UPDATED, METADATA_CREATED, METADATA_DELETED, METADATA_UPDATED, METADATAVALUE_CREATED, METADATAVALUE_DELETED, METADATAVALUE_UPDATED, ROLE_UPDATED, ROLE_CREATED, ROLE_DELETED, USER_UPDATED, USER_CREATED, USER_DELETED, USER_CONTACT_INFO_UPDATED, USER_CONTACT_INFO_CREATED, USER_CONTACT_INFO_DELETED, USERMEMBERSHIP_UPDATED, USERMEMBERSHIP_CREATED, USERMEMBERSHIP_DELETED| | JobServiceImpl | JOB_DESCRIPTOR_CREATED, JOB_DESCRIPTOR_DELETED, JOB_PARAMETER_CREATED, JOB_PARAMETER_DELETED, JOB_LOG_CREATED, JOB_LOG_DELETED|| JobWrapper | JOB_COMPLETED, JOB_EXECUTING| | ProcessDefinitionServiceImpl | PROCESSDEFINITION_CREATED, PROCESSDEFINITION_DELETED, PROCESSDEFINITION_DEPLOY_INFO_UPDATED, PROCESSDEFINITION_IS_DISABLED_UPDATED, PROCESSDEFINITION_IS_ENABLED_UPDATED, PROCESSDEFINITION_IS_RESOLVED_UPDATED| | ProcessInstanceServiceImpl | PROCESS_INSTANCE_CATEGORY_STATE_UPDATED, PROCESSINSTANCE_CREATED, PROCESSINSTANCE_DELETED, PROCESSINSTANCE_STATE_UPDATED, PROCESSINSTANCE_UPDATED|| ProfileServiceImpl | PROFILE_CREATED, PROFILE_DELETED, PROFILE_UPDATED, ENTRY_PROFILE_CREATED, ENTRY_PROFILE_DELETED, ENTRY_PROFILE_UPDATED, PROFILE_MEMBER_DELETED| | ReportingServiceImpl | REPORT_CREATED, REPORT_DELETED| | SupervisorMappingServiceImpl | SUPERVISOR_CREATED, SUPERVISOR_DELETED| | ThemeServiceImpl | THEME_CREATED, THEME_DELETED, THEME_UPDATED|",
      "url": " /bonita/7.8/development/bonita-engine-architecture/services/event-handlers",
      "author": "",
      "categories": "Development, Bonita Engine architecture, Services"
    }
    ,
  

    "bonita-7-8-development-bonita-engine-architecture-services-queriable-logging": {
      "title": "Queriable logger",
      "content"     : "Queriable loggerNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.This page describes the queriable logger service.PurposeUsageImplementation detailsPurposeThe queriable logger service provides information about important events in the Bonita Platform that are not directly related to execution of a process. The log includes information about administration operations such as deployment of a new process definition, commands, reporting, actor mapping, Portal Look &amp;amp; Feel themes, and organization and user management.The Bonita Engine stores information in the queriable log. The information in the log is accessible using the LogAPI(Enterprise, Performance, Efficiency, and Teamwork editions only).The information available from the queriable log is primarily for the platform and process administrator. It is not intended to be used as a notification system: avoid pooling on the queriable log. If you need to be notified of specific events, use the configurable event service.UsageHere is an example of how to search for log message about a specific activity:final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 100);builder.filter(LogSearchDescriptor.ACTION_SCOPE, aTaskId);builder.searchTerm(&quot;Adding a new user&quot;);builder.sort(LogSearchDescriptor.ACTION_TYPE, Order.ASC);final LogAPI logAPI = TenantAPIAccessor.getLogAPI(session);final SearchResult&amp;lt;Log&amp;gt; searchedLogs = logAPI.searchLogs(builder.done());for (Log log : searchedLogs.getResult()) { // Print the detailed user creation message:System.out.println(log.getMessage());}Implementation detailsThe queriable logger service stores log message in the Bonita Engine back-end database using the Hibernate library. The interface and the implementation of the service are available from the source code repository on GitHub.",
      "url": " /bonita/7.8/development/bonita-engine-architecture/services/queriable-logging",
      "author": "",
      "categories": "Development, Bonita Engine architecture, Services"
    }
    ,
  

    "bonita-7-8-development-bonita-engine-architecture-services-technical-logging": {
      "title": "Technical logger",
      "content"     : "Technical loggerThis page describes the technical logger service.PurposeUsageImplementation detailsExamplePurposeThe purpose of this service is to provide an abstraction to the logging framework to all Bonita Engine services, to facilitate debugging of other services.The logged messages are not intended to be accessible through the Engine API (see Queriable logger service).UsageIf you are creating a custom implementation of a service, you might be interested in using the technical loggingservice. Refer to the implementations of existing services for examples of technical logging service usage (for example the AuthenticationServiceImpl).Basically, the technical logging service exposes a method that receives the following parameters:  class name (the source of the log message)  message  throwable (when message is associated with an exception)  severitySee the serviceinterface for details.Implementation detailsThe technical logger implementationuses SLF4J version 1.6.1 to handle the log. SLF4J itself uses a back-end logging framework to write log messages. See the loggingoverview for more details.Logged messages are passed to SLF4J with appropriate logger information so the source of the message remainsmeaningful.ExampleThe following example, DelayedRetry, shows how to write messages to the technical log. DelayedRetry can be called from an event handler that detects failed tasks.package com.bonitasoft.handlers;import org.bonitasoft.engine.api.LoginAPI;import org.bonitasoft.engine.api.ProcessRuntimeAPI;import org.bonitasoft.engine.api.TenantAPIAccessor;import org.bonitasoft.engine.log.technical.TechnicalLogSeverity;import org.bonitasoft.engine.log.technical.TechnicalLoggerService;import org.bonitasoft.engine.session.APISession;public class DelayedRetry implements Runnable {/** Id of the task to run again. */private long taskId;/** Bonita technical logger. */private TechnicalLoggerService technicalLog;public void setTaskId(long id) {taskId = id;}public void setTechnicalLog(TechnicalLoggerService technicalLog) {this.technicalLog = technicalLog;}@Overridepublic void run() {try {//  if (technicalLog//  .isLoggable(this.getClass(), TechnicalLogSeverity.TRACE)) {StringBuilder message = new StringBuilder();message.append(&quot;Starting to wait before trying again task execution &quot;);message.append(taskId);technicalLog.log(this.getClass(), TechnicalLogSeverity.TRACE,message.toString());//  }// Wait for 2 minutes before retryThread.sleep(2*60*1000);//  if (technicalLog//  .isLoggable(this.getClass(), TechnicalLogSeverity.TRACE)) {StringBuilder message2 = new StringBuilder();message2.append(&quot;Will now try task execution &quot;);message2.append(taskId);technicalLog.log(this.getClass(), TechnicalLogSeverity.TRACE,message2.toString());//  }// Get the LoginAPI using the TenantAPIAccessorLoginAPI loginAPI = TenantAPIAccessor.getLoginAPI();// Log in to the tenant to create a sessionfinal APISession session = loginAPI.login(&quot;admin&quot;, &quot;bpm&quot;);// Get the ProcessRuntimeAPI using the TenantAPIAccessor and the// previously created sessionProcessRuntimeAPI processAPI = TenantAPIAccessor.getProcessAPI(session);processAPI.retryTask(taskId);} catch (Exception e) {//  if (technicalLog.isLoggable(this.getClass(),//  TechnicalLogSeverity.ERROR)) {technicalLog.log(this.getClass(), TechnicalLogSeverity.ERROR,&quot;Error while retyring task execution. Task id: &quot;+ taskId, e);//  }}}}",
      "url": " /bonita/7.8/development/bonita-engine-architecture/services/technical-logging",
      "author": "",
      "categories": "Development, Bonita Engine architecture, Services"
    }
    ,
  

    "bonita-7-8-development-bonita-engine-architecture-shared-transactions": {
      "title": "Shared transactions",
      "content"     : "Shared transactionsThere are three entry points to transactions in the Bonita Engine:  API call: one transaction for each call. The transaction is opened automatically by the Engine if it has not been opened externally.  Work units: one transaction per work unit (that inherits TxBonitaWork). A work unit is asynchronous, and is executed as soon as possible when an Execution thread becomes available.  Jobs: when a Scheduler job triggers, it opens a new transaction if it is not itself contained in an existing open transaction.If you are accessing the Engine in Local mode, you also have the option of using shared transactions, which means you can include Engine API calls in a transaction that is managed explicitly by a calling program. For example, in an application for approving and paying expenses, you could have a single transaction that includes the payment instruction sent to the bank and the process step that informs the user that expenses have been paid. If the bank does not complete the payment, the notification is not sent.A transaction managed by the caller has the following structure:startTransaction();try {   myBusinessLogic1();   callBonitaBPMEngine();   myBusinessLogic2();   commitTransaction();} catch (Exception e) {   rollbackTransaction();}The example below shows how to wrap two Engine API calls in the same transaction. Each call updates the value of a variable, and the transaction guarantees that both values are updated or neither value is updated.long procId = processInstance.getId();try {   txManager.begin();   // We want the following 2 calls to be in the same transaction.   processAPI.updateProcessDataInstance(dataFoo, procId, new Integer(42));   processAPI.updateProcessDataInstance(dataBar, procId, new Integer(42));} finally {   // We explicitly roll back the current transaction   txManager.rollback();}// Start a new transaction to fetch the data values //   and ensure their values were not updated.txManager.begin();DataInstance processDataInstanceFoo = processAPI.getProcessDataInstance(dataFoo, procId);DataInstance processDataInstanceBar = processAPI.getProcessDataInstance(dataBar, procId);if (((Integer) processDataInstanceFoo.getValue()) != 3 &amp;amp;&amp;amp; ((Integer) processDataInstanceBar.getValue()) != 4) {   System.err.println(&quot;The values for the variables foo and bar should not have been changed.&quot;);}txManager.commit();It is also possible to manage your own transactions in the server side of the Engine using Commands. The CommandAPI, which executes some custom code on the server side, enables you to execute code in several transactions if necessary.To do this, it provides access to the UserTransactionService exposing the following methods:  registerBonitaSynchronization(BonitaTransactionSynchronization txSync)  executeInTransaction(Callable&amp;lt;T&amp;gt; callable)Two implementation of the executeInTransaction method are provided:  Community Edition: basic execution  Subscription Edition: retries, only on certain exceptions (IOException, Row locked, …)Below are examples of code that can be used in a user Command.Anonymous class:final long processInstanceId = 1704;final SProcessInstanceServiceprocessInstanceService = serviceAccessor.getProcessInstanceService();SProcessInstance pi = userTransactionService.executeInTransaction(new Callable&amp;lt;SProcessInstance&amp;gt;() {	@Override	public SProcessInstance call() throws Exception {		return processInstanceService.getProcessInstance(processInstanceId);	}});Custom class:class MyCallable implements Callable&amp;lt;SProcessInstance&amp;gt; {	private final ProcessInstanceService processInstanceService;	private long processInstanceId;	MyCallable(ProcessInstanceService processInstanceService) {		this.processInstanceService = processInstanceService;	}	@Override	public SProcessInstance call() throws Exception {		return processInstanceService.getProcessInstance(processInstanceId);	}		public void setProcessInstanceId(long processInstanceId) {this.processInstanceId = processInstanceId;}}class MyCommand extends TenantCommand {	@Overridepublic Serializable execute(final Map&amp;lt;String, Serializable&amp;gt; parameters, final TenantServiceAccessor serviceAccessor) {		SProcessInstanceService processInstanceService = serviceAccessor.getProcessInstanceService();		MyCallable callable = new MyCallable(processInstanceService);		SProcessInstance processInstance;		// ... custom treatment...		callable.setProcessInstanceId(1704);		// First transaction:		processInstance = userTransactionService.executeInTransaction(callable);		// ... custom treatment...		callable.setProcessInstanceId(1209);		// Second transaction:		processInstance = userTransactionService.executeInTransaction(callable);		// Of course, MyCallable implementation is stateless, so it is reusable.}}",
      "url": " /bonita/7.8/development/bonita-engine-architecture/shared-transactions",
      "author": "",
      "categories": "Development, Bonita Engine architecture"
    }
    ,
  

    "bonita-7-8-development-building-community-edition-from-source": {
      "title": "Build Bonita Community edition from source files",
      "content"     : "Build Bonita Community edition from the sourceThis page explains how to build Bonita Community edition from the source.All source code of Bonita solution is available from the Bonitasoft GitHub organization. Each component of the solution has a dedicated repository (e.g. Engine repository).PrerequisitesTo build the product, you need the following:  Internet connection  Git  JDK 1.8 or above  Apache Maven 3.3.9 (version is mandatory)  NodeJSWe provide build script for Linux only. Therefore it is recommended to use Linux. If you don’t have Linux you can either use a virtual machine or port the build script to Mac.Note that you can run Bonita on Windows but you cannot build Bonita on Windows (known limitation).Building BonitaIn order to build Bonita you need to use the script provided in Build Bonita GitHub project. Use the branch of the project that match the version you want to build.Simply run bash build-script-7.4.1.sh and provide required information.A script is used because some components rely on components that are built earlier in the sequence, so the build order must be respected.",
      "url": " /bonita/7.8/development/building-community-edition-from-source",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "bonita-7-8-development-continuous-integration-automating-builds": {
      "title": "Automate builds",
      "content"     : "Automate buildsNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.OverviewDeploying a process bar fileDeploying a REST API extension fileAutomate build of a specific REST API extensionOverviewBonita includes a Workspace API, in the form of the script BonitaStudioBuilder, to build a .bar file from a process and/or a .zip file from a REST API extension in a repository. It accesses the build features of Bonita Studio in the background. This is intended to be used in a continuous integration and testing environment.Bonita Studio must be installed but must not be running. You must use a dedicated Bonita Studio for continuous integration.This is because the Bonita Studio workspace directory should be removed before running the BonitaStudioBuilder script. (For continuous integration, it is best practice to clean the files before and after a build.)Warning: Workspace API is deprecated since Bonita 7.7.0. Instead, we strongly encourage you to use the LA builder included in the tooling suite of Bonita Continuous Delivery add-on. One added-value is that LA builder does not need a studio to be installed.To use BonitaStudioBuilder, you need the following:  Bonita Studio (the same version as the Bonita repository). This must be a dedicated Bonita Studio and repository used only for your BonitaStudioBuilder, because the tool removes the content of the repository.  A window manager  Java 1.8After Bonita Studio is installed, the BonitaStudioBuilder scripts are in the workspace_api_scripts folder. There are scripts for Windows (.bat), Linux (.sh), and MacOS (_Mac.sh).Pass configuration information to the BonitaStudioBuilder script as system properties, using the following arguments:ArgumentPurposerepoPathThe parent folder of the repository storing the process. Typically, this is the trunk folder. It can also be a folder in tags if you want to point to a restore point in the repository. You cannot use a remote repository folder. A process to be built must be manually checked out before running the script.outputFolderThe folder where the generated bar and zip files will be stored.processesThe list of the processes in the repository for which bar files are required. For each process, specify the process identifier and, optionally, the version. If you do not specify the version, the latest version is used. Format: process,version;_process,version…Example: -process=TravelRequest,1.5;Expenses;LeaveRequest,1.0_buildAllProcessesIf enabled, bar files are built for the latest version of each process in the repository.buildAllRestAPIExtensionsIf enabled, zip files are built and installed in maven repository for all REST API extensions in the repository.buildAllIf enabled, bar files are built for the latest version of each process in the repository and zip files are built and installed in maven repository for all REST API extensions.migrateIf enabled, you can point the repoPath argument to a repository of an older version than the version of the running Bonita Studio. The processes in the older version repository will be automatically migrated to the current version.environmentThe environment with which the bar files will be built. The environment defines the process configuration, including dependencies. If you do not specify an environment, the exported bar file will not contain the dependencies. All the specified processes are built for the same environment. If you want to build for different environments, you need to run the script once for each environment.profileOptional Maven profiles (comma separated list of profile id) to activate when building the REST API extensions projects.linkIf enabled, do not make a copy of the project to build.To run the script:  Check out the project to a directory in the Studio path.  Delete the content of the workspace directory in your Bonita Studio installation.  Run the script. For example:./BonitaStudioBuilder.sh -repoPath=/home/myBonitaRepoCheckedOut-outputFolder=/home/bonita/myArtefacts -buildAll -migrate -environment=Qualification -profile=qa  When the script runs, information is logged in workspace/.metadata/.log.Deploying a process bar fileFrom the bar file, a process can be deployed manually using Bonita Portal. You can also deploy a process using the Engine API.Deploying a REST API extension fileFrom the zip file, a REST API extension can be deployed manually using Bonita Portal. You can also deploy a REST API extension using the REST API.Automate build of a specific REST API extensionA REST API extension is a maven project stored in a Studio repository. You can find them in the studio workspace: workspace/yourRepositoryName/restAPIExtensions/yourRestAPIProject. From there you can simply use maven cli or a CI job to build, test or packake your REST API Extension.",
      "url": " /bonita/7.8/development/continuous-integration/automating-builds",
      "author": "",
      "categories": "Development, Continuous integration"
    }
    ,
  

    "bonita-7-8-development-continuous-integration-set-up-continuous-integration": {
      "title": "Set up continuous integration",
      "content"     : "Set up continuous integrationNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.Note: Bonita Continuous Delivery add-on comes with an out-of-the-box solution based on Jenkins CI.This page explains how to set up a continuous integration environment for your Bonita processes.With Continuous Integration (CI) your processes are continuously built and tested while you are designing them. Collaborating on process design can be enhanced with CI by ensuring the integrity of your processes along the development phase.You could use any integration server, but this page describes how to use Jenkins, as an example.PrerequisitesSet up Bonita Studio for CICreate a Jenkins job to build your processes automaticallyTest your processes automaticallyPrerequisitesTo follow this page, you need to be familiar with:  Java-based project development with Maven  Subversion version control system use  Jenkins CI server installation and configurationBefore you begin, you need the following components available for your CI environment:  Bonita Studio Teamwork, Efficiency, Performance, or Enterprise edition: The automated process build feature is not available in the Community edition.  A window manager: You need a window manager to use the Bonita Studio process builder.  Java: You need Java 8 or above to be installed on the CI server and on your development computer.  Maven: This guide provides example Maven-based projects for executing automated tests of your processes. Maven 3 is required on the CI server and the test development computer.  Subversion: Bonita Studio enables business analysts and developers to collaborate on process design using a shared Subversion (SVN) repository. This tutorial assumes that you have access to a Subversion server.  Jenkins: The Jenkins CI server is responsible for coordinating continuous build and test of your processes.This tutorial assumes that Jenkins is up and running with Maven and Subversion plugins.Set up Bonita Studio for CIThere are two stages to setting up Bonita Studio for CI:  On your Subversion server, create a shared repository that can be accessed by the business analysts and developers working on processes and by the CI tools. After you have create your shared repository you may develop your processes in this repository and/or import existing processes. Each Bonita Studio user must connect to the repository.  Define an environment for configuring processes for CI. This environment will be stored in the shared repository together with your process definitions.The next section assumes that you created an environment called CI.Create a Jenkins job to build your processes automaticallyThis section describes how to create a Jenkins job to build your processes automatically. This job will produce Business Archive (.bar) files ready for deployment.All example scripts given on this page are compatible with Unix-like operating systems.  Prepare Bonita Studio on the CI server: Bonita Studio includes a BonitaStudioBuilder script to build processes in a CI environment. Install Bonita Studio as follows:  Download the OS-independent package (zip) from the Customer Portal. For example use BonitaSubscription-7.6.3.zip for version 7.6.3. You must have the same version of Bonita Studio for the shared repository and the CI server.  Extract the package to a permanent location on the CI server: $&amp;gt; unzip -d /path/to/BonitaStudio BonitaStudioSubscription-7.6.3.zip  Install your license (a license must have been requested for CI server): $&amp;gt; cp license.lic /path/to/BonitaStudio/BonitaStudioSubscription-7.6.3/lic_folder/You are recommended to install a window manager on the CI server in order to have process diagram screenshots generated along with business archives.  Create Jenkins job: In Jenkins, create a new job of type “Build a free-style software project”. Specify a job name for example “Bonita-BuildProcesses”.Configure Jenkins job:  Check out your process repository from Subversion. To do this, configure the “Source Code Management” section to retrieve (check out) your Subversion process shared repository. Specify the repository URL, and optionally your local repository. We recommend that you set teh check-out strategy to Use ‘svn update’ as much as possible.  Invoke BonitaStudioBuilder scriptNote: only one instance of BonitaStudioBuilder can be executed at a time on a computer.Add a build step of type “Execute shell” configured with the following content: #!/usr/bin/env sh	 echo &quot;##### Clean previously generated business archives&quot; rm -Rf $WORKSPACE/process-bars echo &quot;&quot;	 echo &quot;##### Clean BonitaStudioBuilder workspace before each execution&quot; rm -Rf /path/to/BonitaStudio/workspace echo &quot;&quot;	 echo &quot;##### Execute BonitaStudioBuilder for all processes&quot; cd /path/to/BonitaStudio/.. ./BonitaStudio/workspace_api_scripts/BonitaStudioBuilder.sh-repoPath=$WORKSPACE/process-repository-outputFolder=$WORKSPACE/process-bars -buildAll -environment=CI	 echo &quot;##### Package generated business archives&quot; zip $WORKSPACE/process-bars.zip $WORKSPACE/process-bars/*  This sample script invokes BonitaStudioBuilder to build all processes from your process-repository using the CI environment.  See the BonitaStudioBuilder documentation for information on script options.Then, share generated business archives as a Maven artifacts  One way to make the generated .bar files available to other Maven projects is to install them as Maven artifacts.  The following example installs the processes artifact in the local Maven repository. The Maven artifact could also be deployed to a centralized Maven repository manager solution.  To do so, add a second build step of type “Invoke top-level Maven targets” configured as follows:Goals: install:install-fileProperties:groupId=com.acme.bonitaartifactId=process-barsversion=1.0.0-SNAPSHOTpackaging=zipfile=$WORKSPACE/process-bars.zipEventually, archive generated artifact in Jenkins   You can archive the job artifact (generated processes package) in Jenkins. To do so, add a post-build action of type “Archive the artifacts” and choose to archive the “process-bars.zip” package.As a result, the generated business archives will be made available for download from Jenkins interface.  Run the Jenkins job  Run the “Bonita-BuildProcesses” Jenkins job. When it is finished, the Maven artifact   com.acme.bonita:process-bars:1.0.0-SNAPSHOT in installed in the local Maven repository of the CI server. The generated processes package is also available as a job build artifact in Jenkins.Test your processes automaticallyThis section contains an example of how to test a process from a given Business Archive. It consists of writing JUnit Test cases using the Bonita Engine Java API.Note: In this example, we show only how to test the runtime aspects of a process, using the Java APIs. It is also possible to use cargo to deploy the generated bar file into an application server and then launch Selenium tests to test web aspects of a process.For this example we are using a Maven project to write our tests.  In your IDE create a new Maven project and share it (for example using SVN or Git).  Configure local access to Bonita Engine.  As we want to test processes build with a Bonita Subscription edition, you need to configure the required Maven artifacts. You should also check that there is a valid license file in ${bonita.client.home}/ and the System property bonita.client.home set to this folder path.  We recommend that you write your test cases in the src/test/java folder of your project and put all related resources (Bar files, organization file…) in src/test/resources.  Before installing your processes load the relevant organization (regarding your actor mapping). You may have to export your organization from a Bonita Studio:Menu Organization &amp;gt; Export, Select your Organization.For example:private void installOrganization() {File organizationFile = new File(MyTestCase.class.getResource(&quot;/ACME.xml&quot;).getFile())String organizationContent = getFileContent(organizationFile)getIdentityAPI().importOrganization(organizationContent)}  Then as a basic test, we try to deploy each generated processes. For example:@Testvoid deploy() throws Exception { // Retrieve automatically generated bars as a Map&amp;lt;filename, fileContent&amp;gt; Map&amp;lt;String, InputStream&amp;gt; bars = getBars() Assert.assertTrue(&quot;No bar found in resources&quot;, !bars.isEmpty()) // For each bar deploy and enable it for(Entry&amp;lt;String, InputStream&amp;gt; entry : bars.entrySet()) { BusinessArchive archive = BusinessArchiveFactory.readBusinessArchive(entry.getValue()) final String entryKey = entry.getKey() ProcessDefinition definition = getProcessAPI().deploy(archive) final long defId = definition.getId() Assert.assertNotNull(&quot;Failed to deploy &quot;+entryKey, definition) getProcessAPI().enableProcess(defId) getProcessAPI().disableProcess(defId) getProcessAPI().deleteProcessDefinition(defId) }}  Now configure a job to run this simple test case on your CI (these steps assume you have shared your generated processes as a Maven artifact, so you can use the maven-dependency plugin to retrieve the latest built processes):  Create a new freestyle job in Jenkins  Configure the source code management to retrieve your Maven project.  Add a build step  Select “Invoke top-level Maven targets”  Use following Goal: org.apache.maven.plugins:maven-dependency-plugin:2.7:get  In properties, set the following:  version=1.0.0-SNAPSHOT  dest=$WORKSPACE  groupId=com.acme.bonita  artifactId=process-bars  packaging=zipThen add another build step to unzip the artifact. Select “Execute shell”, and use the command unzip process-bars-1.0.0-SNAPSHOT.zip -d project/src/test/resources.  Finally, add another Maven 3 build step to build the test project:  Goals: clean install  You may want to publish the JUnit report:  Add a post build action -&amp;gt; Publish Junit test result.  Set the path project/target/test-reports/*.xml.",
      "url": " /bonita/7.8/development/continuous-integration/set-up-continuous-integration",
      "author": "",
      "categories": "Development, Continuous integration"
    }
    ,
  

    "bonita-7-8-development-engine-api-configure-client-of-bonita-bpm-engine": {
      "title": "Configure connection to Bonita Engine",
      "content"     : "Configure connection to Bonita EngineIf you want your application to use the engine API of a remote engine, your application (the client) must be configured to connect to the engine (the server)The engine (the server) must also be configured to accept the connection.Client configurationConfigure Client using programmatic configurationConfigure Client using System propertiesConfigure client using Bonita Home clientServer configurationServer configuration to accept HTTP ConnectionServer configuration to accept EJB3 connectionTroubleshootingClient configurationThere is three ways to configure the client to connect to the Bonita Engine.First the engine client verify if the configuration is set programmatically,then it tries to get the configuration set in system properties, finally it falls back to the legacy way of configuration that is the bonita home client.In order to be able to start the portal with a remote engine the following system properties must be set in the JVM starting the Portal:  org.bonitasoft.platform.username must be set with the username of the platform admin  org.bonitasoft.platform.password must be set with the password of the platform adminConfigure Client using programmatic configurationYou can configure the connection to the engine directly using org.bonitasoft.engine.util.APITypeManager, please refer to the Javadoc.Here is an example of programmatic configuration to an engineHashMap&amp;lt;String,String&amp;gt; parameters= new HashMap&amp;lt;&amp;gt;();parameters.put(&quot;server.url&quot;, &quot;http://myserver.com:8080&quot;);parameters.put(&quot;application.name&quot;, &quot;bonita-application&quot;);APITypeManager.setAPITypeAndParams(ApiAccessType.HTTP, parameters)Configure Client using System propertiesYou can set the system property org.bonitasoft.engine.api-type to HTTP, EJB3 or LOCAL.  HTTP:The HTTP connection mode will connect the client to the engine using the http protocol. This is the most common way to connect to engine remotly.When using HTTP mode, you must set the following system properties  org.bonitasoft.engine.api-type.server.url: it is the url of the server, e.g. for a engine on the same host it can be http://localhost:8080  org.bonitasoft.engine.api-type.application.name: it is the name of the web aplication on wich the engine HTTP API is deployed, e.g. bonita  We do not guarantee to keep the http protocol stable, so we strongly recommend that you use the same version for boththe client and the server  EJB3The EJB3 connection mode will connect the client to the engine using EJBs.You will need to specify at least org.bonitasoft.engine.ejb.naming.reference that is the name use to lookup the ServerAPI  LOCAL This is the default connection mode, it connects to the server in the same JVM (not remote). If nothing is set this mode will be used.Configure client using Bonita Home clientDeprecated, use the programmatic way instead, see APITypeManager.This is a legacy way to configure the connection to the remote engine.In this case you have to create a folder containing a engine-client directory and a conf subdirectory.This last subdirectory must contain a file named bonita-client-custom.properties having as content configuration of the engine client (see below).Finally set the System property bonita.home to the root folder you created.Here is the default content of this configuration file, uncomment the part of the file corresponding to the type of connection you want and customize it according to your application.###template file# LOCALorg.bonitasoft.engine.api-type = LOCAL# HTTP#org.bonitasoft.engine.api-type = HTTP#server.url = http://localhost:8080#application.name = bonita# Remote: EJB3#org.bonitasoft.engine.api-type = EJB3# WildFly 10#java.naming.factory.url.pkgs = org.jboss.ejb.client.naming#default EJB reference name#org.bonitasoft.engine.ejb.naming.reference=ejb:bonita-ear/bonita-ejb/serverAPIBean!org.bonitasoft.engine.api.internal.ServerAPIServer configurationServer configuration to accept HTTP ConnectionBy default Tomcat and WildFly bundles along with the bonita.war from the deploy bundle are configured to accept connection for HTTP connections.It is configured in the web.xml file of the web application like this:&amp;lt;servlet&amp;gt;&amp;lt;servlet-name&amp;gt;HttpAPIServlet&amp;lt;/servlet-name&amp;gt;&amp;lt;servlet-class&amp;gt;org.bonitasoft.engine.api.internal.servlet.HttpAPIServlet&amp;lt;/servlet-class&amp;gt;&amp;lt;/servlet&amp;gt;This HTTP access  is not secured, it should not be exposed outside a trusted area. We recommend you to deactivate it if you expose directly your deployment to the outside world.Server configuration to accept EJB3 connectionBy default the WildFly bundle is configured to accept connection for EJB3.For an EJB3 client connection to work with WildFly 10, there are some additional configuration steps.If the client is not located on the same host than the WildFly server, you need to create a Application user in the WildFly administration console.So open the WildFly administration console and create a user account to be used for remote connections (for example, username bonita and password bpm).Your Java client needs to have the WildFly client classes in the classpath for it to communicate correctly with the server.If you use Maven to manage your dependencies, add the following dependency in your pom.xml :&amp;lt;dependency&amp;gt;&amp;lt;groupId&amp;gt;org.wildfly&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;wildfly-ejb-client-bom&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;10.1.0.Final&amp;lt;/version&amp;gt;&amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&amp;lt;/dependency&amp;gt;The same kind of configuration is possible if you use some other dependency management tool like gradle or ivy.If you do not use any management tool, you have to include the jboss-client.jar to your classpath. It is available in the WildFly bundle in the $WILDFLY_HOME/bin/client folder.Create a property file named jboss-ejb-client.properties, to the client classpath.It contains information needed to make the remote connection, including the username and password of the user you created in the WildFly console, as shown below:endpoint.name=client-endpointremote.connectionprovider.create.options.org.xnio.Options.SSL_ENABLED=falseremote.connections=defaultremote.connection.default.host=myhostnameremote.connection.default.port = 8080remote.connection.default.connect.options.org.xnio.Options.SASL_POLICY_NOANONYMOUS=falseremote.connection.default.username=bonitaremote.connection.default.password=bpmUpdate the bonita-client.properties file configured in the ${bonita.home}/client/conf folder for the bonita client to connect to the server with the appropriate API type.# Remote: EJB3org.bonitasoft.engine.api-type = EJB3# WildFly 10java.naming.factory.url.pkgs = org.jboss.ejb.client.naming#default EJB reference nameorg.bonitasoft.engine.ejb.naming.reference=ejb:bonita-ear/bonita-ejb/serverAPIBean!org.bonitasoft.engine.api.internal.ServerAPIIf it is not already done for the WildFly server to accept remote connections, update the WildFly configuration file, standalone.xml:  In the interfaces section, modify the IP address so that the Bonita Engine is visible to the network.  Specify that port 4447 comes from the remoting socket-binding.TroubleshootingIf the following stacktrace appears in your client console :IllegalStateExceptionSep 29, 2015 3:46:16 PM org.jboss.ejb.client.EJBClient &amp;lt;clinit&amp;gt;INFO: JBoss EJB Client version 1.0.5.FinalException in thread &quot;main&quot; java.lang.IllegalStateException: No EJB receiver available for handling [appName:bonita-ear,modulename:bonita-ejb,distinctname:] combination for invocation context org.jboss.ejb.client.EJBClientInvocationContext@24e6d224at org.jboss.ejb.client.EJBClientContext.requireEJBReceiver(EJBClientContext.java:584)at org.jboss.ejb.client.ReceiverInterceptor.handleInvocation(ReceiverInterceptor.java:119)at org.jboss.ejb.client.EJBClientInvocationContext.sendRequest(EJBClientInvocationContext.java:181)at org.jboss.ejb.client.EJBInvocationHandler.doInvoke(EJBInvocationHandler.java:136)at org.jboss.ejb.client.EJBInvocationHandler.doInvoke(EJBInvocationHandler.java:121)at org.jboss.ejb.client.EJBInvocationHandler.invoke(EJBInvocationHandler.java:104)at com.sun.proxy.$Proxy0.invokeMethod(Unknown Source)at org.bonitasoft.engine.api.EJB3ServerAPI.invokeMethod(EJB3ServerAPI.java:68)at org.bonitasoft.engine.api.impl.ClientInterceptor.invoke(ClientInterceptor.java:86)at com.sun.proxy.$Proxy1.login(Unknown Source)at org.support.bonitasoft.example.CountInstances.login(CountInstances.java:127)at org.support.bonitasoft.example.CountInstances.main(CountInstances.java:90)It means that the jboss-ejb-client.properties has not been found in the classpath or that it has not been configured correctly.",
      "url": " /bonita/7.8/development/engine-api/configure-client-of-bonita-bpm-engine",
      "author": "",
      "categories": "Development, Engine API"
    }
    ,
  

    "bonita-7-8-development-engine-api-create-your-first-project-with-the-engine-apis-and-maven": {
      "title": "Create your first project with the Engine APIs and Maven",
      "content"     : "Create your first project with the Engine APIs and MavenThis page contains an example that explains how to set up Maven project to create a client that uses the Bonita client APIs to communicate with the Bonita Engine and run a process. It assumes that you are a Java programmer familiar with using Maven.Bonita Client APIsMaven dependenciesConfigure the connection to the Bonita PlatformLog inExample of a client programStart a processList open process instancesList archived process instancesList pending tasksExecute a taskBonita Client APIsIn this example, we use the following APIs:  LoginAPI: Manages the login on tenants. Using this API you can obtain an APISession, which is required for access to the tenant APIs, such as the IdentityAPI and the ProcessAPI.  ProcessAPI: Manages processes. Using this API you can handle process execution (for example, start a process, retrieve a task, execute a task, or retrieve data) and process management (for example, deploy, undeploy, enable or disable a process).Maven dependenciesIn order to use the client APIs, you need to add a dependency to the bonita-client artifact in your Maven pom.xml file:&amp;lt;properties&amp;gt;   &amp;lt;bonita.bpm.version&amp;gt;7.8.0&amp;lt;/bonita.bpm.version&amp;gt;   ...&amp;lt;/properties&amp;gt; &amp;lt;!-- Bonita Engine --&amp;gt;&amp;lt;dependency&amp;gt;&amp;lt;groupId&amp;gt;org.bonitasoft.engine&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;bonita-client&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;${bonita.bpm.version}&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;Configure the connection to the Bonita PlatformYou must configure the connection to the Engine (i.e. Bonita Platform) for your project. To do so you can use System properties or programmatic configuration.Take a look at how to configure a clientLog inThe first action of the client must be to log in. This example shows how to log in when accessing the server over HTTP:Map&amp;lt;String, String&amp;gt; settings = new HashMap&amp;lt;String, String&amp;gt;();settings.put(&quot;server.url&quot;, &quot;http://localhost:8080&quot;);settings.put(&quot;application.name&quot;, &quot;bonita&quot;);APITypeManager.setAPITypeAndParams(ApiAccessType.HTTP, settings);// get the LoginAPI using the TenantAPIAccessorLoginAPI loginAPI = TenantAPIAccessor.getLoginAPI();// log in to the tenant to create a sessionAPISession apiSession = loginAPI.login(username, password);Example of a client programIn this example, a user interacts with a Bonita process by choosing actions from a command-line client program written in Java.The user can choose one of the following actions:  start a process  list open process instances: process instances that have not yet completed  list archived process instances: process instances that have completed  list pending tasks  execute a taskThe program displays a menu presented by the getMenutTextContent method:private static String getMenutTextContent() {   StringBuilder stb = new StringBuilder(&quot;nChoose the action to be executed:n&quot;);   stb.append(&quot;0 - exitn&quot;);   stb.append(&quot;1 - start a processn&quot;);   stb.append(&quot;2 - list open process instancesn&quot;);   stb.append(&quot;3 - list archived process instancesn&quot;);   stb.append(&quot;4 - list pending tasks n&quot;);   stb.append(&quot;5 - execute a taskn&quot;);   stb.append(&quot;Choice:&quot;);   String message = stb.toString();   return message;   }These choices are interpreted by the following code:private static void executeActions(ProcessDefinition processDefinition) throws IOException, BonitaException {String message = getMenutTextContent();String choice = null;do {// show the menu and read the action chosen by the userchoice = readLine(message);if (&quot;1&quot;.equals(choice)) {// if user chooses 1, start a new process instancestartProcess(processDefinition);} else if (&quot;2&quot;.equals(choice)) {// if user chooses 2, list open process instanceslistOpenedProcessInstances();} else if (&quot;3&quot;.equals(choice)) {// if user chooses 3, list archived process instanceslistArchivedProcessInstances();} else if (&quot;4&quot;.equals(choice)) {// if user chooses 4, list pending taskslistPendingTasks();} else if (&quot;5&quot;.equals(choice)) {// if user chooses 5, execute the task chosen by the userexecuteATask();} else if (!&quot;0&quot;.equals(choice)) {System.out.println(&quot;Invalid choice!&quot;);}} while (!&quot;0&quot;.equals(choice));}Start a processprivate static void startProcess(ProcessDefinition processDefinition) {ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);ProcessInstance processInstance = processAPI.startProcess(processDefinition.getId());}List open process instancesAll Bonita Engine API methods that deal with collections are paged to avoid having too many entries in memory. For these methods, if you want to retrieve all results you need to handle this page by page. This the case with the searchProcessInstances method used here to retrieve open process instances. In the example, each page will contain up to 5 (PAGE_SIZE) elements:private static void listOpenedProcessInstances() {// the result will be retrieved by pages of PAGE_SIZE sizeint startIndex = 0;int page = 1;SearchResult&amp;lt;ProcessInstance&amp;gt; result = null;do {// get the current page of open process instancesresult = getOpenProcessInstancePage(session, startIndex);// print the current pageprintOpenedProcessIntancesPage(page, result);// go to next pagestartIndex += PAGE_SIZE;page++;} while (result.getResult().size() == PAGE_SIZE);}private static SearchResult&amp;lt;ProcessInstance&amp;gt; getOpenProcessInstancePage(APISession apiSession, int startIndex) throws BonitaException {// create a new SeachOptions with given start index and PAGE_SIZE as max number of elementsSearchOptionsBuilder optionsBuilder = new SearchOptionsBuilder(startIndex, PAGE_SIZE);// sort the result by the process instance id in ascending orderoptionsBuilder.sort(ProcessInstanceSearchDescriptor.ID, Order.ASC);// perform the request and return the resultProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);return processAPI.searchProcessInstances(optionsBuilder.done());}List archived process instancesIn order to retrieve all archived process instances you also need to iterate page by page:private static void listArchivedProcessInstances() {// the result will be retrieved by pages of PAGE_SIZE sizeint startIndex = 0;int page = 1;SearchResult&amp;lt;ArchivedProcessInstance&amp;gt; result = null;do {// get the current page of opened process instancesresult = getArchivedProcessInstancePage(session, startIndex);// print the current pageprintArchivedProcessInstancePage(page, result);// go to the next pagestartIndex += PAGE_SIZE;page++;} while (result.getResult().size() == PAGE_SIZE);}private static SearchResult&amp;lt;ArchivedPorcessInstance&amp;gt; getArchivedProcessInstancePage(APISession apiSession, int startIndex) throws BonitaException {// create a new SeachOptions with given start index and PAGE_SIZE as max number of elementsSearchOptionsBuilder optionsBuilder = new SearchOptionsBuilder(startIndex, PAGE_SIZE);// when process instances are archived the original process instance id is supplied by SOURCE_OBJECT_ID,// so the result will be sort by the SOURCE_OBJECT_IDoptionsBuilder.sort(ArchivedProcessInstancesSearchDescriptor.SOURCE_OBJECT_ID, Order.ASC);// perform the request and return the result;ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);return processAPI.searchArchivedProcessInstances(optionsBuilder.done());}List pending tasksTo get the pending tasks for the logged user, you use the method getPendingHumanTaskInstances.private static void listPendingTasks() {ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);// the result will be retrieved by pages of PAGE_SIZE sizeint startIndex = 0;int page = 1;List&amp;lt;HumanTaskInstance&amp;gt; pendingTasks = null;do {// get the current pagependingTasks = processAPI.getPendingHumanTaskInstances(session.getUserId(), startIndex, PAGE_SIZE, ActivityInstanceCriterion.LAST_UPDATE_ASC);// print the current pageprintTasksPage(page, pendingTasks);// got to next pagestartIndex += PAGE_SIZE;page++;} while (pendingTasks.size() == PAGE_SIZE);}Execute a taskBefore a user can execute a task, the task needs to be assigned to the user. The assignUserTask method assigns the task to the user. The executeFlowNode method executes the task.private static void executeATask() {processAPI.assignUserTask(taskToExecute.getId(), session.getUserId());processAPI.executeFlowNode(taskToExecute.getId());}",
      "url": " /bonita/7.8/development/engine-api/create-your-first-project-with-the-engine-apis-and-maven",
      "author": "",
      "categories": "Development, Engine API"
    }
    ,
  

    "bonita-7-8-development-engine-api-engine-api-overview": {
      "title": "Engine API overview",
      "content"     : "Engine API overviewYou can use the Bonita Engine APIs to customize or add to the Bonita software. Typical developments are adding a connector, adding an actor filter, and replacing or supplementing a service.ConceptsSessionUser validationAPIsAPI accessGetting started with the Bonita Engine APIsConceptsSessionThis version of Bonita introduces the concept of a session. A session is the context in which processing occurs, and is created when a user logs in to the Engine.The APIs remain available for the duration of a session.User validationThis version of Bonita introduces user validation: when a user name and password are sent to the Engine, it checks that the user exists in the current organization. If the user is not known, an error is thrown and processing stops.APIsBonita Engine has the following Java APIs:| | ||:-|:-|| Identity API | Manages information about an organization, that is, the set of users who can act in processes. Handles creation, modification, and deletion of organizations, groups, roles, memberships, and users.|| Organization API | Import or export an organization.|| Process API | Handles actions related to processes (deploy, enable, start, disable, delete), executes activities, updates process data, search for a retrieve process entities.|| Login API | Logs in to the engine in a platform and creates a session.|| Monitoring API | Retrieves information about current activity, such as the number of users logged in, or the number of processes currently being executed.|| Log API | provides access to business logs, for searching and to retrieve information about current or archived processes.|| Platform command API | Creates, starts, stops platform.|| Document API | Manages documents that are attached to a process instance.|| Theme API | Manages the Look &amp;amp; Feel of the Bonita Portal web and mobile interfaces and forms.|| Tenant Management API | Used to pause service in a tenant for maintenance, to resume service, and to check whether a tenant is paused. Available in Teamwork, Efficiency, Performance and Enterprise editions.|There is also a Web API, which is for internal use only, and a Command API,which is primarily for internal use.For details of the Engine APIs, the methods and related objects, see the Javadoc. Note that the APIs are the same for the Teamwork, Efficiency, Performance and Enterprise editions, but some features are only active if the appropriate license is installed. If you try to access a feature for which you do not have a license, a Feature not active error message is returned.There is also a high-level Web REST API, intended for customers developing portal applications.API accessThe Bonita Engine APIs can be accessed locally or remotely, in the following modes:  Local: the client accesses the server directly in local mode  EJB3: the client accesses a remote server using EJB3 mode  HTTP: the client accesses a remote server via HTTPThe mode you use must be specified in the bonita-client-custom.properties file. By default, the access mode is local. This can be used when the client and engine are using the same JVM. The file contains commented out configurations for remote access modes. To change the mode, simply comment out the configuration for local and uncomment the relevant remote configuration.There is a slight overhead in using the remote access methods, so you are recommended to use local access whenever it is possible.Getting started with the Bonita Engine APIsBefore you run a Bonita application, configure how the application (client) accesses the Bonita Engine (server). For a HTTP access it can be done using following code: final Map&amp;lt;String, String&amp;gt; parameters = new HashMap&amp;lt;&amp;gt;(); if(HTTP.equals(apiType)){   parameters.put(&quot;server.url&quot;, &quot;http://localhost:8080&quot;);   //application name is the name of context, default is bonita   parameters.put(&quot;application.name&quot;, &quot;bonita&quot;); } APITypeManager.setAPITypeAndParams(ApiAccessType.valueOf(apiType), parameters);All sequences of API calls start with logging in to create a session then using the AccessorUtil to retrieve the APIs that will be used in the application.The APIs are retrieved using an accessor. To retrieve the PlatformLoginAPI and the PlatformAPI, use the PlatformAPIAccessor. After the platform has been created and initialized, use the TenantAPIAccessor to retrieve the other APIs. The TenantAPIAccessor is used even though there is a single tenant.The following example shows how to retrieve the LoginAPI, then use it to log in and create a session, then retrieve for API for that session. The platform has already been created and initialized and the Engine is started.final LoginAPI loginAPI = TenantAPIAccessor.getLoginAPI();APISession session = loginAPI.login(userName, password);ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(session);When the application has finished processing, log out to delete the session:loginAPI.logout(session);",
      "url": " /bonita/7.8/development/engine-api/engine-api-overview",
      "author": "",
      "categories": "Development, Engine API"
    }
    ,
  

    "bonita-7-8-development-engine-api-examples-create-administration-tools": {
      "title": "Create administration tools",
      "content"     : "Create administration toolsThis page contains an example of how to create tools to administer your Bonita system. The example is developed using Maven, and is a Java program to list the failed tasks, wrapped in a script so that it can be executed in an environment with no window manager.Getting startedWrite a class that lists failed tasksCreate a main classPrepare packagingDeclare an AssemblyUpdate the `pom.xml` file to call the assembly when building the projectMake the `bonita-cli.jar` executableBuild and testWrap in a Shell scriptComplete code exampleGetting startedYou need to be familiar with building a Maven project with Bonita as a dependency. You also need to be familiar with using the Bonita Engine APIs. If this is not the case, follow this tutorial.The Engine API overview contains a list of the APIs with a short description of each one. For details of the methods available in the Bonita Engine APIs, see the Javadoc.This example uses the Bonita Engine Java APIs but there is also a REST API.In this example, the Maven project has the following settings:  Group Id: org.mycompany.bonita  Artifact Id: bonita-cliYou must have a running Bonita system. The simplest way to do this is to run a Bonita Tomcat bundle locally. You also need a user: in this example the user has username admin and password secret.Write a class that lists failed tasksBonita provides a client to leverage the Java APIs. This is the easiest starting point for an application, so this is what we will use in the example.Set up your Maven project with a maven dependency to bonita-client. Then create a class to execute the business logic. In this example, the class is called ListFailedTasksCmd. It implements Callable&amp;lt;Void&amp;gt;, and calls methods to log in the API, then to execute the business logic, and finally to log out from the API.public Void call() throws Exception {login();try {printFailedTasks();} finally {logout();}}The business logic of this example gets a list of the failed tasks and prints them to standard output. The maximum number of failed activities to retrieve is provided by the class field nbTodisplay. The method printFailedTasks is doing the actual job of searching for activities whose state is FAILED.TIP: Like for any methods in the API listing elements, the searchActivities method takes paging information to limit the number of elements to retrieve. This prevents clients from retrieving too much data at the same time and filling up the whole memory. This is a common way to avoid users getting OutOfMemory errors. It is better to make several successive calls to the API than to retrieve too much data.protected void printFailedTasks() throws BonitaHomeNotSetException,		ServerAPIException, UnknownAPITypeException, SearchException {ProcessRuntimeAPI taskAPI = (ProcessRuntimeAPI) TenantAPIAccessor.getProcessAPI(session);SearchOptions failedSearchOptions = new SearchOptionsBuilder(0,nbTodisplay).filter(ActivityInstanceSearchDescriptor.STATE_NAME, ActivityStates.FAILED_STATE).done();SearchResult&amp;lt;ActivityInstance&amp;gt; failedTasks = taskAPI.searchActivities(failedSearchOptions);print(failedTasks);}See the complete source code for this class is in ListFailedTasksCmd.java.Create a main classLet’s create a CLI.java class that will be the entry point of our application. The CLI will simply delegate to our ListFailedTasksCmdthe responsibility to fetch failed tasks and display them on the standard output. The CLI will take as input parameters the username, password and the maximum number of failed tasks to display.public static void main(String[] args) {  if(args.length != 3) {throw new IllegalArgumentException(&quot;Usage: you should provide &amp;lt;username&amp;gt; &amp;lt;password&amp;gt; &amp;lt;number of tasks to display&amp;gt;&quot;);  }  try {   new ListFailedTasksCmd(args[0], args[1], Integer.parseInt(args[2])).call();  } catch (Exception e) {	   e.printStackTrace();  }}Prepare packagingAs we have seen, the tool has several dependencies required to be executed. This means that our classes should be packaged along with these dependencies in a single bundle. To do this, build a zip with all the resources that the system will require to run the CLI.Declare an AssemblyCreate an assembly.xml file at the root to describe the final packaging.&amp;lt;assembly xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/assembly-1.0.0.xsd&quot;&amp;gt;&amp;lt;id&amp;gt;&amp;lt;/id&amp;gt;&amp;lt;formats&amp;gt;&amp;lt;format&amp;gt;zip&amp;lt;/format&amp;gt;&amp;lt;/formats&amp;gt;&amp;lt;includeBaseDirectory&amp;gt;false&amp;lt;/includeBaseDirectory&amp;gt;&amp;lt;fileSets&amp;gt;&amp;lt;fileSet&amp;gt;&amp;lt;outputDirectory&amp;gt;/&amp;lt;/outputDirectory&amp;gt;&amp;lt;directory&amp;gt;src/main/resources&amp;lt;/directory&amp;gt;&amp;lt;includes&amp;gt;&amp;lt;include&amp;gt;**&amp;lt;/include&amp;gt;&amp;lt;/includes&amp;gt;&amp;lt;fileMode&amp;gt;744&amp;lt;/fileMode&amp;gt;&amp;lt;/fileSet&amp;gt;&amp;lt;/fileSets&amp;gt;&amp;lt;dependencySets&amp;gt;&amp;lt;dependencySet&amp;gt;&amp;lt;outputDirectory&amp;gt;/lib&amp;lt;/outputDirectory&amp;gt;&amp;lt;/dependencySet&amp;gt;&amp;lt;/dependencySets&amp;gt;   &amp;lt;/assembly&amp;gt;This assembly gathers all the dependencies into a lib folder along with all the content of the src/main/resources before zipping the whole collection. At the end we should get the following structure in a zip:|-bonita/|-lib/   |- bonita-cli.jar   |-*.jarUpdate the pom.xml file to call the assembly when building the project&amp;lt;properties&amp;gt;&amp;lt;zipName&amp;gt;bonita-cli-${project.version}&amp;lt;/zipName&amp;gt;&amp;lt;folderToZip&amp;gt;${project.build.directory}&amp;lt;/folderToZip&amp;gt;&amp;lt;/properties&amp;gt;...&amp;lt;build&amp;gt;&amp;lt;plugins&amp;gt;...&amp;lt;plugin&amp;gt;&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;&amp;lt;executions&amp;gt;&amp;lt;execution&amp;gt;&amp;lt;id&amp;gt;generate-package&amp;lt;/id&amp;gt;&amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;&amp;lt;goals&amp;gt;&amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt;&amp;lt;/goals&amp;gt;&amp;lt;configuration&amp;gt;&amp;lt;ignoreDirFormatExtensions&amp;gt;true&amp;lt;/ignoreDirFormatExtensions&amp;gt;&amp;lt;finalName&amp;gt;${zipName}&amp;lt;/finalName&amp;gt;&amp;lt;descriptors&amp;gt;&amp;lt;descriptor&amp;gt;assembly.xml&amp;lt;/descriptor&amp;gt;&amp;lt;/descriptors&amp;gt;&amp;lt;/configuration&amp;gt;&amp;lt;/execution&amp;gt;&amp;lt;/executions&amp;gt;&amp;lt;/plugin&amp;gt;…&amp;lt;/plugins&amp;gt;&amp;lt;/build&amp;gt;The maven-assembly-plugin enables us to generate the zip as described in assembly.xml file with the specified zipName, e.g. Bonita-CLI-1.0.0.Make the bonita-cli.jar executableIn order to launch the expected class, CLI.java, edit the pom.xml and add the following lines. This will create a manifest during the build of the Maven project in the jar file which contains the main class.&amp;lt;build&amp;gt;&amp;lt;plugins&amp;gt;...&amp;lt;plugin&amp;gt;&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;2.4&amp;lt;/version&amp;gt;&amp;lt;configuration&amp;gt;&amp;lt;archive&amp;gt;&amp;lt;manifest&amp;gt;&amp;lt;addClasspath&amp;gt;true&amp;lt;/addClasspath&amp;gt;&amp;lt;mainClass&amp;gt;org.mycompany.bonita.cli.CLI&amp;lt;/mainClass&amp;gt;&amp;lt;/manifest&amp;gt;&amp;lt;/archive&amp;gt;&amp;lt;excludes&amp;gt;&amp;lt;exclude&amp;gt;*.bat&amp;lt;/exclude&amp;gt;&amp;lt;exclude&amp;gt;*.sh&amp;lt;/exclude&amp;gt;&amp;lt;/excludes&amp;gt;&amp;lt;/configuration&amp;gt;&amp;lt;/plugin&amp;gt;...&amp;lt;/plugins&amp;gt;&amp;lt;/build&amp;gt;Build and testRight click on the project, select Run As &amp;gt; Maven Install. The output Bonita-CLI-1.0.0.zip is located in /target.Open a console, go to the target folder, and unzip Bonita-CLI-1.0.0.zip. Before executing make sure to configure the bonita client to point the bonita engine by editing ${bonita.home}/engine-client/conf/bonita-client-custom.properties.For example:# HTTPorg.bonitasoft.engine.api-type = HTTPserver.url = http://localhost:8080application.name = bonitaTo test our main class, execute the following command:  On Linux:java -jar lib/*.jar admin secret 10 -Dbonita.home=pwd`/bonita`On Windows:java -Dbonita.home=bonita -jar lib/bonita-cli-1.0.0.jar admin secret 10  These commands are cumbersome, so the next section explains how to create a script to hide the complexity.Wrap in a Shell scriptIn the resources folder of your project, create a new file bonita-cli.sh or bonita-cli.bat:bonita-cli.sh:#!/bin/shjava -Dbonita.home=`pwd`/bonita -jar lib/bonita-cli-*.jar $*bonita-cli.bat:java -Dbonita.home=bonita -jar lib/bonita-cli-1.0.0.jar %*Build the whole project again. When the build completes, the zip file should contain the following structure:Run the appropriate script:  On Linux:./bonita-cli.sh admin secret 10On Windows:bonita-cli.bat admin secret 10  Here is an example of output:List of activities:(1 item(s) found)  State   On  id  Name  failed  16:11   100 Review Git Pull Request from: N ChabanolesComplete code examplepackage org.mycompany.bonita.cli.cmd;import java.text.SimpleDateFormat;import java.util.List;import java.util.concurrent.Callable;import org.bonitasoft.engine.api.ProcessRuntimeAPI;import org.bonitasoft.engine.api.TenantAPIAccessor;import org.bonitasoft.engine.bpm.flownode.ActivityInstance;import org.bonitasoft.engine.bpm.flownode.ActivityInstanceSearchDescriptor;import org.bonitasoft.engine.bpm.flownode.ActivityStates;import org.bonitasoft.engine.exception.BonitaHomeNotSetException;import org.bonitasoft.engine.exception.SearchException;import org.bonitasoft.engine.exception.ServerAPIException;import org.bonitasoft.engine.exception.UnknownAPITypeException;import org.bonitasoft.engine.platform.LoginException;import org.bonitasoft.engine.search.SearchOptions;import org.bonitasoft.engine.search.SearchOptionsBuilder;import org.bonitasoft.engine.search.SearchResult;import org.bonitasoft.engine.session.APISession;/** *  *//** * @author John Doe *  */public class ListFailedTasksCmd implements Callable&amp;lt;Void&amp;gt; {private static final String ROW_SEPARATOR = &quot;n&quot;;	private static final String COL_SEPARATOR = &quot;t&quot;;	private String userName;	private String password;	private APISession session;	private int nbTodisplay;	public ListFailedTasksCmd(String user, String pass, int nbTodisplay) {		userName = user;		password = pass;		this.nbTodisplay = nbTodisplay;	}	public Void call() throws Exception {		login();		try {			printFailedTasks();		} finally {			logout();		}		return null;	}	protected void printFailedTasks() throws BonitaHomeNotSetException,			ServerAPIException, UnknownAPITypeException, SearchException {		ProcessRuntimeAPI taskAPI = (ProcessRuntimeAPI) TenantAPIAccessor				.getProcessAPI(session);		SearchOptions failedSearchOptions = new SearchOptionsBuilder(0,				nbTodisplay).filter(				ActivityInstanceSearchDescriptor.STATE_NAME,				ActivityStates.FAILED_STATE).done();		SearchResult&amp;lt;ActivityInstance&amp;gt; failedTasks = taskAPI				.searchActivities(failedSearchOptions);		print(failedTasks);	}	protected void print(SearchResult&amp;lt;ActivityInstance&amp;gt; failedTasks) {		List&amp;lt;ActivityInstance&amp;gt; activities = failedTasks.getResult();		StringBuffer line = new StringBuffer();		// Header		line.append(ROW_SEPARATOR).append(&quot;List of activities:&quot;)				.append(&quot;(&quot; + failedTasks.getCount() + &quot; item(s) found)&quot;)				.append(ROW_SEPARATOR);		line.append(COL_SEPARATOR).append(&quot;State&quot;).append(COL_SEPARATOR)				.append(&quot;On&quot;).append(COL_SEPARATOR).append(&quot;id&quot;)				.append(COL_SEPARATOR).append(&quot;Name&quot;);		line.append(ROW_SEPARATOR);		// Display in a table layout		for (ActivityInstance activityInstance : activities) {			line.append(COL_SEPARATOR);			line.append(activityInstance.getState()).append(COL_SEPARATOR);			line.append(					new SimpleDateFormat(&quot;HH:MM&quot;).format(activityInstance							.getReachedStateDate())).append(COL_SEPARATOR);			line.append(activityInstance.getId()).append(COL_SEPARATOR);			line.append(activityInstance.getName()).append(COL_SEPARATOR);			line.append(ROW_SEPARATOR);		}		System.out.println(line.toString());	}	private void logout() {		if (session != null) {			try {				TenantAPIAccessor.getLoginAPI().logout(session);			} catch (Exception e) {				e.printStackTrace();			}		}	}	protected void login() throws LoginException, BonitaHomeNotSetException,			ServerAPIException, UnknownAPITypeException {		this.session = TenantAPIAccessor.getLoginAPI()				.login(userName, password);	}}",
      "url": " /bonita/7.8/development/engine-api/examples/create-administration-tools",
      "author": "",
      "categories": "Development, Engine API, Examples"
    }
    ,
  

    "bonita-7-8-development-engine-api-examples-handle-a-failed-activity": {
      "title": "Handle a failed activity",
      "content"     : "Handle a failed activityNote: For Enterprise and Performance editions only.An activity (or task) can fail in Bonita Engine for several reasons. Typical reasons include:  An input expression evaluation fails (for example because of invalid syntax, or incorrect values).  The condition in an output transition fails to evaluate properly.  A connector fails to execute because of remote system connection problem.  A connector fails to execute because of erroneous connector implementation.  A connector fails to execute because a connector input or output expression fails to evaluate.In these cases, the activity is considered to have failed, and its state is recorded as FAILED in the Bonita database.Note that if communication between the server and the database is interrupted, the activity failure cannot be recorded. In this case, the state of the activity will be the state previously recorded.Possible actions on activity failureCode explainedComplete codePossible actions on activity failureThe Process Management API provides the following actions:  Reset the state of a failed connector, using setConnectorInstanceState(long connectorInstanceId, ConnectorStateReset state).  Reset the states of a list connectors, using setConnectorInstanceState(final Map&amp;lt;&amp;gt; connectorsToReset).  Retry a failed activity, using replayActivity(long activityInstanceId).  Reset the states of a list of failed connectors and, in the same operation, retry the corresponding failed activity, using replayActivity(long activityInstanceId, Map&amp;lt;Long connectorsToReset&amp;gt;connectorsToReset).Code explainedIn this example, an activity has failed because a connector failed to execute.The methods that are used to reset process items are in the ProcessManagementAPI, and the details are in the Javadoc. These methods are accessed through the ProcessAPI, which extends the ProcessManagementAPI.First you need to log in, create the session, and get the ProcessAPI:final LoginAPI loginAPI = TenantAPIAccessor.getLoginAPI();final APISession session = loginAPI.login(&quot;USERNAME&quot;, &quot;PASSWORD&quot;);final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(session);Then find the connector instance that failed:final SearchOptions searchOptions = new SearchOptionsBuilder(0, 1).filter(ConnectorInstancesSearchDescriptor.CONTAINER_ID, failedTaskId).filter(ConnectorInstancesSearchDescriptor.STATE, ConnectorState.FAILED.name()).done();final SearchResult&amp;lt;ConnectorInstance&amp;gt; searchResult = processAPI.searchConnectorInstances(searchOptions);final ConnectorInstance connectorInstance = searchResult.getResult().get(0);Find the reason for the failure by searching the internal logs:// search why the connector failed:final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 100);builder.filter(LogSearchDescriptor.ACTION_SCOPE, failedTaskId);builder.searchTerm(&quot;Connector execution failure&quot;);builder.sort(LogSearchDescriptor.ACTION_TYPE, Order.ASC);final LogAPI logAPI = TenantAPIAccessor.getLogAPI(session);final SearchResult&amp;lt;Log&amp;gt; searchedLogs = logAPI.searchLogs(builder.done());for (Log log : searchedLogs.getResult()) {// Print the failed connecor reason message:System.out.println(log.getMessage());}Then either reset the state of the connector instance and re-execute it, or skip the connector, as shown below:processAPI.setConnectorInstanceState(connectorInstance.getId(), ConnectorStateReset.SKIPPED);Then try to execute the activity again: processAPI.retryTask(failedTaskId);Finally, log out: loginAPI.logout(session);Complete codeimport org.bonitasoft.engine.api.LoginAPI;import org.bonitasoft.engine.bpm.connector.ConnectorInstance;import org.bonitasoft.engine.bpm.connector.ConnectorInstancesSearchDescriptor;import org.bonitasoft.engine.bpm.connector.ConnectorState;import org.bonitasoft.engine.bpm.connector.ConnectorStateReset;import org.bonitasoft.engine.search.Order;import org.bonitasoft.engine.search.SearchOptions;import org.bonitasoft.engine.search.SearchOptionsBuilder;import org.bonitasoft.engine.search.SearchResult;import org.bonitasoft.engine.session.APISession;import com.bonitasoft.engine.api.LogAPI;import com.bonitasoft.engine.api.ProcessAPI;import com.bonitasoft.engine.api.TenantAPIAccessor;import com.bonitasoft.engine.log.Log;import com.bonitasoft.engine.log.LogSearchDescriptor;public class SkipConnectorAndReplayActivity {public static void main(final String[] args) throws Exception {// Let&#39;s consider we know the id of the failed Activity:final long failedTaskId = 123456789l;// First action: Login to the api:final LoginAPI loginAPI = TenantAPIAccessor.getLoginAPI();final APISession session = loginAPI.login(&quot;USERNAME&quot;, &quot;PASSWORD&quot;);final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(session);// we suppose here that we have an activity in state failed with the id &#39;failedTaskId&#39;// retrieve the failed connector:final SearchOptions searchOptions = new SearchOptionsBuilder(0, 1).filter(ConnectorInstancesSearchDescriptor.CONTAINER_ID, failedTaskId).filter(ConnectorInstancesSearchDescriptor.STATE, ConnectorState.FAILED.name()).done();final SearchResult&amp;lt;ConnectorInstance&amp;gt; searchResult = processAPI.searchConnectorInstances(searchOptions);final ConnectorInstance connectorInstance = searchResult.getResult().get(0);// search why the connector failed:final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 100);builder.filter(LogSearchDescriptor.ACTION_SCOPE, failedTaskId);builder.searchTerm(&quot;Connector execution failure&quot;);builder.sort(LogSearchDescriptor.ACTION_TYPE, Order.ASC);final LogAPI logAPI = TenantAPIAccessor.getLogAPI(session);final SearchResult&amp;lt;Log&amp;gt; searchedLogs = logAPI.searchLogs(builder.done());for (Log log : searchedLogs.getResult()) {// Print the failed connecor reason message:System.out.println(log.getMessage());}// do something for the failed connector instance, skip it:processAPI.setConnectorInstanceState(connectorInstance.getId(), ConnectorStateReset.SKIPPED);// Retry to execute the activity:processAPI.retryTask(failedTaskId);// Finally log properly out of Bonita Engine:loginAPI.logout(session);}}",
      "url": " /bonita/7.8/development/engine-api/examples/handle-a-failed-activity",
      "author": "",
      "categories": "Development, Engine API, Examples"
    }
    ,
  

    "bonita-7-8-development-engine-api-examples-handling-documents": {
      "title": "Handle documents",
      "content"     : "Handle documentsThis page shows an example of how to manipulate documents in a Bonita process using the Java APIs.A document is treated in a similar way to a variable in Bonita Engine database. It is defined in Bonita Studio or programmatically, and is stored in the Bonita Engine database. Inside a process instance, a document is a byte stream.Configure a process documentConvert a file to a documentCreate a case with a documentAttach a document to a caseConfigure a process documentTo configure a document in a process definition, go to the Details panel, General view, Documents pane.An external document is specified by URI. An internal document is specified by path and file name, by clicking the Browse… button.Convert a file to a documentThe following example shows how to convert the content of a document to a byte stream that can then be used to create or update the content of a document./** * load the file give in parameters and return a byteArray or a null value *  * @param fileName * @return */public static ByteArrayOutputStream loadFile(String fileName) {	FileInputStream file = null;	int read;	try {		file = new FileInputStream(fileName);		ByteArrayOutputStream byteArray = new ByteArrayOutputStream();		byte[] content = new byte[2048 * 16 * 16];		while ((read = file.read(content)) &amp;gt; 0) {				byteArray.write(content, 0, read);		}		return byteArray;	} catch (FileNotFoundException e) {			e.printStackTrace();	} catch (IOException e) {			e.printStackTrace();	} finally {		if (file != null)			try {				file.close();			} catch (IOException e) {		}	}	return null;}Create a case with a documentThe following method, createCaseWithDocument, creates a case and attaches a document to it.public static void createCaseWithDocument(String processDefinitionName, String processVersion, Map&amp;lt;String, Object&amp;gt; variables, Map&amp;lt;String, Object&amp;gt; documents, ProcessAPI processAPI)throws ProcessDefinitionNotFoundException, InvalidExpressionException, ProcessActivationException, ProcessExecutionException {long processDefinitionId = processAPI.getProcessDefinitionId(processDefinitionName, processVersion);// ----- create list of operations -----List&amp;lt;Operations&amp;gt; listOperations = new ArrayList&amp;lt;Operation&amp;gt;();// variablesMap&amp;lt;String, Serializable&amp;gt; ListExpressionsContext = new HashMap&amp;lt;String, Serializable&amp;gt;();for (String variableName : variables.keySet()) {if (variables.get(variableName) == null || (!(variables.get(variableName) instanceof Serializable)))continue;Object value = variables.get(variableName);Serializable valueSerializable = (Serializable) value;variableName = variableName.toLowerCase();Expression expr = new ExpressionBuilder().createExpression(variableName, variableName, value.getClass().getName(), ExpressionType.TYPE_INPUT);Operation op = new OperationBuilder().createSetDataOperation(variableName, expr);listOperations.add(op);ListExpressionsContext.put(variableName, valueSerializable);}// update documentfor (String documentName : documents.keySet()) {if (documents.get(documentName) == null)continue;DocumentValue documentValue = null;if (documents.get(documentName) instanceof String){documentValue = new DocumentValue( ((String) documents.get(documentName)));}else if (documents.get(documentName) instanceof byte[]){// bytedocumentValue = new DocumentValue(((byte[])documents.get(documentName)), &quot;plain/text&quot;, &quot;myfilename&quot;);}else if (documents.get(documentName) instanceof ByteArrayOutputStream){documentValue = new DocumentValue(((ByteArrayOutputStream) documents.get(documentName)).toByteArray(), &quot;plain/text&quot;, &quot;myfilename&quot;); // url}Operation docRefOperation = new OperationBuilder().createSetDocument(documentName,new ExpressionBuilder().createInputExpression(documentName+&quot;Reference&quot;, DocumentValue.class.getName()));listOperations.add(docRefOperation);ListExpressionsContext.put(documentName+&quot;Reference&quot;, documentValue);}// ----- start process instance -----processAPI.startProcess(processDefinitionId, listOperations, ListExpressionsContext);}In this example, we construct two maps, one containing case data and one containing an invoice document and reference. The invoice documented is created by converting a local file to a byte stream using the loadFile method defined above. The two maps are then used to create a case of the process using the createCaseWithDocument method defined above.// ---------- create a case with the valueMap&amp;lt;String, Object&amp;gt; firstInvoice = new HashMap&amp;lt;String, Object&amp;gt;();firstInvoice.put(&quot;emailAddress&quot;, &quot;jan.Fisher@bonitasoft.com&quot;);firstInvoice.put(&quot;invoiceId&quot;, Long.valueOf(45));firstInvoice.put(&quot;dateOfInvoice&quot;, new Date());Map&amp;lt;String, Object&amp;gt; firstInvoiceDocument = new HashMap&amp;lt;String, Object&amp;gt;();firstInvoiceDocument.put(&quot;invoiceReference&quot;, &quot;http://documentation.bonitasoft.com&quot;);firstInvoiceDocument.put(&quot;invoiceLetter&quot;, loadFile(&quot;c:/tmp/firstinvoice.pdf&quot;));createCaseWithDocument(&quot;IntegrateMyApplication&quot;, &quot;1.0&quot;, firstInvoice, firstInvoiceDocument, processAPI);Attach a document to a caseTo attach a document to a case, use the attachDocument method of the process API. This method is used to create a document and to update it: you update a document by replacing it is replaced with the new version. You can provide either a URL pointing to an external document or a byte stream, as shown in the example below:// update the documentfor (String documentName : documentsToUpdate.keySet()) {if (documentsToUpdate.get(documentName) instanceof String)	// document provided by pointer URL   processAPI.attachDocument(pendingTask.getId(), documentName, &quot;TheFileName&quot;, &quot;application/pdf&quot;, (String) documentsToUpdate.get(documentName));else if (documentsToUpdate.get(documentName) instanceof ByteArrayOutputStream)	// document provided as byte stream   processAPI.attachDocument(pendingTask.getId(), documentName, &quot;TheFileName&quot;, &quot;application/pdf&quot;, ((ByteArrayOutputStream) documentsToUpdate.get(documentName)).toByteArray());}",
      "url": " /bonita/7.8/development/engine-api/examples/handling-documents",
      "author": "",
      "categories": "Development, Engine API, Examples"
    }
    ,
  

    "bonita-7-8-development-engine-api-examples-manage-a-process": {
      "title": "Manage a process",
      "content"     : "Manage a processList the deployed processesEnable a process and start an instanceSet variables in a process instanceExecute a taskList the processes I startedList the open instances of a processGet the history for a caseQuery archived process instancesStop a process instanceDeploy a processGet the process design definitionUndeploy a processList the deployed processesThis example shows you how to get a list of the deployed processes.The search options specify that the list is sorted by deployment date, the maximum number of results to list is 100, and the list starts with the first results (that is, the processes that were deployed first).final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);final SearchOptions searchOptions = new SearchOptionsBuilder(0, 100).sort(ProcessDeploymentInfoSearchDescriptor.DEPLOYMENT_DATE, Order.DESC).done();final SearchResult&amp;lt;ProcessDeploymentInfo&amp;gt; deploymentInfoResults = processAPI.searchProcessDeploymentInfos(searchOptions);Enable a process and start an instanceAfter a process is deployed it must be enabled.If a process is not enabled, it is not possible to start a process instance.To enable a process, call the method enableProcess specifying the processDefinition id:// enable the processprocessAPI.enableProcess(processDefinition.getId());System.out.println(&quot;A new process was enabled: &quot; + processDefinition.getId());The next step is to start an instance of the deployed process:// start the processfinal ProcessInstance processInstance = processAPI.startProcess(processDefinition.getId());System.out.println(&quot;A new process instance was started with id: &quot; + processInstance.getId());Set variables in a process instanceThis section contains some examples of how to set the values of some variables using a list of operations when starting an instance of a process and in a running process instance.Set string variables and start a process instanceIn this example, createInstance takes the process definition name, the process version, a map of text variables and their values, and the session identifier. The startProcess method, which creates the process instance, takes a list of operations, not a map of variables, so the map must be converted into a list of operations that will set the values of the variables in the process instance. The example calls buildAssignOperation for each variable in turn, to build an operation that will assign the value to the variable when the process instance is created. Each operation is built as an assignment expression.public void createInstance(String processDefinitionName,  String processVersion,  Map&amp;lt;String, Object&amp;gt; variables,  APISession apiSession)  {ProcessAPI processAPI;try {processAPI = TenantAPIAccessor.getProcessAPI(apiSession);long processDefinitionId = processAPI.getProcessDefinitionId(processDefinitionName, processVersion);List&amp;lt;Operation&amp;gt; listOperations = new ArrayList&amp;lt;Operation&amp;gt;();for (String variableName : variables.keySet()) {if (variables.get(variableName) == null)continue;   Operation operation = buildAssignOperation(variableName, variables.get(variableName).toString(), String.class.getName(), ExpressionType.TYPE_CONSTANT);   listOperations.add(operation);   }   processAPI.startProcess(processDefinitionId, listOperations, null);} catch (Exception e) {e.printStackTrace();}}private Operation buildAssignOperation(final String dataInstanceName, final String newConstantValue, final String className, final ExpressionType expressionType) throws InvalidExpressionException { final LeftOperand leftOperand = new LeftOperandBuilder().createNewInstance().setName(dataInstanceName).done();final Expression expression = new ExpressionBuilder().createNewInstance(dataInstanceName).setContent(newConstantValue).setExpressionType(expressionType.name()).setReturnType(className).done();final Operation operation;operation = new OperationBuilder().createNewInstance().setOperator(&quot;=&quot;).setLeftOperand(leftOperand).setType(OperatorType.ASSIGNMENT).setRightOperand(expression).done();return operation;}Set variables of any type and start a process instanceIn this example, createCase takes the process definition name, the process version, a map of variable names and objects, and the session identifier. The startProcess method, which creates the process instance, takes a list of operations, not a map of variables, so the map must be converted into a list of operations that will set the values of the variables in the process instance. For each variable in turn, the example builds an expression that assigns the value to the variable to the object supplied in the map, specifying the data type by identifying the class of the object. These expressions are concatenated into a list of operations, which is used to initialize the variables when the process instance is created.public void createCase(String processDefinitionName, String processVersion, Map&amp;lt;String, Object&amp;gt; variables, ProcessAPI processAPI) {try {long processDefinitionId = processAPI.getProcessDefinitionId(processDefinitionName, processVersion);// ----- create list of operations -----List&amp;lt;Operation&amp;gt; listOperations = new ArrayList&amp;lt;Operation&amp;gt;();Map&amp;lt;String, Serializable&amp;gt; listVariablesSerializable = new HashMap&amp;lt;String, Serializable&amp;gt;();for (String variableName : variables.keySet()) {if (variables.get(variableName) == null || (!(variables.get(variableName) instanceof Serializable)))continue;Object value = variables.get(variableName);Serializable valueSerializable = (Serializable) value;variableName = variableName.toLowerCase();Expression expr = new ExpressionBuilder().createExpression(variableName, variableName, value.getClass().getName(), ExpressionType.TYPE_INPUT);Operation op = new OperationBuilder().createSetDataOperation(variableName, expr);listOperations.add(op);listVariablesSerializable.put(variableName, valueSerializable);}// ----- start process instance -----processAPI.startProcess(processDefinitionId, listOperations, listVariablesSerializable);// System.out.println(&quot;*** End Create Case ****&quot;);} catch (Exception e) {  e.printStackTrace();}}Create a map of variables and values and start a process instanceVersion 6.1 of Bonita introduces a new method for starting a case of process and setting the variables.Create a map specifying the values of the variables required to start a case, then pass it to the instantiateProcess method, as shown in the following example:public void instantiateProcess(String processDefinitionName, String processVersion, Map&amp;lt;String, Serializable&amp;gt; variables, APISession apiSession)  {try {ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);long processId = processAPI.getProcessDefinitionId(processDefinitionName, processVersion);processAPI.startProcess(processId, variables);} catch (Exception e) {e.printStackTrace();}}For a running process instance, set the value of a custom data type variableTo update the value of a variable with a custom data type, you need to call a Groovy script expression that returns the new value of the variable, as shown in the example below:final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(session);final String dataInstanceName = &quot;acase&quot;;final long activityInstanceId = 2;final LeftOperand leftOperand = new LeftOperandBuilder().createNewInstance().setName(dataInstanceName).setType(LeftOperand.TYPE_DATA).done();final Expression expression = new ExpressionBuilder().createGroovyScriptExpression(&quot;updateDataCaseTest&quot;,&quot;new com.bonitasoft.support.Case(&quot;title&quot;, &quot;description&quot;)&quot;,Case.class.getName());final Operation operation = new OperationBuilder().createNewInstance().setOperator(&quot;=&quot;).setLeftOperand(leftOperand).setType(OperatorType.ASSIGNMENT).setRightOperand(expression).done();final List&amp;lt;Operation&amp;gt; operations = new ArrayList&amp;lt;Operation&amp;gt;();operations.add(operation);processAPI.updateActivityInstanceVariables(operations, activityInstanceId, null);Note: this applies starting from version 6.3.4.Another method, updateActivityDataInstance also exists. However, this cannot be used with custom data types if you are using a remote connection, because the data type definition is not present in the Engine.Execute a taskThis example shows how to execute a task.The task is specified by an activityInstanceID.final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);processAPI.executeFlowNode(activityInstanceID);List the processes I startedThis example shows you how to list the open process instances started by the current user.The search options specify that a maximum of 100 items are listed, starting with the first one.final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 100);builder.filter(ProcessInstanceSearchDescriptor.STARTED_BY, apiSession().getUserId());final SearchResult&amp;lt;ProcessInstance&amp;gt; processInstanceResults = processAPI.searchOpenProcessInstances(builder.done());List the open instances of a processThis example shows you how to list the open instances of a specified process.The process is specified by the processDefinitonID. The search options specify that a maximum of 100 items are listed, starting with the first one.final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 100);builder.filter(ProcessInstanceSearchDescriptor.PROCESS_DEFINITION_ID, processDefinitionID);final SearchResult&amp;lt;ProcessInstance&amp;gt; processInstanceResults = processAPI.searchOpenProcessInstances(builder.done());Get the history for a caseThis example shows how to get the history for a case.A case is a process instance. To get the history, you retrieve the archived process instance, which is specified by processInstanceID.final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);final ArchivedProcessInstance archivedProcessInstance = processAPI.getArchivedProcessInstance(processInstanceID);Query archived process instancesThis example shows how to get a list of archived process instances that meet a specified filter.Note that this type of query is only possible with archived process instances.final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 100);builder.filter(ArchivedProcessInstancesSearchDescriptor., );final SearchResult&amp;lt;ArchivedProcessInstance&amp;gt; archivedProcessInstanceResults = processAPI.searchArchivedProcessInstances(builder.done());Stop a process instanceThis example shows how to stop (or cancel) an active process instance.No further activities in this process instance are started.final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);processAPI.cancelProcessInstance(processInstanceID);Deploy a processThis example will show how to use the Bonita Engine API to deploy and enable a process.The process can be in a business archive (.bar) file or can be built using the processDefinitionBuilder.Deploy and enable a process from a bar fileFirst create a business archive from the bar file. In this example, the bar file is /deploy/travelRequest. The process is deployed and enabled in a single step.// create a business archivefinal BusinessArchive businessArchive = BusinessArchiveFactory.readBusinessArchive(new File(&quot;/deploy/travelRequest&quot;));Now deploy and enable the process:// deploy and enable the processfinal ProcessDefinition processDefinition = getProcessAPI().deployAndEnableProcess(businessArchive);Deploy and enable a process from the processDefinitionBuilderIn this example, there are three steps: deploy the process, map the actor, and enable the process.First deploy the process:// deploy the processfinal ProcessDefinition processDefinition = processAPI.deploy(processDefinitionBuilder.done());System.out.println(&quot;A new process was deployed with id: &quot; + processDefinition.getId());Once the process is deployed, it’s necessary to map the actors defined in the process to existing users in the database before enabling the process. In this example, the actor defined in the process will be mapped to the current logged in user, whose id is available in the session (attention, this user cannot be the technical user):// map the actor &quot;delivery&quot; to the current logged in userfinal List&amp;lt;ActorInstance&amp;gt; actors = processAPI.getActors(processDefinition.getId(), 0, 1, ActorCriterion.NAME_ASC);processAPI.addUserToActor(actors.get(0).getId(), session.getUserId());At this point, the process is deployed but not enabled. This means that no instances of this process can be started. To enable the process, call the method enableProcess:// enable the processprocessAPI.enableProcess(processDefinition.getId());System.out.println(&quot;A new process was enabled: &quot; + processDefinition.getId());Get the process design definitionThis example shows how to retrieve the definition of a deployed process.//Create a process definitionfinal ProcessDefinitionBuilder processBuilder = new ProcessDefinitionBuilder().createNewInstance(&quot;name&quot;, &quot;1.0&quot;);processBuilder.addDescription(&quot;description&quot;);processBuilder.addAutomaticTask(&quot;AutomaticTask&quot;);//Deploy and enable the processfinal ProcessDefinition processDefinition = getProcessAPI().deploy(new BusinessArchiveBuilder().createNewBusinessArchive().setProcessDefinition(processBuilder.done()).done());getProcessAPI().enableProcess(processDefinition.getId());//Get the design process definitionfinal DesignProcessDefinition resultDesignProcessDefinition = getProcessAPI().getDesignProcessDefinition(processDefinition.getId());Undeploy a processThis example shows you how to undeploy a process.A process is undeployed by deleting the processDefinition, specified by a processDefinitionID.After the process is undeployed, no new instance can be started. Existing instances continue to completion.final ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(apiSession);processAPI.deleteProcessDefinition(processDefinitionId)",
      "url": " /bonita/7.8/development/engine-api/examples/manage-a-process",
      "author": "",
      "categories": "Development, Engine API, Examples"
    }
    ,
  

    "bonita-7-8-development-engine-api-examples-manage-an-organization": {
      "title": "Manage an organization",
      "content"     : "Manage an organizationImport an organizationList the groups in an organizationAdd a groupDelete a group from the organizationAdd a roleDelete a role from the organizationImport an organizationThis example explains how to import an organization definition from an XML file into Bonita Engine.The structure of the XML file is defined in an XSD file. To see an example of a well-formed XML file for an organization, export the ACME sample organization from Bonita Studio.In the following example, the organization definition is stored in a file called ACME.xml, which is stored in path. The file content is converted to a string, and then imported.final pOrganizationResourceName = &quot;path/ACME.xml&quot;final File orgFile = FileUtils.toFile(getClass().getResource(pOrganizationResourceName));final String orgContent = FileUtils.readFileToString(orgFile, CharEncoding.UTF_8);getIdentityAPI().importOrganization(orgContent);List the groups in an organizationThis example shows how to get a list of groups in the current organization.The search options specify that a maximum of 100 items are listed, starting with the first one.Only one organization can be loaded in Bonita Engine at a time, so there is no need to specify the organization, and no organization identifier exists.final IdentityAPI identityAPI = TenantAPIAccessor.getIdentityAPI(apiSession);final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 100);final SearchResult&amp;lt;Group&amp;gt; groupResults = identityAPI(apiSession).searchGroups(builder.done());Add a groupThis example shows how to add a group to the current organization.final IdentityAPI identityAPI = new IdentityAccessor().getIdentityAPI(apiSession);final GroupCreator groupCreator = new GroupCreator(name).setDescription(description);final Group group = identityAPI.createGroup(groupCreator);Delete a group from the organizationThis example shows how to delete a group from the organization.Deleting a group does not delete the users who belong to it. However, if the actor assignment for a process uses a group that is deleted, the users who belonged to the will no longer be able to perform tasks.final IdentityAPI identityAPI = TenantAPIAccessor.getIdentityAPI(apiSession);identityAPI.deleteGroup(groupId);Add a roleThis example shows how to add a role to the current organization.final IdentityAPI identityAPI = new IdentityAccessor().getIdentityAPI(apiSession);final RoleCreator roleCreator = new RoleCreator(name).setDescription(description);final Role role = identityAPI.createRole(roleCreator);Delete a role from the organizationThis example shows how to delete a role from the organization.Deleting a role does not delete the users who have that role. However, if the actor assignment for a process uses a role that is deleted, the users who had the role will no longer be able to perform tasks.final IdentityAPI identityAPI = TenantAPIAccessor.getIdentityAPI(apiSession);identityAPI.deleteRole(roleId);",
      "url": " /bonita/7.8/development/engine-api/examples/manage-an-organization",
      "author": "",
      "categories": "Development, Engine API, Examples"
    }
    ,
  

    "bonita-7-8-development-engine-api-examples-manage-the-platform": {
      "title": "Manage the platform",
      "content"     : "Manage the platformThis example shows how to use Bonita Engine API to manage the platform.You can create the platform, initialize the platform, start Bonita Engine, and stop Bonita Engine.Before you can create the platform, you need to log in and get the platformAPI:// Get platform login API using the PlatformAPIAccessorPlatformLoginAPI platformLoginAPI = PlatformAPIAccessor.getPlatformLoginAPI();// Log in to the platformPlatformSession platformSession = platformLoginAPI.login(&quot;platformAdmin&quot;, &quot;platform&quot;);// Get the platform APIPlatformAPI platformAPI = PlatformAPIAccessor.getPlatformAPI(platformSession);Create the platform by calling the createPlatform method. This will create the database structure and put the platform state into persistent storage.// create the platformplatformAPI.createPlatform();The next step is to initialize the platform, that is, create the default tenant and initialize Bonita Engine environment. After this step, the technical user will be able to connect to the engine and create new users or import the organization.// initialize the platformplatformAPI.initializePlatform();No users are created by default and the default username/password for the technical user to connect to Bonita Engine can be retrieved in the file setup/platform_conf/current/tenants/[tenant_id]/tenant_engine/bonita-tenant-community-custom.properties using the plaform setup tool ([tenant_id] being the default tenant ID, that is to say 1 when using the default configuration on a fresh installation).Once you retrieved the default configuration using the plaform setup tool, you can change this username/password by editing the file bonita-tenant-community-custom.properties and use the tool again to push the configuration to database.Next, start Bonita engine. Starting the engine on a node starts the Scheduler service and restarts elements that were not finished by the Work service on the previous shutdown. Bonita Engine environment is marked as activated.// start the execution engineplatformAPI.startNode();To stop Bonita engine, call the stopNode method. Stopping the node stops the Scheduler service. Bonita Engine environment is marked as deactivated.// stop the execution engineplatformAPI.stopNode();",
      "url": " /bonita/7.8/development/engine-api/examples/manage-the-platform",
      "author": "",
      "categories": "Development, Engine API, Examples"
    }
    ,
  

    "bonita-7-8-development-engine-api-examples-manage-users": {
      "title": "Manage users",
      "content"     : "Manage usersCreate a new userAdd a user to a groupList the users in a groupList the users with a specified role in a groupGet user contact dataSearch for usersGet the pending tasks for a userGet possible users of a task and execute task for a userCreate a new userThis example shows you how to create a new user and assign the user to a profile.Create a new user by calling the createUser method:// create new user, with username john and password bpmfinal User user = identityAPI.createUser(&quot;john&quot;, &quot;bpm&quot;);System.out.println(&quot;New user created: &quot; + user);Alternatively, you can create a more complex user object as follows:// create complex user UserCreator creator = new UserCreator(&quot;john&quot;, &quot;bpm&quot;);creator.setFirstName(&quot;Johnny&quot;).setLastName(&quot;B. Good&quot;);ContactDataCreator proContactDataCreator = new ContactDataCreator().setAddress(&quot;32 rue Gustave Eiffel&quot;).setCity(&quot;Grenoble&quot;).setPhoneNumber(&quot;555 14 12 541&quot;);creator.setProfessionalContactData(proContactDataCreator);final User user2 = identityAPI.createUser(creator);Now add the user to a Bonita Portal profile. A user who does not have a profile cannot log in to Bonita Portal.// reference the user in the profile User// the user must be now registered in one profile. Let&#39;s choose the profile userorg.bonitasoft.engine.api.ProfileAPI orgProfileAPI = apiAccessor.getProfileAPI();SearchOptionsBuilder searchOptionsBuilder = new SearchOptionsBuilder(0,10);searchOptionsBuilder.filter(ProfileSearchDescriptor.NAME, &quot;user&quot;);SearchResult&amp;lt;Profile&amp;gt; searchResultProfile = orgProfileAPI.searchProfiles(searchOptionsBuilder.done());// we should find one result nowif (searchResultProfile.getResult().size()!=1){ return; }// now register the user in the profileProfile profile = searchResultProfile.getResult().get(0);ProfileMemberCreator profileMemberCreator = new ProfileMemberCreator( profile.getId());profileMemberCreator.setUserId( user.getId());orgProfileAPI.createProfileMember(profileMemberCreator);To create a user with more complete information, use the UserBuilder to create an instance of User and then use the createUser method with the User as parameter.Add a user to a groupThis example shows how to add a user to a group.The user, group, and role are already defined, and each one is specified by ID.Note that it is not possible to add a user without a role.final IdentityAPI identityAPI = new IdentityAccessor().getIdentityAPI(apiSession);UserMembership membership = identityAPI.addUserMembership(userId, groupId, roleId);List the users in a groupThis example shows how to get a list of users in a specified group in the organization.The group is specified by groupID. The search options specify that a maximum of 100 items are listed, starting with the first one.final IdentityAPI identityAPI = TenantAPIAccessor.getIdentityAPI(apiSession);final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 100);builder.filter(UserSearchDescriptor.GROUP_ID, groupID);final SearchResult&amp;lt;User&amp;gt; userResults = identityAPI(apiSession).searchUsers(builder.done());List the users with a specified role in a groupThis example shows how to get a list of the users who have the specified role in the specified group in the organization.The group is specified by groupID. The role is specified by roleID. The search options specify that a maximum of 100 items are listed, starting with the first one.final IdentityAPI identityAPI = TenantAPIAccessor.getIdentityAPI(apiSession);final SearchOptionsBuilder builder = new SearchOptionsBuilder(0, 100);builder.filter(UserSearchDescriptor.GROUP_ID, groupID);builder.filter(UserSearchDescriptor.ROLE_ID, roleID);final SearchResult&amp;lt;User&amp;gt; userResults = identityAPI(apiSession).searchUsers(builder.done());Get user contact dataYou can use the getUserWithProfessionalDetails method to retrieve a user and their professional contact data for a user.This example shows how to get a user and the email address.// Get the professional email address of a userUserWithContactData proUser = getIdentityAPI().getUserWithProfessionalDetails(user.getId());proUser.getContactData().getEmail();Search for usersThe following example is a client application that accesses the Engine in HTTP mode to search for 20 users and display their names and identifiers.package org.bonitasoft.example;import org.bonitasoft.engine.api.IdentityAPI;import org.bonitasoft.engine.api.LoginAPI;import org.bonitasoft.engine.api.TenantAPIAccessor;import org.bonitasoft.engine.identity.User;import org.bonitasoft.engine.search.SearchOptionsBuilder;import org.bonitasoft.engine.search.SearchResult;import org.bonitasoft.engine.session.APISession;public class BonitaClientApplicationExample {public static void main(final String[] args) throws Exception {// example code:final LoginAPI loginAPI = TenantAPIAccessor.getLoginAPI();System.out.println(&quot;login with install//install&quot;);final APISession session = loginAPI.login(&quot;install&quot;, &quot;install&quot;);final IdentityAPI identityAPI = TenantAPIAccessor.getIdentityAPI(session);final SearchResult&amp;lt;User&amp;gt; searchUsers = identityAPI.searchUsers(new SearchOptionsBuilder(0, 20).done());System.out.println(&quot;20 first users:&quot;);for (final User user : searchUsers.getResult()) {System.out.println(&quot; * &quot; + user.getUserName() + &quot; -- &quot; + user.getId());}loginAPI.logout(session);System.out.println(&quot;logged out&quot;);}}Get the pending tasks for a userThis example shows you how use the Bonita Engine API to get the pending tasks for a user.It shows how to get the list of pending tasks, and then for each task, how to assign it to the user and execute it.To get the pending tasks for a given user, call the getPendingHumanTaskInstances method.In this example, the first page of the current logged user’s tasks are retrieved ordered by priority. Each page contains up to 20 tasks.// get the pending tasks for the current logged in userfinal List&amp;lt;HumanTaskInstance&amp;gt; pendingTasks =processAPI.getPendingHumanTaskInstances(session.getUserId(),0, 20, ActivityInstanceCriterion.PRIORITY_ASC);System.out.println(&quot;Pending tasks for user &quot; + session.getUserName() + &quot;: &quot; + pendingTasks);Note that this does not return tasks that are already assigned to the user.Then loop through the list of tasks. For each task, assign the task to the user and execute the task:// assign and execute pending tasksfor (final HumanTaskInstance pendingTask : pendingTasks) {// assign the task to the userprocessAPI.assignUserTask(pendingTask.getId(), session.getUserId());// execute the taskprocessAPI.executeFlowNode(pendingTask.getId());}Get possible users of a task and execute task for a userThis example shows how to get the list of users who are eligible to perform a task.First, it creates a simple process containing one human task, called “step1”. This task will be performed by a user who is mapped to the “expert” actor. An actor filter is applied to “step1”, assigning the task specifically to the superExpert user.Next, it calls getPossibleUsersOfHumanTask to get the list of all users who are eligible to perform the step1 according to the process definition. This will be a list of all the users who are mapped to the expert actor.Next, it calls getPossibleUsersOfPendingHumanTask to get the list of users who will perform a specific instance of step1, in the process instance. The actor filter is applied when the task instance is created. This is known as dynamic task assignment. The actor filter is applied and a shorter list of users is returned (in this case, just superExpert).Dynamic task assignment using getPossibleUsersOfPendingHumanTask re-evaluates the actor mapping.It is useful if your organization changes after a process instance is started and you need to modify the list of users who can perform a taskIf there is any Actor Filter specified for the given task, dynamic task assignment does not have any effect.In such case, there is another method that can be used as a separate call to force the re-execution of the actor filter and thus update the list of possible users.Finally, it executes the task for the fist user on the list. This “execute for” feature is not available in the Community and Teamwork editions.// Create a process definition containing a human task, step1// Step1 is performed by actor expert adjusted by an actor filterfinal ProcessDefinitionBuilder designProcessDefinition = new ProcessDefinitionBuilder().createNewInstance(&quot;assign&quot;, &quot;5.0&quot;);designProcessDefinition.addActor(&quot;expert&quot;);final UserTaskDefinitionBuilder taskDefinitionBuilder = designProcessDefinition.addUserTask(&quot;step1&quot;, &quot;expert&quot;);taskDefinitionBuilder.addUserFilter(&quot;test&quot;, &quot;org.bonitasoft.engine.filter.user.testFilter&quot;, &quot;1.0&quot;).addInput(&quot;userId&quot;,new ExpressionBuilder().createConstantLongExpression(superExpert.getId()));final ProcessDefinition processDefinition = deployAndEnableWithActor(designProcessDefinition.done(), &quot;expert&quot;, role);final ProcessInstance processInstance = getProcessAPI().startProcess(processDefinition.getId());Thread.sleep(3000);final SearchOptionsBuilder searchOptionsBuilder = new SearchOptionsBuilder(0, 1);searchOptionsBuilder.filter(HumanTaskInstanceSearchDescriptor.NAME, &quot;step1&quot;);final HumanTaskInstance userTask = getProcessAPI().searchHumanTaskInstances(searchOptionsBuilder.done()).getResult().get(0);// Get all users of the actor of the userTask called &#39;step1&#39;List&amp;lt;User&amp;gt; possibleUsers = getProcessAPI().getPossibleUsersOfHumanTask(processDefinition.getId(), &quot;step1&quot;, 0, 10);// Get the filtered list of users for the task instancepossibleUsers = getProcessAPI().getPossibleUsersOfPendingHumanTask(userTask.getId(), 0, 10);// Execute task for first user in listprocessAPI.assignUserTask(activityId, possibleUsers.get(0).getId());processAPI.executeFlowNode(possibleUsers.get(0).getId(), activityId);",
      "url": " /bonita/7.8/development/engine-api/examples/manage-users",
      "author": "",
      "categories": "Development, Engine API, Examples"
    }
    ,
  

    "bonita-7-8-development-engine-api-examples-restore-default-look-feel": {
      "title": "Restore the default Look &amp; Feel",
      "content"     : "Restore the default Look &amp;amp; FeelNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.Normally, the Look &amp;amp; Feel for Bonita Portal and for process forms is managed using Bonita Portal. However, it is also possible to restore the default Look &amp;amp; Feel using the Bonita Engine API. This provides an “escape” in case a Look &amp;amp; Feel that contains errors that make the Bonita Portal unusable is applied.The default and active Look &amp;amp; Feels are stored in the Bonita Engine database. The Look &amp;amp; Feel is managed by the ThemeAPI.To restore the default Look &amp;amp; Feel with the API, use the getDefault method to get the default Look &amp;amp; Feel from the Engine database, then call updateTheme to load it into the portal.For example:`getThemeAPI().restoreDefaultTheme(ThemeType.PORTAL);`",
      "url": " /bonita/7.8/development/engine-api/examples/restore-default-look-feel",
      "author": "",
      "categories": "Development, Engine API, Examples"
    }
    ,
  

    "bonita-7-8-development-engine-api-log-in-with-cas": {
      "title": "Log in with CAS",
      "content"     : "Log in with CASNote: For Enterprise, Performance and Efficiency editions only.Depending on your underlying authentication service, you may need to provide other information with the API in order to log in. A login method with a map enables you to provide the set of credentials that the authentication service requires. The following example can be used if you are using Bonita with CAS:final LoginAPI loginAPI = TenantAPIAccessor.getLoginAPI();final Map&amp;lt;String, Serializable&amp;gt; credentials = new HashMap&amp;lt;String, Serializable&amp;gt;();credentials.put(AuthenticationConstants.CAS_TICKET, ticket);APISession session = loginAPI.login(credentials);ProcessAPI processAPI = TenantAPIAccessor.getProcessAPI(session);",
      "url": " /bonita/7.8/development/engine-api/log-in-with-cas",
      "author": "",
      "categories": "Development, Engine API"
    }
    ,
  

    "bonita-7-8-development-engine-api-using-list-and-search-methods": {
      "title": "List and search methods",
      "content"     : "List and search methodsThe Bonita Engine APIs contain several list and search methods. This page explains the difference between list and search, and explains how to configure word-based search.The following example shows how to use a list method to see the archived activity instances:List&amp;lt;ArchivedActivityInstance&amp;gt; archivedActivityInstances =TenantAPIAccessor.getProcessAPI(session).getArchivedActivityInstances(instance.getId(), 0, 100, ActivityInstanceCriterion.NAME_ASC);The following example shows how to use a search method to see the archived activity instances.SearchOptionsBuilder searchBuilder = new SearchOptionsBuilder(0, 100);searchBuilder.sort(ArchivedActivityInstanceSearchDescriptor.NAME, Order.ASC);SearchResult&amp;lt;ArchivedActivityInstance&amp;gt; archActivitResult = TenantAPIAccessor.getProcessAPI(session).searchArchivedActivities(searchBuilder.done());These two examples above return identical information. Both list and search can be used to return a specified number of results, sorted according to a specified criterion.The advantage of using list is that it is a single query, so has better performance. It is also simpler to code.The advantage of using search is that you can specify filters to get a more precise set of results, which can be more efficient. Several filters can be added. By default, an implicit AND clause is added when several filters are added. If the need is different,you can have an OR clause, of more complex clauses. See SearchOptionsBuilder methods for filtering that matches your needs. The following example is a more precise search for archived activity instances, using a filter:SearchOptionsBuilder searchBuilder = new SearchOptionsBuilder(0, 100);// implicit AND clause between the following two filters:searchBuilder.filter(ArchivedActivityInstanceSearchDescriptor.ROOT_PROCESS_INSTANCE_ID, processInstance.getId());searchBuilder.filter(ArchivedActivityInstanceSearchDescriptor.ASSIGNEE_ID, myUser.getId());searchBuilder.sort(ArchivedActivityInstanceSearchDescriptor.NAME, Order.ASC);SearchResult&amp;lt;ArchivedActivityInstance&amp;gt; archActivitResult = TenantAPIAccessor.getProcessAPI(session).searchArchivedActivities(searchBuilder.done());Below is another example of a more complex search filtering.SearchOptionsBuilder sob = new SearchOptionsBuilder(0, 10);sob.filter(HumanTaskInstanceSearchDescriptor.PROCESS_INSTANCE_ID, myProcessInstance.getId());sob.or();sob.differentFrom&amp;lt;/b&amp;gt;(HumanTaskInstanceSearchDescriptor.ASSIGNEE_ID, myUser.getId());Word-based search By default, search uses a “starts by” algorithm for searching, and finds matches where the search string occurs at the start of a phrase.If word-based search is enabled, you can search for a string that is preceded by white space or is at the start of the phrase.For example:| Phrase in database | Search string | Matches with “starts with” | Matches with word-based search ||:-|:-|:-|:-|| Hello Charles | charles | no | yes || Hello Charles | he | yes | yes || Hello Charles | carl | no | no || Hello_Charles | ch | no | no |Using word-based search has an impact on performance, so by default it is disabled. You can enable it for the platform or for a tenant. If you enable it, you can exclude any objects for which it is not useful.  To configure word-based search, using the setup tool, edit platform_engine/bonita-platform-community-custom.properties and change the value of bonita.platform.persistence.platform.enableWordSearch (for the platform) or bonita.platform.persistence.tenant.enableWordSearch (for a tenant) to true.For each object you be excluded from word-based search,  using the setup tool, edit platform_engine/bonita-platform-custom.xml add a mapping to the wordSearchExclusionMappings set.Each mapping has the following form:&amp;lt;value&amp;gt;org.bonitasoft.engine.identity.model.SUser&amp;lt;/value&amp;gt;  Don’t forget to push your modifications using setup push command.When you restart the Engine, these settings are applied and word-based search comes into operation.",
      "url": " /bonita/7.8/development/engine-api/using-list-and-search-methods",
      "author": "",
      "categories": "Development, Engine API"
    }
    ,
  

    "bonita-7-8-development-living-application-customize-living-application-layout": {
      "title": "Customize living application layout",
      "content"     : "Customize the living application layoutNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.In 7.6 we made some improvements on the default layout.We recommand that you re-create your custom layout based on Bonita 7.6.0+ default layout.## OverviewAs explained in the layouts documentation page, it is possible to customize the existing application layout with the UI Designer.Keep in mind that this default layout is composed by tree containers: layout-header, layout-content, layout-footer. But only layout-header and layout-footer are designed to support additional widgets.Prerequisites to customize the default living application layout:  Basic knowledge of Java script  Basic knowledge of AngularJS  Basic knowledge of Bootstrap  Basic knowledge of the UI Designer  An existing living application (to test the modified layout)The following example shows how to add new widget into the default layout.  The example sections show how to:  Export the default application layout from Bonita Portal  Import the default application layout into the UI Designer  Modify this layout  Apply the customized layout onto a living application.## Export the default application layout from Bonita Portal  Open Bonita Portal, and log in with username and password of someone mapped to the Administrator profile.  Click on the Resources menu.  Select the filter Layouts.  Select the element Default layout.  Click on Export and save this Default layout on your file system.Import the default application layout into the UI DesignerEdit the default layout using the UI DesignerExport the customized layout on your file systemImport the _myCustomLayout_ into the portalConfigure your living application to use the modified layoutBuild a Side menu layoutTake advantage of the latest improvement in a customized layoutNavigate between pages without reloading the entire page.TroubleshootingLiving application layout log 3 error 500 on loadingUi-bootstrap.js library removed from runtimeImport the default application layout into the UI DesignerTo facilitate the modifications, the Default layout is built using the UI Designer. Therefore you just have to import it into the UI Designer to make changes.  Open the UI Designer.  Click on the Import button.  Retrieve the Default layout to import.Edit the default layout using the UI DesignerWhen you import the Default layout into the UI Designer, you can see that it generates three artefacts:  Living application layout page.  Living application IFrame widget to display the application page.  Living application menu widget to display the application menu.So we propose here to add new widgets to the Living application layout page header and footer.In the UI Designer:  Click on Living application layout page to open it in the page editor.  See that this page is composed by three main containers layout-header, layout-content, layout-footer.  Drag and drop an image widget on top of the menu in the layout-header, to display a brand image.  Drag and drop a title widget in the layout-footer, to display a “Copyright © 2017, Example Corporation”  Click on Save.Export the customized layout on your file systemOnce your changes are made, save the new layout using a new name and then export it.  Rename it into myCustomLayout.  Click on Save.  Click on the Export button.Import the myCustomLayout into the portal  Open Bonita Portal, and again log in with username and password of someone mapped to the Administrator profile.  Click on the Resources menu.  Click on Add.  Add the new myCustomLayout.  Click Next.  Click Confirm.Configure your living application to use the modified layout  Click on the Applications menu.  Click on the edit action … of your living application.  In the Look &amp;amp; Feel section, click on the Layout link  Select the myCustomLayout  Click on the validation button  In the Application details section, click on the URL link to navigate to your living application.  See your new application layout with a custom layout.  Feel free to add lots of new improvements to create the layout that fits your needs.Build a Side menu layoutAs of version 7.5.x, the default provided layout does not allow this kind of customization anymore (at least not so easily), but if you start from a 7.4.x Layout you can follow the 7.4 documentation customize-living-application-layout to build a side menu layout.Take advantage of the latest improvement in a customized layoutNavigate between pages without reloading the entire page.Starting with Bonita 7.6.0, when the user clicks on any menu item, only the content of the iframe with the targeted page is refreshed: it does not reload the entire page anymore. The HTML5 History API is used to achieve that.To take advantage of this improvement if your customized layout has been created with a Bonita version older than 7.6.0, you will need to follow these steps:  Import your CustomLayout_7.5.x (or lower) in the UI Designer 7.6.0 (or later versions)  Export the Default layout from Bonita Portal 7.6.0 (or later versions)  Import the Default layout in the UI Designer  Open your CustomLayout_7.5.x  If any of the custom widgets livingApplicationMenu or livingApplicationIFrame has been modified,you will need to merge your modifications and the modifications of the new version of those widgets, namely livingApplicationMenuV3 and livingApplicationIFrameV3.Note 1: To help this merge, you can generate a diff, between two version of the default layout by using Git.If you don’t already have Git, you will need to install it, then clone the repository “https://github.com/bonitasoft/bonita-distrib.git”.At the root level, run the following command:  “git diff 7.5.0 7.6.0 – ./community/resources/layout-page/src/main/resources”Note 2: A good practice would be to rename those merged widgets into something like myCustomizedMenuV3 and myCustomizedIFrameV3)  Replace the custom widget livingApplicationMenu by the new custom widget livingApplicationMenuV3 (or your myCustomizedMenuV3)  Replace the custom widget livingApplicationIFrame by the new custom widget livingApplicationIFrameV3  (or your myCustomizedIFrameV3)  Export this updated layout page.  In Bonita portal, edit the layout and import the newly exported layout  Confirm all messages  Validate that your application has a layout that fits your requirements and the new menu behaviour.TroubleshootingLiving application layout log 3 error 500 on loadingThis issue has been fixed in the 7.3.0 version (“[BS-14885] - Living application layout log 3 error 500 on loading”).If you want to import a custom layout created with a UI Designer older than version 7.3.0 into an application working with Bonita 7.3.0 or greater, you have to perform the following steps to prevent the issue from occurring:  Import the CustomLayout_7.2.x in UI Designer 7.3.3  Export the default layout from Bonita Portal  Import the default layout and confirm that custom widgets will be overwritten  Open the CustomLayout_7.2.x Layout and remove the 3 variables AuthorizeApplicationAPI, AuthorizeApplicationPageAPI and AuthorizeApplicationMenuAPI (as shown below) Those variables are responsible of the SEVERE error logs on server.  Select the iFrame widget and set the reziseToContent option to yes (this option has been removed in 7.6.0, as the iframe is now resized using CSS)  Save then Export the layout (feel free to rename the layout if you want)  On Bonita Portal edit the layout and import the newly exported layout  Confirm all messages  Validate that your application has a layout that fits your requirements.Ui-bootstrap.js library removed from runtimeIn our first design iteration, forms, pages and layouts designed with the UI Designer embedded UI Bootstrap js, version 0.13.4 by default and silently, even when not needed. This issue has been fixed in version 7.5.0, we removed it so you can embed it as an asset only when you need it, and in the version of your choice.Before this change, custom widgets could be created based on angular-bootstrap v0.13.0 with no explicit addition ofangular-bootstrap as an asset and without declaring required modules.This will not affect any artifact that has been created with the UI Designer and is currently deployed in Bonita Platform.In development though, if your custom widgets use angular-bootstrap, you need to add angular-bootstrap as an asset at widget level, and declare the appropriate required modules.Forms, pages, layouts CSS cleanedThis cleaning has been made in 7.5.0 version, The default CSS file embedded in UI Designer artifacts (except custom widgets) has been cleaned. Indeed, some of this CSSrules were overall not used and cluttered this file.This will not affect any artifact that has been created with the UI Designer and is currently deployed in Bonita Platform.Nevertheless some unwanted style could appear when importing a custom layout based on the default layout of Bonita prior to 7.5.0.If you do so and observe that the layout menu does not fit the whole width of your page, you can bring back the default style by adding the following lines in layout.css file..component .container { width: 100%; }",
      "url": " /bonita/7.8/development/living-application/customize-living-application-layout",
      "author": "",
      "categories": "Development, Living application"
    }
    ,
  

    "bonita-7-8-development-logging": {
      "title": "Logs",
      "content"     : "LogsThis page contains information about logging in Bonita.How components produce log messagesBonita EngineBonita PortalBonita StudioLogging configurationBonita Engine and Bonita PortalBonita StudioHow to include logging in your development on BonitaView log contentBonita StudioBonita PlatformHow components produce log messagesThe components of Bonita have their own ways to produce logs, which are described below.Bonita EngineAll the Engine services call the technical logger service in order to write log messages. There is no direct access to any logging framework such as log4j, JUL or SLF4J.Bonita PortalThe Portal uses the Java Util Logging (JUL) directly to log messages.Bonita StudioThe Studio uses a logging service provided by the Eclipse platform. Modification of the Studio logging configuration is not very common except for debugging the Studio itself.The Bonita Studio provides direct access to the log written by the embedded Portal and Engine. You can access this log from the Bonita Studio Help menu Show Engine log option (Engine log also contains UI designer logs).Logging configurationBonita Engine and Bonita PortalThe technical logger service uses SLF4J (version 1.6.1) to create the log. SLF4J is also used directly by Bonita dependencies such as Hibernate, Quartz and Ehcache.SLF4J is a facade for various logging frameworks, and a logging framework must be available as the back-end. By default, Bonita uses JUL (Java Util Logging) as a the back-end to SLF4J. This is defined by including the slf4j-jdk14-1.6.1.jar in the bonita.war WEB-INF/lib folder.By default in Bonita Engine and Bonita Portal, all logs are sent to the JUL framework. To configure what is logged and where it is stored, modify the JUL configuration. The method of configuring JUL depends on the application server you use:  Apache Tomcat: edit the logging.properties file located in conf folder (see the Apache Tomcat logging documentation).  WildFly Application Server: some documentation is available in the WildFly 10 Admin guide.  Other application server: refer to your application server documentation on Java Util Logging configuration.For the Tomcat embedded in BonitaStudio, the JUL configuration file is located in the Studio installation folder underworkspace/tomcat/conf. After editing this file, restart Tomcat by going to the Server menu and selecting the Restart web server option.Here is an example of the JUL configuration for the logger used in the example below:# Reuse Bonita log handler (file bonita.log) for org.mycompany.connector loggersorg.mycompany.connector.handlers = 5bonita.org.apache.juli.AsyncFileHandler# Set log level to &quot;finest&quot; for newly created connectororg.mycompany.connector.level = FINEST# Set log level to &quot;finest&quot; for Groovy scriptorg.bonitasoft.groovy.script.level = FINESTBonita StudioTo change the Bonita Studio log level (usually to debug Studio), go to the Studio installation folder, configuration directory, and edit the config.ini file. You need to set the property eclipse.log.level to one of the following values: INFO, WARNING or ERROR.How to include logging in your development on BonitaWhen you write Groovy scripts or Java code to be included in a process (for example, to create a new connector implementation), logging is usually required. The recommended option is to use SLF4J in order to log messages. SLF4J is included in the Bonita dependencies so you can use it without adding extra dependencies. However, to get completion for SLF4J classes during development you need to add the slf4j-api jar file temporarily to your process dependencies (click Configure then choose Application dependencies).This is an example of how to log debug information in a Groovy script. Note that we recommend that you use a logger name that starts with “org.bonitasoft”, so that the default Bonita logging configuration is applied to your logger. Also, ending your logger name with a name similar to the Groovy script will be helpful to identify source of the message.import org.slf4j.Logger;import org.slf4j.LoggerFactory;Logger logger = LoggerFactory.getLogger(&quot;org.bonitasoft.groovy.script.my_int_init_script&quot;);logger.debug(&quot;Set initial value of process variable using Groovy script&quot;);return Integer.valueOf(3 + 5);This is an example of how to use logging in a connector:private static final Logger LOGGER = LoggerFactory.getLogger(SumImpl.class); @Override protected void executeBusinessLogic() throws ConnectorException {LOGGER.debug(&quot;Trying to sum {} and {}.&quot;, getIntegerA(), getIntegerB());int sum = getIntegerA() + getIntegerB(); LOGGER.debug(&quot;The sum is: {}&quot;, sum);setSum(sum);}View log contentBonita StudioIn Bonita Studio you have access to two log files:  The Studio log file includes information about Studio execution. Look at this file if you see incorrect behavior of the Studio. To view the file, go to the Help menu and choose Show Studio log. The file is located in the workspace/.metadata folder and is named .log.  The Engine and Portal log file receives all log messages produced by the Bonita Platform embedded in the Studio. When you test your processes by running them from the Studio you will find valuable debugging information in this file. To view the file, go to the Help menu and choose Show Engine log. The file is located in workspace/tomcat/log and is named bonita-yyyy-mm-dd.log.Bonita PlatformThe log file location depends on your application server.PackagesLogs are configured via the class package names and the main packages are org.bonitasoft and com.bonitasoft for subscription edition.Change these packages value to change the Bonita global log level.TomcatOn a Tomcat bundle, you can configure the log level and you can access the log files directly, in $TOMCAT_HOME/logs. Each file name includes the date when the file was created. There are several log files:  bonita.date.log is the Bonita log file.  catalina.date.log is the log file for the Tomcat application server used by Bonita Studio.  host-manager.date.log, localhost.date.log, and manager.date.log are internal Tomcat log files.WildFlyOn a WildFly bundle, logs can be configured in the $WILDFLY_HOME/standalone/configuration/standalone.xml in the urn:jboss:domain:logging:3.0 domain of the subsystem tag.Edit the logger tags which category matches Bonita main package: change the level name attribute of each logger section you want to change the log level.Log files are located in the log folder of the launched configuration.Usually, the standalone configuration is run so the log files are located in the $WILDFLY_HOME/standalone/log folder.  boot.log : contains WildFly boot logs.  server.date.log: is the global log file of the WildFly server.  bonita.date.log: is Bonita log file.",
      "url": " /bonita/7.8/development/logging",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "bonita-7-8-development-preloading-the-forms-cache": {
      "title": "Preload the forms cache",
      "content"     : "Preload the forms cacheNote: This information applies to legacy forms developed with Bonita 6.x, or with the 6.x Application backward-compatibility features of Bonita 7.0. It is not necessary to preload forms developed with the UI Designer.The first time a form is displayed, it is cached so that when it is displayed again it loads more quickly. This is the default behavior. However, you can speed up the first display of a form by preloading it into the forms cache.To preload the forms cache, use the formsCache service, which is accessed over HTTP.formsCache serviceURLSupported methodsPreload the forms cacheForms cache configurationformsCache serviceURLportal/formsCacheSupported methods| Method property  | Description  || —————- | ———— || Action  | GET  || URI  | formsCache  || Parameters  | process=processDefinitionID  || Behavior  | Retrieve the list of the IDs of the forms contained in the forms definition file (forms.xml) of the specified process definition  | | Response  | The list of form IDs (for example [“myProcess–1.0$entry”,”myProcess–1.0–firstActivity$entry”])  | | Error response codes  | 400 if the process parameter is missing, 404 if the process is not found  |Method property  Description  Action  PUT  URI  formsCache/processDefinitionID/formID (for example: formsCache/12875/myProcess--1.0$entry)  Parameters  none  Behavior  Parse the XML fragment corresponding to the specified form and load the form object into the cache  Response  none  Error response codes  400 if the process ID or the form ID are missing, 404 if the process or the form are not found (200 if the form was found and cached)  Preload the forms cacheFirst, send a GET request to retrieve the list of forms in a specified process. Then send a PUT request for each form to load it into the cache. The PUT request can sometimes take several seconds to respond, depending on the complexity of the form.If you are using the Enterprise, Performance or Efficiency edition, you can create a custom page to preload the forms cache. For the Teamwork or Community edition, you need to create an application.Forms cache configurationThe forms cache is implemented using EhCache. The cache configuration is defined in $BONITA_HOME/client/platform/conf/cache-config.xml. By default, when you restart the server, the cache is emptied, so forms would have to be loaded again. To keep the cached forms after a restart, set the diskPersistent property to true.",
      "url": " /bonita/7.8/development/preloading-the-forms-cache",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "bonita-7-8-development-rest-api-access-control-api": {
      "title": "access control API",
      "content"     : "Access control APINote: This API is only available in Enterprise, Efficiency and Performance editions.BDMBDMDescriptionAccess control is available to protect the tenant BDM. You can use this API to get the access control status (lastUpdatedBy, lastUpdateDate…).Methods  GET - Read access control status.  DELETE - Remove access controlNote: A servlet to import access control file exists. You can use it with this url  services/bdmAccessControl/install?bdmAccessControlUpload=accessControlFileToUpload.xml.  The file upload needs to be performed before (POST portal/bdmAccessControlUpload). Use the file name returned in the response of the upload request to perform the import request (bdmAccessControlUpload parameter).Get access Control statusMake this call to get the access control status.  URL/API/accessControl/bdm  MethodGet  Success Response  Code: 200  Payload:{  &quot;id&quot;: &quot;4090&quot;,  &quot;name&quot;: &quot;bdm_access_control.xml&quot;,  &quot;type&quot;: &quot;BDM_ACCESS_CONTROL&quot;,  &quot;state&quot;: &quot;INSTALLED&quot;,  &quot;lastUpdatedBy&quot;: &quot;4&quot;,  &quot;lastUpdateDate&quot;: &quot;2018-01-17T17:05:36.671Z&quot;}Note: If &quot;lastUpdatedBy&quot;: &quot;-1&quot; it means that the access control were last installed or updated by tenant_technical_user.Delete an access controlDelete the access control which are installed on the current tenant.  URL/API/accessControl/bdm  MethodDelete  Success Response  Code: 204  ",
      "url": " /bonita/7.8/development/rest-api/access-control-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-8-development-rest-api-application-api": {
      "title": "application API",
      "content"     : "Application APIApplicationLiving applicationApplication ThemeApplication MenuApplication PageApplicationLiving applicationDescriptionManage applications. This enables you to build to build a consistent functional applicative environment for users to interact with business processes and business data from one place.IdentifierThe ID of the application (a long value).Representation{  &quot;id&quot;:&quot;id of the application&quot;,  &quot;token&quot;:&quot;token of the application used to build the application URL&quot;,  &quot;displayName&quot;:&quot;display name of the application&quot;,  &quot;version&quot;:&quot;version of the application&quot;,  &quot;description&quot;:&quot;description of the application&quot;,  &quot;profileId&quot;:&quot;profile authorized to access this application&quot;,  &quot;creationDate&quot;:&quot;creation date of the application&quot;,  &quot;createdBy&quot;:&quot;user that created the application&quot;,  &quot;updatedBy&quot;:&quot;user that that updated the application&quot;,  &quot;lastUpdateDate&quot;:&quot;last update date of the application&quot;},  &quot;homePageId&quot;:&quot;id of the application page used as the home page&quot;}MethodsThe methods used for this resource are:  POST - Create an application  GET - Get the application information  PUT - Update an application  DELETE - Remove an applicationCreate an application  URL:/API/living/application  MethodPOST  Data params:A partial representation of an application in JSON  {&quot;version&quot;:&quot;1.0&quot;,&quot;profileId&quot;:&quot;2&quot;,&quot;token&quot;:&quot;myapp&quot;,&quot;displayName&quot;:&quot;My app&quot;,&quot;description&quot;:&quot;My application description&quot;  }Success Response  Code: 200  Payload:The full JSON representation of the application that was created{  &quot;id&quot;:&quot;305&quot;,  &quot;creationDate&quot;:&quot;1411548289900&quot;,  &quot;iconPath&quot;:&quot;&quot;,  &quot;createdBy&quot;:&quot;1&quot;,  &quot;profileId&quot;:&quot;2&quot;,  &quot;description&quot;:&quot;My application description&quot;,  &quot;token&quot;:&quot;myapp&quot;,  &quot;state&quot;:&quot;DEACTIVATED&quot;,  &quot;displayName&quot;:&quot;My app&quot;,  &quot;updatedBy&quot;:&quot;1&quot;,  &quot;lastUpdateDate&quot;:&quot;1411548289900&quot;,  &quot;version&quot;:&quot;1.0&quot;,  &quot;homePageId&quot;:&quot;-1&quot;}Get an application  URL:/API/living/application/:applicationId  Method:GET  Success Response  Code: 200  Payload The full JSON representation of the application that was created with id=”applicationId”{  &quot;id&quot;:&quot;305&quot;,  &quot;creationDate&quot;:&quot;1411548289900&quot;,  &quot;iconPath&quot;:&quot;&quot;,  &quot;createdBy&quot;:&quot;1&quot;,  &quot;profileId&quot;:&quot;2&quot;,  &quot;description&quot;:&quot;My application description&quot;,  &quot;token&quot;:&quot;myapp&quot;,  &quot;state&quot;:&quot;DEACTIVATED&quot;,  &quot;displayName&quot;:&quot;My app&quot;,  &quot;updatedBy&quot;:&quot;1&quot;,  &quot;lastUpdateDate&quot;:&quot;1411548289900&quot;,  &quot;version&quot;:&quot;1.0&quot;,  &quot;homePageId&quot;:&quot;-1&quot;}Delete an application  URL/API/living/application/:applicationId  Method:DELETE  Success Response  Code: 200  Update an ApplicationYou can update the following parameters:  token  displayName  version  profileId  descriptionURL/API/living/application/:applicationId  MethodPUT  Request PayloadA partial representation of an application with parameters to update{  &quot;version&quot;:&quot;2.0&quot;,  &quot;profileId&quot;:&quot;3&quot;,  &quot;token&quot;:&quot;myappToUpDate&quot;,  &quot;displayName&quot;:&quot;My app To Up Date&quot;,  &quot;description&quot;:&quot;My application description To Up Date&quot;}Success Response  Code: 200  Search for an application  URL/API/living/applicationExample: /API/living/application?f=token%3dmyapp&amp;amp;d=createdBy  MethodGET  URL ParamsStandard search parameters are available to search form mappings.Required  c: number of result per page to retrieve  p: page number to retrieveOptional:  o: can order on “id”,”creationDate”, “createdBy”, “profileId”, “token”, “displayName”, “updatedBy”, “lastUpdateDate”, “version”  s: can search on “token”, “displayName”, “version”  f: can filter on “token”, “displayName”, “version”, “profileId”, “creationDate”, “createdBy”, “updatedBy” , “lastUpdateDate” with the format f={filter_name}={filter_value}  d: can directly access the details by of the “createdBy” or “updatedBy” user, or of the “profileId”Success Response  Code: 200  Payload:A JSON array of application[{  &quot;id&quot;:&quot;305&quot;,  &quot;creationDate&quot;:&quot;1411548289900&quot;,  &quot;iconPath&quot;:&quot;&quot;,  &quot;createdBy&quot;: {&quot;last_connection&quot;:&quot;2014-09-24 14:57:26.146&quot;,&quot;created_by_user_id&quot;:&quot;-1&quot;,&quot;creation_date&quot;:&quot;2014-09-15 17:25:22.678&quot;,&quot;id&quot;:&quot;1&quot;,&quot;icon&quot;:&quot;/default/icon_user.png&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;title&quot;:&quot;&quot;,&quot;manager_id&quot;:&quot;0&quot;,&quot;job_title&quot;:&quot;&quot;,&quot;userName&quot;:&quot;user1&quot;,&quot;lastname&quot;:&quot;user1&quot;,&quot;firstname&quot;:&quot;user1&quot;,&quot;password&quot;:&quot;&quot;,&quot;last_update_date&quot;:&quot;2014-09-15 17:25:22.678&quot;  },  &quot;profileId&quot;:&quot;2&quot;,  &quot;description&quot;:&quot;My application description&quot;,  &quot;token&quot;:&quot;myapp&quot;,  &quot;state&quot;:&quot;DEACTIVATED&quot;,  &quot;displayName&quot;:&quot;My app&quot;,  &quot;updatedBy&quot;:&quot;1&quot;,  &quot;lastUpdateDate&quot;:&quot;1411548289900&quot;,  &quot;version&quot;:&quot;1.0&quot;,  &quot;homePageId&quot;:&quot;-1&quot;}]",
      "url": " /bonita/7.8/development/rest-api/application-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-8-development-rest-api-bdm-api": {
      "title": "bdm API",
      "content"     : "BDM APIAccess to the bdm REST API depends on the REST API authorization settings.BusinessDataBusinessDataQueryBusinessDataReferenceBusinessDataDescriptionRetrieve business data value. Depending on the object attribute loading policy, the API returns either the full object in JSON representation or the HATEOAS links to the object attributes.IdentifierThe fully qualified name (businessDataType) and the persistenceId of the business data (a long value).RepresentationRepresentation of object attributes with an always load policy:{  &quot;persistenceId&quot;: _number_,  &quot;persistenceId_string&quot;: &quot;_number_&quot;   &quot;persistenceVersion&quot;: _number_,  &quot;persistenceVersion_string&quot;: &quot;_number_&quot;  &quot;attributeName&quot;:_attributeType_  ...}The string representation added in 7.0.1 for Long attributes is a workaround for the JavaScript integer spectrum issue.HATEOAS representation of object attribute with a load when needed policy:&quot;links&quot;:[   {   &quot;rel&quot;:_string_   &quot;href&quot;:_uri_   }]MethodsThe methods used for this resource are:  GETGet the business dataGet the business data specified by its identifier.  URL/API/bdm/businessData/:businessDataType/:persistenceIdExample: /API/bdm/businessData/com.company.model.Contract/1  MethodGET  Success ResponseA business data (in JSON format)  Code: 200  Payload:With business data containing always-loaded object attributes:{  &quot;persistenceId&quot;: 1,  &quot;persistenceId_string&quot;: &quot;1&quot;,  &quot;persistenceVersion&quot;: 0,  &quot;persistenceVersion_string&quot;: &quot;0&quot;,  &quot;contractName&quot;: &quot;contract for Netcom3&quot;,  &quot;terms&quot;: [{&quot;persistenceId&quot;: 1,&quot;persistenceId_string&quot;: &quot;1&quot;,&quot;persistenceVersion&quot;: 0,&quot;persistenceVersion_string&quot;: &quot;0&quot;,&quot;termName&quot;: &quot;term Name&quot;},{  &quot;persistenceId&quot;: 2,  &quot;persistenceId_string&quot;: &quot;2&quot;,  &quot;persistenceVersion&quot;: 0,  &quot;persistenceVersion_string&quot;: &quot;0&quot;,  &quot;termName&quot;: &quot;term Name&quot;}  ],  &quot;client&quot;: {&quot;persistenceId&quot;: 13,&quot;persistenceId_string&quot;: &quot;13&quot;,&quot;persistenceVersion&quot;: 0,&quot;persistenceVersion_string&quot;: &quot;0&quot;,&quot;clientName&quot;: &quot;client name&quot;,&quot;description&quot;: &quot;n/a&quot;,&quot;industry&quot;: [{&quot;persistenceId&quot;: 2,&quot;persistenceId_string&quot;: &quot;2&quot;,&quot;persistenceVersion&quot;: 0,&quot;persistenceVersion_string&quot;: &quot;0&quot;,&quot;industryName&quot;: &quot;Services&quot;  }, {&quot;persistenceId&quot;: 3,&quot;persistenceId_string&quot;: &quot;3&quot;,&quot;persistenceVersion&quot;: 0,&quot;persistenceVersion_string&quot;: &quot;0&quot;,&quot;industryName&quot;: &quot;Software&quot;  }]  }}With business data containing loaded-when-needed object attributes{  &quot;persistenceId&quot;: 2,  &quot;persistenceId_string&quot;: &quot;2&quot;,  &quot;persistenceVersion&quot;: 0,  &quot;persistenceVersion_string&quot;: &quot;0&quot;,  &quot;clientName&quot;: &quot;Affectiva&quot;,  &quot;description&quot;: &quot;n/a&quot;,  &quot;links&quot;: [{&quot;rel&quot;: &quot;industry&quot;,&quot;href&quot;: &quot;/API/bdm/businessData/com.company.model.Client/2/industry&quot;  }]}  Error ResponseWhen business data identifier is not valid  Code: 500  Get the business data attribute of business dataGets the business data attribute of business data according to its identifier and attribute name.Request url  URLhttp://../API/bdm/businessData/:businessDataType/:persistenceId/:attributeNameExample: /API/bdm/businessData/com.company.model.Client/2/industry  MethodGET  Success ResponseA business data (in JSON format)  Code: 200  Payload:{  &quot;persistenceId&quot;: 2,  &quot;persistenceId_string&quot;: &quot;2&quot;,  &quot;persistenceVersion&quot;: 0,  &quot;persistenceVersion_string&quot;: &quot;0&quot;,  &quot;industryName&quot;: &quot;Services&quot;}  Error ResponseWhen business data identifier or attribute name is not valid  Code: 500  Get several business dataGet the business data specified by their identifiers.  URLhttp://../API/bdm/businessData/:businessDataType/findByIdsExample: /API/bdm/businessData/com.company.model.Contract/findByIds?ids=1,83  MethodGET  Data Params  ids - list of persistenceIds (comma separated)Success ResponseAn array of business data (in JSON format). It can be an empty array if no identifiers refer to existing data.  Code: 200  Payload:With business data containing always loaded object attributes[{  &quot;persistenceId&quot;: 1,  &quot;persistenceId_string&quot;: &quot;1&quot;,  &quot;persistenceVersion&quot;: 0,  &quot;persistenceVersion_string&quot;: &quot;0&quot;,  &quot;contractName&quot;: &quot;contract for Netcom3&quot;,  &quot;terms&quot;: [{  &quot;persistenceId&quot;: 1,  &quot;persistenceId_string&quot;: &quot;1&quot;,  &quot;persistenceVersion&quot;: 0,  &quot;persistenceVersion_string&quot;: &quot;0&quot;,  &quot;termName&quot;: &quot;term Name&quot;},{  &quot;persistenceId&quot;: 2,  &quot;persistenceId_string&quot;: &quot;2&quot;,  &quot;persistenceVersion&quot;: 0,  &quot;persistenceVersion_string&quot;: &quot;0&quot;,  &quot;termName&quot;: &quot;term Name&quot;}  ],  &quot;client&quot;: {&quot;persistenceId&quot;: 13,&quot;persistenceId_string&quot;: &quot;13&quot;,&quot;persistenceVersion&quot;: 0,&quot;persistenceVersion_string&quot;: &quot;0&quot;,&quot;clientName&quot;: &quot;client name&quot;,&quot;description&quot;: &quot;n/a&quot;,&quot;industry&quot;: [{  &quot;persistenceId&quot;: 2,  &quot;persistenceId_string&quot;: &quot;2&quot;,  &quot;persistenceVersion&quot;: 0,  &quot;persistenceVersion_string&quot;: &quot;0&quot;,  &quot;industryName&quot;: &quot;Services&quot;  }, {&quot;persistenceId&quot;: 3,&quot;persistenceId_string&quot;: &quot;3&quot;,&quot;persistenceVersion&quot;: 0,&quot;persistenceVersion_string&quot;: &quot;0&quot;,&quot;industryName&quot;: &quot;Software&quot;}]  }}]",
      "url": " /bonita/7.8/development/rest-api/bdm-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-8-development-rest-api-bpm-api": {
      "title": "bpm API",
      "content"     : "BPM APIActivities and TasksActivityArchivedActivityHumanTaskManualTaskTaskUserTaskActionsRetrieve a userTaskArchivedHumanTaskArchivedManualTaskArchivedTaskArchivedUserTaskDataActivityVariableCaseVariable DocumentCaseDocumentArchivedCaseDocumentActorsActorActorMemberCases (Process Instances)CaseArchivedCaseCaseInfoCaseCommentArchivedCaseCommentProcessProcessDiagram (Subscription editions only)ProcessParameterProcessResolutionProblemProcessSupervisorConnectorsProcessConnectorDependencyConnectorFailureConnectorInstanceArchivedConnectorInstanceFlow NodesFlow NodeArchivedFlowNodeTimerEventTriggerActivities and TasksActivityDescriptionUse this resource to retrieve activities (human or service tasks), call activities, and subprocesses currently running on the platform. It enables you to perform maintenance tasks like skipping or replaying a failed task and modifying variables.IdentifierThe ID of the activity (a long value).Representation{  &quot;id&quot;: &quot;the activity id (long)&quot;,  &quot;type&quot;: &quot;the activity type (string)&quot;,  &quot;name&quot;: &quot;the activity technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable activity name (string)&quot;,  &quot;description&quot;: &quot;the activity description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable activity description (string)&quot;,  &quot;state&quot;: &quot;the current state of the activity (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this activity reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this activity was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this activity is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current activity&quot;,&quot;processId&quot;: &quot;the process definition id (long) of the case which define this activity&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this activity. The activity has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the activity in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this activity, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this activity is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current activity was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;}States:  failed  initializing  ready  executing  completing  completed  waiting  skipped  cancelled  aborted  cancelling subtasksTypes:  AUTOMATIC_TASK  HUMAN_TASK  USER_TASK  MANUAL_TASK  LOOP_ACTIVITY  MULTI_INSTANCE_ACTIVITY  SUB_PROCESSPriorities:  highest  above_normal  normal  under_normal  lowestMethodsThe methods used for this resource are:  GET - Read an activity or search for an activity  PUT - Update an activityResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  processId  caseId  rootCaseId  parentCaseId  rootContainerId  executedBy  executedBySubstitute (only in Efficiency, Performance and Enterprise editions)  actorId  assigned_id  parentTaskIdUpdate activity variablesNote: if there is no data with the specified name in the activity, the update will be applied to the process data if a variable with the specified name exists.  URL/API/bpm/activity/:id  MethodPUT  Request Payload{  &quot;variables&quot;: &quot;[{&quot;name&quot;:&quot;foo&quot;,&quot;value&quot;:&quot;bar&quot;}]&quot;}Success Response  Code: 200  Update activity variables and execute a taskNote: if the task definition includes a connector that is executed on finish and updates the value of a variable, the value set by the REST API call is overwritten.  URL/API/bpm/activity/:id  MethodPUT  Request Payload{   &quot;state&quot;: &quot;completed&quot;,   &quot;variables&quot;: &quot;[{&quot;name&quot;:&quot;foo&quot;,&quot;value&quot;:&quot;bar&quot;}]&quot; }Success Response  Code: 200  Skip activity  URL/API/bpm/activity/:id  MethodPUT  Request Payload{  &quot;state&quot;: &quot;skipped&quot;}Success Response  Code: 200  Replay activityMake this call after all failed connectors have been reset. (only in Performance and Enterprise editions)  URL/API/bpm/activity/:id  MethodPUT  Request Payload{ &quot;state&quot;: &quot;replay&quot; }Success Response  Code: 200  Get an activityRetrieve the activity information for the given id.  URL/API/bpm/activity/:id  MethodGET  Success ResponseThe JSON representation of the specified activity  Code: 200  Payload:{  &quot;displayDescription&quot;: &quot;validate expense request&quot;,  &quot;executedBySubstitute&quot;: &quot;0&quot;,  &quot;caseId&quot;: &quot;76539&quot;,  &quot;parentCaseId&quot;: &quot;68743&quot;,  &quot;rootCaseId&quot;: &quot;65879&quot;,  &quot;processId&quot;: &quot;7012&quot;,&quot;  &quot;rootContainerId&quot;: &quot;7000&quot;,  &quot;state&quot;: &quot;completed&quot;,  &quot;type&quot;: &quot;the activity type as a string&quot;,  &quot;assigned_id&quot;: &quot;304&quot;,  &quot;assigned_date&quot;: &quot;2014-10-17 16:05:42.626&quot;,  &quot;id&quot;: &quot;809764&quot;,  &quot;executedBy&quot;: &quot;0&quot;,  &quot;priority&quot;: &quot;the priority of the current activity as a string&quot;,  &quot;actorId&quot;: &quot;50&quot;,  &quot;description&quot;: &quot;In this step, a manager reviews and validates an expense request.&quot;,  &quot;name&quot;: &quot;Validate&quot;,  &quot;reached_state_date&quot;: &quot;2014-10-18 10:37:05.643&quot;,  &quot;displayName&quot;: &quot;Validate expense request&quot;,  &quot;dueDate&quot;: &quot;2014-10-21 16:05:42.626&quot;,  &quot;last_update_date&quot;: &quot;2014-10-18 10:37:05.643&quot;}Search among activitiesSearch for flow activities using given parameters. Activities in states completed, cancelled, or aborted are not retrieved. The search returns an array of activities.  URL/API/bpm/activityExample: Get all the active activities named “Escalate”, ordering the results by state: /API/bpm/activity?p=0&amp;amp;c=10&amp;amp;f=name%3dEscalate&amp;amp;o%3dstate%20ASC  MethodGET  Data ParamsFor this resource, the available state search parameters for the GET verb are the same as for the flow nodes.The following search parameters are available:  o:  name  displayName  state  processDefinitionId  parentProcessInstanceIdo  parentActivityInstanceId (order by parent activity id)  rootProcessInstanceId  lastUpdateDates: search on any field that can be used to order results  f:  name  state  processId  parentCaseId  rootCaseId  last_update_date  supervisor_id (only in Efficiency, Performance and Enterprise editions)d: extend resource response parameters of this resource are available.Success ResponseAn array of JSON representations of activities  Code: 200  ArchivedActivityDescriptionUse this resource to retrieve finished activities (human or service tasks), call activities, and subprocesses.For this resource, the available state search parameters for the GET verb are the same as for the archived flow nodes.IdentifierThe ID of the archived activity (a long value). This is different from the ID of the activity before it was archived.Representation{  &quot;id&quot;: &quot;the archived activity id (long)&quot;,  &quot;type&quot;: &quot;the archived activity type (string)&quot;,  &quot;name&quot;: &quot;the archived activity technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable archived activity name (string)&quot;,  &quot;description&quot;: &quot;the archived activity description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable archived activity description (string)&quot;,  &quot;state&quot;: &quot;the current state of the archived activity (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this archived activity reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this archived activity was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this archived activity is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current archived activity&quot;,&quot;processId&quot;: &quot;the process definition id (long) of the case which define this archived activity&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this archived activity. The archived activity has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the archived activity in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this archived activity, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this archived activity is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current archived activity was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;sourceObjectId&quot;: &quot;the original id of the archived activity before it was archived&quot;,  &quot;archivedDate&quot;: &quot;the date ((&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;)) when this archived activity was archived, for example &#39;2014-10-17 16:05:42.626&#39;&quot;}States:  failed  initializing  ready  executing  completing  completed  waiting  skipped  cancelled  aborted  cancelling subtasksTypes:  AUTOMATIC_TASK  HUMAN_TASK  USER_TASK  MANUAL_TASK  CALL_ACTIVITY  LOOP_ACTIVITY  MULTI_INSTANCE_ACTIVITY  SUB_PROCESSPriorities:  highest  above_normal  normal  under_normal  lowestMethodsThe methods used for this resource are:  GET - Read a resource or search for an archived activityResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  processId: the id of the process that is associated with the activity  caseId: the id of the case that is associated with the activity  rootCaseId: the root case that is associated with this activity’s case  parentCaseId: the parent case that is associated with this activity’s case  rootContainerId: the root process of the root case that is associated with this activity  executedBy: the user who executed the activity  executedBySubstitute: the user who executed the activity for the executedBy user (only in Effeciency, Performance and Enterprise editions)  actorId: the actor that can execute this activity  assigned_id: the user this activity is assigned to  parentTaskId: in the case of a subtask, the parent taskGet an archived activityRetrieve the activity information for the given id.  URL/API/bpm/archivedActivity/:id  MethodGET  Success ResponseThe JSON representation of the specified activity  Code: 200  Search among archived activitiesSearch for archived activities using given parameters. Only archived activities in a final state are retrieved (completed, cancelled, aborted). It returns an array of archived activities.  URL/API/bpm/archivedActivity  MethodGET  Data ParamsThe following search parameters are available:  o:  name : the name of this activity  displayName : the display name of this activity  state : the current state of the activity  type : the activity type  isTerminal : say whether or not the activity is in a terminal state  processId : the process this activity is associated to  caseId : the case initiator this activity is associated to  reached_state_date : the date when this activity arrived in this statef:  supervisor_id: retrieve the information the process manager associated to this id has access to (only in Efficiency, Performance and Enterprise editions)  f: same as the sort order fieldsd: extend resource response parameters of this resource are available.Success ResponseAn array of JSON representations of the specified activities  Code: 200  HumanTaskDescriptionA Human task is Manual task or a User task. A User task is a task that can be done by a user.A Manual task is a subtask of a user task, and is also done by a user.IdentifierSimple, the ID of the object (a long value)Representation{  &quot;id&quot;: &quot;the task id (long)&quot;,  &quot;type&quot;: &quot;the task type (string): USER_TASK | MANUAL_TASK&quot;,  &quot;name&quot;: &quot;the task technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable task name (string)&quot;,  &quot;description&quot;: &quot;the task description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable task description (string)&quot;,  &quot;state&quot;: &quot;the current state of the task (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current task&quot;,&quot;processId&quot;: &quot;the process definition id (long) of the case which define this task&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this task. The task has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the task in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this task, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this task is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current task was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;}MethodsThe methods used for this resource are:  GET - Read a resource  PUT - Update a resourceResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  processId: the id of the process that is associated with the activity  caseId: the id of the case that is associated with the activity  rootCaseId: the root case that is associated with this activity’s case  parentCaseId: the parent case that is associated with this activity’s case  rootContainerId: the root process of the root case that is associated with this activity  executedBy: the user who executed the activity  executedBySubstitute: the user who executed the activity for the executedBy user (only in Effeciency, Performance and Enterprise editions)  actorId: the actor that can execute this activity  assigned_id: the user this activity is assigned to  parentTaskId: in the case of a subtask, the parent taskActionsRetrieve a humanTask  URL/API/bpm/humanTask/:taskId  MethodGET  Success ResponseReturns a Human task representation  Code: 200  Payload:{  &quot;displayDescription&quot;:&quot;&quot;,  &quot;executedBySubstitute&quot;:&quot;0&quot;,  &quot;processId&quot;:&quot;5826139717723008213&quot;,  &quot;state&quot;:&quot;ready&quot;,  &quot;rootContainerId&quot;:&quot;1002&quot;,  &quot;type&quot;:&quot;USER_TASK&quot;,  &quot;assigned_id&quot;:&quot;&quot;,  &quot;assigned_date&quot;:&quot;&quot;,  &quot;id&quot;:&quot;20004&quot;,  &quot;executedBy&quot;:&quot;0&quot;,  &quot;caseId&quot;:&quot;1002&quot;,  &quot;priority&quot;:&quot;normal&quot;,  &quot;actorId&quot;:&quot;102&quot;,  &quot;description&quot;:&quot;&quot;,  &quot;name&quot;:&quot;Analyse case&quot;,  &quot;reached_state_date&quot;:&quot;2014-09-05 11:11:30.808&quot;,  &quot;displayName&quot;:&quot;Analyse case&quot;,  &quot;dueDate&quot;:&quot;2014-09-05 12:11:30.775&quot;,  &quot;last_update_date&quot;:&quot;2014-09-05 11:11:30.808&quot;}Search for a humanTaskRetrieve humanTask objects that match the specified filters.  URL/API/bpm/humanTaskExample: Get the human tasks that have been skipped. /API/bpm/humanTask?p=0&amp;amp;c=10&amp;amp;f=state=skipped  MethodGET  Data ParamsStandard search parameters are available:  d: extend resource response parameters of this resource are available.  o: name, priority, dueDate, state, userId, groupId, roleId, processDefinitionId, processInstanceId, parentActivityInstanceId, assigneeId, parentContainerId, displayName, reachedStateDate  s: search on any field that can be used to order results  f: assigned_id, state, name, displayName, processDefinitionId, parentContainerIdFor instance, you can filter on:  assigned_id={user_id}: retrieve only the human tasks assigned to the specified ID. For example, retrieve the human tasks assigned to user with id 2: /API/bpm/humanTask?p=0&amp;amp;c=10&amp;amp;f=assigned_id%3d2  state=: retrieve only the archived user tasks with the specified state. For example, retrieve the skipped tasks: /API/bpm/humanTask?p=0&amp;amp;c=10&amp;amp;f=state=skipped  name=: retrieve only the human tasks with the specified name. For example, retrieve the human tasks with the name “Analyse Case”: /API/bpm/humanTask?p=0&amp;amp;c=10&amp;amp;f=name=Analyse Case  displayName=: retrieve only the archived user tasks with the specified displayName. For example, retrieve the human tasks with the displayName “Analyse Case”: /API/bpm/humanTask?p=0&amp;amp;c=10&amp;amp;f=displayName=Analyse CaseSuccess Response  Code: 200  Payload:The results are paged using the standard search parameters, with a maximum of 10 results returned in each page. The first set of results are returned. In this example, two results are returned.[  {&quot;displayDescription&quot;:&quot;Case analysis&quot;,&quot;executedBySubstitute&quot;:&quot;0&quot;,&quot;processId&quot;:&quot;5826139717723008213&quot;,&quot;state&quot;:&quot;skipped&quot;,&quot;rootContainerId&quot;:&quot;1002&quot;,&quot;type&quot;:&quot;USER_TASK&quot;,&quot;assigned_id&quot;:&quot;974&quot;,&quot;assigned_date&quot;:&quot;2014-09-05 09:19:30.150&quot;,&quot;id&quot;:&quot;20004&quot;,&quot;executedBy&quot;:&quot;0&quot;,&quot;caseId&quot;:&quot;1002&quot;,&quot;priority&quot;:&quot;normal&quot;,&quot;actorId&quot;:&quot;102&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;Analyse case&quot;,&quot;reached_state_date&quot;:&quot;2014-09-05 11:11:30.808&quot;,&quot;displayName&quot;:&quot;Analyse case&quot;,&quot;dueDate&quot;:&quot;2014-09-05 12:11:30.775&quot;,&quot;last_update_date&quot;:&quot;2014-09-05 11:11:30.808&quot;  }, {&quot;displayDescription&quot;:&quot;Validate case&quot;,&quot;executedBySubstitute&quot;:&quot;0&quot;,&quot;processId&quot;:&quot;5826139717723007999&quot;,&quot;state&quot;:&quot;skipped&quot;,&quot;rootContainerId&quot;:&quot;1010&quot;,&quot;type&quot;:&quot;USER_TASK&quot;,&quot;assigned_id&quot;:&quot;971&quot;,&quot;assigned_date&quot;:&quot;2014-09-06 10:29:30.766&quot;,&quot;id&quot;:&quot;20004&quot;,&quot;executedBy&quot;:&quot;0&quot;,&quot;caseId&quot;:&quot;1023&quot;,&quot;priority&quot;:&quot;normal&quot;,&quot;actorId&quot;:&quot;102&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;Validate case&quot;,&quot;reached_state_date&quot;:&quot;2014-09-06 12:10:50.744&quot;,&quot;displayName&quot;:&quot;Validate case&quot;,&quot;dueDate&quot;:&quot;2014-09-06 12:11:30.775&quot;,&quot;last_update_date&quot;:&quot;2014-09-06 12:10:50.744&quot;  }]Update a humanTaskDescriptionFields that can be updated are assignedId and state. Specify only those fields that you want to change.  URL/API/bpm/humanTask/:taskId  MethodPUT  Request Payload```json{   “assigned_id” : “new_user_id”,   “state”: “new_state”}``  Success Response  Code: 200  Payload:{  &quot;state&quot;:&quot;skipped&quot;}ManualTaskDescriptionUse the manualTask resource to access process subtasks. For archived subtasks use archivedManualTask.IdentifierSimple, the ID of the object (a long value)Representation{  &quot;id&quot;: &quot;the task id (long)&quot;,  &quot;type&quot;: &quot;the task type (string): MANUAL_TASK&quot;,  &quot;name&quot;: &quot;the task technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable task name (string)&quot;,  &quot;description&quot;: &quot;the task description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable task description (string)&quot;,  &quot;state&quot;: &quot;the current state of the task (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current task&quot;,&quot;processId&quot;: &quot;the process definition id (long) of the case which define this task&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this task. The task has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the task in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this task, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this task is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current task was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;}#### MethodsThe methods used for this resource are:* POST - Add a new subtask* GET - Read or search a subtask* PUT - Execute the subtask#### Add a new subtaskUse a POST method to create a new subtask. A subtask is attached to a parent task and it needs to be immediately assigned to a user.Example: * **URL**`/API/bpm/manualTask``  * **Method**`POST`* **Request Payload**_Example_: Add a new subtask to the parent task with id 1. The subtask has displayName &quot;My subtask&quot; , is assigned to user 1, and contains other important information.  ```json  {&quot;parentTaskId&quot;:&quot;40001&quot;, &quot;state&quot;:&quot;ready&quot;, &quot;name&quot;:&quot;My subtask&quot;, &quot;description&quot;:&quot;This is my subtask&quot;, &quot;priority&quot;:&quot;above_normal&quot;, &quot;dueDate&quot;:&quot;2014-12-25 00:00:00.000&quot;, &quot;assigned_id&quot;:&quot;1&quot;   }  Success Response  Code: 200  Payload:{   &quot;displayDescription&quot;:&quot;This is my subtask&quot;,   &quot;executedBySubstitute&quot;:&quot;1&quot;,   &quot;processId&quot;:&quot;8367255255370237633&quot;,   &quot;parentCaseId&quot;:&quot;1&quot;,   &quot;state&quot;:&quot;ready&quot;,   &quot;rootContainerId&quot;:&quot;1&quot;,   &quot;type&quot;:&quot;MANUAL_TASK&quot;,   &quot;assigned_id&quot;:&quot;1&quot;,   &quot;assigned_date&quot;:&quot;2014-12-01 17:39:53.784&quot;,   &quot;id&quot;:&quot;40006&quot;,   &quot;executedBy&quot;:&quot;1&quot;,   &quot;caseId&quot;:&quot;1&quot;,   &quot;priority&quot;:&quot;above_normal&quot;,   &quot;actorId&quot;:&quot;1&quot;,   &quot;description&quot;:&quot;This is my subtask&quot;,   &quot;name&quot;:&quot;My subtask&quot;,   &quot;reached_state_date&quot;:&quot;2014-12-01 17:39:53.784&quot;,   &quot;rootCaseId&quot;:&quot;1&quot;,   &quot;displayName&quot;:&quot;My subtask&quot;,   &quot;parentTaskId&quot;:&quot;40001&quot;,   &quot;dueDate&quot;:&quot;2014-12-25 00:00:00.000&quot;,   &quot;last_update_date&quot;:&quot;2014-12-01 17:39:53.784&quot; }Execute a subtaskUse a PUT method to execute a subtask. Executing a subtask basically means changing its state to completed and providing an executedBy value.  URL/API/bpm/manualTask`  MethodPUT  Request Payload{   &quot;state&quot;:&quot;completed&quot;,   &quot;executedBy&quot;:&quot;1&quot; }Success Response  Code: 200  Payload:{   &quot;displayDescription&quot;:&quot;This is my subtask&quot;,   &quot;executedBySubstitute&quot;:&quot;1&quot;,   &quot;processId&quot;:&quot;8367255255370237633&quot;,   &quot;parentCaseId&quot;:&quot;1&quot;,   &quot;state&quot;:&quot;ready&quot;,   &quot;rootContainerId&quot;:&quot;1&quot;,   &quot;type&quot;:&quot;MANUAL_TASK&quot;,   &quot;assigned_id&quot;:&quot;1&quot;,   &quot;assigned_date&quot;:&quot;2014-12-01 17:39:53.784&quot;,   &quot;id&quot;:&quot;40006&quot;,   &quot;executedBy&quot;:&quot;1&quot;,   &quot;caseId&quot;:&quot;1&quot;,   &quot;priority&quot;:&quot;above_normal&quot;,   &quot;actorId&quot;:&quot;1&quot;,   &quot;description&quot;:&quot;This is my subtask&quot;,   &quot;name&quot;:&quot;My subtask&quot;,   &quot;reached_state_date&quot;:&quot;2014-12-01 17:39:53.784&quot;,   &quot;rootCaseId&quot;:&quot;1&quot;,   &quot;displayName&quot;:&quot;My subtask&quot;,   &quot;parentTaskId&quot;:&quot;40001&quot;,   &quot;dueDate&quot;:&quot;2014-12-25 00:00:00.000&quot;,   &quot;last_update_date&quot;:&quot;2014-12-01 17:39:53.784&quot; }Retrieve a subtaskUse a GET method to retrieve information about a subtask.  URL/API/bpm/manualTask/:manualTaskId`  MethodGET  Success Response  Code: 200  Search subtasksUse a GET method with filters and search terms to search for subtasks.  URL/API/bpm/manualTask  Method``  Data ParamsStandard search parameters are available.You can filter on:  assigned_id={user_id}: retrieve only the manual tasks assigned to the specified user. For example, retrieve the manual tasks assigned to user with id 1: /API/bpm/manualTask?p=0&amp;amp;c=10&amp;amp;f=assigned_id%3d1.  state=skipped | ready | completed | failed : retrieve only the manual tasks with the specified state. For example, retrieve the ready tasks: /API/bpm/manualTask?p=0&amp;amp;c=10&amp;amp;f=state%3dready.  caseId={case_id}: retrieve only the manual tasks created in the specified case. For example, retrieve the manual tasks for the case_id 2: /API/bpm/manualTask?p=0&amp;amp;c=10&amp;amp;f=caseId%3d2.  parentTaskId={parentTask_id}: retrieve only the manual tasks for a specific parentTask. For example, retrieve the manual tasks for the parentTask_id 40001: /API/bpm/manualTask?p=0&amp;amp;c=10&amp;amp;f=parentTaskId%3d40001.You can search on:  name: search all manual tasks with a name that starts with the search string. For example, search for all manual tasks that have a name that starts with MySubTask: /API/bpm/manualTask?p=0&amp;amp;c=10&amp;amp;s=MySubTask.Success ResponseAn array of manualTask objects  Code: 200  TaskDescriptionManage process tasksIdentifierThe ID of the task (a long value).Representation{   &quot;id&quot;: &quot;the task id (long)&quot;,  &quot;type&quot;: &quot;the task type (string)&quot;,  &quot;name&quot;: &quot;the task technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable task name (string)&quot;,  &quot;description&quot;: &quot;the task description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable task description (string)&quot;,  &quot;state&quot;: &quot;the current state of the task (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current task&quot;,&quot;processId&quot;: &quot;the process definition id (long) of the case which define this task&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this task. The task has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the task in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this task, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this task is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current task was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;}MethodsThe methods used for this resource are:  GET - Read a resource or search for a resource  PUT - Update a resourceResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  processId: the id of the process that is associated with the activity  caseId: the id of the case that is associated with the activity  rootCaseId: the root case that is associated with this activity’s case  parentCaseId: the parent case that is associated with this activity’s case  rootContainerId: the root process of the root case that is associated with this activity  executedBy: the user who executed the activity  executedBySubstitute: the user who executed the activity for the executedBy user (only in Effeciency, Performance and Enterprise editions)  actorId: the actor that can execute this activity  assigned_id: the user this activity is assigned to  parentTaskId: in the case of a subtask, the parent taskRead a task  URL/API/bpm/task/:taskId  MethodGET  Success Response  Code: 200  Payload:JSON representation of a task{   &quot;displayDescription&quot;:&quot;&quot;,   &quot;executedBySubstitute&quot;:&quot;0&quot;,   &quot;processId&quot;:&quot;9132099022957910959&quot;,   &quot;parentCaseId&quot;:&quot;5&quot;,   &quot;state&quot;:&quot;ready&quot;,   &quot;rootContainerId&quot;:&quot;5&quot;,   &quot;type&quot;:&quot;USER_TASK&quot;,   &quot;assigned_id&quot;:&quot;4&quot;,   &quot;assigned_date&quot;:&quot;2014-12-01 16:22:54.685&quot;,   &quot;id&quot;:&quot;10&quot;,   &quot;executedBy&quot;:&quot;0&quot;,   &quot;caseId&quot;:&quot;5&quot;,   &quot;priority&quot;:&quot;normal&quot;,   &quot;actorId&quot;:&quot;6&quot;,   &quot;description&quot;:&quot;&quot;,   &quot;name&quot;:&quot;Step1&quot;,   &quot;reached_state_date&quot;:&quot;2014-12-01 16:22:50.814&quot;,   &quot;rootCaseId&quot;:&quot;5&quot;,   &quot;displayName&quot;:&quot;Step1&quot;,   &quot;dueDate&quot;:&quot;2014-12-01 17:22:50.809&quot;,   &quot;last_update_date&quot;:&quot;2014-12-01 16:22:50.814&quot; }Update a task  URL/API/bpm/task/:taskId  MethodPUT  Request PayloadTask fields to update (forbidden fields are : caseId, processId, name, executedBy, type, id, reached_state_date, last_update_date){ &quot;state&quot;: &quot;completed&quot; }Success Response  Code:  Payload:Search tasks  URL/API/bpm/taskExample: Get ten first tasks for process id 8410739119827826184 order by state /API/bpm/task?c=10&amp;amp;p=0&amp;amp;f=processId=8410739119827826184&amp;amp;o=state  MethodGET  Data Params  Accepted sort values (o={value}) : caseId, processId, state, type, supervisor_id, last_update_date  Accepted filters (f={filter}=value) : caseId, processId, state, type, supervisor_id, last_update_date  d: extend resource response parameters of this resource are available.Success Response  Code: 200  Payload:JSON representation of an array of tasks[   { &quot;displayDescription&quot;:&quot;&quot;, &quot;executedBySubstitute&quot;:&quot;0&quot;, &quot;processId&quot;:&quot;8410739119827826184&quot;, &quot;parentCaseId&quot;:&quot;9&quot;, &quot;state&quot;:&quot;ready&quot;, &quot;rootContainerId&quot;:&quot;9&quot;, &quot;type&quot;:&quot;USER_TASK&quot;, &quot;assigned_id&quot;:&quot;&quot;, &quot;assigned_date&quot;:&quot;&quot;, &quot;id&quot;:&quot;18&quot;, &quot;executedBy&quot;:&quot;0&quot;, &quot;caseId&quot;:&quot;9&quot;, &quot;priority&quot;:&quot;normal&quot;, &quot;actorId&quot;:&quot;7&quot;, &quot;description&quot;:&quot;&quot;, &quot;name&quot;:&quot;Step1&quot;, &quot;reached_state_date&quot;:&quot;2014-12-01 16:48:31.189&quot;, &quot;rootCaseId&quot;:&quot;9&quot;, &quot;displayName&quot;:&quot;Step1&quot;, &quot;dueDate&quot;:&quot;2014-12-01 17:48:31.185&quot;, &quot;last_update_date&quot;:&quot;2014-12-01 16:48:31.189&quot;   }, { &quot;displayDescription&quot;:&quot;&quot;, &quot;executedBySubstitute&quot;:&quot;0&quot;, &quot;processId&quot;:&quot;8410739119827826184&quot;, &quot;parentCaseId&quot;:&quot;10&quot;, &quot;state&quot;:&quot;ready&quot;, &quot;rootContainerId&quot;:&quot;10&quot;, &quot;type&quot;:&quot;USER_TASK&quot;, &quot;assigned_id&quot;:&quot;&quot;, &quot;assigned_date&quot;:&quot;&quot;, &quot;id&quot;:&quot;20&quot;, &quot;executedBy&quot;:&quot;0&quot;, &quot;caseId&quot;:&quot;10&quot;, &quot;priority&quot;:&quot;normal&quot;, &quot;actorId&quot;:&quot;7&quot;, &quot;description&quot;:&quot;&quot;, &quot;name&quot;:&quot;Step1&quot;, &quot;reached_state_date&quot;:&quot;2014-12-01 16:48:37.666&quot;, &quot;rootCaseId&quot;:&quot;10&quot;, &quot;displayName&quot;:&quot;Step1&quot;, &quot;dueDate&quot;:&quot;2014-12-01 17:48:37.662&quot;, &quot;last_update_date&quot;:&quot;2014-12-01 16:48:37.666&quot;   } ]UserTaskDescriptionAn executable task that is performed by a user.IdentifierSimple, the ID of the object (a long value)Representation{  &quot;id&quot;: &quot;the task id (long)&quot;,  &quot;type&quot;: &quot;the task type (string): USER_TASK&quot;,  &quot;name&quot;: &quot;the task technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable task name (string)&quot;,  &quot;description&quot;: &quot;the task description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable task description (string)&quot;,  &quot;state&quot;: &quot;the current state of the task (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current task&quot;,&quot;processId&quot;: &quot;the process definition id (long) of the case which define this task&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this task. The task has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the task in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this task, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this task is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current task was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;} MethodsThe methods used for this resource are:  GET - Retrieve a userTask, search for userTask objects  POST - Execute a task with contract  PUT - Update a userTaskResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  processId: the id of the process that is associated with the activity  caseId: the id of the case that is associated with the activity  rootCaseId: the root case that is associated with this activity’s case  parentCaseId: the parent case that is associated with this activity’s case  rootContainerId: the root process of the root case that is associated with this activity  executedBy: the user who executed the activity  executedBySubstitute: the user who executed the activity for the executedBy user (only in Effeciency, Performance and Enterprise editions)  actorId: the actor that can execute this activity  assigned_id: the user this activity is assigned to  parentTaskId: in the case of a subtask, the parent taskActionsRetrieve a userTask  URL/API/bpm/userTask/:userTaskId  MethodGET  Success ResponseA userTask object  Code: 200  Payload:{  &quot;displayDescription&quot;:&quot;&quot;,  &quot;executedBySubstitute&quot;:&quot;0&quot;,  &quot;processId&quot;:&quot;5826139717723008213&quot;,  &quot;state&quot;:&quot;ready&quot;,  &quot;rootContainerId&quot;:&quot;1002&quot;,  &quot;type&quot;:&quot;USER_TASK&quot;,  &quot;assigned_id&quot;:&quot;&quot;,  &quot;assigned_date&quot;:&quot;&quot;,  &quot;id&quot;:&quot;20004&quot;,  &quot;executedBy&quot;:&quot;0&quot;,  &quot;caseId&quot;:&quot;1002&quot;,  &quot;priority&quot;:&quot;normal&quot;,  &quot;actorId&quot;:&quot;102&quot;,  &quot;description&quot;:&quot;&quot;,  &quot;name&quot;:&quot;Analyse case&quot;,  &quot;reached_state_date&quot;:&quot;2014-09-05 11:11:30.808&quot;,  &quot;displayName&quot;:&quot;Analyse case&quot;,  &quot;dueDate&quot;:&quot;2014-09-05 12:11:30.775&quot;,  &quot;last_update_date&quot;:&quot;2014-09-05 11:11:30.808&quot;}Update a userTaskFields that can be updated are assignedId and state. The only value that can be set for the state is “skipped”. You only need to specify the fields that are to be updated.  URL/API/bpm/userTask/:userTaskId  MethodPUT  Request Payload{  &quot;assigned_id&quot; : &quot;id of new user&quot;,  &quot;state&quot;:&quot;skipped&quot;}Success Response  Code: 200  Retrieve the task contractTask contract elements can be retrived client side.  URL/API/bpm/userTask/:userTaskId/contract  MethodGET  Success Response  Code: 200  Payload:{&quot;constraints&quot;:[  {&quot;name&quot;:&quot;ticket_comment&quot;,  &quot;expression&quot;:&quot;ticket_comment!=null &amp;amp;&amp;amp; !ticket_comment.toString().isEmpty()&quot;,  &quot;explanation&quot;:&quot;input ticket_comment is mandatory&quot;,  &quot;inputNames&quot;:[  &quot;ticket_comment&quot;],  &quot;constraintType&quot;:&quot;MANDATORY&quot;}  ],  &quot;inputs&quot;:[  { &quot;description&quot;:null,   &quot;name&quot;:&quot;ticket_comment&quot;,   &quot;multiple&quot;:false,   &quot;type&quot;:&quot;TEXT&quot;   &quot;inputs&quot;:[]}  ]}Execute a task with contractIn order to execute a task, the task contract values have to be provided.  URL/API/bpm/userTask/:userTaskId/execution  MethodPOST  Request PayloadA JSON object matching task contract.Execute a task providing correct contract values.{&quot;ticket_comment&quot;:&quot;This is a comment&quot;}Success Response  Code: 204Error Response  Code: 400 contract violation explanation  Response Payload{&quot;exception&quot;:&quot;class org.bonitasoft.engine.bpm.contract.ContractViolationException&quot;,  &quot;message&quot;:&quot;USERNAME=walter.bates | Contract is not valid: &quot;,  &quot;explanations&quot;:[  &quot;Expected input [ticket_comment] is missing&quot;  ]}Retrieve the userTask context  URL/API/bpm/userTask/:userTaskId/context  MethodGET  Success ResponseA context object  Code: 200  Payload:{&quot;myBusinessData_ref&quot;:{  &quot;name&quot;:&quot;myBusinessData&quot;,&quot;type&quot;:&quot;com.company.model.BusinessObject1&quot;,&quot;link&quot;:&quot;API/bdm/businessData/com.company.model.BusinessObject1/2&quot;,&quot;storageId&quot;:2,&quot;storageId_string&quot;:&quot;2&quot;  },  &quot;myDocument_ref&quot;:{  &quot;id&quot;:1,&quot;processInstanceId&quot;:3,&quot;name&quot;:&quot;myDocument&quot;,&quot;author&quot;:104,&quot;creationDate&quot;:1434723950847,&quot;fileName&quot;:&quot;TestCommunity-1.0.bos&quot;,&quot;contentMimeType&quot;:null,&quot;contentStorageId&quot;:&quot;1&quot;,&quot;url&quot;:&quot;documentDownload?fileName=TestCommunity-1.0.bos&amp;amp;contentStorageId=1&quot;,&quot;description&quot;:&quot;&quot;,&quot;version&quot;:&quot;1&quot;,&quot;index&quot;:-1,&quot;contentFileName&quot;:&quot;TestCommunity-1.0.bos&quot;  }}ArchivedHumanTaskDescriptionAn Archived Human task is a User task or Manual task that has been archived.IdentifierSimple, the ID of the object (a long value)Representation{   &quot;id&quot;: &quot;the activity id (long)&quot;,  &quot;type&quot;: &quot;the activity type (string): USER_TASK | MANUAL_TASK&quot;,  &quot;name&quot;: &quot;the activity technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable activity name (string)&quot;,  &quot;description&quot;: &quot;the activity description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable activity description (string)&quot;,  &quot;state&quot;: &quot;the current state of the activity (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this activity reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this activity was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this activity is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current activity&quot;,  &quot;sourceObjectId&quot;:&quot;id (long) of the original humanTask before archiving&quot;,  &quot;archivedDate&quot;: &quot;the date ((&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;)) when this humanTask was archived, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,&quot;processId&quot;: &quot;the process definition id (long) of the case which define this activity&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this activity. The activity has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the activity in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this activity, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this activity is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current activity was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;}MethodsThe methods used for this resource are:  GET - Read a resourceActionsRetrieve an archivedHumanTask  URL/API/bpm/archivedHumanTask/:archivedHumanTaskId  MethodGET  Success ResponseThe JSON representation of an archivedHumanTask  Code: 200  Payload:{  &quot;displayDescription&quot;:&quot;&quot;,  &quot;executedBySubstitute&quot;:&quot;0&quot;,  &quot;processId&quot;:&quot;5826139717723008213&quot;,  &quot;state&quot;:&quot;skipped&quot;,  &quot;rootContainerId&quot;:&quot;1002&quot;,  &quot;type&quot;:&quot;USER_TASK&quot;,  &quot;assigned_id&quot;:&quot;2&quot;,  &quot;id&quot;:&quot;240002&quot;,  &quot;executedBy&quot;:&quot;0&quot;,  &quot;sourceObjectId&quot;:&quot;20004&quot;,  &quot;caseId&quot;:&quot;1002&quot;,  &quot;priority&quot;:&quot;normal&quot;,  &quot;actorId&quot;:&quot;102&quot;,  &quot;description&quot;:&quot;&quot;,  &quot;name&quot;:&quot;Analyse case&quot;,  &quot;reached_state_date&quot;:&quot;2014-09-09 17:21:51.946&quot;,  &quot;displayName&quot;:&quot;Analyse case&quot;,  &quot;archivedDate&quot;:&quot;2014-09-09 17:21:51.986&quot;,  &quot;dueDate&quot;:&quot;2014-09-05 12:11:30.775&quot;,  &quot;last_update_date&quot;:&quot;2014-09-09 17:21:51.946&quot;}Search for a archivedHumanTaskRetrieve archivedHumanTask objects that match the specified filters.  URL/API/bpm/archivedHumanTaskExample: Get the human tasks assigned to the user with id 2. /API/bpm/archivedHumanTask?p=0&amp;amp;c=10&amp;amp;f=assigned_id%3d2  MethodGET  Data ParamsStandard search parameters are available.You can filter on:  assigned_id={user_id}: retrieve only the human tasks assigned to the specified ID. For example, retrieve the human tasks assigned to user with id 2: /API/bpm/archivedHumanTask?p=0&amp;amp;c=10&amp;amp;f=assigned_id%3d2  state=: retrieve only the archived user tasks with the specified state. For example, retrieve the skipped tasks: /API/bpm/archivedHumanTask?p=0&amp;amp;c=10&amp;amp;f=state=skipped  name=: retrieve only the human tasks with the specified name. For example, retrieve the human tasks with the name “Analyse Case”: /API/bpm/archivedHumanTask?p=0&amp;amp;c=10&amp;amp;f=name=Analyse Case  displayName=: retrieve only the archived user tasks with the specified displayName. For example, retrieve the human tasks with the displayName “Analyse Case”: /API/bpm/archivedHumanTask?p=0&amp;amp;c=10&amp;amp;f=displayName=Analyse CaseSuccess ResponseAn array of archivedHumanTask objects in JSON  Code: 200  Payload:[  {&quot;displayDescription&quot;:&quot;Case analysis&quot;,&quot;executedBySubstitute&quot;:&quot;0&quot;,&quot;processId&quot;:&quot;5826139717723008213&quot;,&quot;state&quot;:&quot;failed&quot;,&quot;rootContainerId&quot;:&quot;1002&quot;,&quot;type&quot;:&quot;USER_TASK&quot;,&quot;assigned_id&quot;:&quot;2&quot;,&quot;assigned_date&quot;:&quot;2014-09-05 09:19:30.150&quot;,&quot;id&quot;:&quot;20004&quot;,&quot;executedBy&quot;:&quot;0&quot;,&quot;caseId&quot;:&quot;1002&quot;,&quot;priority&quot;:&quot;normal&quot;,&quot;actorId&quot;:&quot;102&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;Analyse case&quot;,&quot;reached_state_date&quot;:&quot;2014-09-05 11:11:30.808&quot;,&quot;displayName&quot;:&quot;Analyse case&quot;,&quot;dueDate&quot;:&quot;2014-09-05 12:11:30.775&quot;,&quot;last_update_date&quot;:&quot;2014-09-05 11:11:30.808&quot;  },  {&quot;displayDescription&quot;:&quot;Validate case&quot;,&quot;executedBySubstitute&quot;:&quot;0&quot;,&quot;processId&quot;:&quot;5826139717723007999&quot;,&quot;state&quot;:&quot;skipped&quot;,&quot;rootContainerId&quot;:&quot;1010&quot;,&quot;type&quot;:&quot;USER_TASK&quot;,&quot;assigned_id&quot;:&quot;2&quot;,&quot;assigned_date&quot;:&quot;2014-09-06 10:29:30.766&quot;,&quot;id&quot;:&quot;20004&quot;,&quot;executedBy&quot;:&quot;0&quot;,&quot;caseId&quot;:&quot;1023&quot;,&quot;priority&quot;:&quot;normal&quot;,&quot;actorId&quot;:&quot;102&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;Validate case&quot;,&quot;reached_state_date&quot;:&quot;2014-09-06 12:10:50.744&quot;,&quot;displayName&quot;:&quot;Validate case&quot;,&quot;dueDate&quot;:&quot;2014-09-06 12:11:30.775&quot;,&quot;last_update_date&quot;:&quot;2014-09-06 12:10:50.744&quot;  }]ArchivedManualTaskDescriptionUse the archivedManualTask resource to access archived process subtasks.IdentifierSimple, the ID of the object (a long value)Representation{   &quot;id&quot;: &quot;the archived manual task id (long)&quot;,  &quot;type&quot;: &quot;the archived manual task type (string): MANUAL_TASK&quot;,  &quot;name&quot;: &quot;the archived manual task technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable archived manual task name (string)&quot;,  &quot;description&quot;: &quot;the archived manual task description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable archived manual task description (string)&quot;,  &quot;state&quot;: &quot;the current state of the archived manual task (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this archived manual task reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this archived manual task was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this archived manual task is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current archived manual task&quot;,  &quot;sourceObjectId&quot;:&quot;id (long) of the original manualTask before archiving&quot;,   &quot;archivedDate&quot;: &quot;the date ((&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;)) when this subtask was archived, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,&quot;processId&quot;: &quot;the process definition id (long) of the case which define this archived manual task&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this archived manual task. The archived manual task has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the archived manual task in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this archived manual task, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this archived manual task is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current archived manual task was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot; }MethodsThe methods used for this resource are:  GET - Read or search an archived subtaskRetrieve a subtaskUse a GET method to retrieve information about a subtask.  URL/API/bpm/archivedManualTask/:archivedHumanTaskId  MethodGET  Success Response  Code: 200  Payload:{  &quot;displayDescription&quot;:&quot;this is a test&quot;,  &quot;executedBySubstitute&quot;:&quot;1&quot;,  &quot;processId&quot;:&quot;8367255255370237633&quot;,  &quot;parentCaseId&quot;:&quot;1&quot;,  &quot;state&quot;:&quot;completed&quot;,  &quot;rootContainerId&quot;:&quot;1&quot;,  &quot;type&quot;:&quot;MANUAL_TASK&quot;,  &quot;assigned_id&quot;:&quot;1&quot;,  &quot;id&quot;:&quot;160007&quot;,  &quot;sourceObjectId&quot;:&quot;40003&quot;,  &quot;executedBy&quot;:&quot;1&quot;,  &quot;caseId&quot;:&quot;1&quot;,  &quot;priority&quot;:&quot;highest&quot;,  &quot;actorId&quot;:&quot;1&quot;,  &quot;description&quot;:&quot;this is a test&quot;,  &quot;name&quot;:&quot;myTest&quot;,  &quot;reached_state_date&quot;:&quot;2014-12-01 17:20:47.200&quot;,  &quot;rootCaseId&quot;:&quot;1&quot;,  &quot;archivedDate&quot;:&quot;2014-12-01 17:20:47.217&quot;,  &quot;displayName&quot;:&quot;myTest&quot;,  &quot;parentTaskId&quot;:&quot;40001&quot;,  &quot;dueDate&quot;:&quot;2014-12-17 00:00:00.000&quot;,  &quot;last_update_date&quot;:&quot;2014-12-01 17:20:47.200&quot;}Search subtasksUse a GET method with filters and search terms to search for subtasks.  URL/API/bpm/archivedManualTask  MethodGET  Data ParamsStandard search parameters are available.You can filter on:  assigned_id={user_id}: retrieve only the manual tasks assigned to the specified user. For example, retrieve the manual tasks assigned to user with id 1: /API/bpm/archivedManualTask?p=0&amp;amp;c=10&amp;amp;f=assigned_id%3d10  state=skipped  completed  failed : retrieve only the manual tasks with the specified state. For example, retrieve the ready tasks: /API/bpm/archivedManualTask?p=0&amp;amp;c=10&amp;amp;f=state%3dready  caseId={case_id}: retrieve only the manual tasks created in the specified case. For example, retrieve the manual tasks for the case_id 2: /API/bpm/archivedManualTask?p=0&amp;amp;c=10&amp;amp;f=caseId%3d2  parentTaskId={parentTask_id}: retrieve only the manual tasks for a specific parentTask_id. For example, retrieve the manual tasks for the parentTask_id 40001: /API/bpm/archivedManualTask?p=0&amp;amp;c=10&amp;amp;f=parentTaskId%3d40001You can search on:  name: search all manual tasks with a name that starts with the search string. For example, search for all manual tasks that have a name that starts with MySubTask: /API/bpm/archivedManualTask?p=0&amp;amp;c=10&amp;amp;s=MySubTaskSuccess ResponseAn array of manualTask objects  Code: 200  ArchivedTaskDescriptionGet informations about archived tasksIdentifierThe ID of the archived task (a long value).Representation{   &quot;id&quot;: &quot;the archived task id (long)&quot;,  &quot;type&quot;: &quot;the archived task type (string)&quot;,  &quot;name&quot;: &quot;the archived task technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable archived task name (string)&quot;,  &quot;description&quot;: &quot;the archived task description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable archived task description (string)&quot;,  &quot;state&quot;: &quot;the current state of the archived task (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this archived task reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this archived task was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this archived task is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current archived task&quot;,  &quot;sourceObjectId&quot;: &quot;the original id of the task before it was archived&quot;,  &quot;archivedDate&quot;: &quot;the date ((&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;)) when this task was archived, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,&quot;processId&quot;: &quot;the process definition id (long) of the case which define this archived task&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this archived task. The archived task has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the archived task in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this archived task, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this archived task is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current archived task was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;}MethodsThe methods used for this resource are:  GET - Read a resource or search for a resourceResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  processId: the id of the process that is associated with the activity  caseId: the id of the case that is associated with the activity  rootCaseId: the root case that is associated with this activity’s case  parentCaseId: the parent case that is associated with this activity’s case  rootContainerId: the root process of the root case that is associated with this activity  executedBy: the user who executed the activity  executedBySubstitute: the user who executed the activity for the executedBy user (only in Effeciency, Performance and Enterprise editions)  actorId: the actor that can execute this activity  assigned_id: the user this activity is assigned to  parentTaskId: in the case of a subtask, the parent taskRead an archived task  URL/API/bpm/archivedTask/:taskId  MethodGET  Success ResponseJSON representation of an archived task  Code: 200  Payload:{  &quot;displayDescription&quot;:&quot;&quot;,  &quot;executedBySubstitute&quot;:&quot;4&quot;,  &quot;processId&quot;:&quot;9132099022957910959&quot;,  &quot;parentCaseId&quot;:&quot;5&quot;,  &quot;state&quot;:&quot;completed&quot;,  &quot;rootContainerId&quot;:&quot;5&quot;,  &quot;type&quot;:&quot;USER_TASK&quot;,  &quot;assigned_id&quot;:&quot;4&quot;,  &quot;id&quot;:&quot;9&quot;,  &quot;sourceObjectId&quot;:&quot;10&quot;,  &quot;executedBy&quot;:&quot;4&quot;,  &quot;caseId&quot;:&quot;5&quot;,  &quot;priority&quot;:&quot;normal&quot;,  &quot;actorId&quot;:&quot;6&quot;,  &quot;description&quot;:&quot;&quot;,  &quot;name&quot;:&quot;Step1&quot;,  &quot;reached_state_date&quot;:&quot;2014-12-01 16:24:32.457&quot;,  &quot;rootCaseId&quot;:&quot;5&quot;,  &quot;archivedDate&quot;:&quot;2014-12-01 16:24:32.460&quot;,  &quot;displayName&quot;:&quot;Step1&quot;,  &quot;dueDate&quot;:&quot;2014-12-01 17:22:50.809&quot;,  &quot;last_update_date&quot;:&quot;2014-12-01 16:24:32.457&quot;}Search archived tasks  URL/API/bpm/archivedTaskExample: Search ten first archived task of process 8410739119827826184 order by name: /API/bpm/archivedTask?c=10&amp;amp;p=0&amp;amp;f=processId=8410739119827826184&amp;amp;o=name  MethodGET  Data ParamsStandard search parameters are available.  Accepted sort values o={value} : caseId, name, displayName, processId, state, type, archivedDate, reached_state_date, assigned_id  Accepted filters f={filter}=value : caseId, name, displayName, processId, state, type, archivedDate, reached_state_date, assigned_id, isTerminal  d: extend resource response parameters of this resource are available.Success ResponseJSON representation of an array of archived tasks  Code: 200  Payload:[  {&quot;displayDescription&quot;:&quot;&quot;,&quot;executedBySubstitute&quot;:&quot;4&quot;,&quot;processId&quot;:&quot;8410739119827826184&quot;,&quot;parentCaseId&quot;:&quot;6&quot;,&quot;state&quot;:&quot;completed&quot;,&quot;rootContainerId&quot;:&quot;6&quot;,&quot;type&quot;:&quot;USER_TASK&quot;,&quot;assigned_id&quot;:&quot;4&quot;,&quot;id&quot;:&quot;12&quot;,&quot;sourceObjectId&quot;:&quot;12&quot;,&quot;executedBy&quot;:&quot;4&quot;,&quot;caseId&quot;:&quot;6&quot;,&quot;priority&quot;:&quot;normal&quot;,&quot;actorId&quot;:&quot;7&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;Step1&quot;,&quot;reached_state_date&quot;:&quot;2014-12-01 16:31:46.961&quot;,&quot;rootCaseId&quot;:&quot;6&quot;,&quot;archivedDate&quot;:&quot;2014-12-01 16:31:46.965&quot;,&quot;displayName&quot;:&quot;Step1&quot;,&quot;dueDate&quot;:&quot;2014-12-01 17:31:42.563&quot;,&quot;last_update_date&quot;:&quot;2014-12-01 16:31:46.961&quot;  },  {&quot;displayDescription&quot;:&quot;&quot;,&quot;executedBySubstitute&quot;:&quot;4&quot;,&quot;processId&quot;:&quot;8410739119827826184&quot;,&quot;parentCaseId&quot;:&quot;7&quot;,&quot;state&quot;:&quot;completed&quot;,&quot;rootContainerId&quot;:&quot;7&quot;,&quot;type&quot;:&quot;USER_TASK&quot;,&quot;assigned_id&quot;:&quot;4&quot;,&quot;id&quot;:&quot;15&quot;,&quot;sourceObjectId&quot;:&quot;14&quot;,&quot;executedBy&quot;:&quot;4&quot;,&quot;caseId&quot;:&quot;7&quot;,&quot;priority&quot;:&quot;normal&quot;,&quot;actorId&quot;:&quot;7&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;Step1&quot;,&quot;reached_state_date&quot;:&quot;2014-12-01 16:32:13.232&quot;,&quot;rootCaseId&quot;:&quot;7&quot;,&quot;archivedDate&quot;:&quot;2014-12-01 16:32:13.235&quot;,&quot;displayName&quot;:&quot;Step1&quot;,&quot;dueDate&quot;:&quot;2014-12-01 17:32:07.918&quot;,&quot;last_update_date&quot;:&quot;2014-12-01 16:32:13.232&quot;  }]ArchivedUserTaskDescriptionAn executable task that has been performed by a user or skipped and is archived.IdentifierSimple, the ID of the object (a long value)Representation{  &quot;id&quot;: &quot;the user task id (long)&quot;,  &quot;type&quot;: &quot;the user task type (string): USER_TASK&quot;,  &quot;name&quot;: &quot;the user task technical name (string)&quot;,  &quot;displayName&quot;: &quot;the human readable user task name (string)&quot;,  &quot;description&quot;: &quot;the user task description (string)&quot;,  &quot;displayDescription&quot;: &quot;the human readable user task description (string)&quot;,  &quot;state&quot;: &quot;the current state of the user task (string, possible values: ready, completed, failed)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this user task reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this user task was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this user task is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current user task&quot;,  &quot;archivedDate&quot;:&quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this task was archived, for example &#39;2014-10-17 16:05:42.626&#39;&quot;, &quot;processId&quot;: &quot;the process definition id (long) of the case which define this user task&quot;,  &quot;parentCaseId&quot;: &quot;the immediate containing case id (long, a.k.a process instance id)&quot;,  &quot;rootCaseId&quot;: &quot;the top/root case id (long, a.k.a process instance id). In the case of an event sub process, parentCaseId will the id of the case called while rootCaseId will be the one from the caller case&quot;,  &quot;rootContainerId&quot;: &quot;same as rootCaseId&quot;,&quot;executedBy&quot;: &quot;the id (long) of the user who performed this user task. The user task has to be a human task otherwise its value will be 0&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who did actually performed the user task in the case of has been done in the name of someone else. Value is 0 otherwise&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this user task, null otherwise&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this user task is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current user task was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;} MethodsThe methods used for this resource are:  GET - Retrieve an archivedUserTask, search for archivedUserTask objectsResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  processId: the id of the process that is associated with the activity  caseId: the id of the case that is associated with the activity  rootCaseId: the root case that is associated with this activity’s case  parentCaseId: the parent case that is associated with this activity’s case  rootContainerId: the root process of the root case that is associated with this activity  executedBy: the user who executed the activity  executedBySubstitute: the user who executed the activity for the executedBy user (only in Effeciency, Performance and Enterprise editions)  actorId: the actor that can execute this activity  assigned_id: the user this activity is assigned to  parentTaskId: in the case of a subtask, the parent taskActionsRetrieve an archivedUserTask  URLAPI/bpm/archivedUserTask/:id  MethodGET  Success ResponseAn archivedUserTask object  Code: 200  Payload:{  &quot;displayDescription&quot;:&quot;&quot;,  &quot;executedBySubstitute&quot;:&quot;0&quot;,  &quot;processId&quot;:&quot;5826139717723008213&quot;,  &quot;state&quot;:&quot;skipped&quot;,  &quot;rootContainerId&quot;:&quot;1002&quot;,  &quot;type&quot;:&quot;USER_TASK&quot;,  &quot;assigned_id&quot;:&quot;2&quot;,  &quot;id&quot;:&quot;240002&quot;,  &quot;executedBy&quot;:&quot;0&quot;,  &quot;caseId&quot;:&quot;1002&quot;,  &quot;priority&quot;:&quot;normal&quot;,  &quot;actorId&quot;:&quot;102&quot;,  &quot;description&quot;:&quot;&quot;,  &quot;name&quot;:&quot;Analyse case&quot;,  &quot;reached_state_date&quot;:&quot;2014-09-09 17:21:51.946&quot;,  &quot;displayName&quot;:&quot;Analyse case&quot;,  &quot;archivedDate&quot;:&quot;2014-09-09 17:21:51.986&quot;,  &quot;dueDate&quot;:&quot;2014-09-05 12:11:30.775&quot;,  &quot;last_update_date&quot;:&quot;2014-09-09 17:21:51.946&quot;}Search for a archivedUserTaskRetrieve archivedHumanTask objects that match the specified filters.  URL/API/bpm/archivedUserTaskExample: Get the user tasks assigned to the user with id 2:/API/bpm/archivedUserTask?p=0&amp;amp;c=10&amp;amp;f=assigned_id%3d2  MethodGET  Data ParamsStandard search parameters are available.You can filter on:  assigned_id={user_id}: retrieve only the user tasks assigned to the specified ID. For example, retrieve the user tasks assigned to user with id 2: /API/bpm/archivedUserTask?p=0&amp;amp;c=10&amp;amp;f=assigned_id%3d2  state=: retrieve only the archived user tasks with the specified state. For example, retrieve the skipped tasks: /API/bpm/archivedUserTask?p=0&amp;amp;c=10&amp;amp;f=state=skipped  name=: retrieve only the user tasks with the specified name. For example, retrieve the user tasks with the name “Analyse Case”: /API/bpm/archivedUserTask?p=0&amp;amp;c=10&amp;amp;f=name=Analyse Case  displayName=: retrieve only the archived user tasks with the specified displayName. For example, retrieve the user tasks with the displayName “Analyse Case”: /API/bpm/archivedUserTask?p=0&amp;amp;c=10&amp;amp;f=displayName=Analyse Cased: extend resource response parameters of this resource are available.Success ResponseAn array of archivedUserTask objects  Code: 200  Payload:[  {&quot;displayDescription&quot;:&quot;Case analysis&quot;,&quot;executedBySubstitute&quot;:&quot;0&quot;,&quot;processId&quot;:&quot;5826139717723008213&quot;,&quot;state&quot;:&quot;failed&quot;,&quot;rootContainerId&quot;:&quot;1002&quot;,&quot;type&quot;:&quot;USER_TASK&quot;,&quot;assigned_id&quot;:&quot;2&quot;,&quot;assigned_date&quot;:&quot;2014-09-05 09:19:30.150&quot;,&quot;id&quot;:&quot;20004&quot;,&quot;executedBy&quot;:&quot;0&quot;,&quot;caseId&quot;:&quot;1002&quot;,&quot;priority&quot;:&quot;normal&quot;,&quot;actorId&quot;:&quot;102&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;Analyse case&quot;,&quot;reached_state_date&quot;:&quot;2014-09-05 11:11:30.808&quot;,&quot;displayName&quot;:&quot;Analyse case&quot;,&quot;dueDate&quot;:&quot;2014-09-05 12:11:30.775&quot;,&quot;last_update_date&quot;:&quot;2014-09-05 11:11:30.808&quot;  }, {&quot;displayDescription&quot;:&quot;Validate case&quot;,&quot;executedBySubstitute&quot;:&quot;0&quot;,&quot;processId&quot;:&quot;5826139717723007999&quot;,&quot;state&quot;:&quot;skipped&quot;,&quot;rootContainerId&quot;:&quot;1010&quot;,&quot;type&quot;:&quot;USER_TASK&quot;,&quot;assigned_id&quot;:&quot;2&quot;,&quot;assigned_date&quot;:&quot;2014-09-06 10:29:30.766&quot;,&quot;id&quot;:&quot;20004&quot;,&quot;executedBy&quot;:&quot;0&quot;,&quot;caseId&quot;:&quot;1023&quot;,&quot;priority&quot;:&quot;normal&quot;,&quot;actorId&quot;:&quot;102&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;Validate case&quot;,&quot;reached_state_date&quot;:&quot;2014-09-06 12:10:50.744&quot;,&quot;displayName&quot;:&quot;Validate case&quot;,&quot;dueDate&quot;:&quot;2014-09-06 12:11:30.775&quot;,&quot;last_update_date&quot;:&quot;2014-09-06 12:10:50.744&quot;  }]DataActivityVariableDescriptionThis resource enables you to retrieve the value of a specific variable name for a specific case (or process instance). Only persistent variables are concerned by this resource, not transient variables.IdentifierThe ID of the activity variable (a long value).Representation{   &quot;tenantId&quot;: &quot;The ID of the tenant where the current user is logged in (technical information)&quot;,  &quot;tenantId_string&quot;: &quot;number (since 7.0.1)&quot;,  &quot;id&quot;:_The identifier of the variable&quot;,  &quot;id_string&quot;:&quot;number (since 7.0.1)&quot;,  &quot;name&quot;: &quot;The name of the activity variable&quot;,  &quot;description&quot;: &quot;The description of the variable, if any&quot;,  &quot;transientData&quot;: &quot;FALSE&quot;,  //Always false (boolean)  &quot;className&quot;: &quot;The fully qualified class name of the variable type&quot;,  &quot;containerId&quot;: &quot;The ID of the activity containing this variable (same as the one passed as parameter) if the variable is defined at activity level, or ID of the process instance if the variable is defined on the process&quot;,  &quot;containerId_string&quot;: &quot;number&quot; (since 7.0.1)_,  &quot;containerType&quot;: &quot;ACTIVITY_INSTANCE&quot; | &quot;PROCESS_INSTANCE&quot; _depending on whether the variable is defined at activity or process level.&quot;,  &quot;value&quot;: &quot;the value of this variable. The format of the value depends on the type of the variable&quot; }The string representation added in 7.0.1 for Long attributes is a workaround for the JavaScript integer spectrum issue.MethodsThe methods available for this resource are:  GET - Read an existing non-finished activity instance variableRetrieving a activity instance variable  URL/API/bpm/activityVariable/:activityId/:variableName  activity_id: the identifier of the activity from which to retrieve the variable  variable_name: the name of the variable to retrieveExample: API/bpm/activityVariable/20004/RequestValidationDataMethodGET  Success ResponseA JSON representation of the retrieved activity variable  Code: 200  Payload:{  &quot;tenantId&quot;:0,  &quot;tenantId_string&quot;:&quot;0&quot;,  &quot;id&quot;:5010,  &quot;id_string&quot;:&quot;5010&quot;,  &quot;name&quot;:&quot;RequestValidationData&quot;,  &quot;description&quot;:null,  &quot;transientData&quot;:false,  &quot;className&quot;:&quot;java.lang.String&quot;,  &quot;containerId&quot;:20004,  &quot;containerId_string&quot;:&quot;20004&quot;,  &quot;containerType&quot;:&quot;ACTIVITY_INSTANCE&quot;,  &quot;value&quot;:&quot;Confirmed&quot;}CaseVariableDescriptionSearch, count, find, or update case variable values. A case is an instance of a process.IdentifierThe ID of the case variable (a long value).Representation{  &quot;description&quot;:&quot;Detailed description of the case variable, as set in the definition at design-time&quot;,  &quot;name&quot;:&quot;name of the variable in the case&quot;,  &quot;value&quot;:&quot;the current value of the case variable&quot;,  &quot;case_id&quot;:&quot;ID of the case this variable belongs to&quot;,  &quot;type&quot;:_the Java type of the variable&quot;}MethodsThe methods used for this resource are:  GET - Search for case variables from its case ID, or find a single case variable from case ID and variable name  PUT - Update a case variable valueGet a case variable  URL/API/bpm/caseVariable/:caseId/:variableName  MethodGET  Success ResponseA case variable representation  Code: 200  Payload:{				  &quot;description&quot;:&quot;&quot;,  &quot;name&quot;:&quot;myInvoiceAmount&quot;,  &quot;value&quot;:&quot;14.2&quot;,  &quot;case_id&quot;:&quot;1&quot;,  &quot;type&quot;:&quot;java.lang.Float&quot;}Update a case variableWarning: only following types are supported for javaTypeclassname: java.lang.String, java.lang.Integer, java.lang.Double, java.lang.Long, java.lang.Boolean, java.util.Date  URL/API/bpm/caseVariable/:caseId/:variableName  MethodPUT  Request Payload{  type: &quot;javaTypeclassname&quot;,  value: &quot;newValue&quot;}Success Response  Code: 200  Search for a list of case variables  URL/API/bpm/caseVariableExample: /API/bpm/caseVariable?p=0&amp;amp;c=10&amp;amp;f=case_id%3d11754  MethodGET  Data ParamsStandard search parameters are available.f = case_id%3d[caseId] to indicate that you want to add a filter on ‘case_id’ with value [caseId] (%3d is the URL-encoded ‘=’ (equals) sign)  Success ResponseA representation of a list of case variables  Code: 200  Payload:[  {&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;myInvoiceAmount&quot;,&quot;value&quot;:&quot;14.2&quot;,&quot;case_id&quot;:&quot;11754&quot;,&quot;type&quot;:&quot;java.lang.Float&quot;  },   {&quot;description&quot;:&quot;invoice reference&quot;,&quot;name&quot;:&quot;myInvoiceReference&quot;,&quot;value&quot;:&quot;1FFL54184KOL&quot;,&quot;case_id&quot;:&quot;11754&quot;,&quot;type&quot;:&quot;java.lang.Long&quot;  }]DocumentDescriptionUse the document resource to access a document in an active case. Caution: This resource is deprecated and may be removed in a future release. Instead, use caseDocument or archivedCaseDocument.CaseDocumentDescriptionUse the case document resource to access a document in an active case. For archived cases and previous document versions use archivedCaseDocument.  author in the payload is deprecated: use submittedByIdentifierThe ID of the document (a long value).Representation{  &quot;id&quot;:&quot;documentId&quot;,  &quot;creationDate&quot;:&quot;date and time&quot;,  &quot;author&quot;:&quot;submittorUserId&quot;,  &quot;index&quot;:&quot;index in a list of documents, or -1 for a single document&quot;,  &quot;contentMimetype&quot;:&quot;MIMEtype&quot;,  &quot;caseId&quot;:&quot;caseId&quot;,   &quot;contentStorageId&quot;:&quot;storageId&quot;,   &quot;isInternal&quot;:&quot;true | false&quot;,   &quot;description&quot;:&quot; description&quot;,   &quot;name&quot;:&quot;name&quot;,   &quot;fileName&quot;:&quot;filename&quot;,   &quot;submittedBy&quot;:&quot;submittorUserId&quot;,   &quot;url&quot;:&quot;urlForDownload&quot;,   &quot;version&quot;:&quot;version&quot; }MethodsThe methods used for this resource are:  POST - Create a resource  GET - Read a resource  PUT - Update a resource  DELETE - Remove a resourceAdd a document to a caseUse a POST method to add a document to a case. You can upload a document from the local file system or by URL. Specify the case id and the document name in the payload. The document description is optional: if you do not specify a description, the description in the response is empty. The response contains a version, which is managed automatically.You cannot currently retrieve a specific version of a document, only the most recent version. To retrieve earlier versions of a caseDocument, use the archivedCaseDocument resource.  URL/API/bpm/caseDocument  MethodPOST  Request PayloadExample 1: Upload doc.jpg from the tenant temporary upload folder to case 1 with the display name “Doc 1” and renaming the file into “document_1.jpg”:{  &quot;caseId&quot;: &quot;1&quot;,  &quot;file&quot;: &quot;doc.jpg&quot;,  &quot;name&quot;: &quot;Doc 1&quot;,  &quot;fileName&quot;: &quot;document_1.jpg&quot;,  &quot;description&quot;: &quot;draft&quot;}Example 2: Upload train_receipt.png from my cloud drive to case 1 with the name “Train receipt”:{  &quot;caseId&quot; : &quot;1&quot;,  &quot;url&quot; : &quot;http://cloud.storage.com/sites/chris/expenses/july_2014/train_receipt.png&quot;,  &quot;name&quot; : &quot;Train receipt&quot;}Success Response  Code: 200  Payload:Example 1:In this example, isInternal is set to true because the the document object contains the content directly.{  &quot;id&quot;:&quot;3&quot;,  &quot;creationDate&quot;:&quot;2014-10-09 16:45:36.658&quot;,  &quot;author&quot;:&quot;1&quot;,  &quot;index&quot;:&quot;-1&quot;,  &quot;contentMimetype&quot;:&quot;application/octet-stream&quot;,  &quot;caseId&quot;:&quot;1&quot;,  &quot;contentStorageId&quot;:&quot;4&quot;,  &quot;isInternal&quot;:&quot;true&quot;,  &quot;description&quot;:&quot;draft,  &quot;name&quot;:&quot;Doc 1&quot;,  &quot;fileName&quot;:&quot;document_1.jpg&quot;,  &quot;submittedBy&quot;:&quot;1&quot;,  &quot;url&quot;:&quot;documentDownload?fileName=document_1.jpg&amp;amp;contentStorageId=4&quot;,  &quot;version&quot;:&quot;1&quot;}Example 2:In this example, isInternal is set to false because the document is specified by URL so the document object contains a reference to the content, not the content itself.{  &quot;id&quot;:&quot;4&quot;,  &quot;creationDate&quot;:&quot;2014-10-09 16:45:36.658&quot;,  &quot;author&quot;:&quot;1&quot;,  &quot;index&quot;:&quot;-1&quot;,  &quot;contentMimetype&quot;:&quot;image/png&quot;,  &quot;caseId&quot;:&quot;1&quot;,  &quot;contentStorageId&quot;:&quot;4&quot;,  &quot;isInternal&quot;:&quot;false&quot;,  &quot;description&quot;:&quot;draft,  &quot;name&quot;:&quot;Train receipt&quot;,  &quot;fileName&quot;:&quot;train_receipt.png&quot;,  &quot;submittedBy&quot;:&quot;1&quot;,  &quot;url&quot;:&quot;http://cloud.storage.com/sites/chris/expenses/july_2014/train_receipt.png&quot;,  &quot;version&quot;:&quot;1&quot;}Get a document from a caseUse a GET method to get a document from a case. First you get the document information, then you download the content. To get the document information, specify the document id in the URL. The document id is created when you upload a document to a case. There is no payload.  URL/API/bpm/caseDocument/:documentId`  MethodGET  Success ResponseThe response includes the “url” to use to download the content. Call the documentDownload servlet with this URL: /portal/documentDownload?fileName=doc.jpg&amp;amp;contentStorageId=4.  Code: 200  Payload:{  &quot;id&quot;:&quot;3&quot;,  &quot;creationDate&quot;:&quot;2014-10-09 16:45:36.658&quot;,  &quot;author&quot;:&quot;1&quot;,  &quot;index&quot;:&quot;-1&quot;,  &quot;contentMimetype&quot;:&quot;application/octet-stream&quot;,  &quot;caseId&quot;:&quot;1&quot;,  &quot;contentStorageId&quot;:&quot;4&quot;,  &quot;isInternal&quot;:&quot;true&quot;,  &quot;description&quot;:&quot;draft,  &quot;name&quot;:&quot;Doc 1&quot;,  &quot;fileName&quot;:&quot;doc.jpg&quot;,  &quot;submittedBy&quot;:&quot;1&quot;,  &quot;url&quot;:&quot;documentDownload?fileName=doc.jpg&amp;amp;contentStorageId=4&quot;,  &quot;version&quot;:&quot;1&quot;}Update a document in a caseYou update a document in a case by uploading a new version of the document using a PUT method. You can upload a document version from the local file system or by URL. The document name will be used in all the cases of the process, but the combination of case id and document name is unique.In the URL, you specify to supply the document id. This is included in the response when you first add a document to a case.The response to PUT methods is the same as for POST methods.  URL/API/bpm/caseDocument/:documentId  MethodPUT  Data Params  Request PayloadExample 1: Update the document ExpensesPolicy in case 1 by uploading Expense policy rev2.pdf from the tenant temporary upload folder. The document id, 17 in this example, is specified in the URL. The description is optional. The filename allows to rename the file into “revision2.pdf” Method{  &quot;file&quot; : &quot;Expense policy rev2.pdf&quot;,  &quot;description&quot; : &quot;updated version of document&quot;  &quot;fileName&quot;: &quot;revision2.pdf&quot;,}Example 2: Update the document ExpensesPolicy in case 1 by uploading Expense policy rev2.pdf from my cloud drive. The document id is 17.{  &quot;url&quot; : &quot;http://cloud.storage.com/sites/chris/expenses/july_2014/Expense policy rev2.pdf&quot;}Success Response  Code: 200  Search for a document  URL/API/bpm/caseDocumentExample: Find all documents with a document name equal to doc1: /API/bpm/caseDocument?p=0&amp;amp;c=10&amp;amp;f=name=doc1Find all documents with with any of the searchable fields starting with “doc”. /API/bpm/caseDocument?p=0&amp;amp;c=10&amp;amp;s=doc  MethodGET  Data ParamsStandard search parameters are available.It is possible to filter on three parameters: submittedBy, name and description.  submittedBy=&quot;id&quot;: search for documents that were submitted by the user with the specified identifier.  name=&quot;string&quot;: search for documents with names that contain string. Depending on the setting for word-based search, the search returns documents with string at the start of the name or the start of a word in the name.  description=&quot;string&quot;: search for documents with descriptions that contain string. Depending on the setting for word-based search, the search returns documents with string at the start of the description or the start of a word in the description.Success ResponseA document object for each matching document  Code: 200  Payload:[  {&quot;id&quot;:&quot;3&quot;,&quot;creationDate&quot;:&quot;2014-10-09 16:45:36.658&quot;,&quot;author&quot;:&quot;1&quot;,&quot;index&quot;:&quot;-1&quot;,&quot;contentMimetype&quot;:&quot;application/octet-stream&quot;,&quot;caseId&quot;:&quot;1&quot;,&quot;contentStorageId&quot;:&quot;4&quot;,&quot;isInternal&quot;:&quot;true&quot;,&quot;description&quot;:&quot;draft,&quot;name&quot;:&quot;doc1&quot;,&quot;fileName&quot;:&quot;doc.jpg&quot;,&quot;submittedBy&quot;:&quot;1&quot;,&quot;url&quot;:&quot;documentDownload?fileName=test.txt&amp;amp;contentStorageId=1&quot;,&quot;version&quot;:&quot;1&quot;  }, {&quot;id&quot;:&quot;4&quot;,&quot;creationDate&quot;:&quot;2014-10-09 16:45:36.658&quot;,&quot;author&quot;:&quot;1&quot;,&quot;index&quot;:&quot;-1&quot;,&quot;contentMimetype&quot;:&quot;image/png&quot;,&quot;caseId&quot;:&quot;1&quot;,&quot;contentStorageId&quot;:&quot;4&quot;&quot;isInternal&quot;:&quot;false&quot;,&quot;description&quot;:&quot;draft,&quot;name&quot;:&quot;doc2&quot;,&quot;fileName&quot;:&quot;train_receipt.png&quot;,&quot;submittedBy&quot;:&quot;1&quot;,&quot;url&quot;:&quot;http://cloud.storage.com/sites/chris/expenses/july_2014/train_receipt.png&quot;,&quot;version&quot;:&quot;1&quot;  }]Delete a document  URL/API/bpm/caseDocument/:documentId  MethodDELETE  Success Response  Code: 200  ArchivedCaseDocumentDescriptionUse the archived case document resource to access previous document versions for active and archived casesIdentifierThe ID of the document (a long value).Representation{  &quot;id&quot;:&quot;archivedDocumentId&quot;,   &quot;creationDate&quot;:&quot;date and time of the original document creation&quot;,   &quot;author&quot;:&quot;submittorUserId&quot;,   &quot;index&quot;:&quot;index in a list of documents. if -1 it represents a single document&quot;,   &quot;contentMimetype&quot;:&quot;MIMEtype&quot;,   &quot;caseId&quot;:&quot;caseId&quot;,   &quot;contentStorageId&quot;:&quot;storageId&quot;,   &quot;isInternal&quot;:&quot;true | false&quot;,   &quot;description&quot;:&quot; description&quot;,   &quot;name&quot;:&quot;name&quot;,   &quot;fileName&quot;:&quot;filename&quot;,   &quot;submittedBy&quot;:&quot;submittorUserId&quot;,   &quot;url&quot;:&quot;urlForDownload&quot;,   &quot;version&quot;:&quot;version&quot;,   &quot;sourceObjectId&quot;:&quot;originalDocumentId&quot;,   &quot;archivedDate&quot;:&quot;date and time of the archived document creation&quot;}MethodsThe methods used for this resource are:  GET - Read a resource  DELETE - Remove the physical file related to the specified id but keep the mapping for audit purposesSearch for a documentYou can use a single GET method to return all the documents that match the specified filters.  URL/API/bpm/archivedCaseDocumentExamples  List all versions of a simple document (knowing its current version Id) /API/bpm/archivedCaseDocument?c=10&amp;amp;p=0&amp;amp;f=sourceObjectId=1  List all versions of a list of document (knowing its name) /API/bpm/archivedCaseDocument?c=10&amp;amp;p=0&amp;amp;f=name=MyDocList  List all versions of all documents of the case of id 1: /API/bpm/archivedCaseDocument?c=10&amp;amp;p=0&amp;amp;f=caseId=1  List all versions of all document of the archived case of id 1 /API/bpm/archivedCaseDocument?c=10&amp;amp;p=0&amp;amp;f=archivedCaseId=1  Combine different filters, for example list all versions of a list declared in a case (knowing list name and case id) /API/bpm/archivedCaseDocument?c=10&amp;amp;p=0&amp;amp;f=caseId=1&amp;amp;f=name=myDocList&amp;amp;o=index ASC  Response payload  MethodGET  Data ParamsStandard search parameters are available.It is possible to filter on the following parameters: sourceObjectId, caseId, archivedCaseId, submittedBy, name, description.  sourceObjectId=&quot;id&quot;: search for documents by specifying the original document id. This is useful if you know the id of a caseDocument and you wish to retrieve all its previous versions..  caseId=&quot;id&quot;: search for documents with the specified open case id.  archivedCaseId=&quot;id&quot;: search for documents with the specified archvied case id.  submittedBy=&quot;id&quot;: search for documents that were submitted by the user with the specified identifier.  name=&quot;string&quot;: search for documents with names that contain string. Depending on the setting for word-based search, the search returns documents with string at the start of the name or the start of a word in the name.  description=&quot;string&quot;: search for documents with descriptions that contain string. Depending on the setting for word-based search, the search returns documents with string at the start of the description or the start of a word in the description.Success ResponseAn archived document object for each matching document  Code: 200  Payload:[{   &quot;id&quot;:&quot;1&quot;,   &quot;creationDate&quot;:&quot;2014-10-09 16:39:52.472&quot;,&quot;author&quot;:&quot;1&quot;,   &quot;index&quot;:&quot;0&quot;,   &quot;contentMimetype&quot;:&quot;text/plain&quot;,   &quot;caseId&quot;:&quot;1&quot;,   &quot;contentStorageId&quot;:&quot;1&quot;,   &quot;isInternal&quot;:&quot;true&quot;,   &quot;description&quot;:&quot;&quot;,   &quot;name&quot;:&quot;myDoc&quot;,   &quot;fileName&quot;:&quot;test1.txt&quot;,   &quot;submittedBy&quot;:&quot;1&quot;,   &quot;url&quot;:&quot;documentDownload?fileName=test1.txt&amp;amp;contentStorageId=1&quot;,   &quot;version&quot;:&quot;1&quot;,   &quot;sourceObjectId&quot;:&quot;1&quot;,   &quot;archivedDate&quot;:&quot;2014-10-09 17:39:52.473&quot;}, {   &quot;id&quot;:&quot;2&quot;,&quot;creationDate&quot;:&quot;2014-10-09 16:39:52.473&quot;,&quot;author&quot;:&quot;1&quot;,&quot;index&quot;:&quot;1&quot;,&quot;contentMimetype&quot;:&quot;text/plain&quot;,&quot;caseId&quot;:&quot;1&quot;,&quot;contentStorageId&quot;:&quot;2&quot;,&quot;isInternal&quot;:&quot;true&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;myDoc&quot;,&quot;fileName&quot;:&quot;test2.txt&quot;,&quot;submittedBy&quot;:&quot;1&quot;,&quot;url&quot;:&quot;documentDownload?fileName=test2.txt&amp;amp;contentStorageId=2&quot;,&quot;version&quot;:&quot;2&quot;,&quot;sourceObjectId&quot;:&quot;1&quot;,   &quot;archivedDate&quot;:&quot;2014-10-09 18:39:52.473&quot;}, {   &quot;id&quot;:&quot;3&quot;,&quot;creationDate&quot;:&quot;2014-10-09 16:39:52.473&quot;,&quot;author&quot;:&quot;1&quot;,&quot;index&quot;:&quot;2&quot;,&quot;contentMimetype&quot;:&quot;text/plain&quot;,&quot;caseId&quot;:&quot;1&quot;,&quot;contentStorageId&quot;:&quot;3&quot;,&quot;isInternal&quot;:&quot;true&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;myDoc&quot;,&quot;fileName&quot;:&quot;test3.txt&quot;,&quot;submittedBy&quot;:&quot;1&quot;,&quot;url&quot;:&quot;documentDownload?fileName=test3.txt&amp;amp;contentStorageId=3&quot;,&quot;version&quot;:&quot;3&quot;,   &quot;sourceObjectId&quot;:&quot;1&quot;,&quot;archivedDate&quot;:&quot;2014-10-09 19:39:52.473&quot; }]Delete a document contentDelete the document content with id 3  URL/API/bpm/archivedCaseDocument/:archivedCaseId`  MethodDELETEActorsActorDescriptionManage process actors.IdentifierSimple, the ID of the object (a long value)Representation{  &quot;id&quot;:&quot;actor id&quot;,  &quot;process_id&quot;:&quot;process definition id&quot;,  &quot;description&quot;:&quot;a description of the actor&quot;,  &quot;name&quot;:&quot;name of the actor (as specified on human tasks and for the initiator of the process)&quot;,  &quot;displayName&quot;:&quot;the display name of the actor&quot;,}MethodsThe methods used for this resource are:  GET - Read or search an actor  PUT - Update an actorRead an actorUse a GET method to retrieve information about an actor.  URL/API/bpm/actor/:actorIdExample: Get the information about the actor with id=1: /API/bpm/actor/1  MethodGET  Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;1&quot;,  &quot;process_id&quot;:&quot;4717422838168315799&quot;,  &quot;description&quot;:&quot;&quot;,  &quot;name&quot;:&quot;employee&quot;,  &quot;displayName&quot;:&quot;Employee actor&quot;}Search actors for a given process idUse a GET method to search actors for a given process id.  URL/API/bpm/actorExample: Count the actor members of actors of the process with id 4758765 /API/bpm/actor?p=0&amp;amp;c=10&amp;amp;f=process_id=4758765&amp;amp;n=users&amp;amp;n=group&amp;amp;n=roles&amp;amp;n=memberships  MethodGET  Data ParamsStandard search parameters are available.  Success Response  Code: 200  Payload:[  {&quot;id&quot;:&quot;1&quot;,&quot;process_id&quot;:&quot;4758765&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;employee&quot;,&quot;displayName&quot;:&quot;Employee actor&quot;  }, {&quot;id&quot;:&quot;2&quot;,&quot;process_id&quot;:&quot;4758765&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;customer&quot;,&quot;displayName&quot;:&quot;Customer actor&quot;  }]Update an actorUse the PUT method to update an actor.Fields that can be upated are “displayName” and “description”  URL/API/bpm/actor/:actorId  MethodPUT  Request Payload{  &quot;displayName&quot;: &quot;new display name&quot;,  &quot;description&quot;: &quot;new description&quot;}Success Response  Code: 20  ActorMemberDescriptionAn actor member represents the association between the organization and the actor af a process. In an organization we have four member_types = USER, GROUP, ROLE and MEMBERSHIP (role in a group). You can assign a actor to a user by specifying a role and or a group, or specific user.IdentifierSimple, the ID of the object (a long value)Representation{  &quot;id&quot;:&quot;actor member id&quot;,  &quot;actor_id&quot;:&quot;id of the actor for this mapping&quot;,  &quot;role_id&quot;:&quot;id of role, or -1 if the member type is not role&quot;,  &quot;group_id&quot;:&quot;id of group, or -1 if the member type is not group&quot;,  &quot;user_id&quot;:&quot;id of user, or -1 if the member type is not user&quot;}MethodsThe methods used for this resource are:  POST - Add a new actorMember  GET - Search actorMembers  DELETE - Remove an actorMemberAdd a new actorMemberUse the POST method to create a new actorMember.  URL/API/bpm/actorMember  MethodPOST  Request PayloadAdd a member_type = USER to the actor with id = 2.{  &quot;actor_id&quot;:&quot;2&quot;,  &quot;member_type&quot;:&quot;USER&quot;,  &quot;user_id&quot;:&quot;101&quot;}Add a member_type = MEMBERSHIP to the actor with id = 2.{  &quot;id&quot;:&quot;204&quot;,  &quot;actor_id&quot;:&quot;2&quot;,  &quot;role_id&quot;:&quot;-1&quot;,  &quot;group_id&quot;:&quot;-1&quot;,  &quot;user_id&quot;:&quot;101&quot;}Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;206&quot;,  &quot;actor_id&quot;:&quot;2&quot;,  &quot;role_id&quot;:&quot;4&quot;,  &quot;group_id&quot;:&quot;8&quot;,  &quot;user_id&quot;:&quot;-1&quot;}Search actorMembersUse a GET method with filters and search terms to search for actorMembers.  URL/API/bpm/actorMemberEntryExample: ``  Method``  Data ParamsStandard search parameters are available.There is a mandatory filter on:  actor_id For example, retrieve the actorMembers related to the specified actor_id. http://localhost:8080/bonita/API/bpm/actorMember?p=0&amp;amp;c=10&amp;amp;f=actor_id%3d1You can also filter also on:  member_type=user|role|group|roleAndGroup retrieve only the actorMembers of type user. /API/bpm/actorMember?p=0&amp;amp;c=10&amp;amp;f=actor_id%3d1&amp;amp;f=member_type%3duser  user_id=:userId}: retrieve only the actorMembers related to the specified user_id. /API/bpm/actorMember?p=0&amp;amp;c=10&amp;amp;f=actor_id%3d1&amp;amp;f=user_id%3d101  role_id=:roleId: retrieve only the actorMembers related to the specified role_id. /API/bpm/actorMember?p=0&amp;amp;c=10&amp;amp;f=actor_id%3d1&amp;amp;f=role_id%3d101  group_id=:groupId: retrieve only the actorMembers related to the specified group_id. /API/bpm/actorMember?p=0&amp;amp;c=10&amp;amp;f=actor_id%3d1&amp;amp;f=group_id%3d101Success ResponseAn array of actorMember objects  Code: 200  Delete an actorMemberUse the DELETE method to delete an existing actorMember.  URL/API/bpm/actorMember/:id  MethodDELETE  Success Response  Code: 200  Cases (Process Instances)CaseDescriptionCase is an instance of a process. When you start a process, it creates a case.IdentifierID of the Object: a long valueRepresentation{  &quot;id&quot;:&quot;the identifier of the case&quot;,  &quot;end_date&quot;:&quot;the date set when the case is closed&quot;,  &quot;failedFlowNodes&quot;:&quot;count of failed flow nodes if parameter n=failedFlowNodes is given&quot;,  &quot;startedBySubstitute&quot;:&quot;the identifier of the substitute user (as Process manager or Administrator) who started the process. It can be also the substitute user if d=startedBySubstitute is given.&quot;,  &quot;start&quot;:&quot;the starting date of the case&quot;,  &quot;activeFlowNodes&quot;:&quot;count of active flow nodes if parameter n=activeFlowNodes is given&quot;,  &quot;state&quot;:&quot;state: an enum that represent the state of the case, it can be INITIALIZING, STARTED, SUSPENDED, CANCELLED, ABORTED, COMPLETING, COMPLETED, ERROR, ABORTING&quot;,  &quot;rootCaseId&quot;:&quot;the identifier of the container of the case&quot;,  &quot;started_by&quot;:&quot;the identifier of the user who started the case&quot;,  &quot;processDefinitionId&quot;:&quot;the identifier of the process related of the case&quot;,  &quot;last_update_date&quot;:&quot;the date of the last update done on the case&quot;,  &quot;searchIndex1Label&quot;:&quot;the 1st search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex2Label&quot;:&quot;the 2nd search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex3Label&quot;:&quot;the 3rd search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex4Label&quot;:&quot;the 4th search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex5Label&quot;:&quot;the 5th search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex1Value&quot;:&quot;the 1st search index value (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex2Value&quot;:&quot;the 2nd search index value (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex3Value&quot;:&quot;the 3rd search index value (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex4Value&quot;:&quot;the 4th search index value (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex5Value&quot;:&quot;the 5th search index value (from 6.5, in Subscription editions only)&quot;}Methods  POST - Create a case  GET - Read a case or search for a case  DELETE - Remove a caseResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  started_by  startedBySubstitute  processDefinitionIdRead a caseYou can get a case by using its identifier. Request url  URL/API/bpm/case/:id  MethodGET  Data Params  d: extend resource response parameters of this resource are available.Available values: started_by, startedBySubstitute, processDefinitionId.  n: count of related resources. Available values: activeFlowNodes, failedFlowNodes.Success ResponseA JSON representation of the case  Code: 200  Payload:{  &quot;id&quot;: &quot;1&quot;,  &quot;end_date&quot;: &quot;&quot;,  &quot;failedFlowNodes&quot;: &quot;9&quot;,  &quot;startedBySubstitute&quot;: {&quot;last_connection&quot;: &quot;2014-12-01 10:46:03.750&quot;,&quot;created_by_user_id&quot;: &quot;-1&quot;,&quot;creation_date&quot;: &quot;2014-11-27 17:53:46.516&quot;,&quot;id&quot;: &quot;4&quot;,&quot;icon&quot;: &quot;/default/icon_user.png&quot;,&quot;enabled&quot;: &quot;true&quot;,&quot;title&quot;: &quot;Mr&quot;,&quot;manager_id&quot;: &quot;3&quot;,&quot;job_title&quot;: &quot;Human resources benefits&quot;,&quot;userName&quot;: &quot;walter.bates&quot;,&quot;lastname&quot;: &quot;Bates&quot;,&quot;firstname&quot;: &quot;Walter&quot;,&quot;password&quot;: &quot;&quot;,&quot;last_update_date&quot;: &quot;2014-11-27 17:53:46.516&quot;  },  &quot;start&quot;: &quot;2014-11-27 17:55:00.906&quot;,  &quot;activeFlowNodes&quot;: &quot;9&quot;,  &quot;state&quot;: &quot;started&quot;,  &quot;rootCaseId&quot;: &quot;1&quot;,  &quot;started_by&quot;:{&quot;last_connection&quot;: &quot;&quot;,&quot;created_by_user_id&quot;: &quot;-1&quot;,&quot;creation_date&quot;: &quot;2014-11-27 17:53:46.509&quot;,&quot;id&quot;: &quot;3&quot;,&quot;icon&quot;: &quot;/default/icon_user.png&quot;,&quot;enabled&quot;: &quot;true&quot;,&quot;title&quot;: &quot;Mrs&quot;,&quot;manager_id&quot;: &quot;1&quot;,&quot;job_title&quot;: &quot;Human resource manager&quot;,&quot;userName&quot;: &quot;helen.kelly&quot;,&quot;lastname&quot;: &quot;Kelly&quot;,&quot;firstname&quot;: &quot;Helen&quot;,&quot;password&quot;: &quot;&quot;,&quot;last_update_date&quot;: &quot;2014-11-27 17:53:46.509&quot;  },  &quot;processDefinitionId&quot;: {&quot;id&quot;: &quot;5777042023671752656&quot;,&quot;icon&quot;: &quot;&quot;,&quot;displayDescription&quot;: &quot;&quot;,&quot;deploymentDate&quot;: &quot;2014-11-27 17:54:37.774&quot;,&quot;description&quot;: &quot;&quot;,&quot;activationState&quot;: &quot;ENABLED&quot;,&quot;name&quot;: &quot;Pool2&quot;,&quot;deployedBy&quot;: &quot;4&quot;,&quot;displayName&quot;: &quot;Pool 2&quot;,&quot;actorinitiatorid&quot;: &quot;1&quot;,&quot;last_update_date&quot;: &quot;2014-11-27 17:54:43.621&quot;,&quot;configurationState&quot;: &quot;RESOLVED&quot;,&quot;version&quot;: &quot;2.0&quot;  },  &quot;last_update_date&quot;: &quot;2014-11-27 17:55:00.906&quot;,  &quot;searchIndex1Label&quot;:&quot;mySearchIndex1Label&quot;,  &quot;searchIndex2Label&quot;:&quot;mySearchIndex2Label&quot;,  &quot;searchIndex3Label&quot;:&quot;mySearchIndex3Label&quot;,  &quot;searchIndex4Label&quot;:&quot;mySearchIndex4Label&quot;,  &quot;searchIndex5Label&quot;:&quot;mySearchIndex5Label&quot;,  &quot;searchIndex1Value&quot;:&quot;mySearchIndex1Value&quot;,  &quot;searchIndex2Value&quot;:&quot;mySearchIndex2Value&quot;,  &quot;searchIndex3Value&quot;:&quot;mySearchIndex3Value&quot;,  &quot;searchIndex4Value&quot;:&quot;mySearchIndex4Value&quot;,  &quot;searchIndex5Value&quot;:&quot;mySearchIndex5Value&quot;}Search for a case  URL/API/bpm/case  MethodGET  Data ParamsStandard search parameters are available.  f: filter of the search, beware you cannot use team_manager_id and supervisor_id at the same time  n: count of related resource. Available values: activeFlowNodes, failedFlowNodes  d: extend resource response parameters of this resource are available.Success ResponseJSON representations of matching cases  Code: 200  Payload:[  {&quot;id&quot;: &quot;1&quot;,&quot;end_date&quot;: &quot;&quot;,&quot;failedFlowNodes&quot;: &quot;9&quot;,&quot;startedBySubstitute&quot;:{  &quot;last_connection&quot;: &quot;2014-12-01 10:46:03.750&quot;,  &quot;created_by_user_id&quot;: &quot;-1&quot;,  &quot;creation_date&quot;: &quot;2014-11-27 17:53:46.516&quot;,  &quot;id&quot;: &quot;4&quot;,  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;enabled&quot;: &quot;true&quot;,  &quot;title&quot;: &quot;Mr&quot;,  &quot;manager_id&quot;: &quot;3&quot;,  &quot;job_title&quot;: &quot;Human resources benefits&quot;,  &quot; userName&quot;: &quot;walter.bates&quot;,  &quot;lastname&quot;: &quot;Bates&quot;,  &quot;firstname&quot;: &quot;Walter&quot;,  &quot;password&quot;: &quot;&quot;,  &quot;last_update_date&quot;: &quot;2014-11-27 17:53:46.516&quot;},&quot;start&quot;: &quot;2014-11-27 17:55:00.906&quot;,&quot;activeFlowNodes&quot;: &quot;9&quot;,&quot;state&quot;: &quot;started&quot;,&quot;rootCaseId&quot;: &quot;1&quot;,&quot;started_by&quot;:{  &quot;last_connection&quot;: &quot;&quot;,  &quot;created_by_user_id&quot;: &quot;-1&quot;,  &quot;creation_date&quot;: &quot;2014-11-27 17:53:46.509&quot;,  &quot;id&quot;: &quot;3&quot;,  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;enabled&quot;: &quot;true&quot;,  &quot;title&quot;: &quot;Mrs&quot;,  &quot;manager_id&quot;: &quot;1&quot;,  &quot;job_title&quot;: &quot;Human resource manager&quot;,  &quot;userName&quot;: &quot;helen.kelly&quot;,  &quot;lastname&quot;: &quot;Kelly&quot;,  &quot;firstname&quot;: &quot;Helen&quot;,  &quot;password&quot;: &quot;&quot;,  &quot;last_update_date&quot;: &quot;2014-11-27 17:53:46.509&quot;},&quot;processDefinitionId&quot;:{  &quot;id&quot;: &quot;5777042023671752656&quot;,  &quot;icon&quot;: &quot;&quot;,  &quot;displayDescription&quot;: &quot;&quot;,  &quot;deploymentDate&quot;: &quot;2014-11-27 17:54:37.774&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;activationState&quot;: &quot;ENABLED&quot;,  &quot;name&quot;: &quot;Pool2&quot;,  &quot;deployedBy&quot;: &quot;4&quot;,  &quot;displayName&quot;: &quot;Pool 2&quot;,  &quot;actorinitiatorid&quot;: &quot;1&quot;,  &quot;last_update_date&quot;: &quot;2014-11-27 17:54:43.621&quot;,  &quot;configurationState&quot;: &quot;RESOLVED&quot;,  &quot;version&quot;: &quot;2.0&quot;},&quot;last_update_date&quot;: &quot;2014-11-27 17:55:00.906&quot;,&quot;searchIndex1Label&quot;:&quot;case1SearchIndex1Label&quot;,&quot;searchIndex2Label&quot;:&quot;case1SearchIndex2Label&quot;,&quot;searchIndex3Label&quot;:&quot;case1SearchIndex3Label&quot;,&quot;searchIndex4Label&quot;:&quot;case1SearchIndex4Label&quot;,&quot;searchIndex5Label&quot;:&quot;case1SearchIndex5Label&quot;,&quot;searchIndex1Value&quot;:&quot;case1SearchIndex1Value&quot;,&quot;searchIndex2Value&quot;:&quot;case1SearchIndex2Value&quot;,&quot;searchIndex3Value&quot;:&quot;case1SearchIndex3Value&quot;,&quot;searchIndex4Value&quot;:&quot;case1SearchIndex4Value&quot;,&quot;searchIndex5Value&quot;:&quot;case1SearchIndex5Value&quot;  },  {&quot;id&quot;: &quot;2&quot;,&quot;end_date&quot;: &quot;&quot;,&quot;failedFlowNodes&quot;: &quot;0&quot;,&quot;startedBySubstitute&quot;:{  &quot;last_connection&quot;: &quot;2014-12-01 10:46:03.750&quot;,  &quot;created_by_user_id&quot;: &quot;-1&quot;,  &quot;creation_date&quot;: &quot;2014-11-27 17:53:46.516&quot;,  &quot;id&quot;: &quot;4&quot;,  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;enabled&quot;: &quot;true&quot;,  &quot;title&quot;: &quot;Mr&quot;,  &quot;manager_id&quot;: &quot;3&quot;,  &quot;job_title&quot;: &quot;Human resources benefits&quot;,  &quot;userName&quot;: &quot;walter.bates&quot;,  &quot;lastname&quot;: &quot;Bates&quot;,  &quot;firstname&quot;: &quot;Walter&quot;,  &quot;password&quot;: &quot;&quot;,  &quot;last_update_date&quot;: &quot;2014-11-27 17:53:46.516&quot;},&quot;start&quot;: &quot;2014-11-27 17:56:28.596&quot;,&quot;activeFlowNodes&quot;: &quot;1&quot;,&quot;state&quot;: &quot;started&quot;,&quot;rootCaseId&quot;: &quot;2&quot;,&quot;started_by&quot;:{  &quot;last_connection&quot;: &quot;&quot;,  &quot;created_by_user_id&quot;: &quot;-1&quot;,  &quot;creation_date&quot;: &quot;2014-11-27 17:53:46.509&quot;,  &quot;id&quot;: &quot;3&quot;,  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;enabled&quot;: &quot;true&quot;,  &quot;title&quot;: &quot;Mrs&quot;,  &quot;manager_id&quot;: &quot;1&quot;,  &quot;job_title&quot;: &quot;Human resource manager&quot;,  &quot;userName&quot;: &quot;helen.kelly&quot;,  &quot;lastname&quot;: &quot;Kelly&quot;,  &quot;firstname&quot;: &quot;Helen&quot;,  &quot;password&quot;: &quot;&quot;,  &quot;last_update_date&quot;: &quot;2014-11-27 17:53:46.509&quot;},&quot;processDefinitionId&quot;:{  &quot;id&quot;: &quot;4948193168427526005&quot;,  &quot;icon&quot;: &quot;&quot;,  &quot;displayDescription&quot;: &quot;&quot;,  &quot;deploymentDate&quot;: &quot;2014-11-27 17:56:10.920&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;activationState&quot;: &quot;ENABLED&quot;,  &quot;name&quot;: &quot;ConnectorFailed&quot;,  &quot;deployedBy&quot;: &quot;4&quot;,  &quot;displayName&quot;: &quot;ConnectorFailed&quot;,  &quot;actorinitiatorid&quot;: &quot;2&quot;,  &quot;last_update_date&quot;: &quot;2014-11-27 17:56:12.470&quot;,  &quot;configurationState&quot;: &quot;RESOLVED&quot;,  &quot;version&quot;: &quot;1.0&quot;},&quot;last_update_date&quot;: &quot;2014-11-27 17:56:28.596&quot;,&quot;searchIndex1Label&quot;:&quot;case2SearchIndex1Label&quot;,&quot;searchIndex2Label&quot;:&quot;case2SearchIndex2Label&quot;,&quot;searchIndex3Label&quot;:&quot;case2SearchIndex3Label&quot;,&quot;searchIndex4Label&quot;:&quot;case2SearchIndex4Label&quot;,&quot;searchIndex5Label&quot;:&quot;case2SearchIndex5Label&quot;,&quot;searchIndex1Value&quot;:&quot;case2SearchIndex1Value&quot;,&quot;searchIndex2Value&quot;:&quot;case2SearchIndex2Value&quot;,&quot;searchIndex3Value&quot;:&quot;case2SearchIndex3Value&quot;,&quot;searchIndex4Value&quot;:&quot;case2SearchIndex4Value&quot;,&quot;searchIndex5Value&quot;:&quot;case2SearchIndex5Value&quot;  } ]Create a caseThis way of creating a case using this method will only work for processes in which no contract is defined. To instantiate a process with a contract, check the process instantiation resource documentation.  URL/API/bpm/case  MethodPOST  Request PayloadThe process definition id, in JSONCreate a case without variables  {&quot;processDefinitionId&quot;:&quot;5777042023671752656&quot;  }Create a case with variables Warning: The attribute “variables” on the request payload is used to initialize the process variables (not BDM variables).If you want to initialize BDM variables at process instantiation, add a contract on the process and map BDM variables to the contract data.See Start a process using an instantiation contract for usage.  {  &quot;processDefinitionId&quot;:&quot;5777042023671752656&quot;,&quot;variables&quot;:[{  &quot;name&quot;:&quot;stringVariable&quot;,&quot;value&quot;:&quot;aValue&quot;  },  {  &quot;name&quot;:&quot;dateVariable&quot;,&quot;value&quot;:349246800000  },  {  &quot;name&quot;:&quot;numericVariable&quot;,&quot;value&quot;:5  }]  }  Success ResponseThe JSON representation of a case resource  Code: 200  Payload:{  &quot;id&quot;: &quot;1001&quot;,  &quot;end_date&quot;: &quot;&quot;,  &quot;startedBySubstitute&quot;: &quot;4&quot;,  &quot;start&quot;: &quot;2014-12-01 14:36:23.732&quot;,  &quot;state&quot;: &quot;started&quot;,  &quot;rootCaseId&quot;: &quot;1001&quot;,  &quot;started_by&quot;: &quot;4&quot;,  &quot;processDefinitionId&quot;: &quot;5777042023671752656&quot;,  &quot;last_update_date&quot;: &quot;2014-12-01 14:36:23.732&quot;}Delete a case  URL/API/bpm/case/:caseId  MethodDELETE  Success Response  Code: 200  Delete cases in bulk  URL/API/bpm/case/  MethodDELETE  Request PayloadList of case ids to delete[&quot;1&quot;, &quot;2&quot; ,...]Success Response  Code: 200  Retrieve the case context  URL/API/bpm/case/:caseId/context  MethodGET  Success ResponseA context object  Code: 200  Payload:{&quot;myBusinessData_ref&quot;:{  &quot;name&quot;:&quot;myBusinessData&quot;,&quot;type&quot;:&quot;com.company.model.BusinessObject1&quot;,&quot;link&quot;:&quot;API/bdm/businessData/com.company.model.BusinessObject1/2&quot;,&quot;storageId&quot;:2,&quot;storageId_string&quot;:&quot;2&quot;  },  &quot;myDocument_ref&quot;:{  &quot;id&quot;:1,&quot;processInstanceId&quot;:3,&quot;name&quot;:&quot;myDocument&quot;,&quot;author&quot;:104,&quot;creationDate&quot;:1434723950847,&quot;fileName&quot;:&quot;TestCommunity-1.0.bos&quot;,&quot;contentMimeType&quot;:null,&quot;contentStorageId&quot;:&quot;1&quot;,&quot;url&quot;:&quot;documentDownload?fileName=TestCommunity-1.0.bos&amp;amp;contentStorageId=1&quot;,&quot;description&quot;:&quot;&quot;,&quot;version&quot;:&quot;1&quot;,&quot;index&quot;:-1,&quot;contentFileName&quot;:&quot;TestCommunity-1.0.bos&quot;  }}ArchivedCaseDescriptionA completed instance of a process.IdentifierThe ID of the archived case (a long value).Representation{  &quot;id&quot;:&quot;the identifier of the archived case&quot;,  &quot;end_date&quot;:&quot;the date set when the case was archived&quot;,  &quot;startedBySubstitute&quot;:&quot;the id of the user&quot;,  &quot;sourceObjectId&quot;:&quot;the id of the case before it was archived&quot;  &quot;start&quot;:&quot;the stard date of the initial case&quot;,   &quot;state&quot;:&quot;the state of the archived case&quot;,   &quot;rootCaseId&quot;:&quot;the id of the case before it was archived&quot;,   &quot;started_by&quot;:&quot;id of the user who start the case&quot;,   &quot;archivedDate&quot;:&quot;the date set when the case was archived&quot;,   &quot;processDefinitionId&quot;:&quot;the id of the process related to this archived case&quot;,   &quot;last_update_date&quot;:&quot;the date of the last update done on the case&quot;,  &quot;searchIndex1Label&quot;:&quot;the 1st search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex2Label&quot;:&quot;the 2nd search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex3Label&quot;:&quot;the 3rd search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex4Label&quot;:&quot;the 4th search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex5Label&quot;:&quot;the 5th search index label (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex1Value&quot;:&quot;the 1st search index value (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex2Value&quot;:&quot;the 2nd search index value (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex3Value&quot;:&quot;the 3rd search index value (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex4Value&quot;:&quot;the 4th search index value (from 6.5, in Subscription editions only)&quot;,  &quot;searchIndex5Value&quot;:&quot;the 5th search index value (from 6.5, in Subscription editions only)&quot;}MethodsThe methods used for this resource are:  GET - Read a resource or search for a resource  DELETE - Remove a resourceResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  started_by  startedBySubstitute  processDefinitionIdRead an archived caseYou can get an archived case by using its identifier. An archive case is linked to a case with the key.  URL/API/bpm/archivedCase/:archivedCaseId  MethodGET  Success ResponseA JSON representation of the archived case resource  Code: 200  Payload:{  &quot;id&quot;: &quot;9&quot;,  &quot;end_date&quot;: &quot;2014-10-22 10:57:00.299&quot;,  &quot;startedBySubstitute&quot;: &quot;4&quot;,  &quot;sourceObjectId&quot;: &quot;3&quot;,  &quot;start&quot;: &quot;2014-10-22 10:56:53.415&quot;,  &quot;state&quot;: &quot;completed&quot;,  &quot;rootCaseId&quot;: &quot;3&quot;,  &quot;started_by&quot;: &quot;4&quot;,  &quot;archivedDate&quot;: &quot;2014-10-22 10:57:00.299&quot;,  &quot;processDefinitionId&quot;: &quot;6054482369194211518&quot;,  &quot;last_update_date&quot;: &quot;2014-10-22 10:57:00.299&quot;  &quot;searchIndex1Label&quot;:&quot;case9SearchIndex1Label&quot;,  &quot;searchIndex2Label&quot;:&quot;case9SearchIndex2Label&quot;,  &quot;searchIndex3Label&quot;:&quot;case9SearchIndex3Label&quot;,  &quot;searchIndex4Label&quot;:&quot;case9SearchIndex4Label&quot;,  &quot;searchIndex5Label&quot;:&quot;case9SearchIndex5Label&quot;,  &quot;searchIndex1Value&quot;:&quot;case9SearchIndex1Value&quot;,  &quot;searchIndex2Value&quot;:&quot;case9SearchIndex2Value&quot;,  &quot;searchIndex3Value&quot;:&quot;case9SearchIndex3Value&quot;,  &quot;searchIndex4Value&quot;:&quot;case9SearchIndex4Value&quot;,  &quot;searchIndex5Value&quot;:&quot;case9SearchIndex5Value&quot;}Search archived casesYou can search cases.  URL/API/bpm/archivedCase  MethodGET  Data ParamsStandard search parameters are available.  o (order): available values are id, processDefinitionId, startedBy, startedBySubstitute, startDate, endDate, lastUpdate, archivedDate, sourceObjectId  d: extend resource response parameters of this resource are available.Success ResponseA JSON representation of an array of archived case resources  Code: 200  Payload:[  {&quot;id&quot;: &quot;3002&quot;,&quot;end_date&quot;: &quot;2014-10-22 15:21:10.129&quot;,&quot;startedBySubstitute&quot;: &quot;4&quot;,&quot;sourceObjectId&quot;: &quot;6&quot;,&quot;start&quot;: &quot;2014-10-22 11:47:28.859&quot;,&quot;state&quot;: &quot;completed&quot;,&quot;rootCaseId&quot;: &quot;6&quot;,&quot;started_by&quot;: &quot;4&quot;,&quot;archivedDate&quot;: &quot;2014-10-22 15:21:10.129&quot;,&quot;processDefinitionId&quot;: {  &quot;id&quot;: &quot;5652578116304089592&quot;,  &quot;icon&quot;: &quot;&quot;,  &quot;displayDescription&quot;: &quot;&quot;,  &quot;deploymentDate&quot;: &quot;2014-10-22 11:42:26.644&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;activationState&quot;: &quot;ENABLED&quot;,  &quot;name&quot;: &quot;données&quot;,  &quot;deployedBy&quot;: &quot;4&quot;,  &quot;displayName&quot;: &quot;données&quot;,  &quot;actorinitiatorid&quot;: &quot;4&quot;,  &quot;last_update_date&quot;: &quot;2014-10-22 11:42:45.672&quot;,  &quot;configurationState&quot;: &quot;RESOLVED&quot;,  &quot;version&quot;: &quot;2.0&quot;},&quot;last_update_date&quot;: &quot;2014-10-22 15:21:10.129&quot;,&quot;searchIndex1Label&quot;:&quot;case6SearchIndex1Label&quot;,&quot;searchIndex2Label&quot;:&quot;case6SearchIndex2Label&quot;,&quot;searchIndex3Label&quot;:&quot;case6SearchIndex3Label&quot;,&quot;searchIndex4Label&quot;:&quot;case6SearchIndex4Label&quot;,&quot;searchIndex5Label&quot;:&quot;case6SearchIndex5Label&quot;,&quot;searchIndex1Value&quot;:&quot;case6SearchIndex1Value&quot;,&quot;searchIndex2Value&quot;:&quot;case6SearchIndex2Value&quot;,&quot;searchIndex3Value&quot;:&quot;case6SearchIndex3Value&quot;,&quot;searchIndex4Value&quot;:&quot;case6SearchIndex4Value&quot;,&quot;searchIndex5Value&quot;:&quot;case6SearchIndex5Value&quot;  }, {&quot;id&quot;: &quot;9&quot;,&quot;end_date&quot;: &quot;2014-10-22 10:57:00.299&quot;,&quot;startedBySubstitute&quot;: &quot;4&quot;,&quot;sourceObjectId&quot;: &quot;3&quot;,&quot;start&quot;: &quot;2014-10-22 10:56:53.415&quot;,&quot;state&quot;: &quot;completed&quot;,&quot;rootCaseId&quot;: &quot;3&quot;,&quot;started_by&quot;: &quot;4&quot;,&quot;archivedDate&quot;: &quot;2014-10-22 10:57:00.299&quot;,&quot;processDefinitionId&quot;: {  &quot;id&quot;: &quot;6054482369194211518&quot;,  &quot;icon&quot;: &quot;&quot;,  &quot;displayDescription&quot;: &quot;&quot;,  &quot;deploymentDate&quot;: &quot;2014-10-22 10:55:24.219&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;activationState&quot;: &quot;ENABLED&quot;,  &quot;name&quot;: &quot;PoolTestEntry&quot;,  &quot;deployedBy&quot;: &quot;4&quot;,  &quot;displayName&quot;: &quot;PoolTestEntry&quot;,  &quot;actorinitiatorid&quot;: &quot;1&quot;,  &quot;last_update_date&quot;: &quot;2014-10-22 10:55:31.178&quot;,  &quot;configurationState&quot;: &quot;RESOLVED&quot;,  &quot;version&quot;: &quot;1.0&quot;},&quot;last_update_date&quot;: &quot;2014-10-22 10:57:00.299&quot;,&quot;searchIndex1Label&quot;:&quot;case9SearchIndex1Label&quot;,&quot;searchIndex2Label&quot;:&quot;case9SearchIndex2Label&quot;,&quot;searchIndex3Label&quot;:&quot;case9SearchIndex3Label&quot;,&quot;searchIndex4Label&quot;:&quot;case9SearchIndex4Label&quot;,&quot;searchIndex5Label&quot;:&quot;case9SearchIndex5Label&quot;,&quot;searchIndex1Value&quot;:&quot;case9SearchIndex1Value&quot;,&quot;searchIndex2Value&quot;:&quot;case9SearchIndex2Value&quot;,&quot;searchIndex3Value&quot;:&quot;case9SearchIndex3Value&quot;,&quot;searchIndex4Value&quot;:&quot;case9SearchIndex4Value&quot;,&quot;searchIndex5Value&quot;:&quot;case9SearchIndex5Value&quot;  }]Retrieve an archived case context  URL/API/bpm/archivedCase/:archivedCaseId/context  MethodGET  Success ResponseA context object  Code: 200  Payload:{&quot;myBusinessData_ref&quot;:{  &quot;name&quot;:&quot;myBusinessData&quot;,&quot;type&quot;:&quot;com.company.model.BusinessObject1&quot;,&quot;link&quot;:&quot;API/bdm/businessData/com.company.model.BusinessObject1/2&quot;,&quot;storageId&quot;:2,&quot;storageId_string&quot;:&quot;2&quot;  },  &quot;myDocument_ref&quot;:{  &quot;id&quot;:1,&quot;processInstanceId&quot;:3,&quot;name&quot;:&quot;myDocument&quot;,&quot;author&quot;:104,&quot;creationDate&quot;:1434723950847,&quot;fileName&quot;:&quot;TestCommunity-1.0.bos&quot;,&quot;contentMimeType&quot;:null,&quot;contentStorageId&quot;:&quot;1&quot;,&quot;url&quot;:&quot;documentDownload?fileName=TestCommunity-1.0.bos&amp;amp;contentStorageId=1&quot;,&quot;description&quot;:&quot;&quot;,&quot;version&quot;:&quot;1&quot;,&quot;index&quot;:-1,&quot;contentFileName&quot;:&quot;TestCommunity-1.0.bos&quot;  }}Remove an archived caseYou can delete an archived case by using its identifier. An archived case is linked to a case with the key.  URL/API/bpm/archivedCase/:archivedCaseId  MethodDELETE  Success Response  Code: 200  CaseInfoDescriptionRetrieves information about a case. It returns counters for each flow node in the case, showing the number of flow node instances that are in completed, ready, or failed state. If there are no flow node instances in a given state, no counter is returned for that state for the flow node.IdentifierThe ID of the case (a long value).Representation{  &quot;id&quot;: &quot;case identifier&quot;,  &quot;flowNodeStatesCounters&quot;: {&quot;Flow Node name from Studio&quot;: {  &quot;completed&quot;: &quot;number of instance of the given Flow Node in completed state&quot;,  &quot;ready&quot;: &quot;number of instance of the given Flow Node in ready state&quot;,  &quot;failed&quot;: &quot;number of instance of the given Flow Node in failed state&quot;,}  }}MethodsThe method used for this resource is:  GET - Read a resourceRetrieve counters for case flow nodesRetrieve information about the flow nodes of the case identified by the given ID.  URL/API/bpm/caseInfo/:id  MethodGET  Success ResponseThe JSON representation of the case information  Code: 200  Payload:In this example, counters are returned for two flow nodes in the case, Step1 and Step3. For Step3, there are no flow nodes in ready state, so no counter is returned for this.{  &quot;id&quot;: &quot;123&quot;,  &quot;flowNodeStatesCounters&quot;: {&quot;Step1&quot;: {  &quot;completed&quot;: &quot;2&quot;,  &quot;ready&quot;: &quot;1&quot;,  &quot;executing&quot;: &quot;5&quot;},&quot;Step3&quot;: {  &quot;completed&quot;: &quot;10&quot;,  &quot;failed&quot;: &quot;2&quot;}  }}CaseCommentDescriptionRetrieves information about a case comment.Representation{  &quot;id&quot;: &quot;1&quot;,  &quot;content&quot;: &quot;the comment content&quot;,  &quot;tenantId&quot;: &quot;the id of the tenant the comment is associated to&quot;,  &quot;processInstanceId&quot;: &quot;the process instance(case) the comment is associated to&quot;,  &quot;postDate&quot;: &quot;the comment creation date&quot;,  &quot;userId&quot;: &quot;the user that created the comment&quot;}MethodsThe method used for this resource is:  GET - Search for comments  POST - Add a commentResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  userIdNote: if the userId is not provided as a deploy parameter, the userId property of a comment is filled with the system user :{  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;userName&quot;: &quot;System&quot;}Create a comment  URL/API/bpm/comment  MethodPOST  Request PayloadThe process instance (case) id and the comment content, in JSON{  &quot;processInstanceId&quot;:&quot;5777042023671752656&quot;,  &quot;content&quot;: &quot;The case has been started&quot;}Success ResponseThe JSON representation of a case comment  Code: 200  Payload:{  &quot;content&quot;: &quot;test&quot;,  &quot;tenantId&quot;: &quot;1&quot;,  &quot;id&quot;: &quot;20005&quot;,  &quot;processInstanceId&quot;: &quot;1&quot;,  &quot;postDate&quot;: &quot;2016-06-16 14:51:33.053&quot;,  &quot;userId&quot;: &quot;30&quot;}Search for comments  URL/API/bpm/commentExample: /API/bpm/comment?p=0&amp;amp;c=10&amp;amp;o=postDate%20DESC&amp;amp;f=processInstanceId%3d1&amp;amp;d=userId  MethodGET  Data ParamsStandard search parameters are available.  o: you can sort on the postDate  f: filter of the search. Available filters are :  supervisor_id  user_id  processInstanceIdYou cannot use supervisor_id and user_id filter at the same time.  Success ResponseJSON representations of matching comments  Code: 200  Payload:[  {&quot;content&quot;: &quot;Need to review the last inputs of this case&quot;,&quot;tenantId&quot;: &quot;1&quot;,&quot;id&quot;: &quot;20005&quot;,&quot;processInstanceId&quot;: &quot;1&quot;,&quot;postDate&quot;: &quot;2016-06-16 14:51:33.053&quot;,&quot;userId&quot;: {  &quot;last_connection&quot;: &quot;2016-06-16 14:49:37.067&quot;,  &quot;created_by_user_id&quot;: &quot;-1&quot;,  &quot;creation_date&quot;: &quot;2016-06-15 11:37:22.709&quot;,  &quot;id&quot;: &quot;30&quot;,  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;enabled&quot;: &quot;true&quot;,  &quot;title&quot;: &quot;Mr&quot;,  &quot;manager_id&quot;: &quot;0&quot;,  &quot;job_title&quot;: &quot;Chief Executive Officer&quot;,  &quot;userName&quot;: &quot;william.jobs&quot;,  &quot;lastname&quot;: &quot;Jobs&quot;,  &quot;firstname&quot;: &quot;William&quot;,  &quot;password&quot;: &quot;&quot;,  &quot;last_update_date&quot;: &quot;2016-06-15 11:37:22.709&quot;}  }, {&quot;content&quot;: &quot;The task &quot;Etape1&quot; is now assigned to walter.bates&quot;,&quot;tenantId&quot;: &quot;1&quot;,&quot;id&quot;: &quot;20003&quot;,&quot;processInstanceId&quot;: &quot;1&quot;,&quot;postDate&quot;: &quot;2016-06-15 12:36:18.541&quot;,&quot;userId&quot;: {  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;userName&quot;: &quot;System&quot;}  }]ArchivedCaseCommentDescriptionRetrieves information about the comment of an archived case.Representation{  &quot;id&quot;: &quot;1&quot;,  &quot;content&quot;: &quot;the comment content&quot;,  &quot;processInstanceId&quot;: &quot;the process instance(case) the comment is associated to&quot;,  &quot;postDate&quot;: &quot;the comment creation date&quot;,  &quot;archivedDate&quot;: &quot;the date set when the case was archived&quot;  &quot;userId&quot;: &quot;the user that created the comment&quot;}MethodsThe method used for this resource is:  GET - Search for archived commentsResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  userIdNote: if the userId is not provided as a deploy parameter, the userId property of a comment is filled with the system user :{  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;userName&quot;: &quot;System&quot;}Search for archived comments  URL/API/bpm/archivedCommentExample: /API/bpm/archivedComment?p=0&amp;amp;c=10&amp;amp;o=postDate%20DESC&amp;amp;f=processInstanceId%3d1&amp;amp;d=userId  MethodGET  Data ParamsStandard search parameters are available.  o: you can sort on the postDate and archivedDate  f: filter of the search. Available filters are :  supervisor_id  user_id  processInstanceIdYou cannot use supervisor_id and user_id filter at the same time.  Success ResponseJSON representations of matching comments  Code: 200  Payload:[  {&quot;content&quot;: &quot;Need to review the last inputs of this case&quot;,&quot;id&quot;: &quot;20005&quot;,&quot;processInstanceId&quot;: &quot;1&quot;,&quot;postDate&quot;: &quot;2016-06-16 14:51:33.053&quot;,&quot;archivedDate&quot;: &quot;2016-06-17 10:18:24.723&quot;,&quot;userId&quot;: {  &quot;last_connection&quot;: &quot;2016-06-16 14:49:37.067&quot;,  &quot;created_by_user_id&quot;: &quot;-1&quot;,  &quot;creation_date&quot;: &quot;2016-06-15 11:37:22.709&quot;,  &quot;id&quot;: &quot;30&quot;,  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;enabled&quot;: &quot;true&quot;,  &quot;title&quot;: &quot;Mr&quot;,  &quot;manager_id&quot;: &quot;0&quot;,  &quot;job_title&quot;: &quot;Chief Executive Officer&quot;,  &quot;userName&quot;: &quot;william.jobs&quot;,  &quot;lastname&quot;: &quot;Jobs&quot;,  &quot;firstname&quot;: &quot;William&quot;,  &quot;password&quot;: &quot;&quot;,  &quot;last_update_date&quot;: &quot;2016-06-15 11:37:22.709&quot;}  }, {&quot;content&quot;: &quot;The task &quot;Etape1&quot; is now assigned to walter.bates&quot;,&quot;id&quot;: &quot;20003&quot;,&quot;processInstanceId&quot;: &quot;1&quot;,&quot;postDate&quot;: &quot;2016-06-15 12:36:18.541&quot;,&quot;archivedDate&quot;: &quot;2016-06-17 10:18:24.723&quot;,&quot;userId&quot;: {  &quot;icon&quot;: &quot;/default/icon_user.png&quot;,  &quot;userName&quot;: &quot;System&quot;}  }]ProcessProcessDescriptionDeploy and manage process definitions](/bonita_doc/bonita/7.8/application-and-process-design/application-and-process-design-overview/key-concepts). In addition, you can instantiate a process, which will create a new process instance ().IdentifierThe ID of the process definition (a long value).Representation{  &quot;id&quot;:&quot;the identifier of the process definition (long)&quot;,  &quot;icon&quot;:&quot;icon path (string)&quot;,  &quot;displayDescription&quot;:&quot;the human readable activity description (string)&quot;,  &quot;deploymentDate&quot;:&quot;the date when the process definition was deployed (date)&quot;,  &quot;description&quot;:&quot;the process description (string)&quot;,  &quot;activationState&quot;:&quot;the state of the process definition (ENABLED or DISABLED)&quot;,  &quot;name&quot;:&quot;the process name (string)&quot;,  &quot;deployedBy&quot;:&quot;the id of the user who deployed the process (integer)&quot;,  &quot;displayName&quot;:&quot;the human readable process description (string)&quot;,  &quot;actorinitiatorid&quot;:&quot;the id of the actor that can initiate cases of the process&quot;,  &quot;last_update_date&quot;:&quot;the date when the process definition was last updated (date)&quot;,  &quot;configurationState&quot;:&quot;the configuration state of the process (UNRESOLVED or RESOLVED)&quot;,  &quot;version&quot;:&quot;the version of the process (string)&quot;}MethodsThe methods used for this resource are:  POST - Create a process  GET - Read a process or search for a process  PUT - Update a processResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  deployedByDeploy a process definitionA process resource is created using the content of a .bar file that has previously been uploaded, using the processUpload servlet http://.../bonita/portal/processUpload,to get the process archive path.  URL/API/bpm/process  MethodPOST  Request Payload{  &quot;fileupload&quot;: &quot;D:bonita-studioBonitaSubscription-7.6.3workspacetomcatbonitaclienttenants1tmptmp_4431838172282406107.bar&quot; // the process archive path}Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;8216934689697197160&quot;,&quot;icon&quot;:&quot;&quot;,&quot;displayDescription&quot;:&quot;&quot;,  &quot;deploymentDate&quot;:&quot;2015-01-02, 15:04:30.527&quot;  &quot;description&quot;:&quot;&quot;,  &quot;activationState&quot;:&quot;DISABLED&quot;,  &quot;name&quot;:&quot;Pool&quot;,&quot;deployedBy&quot;:&quot;4&quot;,  &quot;displayName&quot;:&quot;Pool&quot;,  &quot;actorinitiatorid&quot;:&quot;3&quot;,   &quot;last_update_date&quot;:&quot;2015-01-02 5:04:30.587&quot;,  &quot;configurationState&quot;:&quot;RESOLVED&quot;,&quot;version&quot;:&quot;1.0&quot;}Read a processRead a process definition  URL/API/bpm/process/:processId  MethodGET  Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;1&quot;,  &quot;icon&quot;:&quot;/default/process.png&quot;,  &quot;displayDescription&quot;:&quot;process description&quot;,  &quot;deploymentDate&quot;:&quot;2015-01-02 14:21:18.421&quot;,  &quot;description&quot;:&quot;another process description&quot;,  &quot;activationState&quot;:&quot;ENABLED&quot;,  &quot;name&quot;:&quot;Pool1&quot;,  &quot;deployedBy&quot;:&quot;2&quot;,  &quot;displayName&quot;:&quot;Pool1&quot;,  &quot;actorinitiatorid&quot;:&quot;2&quot;,  &quot;last_update_date&quot;:&quot;2015-01-02 14:21:18.529&quot;,  &quot;configurationState&quot;:&quot;RESOLVED&quot;,  &quot;version&quot;:&quot;1.0&quot;}Update a processYou can update the following fields of a process definition:  displayDescription  displayName  activationState (to toggle between the possible values, DISABLED and ENABLED)URL/API/bpm/process/:processId  MethodPUT  Request PayloadThe fields to be updated, in JSON{  &quot;displayName&quot;:&quot;Leave booking process&quot;}Success ResponseA process in JSON  Code: 200  Payload:{  &quot;id&quot;:&quot;1&quot;,  &quot;icon&quot;:&quot;/default/process.png&quot;,  &quot;displayDescription&quot;:&quot;process description&quot;,  &quot;deploymentDate&quot;:&quot;2015-01-02 14:21:18.421&quot;,  &quot;description&quot;:&quot;another process description&quot;,  &quot;activationState&quot;:&quot;ENABLED&quot;,  &quot;name&quot;:&quot;Pool1&quot;,  &quot;deployedBy&quot;:&quot;2&quot;,  &quot;displayName&quot;:&quot;Leave booking process&quot;,  &quot;actorinitiatorid&quot;:&quot;2&quot;,  &quot;last_update_date&quot;:&quot;2015-02-23 14:29:02.249&quot;,  &quot;configurationState&quot;:&quot;RESOLVED&quot;,  &quot;version&quot;:&quot;1.0&quot;}Search for a processSearch for processes that match the search criteria.  URL/API/bpm/processExample:  MethodGET  Data ParamsStandard search parameters are available.  s: search on “name”, “displayName” or “version”  o: can order by “name”, “version”, “deploymentDate”, “deployedBy”, “activationState”, “configurationState”, “processId”, “displayName”, “lastUpdateDate”, “categoryId”, “label”  f: can filter on “name”, “version”, “deploymentDate”, “deployedBy”, “activationState” with the value DISABLED or ENABLED, “configurationState” with the value UNRESOLVED, or RESOLVED, “processId”, “displayName”, “lastUpdateDate”, “categoryId”, “label”, “supervisor_id”  d: extend resource response parameters of this resource are available.Success ResponseA JSON representation of the matched processes.  Code: 200  Retrieve the design for a processProcess design can be retrived client side.  URL/API/bpm/process/:processId/design  MethodGET  Success ResponseThe process design object. The JSON returned is a representation of the DesignProcessDefinition instance of the given process id.  Code: 200  Instantiate a processRetrieve the instantiation contract for a processProcess instantiation contract elements can be retrived client side.  URL/API/bpm/process/:processId/contract  MethodGET  Success ResponseThe task contract elements  Code: 200  Payload:{&quot;constraints&quot;:[  {&quot;name&quot;:&quot;ticket_account&quot;,  &quot;expression&quot;:&quot;ticket_account!=null &amp;amp;&amp;amp; !ticket_account.toString().isEmpty()&quot;,  &quot;explanation&quot;:&quot;input ticket_account is mandatory&quot;,  &quot;inputNames&quot;:[  &quot;ticket_account&quot;  ],  &quot;constraintType&quot;:&quot;MANDATORY&quot;},{&quot;name&quot;:&quot;ticket_description&quot;,  &quot;expression&quot;:&quot;ticket_description!=null &amp;amp;&amp;amp; !ticket_description.toString().isEmpty()&quot;,  &quot;explanation&quot;:&quot;input ticket_description is mandatory&quot;,  &quot;inputNames&quot;:[  &quot;ticket_description&quot;  ],  &quot;constraintType&quot;:&quot;MANDATORY&quot;},{&quot;name&quot;:&quot;ticket_subject&quot;,  &quot;expression&quot;:&quot;ticket_subject!=null &amp;amp;&amp;amp; !ticket_subject.toString().isEmpty()&quot;,  &quot;explanation&quot;:&quot;input ticket_subject is mandatory&quot;,  &quot;inputNames&quot;:[  &quot;ticket_subject&quot;  ],  &quot;constraintType&quot;:&quot;MANDATORY&quot;}  ],  &quot;inputs&quot;:[  {&quot;description&quot;:null,  &quot;name&quot;:&quot;ticket_account&quot;,  &quot;multiple&quot;:false,  &quot;type&quot;:&quot;TEXT&quot;  &quot;inputs&quot;:[]},{&quot;description&quot;:null,  &quot;name&quot;:&quot;ticket_description&quot;,  &quot;multiple&quot;:false,  &quot;type&quot;:&quot;TEXT&quot;  &quot;inputs&quot;:[]},{&quot;description&quot;:null,  &quot;name&quot;:&quot;ticket_subject&quot;,  &quot;multiple&quot;:false,  &quot;type&quot;:&quot;TEXT&quot;  &quot;inputs&quot;:[]}  ]}Start a process using an instantiation contractThis method will create a new process instance (case)  URL/API/bpm/process/:processId/instantiation  MethodPOST  Request PayloadContract element values{&quot;ticket_account&quot;:&quot;CustomerA&quot;,  &quot;ticket_description&quot;:&quot;issue description&quot;,  &quot;ticket_subject&quot;:&quot;Issue 1&quot;}Success ResponseThe created case ID 201 OK or a contract violation explanation in case of a 400 Bad request  Code: 201  Payload:{&quot;caseId&quot;:&quot;125713789879465465&quot;}  Error Response  Code: 400  Payload:{&quot;exception&quot;:&quot;class org.bonitasoft.engine.bpm.contract.ContractViolationException&quot;,  &quot;message&quot;:&quot;USERNAME=walter.bates | Contract is not valid: &quot;,  &quot;explanations&quot;:[  &quot;Expected input [ticket_account] is missing&quot;,&quot;Expected input [ticket_description] is missing&quot;,&quot;Expected input [ticket_subject] is missing&quot;  ]}Diagram (Subscription editions only)DescriptionUse the diagram resource to access the process diagram xml representation. This is necessary for drawing the diagram.IdentifierSimple, the ID of the process for which you want download the diagramRepresentationThe XML encoding of the diagram.MethodsThe methods used for this resource are:  GET - Retrieve the XML definition of the diagramRetrieve a process diagram xml file  URL/API/bpm/diagram/:processId  MethodGET  Success ResponseRaw XML file containing the diagram definition  Code: 200  ProcessParameterDescriptionA process parameter is a variable attached to process. The parameter value is set at deployment, and applies to all cases of the process. This feature is available in Enterprise, Performance, Efficiency, and Teamwork editions.IdentifierA compound identifier constructed from process_id/name where process_id is a long value and name is the name of the process parameter.Representation{  &quot;process_id&quot;:&quot;the identifier of the process definition&quot;,  &quot;process_name&quot;:&quot;the name of the related process&quot;,   &quot;description&quot;:&quot;the description of the parameter&quot;,   &quot;name&quot;:&quot;the name of the parameter&quot;,   &quot;value&quot;:&quot;the value of the parameter&quot;,   &quot;process_version&quot;:&quot;the version of the process&quot;,   &quot;type&quot;:&quot;the type of the parameter&quot; }MethodsThe methods used for this resource are:  GET - Read a resource or search for a resource  PUT - Update a resourceRead a processParameterYou can read a process parameter using its compound id (process_id/name)  URL/API/bpm/processParameter/:processId/:name  MethodGET  Request PayloadSuccess ResponseProcess parameter resource  Code: 200  Payload:{  &quot;process_id&quot;: &quot;4880205209556178729&quot;,  &quot;process_name&quot;: &quot;myProcessName&quot;,  &quot;description&quot;: &quot;myProcessDescription&quot;,  &quot;name&quot;: &quot;myParameterName&quot;,  &quot;value&quot;: &quot;myParameterValue&quot;,  &quot;process_version&quot;: &quot;1.0&quot;,  &quot;type&quot;: &quot;java.lang.String&quot;}Search for a processParameterWhen you search for a processParameter, do not provide the process_version or process_name. They are needed only when you read a processParameter.  URL/API/bpm/processParameterExample: /API/bpm/processParameter?p=0&amp;amp;c=10&amp;amp;o=name%20ASC&amp;amp;f=process_id%3d4880205209556178729  MethodGET  Data ParamsStandard search parameters are available.  Success ResponseA array of process parameters  Code: 200  Payload:[  {&quot;process_id&quot;: &quot;4880205209556178729&quot;,&quot;process_name&quot;: &quot;&quot;,&quot;description&quot;: &quot;&quot;,&quot;name&quot;: &quot;d&quot;,&quot;value&quot;: &quot;n&quot;,&quot;process_version&quot;: &quot;&quot;,&quot;type&quot;: &quot;java.lang.String&quot;  }]Update a processParameter (Subscription edition only)You can update only a process parameter value using the API. If you specify values for other fields in the update request, they are ignored.  URL/API/bpm/processParameter/:processId/:name  MethodPUT  Request PayloadA process parameter resource{  &quot;value&quot;:&quot;myNewValue&quot;}Success Response  Code: 200  ProcessResolutionProblemDescriptionThis resource represents a problem in a process that needs to be resolved for the process to run. It can be an actor, a connector implementation, or a parameter (in the Enterprise, Performance, Efficiency, or Teamwork edition).Representation{  &quot;message&quot;:&quot;resolution problem&quot;,  &quot;resource_id&quot;:&quot;id of the unresolved resource&quot;,  &quot;target_type&quot;:&quot;the type of the unresolved resource (parameter, actor, or connector)&quot;}MethodsThe methods used for this resource are:  GET - search for process resolution problemsSearch for process resolution problemsThis is the only method supported by this resource. It should be used to list the problems that need to be solved before a process can be used.  URL/API/bpm/processResolutionProblemExample: /API/bpm/processResolutionProblem?p=0&amp;amp;c=100&amp;amp;f=process_id%3d8802838415753448432  MethodGET  Data ParamsStandard search parameters are available.Filtering on the process definition ID is mandatory.  f=process_id=&amp;lt;process_definition_id&amp;gt;: this filter is used to indicate the target processSuccess ResponseA list of process resolution problems in JSON or an empty response body if there is no problem for the process  Code: 200  Payload:[  {&quot;message&quot;:&quot;Actor &#39;Employee actor&#39; does not contain any members&quot;,&quot;resource_id&quot;:&quot;3&quot;,&quot;target_type&quot;:&quot;actor&quot;  },  {&quot;message&quot;:&quot;Parameter &#39;username&#39; is not set.&quot;,&quot;resource_id&quot;:&quot;&quot;,&quot;target_type&quot;:&quot;parameter&quot;  }]  Error Response  Code: 404 if the process does not exist  ProcessSupervisorDescriptionThe process supervisor has management rights over a process. He can configure and monitor it.You can give the ProcessSupervisor rights to some users by specifying a role and or a group, or a specific user.In order to be able to manage the processes he supervises in the portal, a user should also have the profile “Process Manager”.IdentifierA compound identifier constructed from process_id/user_id/role_id/group_id where all Ids are long values.Representation{  &quot;process_id&quot;:&quot;Id of the process&quot;,  &quot;role_id&quot;:&quot;Id of role, or -1 if the supervisor type is not role or membership&quot;,  &quot;group_id&quot;:&quot;Id of group, or -1 if the supervisor type is not group or membership&quot;,  &quot;user_id&quot;:&quot;Id of user, or -1 if the supervisor type is not user&quot;}Methods  POST - Add a process supervisor  GET - Search for process supervisors  DELETE - Remove a process supervisorResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  role_id  group_id  user_idSearch for process supervisors of a given type (user, group, role or membership)  URL/API/bpm/processSupervisorExample: Get the supervisors of type User for the process 8040901857674754544: API/bpm/processSupervisor?c=5&amp;amp;d=user_id&amp;amp;f=process_id%3D8040901857674754544&amp;amp;f=user_id%3D&amp;gt;0&amp;amp;f=group_id%3D-1&amp;amp;f=role_id%3D-1&amp;amp;p=0  MethodGET  Data ParamsStandard search parameters are available.  f: filter of the search, you need to specify the process_id, and then the user_id, group_id and role_id with one of them (two if you want to filter on group and role) set to &amp;gt;0 and the other ones set to -1. E.g.: f=process_id%3D8040901857674754544&amp;amp;f=user_id%3D&amp;gt;0&amp;amp;f=group_id%3D-1&amp;amp;f=role_id%3D-1  d: extend resource response parameters of this resource are available.Success ResponseJSON representations of matching process supervisors  Code: 200  Payload:[ { &quot;process_id&quot;:&quot;8040901857674754544&quot;, &quot;user_id&quot;:{ &quot;firstname&quot;:&quot;April&quot;,   &quot;icon&quot;:&quot;icons/default/icon_user.png&quot;,   &quot;creation_date&quot;:&quot;2017-09-07 16:44:38.321&quot;,   &quot;userName&quot;:&quot;april.sanchez&quot;,   &quot;title&quot;:&quot;Mrs&quot;,   &quot;created_by_user_id&quot;:&quot;-1&quot;,   &quot;enabled&quot;:&quot;true&quot;,   &quot;lastname&quot;:&quot;Sanchez&quot;,   &quot;last_connection&quot;:&quot;&quot;,   &quot;manager_id&quot;:&quot;3&quot;,   &quot;id&quot;:&quot;2&quot;,   &quot;job_title&quot;:&quot;Compensation specialist&quot;,   &quot;last_update_date&quot;:&quot;2017-09-07 16:44:38.321&quot; }, &quot;role_id&quot;:&quot;-1&quot;, &quot;group_id&quot;:&quot;-1&quot; }, { &quot;process_id&quot;:&quot;8040901857674754544&quot;, &quot;user_id&quot;:{ &quot;firstname&quot;:&quot;Anthony&quot;,   &quot;icon&quot;:&quot;icons/default/icon_user.png&quot;,   &quot;creation_date&quot;:&quot;2017-09-07 16:44:38.456&quot;,   &quot;userName&quot;:&quot;anthony.nichols&quot;,   &quot;title&quot;:&quot;Mr&quot;,   &quot;created_by_user_id&quot;:&quot;-1&quot;,   &quot;enabled&quot;:&quot;true&quot;,   &quot;lastname&quot;:&quot;Nichols&quot;,   &quot;last_connection&quot;:&quot;&quot;,   &quot;manager_id&quot;:&quot;17&quot;,   &quot;id&quot;:&quot;18&quot;,   &quot;job_title&quot;:&quot;Account manager&quot;,   &quot;last_update_date&quot;:&quot;2017-09-07 16:44:38.456&quot; }, &quot;role_id&quot;:&quot;-1&quot;, &quot;group_id&quot;:&quot;-1&quot; } ]Add a process SupervisorYou can assign a process to a user, a group, a role, or a membership (role and group). Note that in order to be able to manage the processes he supervises in the portal, a user should also have the profile “Process Manager”.  URL/API/bpm/processSupervisor  MethodPOST  Request PayloadThe process definition id and either the user, role and/or group id.Add a process supervisor of type User  {&quot;process_id&quot;:&quot;5777042023671752656&quot;,&quot;user_id&quot;:&quot;11&quot;  }Add a process supervisor of type Group  {&quot;process_id&quot;:&quot;5777042023671752656&quot;,&quot;group_id&quot;:&quot;2&quot;  }Add a process supervisor of type Role  {&quot;process_id&quot;:&quot;5777042023671752656&quot;,&quot;role_id&quot;:&quot;114&quot;  }Add a process supervisor of type Membership  {&quot;process_id&quot;:&quot;5777042023671752656&quot;,&quot;role_id&quot;:&quot;11&quot;,&quot;group_id&quot;:&quot;2&quot;  }  Success ResponseThe JSON representation of a process supervisor resource  Code: 200  Payload:{  &quot;process_id&quot;:&quot;5777042023671752656&quot;,  &quot;user_id&quot;:&quot;11&quot;,  &quot;role_id&quot;:&quot;-1&quot;,  &quot;group_id&quot;:&quot;-1&quot;}Delete a process supervisorYou can delete a process supervisor by specifying its compound Id in the body of the request (process_id/user_id/role_id/group_id)  URL/API/bpm/processSupervisor  MethodDELETE  Request Payload  [&quot;8040901857674754544/11/-1/-1&quot;]Success Response  Code: 200  Delete process supervisors in bulk  URL/API/bpm/processSupervisor  MethodDELETE  Request PayloadList of process supervisors Ids to delete  [&quot;8040901857674754544/11/-1/-1&quot;,&quot;8040901857674754544/12/-1/-1&quot;]Success Response  Code: 200  ConnectorsProcessConnectorDependencyDescriptionUse the processConnectorDependency resource to access connector dependencies.IdentifierThe object itselfRepresentation{  &quot;connector_version&quot;:&quot;&amp;lt;connector version&amp;gt;&quot;,  &quot;connector_process_id&quot;:&quot;&amp;lt;process id&amp;gt;&quot;,  &quot;filename&quot;:&quot;&amp;lt;filename representing the connector&amp;gt;&quot;,  &quot;connector_name&quot;:&quot;&amp;lt;connector name&amp;gt;&quot;}MethodsThe methods used for this resource are:  GET - Search for connector dependenciesSearch for connector dependenciesUse a GET method with filters to search for connector dependencies.  URL/API/bpm/processConnectorDependencyExample: Get connector dependencies of the email connector (version 1.0.0) of the process with id = 4971555129176049183: /API/bpm/processConnectorDependency?c=10&amp;amp;p=0&amp;amp;f=connector_process_id=4971555129176049183&amp;amp;f=connector_name=email&amp;amp;f=connector_version=1.0.0  MethodGET  Data ParamsStandard search parameters are available.Mandatory filters: connector_process_id, connector_name, connector_version  Success Response  Code: 200  Payload:[  {&quot;connector_version&quot;:&quot;1.0.0&quot;,&quot;connector_process_id&quot;:&quot;4971555129176049183&quot;,&quot;filename&quot;:&quot;bonita-connector-email-impl-1.0.12.jar&quot;,&quot;connector_name&quot;:&quot;email&quot;  }, {&quot;connector_version&quot;:&quot;1.0.0&quot;,&quot;connector_process_id&quot;:&quot;4971555129176049183&quot;,&quot;filename&quot;:&quot;mail-1.4.5.jar&quot;,&quot;connector_name&quot;:&quot;email&quot;  }]ConnectorFailureDescriptionError message and stackTrace recorded when a connector fails during a process execution. Enterprise and Performance editions only.IdentifierThe ID of the connector failure (a long value).Representation{  &quot;errorMessage&quot;:&quot;the message of the connector failure&quot;,  &quot;connectorInstanceId&quot;:&quot;the ID of the connector instance (see connectorInstance resource documentation)&quot;,  &quot;errorStackTrace&quot;:&quot;the stack trace of the error&quot;}MethodsThe methods used for this resource are:  GET - Read a connector failureRead a connector failureRetrieve the information regarding the failure of the connector execution.  URL/API/bpm/connectorFailure/:connectorFailureId  MethodGET  Success ResponseA connectorFailure resource as JSON  Code: 200  Payload:{  &quot;errorMessage&quot;:&quot;Error while executing the groovy script&quot;,  &quot;connectorInstanceId&quot;:&quot;5&quot;,  &quot;errorStackTrace&quot;:&quot;org.bonitasoft.engine.core.connector.exception.SConnectorException: PROCESS_DEFINITION_ID=8030057793979348308 | PROCESS_NAME=Pool1 | PROCESS_VERSION=1.0 | PROCESS_INSTANCE_ID=5 | ROOT_PROCESS_INSTANCE_ID=5 | FLOW_NODE_DEFINITION_ID=-6089366458284481881 | FLOW_NODE_INSTANCE_ID=12 | FLOW_NODE_NAME=Étape1 | CONNECTOR_DEFINITION_IMPLEMENTATION_CLASS_NAME=expression execution connector | CONNECTOR_INSTANCE_ID=5 | org.bonitasoft.engine.connector.exception.SConnectorException: java.util.concurrent.ExecutionException: java.lang.Exception: Error while executing the groovy scriptntat org.bonitasoft.engine.core.connector.impl.ConnectorServiceImpl.executeConnectorInClassloader(ConnectorServiceImpl.java:332)&quot;}ConnectorInstanceDescriptionRetrieve information about connector instances attached to a process or a flow node.RepresentationReturns a JSON array of connector details:{  &quot;containerType&quot;:&quot;string&quot;,  &quot;connectorId&quot;:&quot;string&quot;,  &quot;id&quot;:&quot;number&quot;,  &quot;name&quot;:&quot;string&quot;,  &quot;activationEvent&quot;:&quot;string&quot;,  &quot;state&quot;:&quot;string&quot;,  &quot;containerId&quot;:&quot;number&quot;,  &quot;version&quot;:&quot;string&quot;}MethodsThe methods used for this resource are:  GET - returns a JSON array of connector detailsRetrieve a list of connector instances attached to a process or a flow node  URL/API/bpm/connectorInstanceExample:  Get information about connectors attached to a flow node with instanceId 15 :/API/bpm/connectorInstance?p=0&amp;amp;c=10&amp;amp;f=containerId%3d15  Get information about connectors attached to a process instance with instanceId 4781948523999597477: /API/bpm/connectorInstance?p=0&amp;amp;c=10&amp;amp;f=containerId%3d4781948523999597477MethodGET  Data ParamsStandard search parameters are available.  f=containerId%3d{id}. The container ID of the process or flow node.Success ResponseA list of connector details  Code: 200  Payload:Retrieve information about connectors attached to a flow node[  {&quot;containerType&quot;:&quot;flowNode&quot;,&quot;connectorId&quot;:&quot;scripting-groovy-script&quot;,&quot;id&quot;:&quot;3&quot;,  &quot;name&quot;:&quot;hello world&quot;,&quot;activationEvent&quot;:&quot;ON_FINISH&quot;,&quot;state&quot;:&quot;TO_BE_EXECUTED&quot;,&quot;containerId&quot;:&quot;15&quot;,&quot;version&quot;:&quot;1.0.0&quot;  },  {&quot;containerType&quot;:&quot;flowNode&quot;,&quot;connectorId&quot;:&quot;webservice&quot;,&quot;id&quot;:&quot;4&quot;,&quot;name&quot;:&quot;webService&quot;,&quot;activationEvent&quot;:&quot;ON_FINISH&quot;,&quot;state&quot;:&quot;TO_BE_EXECUTED&quot;,&quot;containerId&quot;:&quot;15&quot;,&quot;version&quot;:&quot;1.0.0&quot;  }]Retrieve information about connectors attached to a process instance[  {&quot;containerType&quot;:&quot;process&quot;,&quot;connectorId&quot;:&quot;database-access&quot;,&quot;id&quot;:&quot;8&quot;,&quot;name&quot;:&quot;my connector&quot;,&quot;activationEvent&quot;:&quot;ON_FINISH&quot;,&quot;state&quot;:&quot;TO_BE_EXECUTED&quot;,&quot;containerId&quot;:&quot;4781948523999597477&quot;,&quot;version&quot;:&quot;1.0.0&quot;  }]ArchivedConnectorInstanceDescriptionRetrieve information about archived connector instances attached to an archived process or an archived flownode.Representation{  &quot;containerType&quot;:&quot;the type (string) of the containing activity&quot;,  &quot;connectorId&quot;:&quot;the connector id (string)&quot;,  &quot;id&quot;:&quot;the identifier (long) of the connector instance&quot;,  &quot;name&quot;:&quot;the name (string) of the connector&quot;,  &quot;activationEvent&quot;:&quot;the name (string) of hte event that activsted the connector instance&quot;,  &quot;state&quot;:&quot;the state (string) of the connector&quot;,  &quot;archivedDate&quot;: &quot;the date ((&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;)) when this connecctor instance was archived, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;containerId&quot;:&quot;the identifier (long) of the containing activity instance&quot;,  &quot;version&quot;:&quot;the connector version (string)&quot;}MethodsThe methods used for this resource are:  GET - returns a JSON array of archived connector detailsRetrieve a list of archived connector instances  URL/API/bpm/archivedConnectorInstanceExample: Get information about archived instances sort by containerId DESC Request url: /API/bpm/archivedConnectorInstance?p=0&amp;amp;c=10&amp;amp;o=containerId+DESC  MethodGET  Data ParamsStandard search parameters are available.  Success ResponseA list of connector details  Code: 200  Payload:[  {&quot;containerType&quot;:&quot;flowNode&quot;, &quot;connectorId&quot;:&quot;scripting-groovy-script&quot;, &quot;id&quot;:&quot;15&quot;, &quot;name&quot;:&quot;connector1&quot;, &quot;activationEvent&quot;:&quot;ON_ENTER&quot;, &quot;state&quot;:&quot;DONE&quot;,&quot;archivedDate&quot;:&quot;2014-12-01 16:39:19.041&quot;,&quot;containerId&quot;:&quot;34&quot;&quot;version&quot;:&quot;1.0.0&quot;  },  {&quot;containerType&quot;:&quot;process&quot;,&quot;connectorId&quot;:&quot;scripting-groovy-script&quot;,&quot;id&quot;:&quot;16&quot;,&quot;name&quot;:&quot;processConnector&quot;,&quot;activationEvent&quot;:&quot;ON_FINISH&quot;,&quot;state&quot;:&quot;DONE&quot;,&quot;archivedDate&quot;:&quot;2014-12-01 16:39:19.097&quot;&quot;containerId&quot;:&quot;33&quot;,&quot;version&quot;:&quot;1.0.0&quot;  }]Flow NodesFlow NodeDescriptionA flow node (gateway, event, or task) in an open instance of a process.IdentifierThe ID of the flowNode (a long).Representation{  &quot;id&quot;: &quot;the flow node id (long)&quot;,  &quot;displayDescription&quot;: &quot;the human readable flow node description (string)&quot;,  &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who really performed this flow node in case where a substitute did it, or 0 if the flow node was not performed by a substitute&quot;,  &quot;caseId&quot;: &quot;the case id (long) that is associated with this flow node&quot;,  &quot;parentCaseId&quot;: &quot;the parent case id (long) that is associated with this flow node&#39;s case&quot;,  &quot;rootCaseId&quot;: &quot;the root case initiator id (long) that is associated with this flow node&#39;s case&quot;,  &quot;processId&quot;: &quot;the process id (long) that is associated with this flow node&quot;,&quot;  &quot;rootContainerId&quot;: &quot;the root process id (long) of the root case that is associated with this flow node&quot;,  &quot;state&quot;: &quot;the current state of the flow node (string,  for example, ready, completed, failed)&quot;,  &quot;type&quot;: &quot;the flow node type (string)&quot;,  &quot;assigned_id&quot;: &quot;the user id (long) that this flow node is assigned to, or 0 if it is unassigned&quot;,  &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current flow node was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;executedBy&quot;: &quot;the id (long) of the user who executed the flow node, or 0 if the flow node has not been executed&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current flow node&quot;,  &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this flow node, null otherwise&quot;,  &quot;description&quot;: &quot;the flow node description (string)&quot;,  &quot;name&quot;: &quot;the flow node name (string)&quot;,  &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this flow node reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;displayName&quot;: &quot;the display name (string) of this flow node&quot;,  &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this flow node is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this flow node was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,  &quot;parentTaskId&quot; : &quot;in the case of a subtask, the parent task id (long)&quot;}MethodsThe methods used for this resource are:  GET - Read a flow node or search for a flow node  PUT - Replay a flow node (only in Enterprise and Performance editions)Response object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  processId: the id of the process that is associated with the activity  caseId: the id of the case that is associated with the activity  rootCaseId: the root case that is associated with this activity’s case  parentCaseId: the parent case that is associated with this activity’s case  rootContainerId: the root process of the root case that is associated with this activity  executedBy: the user who executed the activity  executedBySubstitute: the user who executed the activity for the executedBy user (only in Effeciency, Performance and Enterprise editions)  actorId: the actor that can execute this activity  assigned_id: the user this activity is assigned to  parentTaskId: in the case of a subtask, the parent taskGet a Flow NodeRetrieve the flow node information of the given id.  URL/API/bpm/flowNode/:id  MethodGET  Data ParamsThe deploy query parameter can be used.  Success ResponseThe JSON representation of the specified flownode  Code: 200  Payload:{  &quot;displayDescription&quot;: &quot;&quot;,  &quot;executedBySubstitute&quot;: &quot;0&quot;,  &quot;processId&quot;: &quot;7596769292810273901&quot;,  &quot;parentCaseId&quot;: &quot;1&quot;,  &quot;state&quot;: &quot;failed&quot;,  &quot;rootContainerId&quot;: &quot;1&quot;,  &quot;type&quot;: &quot;USER_TASK&quot;,  &quot;assigned_id&quot;: &quot;&quot;,  &quot;assigned_date&quot;: &quot;&quot;,  &quot;id&quot;: &quot;77456&quot;,  &quot;executedBy&quot;: &quot;0&quot;,  &quot;caseId&quot;: &quot;1&quot;,  &quot;priority&quot;: &quot;normal&quot;,  &quot;actorId&quot;: &quot;4&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;name&quot;: &quot;Step1&quot;,  &quot;reached_state_date&quot;: &quot;2014-12-10 08:59:47.884&quot;,  &quot;rootCaseId&quot;: &quot;1&quot;,  &quot;displayName&quot;: &quot;Step1&quot;,  &quot;dueDate&quot;: &quot;2014-12-10 09:59:47.855&quot;,  &quot;last_update_date&quot;: &quot;2014-12-10 08:59:47.884&quot;}Search among Flow NodesSearch for flow nodes using given parameters. Flow nodes in states completed, cancelled, or aborted are not retrieved. The search returns an array of flow nodes.  URL/API/bpm/flowNodeExample: Get all the active flow nodes named “Escalate”, ordering the results by state: /API/bpm/flowNode/?p=0&amp;amp;c=10&amp;amp;f=name%3dEscalate&amp;amp;o%3dstate  MethodGET  Data ParamsStandard search parameters are available.The following parameters are available:  o:  name  displayName  state  processDefinitionId  parentProcessInstanceId  parentActivityInstanceId (if the retrieved flow nodes are activities, order by parent activity id)  rootProcessInstanceId  lastUpdateDates: search on any field that can be used to order results  f:  name  state  processId  parentCaseId  rootCaseId  last_update_dated: extend resource response parameters of this resource are available.Success ResponseAn array of JSON representations of flow nodes  Code: 200  Change a Flow Node stateReplay the flow node. (only in Enterprise and Performance editions)  URL/API/bpm/flowNode/:id  MethodPUT  Request Payload{  &quot;state&quot; : &quot;replay&quot;}Success Response  Code: 200  ArchivedFlowNodeDescriptionA flow node (gateway or event or task) in an archived instance of a process.IdentifierThe ID of the flowNode (a long).Representation{  &quot;id&quot;: &quot;the flowNode id (long)&quot;,&quot;sourceObjectId&quot;: &quot;the original id of the flowNode before it was archived&quot;,  &quot;displayDescription&quot;: &quot;the human readable flowNode description (string)&quot;,   &quot;executedBySubstitute&quot;: &quot;the id (long) of the user who really performed this flowNode in case where a substitute did it, or 0 if the flowNode was not performed by a substitute&quot;,   &quot;caseId&quot;: &quot;the case id (long) that is associated with this flowNode&quot;,   &quot;parentCaseId&quot;: &quot;the parent case id (long) that is associated with this flowNode&#39;s case&quot;,   &quot;rootCaseId&quot;: &quot;the root case initiator id (long) that is associated with this flowNode&#39;s case&quot;,   &quot;processId&quot;: &quot;the process id (long) that is associated with this flowNode&quot;,   &quot;rootContainerId&quot;: &quot;the root process id (long) of the root case that is associated with this flowNode&quot;,   &quot;state&quot;: &quot;the current state of the flowNode (string,  for example, ready, completed, failed)&quot;,   &quot;type&quot;: &quot;the flowNode type (string)&quot;,   &quot;assigned_id&quot;: &quot;the user id (long) that this flowNode is assigned to, or 0 if it is unassigned&quot;,   &quot;assigned_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when the current flowNode was assigned, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,   &quot;executedBy&quot;: &quot;the id (long) of the user who executed the flowNode, or 0 if the flowNode has not been executed&quot;,  &quot;priority&quot;: &quot;the priority (string) of the current flowNode&quot;,   &quot;actorId&quot;: &quot;the id (long) of the actor that can execute this flowNode, null otherwise&quot;,   &quot;description&quot;: &quot;the flowNode description (string)&quot;,   &quot;name&quot;: &quot;the flowNode name (string)&quot;,   &quot;reached_state_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this flowNode reached the current state, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,   &quot;displayName&quot;: &quot;the display name (string) of this flowNode&quot;,   &quot;dueDate&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this flowNode is due, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,   &quot;archivedDate&quot;: &quot;the date ((&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;)) when this flowNode was archived, for example &#39;2014-10-17 16:05:42.626&#39;&quot;,  &quot;last_update_date&quot;: &quot;the date (&#39;yyyy-MM-dd HH:mm:ss.SSS&#39;) when this flowNode was last updated, for example &#39;2014-10-17 16:05:42.626)&quot;,   &quot;parentTaskId&quot;: &quot;in the case of a subtask, the parent task id (long)&quot; }MethodsThe methods used for this resource are:  GET - Read a flow node or search for a flow nodeResponse object extension (deploy query parameter)The d (deploy) used to extend response object can be used with :  processId: the id of the process that is associated with the activity  caseId: the id of the case that is associated with the activity  rootCaseId: the root case that is associated with this activity’s case  parentCaseId: the parent case that is associated with this activity’s case  rootContainerId: the root process of the root case that is associated with this activity  executedBy: the user who executed the activity  executedBySubstitute: the user who executed the activity for the executedBy user (only in Effeciency, Performance and Enterprise editions)  actorId: the actor that can execute this activity  assigned_id: the user this activity is assigned to  parentTaskId: in the case of a subtask, the parent taskGet a Flow NodeRetrieve the flow node information of the given id.  URL/API/bpm/archivedFlowNode/:id  MethodGET  Success ResponseThe JSON representation of the specified flownode  Code: 200  Search among flow nodesSearch for flow nodes using given parameters. Flow nodes in state completed, cancelled, aborted are not retrieved. It returns an array of flow nodes.  URL/API/bpm/archivedFlowNode  MethodGET  Data ParamsStandard search parameters are available.The following parameters are available:  o:  name  displayName  state  type  isTerminal  processId  caseId  archivedDates: search on any field that can be used to order results  f:  name  displayName  state  stateId  kind  terminal  processDefinitionId  parentProcessInstanceId  rootProcessInstanceId  parentActivityInstanceId  archivedDate  reachedStateDate  sourceObjectIdd: extend resource response parameters of this resource are available.Success ResponseThe JSON representation of the specified flownode  Code: 200  TimerEventTriggerDescriptionUse this resource to search for BPM timer event triggers. The result enables you to to update the date and time at which the trigger should next execute.IdentifierThe ID of the timer event trigger (a long value), retrieved through search (GET method).Representation{  &quot;id&quot;: &quot;the ID of the timer returned&quot;,  &quot;id_string&quot;: &quot;number&quot; (since 7.0.1)_,  &quot;eventInstanceId&quot;: &quot;the ID of the event instance to which this trigger is related&quot;,  &quot;eventInstanceId_string&quot;: &quot;number&quot; (since 7.0.1),  &quot;executionDate&quot;: &quot;the long value of the next execution date (number of milliseconds from January 1st, 1970 00:00:00)&quot;,  &quot;eventInstanceName&quot;: &quot;the name of the event instance to which this trigger is related&quot;}The string representation added in 7.0.1 for Long attributes is a workaround for the JavaScript integer spectrum issue.MethodsThe methods used for this resource are:  GET - Search for timer event triggers related to a case, with optional search options  PUT - Update a timer event trigger next execution dateSearch for timer event triggers related to a caseSearch for BPM timer event triggers.  URL/API/bpm/timerEventTriggerExample: /API/bpm/timerEventTrigger?caseId=4025&amp;amp;p=0&amp;amp;c=10&amp;amp;  MethodGET  Data Params  caseId: ID of the case (Process instance)Success ResponseA JSON representation of a list of timer event triggers, as described above  Code: 200  Payload:[  {&quot;id&quot;:4015,&quot;id_string&quot;:&quot;4015&quot;,&quot;eventInstanceId&quot;:2,&quot;eventInstanceId_string&quot;:&quot;2&quot;,&quot;executionDate&quot;:1413980484194,&quot;eventInstanceName&quot;:&quot;Minuterie1&quot;  }]Update a timer event trigger next execution dateSpecify the next execution date of a timer event trigger.  URL/API/bpm/timerEventTrigger/:timerEventTriggerID  MethodPUT  Request PayloadA JSON representation of a long value with attribute name “executionDate”{  &quot;executionDate&quot;: 1433980484194}Success ResponseThe actual long value corresponding to the next execution date of the timer event trigger, as a long value  Code: 200  Payload:1433980484194",
      "url": " /bonita/7.8/development/rest-api/bpm-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-8-development-rest-api-customuserinfo-api": {
      "title": "customuserinfo API",
      "content"     : "Customuserinfo APIDescriptionIdentifierParametersRepresentation of customuserinfo/definitionRepresentation of customuserinfo/valueRepresentation of customuserinfo/userMethodsAdd a new definitionDelete a definitionAssociate definitions to usersList the custom user informationSearch custom user infoDescriptionUse the customuserinfo API for managing custom user definitions. Three resources are used: customuserinfo/definition, customuserinfo/value, and customuserinfo/user.IdentifierSimple, the ID of the object (a long value)ParametersNoneRepresentation of customuserinfo/definition{  &quot;id&quot;:&quot;_id of definition_&quot;,  &quot;description&quot;:&quot;_definition description_&quot;,  &quot;name&quot;:&quot;_definition name_&quot;}Representation of customuserinfo/value{  &quot;userId&quot;:&quot;_id of user_&quot;,  &quot;value&quot;:&quot;_content of the value_&quot;,  &quot;definitionId&quot;:&quot;_id of definition_&quot;}Representation of customuserinfo/user{  &quot;userId&quot;:&quot;_id of user_&quot;,  &quot;value&quot;:&quot;_content of the value_&quot;,  &quot;definitionId&quot;:{&quot;id&quot; : &quot;_id of definition_&quot;,&quot;description&quot; : &quot;_definition description_&quot;,&quot;name&quot; : &quot;_definition name_&quot;  }}MethodsThe methods used for these resources are:  GET  POST  PUT  DELETEAdd a new definitionUse the method POST to add a new definition.  URLhttp://localhost:8080/bonita/API/customuserinfo/definitionExample: Add a definition called skill.  MethodPOST  Data Params  Request PayloadJSON representation of definition, without id{  &quot;name&quot;: &quot;skill&quot;,  &quot;description&quot;: &quot;code slayer&quot;}Success Response  Code: 200  Payload:JSON representation of complete definition including generated id{  &quot;id&quot;:&quot;101&quot;,  &quot;description&quot;:&quot;code slayer&quot;,  &quot;name&quot;:&quot;skill&quot;}Delete a definitionUse the DELETE method to delete an existing definition.  URLhttp://localhost:8080/bonita/API/customuserinfo/definition/  MethodDELETEAssociate definitions to usersUse a PUT method to associate users with custom information.  URLhttp://localhost:8080/bonita/API/customuserinfo/value/:userId/:definitionIdExample: Associate the user with id = 1 with the definition with id = 2. http://localhost:8080/bonita/API/customuserinfo/value/1/2  MethodPUT  Request Payload{  &quot;value&quot;:&quot;customUserInfoValue&quot;}Success Response  Code: 200  List the custom user informationUse a GET method to search for definitions.There are no filters, and no search terms. All the definitions are returned.  URL/API/customuserinfo/definition  MethodGET  Data Params  c: number of result per page  p: page numberSuccess Response  Code: 200  Payload:An array of definition objects  Search custom user infoUse a GET method to search for custom user information.  URL/API/customuserinfo/userExample: http://localhost:8080/bonita/API/customuserinfo/user?c=10&amp;amp;p=0&amp;amp;f=userId=1  MethodGET  Data Params (Required)  c: number of result per page  p: page number  f : filter to apply on results with the format f={filter_name}={filter_value}Example: f=userId=idSuccess ResponseAn array of customuserinfo/user objects  Code: 200  ",
      "url": " /bonita/7.8/development/rest-api/customuserinfo-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-8-development-rest-api-form-api": {
      "title": "form API",
      "content"     : "Form APIForm mapping resourceDescriptionIdentifierRepresentationMethodsSearch a form mappingUpdate a form mapping (Efficiency, Performance and Enterprise Editions)Form mapping resourceDescriptionThis resource specifies the mapping of a form to a process or a task. The mapping indicates the technology used to create the form, in the “target” attribute. Possible values are:  URL - an external URL  INTERNAL - a custom page ID  LEGACY - means that the old form application is used for old processes  UNDEFINED - when the form is not present in the definition but is required  NONE - when there is no form needed for the process instantiation or task executionHaving any UNDEFINED mapping prevents the process from being resolved.IdentifierThe ID of the form mapping (a long value).Representation{  &quot;id&quot;: &quot;_the form mapping identifier (long)_&quot;,  &quot;processDefinitionId&quot;: &quot;_the process identifier (long) related to this form mapping_&quot;,  &quot;type&quot;: &quot;_the form mapping type (string) - possible value in [PROCESS_START, PROCESS_OVERVIEW, TASK]_&quot;,  &quot;target&quot;: &quot;_the target (string) - possible value in [URL, INTERNAL, LEGACY, UNDEFINED, NONE]_&quot;,  &quot;task&quot;: &quot;_the task name (string) when type is TASK - null otherwise_&quot;,  &quot;pageId&quot;: &quot;_the custom page identifier (long) when type is INTERNAL - null otherwise_&quot;,  &quot;pageMappingKey&quot;: &quot;_the page mapping key part (string) used to generate the form URL_&quot;,  &quot;lastUpdateBy&quot;: &quot;_the identifier (long) of the user who last updated this form mapping - 0 if no update has been done yet_&quot;,  &quot;lastUpdateDate&quot;: &quot;_the last update date in milliseconds (long) - null if no update has been done yet_&quot;,  &quot;url&quot;: &quot;_the external URL (string) when type is URL - null otherwise_&quot;}MethodsThe methods used for this resource are:  GET - Search for a form mapping  PUT - Update a form mappingSearch a form mappingRequest URL  URL/API/form/mappingExample: /API/form/mapping?p=0&amp;amp;c=10&amp;amp;f=processDefinitionId=7281286536417002543&amp;amp;f=type=TASK  MethodGET  Data ParamsStandard search parameters are available to search form mappings.The following filters can be applied while searching form mappings:  f=processDefinitionId={long} - get form mappings of a specific process definition  f=type=PROCESS_START - get the process start form mapping. Example: http://localhost:8080/bonita/API/form/mapping?c=1&amp;amp;p=0&amp;amp;f=processDefinitionId=123456&amp;amp;f=type=PROCESS_START  f=type=PROCESS_OVERVIEW - get the process overview form mapping. Example: http://localhost:8080/bonita/API/form/mapping?c=10&amp;amp;p=0&amp;amp;f=processDefinitionId=123456&amp;amp;f=type=PROCESS_OVERVIEW  f=type=TASK - get the task form mapping. Example: http://localhost:8080/bonita/API/form/mapping?c=10&amp;amp;p=0&amp;amp;f=processDefinitionId=123456&amp;amp;f=type=TASKSuccess ResponseJSON representation of an array of form mappings  Code: 200  Payload:[  {&quot;id&quot;: 4,&quot;processDefinitionId&quot;: 7281286536417002543,&quot;type&quot;: &quot;TASK&quot;,&quot;target&quot;: &quot;INTERNAL&quot;,&quot;task&quot;: &quot;Give Feedback&quot;,&quot;pageId&quot;: 101,&quot;pageMappingKey&quot;: &quot;taskInstance/myProcess/1.0/Give Feedback&quot;&quot;lastUpdatedBy&quot;: 4,&quot;lastUpdateDate&quot;: 1425466666191,&quot;url&quot;: null  },  {&quot;id&quot;: 5,&quot;processDefinitionId&quot;: 7281286536417002543,&quot;type&quot;: &quot;TASK&quot;,&quot;target&quot;: &quot;URL&quot;,&quot;task&quot;: &quot;Validate Feedback&quot;,&quot;pageId&quot;: null,&quot;pageMappingKey&quot;: &quot;taskInstance/myProcess/1.0/Validate Feedback&quot;,&quot;lastUpdatedBy&quot;: 4,&quot;lastUpdateDate&quot;: 1425295012666,&quot;url&quot;: &quot;http://customerportal.bonitasoft.com&quot;  }]Update a form mapping (Efficiency, Performance and Enterprise Editions)  URL/API/form/mapping/:id  MethodPUT  Request PayloadJSON representation of the form mapping attribute to update - {&quot;pageId&quot;: (long)} or {&quot;url&quot;: (string)} or {} to set the mapping type to NONE{  &quot;url&quot;: &quot;http://myformapp.com/form&quot;}Success Response  Code: 200  ",
      "url": " /bonita/7.8/development/rest-api/form-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-8-development-rest-api-identity-api": {
      "title": "identity API",
      "content"     : "identity APIprofessionalcontactdata and personalcontactdataDescriptionIdentifierRepresentationMethodsCreate contact informationRead a user&#39;s contact informationUpdate a user&#39;s contact informationGroupDescriptionIdentifierRepresentationMethodsCreate a groupRead a groupSearch for a groupUpdate a groupDelete a groupMembershipDescriptionIdentifierRepresentationMethodsCreate a membershipSearch memberships of a userDelete a membershipRoleDescriptionIdentifierRepresentationMethodsCreate a roleRead a roleSearch for a roleUpdate a roleDelete a roleUserDescriptionRepresentationMethodsCreate a userRead a user detailsSearch for a group of usersUpdate a userRemove a userprofessionalcontactdata and personalcontactdataDescriptionAdditional information about a user (personal and professional). Both resources have the same attributes.IdentifierThe user ID (a long value).Representation{  &quot;id&quot;:&quot;user ID&quot;,  &quot;fax_number&quot;:&quot;fax number&quot;,  &quot;building&quot;:&quot;building&quot;,  &quot;phone_number&quot;:&quot;phone number&quot;,  &quot;website&quot;:&quot;website&quot;,  &quot;zipcode&quot;:&quot;zipcode&quot;,  &quot;state&quot;:&quot;state&quot;,  &quot;city&quot;:&quot;city&quot;,  &quot;country&quot;:&quot;country&quot;,  &quot;mobile_number&quot;:&quot;mobile phone number&quot;,  &quot;address&quot;:&quot;address&quot;,  &quot;room&quot;:&quot;room&quot;,  &quot;email&quot;:&quot;email&quot;}MethodsThe methods used for this resource are:  POST - Create a user’s contact information  GET - Read a user’s contact information  PUT - Update a user’s contact informationCreate contact information  URL/API/identity/professionalcontactdataor/API/identity/personalcontactdata  MethodPOST  Request PayloadA partial representation of a user’s contact information in JSON including the user ID (mandatory){  &quot;id&quot;:&quot;4&quot;,  &quot;fax_number&quot;:&quot;484-302-0766&quot;,  &quot;building&quot;:&quot;70&quot;,  &quot;phone_number&quot;:&quot;484-302-5766&quot;,  &quot;zipcode&quot;:&quot;19108&quot;,  &quot;state&quot;:&quot;PA&quot;,  &quot;city&quot;:&quot;Philadelphia&quot;,  &quot;country&quot;:&quot;United States&quot;,  &quot;address&quot;:&quot;Renwick Drive&quot;,  &quot;email&quot;:&quot;walter.bates@acme.com&quot;}Success ResponseThe full JSON representation of the user’s contact information that was created  Code: 200  Payload:{  &quot;id&quot;:&quot;4&quot;,  &quot;fax_number&quot;:&quot;484-302-0766&quot;,  &quot;building&quot;:&quot;70&quot;,  &quot;phone_number&quot;:&quot;484-302-5766&quot;,  &quot;website&quot;:&quot;&quot;,  &quot;zipcode&quot;:&quot;19108&quot;,  &quot;state&quot;:&quot;PA&quot;,  &quot;city&quot;:&quot;Philadelphia&quot;,  &quot;country&quot;:&quot;United States&quot;,  &quot;mobile_number&quot;:&quot;&quot;,  &quot;address&quot;:&quot;Renwick Drive&quot;,  &quot;email&quot;:&quot;walter.bates@acme.com&quot;,  &quot;room&quot;:&quot;&quot;}  Error Response  Code: 403 if contact information for this user already exists  Read a user’s contact information  URL/API/identity/professionalcontactdata/:userIdor/API/identity/personalcontactdata/:userId  MethodGET  Success ResponseA user’s contact information in JSON  Code: 200  Payload:{  &quot;id&quot;:&quot;4&quot;,  &quot;fax_number&quot;:&quot;484-302-0766&quot;,  &quot;building&quot;:&quot;70&quot;,  &quot;phone_number&quot;:&quot;484-302-5766&quot;,  &quot;website&quot;:&quot;&quot;,  &quot;zipcode&quot;:&quot;19108&quot;,  &quot;state&quot;:&quot;PA&quot;,  &quot;city&quot;:&quot;Philadelphia&quot;,  &quot;country&quot;:&quot;United States&quot;,  &quot;mobile_number&quot;:&quot;&quot;,  &quot;address&quot;:&quot;Renwick Drive&quot;,  &quot;email&quot;:&quot;walter.bates@acme.com&quot;,  &quot;room&quot;:&quot;&quot;}  Error Response  Code: 404 if no user with this ID is found  Update a user’s contact information  URL/API/identity/professionalcontactdata/:userIdor/API/identity/personalcontactdata/:userId  MethodPUT  Request PayloadA partial representation of a user’s contact information in JSON with at least the mandatory “name” attribute{  &quot;fax_number&quot;:&quot;484-302-0766&quot;,  &quot;building&quot;:&quot;70&quot;,  &quot;phone_number&quot;:&quot;484-302-5766&quot;,  &quot;zipcode&quot;:&quot;19108&quot;,  &quot;state&quot;:&quot;PA&quot;,  &quot;city&quot;:&quot;Philadelphia&quot;,  &quot;country&quot;:&quot;United States&quot;,  &quot;address&quot;:&quot;Renwick Drive&quot;,  &quot;email&quot;:&quot;walter.bates@acme.com&quot;}Error Response  Code: 404 if no user with this ID is found  GroupDescriptionThe group a user belongs to. Groups have a hierarchy (subgroups can be created inside a group).IdentifierThe ID of the group (a long value).Representation{  &quot;id&quot;:&quot;group ID&quot;,   &quot;name&quot;:&quot;display name&quot;,   &quot;displayName&quot;:&quot;name&quot;,   &quot;parent_path&quot;:&quot;the path of the parent group of this group (empty if the group has no parent)&quot;,   &quot;path&quot;:&quot;the full path of the group (including its parent path)&quot;,   &quot;description&quot;:&quot;description&quot;,   &quot;creation_date&quot;:&quot;creation date (format: &quot;2014-12-31 15:17:24.736&quot;)&quot;,   &quot;created_by_user_id&quot;:&quot;id of the user who created the group (-1 if the group was created by the tenant admin or by an organisation import)&quot;,   &quot;last_update_date&quot;:&quot;last update date (format: &quot;2014-12-31 15:17:24.736&quot;)&quot;,   &quot;icon&quot;:&quot;icon path&quot;}MethodsThe methods used for this resource are:  POST - Create a group  GET - Read a group or search for a group  PUT - Update a group  DELETE - Remove a groupCreate a group  URL/API/identity/group  MethodPOST  Data Params  Request PayloadA partial representation of a group in JSON with at least the mandatory “name” attribute{  &quot;icon&quot;:&quot;&quot;,&quot;name&quot;:&quot;HR&quot;,  &quot;displayName&quot;:&quot;Human Resources&quot;,  &quot;parent_group_id&quot;:&quot;1&quot;,  &quot;description&quot;:&quot;Human resources department&quot;}Success ResponseThe full JSON representation of the group that was created  Code: 200  Payload:{  &quot;id&quot;:&quot;14&quot;,  &quot;creation_date&quot;:&quot;2014-12-02 16:19:28.925&quot;,  &quot;created_by_user_id&quot;:&quot;4&quot;,  &quot;icon&quot;:&quot;&quot;,&quot;parent_path&quot;:&quot;/acme&quot;  ,&quot;description&quot;:&quot;Human resources department&quot;,  &quot;name&quot;:&quot;HR&quot;,  &quot;path&quot;:&quot;/acme/HR&quot;,  &quot;displayName&quot;:&quot;Human Resources&quot;,  &quot;last_update_date&quot;:&quot;2014-12-02 16:19:28.925&quot;}  Error Response  Code: 403 if a group with the same name and parent already exists  Read a group  URL/API/identity/group/:groupId  MethodGET  Success ResponseA group in JSON  Code: 200  Payload:{  &quot;id&quot;:&quot;14&quot;,  &quot;creation_date&quot;:&quot;2014-12-02 16:19:28.925&quot;,  &quot;created_by_user_id&quot;:&quot;4&quot;,  &quot;icon&quot;:&quot;&quot;,&quot;parent_path&quot;:&quot;/acme&quot;,  &quot;description&quot;:&quot;Human resources department&quot;,  &quot;name&quot;:&quot;HR&quot;,  &quot;path&quot;:&quot;/acme/HR&quot;,  &quot;displayName&quot;:&quot;Human Resources&quot;,  &quot;last_update_date&quot;:&quot;2014-12-02 16:19:28.925&quot;}  Error Response  Code: 404 if no group with this ID is found  Search for a group  URL/API/identity/groupExample: /API/identity/group?p=0&amp;amp;c=100&amp;amp;f=parent_path%3d/acme&amp;amp;d=parent_group_id&amp;amp;o=name%20ASC  MethodGET  Data ParamsStandard search parameters are available to search form mappings.It is possible to filter on the following attributes:  name=&amp;lt;group_name&amp;gt;  displayName=&amp;lt;group_displayName&amp;gt;  parent_path=&amp;lt;path_of_parent_group&amp;gt;It is possible to order by the value of the following attributes:  o=id ASC ou o=id DESC)  o=name ASC ou o=name DESC  o=displayName ASC ou o=displayName DESCIt is also possible to retrieve the parent group ID.  d=&amp;lt;parent_group_id&amp;gt;Success ResponseA list of groups in JSON  Code: 200  Payload:[  {&quot;id&quot;:&quot;3&quot;,&quot;creation_date&quot;:&quot;2014-12-02 11:33:48.501&quot;,&quot;created_by_user_id&quot;:&quot;-1&quot;,&quot;icon&quot;:&quot;&quot;,&quot;parent_path&quot;:&quot;/acme&quot;,&quot;description&quot;:&quot;This group represents the finance department of the ACME organization&quot;,&quot;name&quot;:&quot;finance&quot;,&quot;path&quot;:&quot;/acme/finance&quot;,&quot;parent_group_id&quot;:&quot;1&quot;,&quot;displayName&quot;:&quot;Finance&quot;,&quot;last_update_date&quot;:&quot;2014-12-02 11:33:48.501&quot;  }, {&quot;id&quot;:&quot;14&quot;,&quot;creation_date&quot;:&quot;2014-12-02 16:19:28.925&quot;,&quot;created_by_user_id&quot;:&quot;4&quot;,&quot;icon&quot;:&quot;&quot;,&quot;parent_path&quot;:&quot;/acme&quot;,&quot;description&quot;:&quot;Human resources department&quot;,&quot;name&quot;:&quot;HR&quot;,&quot;path&quot;:&quot;/acme/HR&quot;,&quot;parent_group_id&quot;:&quot;1&quot;,&quot;displayName&quot;:&quot;Human Resources&quot;,&quot;last_update_date&quot;:&quot;2014-12-02 16:19:28.925&quot;  }]Update a group  URL/API/identity/group/:groupId  MethodPUT  Request PayloadA partial representation of a group in JSON with at least the mandatory “name” attribute{  &quot;name&quot;:&quot;HR&quot;,  &quot;displayName&quot;:&quot;Humman resources&quot;}Success ResponseThe full JSON representation of the group that was updated  Code: 200  Payload:{  &quot;id&quot;:&quot;14&quot;,  &quot;creation_date&quot;:&quot;2014-12-02 16:19:28.925&quot;,  &quot;created_by_user_id&quot;:&quot;4&quot;,  &quot;icon&quot;:&quot;&quot;,  &quot;parent_path&quot;:&quot;/acme&quot;,  &quot;description&quot;:&quot;Human resources department&quot;,  &quot;name&quot;:&quot;HR&quot;,  &quot;path&quot;:&quot;/acme/HR&quot;,  &quot;displayName&quot;:&quot;Human resources&quot;,  &quot;last_update_date&quot;:&quot;2014-12-03 17:18:27.542&quot;}  Error Response  Code: 403 if another group with the same name and parent already exists404 if no group with this ID is found  Delete a group  URL/API/identity/group/:groupId  MethodDELETE  Success Response  Code: 200Error Response  Code: 404 if no group with this ID is found  MembershipDescriptionManage membership of users. There is a membership when a user belongs to a group and a role. Use this resource to add, search, and delete memberships.IdentifierA compound identifier constructed from user_id/group_id/role_id where each id is a long value.Representation{  &quot;assigned_date&quot;:&quot;creation date (format: &quot;2014-12-31 15:17:24.736&quot;)&quot;,  &quot;role_id&quot;:&quot;id of the role of this membership&quot;,  &quot;assigned_by_user_id&quot;:&quot;id of the user who created the membership (-1 if the role was created by the tenant admin or by an organisation import)&quot;,  &quot;group_id&quot;:&quot;id of the group of this membership&quot;,  &quot;user_id&quot;:&quot;id of the user in this membership&quot;}MethodsThe methods used for this resource are:  POST - Create a membership  GET - Search for memberships of a user  DELETE - Remove a membership  DELETE - Remove a membershipCreate a membershipThis action creates (assigns) a membership to a user.  URL/API/identity/membership  MethodPOST  Request PayloadA partial representation of a membership object with the mandatory “user_id”, “group_id” and “role_id” attributes{  &quot;user_id&quot;:&quot;4&quot;,  &quot;group_id&quot;:&quot;5&quot;,  &quot;role_id&quot;:&quot;1&quot;}Success ResponseThe full JSON representation of the membership that was created  Code: 200  Payload:{  &quot;assigned_date&quot;:&quot;2014-12-02 17:57:09.315&quot;,  &quot;role_id&quot;:&quot;1&quot;,  &quot;assigned_by_user_id&quot;:&quot;-1&quot;,  &quot;group_id&quot;:&quot;5&quot;,  &quot;user_id&quot;:&quot;4&quot;}  Error Response  Code: 403 if a membership already exists  Search memberships of a userThis action search memberships of a user.  URL/API/identity/membership  MethodGET  Data ParamsStandard search parameters are available.Required  filter is mandatory: user_id=&amp;lt;id of the user&amp;gt;It is possible to use the deploy option to retrieve the value of elements specified by an attribute value. For example, if you specify d=group_id, the result will contain the group details in place of the group id.  group d=group_id  role d=role_id  user d=user_id  user that created the membership d=assigned_by_user_idIt is possible to order by the value of the following attributes:  o=ROLE_NAME_ASC or o=ROLE_NAME_DESC  o=GROUP_NAME_ASC or o=GROUP_NAME_DESC  o=ASSIGNED_DATE_ASC or o=ASSIGNED_DATE_DESCExample: Get the memberships for the user with id 125, and return the role details associated with each membership: /API/identity/membership?p=0&amp;amp;c=10&amp;amp;f=user_id%3d125&amp;amp;d=role_idSuccess Response  Code: 200  Payload:[  {&quot;assigned_date&quot;:&quot;2014-12-02 17:57:09.315&quot;,&quot;role_id&quot;: {  &quot;creation_date&quot;:&quot;2014-12-01 18:51:54.791&quot;,  &quot;created_by_user_id&quot;:&quot;4&quot;,  &quot;id&quot;:&quot;4&quot;,  &quot;icon&quot;:&quot;&quot;,  &quot;description&quot;:&quot;manager of the department&quot;,  &quot;name&quot;:&quot;manager&quot;,  &quot;displayName&quot;:&quot;department manager&quot;,  &quot;last_update_date&quot;:&quot;2014-12-01 18:51:54.791&quot;},&quot;assigned_by_user_id&quot;:&quot;12&quot;,&quot;group_id&quot;:&quot;5&quot;,&quot;user_id&quot;:&quot;125&quot;  }]Delete a membershipDelete a membership of a user using the group id and role id.  URL/API/identity/membership/:userId/:groupId/:roleId  MethodDELETE  Success Response  Code: 200  RoleDescriptionThe role of a user in a groupIdentifierThe ID of the role (a long value).Representation{  &quot;id&quot;:&quot;role ID&quot;,  &quot;name&quot;:&quot;display name&quot;,  &quot;displayName&quot;:&quot;name&quot;,  &quot;description&quot;:&quot;description&quot;,  &quot;creation_date&quot;:&quot;creation date (format: &quot;2014-12-31 15:17:24.736&quot;)&quot;,  &quot;created_by_user_id&quot;:&quot;Id of the user who created the role (-1 if the role was created by the tenant admin or by an organisation import)&quot;,  &quot;last_update_date&quot;:&quot;last update date (format: &quot;2014-12-31 15:17:24.736&quot;)&quot;,  &quot;icon&quot;:&quot;icon path&quot;}MethodsThe methods used for this resource are:  POST - Create a role  GET - Read a role or search for a role  PUT - Update a role  DELETE - Remove a roleCreate a role  URL/API/identity/role  MethodPOST  Request PayloadA partial representation of a role in JSON with at least the mandatory “name” attribute{  &quot;icon&quot;:&quot;&quot;,  &quot;name&quot;:&quot;manager&quot;,  &quot;displayName&quot;:&quot;department manager&quot;,  &quot;description&quot;:&quot;manager of the department&quot;}Success ResponseThe full JSON representation of the role that was created  Code: 200  Payload:{  &quot;creation_date&quot;:&quot;2014-12-01 18:51:54.791&quot;,  &quot;created_by_user_id&quot;:&quot;4&quot;,  &quot;id&quot;:&quot;4&quot;,  &quot;icon&quot;:&quot;&quot;,  &quot;description&quot;:&quot;manager of the department&quot;,  &quot;name&quot;:&quot;manager&quot;,  &quot;displayName&quot;:&quot;department manager&quot;,  &quot;last_update_date&quot;:&quot;2014-12-01 18:51:54.791&quot;}  Error Response  Code: 403 if a role with the same name already exists  Read a role  URL/API/identity/role/:roleId  MethodGET  Success ResponseA role in JSON  Code: 200  Payload:{  &quot;creation_date&quot;:&quot;2014-12-01 15:17:24.736&quot;,  &quot;created_by_user_id&quot;:&quot;-1&quot;,  &quot;id&quot;:&quot;1&quot;,  &quot;icon&quot;:&quot;&quot;,  &quot;description&quot;:&quot;&quot;,  &quot;name&quot;:&quot;member&quot;,  &quot;displayName&quot;:&quot;Member&quot;,  &quot;last_update_date&quot;:&quot;2014-12-01 15:17:24.736&quot;}  Error Response  Code: 404 if no role with this ID is found  Search for a role  URL/API/identity/roleExample: /API/identity/role?p=0&amp;amp;c=100&amp;amp;o=displayName ASC  MethodGET  Data ParamsIt is possible to filter on the following attributes  name=&amp;lt;role_name&amp;gt;  displayName=&amp;lt;role_displayName&amp;gt;It is possible to order by the value of the following attributes  id: o=id ASC or o=id DESC  name: o=name ASC or o=name DESC  displayName: o=displayName ASC or o=displayName DESCSuccess ResponseA list of roles in JSON  Code: 200  Payload:[  {&quot;creation_date&quot;:&quot;2014-12-01 18:51:54.791&quot;,&quot;created_by_user_id&quot;:&quot;4&quot;,&quot;id&quot;:&quot;4&quot;,&quot;icon&quot;:&quot;&quot;,&quot;description&quot;:&quot;manager of the department&quot;,&quot;name&quot;:&quot;manager&quot;,&quot;displayName&quot;:&quot;department manager&quot;,&quot;last_update_date&quot;:&quot;2014-12-01 18:51:54.791&quot;  },  {&quot;creation_date&quot;:&quot;2014-12-01 15:17:24.736&quot;,&quot;created_by_user_id&quot;:&quot;-1&quot;,&quot;id&quot;:&quot;1&quot;,&quot;icon&quot;:&quot;&quot;,&quot;description&quot;:&quot;&quot;,&quot;name&quot;:&quot;member&quot;,&quot;displayName&quot;:&quot;Member&quot;,&quot;last_update_date&quot;:&quot;2014-12-01 15:17:24.736&quot;  }]Update a role  URL/API/identity/role/:roleId  MethodPUT  Request PayloadA partial representation of a role in JSON with at least the mandatory “name” attribute{  &quot;name&quot;:&quot;Manager&quot;,  &quot;displayName&quot;:&quot;Department manager&quot;}Success ResponseThe full JSON representation of the role that was updated  Code: 200  Payload:{  &quot;creation_date&quot;:&quot;2014-12-01 18:51:54.791&quot;,  &quot;created_by_user_id&quot;:&quot;4&quot;,  &quot;id&quot;:&quot;4&quot;,  &quot;icon&quot;:&quot;&quot;,  &quot;description&quot;:&quot;manager of the department&quot;,  &quot;name&quot;:&quot;Manager&quot;,  &quot;displayName&quot;:&quot;Department manager&quot;,  &quot;last_update_date&quot;:&quot;2014-12-01 18:59:59.361&quot;}  Error Response  Code: 403 : if a role with the same name already exists404 : if no role with this ID is found  Delete a role  URL/API/identity/role/:roleId  MethodDELETE  Success Response  Code: 200Error Response  Code: 404 if no role with this ID is found  UserDescriptionUsed to manage information about users.RepresentationReturns a JSON representation of user details. The “manager_id” and “professional_data” are omitted unless they arerequested in the payload.{  &quot;last_connection&quot;:&quot;date&quot;,  &quot;created_by_user_id&quot;:&quot;number&quot;,  &quot;creation_date&quot;:&quot;date&quot;,  &quot;id&quot;:&quot;number&quot;,  &quot;icon&quot;:&quot;string&quot;,  &quot;enabled&quot;:&quot;true | false&quot;,  &quot;title&quot;:&quot;string&quot;,  &quot;professional_data&quot;: {&quot;fax_number&quot;:&quot;string&quot;,&quot;building&quot;:&quot;string&quot;,&quot;phone_number&quot;:&quot;string&quot;,&quot;website&quot;:&quot;string&quot;,&quot;zipcode&quot;:&quot;string&quot;,&quot;state&quot;:&quot;string&quot;,&quot;city&quot;:&quot;string&quot;,&quot;country&quot;:&quot;string&quot;,&quot;id&quot;:&quot;number&quot;,&quot;mobile_number&quot;:&quot;string&quot;,&quot;address&quot;:&quot;string&quot;,&quot;email&quot;:&quot;string&quot;,&quot;room&quot;:&quot;string&quot;  },  &quot;manager_id&quot;:{&quot;last_connection&quot;:&quot;date&quot;,&quot;created_by_user_id&quot;:&quot;number&quot;,&quot;creation_date&quot;:&quot;date&quot;,&quot;id&quot;:&quot;number&quot;,&quot;icon&quot;:&quot;string&quot;,&quot;enabled&quot;:&quot;true | false&quot;,&quot;title&quot;:&quot;string&quot;,&quot;manager_id&quot;:&quot;number&quot;,&quot;job_title&quot;:&quot;string&quot;,&quot;userName&quot;:&quot;string&quot;,&quot;lastname&quot;:&quot;string&quot;,&quot;firstname&quot;:&quot;string&quot;,&quot;password&quot;:&quot;&quot;,&quot;last_update_date&quot;:&quot;date&quot;  },  &quot;job_title&quot;:&quot;string&quot;,  &quot;userName&quot;:&quot;string&quot;,  &quot;lastname&quot;:&quot;string&quot;,  &quot;firstname&quot;:&quot;string&quot;,  &quot;password&quot;:&quot;&quot;,  &quot;last_update_date&quot;:&quot;date&quot;}MethodsThe methods used for this resource are:  POST - Create a user  GET - Read a user details or search for a group of users  PUT - Update a user  DELETE - Remove a userCreate a user  URL/API/identity/user  MethodPOST  Request PayloadA partial representation of a user in JSON{  &quot;userName&quot;:&quot;New.User&quot;,  &quot;password&quot;:&quot;bpm&quot;,  &quot;password_confirm&quot;:&quot;bpm&quot;,  &quot;icon&quot;:&quot;&quot;,  &quot;firstname&quot;:&quot;New&quot;,  &quot;lastname&quot;:&quot;User&quot;,  &quot;title&quot;:&quot;Mr&quot;,  &quot;job_title&quot;:&quot;Human resources benefits&quot;,  &quot;manager_id&quot;:&quot;3&quot;}Success ResponseThe full JSON representation of the user that was createdAfter creation, the user is in inactive state.  Code: 200  Payload:{  &quot;last_connection&quot;:&quot;&quot;,  &quot;created_by_user_id&quot;:&quot;4&quot;,  &quot;creation_date&quot;:&quot;2014-12-09 17:43:28.291&quot;,  &quot;id&quot;:&quot;101&quot;,  &quot;icon&quot;:&quot;/default/icon_user.png&quot;,  &quot;enabled&quot;:&quot;false&quot;,  &quot;title&quot;:&quot;Mr&quot;,  &quot;manager_id&quot;:&quot;3&quot;,  &quot;job_title&quot;:&quot;Human resources benefits&quot;,  &quot;userName&quot;:&quot;New.User&quot;,  &quot;lastname&quot;:&quot;New&quot;,  &quot;firstname&quot;:&quot;User&quot;,  &quot;password&quot;:&quot;&quot;,  &quot;last_update_date&quot;:&quot;2014-12-09 17:43:28.291&quot;}Read a user details  URL/API/identity/user/:userIdExample:  Get details of a specified user including professional and manager information : /API/identity/user/21?d=professional_data&amp;amp;d=manager_id  MethodGET  Data ParamsStandard search parameters are available.  d=professional_data - include professionnal data in response  d=manager_id - include details of user’s manager in responseSuccess ResponseThe full JSON representation of the user  Code: 200  Payload:{  &quot;last_connection&quot;:&quot;&quot;,  &quot;created_by_user_id&quot;:&quot;-1&quot;,  &quot;creation_date&quot;:&quot;2014-12-01 10:39:55.177&quot;,  &quot;id&quot;:&quot;21&quot;,  &quot;icon&quot;:&quot;/default/icon_user.png&quot;,  &quot;enabled&quot;:&quot;true&quot;,  &quot;title&quot;:&quot;Mrs&quot;,  &quot;professional_data&quot;:{&quot;fax_number&quot;:&quot;484-302-0430&quot;,&quot;building&quot;:&quot;70&quot;,&quot;phone_number&quot;:&quot;484-302-5430&quot;,&quot;website&quot;:&quot;&quot;,&quot;zipcode&quot;:&quot;19108&quot;,&quot;state&quot;:&quot;PA&quot;,&quot;city&quot;:&quot;Philadelphia&quot;,&quot;country&quot;:&quot;United States&quot;,&quot;id&quot;:&quot;21&quot;,&quot;mobile_number&quot;:&quot;&quot;,&quot;address&quot;:&quot;Renwick Drive&quot;,&quot;email&quot;:&quot;giovanna.almeida@acme.com&quot;,&quot;room&quot;:&quot;&quot;  },  &quot;manager_id&quot;:{&quot;last_connection&quot;:&quot;&quot;,&quot;created_by_user_id&quot;:&quot;-1&quot;,&quot;creation_date&quot;:&quot;2014-12-01 10:39:55.136&quot;,&quot;id&quot;:&quot;17&quot;,&quot;icon&quot;:&quot;/default/icon_user.png&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;title&quot;:&quot;Mrs&quot;,&quot;manager_id&quot;:&quot;1&quot;,&quot;job_title&quot;:&quot;Vice President of Sales&quot;,&quot;userName&quot;:&quot;daniela.angelo&quot;,&quot;lastname&quot;:&quot;Angelo&quot;,&quot;firstname&quot;:&quot;Daniela&quot;,&quot;password&quot;:&quot;&quot;,&quot;last_update_date&quot;:&quot;2014-12-01 10:39:55.136&quot;  },  &quot;job_title&quot;:&quot;Account manager&quot;,  &quot;userName&quot;:&quot;giovanna.almeida&quot;,  &quot;lastname&quot;:&quot;Almeida&quot;,  &quot;firstname&quot;:&quot;Giovanna&quot;,  &quot;password&quot;:&quot;&quot;,  &quot;last_update_date&quot;:&quot;2014-12-01 10:39:55.177&quot;}Search for a group of users  URL/API/identity/userExample:  Search for users with names that contain “will”, filter to keep only enabled users, and order the result by last name.:  /API/identity/user?p=0&amp;amp;c=10&amp;amp;o=lastname%20ASC&amp;amp;s=will&amp;amp;f=enabled%3dtrue  MethodGET  Data ParamsStandard search parameters are available.  `d=professional_data - include professionnal data in response  `d=manager_id - include details of user’s manager in responseSuccess ResponseA JSON array of users  Code: 200  Payload:[  {&quot;last_connection&quot;:&quot;2014-12-09 14:52:06.092&quot;,&quot;created_by_user_id&quot;:&quot;-1&quot;,&quot;creation_date&quot;:&quot;2014-12-08 17:16:40.984&quot;,&quot;id&quot;:&quot;1&quot;,&quot;icon&quot;:&quot;/default/icon_user.png&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;title&quot;:&quot;Mr&quot;,&quot;manager_id&quot;:&quot;0&quot;,&quot;job_title&quot;:&quot;Chief Executive Officer&quot;,&quot;userName&quot;:&quot;william.jobs&quot;,&quot;lastname&quot;:&quot;Jobs&quot;,&quot;firstname&quot;:&quot;William&quot;,&quot;password&quot;:&quot;&quot;,&quot;last_update_date&quot;:&quot;2014-12-08 17:16:40.984&quot;  },  {&quot;last_connection&quot;:&quot;&quot;,&quot;created_by_user_id&quot;:&quot;-1&quot;,&quot;creation_date&quot;:&quot;2014-12-08 17:16:41.030&quot;,&quot;id&quot;:&quot;5&quot;,&quot;icon&quot;:&quot;/default/icon_user.png&quot;,&quot;enabled&quot;:&quot;true&quot;,&quot;title&quot;:&quot;Mr&quot;,&quot;manager_id&quot;:&quot;1&quot;,&quot;job_title&quot;:&quot;Chief Financial Officer&quot;,&quot;userName&quot;:&quot;zachary.williamson&quot;,&quot;lastname&quot;:&quot;Williamson&quot;,&quot;firstname&quot;:&quot;Zachary&quot;,&quot;password&quot;:&quot;&quot;,&quot;last_update_date&quot;:&quot;2014-12-08 17:16:41.030&quot;  }]Update a user  URLAPI/identity/user/:userId  MethodPUT  Request PayloadA JSON representation of the user, with the new information.Example:  Update user details including professional and manager information: /API/identity/user/4{  &quot;id&quot;=&quot;4&quot;,  &quot;userName&quot;:&quot;walter.bates&quot;,  &quot;password&quot;:&quot;bpm&quot;,  &quot;password_confirm&quot;:&quot;bpm&quot;,  &quot;icon&quot;:&quot;&quot;,  &quot;firstname&quot;:&quot;Walter&quot;,  &quot;lastname&quot;:&quot;Bates&quot;,  &quot;title&quot;:&quot;Mr&quot;,  &quot;job_title&quot;:&quot;Human resources benefits&quot;,  &quot;manager_id&quot;:&quot;3&quot;}Deactivate the user identified by id 9 : /API/identity/user/9{  &quot;enabled&quot;:&quot;false&quot;}Success Response  Code: 200  Remove a userUse this method with caution: some artifacts like applications, cases or users may present display problems in the Bonita Portal if the referenced user was deleted.Note that you can disable a user instead of deleting it. To do so, use the UPDATE method and set the attribute ‘enabled’ to false  URL/API/identity/user/:userId  MethodDELETE  Success Response  Code: 200  ",
      "url": " /bonita/7.8/development/rest-api/identity-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-8-development-rest-api-manage-files-using-upload-servlet-and-rest-api": {
      "title": "Manage files using upload servlet and REST API",
      "content"     : "Manage files using upload servlet and REST APIYou can upload files by doing a multipart post request on any of the available servlets.It returns the name of the temporary uploaded file.This file name can be used to link those files with any REST resources.Available servletsExampleLink an icon to a new organization groupDeploy programmatically a new REST API extensionAvailable servlets  /portal/fileUpload, supports any type of files  /portal/processUpload, supports only .bar files  /portal/organizationUpload, supports only .xml files  /portal/actorsUpload, supports only .xml files  /portal/imageUpload, supports only .png, .jpg, .gif, .jpeg, .bmp, .wbmp or .tga files  /portal/pageUpload, supports only .zip files  /portal/applicationsUpload, supports only .xml files  /portal/connectorImplementation, supports only .zip files (not available in Community edition)  /portal/reportUpload, supports any type of file (not available in Community edition)  /portal/resourceUpload, supports only .jar files (not available in Community edition)  /portal/profilesUpload, supports only .xml files (not available in Community edition)ExampleYou can refer to the example-upload-servlet project that demonstrate the two use cases explained below.Link an icon to a new organization group  Call the login service: /bonita/loginservice for authentication.  Upload an image by using a multipart post request on the image upload servlet, /bonita/portal/imageUpload.  The image is stored in a temporary folder.  The servlet call response includes the name of the temporary file.  Call the Identity API to create a new group: /bonita/API/identity/group, link this image to the group by specifying this temporary file name in the request body.Deploy programmatically a new REST API extension  Call the login service: /bonita/loginservice for authentication.  Upload a REST API extension by using a multipart post request on the page upload servlet: /bonita/portal/pageUpload. It will send the REST API extension (handle as a “page”) zip file from client side to server side.  REST API extension zip file is stored in a temporary folder.  The servlet call response includes the name of the temporary file.  Call the Portal API to register the newly uploaded REST API extension: /bonita/API/portal/page.",
      "url": " /bonita/7.8/development/rest-api/manage-files-using-upload-servlet-and-rest-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-8-development-rest-api-platform-api": {
      "title": "platform API",
      "content"     : "Platform APIPlatform API Login and LogoutPlatformTenantLicensePlatform API Login and LogoutThe platform API resources require a platform session.In order to get one, log in as the platform administrator using the platform login service. The username and password are in bonita-platform-community-custom.properties file.  URL/platformloginservice  MethodPOST  Success Response  Code: 200  Request parameters:username=platformAdminpassword=platformredirect=falseIn order to logout use the platform logout service as follow:  URL/platformlogoutservice  MethodPOST  Success Response  Code: 200  PlatformDescriptionHandle the platform. This requires a platform session. Log in using the platform login service.Identifierunusedid, the id is not used because there is only one platformRepresentation{  &quot;createdBy&quot;:&quot;_the user name of the platform administrator_&quot;,  &quot;created&quot;:&quot;_the creation date_&quot;,  &quot;initialVersion&quot;:&quot;_the version in which the platform was created_&quot;,  &quot;state&quot;:&quot;_can be STARTED or STOPPED_&quot;,  &quot;previousVersion&quot;:&quot;_the previous version the platform was in or empty if there is none_&quot;,  &quot;version&quot;:&quot;_the current version of the platform_&quot;}MethodsThe methods used for this resource are:  GET - get the current platform  POST - create the platform  PUT - start or stop the platform  DELETE - destroy the platformGet the platform  URL/API/platform/platform/unusedid  MethodGET  Success ResponseThe platform in JSON  Code: 200  Payload:{  &quot;createdBy&quot;:&quot;platformAdmin&quot;,  &quot;created&quot;:&quot;2014-12-04 15:46:46.065&quot;,  &quot;initialVersion&quot;:&quot;6.4.0&quot;,  &quot;state&quot;:&quot;STARTED&quot;,  &quot;previousVersion&quot;:&quot;&quot;,  &quot;version&quot;:&quot;6.4.0&quot;}Start or stop the platformStart or stop the current node, that is, start or stop all services of the current JVM.  URL/API/platform/platform/unusedid  MethodPUT  Request PayloadStart current node :{  &quot;state&quot;:&quot;stop&quot;}Stop current node :{  &quot;state&quot;:&quot;start&quot;}Success Response  Code: 200  TenantDescriptionHandle the tenants (Enterprise and Performance editions only). This requires a platform session. Log in using the platform login service.IdentifierThe id of the tenantRepresentation{  &quot;id&quot;:&quot;_id of the tenant_&quot;,  &quot;creation&quot;:&quot;_the creation date_&quot;,  &quot;icon&quot;:&quot;_the path of the icon_&quot;,  &quot;description&quot;:&quot;_the description_&quot;,  &quot;name&quot;:&quot;_the name of the tenant_&quot;,  &quot;state&quot;:&quot;_ACTIVATED or DEACTIVATED_&quot;}MethodsThe methods used for this resource are:  GET - get or search tenants  POST - create a tenant  PUT - update the tenant and activate or deactivate it  DELETE - delete a tenantGet a tenant  URL/API/platform/tenant/:id  MethodGET  Success ResponseThe platform in JSON  Code: 200  Payload:{  &quot;id&quot;:&quot;1&quot;,  &quot;creation&quot;:&quot;2014-12-04 15:46:46.256&quot;,  &quot;icon&quot;:&quot;/default.png&quot;,  &quot;username&quot;:&quot;&quot;,  &quot;description&quot;:&quot;Default tenant&quot;,  &quot;name&quot;:&quot;default&quot;,  &quot;state&quot;:&quot;ACTIVATED&quot;,  &quot;password&quot;:&quot;&quot;}Create a tenantCreate a new tenant on the platform.  URL/API/platform/tenant  MethodPOST  Request Payloadtenant parameters as JSON{  &quot;name&quot;:&quot;MyTenant&quot;,  &quot;description&quot;:&quot;My tenant&quot;,  &quot;username&quot;:&quot;john&quot;,  &quot;password&quot;:&quot;bpm&quot;}Success Responsethe created tenant as JSON  Code: 200  Payload:{  &quot;password&quot;:&quot;&quot;,  &quot;name&quot;:&quot;MyTenant&quot;,  &quot;icon&quot;:&quot;/default.png&quot;,  &quot;description&quot;:&quot;My tenant&quot;,  &quot;id&quot;:&quot;102&quot;,  &quot;state&quot;:&quot;DEACTIVATED&quot;,  &quot;creation&quot;:&quot;2014-12-04 15:30:19.930&quot;,  &quot;username&quot;:&quot;&quot;}Update a tenantAttributes of the tenant can be changed, and it can be activated or deactivated at the same time.  URL/API/platform/tenant/id  MethodPUT  Request PayloadAttributes to change as JSON{  &quot;description&quot;:&quot;modified description for the tenant&quot;,  &quot;state&quot;:&quot;DEACTIVATED&quot;}Success ResponseThe updated tenant as JSON  Code: 200  Payload:{  &quot;password&quot;:&quot;&quot;,  &quot;name&quot;:&quot;MyTenant&quot;,  &quot;icon&quot;:&quot;/default.png&quot;,  &quot;description&quot;:&quot;modified description for the tenant&quot;,  &quot;id&quot;:&quot;102&quot;,  &quot;state&quot;:&quot;DEACTIVATED&quot;,  &quot;creation&quot;:&quot;2014-12-04 15:30:19.930&quot;,  &quot;username&quot;:&quot;&quot;}Delete a tenantA tenant can only be deleted if it is in DEACTIVATED state.  URL/API/platform/tenant/id  MethodDELETE  Success Response  Code: 200  LicenseDescriptionHandle the license information. This requires a platform session. Log in using the platform login service.This Web REST API is available in Subscription editions only, since version 7.1.IdentifieremptyRepresentation{  &quot;licenseStartDate&quot;: date with format &quot;yyyy-MM-dd&quot; - first day (included) of license file validity,  &quot;duration&quot;: integer - number of days for license file validity,  &quot;licenseExpirationDate&quot;: date with format &quot;yyyy-MM-dd&quot; - last day (included) of license file validity,  &quot;numberOfCPUCores&quot;: integer - number of CPUs  &quot;edition&quot;: name of the Bonita edition enabled by the license  &quot;licenseMode&quot;: available mode enabled by the license  &quot;requestKey&quot;: request key to use to generate a new license on the customer portal  If you have a subscription that specifies case-counter licensing, additional fields are present:  &quot;subscriptionStartPeriod&quot;: date with format &quot;yyyy-MM-dd&quot; - first day (included) of current period for number of cases provisioned,  &quot;subscriptionEndPeriod&quot;: date with format &quot;yyyy-MM-dd&quot; - last day (included) of current period for number of cases provisioned,  &quot;caseCounterLimit&quot;: integer - number of cases provisioned for period between &quot;subscriptionStartPeriod&quot; and &quot;subscriptionEndPeriod&quot;,  &quot;caseCounter&quot;: integer - number of consumed cases for period between &quot;subscriptionStartPeriod&quot; and &quot;subscriptionEndPeriod&quot;}MethodsThe methods used for this resource are:  GET - get subscription license informationGet subscription license information  URL/API/platform/license  MethodGET  Success ResponseThe license information in JSON  Code: 200  Payload:{  &quot;licenseStartDate&quot;: &quot;2015-08-31&quot;,  &quot;duration&quot;: 30,  &quot;licenseExpirationDate&quot;: &quot;2015-09-30&quot;,  &quot;edition&quot;: &quot;Performance&quot;,  &quot;licenseMode&quot;: &quot;development&quot;,  &quot;requestKey&quot;: &quot;(WkrNiwnog4M+qGKUdl8D4yU6l2LyIlqNm3SEZJgenU/c=)&quot;,  &quot;subscriptionStartPeriod&quot;: &quot;2015-08-30&quot;,  &quot;subscriptionEndPeriod&quot;: &quot;2016-08-29&quot;,  &quot;caseCounterLimit&quot;: 100000,  &quot;caseCounter&quot;: 0,  &quot;numberOfCPUCores&quot;: 4}",
      "url": " /bonita/7.8/development/rest-api/platform-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-8-development-rest-api-portal-api": {
      "title": "portal API",
      "content"     : "portal APIPageProfileProfileEntryProfileMemberThemePageDescriptionUse the page resource to access custom pages, UI Designer pages, layouts or forms and REST API extensions.IdentifierSimple, the ID of the object (a long value)Representation{&quot;id&quot;:&quot;_page_id_&quot;,&quot;creationDate&quot;:&quot;_date and time_&quot;,&quot;createdBy&quot;:&quot;_created_by_user_id_&quot;,&quot;isProvided&quot;:&quot;_true|false_&quot;,&quot;description&quot;:&quot;_description_&quot;,&quot;contentName&quot;:&quot;_custom_page_name_&quot;,&quot;displayName&quot;:&quot;_custom_page_display_name_&quot;,&quot;updatedBy&quot;:&quot;_updatedBy_user_id_&quot;,&quot;lastUpdateDate&quot;:&quot;_date_and_time_&quot;,&quot;urlToken&quot;:&quot;_custom_page_urlToken_&quot;}MethodsThe methods used for this resource are:  POST - Add a new custom page  GET - Read or search a custom page  PUT - Update a custom page  DELETE - Remove a custom pageRetrieve a Custom PageUse a GET method to retrieve information about a custom page.  URL/API/portal/page/:pageId  MethodGET  Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;1&quot;,  &quot;creationDate&quot;:&quot;2014-12-02 15:54:45.249&quot;,  &quot;createdBy&quot;:&quot;&quot;,  &quot;isProvided&quot;:&quot;true&quot;,  &quot;description&quot;:&quot;HTML and Javascript example of custom page source structure (in English).&quot;,  &quot;contentName&quot;:&quot;bonita-html-page-example.zip&quot;,  &quot;displayName&quot;:&quot;HTML example page&quot;,  &quot;updatedBy&quot;:&quot;-1&quot;,  &quot;lastUpdateDate&quot;:&quot;2014-12-02 15:54:45.249&quot;,  &quot;urlToken&quot;:&quot;custompage_htmlexample&quot;}Add a new custom pageUse the POST method to create a new custom page. To add a new custom page, there are two steps:  Upload the page content using the pageUpload servlet. This returns a temporary file name.  Call this API with the temporary file name, as in the example below.  URL/API/portal/pageExample: Add the custom page that was given the temporary name tmp_2181700538398444744.zip. The original name was bonita-angular-dashboard.zip.  MethodPOST  Request Payload{  &quot;pageZip&quot;:&quot;tmp_113096560980259488.zip:bonita-angular-dashboard.zip&quot;}Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;103&quot;,  &quot;creationDate&quot;:&quot;2014-12-04 14:54:06.967&quot;,  &quot;createdBy&quot;:&quot;1&quot;,  &quot;isProvided&quot;:&quot;false&quot;,  &quot;description&quot;:&quot;AngularJS dashboard using ngBonita&quot;,  &quot;contentName&quot;:&quot;bonita-angular-dashboard.zip&quot;,  &quot;displayName&quot;:&quot;AngularJS dashboard&quot;,  &quot;updatedBy&quot;:&quot;1&quot;,  &quot;lastUpdateDate&quot;:&quot;2014-12-04 14:54:06.967&quot;,  &quot;urlToken&quot;:&quot;custompage_angulardashboard&quot;}Update a custom pageUse the PUT method to update an existing custom page.To update a custom page, upload the new page content using the pageUpload servlet, which returns a temporary file name, and then call this API with the temporary file name.  URL/API/portal/page/:pageIdExample: Update the custom page with id = 103. The new uploaded file was given the temporary name tmp_4338264789005487499.zip. The original name was new-bonita-angular-dashboard.zip.  MethodPUT  Request Payload{  &quot;pageZip&quot;:&quot;tmp_4338264789005487499.zip:new-bonita-angular-dashboard.zip&quot;}Success Response  Code: 200  Search custom pagesUse a GET method with filters and search terms to search for custom pages.  URL/API/portal/page?p={page}&amp;amp;c={count}&amp;amp;o={orders}&amp;amp;f={filters}&amp;amp;s={search}&amp;amp;d={deploy}  MethodGET  Data ParamsStandard search parameters are available.You can filter on:  createdBy={user_id}: retrieve only the pages created by the specified user ID.For example, to retrieve the custom pages created by the user with id 1: http://localhost:8080/bonita/API/portal/page?p=0&amp;amp;c=10&amp;amp;f=createdBy%3d1.  contentType={contentType}: retrieve only the resources of requested type. This filter is available since v7.0.For example, to retrieve the theme resources: http://localhost:8080/bonita/API/portal/page?p=0&amp;amp;c=10&amp;amp;f=contentType%3Dtheme.You can search on:  displayName or description: search for custom pages with a displayName or description that starts with the specified string.For example, to find the pages with displayName starting with New: http://localhost:8080/bonita/API/portal/page?p=0&amp;amp;c=10&amp;amp;s=NewSuccess ResponseAn array of custom page objects  Code: 200  Delete a custom pageUse the DELETE method to delete an existing custom page  URL/API/portal/page/:pageId  MethodDELETE  Success Response  Code: 200  ProfileDescriptionUse the profile resource to access profiles.IdentifierSimple, the ID of the object (a long value)Representation{&quot;id&quot;:&quot;_profile id_&quot;,&quot;creationDate&quot;:&quot;_date and time of profile creation_&quot;,&quot;icon&quot;:&quot;_icon used in the portal to represent the profile_&quot;,&quot;createdBy&quot;:&quot;_id of the uer who created the profile_&quot;,&quot;description&quot;:&quot;_a description of the profile_&quot;,&quot;name&quot;:&quot;_profile name_&quot;,&quot;is_default&quot;:&quot;_true | false _&quot;,&quot;lastUpdateDate&quot;:&quot;_date and time of the last update to the profile_&quot;,&quot;updatedBy&quot;:&quot;_the id of the user who last updated the profile_&quot;}MethodsThe methods used for this resource are:  POST - Add a new profile  GET - Read or search a profile  PUT - Update a profile  DELETE - Remove a profileRetrieve a ProfileUse a GET method to retrieve information about a profile.  URL/API/portal/profile/:profileId  MethodGET  Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;1&quot;,  &quot;creationDate&quot;:&quot;2014-12-02 15:54:44.395&quot;,  &quot;icon&quot;:&quot;/profiles/profileUser.png&quot;,  &quot;createdBy&quot;:&quot;-1&quot;,  &quot;description&quot;:&quot;The user can view and perform tasks and can start a new case of a process.&quot;,  &quot;name&quot;:&quot;User&quot;,  &quot;is_default&quot;:&quot;true&quot;,  &quot;lastUpdateDate&quot;:&quot;2014-12-04 11:05:14.490&quot;,  &quot;updatedBy&quot;:&quot;1&quot;}Add a new profileUse the POST method to create a new profile.  URL/API/portal/profile  MethodPOST  Request Payload  {&quot;name&quot;:&quot;MyCustomProfile&quot;,&quot;description&quot;:&quot;This is my custom profile&quot;  }Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;101&quot;,  &quot;creationDate&quot;:&quot;2014-12-04 16:29:23.434&quot;,  &quot;icon&quot;:&quot;/profiles/profileDefault.png&quot;,  &quot;createdBy&quot;:&quot;1&quot;,  &quot;description&quot;:&quot;This is my custom profile&quot;,  &quot;name&quot;:&quot;MyCustomProfile&quot;,  &quot;is_default&quot;:&quot;false&quot;,  &quot;lastUpdateDate&quot;:&quot;2014-12-04 16:29:23.434&quot;,  &quot;updatedBy&quot;:&quot;1&quot;}Update a profileUse the PUT method to update an existing profile.  URL/API/portal/profile/:profileId  MethodPUT  Request Payload{  &quot;id&quot;:&quot;101&quot;,  &quot;name&quot;:&quot;MyUpdatedCustomProfile&quot;,  &quot;description&quot;:&quot;This is my updated custom profile&quot;}Success Response  Code: 200  Search profilesUse a GET method with filters and search terms to search for profiles.  URL/API/portal/profile?p={page}&amp;amp;c={count}&amp;amp;o={orders}&amp;amp;f={filters}&amp;amp;s={search}&amp;amp;d={deploy}  MethodGET  Data ParamsStandard search parameters are available.You can filter on:  name={exact_profile_name}: retrieve only the profiles with the specified name. For example, retrieve the profile with name=Administrator: /API/portal/profile?p=0&amp;amp;c=10&amp;amp;f=name%3dAdministrator  hasNavigation={true|false}: retrieve the profiles with (or without) attached navigation pages (profile entries): /API/portal/profile?p=0&amp;amp;c=10&amp;amp;f=hasNavigation=trueYou can search on:  name: search all profiles which name starts with the search string. For example, name starting with Adm: /API/portal/profile?p=0&amp;amp;c=10&amp;amp;s=AdmSuccess Response  Code: 200  Payload:An array of profile objects  Delete a profileUse the DELETE method to delete an existing profile  URL/API/portal/profile/  MethodDELETE  Success Response  Code: 200  ProfileEntryDescriptionA profileEntry represents the association between pages and profiles. A profile is associated with a set of profileEntry items. This defines the pages that a user with this profile can access, and the menu structure that the user sees.IdentifierSimple, the ID of the object (a long value)Representation{  &quot;id&quot;:&quot;_profileEntry id_&quot;,  &quot;icon&quot;:&quot;_icon used in the portal to represent a profileEntry_&quot;,  &quot;index&quot;:&quot;_position in a menu_&quot;,  &quot;profile_id&quot;:&quot;_id of the profile that contains this profileEntry_&quot;,  &quot;page&quot;:&quot;_pageToken (menu name or menu item name) used in a portal menu to identify the page associated with the profileEntry_&quot;,  &quot;description&quot;:&quot;_description_&quot;,  &quot;name&quot;:&quot;_name of the profileEntry_&quot;,  &quot;type&quot;:&quot;_link (if menu item) | folder (if menu)_&quot;,  &quot;isCustom&quot;:&quot;_ true | false _&quot;,  &quot;parent_id&quot;:&quot;_id or parent profileEntry if in a folder_&quot;}MethodsThe methods used for this resource are:  POST - Add a new profileEntry  GET - Read or search a profileEntry  PUT - Update a profileEntry  DELETE - Remove a profileEntryRetrieve a profileEntryUse a GET method to retrieve information about a profileEntry  URL/API/portal/profileEntry/:profileEntryId  MethodGET  Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;1&quot;,  &quot;icon&quot;:&quot;&quot;,  &quot;index&quot;:&quot;0&quot;,  &quot;profile_id&quot;:&quot;1&quot;,  &quot;page&quot;:&quot;tasklistinguser&quot;,  &quot;description&quot;:&quot;Manage tasks&quot;,  &quot;name&quot;:&quot;Tasks&quot;,  &quot;type&quot;:&quot;link&quot;,  &quot;isCustom&quot;:&quot;false&quot;,  &quot;parent_id&quot;:&quot;0&quot;}Add a new profileEntryUse the POST method to create a new profileEntry.  URLAPI/portal/profileEntry  MethodPOST  Request PayloadExample: Add the profileEntry with page token = tasklistingadmin with a display name = “Test menu” and associate it with the profile = 102.{  &quot;page&quot;:&quot;tasklistingadmin&quot;,  &quot;parent_id&quot;:&quot;0&quot;,  &quot;name&quot;:&quot;Test menu&quot;,  &quot;profile_id&quot;:&quot;102&quot;,  &quot;type&quot;:&quot;link&quot;,  &quot;isCustom&quot;:&quot;false&quot;}Example 2: Create a menu called Folder containing two items, Child1 and Child2, and associate it with profile = 102 with three POST requests.{  &quot;page&quot;:&quot;Null&quot;,  &quot;parent_id&quot;:&quot;0&quot;,  &quot;name&quot;:&quot;Folder&quot;,  &quot;profile_id&quot;:&quot;102&quot;,  &quot;type&quot;:&quot;folder&quot;,  &quot;isCustom&quot;:&quot;false&quot;}{  &quot;page&quot;:&quot;custompage_groovyexample&quot;,  &quot;parent_id&quot;:&quot;106&quot;,  &quot;name&quot;:&quot;&quot;,  &quot;profile_id&quot;:&quot;102&quot;,  &quot;type&quot;:&quot;link&quot;,  &quot;isCustom&quot;:&quot;true&quot;}{  &quot;page&quot;:&quot;tasklistingadmin&quot;,  &quot;parent_id&quot;:&quot;106&quot;,  &quot;name&quot;:&quot;&quot;,  &quot;profile_id&quot;:&quot;102&quot;,  &quot;type&quot;:&quot;link&quot;,  &quot;isCustom&quot;:&quot;false&quot;}Success Response  Code: 200  Payload:{  &quot;id&quot;:&quot;101&quot;,  &quot;icon&quot;:&quot;&quot;,  &quot;index&quot;:&quot;0&quot;,  &quot;profile_id&quot;:&quot;102&quot;,  &quot;page&quot;:&quot;tasklistingadmin&quot;,  &quot;description&quot;:&quot;manage tasks&quot;,  &quot;name&quot;:&quot;Test menu&quot;,  &quot;type&quot;:&quot;link&quot;,  &quot;isCustom&quot;:&quot;false&quot;,  &quot;parent_id&quot;:&quot;0&quot;}Update a profileEntryUse the PUT method to update an existing profileEntry.  URLAPI/portal/profileEntry/:profileEntryId  MethodPUT  Request Payload{  &quot;name&quot;:&quot;Test menu updated&quot;}Success Response  Code: 200  Search profileEntry itemsUse a GET method with filters and search terms to search for profileEntry items.  URL/API/portal/profileEntryEntry?p={page}&amp;amp;c={count}&amp;amp;o={orders}&amp;amp;f={filters}&amp;amp;s={search}&amp;amp;d={deploy}  MethodGET  Data ParamsStandard search parameters are available.You can filter on:  page={exact_pageToken}: retrieve only the profileEntry items with the specified tokenName. For example, retrieve the profileEntry with page name = tasklistinguser: /API/portal/profileEntry?p=0&amp;amp;c=10&amp;amp;f=page%3dtasklistinguser.  name={exact_page_name}: retrieve only the profileEntry items with the specified pageName. For example, retrieve the profileEntry with page name = Tasks: /API/portal/profileEntry?p=0&amp;amp;c=10&amp;amp;f=name%3dTasks.  parentId={parent_id}: retrieve only the profileEntry items with the specified parent_id. For example, retrieve the profileEntry with parent_id = 1: /API/portal/profileEntry?p=0&amp;amp;c=10&amp;amp;f=parent_id%3d1.You can search on:  name: search all profileEntry definitions with name starting with the search string. For example, to find entries with name starting with Manage: /API/portal/profileEntry?p=0&amp;amp;c=10&amp;amp;s=Manage.Success ResponseAn array of profileEntry objects  Code: 200  Payload:  Delete a profileEntryUse the DELETE method to delete an existing profileEntry  URL/API/portal/profileEntry/:profileEntryId  MethodDELETE  Success Response  Code: 200  ProfileMemberDescriptionA profileMember represents the association between the organization and profiles. In an organization we have three member_types = USER, GROUP and ROLE. You can assign a profile to a user by specifying a role, group, or specific user.IdentifierSimple, the ID of the object (a long value)Representation{  &quot;id&quot;:&quot;_profileMemberid_&quot;,  &quot;profile_id&quot;:&quot;_id of the profile for this mapping_&quot;,  &quot;role_id&quot;:&quot;_id of role, or -1 if the member type is not role_&quot;,  &quot;group_id&quot;:&quot;_id of group, or -1 if the member type is not group_&quot;,  &quot;user_id&quot;:&quot;_id of user, or -1 if the member type is not user_&quot;}MethodsThe methods used for this resource are:  POST - Add a new profileMember  GET - Search a profileMember  DELETE - Remove a profileMemberAdd a new profileMemberUse the POST method to create a new profileMember.  URLAPI/portal/profileMember  MethodPOST  Request PayloadExample 1: Add a member_type = USER to the profile with id = 2.{  &quot;profile_id&quot;:&quot;2&quot;,  &quot;member_type&quot;:&quot;USER&quot;,  &quot;user_id&quot;:&quot;101&quot;}Example 2: Add a member_type = GROUP to the profile with id = 2.{  &quot;profile_id&quot;:&quot;2&quot;,  &quot;member_type&quot;:&quot;GROUP&quot;,  &quot;group_id&quot;:&quot;8&quot;}Success Response  Code: 200  Payload:Example 1 response ;{  &quot;id&quot;:&quot;204&quot;,  &quot;profile_id&quot;:&quot;2&quot;,  &quot;role_id&quot;:&quot;-1&quot;,  &quot;group_id&quot;:&quot;-1&quot;,  &quot;user_id&quot;:&quot;101&quot;}Example 2 response ;{  &quot;id&quot;:&quot;206&quot;,  &quot;profile_id&quot;:&quot;2&quot;,  &quot;role_id&quot;:&quot;-1&quot;,  &quot;group_id&quot;:&quot;8&quot;,  &quot;user_id&quot;:&quot;-1&quot;}Search profileMembersUse a GET method with filters and search terms to search for profileMembers.  URL/API/portal/profileMemberEntry?p={page}&amp;amp;c={count}&amp;amp;o={orders}&amp;amp;f={filters}&amp;amp;d={deploy}  MethodGET  Data ParamsStandard search parameters are available.There is a mandatory filter on:  member_type=. For example, retrieve the profileMembers of type user: /API/portal/profileMember?p=0&amp;amp;c=10&amp;amp;f=member_type%3duserYou can also filter also on:  profile_id={profile_id}: retrieve only the profileMembers related to the specified profile_id. /API/portal/profileMember?p=0&amp;amp;c=10&amp;amp;f=member_type%3duser&amp;amp;f=profile_id%3d1  user_id={user_id}: retrieve only the profileMembers related to the specified user_id. API/portal/profileMember?p=0&amp;amp;c=10&amp;amp;f=member_type%3duser&amp;amp;f=profile_id%3d1&amp;amp;f=user_id%3d101  role_id={role_id}: retrieve only the profileMembers related to the specified role_id. API/portal/profileMember?p=0&amp;amp;c=10&amp;amp;f=member_type%3drole&amp;amp;f=profile_id%3d1&amp;amp;f=role_id%3d101  group_id={group_id}: retrieve only the profileMembers related to the specified group_id. API/portal/profileMember?p=0&amp;amp;c=10&amp;amp;f=member_type%3dgroup&amp;amp;f=profile_id%3d1&amp;amp;f=group_id%3d101Success ResponseAn array of profileMember objects  Code: 200  Delete a profileMemberUse the DELETE method to delete an existing profileMember.  URL/API/portal/profileMember/:profileMemberId  MethodDELETE  Success Response  Code: 200  ThemeDescriptionUse the theme resource for managing the portal and mobile app theme (look &amp;amp; feel).IdentifierSimple, the ID of the object (a long value)MethodsThe methods used for this resource are:  POST - Change the theme  PUT - Restore the default themeChange a themeUse the method POST for applying a new theme. Two types are permitted: portal and mobile.  URL/API/portal/theme  MethodPOST  Request PayloadExample 1: Change the portal theme by applying the definition in an already uploaded zip file.{  &quot;type&quot;:&quot;portal&quot;,  &quot;zipFilePathportal&quot;:&quot;tmp_1939634566964075173.zip&quot;}Example 2: Change the mobile app theme by applying the definition in an already uploaded zip file.{  &quot;type&quot;:&quot;mobile&quot;,  &quot;zipFilePathmobile&quot;:&quot;tmp_5691887787551776477.zip&quot;}Success Response  Code: 200  Restore a default themeUse the method PUT method for restoring the default theme. Two types are permitted: portal and mobile  URL/API/portal/theme/unusedId  MethodPUT  Request PayloadExample 1: Restore the default portal theme.{  &quot;type&quot;:&quot;portal&quot;}Example 2: Restore the default mobile theme.{  &quot;type&quot;:&quot;mobile&quot;}Success Response  Code: 200  ",
      "url": " /bonita/7.8/development/rest-api/portal-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-8-development-rest-api-rest-api-extensions": {
      "title": "REST API extensions",
      "content"     : "REST API extensionsNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.REST API extensions provide a solution for integration between forms/pages and third party systems (including Bonita Engine). They can be used to query business data, Bonita Engine APIs, or an external informationsystem (such as a database, web service, LDAP directory…). They also help to keep a clean separation between the front-end (forms, pages, and interfaces visible to users) and the back-end (processes).PrerequisitesExample descriptionGenerate a new REST API extension skeletonWrite the codeMain source codeTest source codeBuild, deploy and test the REST API extensionExample ready to useBDM and Performance mattersTroubleshootingPrerequisitesPrerequisites for developing a REST API extension are:  Java/Groovy development expertise.  Basic knowledge of Maven.  Access to Maven central repository. If your provider is restricting Internet access you may configure proxy settings or create a mirror repository.Mirror configuration: When setting a mirror using a &amp;lt;mirrorOf&amp;gt;*&amp;lt;/mirrorOf&amp;gt; redirection, add an exception for the studio internal repository id like this: &amp;lt;mirrorOf&amp;gt;*,!studio-internal-repository&amp;lt;/mirrorOf&amp;gt; in your settings.xmlExample descriptionThe following sections show how to create a REST API extension. As an example, we create a REST API extension that use Bonita Engine to provide user informations (first name, last name, email address).Generate a new REST API extension skeleton  In the Development menu, choose REST API Extension then New….  Enter a Name, for example User informations REST API Extension.  Enter a Description, for example Query Bonita Engine to retrieve user informations.  Enter a package name, use to set the artifact Group id, for example: com.company.rest.api  Enter a Project name, for example userInformationRestAPIExension  Click Next.  Enter the pathTemplate for this REST API extension, for example userInformation. This will be the access point of the API, and follows this pattern: {bonita_portal_context}/API/extension/userInformation.  As this REST API extension does not access business data you can safely uncheck “Add BDM dependencies” check box.  Define a Permission name for the extension (replace the default one), for example read_user_information. This is the name of the permission the users should have to be granted access to the extension (see REST API extensions usage  Click Next  This screen defines URL parameters that will be passed to the API. By default, p and c parameters are defined to enables paged result, it applies well in our examples as we want to return a list of users.  Click Create.Write the codeMain source codeFirst step would be to remove files and code related to REST API configuration as we don’t need to define configuration parameters for our REST API:  Delete configuration.properties from src/main/resources folder  Delete testConfiguration.properties from src/test/resources  Remove the setup of configuration file mock. Edit IndexTest.groovy, go to setup() method and remove the line starting with resourceProvider....  Remove the example of configuration usage in Index.groovy file (see comment starting with: “Here is an example of you can…”).Now we can add our business logic. In Index.groovy, in doHandle method, locate the “Your code goes here” comment and add your code below (removing the existing result and return statement):// Convert parameters from string to intp = p as intc = c as int// Initialize the list to store users information  def usersInformation = []// Get the list of user  List&amp;lt;User&amp;gt; users = context.apiClient.identityAPI.getUsers(p*c, c, UserCriterion.FIRST_NAME_ASC)// Iterate over each userfor (user in users) {	// Get user extra information (including email address)	ContactData contactData = context.apiClient.identityAPI.getUserContactData(user.id, false)	// Create a map with current user first name, last name and email address	def userInformation = [firstName: user.firstName, lastName: user.lastName, email: contactData.email]	// Add current user information to the global list	usersInformation &amp;lt;&amp;lt; userInformation}// Prepare the resultdef result = [p: p, c: c, userInformation: usersInformation]int startIndex = p*cint endIndex = p*c + users.size() - 1// Send the result as a JSON representationreturn buildPagedResponse(responseBuilder, new JsonBuilder(result).toString(), startIndex, endIndex, context.apiClient.identityAPI.numberOfUsers)Make sure you are adding all missing imports (default shortcut CTRL+SHIFT+o).Test source codeNow we need to update the test to verify the behavior of our REST API extension by editing IndexTest.groovy.First step is to define some mocks for our externals dependencies such as Engine Identity API. Add the following mocks declaration after the existing ones:def apiClient = Mock(APIClient)def identityAPI = Mock(IdentityAPI)def april = Mock(User)def william = Mock(User)def walter = Mock(User)def contactData = Mock(ContactData)Now we need to define the generic behavior of our mocks. setup() method should have the following content:context.apiClient &amp;gt;&amp;gt; apiClientapiClient.identityAPI &amp;gt;&amp;gt; identityAPIidentityAPI.getUsers(0, 2, _) &amp;gt;&amp;gt; [april, william]identityAPI.getUsers(1, 2, _) &amp;gt;&amp;gt; [william, walter]identityAPI.getUsers(2, 2, _) &amp;gt;&amp;gt; [walter]april.firstName &amp;gt;&amp;gt; &quot;April&quot;april.lastName &amp;gt;&amp;gt; &quot;Sanchez&quot;william.firstName &amp;gt;&amp;gt; &quot;William&quot;william.lastName &amp;gt;&amp;gt; &quot;Jobs&quot;walter.firstName &amp;gt;&amp;gt; &quot;Walter&quot;walter.lastName &amp;gt;&amp;gt; &quot;Bates&quot;identityAPI.getUserContactData(*_) &amp;gt;&amp;gt; contactDatacontactData.email &amp;gt;&amp;gt; &quot;test@email&quot;Now you can define a test method. Replace existing test should_return_a_json_representation_as_result method with the following one:def should_return_a_json_representation_as_result() {  given: &quot;a RestAPIController&quot;  def index = new Index()  // Simulate a request with a value for each parameter  httpRequest.getParameter(&quot;p&quot;) &amp;gt;&amp;gt; &quot;0&quot;  httpRequest.getParameter(&quot;c&quot;) &amp;gt;&amp;gt; &quot;2&quot;  when: &quot;Invoking the REST API&quot;  def apiResponse = index.doHandle(httpRequest, new RestApiResponseBuilder(), context)  then: &quot;A JSON representation is returned in response body&quot;  def jsonResponse = new JsonSlurper().parseText(apiResponse.response)  // Validate returned response  apiResponse.httpStatus == 200  jsonResponse.p == 0  jsonResponse.c == 2  jsonResponse.userInformation.equals([[firstName:&quot;April&quot;, lastName: &quot;Sanchez&quot;, email: &quot;test@email&quot;],[firstName:&quot;William&quot;, lastName: &quot;Jobs&quot;, email: &quot;test@email&quot;]  ]);}You should now be able to run your unit test. Right click the IndexTest.groovy file and click on REST API Extension &amp;gt; Run JUnit Test. The JUnit view displays the test results. All tests should pass.Build, deploy and test the REST API extensionStudio let you build and deploy the REST API extension in the embedded test environment.First step is to configure security mapping for your extension in Studio embedded test environment:  In the Development menu, choose REST API Extension then Edit permissions mapping.  Append this line at the end of the file:profile|User=[read_user_information] This means that anyone logged in with the user profile is granted this permission.  Save and close the file.Now you can actually build and deploy the extension:  In the Development menu, choose REST API Extension &amp;gt; Deploy…  Select the userInformationRestAPIExension REST API extension.  Click on Deploy button.  In the coolbar, click the Portal icon. This opens the Bonita Portal in your browser.  In the Portal, change to the Administrator profile.  Go to the Resources tab, and check that the User information REST API extension is in the list of REST API extension resources.Now you finally test your REST API extension:  Open a new tab in the web browser  Enter the following URL: http://localhost:8080/bonita/API/extension/userInformation?p=0&amp;amp;c=10.  The JSON response body should be displayed.The REST API extension can be used in forms and pages in the UI Designer using an External API variable.Example ready to useYou can download the REST API extension described in the tutorial above or check data source REST API extension as a reference.BDM and Performance mattersBe aware that a poor implementation of a custom REST API accessing BDM objects can lead to poor performance results. See the best practice on this matter.Troubleshooting  I get the following stacktrace when using Java 8 Date types (LocalDate, LocalDateTime…) in my Rest API Extensionjava.lang.StackOverflowError	at java.security.AccessController.doPrivileged(Native Method)	at java.net.URLClassLoader.findClass(URLClassLoader.java:361)	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1806)	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1735)	at java.lang.Class.forName0(Native Method)	at java.lang.Class.forName(Class.java:264)	at groovy.lang.MetaClassRegistry$MetaClassCreationHandle.createWithCustomLookup(MetaClassRegistry.java:149)	at groovy.lang.MetaClassRegistry$MetaClassCreationHandle.create(MetaClassRegistry.java:144)	at org.codehaus.groovy.reflection.ClassInfo.getMetaClassUnderLock(ClassInfo.java:253)	at org.codehaus.groovy.reflection.ClassInfo.getMetaClass(ClassInfo.java:285)	at org.codehaus.groovy.reflection.ClassInfo.getMetaClass(ClassInfo.java:295)	at org.codehaus.groovy.runtime.metaclass.MetaClassRegistryImpl.getMetaClass(MetaClassRegistryImpl.java:261)	at org.codehaus.groovy.runtime.InvokerHelper.getMetaClass(InvokerHelper.java:871)	at org.codehaus.groovy.runtime.DefaultGroovyMethods.getMetaPropertyValues(DefaultGroovyMethods.java:364)	at org.codehaus.groovy.runtime.DefaultGroovyMethods.getProperties(DefaultGroovyMethods.java:383)	at groovy.json.JsonOutput.writeObject(JsonOutput.java:290)	at groovy.json.JsonOutput.writeIterator(JsonOutput.java:445)	at groovy.json.JsonOutput.writeObject(JsonOutput.java:269)	at groovy.json.JsonOutput.writeMap(JsonOutput.java:424)	at groovy.json.JsonOutput.writeObject(JsonOutput.java:294)	at groovy.json.JsonOutput.writeIterator(JsonOutput.java:441)	at groovy.json.JsonOutput.writeObject(JsonOutput.java:269)	at groovy.json.JsonOutput.writeMap(JsonOutput.java:424)	at groovy.json.JsonOutput.writeObject(JsonOutput.java:294)The groovy.json.JSONBuilder does not support Java 8 Date types serialization for the groovy version currently used by Bonita.As a workaround you have to format dates in a new data structure before using the JSONBuilder.Example:def employee = //A given employee objectdef result = [			name:employee.name,			birthDate:employee.birthDate.format(DateTimeFormatter.ISO_LOCAL_DATE)			]		return buildResponse(responseBuilder, HttpServletResponse.SC_OK,new JsonBuilder(result).toPrettyString())We do not recommend to manage time zone at the Rest API level, as the local of the Rest API server, the Bonita Engine server, and the End User machine could be different.So we encourage you to manitpulate UTC dates only server-side.  You can see how we manage the time zone using the date time picker. This time zone should only be managed in the end user interface.",
      "url": " /bonita/7.8/development/rest-api/rest-api-extensions",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-8-development-rest-api-rest-api-overview": {
      "title": "REST API overview",
      "content"     : "REST API overviewThis page contains an overview of how to integrate an application with Bonita using REST.OverviewPhases of operationAuthenticate to BonitaExecute REST calls and integrate the results in your applicationLogout from BonitaAPI ExtensionsCreate a resourceRead a resourceExtend resource responseWith compound identifierUpdate a resourceWith compound identifier:Delete resourcesSearch for a resourceWalk-through: how to start a case using the REST APIOverviewIf your application is using a technology other than Java, you can integrate it with the Bonita solution using the Web REST API. This API provides access to all Bonita objects (like processes, tasks, users, connectors etc.), to execute operations on them (create, retrieve, update, delete). You can use these operations to create a workflow with Bonita and integrate it into your application. The Bonita Engine remains responsible for executing the workflow logic (connectors, gateways with conditions, messages, timers etc.) while your application gives access to the workflow. Users can manage processes and tasks, and perform administrative activities.Access to the Web REST API depends on REST API authorization settings.Phases of operationThere are three phases of operation for an application that is integrated with Bonita through the Web REST API: authentication, execution, and logout.Authenticate to BonitaCalls to the Web REST API require you to first log in as a user registered in the Engine database.To log in, use the following request:| | ||:-|:-|| Request URL | http://host:port/bonita/loginservice| | Request Method | POST| | Form Data | username: a usernamepassword: a password redirect: true or falseredirectURL: the URL of the page to be displayed after login tenant: the tenant to log in to (optional for Enterprise and Performance editions, not supported for Community, Teamwork and Efficiency editions)|The response to this call generates cookies, which must be transfered with each subsequent calls. If the REST API is used in an application running in a web browser, this is handled automatically by the browser.X-Bonita-API-Token cookieThe security against CSRF attacks is enabled by default for all fresh installations. the subsequence REST API calls using DELETE, POST, or PUT HTTP methods must contain the header below:X-Bonita-API-Token: example-dummy-not-be-used-valueSetting the redirect parameter to false indicates that the service should not redirect to Bonita Portal (after a successful login) or to the login page (after a login failure).Execute REST calls and integrate the results in your applicationAfter the application is connected to the Bonita Engine, you can start calling API methods. The following is a typical scenario for an end user.  Start a new case with variables: Provide a form for the user to enter initial data. Then call the method to start a new case using the values entered by the user to initialize some variables. The engine will start the execution of the process. Depending on the design of your process, there might then be some human tasks available for the end user.  List the pending tasks for a user: Retrieve a list of available human tasks for the logged in user. When the user selects a task to do, you can display the corresponding form. It can be an external form or a Bonita form that can be accessed by url.  Update variables and execute a task: If your application is using an external form, update the values of the variables in your process. You can use a method to update process or activity variables with values coming from your application. When the user submits the external form, you can call a method to execute a task. The engine will then continue the execution of the workflow as designed.  Handle tasks in error: Get a list of tasks that are in the failed state, and then replay each task by doing three steps: get the list of failed connectors, reset the state of failed connectors and replay the failed task.Logout from BonitaWhen processing is complete, you must log out.To log out, use the following request:| | ||:-|:-|| Request URL | http://host:port/bonita/logoutservice| | Request Method | GET| | Query parameter | redirect: true or false (default set to true)|Setting the redirect parameter to false indicates that the service should not redirect to the login page after logging out.API ExtensionsYou can create Rest API Extensions to extend the Rest API by adding missing ressources (not provided by the Rest API). It is possible for an extension to interact with the engine (via the API) or with any other external service (for example a database, a directory, or a web service).Create a resource| | ||:-|:-|| Request URL | http://.../API/{API_name}/{resource_name}/  | | Request Method | POST| | Request Payload | an item in JSON| | Response | the same item in JSON, containing the values provided in the posted item, completed with default values and identifiers provided by Bonita Engine.|Read a resource      Request URL  http://.../API/{API_name}/{resource_name}/{id}   Request Method  GET  Response  an item in JSON  Example http://.../API/identity/user/5 Extend resource responseOn some resources, in GET methods the d (deploy) URL query parameter can be used to extend the response objects. The value of this parameter consists of an attribute for which you want to make an extended request (called a deploy) and retrieve attributes of a linked resource.This means that instead of retrieving the ID or a parent or referenced resource, you can retrieve the full object.For example, when you retrieve a task, you can also retrieve the process definition attributes in addition to the process definition ID that is already part of the task resource. The supported deploy values for a task include its process (d=processId).Specifiy multiple d parameter to extend several resources. For instance, to retrieve the flow node of id 143 and the associated process, case and assigned user, call /API/bpm/flowNode/143?d=processId&amp;amp;d=caseId&amp;amp;d=assigned_idWith compound identifierThe order of the identifier parts for each resource type is given in the table above.      Request URL  http://.../API/{API_name}/{resource_name}/{id_part1}/{id_part2}   Request Method  GET  Response  an item in JSON  Example http://.../API/identity/membership/5/12/24 Update a resource| | ||:-|:-|| Request URL | http://.../API/{API_name}/{resource_name}/{id} | | Request Method | PUT| | Request Payload | a map in JSON containing the new values for the attributes you want to change.|| Response | the corresponding item in JSON with new values where you requested a modification|Example http://.../API/identity/user/5With compound identifier:Response: the corresponding item in JSON with new values where you requested a modification.| | ||:-|:-|| Request URL | http://.../API/{API_name}/{resource_name}/{id_part1}/{id_part2} | | Request Method | PUT| | Request Payload | ` a map in JSON containing the new values for the attributes you want to change | | Response |  the corresponding item in JSON with new values where you requested a modification`|Examplehttp://.../API/identity/membership/5/12/24 Delete resourcesUse the DELETE request to remove multiple resources.| | ||:-|:-|| Request URL | http://.../API/{API_name}/{resource_name}/ | | Request Method | DELETE| | Request Payload | A list of identifiers in JSON, for example [&quot;id1&quot;,&quot;id2&quot;,&quot;id3&quot;]. Compound identifiers are separated by ‘/’ characters.|| Response | empty |Examplehttp://.../API/identity/membership/ Search for a resourceThe required object is specified with a set of filters in the request URL. The URL parameters must be URL-encoded.Results are returned in a paged list, and you can specify the page (counting from zero), the number of results per page (count), and the sort key (order). You can see the total number of matching results in the HTTP response header Content-Range.If you are searching for business data using a custom query, there must be a count query in the BDM. If there is no count query, results from a custom query on business data cannot be paged properly (the header Content-Range will be absent). For business data default queries, the count query is defined automatically.The available filters are the attributes of the item plus some specific filters defined by each item.| | ||:-|:-|| Request URL | http://.../API/{API_name}/{resource_name}?p={page}&amp;amp;c={count}&amp;amp;o={order}&amp;amp;s={query}&amp;amp;f={filter_name}={filter_value}&amp;amp;f=... | | Request Method | GET| | Response | an array of items in JSON|Example/API/identity/user?p=0&amp;amp;c=10&amp;amp;o=firstname&amp;amp;s=test&amp;amp;f=manager_id=3For a GET method that retrieves more than one instance of a resource, you can specify the following request parameters:  p: index of the page to display  c: maximum number of elements to retrieve  o: order of presentation of values in response: must be either attributeName ASC or attributeName DESC. The final order parameter value must be URL encoded.  f: list of filters, specified as attributeName=attributeValue. To filter on more than one attribute, specify an f parameters for each attribute. The final filter parameter value must be URL encoded. The attributes you can filter on are specific to the resource.  s: search on name or search indexes. The matching policy depends on the configuration of word-based search. For example, if word-based search is enabled, s=Valid returns matches containing the string “valid” at the start of any word in the attribute value word, such as “Valid address”, “Not a valid address”, and “Validated request” but not “Invalid request”.If word-based search is disabled, s=Valid returns matches containing the string “valid” at the start of the attribute value, such as “Valid address” or “Validated request” but not “Not a valid address” or “Invalid request”.Walk-through: how to start a case using the REST APIInstall curl command line toolcurl is available on Linux OS and it transfers data from or to a server with various protocols such as HTTP and HTTPS.$ sudo apt install curlNOTE: this is to be done only once.Deploy a process  Start a studio  Make sure the current organization contains a User with username walter.bates and password bpm  Create a new Registration process  Configure the process so that walter.bates will be able to start it  Click on the Run buttonLogin$ curl -v -c saved_cookies.txt -X POST --url &#39;http://localhost:8080/bonita/loginservice&#39; --header &#39;Content-Type: application/x-www-form-urlencoded; charset=utf-8&#39; -O /dev/null -d &#39;username=walter.bates&amp;amp;password=bpm&amp;amp;redirect=false&amp;amp;redirectURL=&#39; The above `curl` command saved the cookies on the disk, in the `saved_cookies.txt` file.  The cookies file must be reused with the REST API calls (HTTP requests) in order to provide session information. The value of X-Bonita-API-Token cookie must be passed also in the header of the subsequent REST API calls, when any of the POST, PUT or DELETE HTTP method is used.The content of the cookies file is below:$ cat saved_cookies.txt localhost	FALSE	/bonita/	FALSE	0	bonita.tenant	1#HttpOnly_localhost	FALSE	/bonita/	FALSE	0	JSESSIONID	9F9665280B367259AC421378B69C3244localhost	FALSE	/	FALSE	0	X-Bonita-API-Token	2f86dcab-9b54-45e6-8eb1-f82c2a2f8e25List installed process definitions$ curl -b saved_cookies.txt -X GET --url &#39;http://localhost:8080/bonita/API/bpm/process?c=10&amp;amp;p=0&#39;[  {&quot;id&quot;: &quot;6090246829515228480&quot;,&quot;displayDescription&quot;: &quot;Enable the user to request to be registered and the validator to review the request.&quot;,&quot;deploymentDate&quot;: &quot;2017-06-08 14:36:27.520&quot;,&quot;description&quot;: &quot;Enable the user to request to be registered and the validator to review the request.&quot;,&quot;activationState&quot;: &quot;ENABLED&quot;,&quot;name&quot;: &quot;Registration&quot;,&quot;deployedBy&quot;: &quot;4&quot;,&quot;displayName&quot;: &quot;Registration&quot;,&quot;actorinitiatorid&quot;: &quot;102&quot;,&quot;last_update_date&quot;: &quot;2017-06-08 14:36:27.673&quot;,&quot;configurationState&quot;: &quot;RESOLVED&quot;,&quot;version&quot;: &quot;743.01&quot;  }]The response shows that there is 1 process definition installed.The Registration process has a process definition id equal to 6090246829515228480Instantiate one case of the Registration process$  curl -b saved_cookies.txt -X POST --url &#39;http://localhost:8080/bonita/API/bpm/case&#39; --header &#39;Content-Type: application/json&#39; --header &#39;X-Bonita-API-Token: 2f86dcab-9b54-45e6-8eb1-f82c2a2f8e25&#39; -d &#39;{&quot;processDefinitionId&quot;:&quot;6090246829515228480&quot;}&#39;{  &quot;id&quot;: &quot;1003&quot;,  &quot;end_date&quot;: &quot;&quot;,  &quot;startedBySubstitute&quot;: &quot;4&quot;,  &quot;start&quot;: &quot;2017-06-08 14:40:35.272&quot;,  &quot;state&quot;: &quot;started&quot;,  &quot;rootCaseId&quot;: &quot;1003&quot;,  &quot;started_by&quot;: &quot;4&quot;,  &quot;processDefinitionId&quot;: &quot;6090246829515228480&quot;,  &quot;last_update_date&quot;: &quot;2017-06-08 14:40:35.272&quot;}Logout$ curl -b saved_cookies.txt -X GET --url &#39;http://localhost:8080/bonita/logoutservice?redirect=false&#39;TroubleshootingHTTP/1.1 401 UnauthorizedIf the HTTP response’s status is 401 Unauthorized:  make sure that the cookies have been transfered with the call  make sure that the cookies transfered are the ones generated during the last sucessfull login call  if one of the PUT, DELETE or POST method is used, make sure that the X-Bonita-API-Token header is included  if the X-Bonita-API-Token header is included, make sure that the value is the same as the one of the cookie generated during the last login  Maybe a logout was issued or the session has expired; try to log in again, and re run the request with the new cookies and the new value for the X-Bonita-API-Token header.",
      "url": " /bonita/7.8/development/rest-api/rest-api-overview",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-8-development-rest-api-system-api": {
      "title": "system API",
      "content"     : "system APIi18nlocalei18ntranslationSessionTenanti18nlocaleDescriptionList the available locales.Representation{  &quot;name&quot;:&quot;_Name of the language_&quot;,  &quot;locale&quot;:&quot;_code of the locale_&quot;}MethodsThe methods used for this resource are:  GET - list available localesList available locales  URL/API/system/i18nlocale  MethodGET  Data ParamsStandard search parameters are available.  Success ResponseThe list of locales as JSON  Code: 200  Payload:[  {&quot;name&quot;:&quot;English&quot;,&quot;locale&quot;:&quot;en&quot;  },  {&quot;name&quot;:&quot;Italiano&quot;,&quot;locale&quot;:&quot;it&quot;  },  {&quot;name&quot;:&quot;Deutsch&quot;,&quot;locale&quot;:&quot;de&quot;  }]i18ntranslationDescriptionGet the translations for the specified locale.Representation{  &quot;value&quot;:&quot;_the translation_&quot;,  &quot;key&quot;:&quot;_the key of the translation_&quot;}MethodsThe methods used for this resource are:  GET - the translations for the specified localeList available translationsReturns all translations of the product. If a locale is specified in the filter, that translation for that locale are returned. if no locale is specified, the translations in English are returned.  URL/API/system/i18ntranslation  MethodGET  Data ParamsStandard search parameters are available.Example: /API/system/i18ntranslation?p=0&amp;amp;c=2&amp;amp;f=locale%3dde  Success ResponseThe list of translations as JSON  Code: 200  Payload:[  {&quot;value&quot;:&quot; Um dies zu tun, gehen Sie zu %entitymappingprofilelink%.&quot;,&quot;key&quot;:&quot; To do so, go to %entitymappingprofilelink%.&quot;  }, {&quot;value&quot;:&quot; Um dies zu tun, gehen Sie zu %profilelink%.&quot;,&quot;key&quot;:&quot; To do so, go to %profilelink%.&quot;  }]SessionDescriptionGet the current session.Identifierunusedid, the id is not used, the current session is always returnedRepresentation{  &quot;user_id&quot;:&quot;_id of the user_&quot;,  &quot;user_name&quot;:&quot;_name of the user_&quot;,  &quot;session_id&quot;:&quot;_id of the session_&quot;,  &quot;conf&quot;:&quot;_session configuration_&quot;,  &quot;is_technical_user&quot;:&quot;_true if the user is the technical user, false otherwise_&quot;,  &quot;version&quot;:&quot;_product version_&quot;}MethodsThe methods used for this resource are:  GET - get the current sessionGet the current session  URL/API/system/session/unusedid  MethodGET  Success ResponseThe session in JSON  Code: 200  Payload:{  &quot;user_id&quot;:&quot;12&quot;,  &quot;user_name&quot;:&quot;william.jobs&quot;,  &quot;session_id&quot;:&quot;2885803778329414975&quot;,  &quot;conf&quot;:&quot;[&quot;D7A27EA0483FBAF903BD61BD16D70EF610DBE6D4&quot;]&quot;,  &quot;is_technical_user&quot;:&quot;false&quot;,  &quot;version&quot;:&quot;6.4.0&quot;}TenantDescriptionPause and resume tenant services in order to do maintenance on a tenant.Identifierunusedid, the id is not used, the current tenant is always returnedRepresentation{  &quot;paused&quot;:&quot;_true if the tenant is paused, false otherwise_&quot;,  &quot;id&quot;:&quot;_id of the tenant_&quot;}MethodsThe methods used for this resource are:  GET - get the current tenant  PUT - pause or resume the tenantGet the current tenant  URL/API/system/tenant/unusedid  MethodGET  Success ResponseThe tenant id with its status in JSON  Code: 200  Payload:{  &quot;paused&quot;:&quot;false&quot;,  &quot;id&quot;:&quot;1&quot;}Pause or resume the current tenant  URL/API/system/tenant/unusedid  MethodPUT  Request Payload{  &quot;paused&quot;:&quot;true&quot;}or{  &quot;paused&quot;:&quot;false&quot;}Success Response  Code: 200  ",
      "url": " /bonita/7.8/development/rest-api/system-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-8-development-rest-api-tenant-api": {
      "title": "tenant API",
      "content"     : "Tenant APIBDMBDMDescriptionShow status or install or update the Business Data Model.Methods  GET - Read BDM status.  POST - Add or update Business Data ModelGet BDM statusMake this call to get the status the BDM.  URL/API/tenant/bdm  MethodGet  Success Response  Code: 200  Payload:{  &quot;id&quot;: &quot;309&quot;,  &quot;name&quot;: &quot;client_bdm.zip&quot;,  &quot;type&quot;: &quot;BDM&quot;,  &quot;state&quot;: &quot;INSTALLED&quot;,  &quot;lastUpdatedBy&quot;: &quot;-1 &quot;,  &quot;lastUpdateDate&quot;: &quot;2018-01-17T17:05:36.671Z&quot;}Note: lastUpdatedBy&quot; value is always -1 because only the tenant_technical_user can install BDM.Install or update a BDMInstall or update a BDM on your tenant.Need to be done in two successive steps:1 - Upload a BDM file2 - Install/Update the previously uploaded fileNote: To do this, your tenant services need to be paused.Upload a BDM file  URL/portal/fileUpload  MethodPOST  Required headers Content-Type: multipart/form-data  Success Response  Code: 200  Request Payload tmp_uploaded_bdm.zipInstall/Update a file previously uploaded  URL/API/tenant/bdm  MethodPOST  Success Response  Code: 200  Request Payload {  fileUpload: &quot;tmp_uploaded_bdm.zip&quot; }   Note: Use the file name returned in the first step to perform the second step.Note: In Efficiency, Performance and Enterprise editions, if you have an access control file installed on your tenant, you need to deleteit before installing or updating your BDM.",
      "url": " /bonita/7.8/development/rest-api/tenant-api",
      "author": "",
      "categories": "Development, REST API"
    }
    ,
  

    "bonita-7-8-development-software-extensibility": {
      "title": "Software extensibility",
      "content"     : "Software extensibilityBonita provides a rich set of features by default. These features are designed to meet the needs of most of your projects. However, if a project has a need that was not anticipated and cannot be met by the default features, Bonita has been designed to be extensible. This page lists the extension points that are available.Stable extension pointsConnectorsActor filtersEngine APIREST APICustom pagesCustom widgetsImport and export exchange filesAuthentication serviceEvent handlersBonitaStudioBuilderPortal look &amp;amp; feelPortal language packCustom data typesUnstable extension pointsBackward compatibilityStable extension pointsThe following elements are designed to be extension points of Bonita. These extension points are guaranteed to be stable across versions of Bonita 6: Java interfaces and XML schema will be kept backward compatible so that your implementation will work even after a Bonita version upgrade.ConnectorsIn Community, Teamwork, Efficiency, Performance and Enterprise editionsBonita comes with more than 80 standard connectors to the major information system components: major databases (Oracle, Microsoft, Postgres, etc.), SOAP Webservice, Salesforce, Email, etc.A new connector enables you to provide new connectivity capabilities for processes. To implement a new connector, you need to provide some XML description files and a Java class respecting the Connector interface. Connectors can be implemented directly from Bonita Studio.Actor filtersIn Community, Teamwork, Efficiency, Performance and Enterprise editionsBonita comes with a set of standard actor filters that can be used to reduce the list of candidates for process tasks.A new actor filter enables you to provide new filtering capabilities to processes. To implement a new actor filter, you need to provide some XML description files and a Java class respecting the UserFilter interface. Actor filters can be implemented directly from Bonita Studio.Engine APIIn Community, Teamwork, Efficiency, Performance and Enterprise editionsThe Bonita Engine APIs enable you to:  start and stop the engine  design, install, configure and interact with processes  manage usersProcessBuilder and Business Objects DAO are examples of APIs that can be leveraged in your development. They will remain stable in time.REST APIIn Community, Teamwork, Efficiency, Performance and Enterprise editionsThe REST APIs enable you to integrate your Bonita processes into your application and execute operations on Bonita objects including business objects. Pages and forms created with the UI designer reply on the REST APIs to manage data.In addition to the standard APIs and resources, you can define REST API extensions. In the Bonita subscription edition, Bonita Studio contains tooling for creating, testing, and deploying REST API extensions.Custom pagesIn Community, Teamwork, Efficiency, Performance and Enterprise editionsA custom page is a page that you can add into Bonita Portal to form part of an application, customize information provided in default portal pages, or to add new features to the portal. To implement a page, you need to provide HTML, CSS and Javascript resources respecting some packaging constraints. You can create a page using the UI designer, which automatically creates a well-formed page. You can also use the legacy 6.x custom page construction methods.Note that although the page framework provided in the product is stable, we cannot guarantee that all custom pages will work with future versions, because this depends on the details of how the page is implemented.Custom widgetsIn Community, Teamwork, Efficiency, Performance and Enterprise editionsIf the standard UI designer widgets do not meet your needs, you can create a custom widget. You can then use your custom widget in pages, forms, and (for Subscription editions) fragments.Import and export exchange filesIn Community, Teamwork, Efficiency, Performance and Enterprise editionsIncluded in the Engine APIs are methods to import and export various items. These methods manipulate files with formats that are versioned. Newer versions of the file format are designed to be backward compatible with earlier versions. The following items have import and export API methods:  organization (users, groups, roles)  parameters  custom pages  connectorsAuthentication serviceIn Teamwork, Efficiency, Performance and Enterprise editionsFrom Bonita 6.3, the Engine authentication service is considered to be an official extension point of the solution. It is now safe to provide your own implementation of this service to better fit the needs of your projects.Default authentication implementations are provided allow to check user credentials from the Bonita database, LDAP or a CAS SSO server (using JAAS).To implement an Authentication Service, provide a Java class respecting the Authentication Service interface.Event handlersIn Teamwork, Efficiency, Performance and Enterprise editionsAn event handler is an extension to the engine that is configured to run when a specified event occurs. An event is a change to any object in the database.To implement an event handler, you need to provide a Java class respecting the Handler interface.BonitaStudioBuilderIn Teamwork, Efficiency, Performance and Enterprise editionsBonita includes a script, BonitaStudioBuilder (also known as the Workspace API), for building a bar file from a process in a repository. This intended to be used for automating process builds in a continuous integration and testing environment.You can use the BonitaStudioBuilder to build a bar file for processes stored in a repository. This script will be kept stable in time.Portal look &amp;amp; feelIn Teamwork, Efficiency, Performance and Enterprise editionsThe Bonita Portal Look &amp;amp; Feel gives the ability to customize the appearance of the portal Web interface. As a Portal Administrator, you can import a new Look &amp;amp; Feel (.zip archive). To create a new Look &amp;amp; Feel, provide CSS and resources files.Portal language packBonita Portal comes with a number of language packs by default. You can also add languages. It is also possible to use this same mechanism to customize the portal terminology to your business environment. For example, an e-commerce business could change Cases to Orders.Custom data typesA custom data type is a Java object (.jar file) or an XML definition (.xsd file) of a data structure. You can create a custom data type and use it to define a process variable if the standard data types are not suitable for your process. Note that although the custom data type framework provided in the product is stable, we cannot guarantee that all custom data types will work with future versions, because this depends on the details of how the data type is implemented.Unstable extension pointsThe following elements may be used as extension points but there is no guarantee of stability across versions. No changes are planned, but we reserve the right to change make incompatible changes in any future version.  Portal URLs and Forms URLs. Some customer projects have used hard-coded or forged URLs to access specific pages of Bonita Portal or forms, to fit in with specific technology or navigation constraints. While such URLs have so far been quite stable, there is no guarantee that they will not change across Bonita versions. Recommendation: if your project relies on such URLs, make URL generation configurable so that you can easily change it if required after a Bonita upgrade.  Forms HTML templates. It is possible to modify the HTML page template, HTML process template, or HTML portal template to customize the appearance and behavior of forms. There is no guarantee that these templates will not change across Bonita versions. If a form uses some Javascript code based on an element in the HTML Document Object Model, the element may be moved, modified or removed in a future version so the Javascript will no longer work.  Authorization Rule Mapping. It is possible to modify authorization rules mapping applied to start a process, display process overview or execute a task. You can customize this mapping by defining your own bean and override property. See Authorization Rule MappingOnly the elements listed on this page are intended to be used as extension points. For other elements, there is no guarantee of stability, and a high probability of changes across versions. For example, the following should not be considered to be extension points:  Engine Services (other than those listed in this page). The Engine is structured as an aggregation of several services. This provides clear isolation of responsibility and eases maintenance. The interfaces, configuration files, and existence of services are not guaranteed across versions.Backward compatibilityIn Bonita 6.x and 7.x, we ensure backward compatibility of the following:  Engine API (except items marked as deprecated)  Web REST API (except items marked as deprecated)  Authentication Service (from 6.3.0 onwards)  XML file format for the following:  event handlers  BonitaStudioBuilder (also known as the Workspace API)  actor filters  connectors  form validators  import and export exchange files  We cannot ensure backward compatibility for the following:  Portal Look &amp;amp; Feel definition structure  Custom Pages definition structure  Custom data types definition structure  URLs  Forms definition structure and HTML templates  bonita home folder structure and content (removed since 7.3)",
      "url": " /bonita/7.8/development/software-extensibility",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "bonita-7-8-development-workspaces-and-repositories": {
      "title": "Workspaces and repositories",
      "content"     : "Workspaces and repositoriesNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.This page explains how to use a shared repository so that several people can collaborate on process design.Workspaces and repositoriesSwitch workspaceCreate a local repositoryExport/Import a repositoryChange repositoryUse a shared repositoryGitSVNWorkspaces and repositoriesA workspace is a directory where Bonita Studio stores working files related to process design. When you install Bonita Studio, a workspace is created automatically.A local repository is a directory within your workspace.You can use local repositories to organize your work efficiently, for example by separating processes that do not interact.A team repository is a shared repository on a Subversion (SVN) or Git server that is used by the team collaborating on developing a process.A shared repository has typical code management features: locks (SVN only), synchronization, versioning.Your workspace contains your local copy of the shared repository, which is synchronized with the shared repository on the SVN or Git server.Note that the values of the process configurations (such as parameters) will not be synchronized on the remote repository, to allow each Studio to have its own configuration.Switch workspaceThe default workspace is studio_install_directory/workspace.To use a different workspace:  Go to the Diagram menu and choose Switch workspace….  A pop up window shows the path of the workspace you are currently using.  In the pop up window, specify the path of the workspace you want to use. If the new workspace does not exist, you are asked whether you want to create it.  Click OK.  The workspace switch is applied the next time Bonita Studio starts. Click OK in the pop up window to restart the studio, or Cancel to continue in your current session.Create a local repositoryYou can create a local repository in your local workspace.The repository is created in your current workspace.To create a local repository:  Go to the Repository menu, choose Local, then choose Create new local repository.  Specify a name for the new repository.  Click OK .  A status window shows the progress of the repository being built.When the repository has been successfully created, a message shows you are working with the new local repository.  Click on OK to finish.A new local repository is created. A new directory with the same name as the repository is added to your local workspace folder.In Bonita Studio, you can see the new repository name shown at the top left, in the title bar.Export/Import a repositoryYou can export all the content from a repository for exchange or backup purposes:  Click on Diagram &amp;gt; Export…  Click  on Select All to embed the whole repository content into the BOS archive.  Choose a location on your local drive to store the archive and click on Finish.The exported archive can then be shared with other studios of the same version or newer.To import a BOS archive:  Click on Diagram &amp;gt; Import &amp;gt;  BOS Archive…  Choose the location of the archive on your local drive  In Subscription, you can choose the target repository of the imported content  Handle conflicting files if any  Click on ImportYou can retrieve the whole content of a studio workspace by exporting all its repositories and importing them into another studio.Change repositoryBefore you change to a different repository, make sure you have saved your work.To change repository, follow these steps:  In the Repository menu, choose Change the repository.  A list of the available repositories is displayed. These are the local and shared repositories in your current workspace.  Select the repository to switch to, and click OK.  A confirmation message is displayed when you are working in the new location.You can see the name of the current repository at the top, in the title bar.If the list does not contain the name of the repository you want to use, check that you are using the correct workspace, and if necessary, switch workspace.Use a shared repositoryGitPrerequisites  A remote Git repository (GitHub, Bitbucket…)  Basic Git workflow knowledge (Reference article)Git integration in StudioBonita Studio Git integration is based on the EGit Eclipse plugin.Git commands available in the studio interface:  Share with GitThis action connects the current repository to Git and shares it on a remote.To configure the remote, see the following Egit userguide or the Share on GitHub howto.CloneCreate a new Studio repository from an existing Git repository (that must contain a proper Bonita project). If the remote repository version is lower than the studio, a migration will be applied on the cloned repository. Be careful before pushing a migrated repository back to the remote: all contributors will have to use the proper studio version.  If you used Bonita on Git before Bonita 7.7.0, you might want to clone it from the studio. Be careful though: we cannot guarantee that the cloning of a repository not created with Bonita Studio will work properly.However, to do so, first check that your project on GitHub is “Bonita compliant”: * The Git repository must correspond to a Bonita repository (and not the Bonita Workspace) * The .project file must be present  * It is highly recommended to use the .gitignore file generated by Bonita when you share a Bonita repository from the studio.Still, the best way to proceed is to export the repository from the older version of the studio and import it in the new studio, and then share this repository on Git, although with this procedure, the history of revisions will be lost.  Commit…Shortcut action to add, commit and push the local changes.Push to UpstreamSend the local commited changes to the configured upstream remote repository. You should make a pull before pushing.Fetch from UpstreamDownload new data from the upstream remote repository. It doesn’t integrate any of this new data into your working files. Fetch is great for getting a fresh view on all the things that happened in a remote repository.Push branch…Send the local commited changes to a specfic branch on the remote repository. If the push fails, you may need to use make force push with the command line tool.PullFetch and try to integrate the remote changes of the current branch. This operation can put your repository in conflicting state.Use the Git staging view and provided merge tool to resolve the conflicts. You can abort the merge with a hard reset with the command line tool or the Reset... action.Switch branchChange current branch, checkout a new branch from remote or create a new branch.MergeMerge the content of a branch into current branch. Reference articleResetReset the content of the working tree to the head reference (latest commit).Rebase…Like a merge, you can retrieve the content of another using a rebase. It replay all commits of a selected branch into the current branch. Reference articleGit staging viewThis view display the current status of your repository. From this view you can stage/unstage your changes, commit and even commit and push. You can access to the compare editor using the contextal menu.More information available in EGit user guide.History viewThis view display the commit history of the repository.More information available in EGit user guide.StatusThis gives you connexion information with the remote as well as the current status (ahead or behind) compared to the remote.This information is also available at the top of Bonita Studio window, as well as at the top of the Git Staging view.  Those commands can be found in Repository &amp;gt; Team &amp;gt; Git menu.Conflict managementThe use of Git often lead to conflicts when contributions are merged. There is different ways to manage conflicts, with a diff tool, in a text editor…Bonita Studio integrates the default merge tool of EGit. Here are some hints on how to resolve conflicts using EGit: Manage conflicts using EGit.Advanced Git commandsGit worklow offers a lot of other features that are not directly integrated in Bonita Studio. You can still use them using the command line interface (available here). To retrieve the location of your repository on your filesystem go to /workspace/.Troubleshooting  My diagram has many validation issues after a clone / a switch branch operation: Keep in mind that Bonita artifacts (Business Data Model, Organization, Profiles, Applications, Pages …) are not redeployed when you perform a clone or a switch branch operation. So, if you switch from a branch A to a branch B, you may need for example to deploy manually your BDM to ensure that all the business objects specific to the branch B are available.  My git history view is empty: The history view is based on  the active editor or the current selection (in eclipse, a selection is a file selected in a package explorer). Sometimes you can manage to open the history view without having any active editor and nothing selected (which is often the case in Bonita because we only provide a package explorer in the REST API extensions editor) -&amp;gt; the history view does not display anything. Just open a diagram for example and then re-open your history view.SVNA shared repository is a repository on an SVN server. It can be accessed by members of the team working on a process definition.It is protected by username and password. Only directories in the SVN ‘trunk’ can be used as Bonita repositories.The repository created remotely is then copied to your default local workspace and synchronized.A shared Bonita development repository contains the artifacts developed in Bonita Studio and the UI Designer. For the UI Designer artifacts, there is no locking, merging, or conflict management.Caution: Items defined in Bonita Portal are not stored in the shared repository.This includes applications and custom profiles. To share these artifacts, export them into an external repository such as Git.Prerequisites  A central SVN server accessible by the process designers, accessible by URL, and protected by login and password.  The same version of Bonita must be used by all users of the shared repository.Create a shared repositoryThere are two stages to creating a repository: connect to the SVN server, then specify the name of the new repository. Follow these steps:  In the Repository menu, choose Team.  Click on Connect to the repository.  In the Create a new connection window, enter the URL, username, and password in the appropriate fields.  Click Next to connect to the remote SVN server.  From time to time, depending on your system and network security setup, you may be asked to confirm security credentials.  A popup displays a list of the existing Bonita repositories available on the SVN server.  Click on the button Create a new Bonita repository.  In the window, Repository name, give the repository a name e.g “my_new_repository”.  Click on OK.The new repository is created locally and copied remotely to the SVN server. You can configure synchronization for this new shared repository.Connect to a shared repositoryTo connect to a shared repository, follow these steps:  In the Repository menu, choose Team.  Click on Connect to the repository.  In the Create a new connection window, enter the URL, username, and password in the appropriate fields.  Click on Next to connect to the remote SVN server.  From time to time, depending on your system and network security setup, you may be asked to confirm security credentials.  A popup displays a list of the existing Bonita repositories available on the SVN server.  Select the name of the repository, and click Connect.  A message is displayed, showing that you are connected to the shared repository. You can see the name of repository at the top left, in the title bar.  Click on OK.The first time you connect to a repository, you might get a security warning.Configure security for the connection according to your organization’s security policy.Synchronize a shared repositorySynchronizing a shared repository means merging the changes you have made in your local copy into the central repository on the server, and updating your local copy with the result.There are three modes for synchronizing:  Recommended: Use manual synchronization for all repositories: With this mode, no automatic synchronization is done in either direction. This is the default behavior.You launch synchronization manually, by going to the Repository menu, choosing Team then Commit artifacts. There is also a keyboard shortcut: Ctrl+Alt+C.  Use automatic synchronization for all repositories: With this mode, every time you make a change, it is saved in both your local copy and the central repository.  Changes made to the central repository are sent immediately to your local copy.  You can only use this mode if you have a continuous network connection to the system hosting the SVN server. There is a significant network performance cost for using automatic synchronization. This option is not recommended.  Define synchronization mode repository by repository: With this mode, you define whether synchronization is manual or automatic for each repository.Manage locks on shared resourcesThis information applies to artifacts created in Bonita Studio but not those created in the UI Designer.Bonita Studio automatically locks an artifact (process or shared resource) when you open it for editing. You can also lock an artifact manually. If you try to open an artifact that is locked by another user, a popup tells you that the artifact is logged and gives the SVN username of the person who owns the lock. You can choose to open the artifact in read-only mode, which means you cannot make any changes.It is also possible to unlock a locked artifact and lock it yourself, but this is not generally recommended except as a last resort if the owner of the lock cannot be contacted to release the lock.You can choose to open an artifact in read-only mode, even if it is not locked by another user. If an artifact you are viewing in read-only mode is locked, there is a lock icon in the name tab at the top of the whiteboard.To manually lock or unlock an artifact:  Go to the Repository menu, and choose Team, then Manage locks.  A popup displays the list of artifacts.  Select the artifact to lock or unlock, and then click the Lock or Unlock button.  Click OK.To check the lock status of an artifact, go to the Diagram menu and choose Open, or click Open in the coolbar. In the popup, artifacts that you have locked are marked with a green padlock, and artifacts that another user has locked are marked with a red padlock and the user’s SVN username.From the popup, you can:  Open a process that you have locked (marked with a green padlock) or that is not locked (no padlock).  Open a process in read-only mode. You can do this for any process, but it is most useful for a process that is locked by another user (red padlock).  Open a locked process (red padlock). You can open a locked process in read-only mode. You cannot open a locked process read-write.Avoiding conflictsA conflict occurs when two or more users update the same process in a repository and the updates are not compatible.If you are using a shared repository, Bonita Studio automatically locks a Studio artifact when a user opens it for edit. (Note: UI Designer artifacts are not locked.)This means that only one user at a time can update the artifact, avoiding the possibility of conflicts. The only risk of conflicts is if a user takes over a lock from another user who has not committed their changes. For this reason, you are not recommended to unlock artifacts that are locked by another user.It is also good practise to commit your changes regularly, to keep your local working copy synchronized with the central repository. To commit your changes, go to the Repository menu, choose Team, and then choose Commit artifacts. When you commit your changes, you have the option to release the lock so that another user can edit the artifact. By default, your lock is maintained.If you want to release the lock, uncheck the Keep locks box in the Commit dialog.Versioning and historyIf you are using a shared repository, all modifications to an artifact are recorded by the SVN server.To view the history for an artifact:  Go to the Repository menu and choose Team, then History.  In the history list popup, select the artifact in the left-hand column.  The revision history for the selected artifact is displayed in the right-hand column. This shows all the changes that have been made, and the author of each change.To revert to an older version, click on that version in the revision history, then click on Revert to this version in the popup.The selected version will be restored.Restore pointsA restore point is a marker in a repository that you can use to restore your repository back to an earlier state.The difference between a restore point and a version in the revision history is that a restore point applies to the whole repository but a version applies to a single artifact.To create a restore point:  Go to the Repository menu and choose Team, then Manage restore points.  Select Create a restore point then click Next.  Enter a description for the restore point, then click Create. The restore point is created.To restore an older point:  Go to the Repository menu and choose choose Team, then Manage restore points.  Select Restore to an older point then click Next.  Select the restore point you want to restore, then click Restore. The repository reverts to the restore point.",
      "url": " /bonita/7.8/development/workspaces-and-repositories",
      "author": "",
      "categories": "Development"
    }
    ,
  

    "bonita-7-8-howtos-bdm-in-rest-api": {
      "title": "Manage BDM in custom Rest APIs",
      "content"     : "How to manage BDM in REST API extensionsThis page demonstrates best practices when developing a REST API Extension accessing Business Data.Special attention is paid on performance matters.First use caseGroovy code sampleRest API Response contentTroubleshooting bad practicesOther use casesReturning the whole object without its lazy loaded fieldsReturning the whole object with an API link load in the lazy fieldsKnown limitationsReturning the object with SOME of its lazy loaded fields ONLYFirst use caseImage below shows the BDM model used for the first use-case:Note that the relationships from car to wheel1, wheel2, wheel3, wheel4 are lazy loaded (in the Studio, it isconfigured by selecting the Only load related objects when needed radio button).Groovy code sampleBelow is an example of a REST API extension groovy script that accesses the Business Data model.Good practices are:  If lazy loaded objects are not necessary in the response, ONLY extract the information needed. This avoids costly loading of unnecessary objects.  If lazy loaded objects should always be returned in the response, consider changing the relation from ‘lazy’ to ‘eager’in the model.class CarManagement implements RestApiController {private static final Logger LOGGER = LoggerFactory.getLogger(CarManagement.class)@OverrideRestApiResponse doHandle(HttpServletRequest request, RestApiResponseBuilder responseBuilder, RestAPIContext context) {// To retrieve query parameters use the request.getParameter(..) method.// Be careful, parameter values are always returned as String values// Retrieve p parameterdef p = request.getParameter &quot;p&quot;if (p == null) {return buildResponse(responseBuilder, HttpServletResponse.SC_BAD_REQUEST,&quot;&quot;&quot;{&quot;error&quot; : &quot;the parameter p is missing&quot;}&quot;&quot;&quot;)}// Retrieve c parameterdef c = request.getParameter &quot;c&quot;if (c == null) {return buildResponse(responseBuilder, HttpServletResponse.SC_BAD_REQUEST,&quot;&quot;&quot;{&quot;error&quot; : &quot;the parameter c is missing&quot;}&quot;&quot;&quot;)}// use APIClient to retrieve the CarDAO class:def carDAO = context.apiClient.getDAO(CarDAO.class)def currentModel = &quot;DeLorean&quot;// Fetch the cars that match the search criteria:List&amp;lt;Car&amp;gt; cars = carDAO.findByModel(currentModel, p as int, c as int)// Prepare the Json result:// Do NOT return directly the list &quot;cars&quot;, as the entire list of Wheel objects would be fetched by lazy loading when calling the JsonBuilder toString method.// Instead, ONLY select the fields that are necessary for your business logic (alternative methods are also available, see below in this page):def carModels = [:]for (Car car : cars) {// return the fields &quot;id&quot;, &quot;buildYear&quot;, &quot;color&quot;:carModels.put(&quot;id: ${car.persistenceId}&quot;, &quot;${car.buildYear} - ${car.color}&quot;)}def result = [ &quot;model&quot; : currentModel, &quot;number of cars&quot; : cars.size(), &quot;cars&quot; : carModels ]// Attention: do not use &quot;toPrettyString()&quot; if your response is large, as the page &quot;size&quot; may be uselessly big:return buildResponse(responseBuilder, HttpServletResponse.SC_OK, new JsonBuilder(result).toString())}}Rest API Response contentBelow is an example of the resulting response (the json is formatted to improve readability):{&quot;model&quot;: &quot;DeLorean&quot;,&quot;number of cars&quot;: 30,&quot;cars&quot;: {&quot;id: 1&quot;: &quot;1933 - Red&quot;,&quot;id: 6&quot;: &quot;1938 - Rainbow&quot;,&quot;id: 20&quot;: &quot;2002 - Green&quot;,&quot;id: 24&quot;: &quot;1940 - Yellow&quot;,&quot;id: 33&quot;: &quot;1954 - Purple&quot;,&quot;id: 46&quot;: &quot;1932 - Rainbow&quot;,&quot;id: 50&quot;: &quot;2008 - Teal&quot;,&quot;id: 51&quot;: &quot;1979 - Purple&quot;,&quot;id: 53&quot;: &quot;1942 - Purple&quot;,&quot;id: 60&quot;: &quot;1941 - Rainbow&quot;,&quot;id: 71&quot;: &quot;1987 - Orange&quot;,&quot;id: 75&quot;: &quot;1956 - Green&quot;,&quot;id: 82&quot;: &quot;1938 - Rainbow&quot;,&quot;id: 92&quot;: &quot;1955 - Rainbow&quot;,&quot;id: 100&quot;: &quot;1965 - Orange&quot;,&quot;id: 119&quot;: &quot;1992 - Blue&quot;,&quot;id: 128&quot;: &quot;2015 - Purple&quot;,&quot;id: 130&quot;: &quot;1932 - Yellow&quot;,&quot;id: 142&quot;: &quot;1951 - Grey&quot;,&quot;id: 143&quot;: &quot;1930 - White&quot;,&quot;id: 146&quot;: &quot;1937 - Teal&quot;,&quot;id: 147&quot;: &quot;1961 - Blue&quot;,&quot;id: 152&quot;: &quot;1939 - Purple&quot;,&quot;id: 158&quot;: &quot;1977 - Grey&quot;,&quot;id: 159&quot;: &quot;2013 - Rainbow&quot;,&quot;id: 160&quot;: &quot;1997 - Purple&quot;,&quot;id: 163&quot;: &quot;1973 - Rainbow&quot;,&quot;id: 164&quot;: &quot;1940 - Purple&quot;,&quot;id: 165&quot;: &quot;1933 - Teal&quot;,&quot;id: 172&quot;: &quot;1983 - Rainbow&quot;}}Note that Wheels are not returned, only necessary information is fetched.As a result, performance is efficientTroubleshooting bad practices Practices leading to poor performanceSince wheel1, wheel2, wheel3, wheel4 are lazy loaded, they are not retrieved directly when retrieving a Car.The retrieval of related Wheel objects is only performed when accessing the fields (via getWheel1(), …), if necessary.However, when building the response, the JsonBuilder&#39;s toString method  implicitly fetches all lazy loaded fields (it calls all the field getters).So, if a large number of Business Data is returned and if you have lazy loaded fields in the returned objects, numerous queries are executed, leading to poor performance.For example, if you don’t follow the code sample above and write something like:def currentModel = &quot;DeLorean&quot;// Fetch the cars that match the search criteria:List&amp;lt;Car&amp;gt; cars = carDAO.findByModel(currentModel, p as int, c as int)def result = [ &quot;cars&quot; : cars ]return buildResponse(responseBuilder, HttpServletResponse.SC_OK, new JsonBuilder(result).toString())The returned result will contain, for each car, the fields persistenceId, buildYear and color, allowing you to use these in your application(s).However, assuming you want to retrieve 10 cars of the “Delorean” model, this code will execute a total of 41 “Select” database queries  1 query to get the cars,  then 4 queries per car to fetch each one of the wheel fields to build the JSON response (so 40 queries).In comparison, the code following good practises only performs a single Select database query.Other use casesThe rest api extension example previously described in this page advices to:  create a custom data structure for the response  copy only selected fields from the BDM object into this custom data structureIn some cases, you may want to return the entire BDM object structure in the response:  because it eases parsing the REST API Json result to build an Object  for maintenance reasons, when adding a new field to a BDM object, you may avoid to have to modify the Rest API extension code to include this new fieldReturning the whole object without its lazy loaded fieldsThe troobleshooting section gives an example using the Groovy JsonBuilder class leading to poor performance: it calls the getter of lazy loaded fields whichthen fetches the data.So using an alternate json builder implementation can solve this issue.As the BDM object lazy loaded fields are marked with the Jackson’s @JsonIgnore annotation and as the Jackson’s library is available for use in the Rest API Extension,the best candidate for this is to use the Jackson serializer to generate the json response.import com.fasterxml.jackson.databind.ObjectMapperimport com.fasterxml.jackson.databind.SerializationFeatureclass CarManagement implements RestApiController {private static final Logger LOGGER = LoggerFactory.getLogger(CarManagement.class)// Use a shared instance for performance reason (see https://github.com/FasterXML/jackson-docs/wiki/Presentation:-Jackson-Performance)private static final ObjectMapper jsonBuilder = new ObjectMapper()static {// needed to serialize BDM object because of the Bonita lazy loading mechanismjsonBuilder.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS)}@OverrideRestApiResponse doHandle(HttpServletRequest request, RestApiResponseBuilder responseBuilder, RestAPIContext context) {// To retrieve query parameters use the request.getParameter(..) method.// Be careful, parameter values are always returned as String values// Retrieve p parameterdef p = request.getParameter &quot;p&quot;if (p == null) {return buildResponse(responseBuilder, HttpServletResponse.SC_BAD_REQUEST,&quot;&quot;&quot;{&quot;error&quot; : &quot;the parameter p is missing&quot;}&quot;&quot;&quot;)}// Retrieve c parameterdef c = request.getParameter &quot;c&quot;if (c == null) {return buildResponse(responseBuilder, HttpServletResponse.SC_BAD_REQUEST,&quot;&quot;&quot;{&quot;error&quot; : &quot;the parameter c is missing&quot;}&quot;&quot;&quot;)}// use APIClient to retrieve the CarDAO class:def carDAO = context.apiClient.getDAO(CarDAO.class)def currentModel = &quot;DeLorean&quot;// Fetch the cars that match the search criteria:List&amp;lt;Car&amp;gt; cars = carDAO.findByModel(currentModel, p as int, c as int)// Prepare the Json result:def result = [ &quot;model&quot; : currentModel, &quot;number of cars&quot; : cars.size(), &quot;cars&quot; : cars ]return buildResponse(responseBuilder, HttpServletResponse.SC_OK, jsonBuilder.writeValueAsString(result))}Returning the whole object with an API link load in the lazy fieldsThe idea is to create a custom Json serializer.A custom Json serializer is a class which extends com.fasterxml.jackson.databind.JsonSerializer. There is a method serialize to implement, which has the responsability to serialize the input model into Json.The custom Json serializer has to come with an other class, an object mapper,  which extends com.fasterxml.jackson.databind.ObjectMapper.This mapper registers a simple module (com.fasterxml.jackson.databind.module.SimpleModule), which has to contain the custom serializer.At the end, in your rest API endpoint, you interact with the mapper.Here is an implementation example for the object Car which has four lazy attributes of type Wheel:The serializer takes a Car in input, and build a Json object for it. The wheels are replaced with links to an other Rest API extension with the car ID and the wheel number in parameter. Calling this API will return the wheel. This is a classic lazy behavior./*********************** ***** SERIALIZER ****** ***********************/import com.fasterxml.jackson.core.JsonGeneratorimport com.fasterxml.jackson.databind.JsonSerializerimport com.fasterxml.jackson.databind.SerializerProviderclass CarSerializer extends JsonSerializer&amp;lt;Car&amp;gt;{	@Override	public void serialize(Car car, JsonGenerator jgen, SerializerProvider provider)throws IOException, JsonProcessingException {		jgen.writeStartObject()				jgen.writeNumberField(&quot;carID&quot;, car.getPersistenceId())		jgen.writeStringField(&quot;model&quot;, car.getModel())		jgen.writeNumberField(&quot;buildYear&quot;, car.getBuildYear())		jgen.writeStringField(&quot;color&quot;, car.getColor())		jgen.writeStringField(&quot;wheel1Request&quot;, getWheelRequest(car.getPersistenceId(), 1))		jgen.writeStringField(&quot;wheel2Request&quot;, getWheelRequest(car.getPersistenceId(), 2))		jgen.writeStringField(&quot;wheel3Request&quot;, getWheelRequest(car.getPersistenceId(), 3))		jgen.writeStringField(&quot;wheel4Request&quot;, getWheelRequest(car.getPersistenceId(), 4))				jgen.writeEndObject()	}		private String getWheelRequest(Long carID, Integer wheelNum) {		return String.format(&#39;../API/extension/wheel?p=0&amp;amp;c=10&amp;amp;carID=%s&amp;amp;wheelNum=%s&#39;, carID, wheelNum)	}}/*********************** ******* MAPPER ******** ***********************/import com.fasterxml.jackson.databind.ObjectMapperimport com.fasterxml.jackson.databind.SerializationFeatureimport com.fasterxml.jackson.databind.module.SimpleModuleclass CarObjectMapper extends ObjectMapper {	public CarObjectMapper () {	SimpleModule module = new SimpleModule()	module.addSerializer(Car.class, new CarSerializer())	registerModule(module)} }/*********************** ******** INDEX ******** ***********************/class CarIndex implements RestApiController {private static final Logger LOGGER = LoggerFactory.getLogger(CarIndex.class)private static final CarObjectMapper CAR_MAPPER = new CarObjectMapper()@OverrideRestApiResponse doHandle(HttpServletRequest request, RestApiResponseBuilder responseBuilder, RestAPIContext context) {def p = request.getParameter &quot;p&quot;def c = request.getParameter &quot;c&quot;				def carDAO = context.apiClient.getDAO(CarDAO.class)		int startIndex = (p as Integer)*(c as Integer)		int endIndex = c as Integer		List&amp;lt;Car&amp;gt; cars = carDAO.find(startIndex, endIndex)				def result = CAR_MAPPER.writeValueAsString(cars)		return buildResponse(responseBuilder, HttpServletResponse.SC_OK, result)}RestApiResponse buildResponse(RestApiResponseBuilder responseBuilder, int httpStatus, Serializable body) {return responseBuilder.with {withResponseStatus(httpStatus)withResponse(body)build()}}}Known limitationsReturning the object with SOME of its lazy loaded fields ONLYThis use case is not supported. In other words it is necessary to use one database request per lazy loaded field you wish to retrieve.",
      "url": " /bonita/7.8/howtos/bdm-in-rest-api",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-8-howtos-bo-multiple-refs-tutorial": {
      "title": "Manage multiple references in Business Objects",
      "content"     : "How to manage multiple references in Business ObjectsIntroductionCreate the business object modelDesign the expense report processDesign the task contract to update expensesAdd operations to update the business dataRun the processIntroductionThis tutorial explains how to create, update or delete a multiple reference in a Business Object. The tutorial can be used with Bonita Community edition, and uses features that are available in all editions. The example uses an expense report as business object.Design a task contract and associated operations to update a business object with a multiple reference.Create the business object modelCreate an Expense business object like below.Then create ExpenseReport business object referencing multiple expenses by composition.Design the expense report process  Create a new  process  Add a new report business variable of type ExpenseReport initialized with following groovy script	def aDummyExpense = expenseDAO.newInstance();	aDummyExpense.amount = 5	aDummyExpense.nature = &quot;A dummy expense&quot;	aDummyExpense.expenseDate = new Date()	def anotherDummyExpense = expenseDAO.newInstance();	anotherDummyExpense.amount = 55	anotherDummyExpense.nature = &quot;A another dummy expense&quot;	anotherDummyExpense.expenseDate = new Date()	def report = expenseReportDAO.newInstance()	report.expenses &amp;lt;&amp;lt; aDummyExpense	report.expenses &amp;lt;&amp;lt; anotherDummyExpense	return report  Rename Step1 to Update expense reportDesign the task contract to update expenses  Select the Update expense report task  Go to Execution &amp;gt; Contract property tab  Create a contract like belownewExpenses input is used to gather a list of new expenses to add to the report expensesToDelete input is used to gather a list of Expense id to delete expensesToUpdate input is used to gather a list of existing expenses to update in the reportIn the contract we use TEXT input type for persistenceId instead of numeric type to support the whole java.lang.Long range.JSON number type range does not extend to java.lang.Long.MAX_VALUE. A convertion to long will be applied in sciprts.Add operations to update the business data  Go to Execution &amp;gt; Operations property tab  Add an operation  Use the report business varaible as left operand.  Change the operator and select Use a java  method, choose the setExpenses method.  In the right operand use the following script to add new expenses in the report:	def result = []	result.addAll(report.getExpenses())	newExpenses.each{		def exp = expenseDAO.newInstance()		exp.amount = it.amount		exp.nature = it.nature		exp.expenseDate = it.expenseDate		result &amp;lt;&amp;lt; exp	}	return result  Add another operation  Use the report business varaible as left operand.  Change the operator and select Use a java  method, choose the setExpenses method.  In the right operand use the following script to delete expenses from the report:	def result = []	result.addAll(report.getExpenses())	result.removeAll(result.findAll{expensesToDelete.contains(it.persistenceId.toString())})	return result  Add another operation  Use the report business varaible as left operand.  Change the operator and select Use a java  method, choose the setExpenses method.  In the right operand use the following script to update expenses existing in the report:	import com.company.model.Expense;	def updatedExpenses = []	updatedExpenses.addAll(report.getExpenses())	expensesToUpdate.each{ exp -&amp;gt;		def Expense expenseToUpdate = updatedExpenses.find{			it.persistenceId == exp.persistenceId.toLong()		}		if(expenseToUpdate){			expenseToUpdate.amount = exp.amount			expenseToUpdate.expenseDate = exp.expenseDate			expenseToUpdate.nature = exp.nature		}else{			throw new Exception(&quot;Expense with id $exp.persistenceId does not exists.&quot;)		}	}	return updatedExpensesRun the processYou may now run the process and validate the expected behavior using autogenerated forms.  Click on Run  Start the process instance form the autogenerated form  In a web browser, you can check the content of your report calling the following Rest API:http://localhost:8080/bonita/API/bdm/businessData/com.company.model.ExpenseReport/1/expensesIt should display this result according to the initialization of the report business variable.[	{	&quot;persistenceId&quot;:1,	&quot;persistenceId_string&quot;:&quot;1&quot;,	&quot;persistenceVersion&quot;:0,	&quot;persistenceVersion_string&quot;:&quot;0&quot;,	&quot;amount&quot;:5.0,	&quot;amount_string&quot;:&quot;5.0&quot;,	&quot;nature&quot;:&quot;A dummy expense&quot;,	&quot;expenseDate&quot;:1461748727495	},	{	&quot;persistenceId&quot;:2,	&quot;persistenceId_string&quot;:&quot;2&quot;,	&quot;persistenceVersion&quot;:0,	&quot;persistenceVersion_string&quot;:&quot;0&quot;,	&quot;amount&quot;:55.0,	&quot;amount_string&quot;:&quot;55.0&quot;,	&quot;nature&quot;:&quot;A another dummy expense&quot;,	&quot;expenseDate&quot;:1461748727495	}]  Perform the Update expense report task like below  In a web browser, check the content of your report calling the following Rest API: http://localhost:8080/bonita/API/bdm/businessData/com.company.model.ExpenseReport/1/expensesIt should display the following result:[	{	&quot;persistenceId&quot;:1,	&quot;persistenceId_string&quot;:&quot;1&quot;,	&quot;persistenceVersion&quot;:1,	&quot;persistenceVersion_string&quot;:&quot;1&quot;,	&quot;amount&quot;:7.0,	&quot;amount_string&quot;:&quot;7.0&quot;,	&quot;nature&quot;:&quot;updated nature&quot;,	&quot;expenseDate&quot;:1461801600000	},	{	&quot;persistenceId&quot;:3,	&quot;persistenceId_string&quot;:&quot;3&quot;,	&quot;persistenceVersion&quot;:0,	&quot;persistenceVersion_string&quot;:&quot;0&quot;,	&quot;amount&quot;:10.0,&quot;amount_string&quot;:&quot;10.0&quot;,	&quot;nature&quot;:&quot;new expense&quot;,	&quot;expenseDate&quot;:1462406400000	}]To conclude, when modifying a collection of Business objects in a script you must return new java.util.List instances and not the list returned by an accessor (eg: report.getExpenses()) as it will return an Hibernate specific implemetation not compliant with our business objects.Do not forget to use the persistence id (or another unique attribute of the object) in the contract if you need to access existing object (update or delete usecases).",
      "url": " /bonita/7.8/howtos/bo-multiple-refs-tutorial",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-8-howtos-custom-authorization-rule-mapping": {
      "title": "Map authorization rules",
      "content"     : "How to map authorization rulesIntroductionCreate and deploy custom authorization ruleCreate custom authorization rule java projectConfigure engine with new rulesIntroductionThis tutorial explains how to customize authorization rule mapping.Authorization rule is a java bean that must implement getId and isAllowed methods.Authorization Rule Mapping is a set of rules used to allow connected user to access page and form. An empty list grants access to user. A non empty list allows access if all rules return true to their isAllowed method. Those rules grant or not access to the connected user for:  use a page or form to start a process  display process overview  use a page or form to execute a taskThe tutorial can be used with Bonita Community edition, and uses features that are available in all editions.The following elements may be used as extension points but could be subject to change across versions. No changes are planned, but we reserve the right to change make incompatible changes in any future version.Create and deploy custom authorization ruleCreate custom authorization rule java projectIn this example, Custom authorization rule is a maven-based java project that need a maven dependency on bonita-server maven artifact.  pom.xml&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&amp;lt;groupId&amp;gt;org.bonitasoft.example&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;authorization-tutorial&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;&amp;lt;dependencies&amp;gt;&amp;lt;dependency&amp;gt;&amp;lt;groupId&amp;gt;org.bonitasoft.engine&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;bonita-server&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;${bonita-server.version}&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;&amp;lt;/dependencies&amp;gt;&amp;lt;properties&amp;gt;&amp;lt;bonita-server.version&amp;gt;[7.8.0,)&amp;lt;/bonita-server.version&amp;gt;&amp;lt;/properties&amp;gt;&amp;lt;build&amp;gt;&amp;lt;plugins&amp;gt;&amp;lt;plugin&amp;gt;&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;&amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;&amp;lt;version&amp;gt;3.5.1&amp;lt;/version&amp;gt;&amp;lt;configuration&amp;gt;&amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt;&amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt;&amp;lt;/configuration&amp;gt;&amp;lt;/plugin&amp;gt;&amp;lt;/plugins&amp;gt;&amp;lt;/build&amp;gt;&amp;lt;/project&amp;gt;  create CustomRule class that implements org.bonitasoft.engine.page.AuthorizationRulepackage org.bonitasoft.example.authorization;import java.io.Serializable;import java.util.Map;import org.bonitasoft.engine.commons.exceptions.SExecutionException;import org.bonitasoft.engine.core.process.instance.api.ProcessInstanceService;import org.bonitasoft.engine.page.AuthorizationRule;import org.bonitasoft.engine.page.AuthorizationRuleWithParameters;import org.bonitasoft.engine.session.SessionService;import org.bonitasoft.engine.sessionaccessor.SessionAccessor;public class CustomRule extends AuthorizationRuleWithParameters implements AuthorizationRule {private ProcessInstanceService processInstanceService;private SessionService sessionService;private SessionAccessor sessionAccessor;public CustomRule(ProcessInstanceService processInstanceService, SessionService sessionService, SessionAccessor sessionAccessor) {// some services autowired by springthis.processInstanceService = processInstanceService;this.sessionAccessor = sessionAccessor;this.sessionService = sessionService;}@Overridepublic boolean isAllowed(String key, Map&amp;lt;String, Serializable&amp;gt; context) throws SExecutionException {//add business logic herereturn true;}@Overridepublic String getId() {return &quot;CUSTOM_RULE_UNIQUE_ID&quot;;}}  create CustomAuthorizationRuleMapping class that implements org.bonitasoft.engine.core.form.AuthorizationRuleMappingpackage org.bonitasoft.example.authorization;import java.util.Arrays;import java.util.List;import org.bonitasoft.engine.core.form.AuthorizationRuleMapping;public class CustomAuthorizationRuleMapping implements AuthorizationRuleMapping {@Overridepublic List&amp;lt;String&amp;gt; getProcessStartRuleKeys() {return Arrays.asList(&quot;CUSTOM_RULE_UNIQUE_ID&quot;);}@Overridepublic List&amp;lt;String&amp;gt; getProcessOverviewRuleKeys() {return Arrays.asList(&quot;CUSTOM_RULE_UNIQUE_ID&quot;);}@Overridepublic List&amp;lt;String&amp;gt; getTaskRuleKeys() {return Arrays.asList(&quot;CUSTOM_RULE_UNIQUE_ID&quot;);}}  build maven jarmvn clean installConfigure engine with new rules  copy jar into webapps/bonita/WEB-INF/lib/ folder (for default tomcat bundle)pull current engine configuration using platform setup tool   ./setup/setup.sh pulladd customRule bean registration in platform_conf/current/tenants/TENANT_ID/tenant_engine/bonita-tenant-custom.xml &amp;lt;bean id=&quot;customRule&quot; class=&quot;org.bonitasoft.example.authorization.CustomRule&quot;&amp;gt;&amp;lt;constructor-arg name=&quot;processInstanceService&quot; ref=&quot;processInstanceService&quot; /&amp;gt;&amp;lt;constructor-arg name=&quot;sessionService&quot; ref=&quot;sessionService&quot; /&amp;gt;&amp;lt;constructor-arg name=&quot;sessionAccessor&quot; ref=&quot;sessionAccessor&quot; /&amp;gt; &amp;lt;/bean&amp;gt;add customAuthorizationRuleMapping bean registration in platform_conf/current/tenants/TENANT_ID/tenant_engine/bonita-tenant-custom.xml &amp;lt;bean id=&quot;customAuthorizationRuleMapping&quot;  class=&quot;org.bonitasoft.example.authorization.CustomAuthorizationRuleMapping&quot;/&amp;gt;  uncomment to declare customAuthorizationRuleMapping in platform_conf/current/tenants/TENANT_ID/tenant_engine/bonita-tenant-community-custom.propertiesbonita.tenant.authorization.rule.mapping=customAuthorizationRuleMapping  push current engine configuration using platform setup tool ./setup/setup.sh pushrestart server./stop-bonita.sh./start-bonita.shYou can find a complete implementation example of page mapping authorization rule and configuration in this project on GitHub.",
      "url": " /bonita/7.8/howtos/custom-authorization-rule-mapping",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-8-howtos-datetimes-management-tutorial": {
      "title": "Manage dates and times in BDM and User Interfaces",
      "content"     : "How to manage dates and times in BDM and User InterfacesThis howto applies to Bonita 7.5.0 and above.To manage dates and times in the BDM and User Interfaces, Bonita comes with 3 types of data that you can manipulate through processes, APIs and user interfaces (forms/pages).This page gives a step-by-step procedure to create a process with forms that allow to choose a date (with or without a time) and then display it, leveraging each of these data types.Date onlyDate and time without time zoneDate and time displayed in the user time zoneDate onlyThe type DATE ONLY is used to hold a date with no time of the day. Use it for birth dates for example.It is stored in the database as an ISO 8601 formatted Character String (e.g. “2017-01-13”).It uses java.time.LocalDate as Java type.The following sections show how to create, update, and display an Employee object with a birth date.Define the business data  In the studio, open the Business Data Model editor (in menu Development &amp;gt; Business Data Model &amp;gt; Manage…)  Create a business object Employee with an attribute birthdate of type DATE ONLY (this type replaces the type DATE (NOT RECOMMENDED) that is more difficult to handle as it also includes time information)  Create a new process  In the process Data tab, create a new business variable employee of the type EmployeeDefine the contract at pool level, as well as the script to initialize the business variable  In the process Execution tab &amp;gt; Contract section, define the contract inputs using the Add from data… button  Select the business variable employee  Follow the steps to generate a contract with a COMPLEX input employeeInput containing a birthdate attribute of type DATE ONLY (keep the option to generate the variable initialization script automatically)Generate the process instantiation form  In the process Execution tab, Form section, generate the form by clicking on the pencil icon  Since you have a DATE ONLY attribute in the contract inputs, a Date picker widget is automatically added to the formThe form is already configured correctly.Define the contract at task level, as well as operations to update the business variable  Rename the first task to Update birth date  In the task Execution tab &amp;gt; Contract section, define the contract inputs using the Add from data… button  Select the business variable employee  Follow the steps to generate a contract with a COMPLEX input employeeInput containing a birthdate attribute of type DATE ONLY (keep the option to generate the operations automatically)Generate the ‘Update’ task form  In the task Execution tab, Form section, generate the form by clicking on the pencil icon  Since you have a DATE ONLY attribute in the contract inputs, a Date picker widget is automatically added to the form  In the UI Designer, define a variable to retrieve the Employee currently stored, using the context:  In the Variables panel at the bottom of the editor, click on Create a new variable  Enter the name employee for the new variable  Select the type external API  Set the API URL of the variable to ../FYI, The value returned by the REST API for the birth date will be an ISO 8601 formatted String (e.g. “1983-01-13”).Set the value of the Date picker widget to employee.birthdate  Update the variable formOutput to change its value to :return { &#39;employeeInput&#39;: $data.employee};  You can delete the variable formInputThe Date picker widget supports the following types for its Value property as input:  ISO 8601 String variables (with or without time information)  Date objects  Long number values (Milliseconds since epoch)However, to support pages designed with an older UI Designer version, the output of the widget is always a Javascript Date object. So it will change the type of the variable bound to the widget Value to a Date object when the user selects a date.When sent in the JSON body of a request, it is serialized into an ISO 8601 formatted String variable with the time set to midnight UTC (e.g., 2016-12-31T00:00:00.000Z).The time information is dropped at contract level when received by the process instantiation REST API and converted to a java.time.LocalDate.Retrieve the date from the database and display itIn another step form (or in any other page) you may want to retrieve the date and display it.In order to do so:  Create a new task named Review birth date after the existing one  In the task Execution tab, Form section, generate the form by clicking on the pencil icon  In the UI Designer, define a variable to retrieve the Employee currently stored, using the context.  In order to do so, proceed the same way as you did for the previous step form:  In the Variables panel at the bottom of the editor, click on Create a new variable  Enter the name employee for the new variable  Select the type external API  Set the API URL of the variable to ../From the Form editor palette, drop a Date picker widget on the whiteboard  Set the property Read-only to yes  Set its Value to employee.birthdateYou may prefer to display it in some text. In order to do so:  Drop a Text widget on the whiteboard  Replace the default Text property value with an expression using the uiDate filter to format the date the way you want. E.g., ``For more information on the different formats available, click on the filters link of the Text property caption.You can now run your process and see that the date retrieved from the business data database is consistent with the date you chose in the previous step.Date and time without time zoneThe type DATE-TIME (NO TIME ZONE) is used to hold a date-time that displays the same whatever the user’s time zone is. It can be used it for stores opening hours, or flight departure and arrival days and times, for example.It is stored in the database as an ISO 8601 formatted Character String (e.g. “2017-01-13T13:00:00”).It uses java.time.LocalDateTime as Java type.The following sections show how to create, update, and display a Flight object with a local departure date and time (that should display the same local time, no matter where you are in the world.Define the business data  In the studio, open the Business Data Model editor (in menu Development &amp;gt; Business Data Model &amp;gt; Manage…)  Create a business object Flight with an attribute departureTime of type DATE-TIME (NO TIME ZONE)  Create a new process  In the process Data tab, create a new business variable flight of the type FlightDefine the contract at pool level, as well as the script to initialize the business variable  In the process Execution tab &amp;gt; Contract section, define the contract inputs using the Add from data… button  Select the business variable flight  Follow the steps to generate a contract with a COMPLEX input flightInput containing a departureTime attribute of type DATE-TIME (NO TIME ZONE) (keep the option to generate the variable initialization script automatically)Generate the process instantiation form  In the process Execution tab, Form section, generate the form by clicking on the pencil icon  Since you have a DATE-TIME (NO TIME ZONE) attribute in the contract inputs, a Date time picker widget is automatically added to the formThe widget is already configured not to handle the user time zone.Define the contract at task level, as well as operations to update business varaible  Rename the first task to Update departure time  In the task Execution tab &amp;gt; Contract section, define the contract inputs using the Add from data… button  Select the business variable flight  Follow the steps to generate a contract with a COMPLEX input flightInput containing a departureTime attribute of type DATE-TIME (NO TIME ZONE) (keep the option to generate the operations automatically)Generate the ‘Update’ task form  In the task Execution tab, Form section, generate the form by clicking on the pencil icon  Since you have a DATE-TIME (NO TIME ZONE) attribute in the contract inputs, a Date time picker widget is automatically added to the form  In the UI Designer, define a variable to retrieve the Flight currently stored using the context:  In the Variables panel at the bottom of the editor, click on Create a new variable  Enter the name flight for the new variable  Select the type external API  Set the API URL of the variable to ../FYI, The value returned by the REST API for the flight departure time will be an ISO 8601 formatted String (e.g. “2017-01-13T15:00:00”).Set the Value of the Date time picker widget to flight.departureTime  Update the variable formOutput to change its value to:return { &#39;flightInput&#39;: $data.flight};  You can delete the variable formInputThe Date time picker widget output is an ISO 8601 formatted String (e.g. “2017-01-13T15:00:00”).At contract level, when received by the task execution REST API, it is converted to a java.time.LocalDateTime.Retrieve the date and time from the database and display themIn another step form (or in any other page), you may want to retrieve the date and time and display them.In order to do so:  Create a new task Review departure time after the existing one  In the task Execution tab, Form section, generate the form by clicking on the pencil icon  In the UI Designer, define a variable to retrieve the Flight currently stored using the context. In order to do so, proceed the same way as you did for the previous step form:  In the Variables panel at the bottom of the editor, click on Create a new variable  Enter the name flight for the new variable  select the type external API  Set the API URL of the variable to ../From the Form editor palette, drop a Date time picker widget on the whiteboard  Set the property Read-only to yes  Set the property Handle time zone to no  Set its Value to flight.departureTimeYou may prefer to display it in some text. In order to do so:  Drop a Text widget on the whiteboard  Replace the default Text property value with an expression using the uiDate filter to format the date and time the way you want. E.g., ``For more information on the different formats available, click on the filters link of the Text property caption.You can now run your process and see that the departure date and time retrieved from the business data database is consistent with the date and time you chose in the previous step.If you change your system time zone while viewing the steps and refresh the page, you will see that the displayed time remains the same.Date and time displayed in the user time zoneThe type DATE-TIME (TIME ZONE) is used to hold a date-time whose displayed value should adapt to the user’s time zone (e.g., the day and time of a meeting with participants from multiple time zones).It is stored in database as an ISO 8601 formatted Character String (e.g.,2017-01-13T13:00:00Z).It uses java.time.OffsetDateTime as Java type.The following sections show how to create, update, and display a Meeting object with a start date and time that reflect the user time zone when it is displayed.Define the business data  In the studio, open the Business Data Model editor (in menu Development &amp;gt; Business Data Model &amp;gt; Manage…)  Create a business object Meeting with an attribute startTime of type DATE-TIME (TIME ZONE)  Create a new process  In the process Data tab, create a new business variable meeting of the type MeetingDefine the contract at process level, as well as the script to initialize the business variable  In the process Execution tab &amp;gt; Contract section, define the contract inputs using the Add from data… button  Select the business variable meeting  Follow the steps to generate a contract with a COMPLEX input meetingInput containing a startTime attribute of type DATE-TIME (TIME ZONE) (keep the option to generate the variable initialization script automatically)Generate the process instantiation form  In the process Execution tab, Form section, generate the form by clicking on the pencil icon  Since you have a DATE-TIME (TIME ZONE) attribute in the contract inputs, a Date time picker widget is automatically added to the formThe widget is already configured to handle the user time zone.Define the contract at task level, as well as the operations to update the business variable  Rename the first task to Update start time  In the task Execution tab &amp;gt; Contract section, define the contract inputs using the Add from data… button  Select the business variable meeting  Follow the steps to generate a contract with a COMPLEX input meetingInput containing a startTime attribute of type DATE-TIME (TIME ZONE) (keep the option to generate the operations automatically)Generate the ‘Update’ task form  In the task Execution tab, Form section, generate the form by clicking on the pencil icon  Since you have a DATE-TIME (TIME ZONE) attribute in the contract inputs, a Date time picker widget is automatically added to the form  In the UI Designer, define a variable to retrieve the meeting currently stored using the context:  In the Variables panel at the bottom of the editor, click on Create a new variable  Enter the name meeting for the new variable  Select the type external API  Set the API URL of the variable to ../FYI, The value returned by the REST API for the meeting start time will be an ISO 8601 formatted String (e.g. “2017-01-13T15:00:00Z”).Set the Value of the Date time picker widget to meeting.startTime  Update the variable formOutput to change its value to:return { &#39;meetingInput&#39;: $data.meeting};  You can delete the variable formInputThe Date time picker widget output is an ISO 8601 formatted String representing the selected date and time in UTC (e.g. “2017-01-13T13:00:00Z”).At contract level when received by the task execution REST API, it is converted to a java.time.OffsetDateTime.Unless the user is in the GMT time zone, there will be an offset between the time he selects and the time stored in database.Retrieve the date and time from the database and display themIn another step form (or in any other page) you may want to retrieve the date and time and display them.In order to do so:  Create a new task Review meeting time after the existing one  In the task Execution tab, Form section, generate the form by clicking on the pencil icon  In the UI Designer, define a variable to retrieve the Flight currently stored using the context. In order to do so, proceed the same way as you did for the previous step form :  In the Variables panel at the bottom of the editor, click on Create a new variable  Enter the name meeting for the new variable  Select the type external API  Set the API URL of the variable to ../From the Form editor palette, drop a Date time picker widget on the whiteboard  Set the property Read-only to yes  Make sure the property Handle time zone is set to yes  Set its Value to meeting.startTimeYou may prefer to display it in some text. In order to do so:  Drop a Text widget on the whiteboard  Replace the default Text property value with an expression using the uiDate filter to format the date the way you want. E.g., ``For more information on the different formats available, click on the filters link of the Text property caption.You can now run your process and see that the date and time retrieved from the business data database is consistent with the date and time you chose in the previous step.If you change your system time zone while viewing the steps and refresh the page, you will see that the displayed time adapts to the new time zone.",
      "url": " /bonita/7.8/howtos/datetimes-management-tutorial",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-8-howtos-list-of-documents": {
      "title": "Manage a list of documents",
      "content"     : "How to manage a list of documentsA list of documents is represented by several documents having the same name (attribute “name”). It is possible to add/remove elements to a list using the same methods as for a simple document.Get the documents of the listAdd a new documentAdd a new document to the list at a given indexGet the documents of the listIn a case with myDocList as a list of documents, use the following request to sort the result by ascending index value:Request URL:|Method | Path + Query||:-|:-|| GET |/API/bpm/caseDocument?p=0&amp;amp;c=10&amp;amp;f=name=myDocList&amp;amp;o=index ASC|Response payload :[  { &quot;id&quot;:&quot;1&quot;, &quot;creationDate&quot;:&quot;2014-10-09 16:39:52.472&quot;, &quot;author&quot;:&quot;1&quot;, &quot;index&quot;:&quot;0&quot;, &quot;contentMimetype&quot;:&quot;text/plain&quot;, &quot;caseId&quot;:&quot;1&quot;, &quot;contentStorageId&quot;:&quot;1&quot;, &quot;isInternal&quot;:&quot;true&quot;, &quot;description&quot;:&quot;&quot;, &quot;name&quot;:&quot;myDocList&quot;, &quot;fileName&quot;:&quot;test1.txt&quot;, &quot;submittedBy&quot;:&quot;1&quot;, &quot;url&quot;:&quot;documentDownload?fileName=test1.txt&amp;amp;contentStorageId=1&quot;, &quot;version&quot;:&quot;1&quot;   }, {&quot;id&quot;:&quot;2&quot;, &quot;creationDate&quot;:&quot;2014-10-09 16:39:52.473&quot;, &quot;author&quot;:&quot;1&quot;, &quot;index&quot;:&quot;1&quot;, &quot;contentMimetype&quot;:&quot;text/plain&quot;, &quot;caseId&quot;:&quot;1&quot;, &quot;contentStorageId&quot;:&quot;2&quot;, &quot;isInternal&quot;:&quot;true&quot;, &quot;description&quot;:&quot;&quot;, &quot;name&quot;:&quot;myDocList&quot;, &quot;fileName&quot;:&quot;test2.txt&quot;, &quot;submittedBy&quot;:&quot;1&quot;, &quot;url&quot;:&quot;documentDownload?fileName=test2.txt&amp;amp;contentStorageId=2&quot;, &quot;version&quot;:&quot;1&quot;   }, {&quot;id&quot;:&quot;3&quot;, &quot;creationDate&quot;:&quot;2014-10-09 16:39:52.473&quot;, &quot;author&quot;:&quot;1&quot;, &quot;index&quot;:&quot;2&quot;, &quot;contentMimetype&quot;:&quot;text/plain&quot;, &quot;caseId&quot;:&quot;1&quot;, &quot;contentStorageId&quot;:&quot;3&quot;, &quot;isInternal&quot;:&quot;true&quot;, &quot;description&quot;:&quot;&quot;, &quot;name&quot;:&quot;myDocList&quot;, &quot;fileName&quot;:&quot;test3.txt&quot;, &quot;submittedBy&quot;:&quot;1&quot;, &quot;url&quot;:&quot;documentDownload?fileName=test3.txt&amp;amp;contentStorageId=3&quot;,&quot;version&quot;:&quot;1&quot;  }]Add a new documentTo add a new document to the list myDocList at the end of the list, do a POST call without specifying the index attribute in the request payload.Method  Path + Query  POST  /API/bpm/caseDocument  Request payload:{   &quot;caseId&quot; : &quot;1&quot;,   &quot;file&quot; : &quot;doc.jpg&quot;,   &quot;name&quot; : &quot;myDocList&quot;,   &quot;description&quot; : &quot;this is an element of the list&quot; }Response payload{  &quot;id&quot;:&quot;4&quot;,   &quot;creationDate&quot;:&quot;2014-10-09 16:45:36.658&quot;,   &quot;author&quot;:&quot;1&quot;,   &quot;index&quot;:&quot;3&quot;,   &quot;contentMimetype&quot;:&quot;application/octet-stream&quot;,   &quot;caseId&quot;:&quot;1&quot;,   &quot;contentStorageId&quot;:&quot;4&quot;,   &quot;isInternal&quot;:&quot;true&quot;,   &quot;description&quot;:&quot;this is a simple doc&quot;,   &quot;name&quot;:&quot;myDocList&quot;,   &quot;fileName&quot;:&quot;doc.jpg&quot;,   &quot;submittedBy&quot;:&quot;1&quot;,   &quot;url&quot;:&quot;documentDownload?fileName=doc.jpg&amp;amp;contentStorageId=4&quot;,   &quot;version&quot;:&quot;1&quot; }Note: that this new document has got index=3. If you now rerun the first GET request, you will now get a list containing four documents with the new document as last element of the list.Add a new document to the list at a given indexTo add a new document to the list myDocList at index 1, do a POST call specifying the index attribute in the request payload.Method  Path + Query  POST  /API/bpm/caseDocument  Request payload{   &quot;caseId&quot; : &quot;1&quot;,   &quot;file&quot; : &quot;doc.jpg&quot;,   &quot;name&quot; : &quot;myDocList&quot;,   &quot;description&quot; : &quot;this is an element of the list at index 1&quot;,   &quot;index&quot; : &quot;1&quot;}Response payload{  &quot;id&quot;:&quot;5&quot;,   &quot;creationDate&quot;:&quot;2014-10-09 16:45:36.658&quot;,   &quot;author&quot;:&quot;1&quot;,   &quot;index&quot;:&quot;1&quot;,   &quot;contentMimetype&quot;:&quot;application/octet-stream&quot;,   &quot;caseId&quot;:&quot;1&quot;,   &quot;contentStorageId&quot;:&quot;4&quot;,   &quot;isInternal&quot;:&quot;true&quot;,   &quot;description&quot;:&quot;this is a simple doc&quot;,   &quot;name&quot;:&quot;myDocList&quot;,   &quot;fileName&quot;:&quot;doc.jpg&quot;,   &quot;submittedBy&quot;:&quot;1&quot;,   &quot;url&quot;:&quot;documentDownload?fileName=doc.jpg&amp;amp;contentStorageId=4&quot;,   &quot;version&quot;:&quot;1&quot; }Note: that this new document has index=1.If you now rerun the request in Example 1, you will see that the indexes of the documents in myDocList have been recalculated with respect to the newly added document index.Knowing the document Id of a document list, it is possible to update it (PUT) and remove it(DELETE) as for a simple document.",
      "url": " /bonita/7.8/howtos/list-of-documents",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-8-howtos-manage-control-in-forms": {
      "title": "Control and validate forms in the UI Designer",
      "content"     : "How to control and validate forms in the UI DesignerUsing a leave request management process example, you will learn how to take advantage of forms in the UI Designer and how to add validation for the data to submit.PrologueBasic contract validation and constraintsAdvanced contract validation and constraintsMore visible information of invalid inputsError summary panel _(SP only)_Use a **select** widget for the leave typeCustom validationUse contract response for server side validationUse frontend validationPrologueYou will design a simple leave request management process using Bonita 7 and beyond:First things first, draw the wireframe of the process. In Bonita Studio, since the instantiation of a new leave request happens at pool level, add a simple validation task, rename the pool Leave request management, and rename the lane manager, as shown here:Then, define a business object that will hold the leave requests data when the process instances are ongoing, and store it when the instances are archived:In Bonita Studio menu, go to Development &amp;gt; Business Data Model &amp;gt; Manage option, and add a business object named LeaveRequest, with 4 attributes:  startDate: first working day taken as vacation  endDate: last working day taken as vacation  nbDays: number of working days taken as vacation  type: leave type (annual leave, anticipated leave,…)To allow this business object to be instantiated in each process instance, create a business variable in the process:At pool level, in the Data panel, define a business variable named leaveRequest. For business object, choose LeaveRequest.Then, to make sure the process gets the information it needs to start a new instance, create a contract:In the Execution pane &amp;gt; Contract tab, click the Add from data… button to generate the contract input from an existing business variable. Choose the Business variable option, and the leaveRequest variable. A complex contract input is created, mapped on the leaveRequest business variable.Each entry of the contract is bound to a business object property:  startDate as a DATE  endDate as a DATE  nbDays as an INTEGER  type as TEXT… as shown here:You can also add constraints on the contract inputs in the Constraints tab.For more information about process, business data management and contract, check out Designing Efficient BPM Applications: A Process-Based Guide for Beginners.To generate an instantiation form that complies with the contract (where the user will start a new request), go to the Instantiation Form tab, and click on the pen icon. This will take you to an open form in the UI Designer.By default, this form contains a form container with 4 widgets matching the contract:  a date picker widget for the start date  a date picker widget for the end date  an input widget expecting a number for the number of days  an input widget expecting text for the type… as shown here:You can check what it will look like once deployed by clicking on Preview, as shown here:Basic contract validation and constraintsYou can notice that:  Every field label is followed with a red star showing that those fields are required (by the contract).  The Submit button is disabled until all fields marked as required are filled.If one of the input constraints is invalid, an error message is displayed below the input field. In the example, the only input constraint is required, so an error message is displayed if you edit and reset a field, as shown here:Once all fields have values, the form can be submitted, the contract validated by the process, and the new process instance can be started.Advanced contract validation and constraintsMore visible information of invalid inputsNow, to alert the user that an input is not valid with a red border around invalid inputs, you must use the AngularJS form control properties.AngularJS $formInside a form container, AngularJS provides a special variable called $form.This variable holds the validation state of the inputs, selects and textareas of the current form container.Here is an extract from the AngularJS documentation site that explains the purpose of this feature.  From an AngularJS point of view, a form is a collection of controls for the purpose of grouping related controls together.  Form and controls provide validation services, so that the user can be notified of invalid input before submitting a form. This provides a better user experience than server-side validation alone because the user gets instant feedback on how to correct the error.A control in AngularJS exposes properties for a given input, select or textarea and associates it with a CSS class:  $dirty (CSS class ng-dirty): the control has been interacted with  $pristine (CSS class ng-pristine): the control hasn’t been interacted with yet  $valid (CSS class ng-valid): the model is valid  $invalid (CSS class ng-invalid): the model is invalidNote: In this example, we will only focus on these properties. More properties and information about form control is available on AngularJS form guide.AngularJS sets these different CSS classes on HTML input elements depending on their states.Using AngularJS form control CSS classesNote: A tutorial about creating modal windows using CSS in the UI Designer is available. We recommend to read it before you go further in this tutorial.So, to alert users about the invalidity of inputs they just edited, you need to use ng-invalid and ng-dirty classes on those elements:In your favorite editor, create a validationStyle.css file containing the class below:.ng-invalid.ng-dirty {   border-color: red;   outline: 0;   -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(233,175,102,.6);   box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(233,175,102,.6);}Using only the ng-invalid class makes red border appear even before the user enters a value for the input and that is annoying.Then, in the form Assets panel at the bottom, click Add and add the CSS file.In the same way, to show the user which inputs are valid, edit the CSS file to add:.ng-valid {   border-color: green;   outline: 0;   -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 4px rgba(102,233,102,.6);   box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 4px rgba(102,233,102,.6); }In the UI Designer preview, the form looks like it is shown here:Note: The properties of the form controls also apply to the $form variable.So in this case, the $form variable has the properties $invalid, $valid, $pristine and $dirty dependending on the value of each of its controls: if one of the controls has a property set to true then the $form matching property is set to true.Therefore, the HTML form element has the associated ng-pristine, ng-dirty, ng-valid and ng-invalid classes set whether the $form properties are true or false.Since the HTML form element has no border, the CSS classes added have no impact on it.Error summary panel (SP only)For debug purposes, you can add a panel at the top of the form to list all errors in the form:From the UI Designer home page, create a fragment. Set errorPanel as the fragment name. In the Variable panel at the bottom, create one variable, of type exposed: yes, called errors. Create two other variables, of type exposed: no:  errorRequired: it allows to tell if in the form, some required data are missing.  errorDate: it allows to tell if in the form, some dates are invalid.These two variables are instantiated with JavaScript expressions using $form.$error. Therefore, for Type, select JavaScript expression.For errorRequired , enter the following Value:return ($data.errors.required || []).filter(function(field){return field.$dirty;  }).map(function(field){return field.$name;  });And for errorDate, enter:return ($data.errors.date || []).map(function(field){return field.$name;  });The errorRequired is a bit different from errorDate because when the form is empty, the user doesn’t need to be reminded that some fields are empty. This is why it contains a filter to only display the errors on dirty fields (i.e. which have been edited).These two variables will contain the list of invalid widget names.Currently, these widget names are not usable directly because they are automatically generated. Therefore, from the palette on the left, drag and drop two text widgets in this fragment whiteboard, with the following text:  Some required data is missing.  Some dates are invalid.To put the text and the background in red, add the bootstrap’s text-danger and bg-danger CSS classes in the CSS classes property for both widgets. To hide these fields when no error are detected, go to the Hide property of each widget, click on f(x) to make them evaluated as expressions, and add respectively:  _!errorRequired     errorRequired.length === 0_  _!errorDate     errorDate.length === 0_… as shown here: ![Leave Request - errorPanel - date - properties Then, to change the default style of the p html tag and have a little more margin, open the validationStyle.css file and add the following:.text-danger p {  margin: 1em;}Go back to the home page, and then open the leave request form again.From the palette, change the title widget at the top of the form. In the text property, write Leave request.In the palette on the left, select Fragments, and then drag and drop the fragment just created below the form title, as shown here (from the preview):Use a select widget for the leave typeThe user usually selects one option of leave type and does not type free text. A predefined list of such values could be:  Annual leave  Anticipated annual leave  Unpaid  OtherTo implement such a list, remove the generated input widget for type and add a select widget with the following properties:  Label: Type  Required: yes  Placeholder: type  Available values: Annual leave, Anticipated annual leave, Unpaid, Other  Value: formOutput.typeContractCustom validationUse contract response for server side validationAt this stage, you have added some simple control over the different inputs. You will now learn about more advanced validation checks. For example, let’s express those three rules:  The start date must be earlier or the same than the end date  The number of days must be greater than zero  The leave type must be one of Annual leave, Anticipated annual leave, Unpaid, or Other.For the second requirement, you have already set a control on the inputFor the last requirement: you have already changed the widget type from input to select.Therefore, on those two fields, a user cannot submit wrong data.However, keep in mind that while client-side validation plays an important role in providing a good user experience, it can easily be circumvented and therefore can not be trusted. Server-side validation is still necessary for a secure application.For this reason, we need to add some constraints to the contract, process side, one for each rule.Go back to the Studio, and at pool level, go to the Execution pane &amp;gt; Contract &amp;gt; Constraints tabs to define the constraints as shown here:The server error response message on submit when one of the constraints fails has an explanations attribute.This attribute is an array of the error message of each constraint that has failed.On the UI Designer side, you need to catch the error response message on submit:Go to the form Variable panel, and create a new variable called instantiationErrorResponse.Then select the Submit button and in its Failed response value property, type instantiationErrorResponse.Now you need to display each error message in red in the form. To do so, you need to create an iteration on the explanations messages.From the palette, drag and drop a Container just below the form title. In its Collection property, type instantiationErrorResponse.explanations .Inside this container, add a text widget. In its CSS classes property, type text-danger and bg-danger and in its text property, type __.Now go back to the studio and run the process to test the form error messages on submit.Setting a start date older than an end date will produce the following screen (given that other fields are set correctly):Use frontend validationLet’s add two more constraints to the leave request form :  nbDays must be more than 0 and less than a value retrieved externally (number of days the user has left)  type with value Other displays a comment field limited to 100 characters (the Human Resources officer needs to know what type of leave this is)Number input value controlTo help the user to fill out the form and tell him/her the number of days is valid according to the amount of days left, create a new variable remainDays. It will provide the number of days left for the leave type Annual leave.In real life, it should be of type External API.For the sake of this turotial, just make it a JSON variable to test our form.The value is:{  &quot;Personal leave&quot;: 2,  &quot;Annual leave&quot;: 12}Then, on the Number of days input widget, set the Min value property to 0.5 and set the Max value property to remaingDays[formInput.leaveRequest.type].Doing this allows to validate the number of days value according to the leave type.Change the inputs order to give the form a more more natural flow (type before number of days).The form control of the number days input widget now exposes two new CSS classes for the validity of the input : ng-invalid-min and ng-invalid-max. In the same way, the $error will hold the attributes min and max when value is below minimum value or above maximum value respectively.On the form, if you set a wrong input in the number of days after setting the type to Personal Leave, it looks like this:Text input value controlNow assume that in the studio Business Data Model, a new comment attribute has been added to the business object LeaveRequest with a matching contract input comment.This comment must be filled when the leave type is Other.To display this comment, add a textarea widget to the right of the type widget.To only display the widget when the type Other is selected, change the Hidden property of this textarea to an expression (click f(x)) and set it to formInput.leaveRequest.type !== &#39;Other&#39; To make it required when it is displayed, change the Required property to an expression and set it to formInput.leaveRequest.type === &#39;Other&#39;In the Label property, type Comment  and in the Value property, type formInput.leaveRequest.comment, as shown here:.To compell the user to enter a text that will be the right size, add some form control on this widget by setting values to 5 to Value min length and 100 to Value max length.The form control of the comment textarea  widget now exposes two new CSS classes for the validity of the input: ng-invalid-minlength and ng-invalid-maxlength.In the same way, the $error will hold the attribute minlength and maxlength when the text length is below minimum length or above maximum length respectively.Run your process and test your form with an incorrect comment size; it will look like this:",
      "url": " /bonita/7.8/howtos/manage-control-in-forms",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-8-howtos-optimize-user-tasklist": {
      "title": "Create unique task names for the user task list",
      "content"     : "How to create unique task names for the user task listNote: This howto applies to the legacy task list -Bonita 6.0 to 6.5.x versions- as well as the new task list - from Bonita 7.3 and above.Goal: Leverage Bonita Studio to optimize user comfort and efficiency by inserting case information in task name and task description.During process modeling, a task is given a generic definition in the process definition, so its name is generic, such as “Validate request”. This is useful for development.Within a process instance (case), this task name must be contextualized with business information specific to the case so that, in the user task list, users effciently pick the right task to do.Pre-requisites: create the process examplePool Data modelVariables Process instantiation contract Instantiation form&quot;Validate request&quot; task Configure the display optionsDisplay nameDisplay description Description after completionView it in the task listSearch a task name based on word-based searchPre-requisites: create the process examplePoolFirst, create a new diagram. Then model the process in the first pool:  Rename the diagram into “Request management” by clicking in the blanck space around the pool  Rename the pool into “Leave request management”  Rename the lane into “Manager”  Rename the start event into “New leave request”  Since the submission of a new leave request happens at pool level (process instantiation), no need for a Submit request task ; just rename the default human task into “Validate request”  Add a terminate end event that you can rename “Happy end”The pool is shown here:Data modelThen, define a business object that will hold the leave requests data:  Go to the Development &amp;gt; Business Data Model &amp;gt; Manage menu option  Add a business object named LeaveRequest (with an upper case “L”), with 4 attributes:  startDate: as a DATE. Set it as mandatory  endDate: as a DATE, Set it as mandatory  requesterName: employee who submits the leave request, as a STRING  status: whether the request is “submitted” or “approved”, as a STRINGClick FinishVariablesTo allow this business object to be instantiated with each process instance, create a business variable at pool level:  In the Data pane of the pool, Pool variables tab, Business variables table, Add a business variable named leaveRequest (with a lower case “l”).  For Business object, choose LeaveRequest (the default value if you only have one object)  Click FinishProcess instantiation contractTo make sure the process gets the information it needs to start a new instance, create a contract:  In the Execution pane &amp;gt; Contract tab, click on Add from data… to generate the contract inputs from the business variable  Choose the Business variable option, and then the leaveRequest variable  Click Next  Unselect requesterName and status as the process doesn’t need this information from the form to instantiateThe default values of business data attributes mapped to contract inputs are automatically set thanks to a script generated along with the contract inputs themselves.  Click Finish, carefully read the warnings, and press OK and OK.  In the Execution pane &amp;gt; Contract tab, a complex contract input is created, mapped to the selected attributes of the leaveRequest business variable, as shown here:In actual BPM projects, we recommend you to also add a description to each contract input. It will be used as input field caption for end-users in the auto-generated form, if you decide to use such forms up to the User Acceptance Test phase of your project.When the leave request is submitted, status and requesterName must default values must be set. To do so, edit the script:  Go back to the Data pane, Pool variables tab, Business variables table  Click on leaveRequest and on the Edit… button  Close to the Default value field, click on the pencil icon  In the script, add: leaveRequestVar.status = &quot;submitted&quot;, anddef initiator = BonitaUsers.getProcessInstanceInitiator(apiAccessor,processInstanceId);leaveRequestVar.requesterName = &quot;$initiator.firstName $initiator.lastName&quot;so it becomes:def leaveRequestVar = new com.company.model.LeaveRequest()leaveRequestVar.startDate = leaveRequestInput.startDateleaveRequestVar.endDate = leaveRequestInput.endDateleaveRequestVar.status = &quot;submitted&quot;def initiator = BonitaUsers.getProcessInstanceInitiator(apiAccessor,processInstanceId);leaveRequestVar.requesterName = &quot;$initiator.firstName $initiator.lastName&quot;return leaveRequestVarClick OK, and OK.Instantiation formThe Studio generates a form based on the contract requirements, for test purposes only. This is the form used in this howto, to save some time.“Validate request” taskFor the sake of this howto, do not specify any contract of form on the task, but just create an operation to switch the request status from “submitted” to “validated” when the task is completed.  Click on task “Validate request”  Go to the Execution pane &amp;gt; Operations tab  Click on Add  In the left operand, select leaveRequest  As operator, select Use a Java method and then setStatus(String) - void  Click OK  In the right operand, write approvedThe operation is shown here:There you go. The process is ready. So how can you set a unique name for tasks, to be displayed in the user task list?Configure the display optionsFor each case (request), the task should display the requester’s name, the request start date, end date, and status. After the task is submitted, the status will change and the task can also display the validator’s name.As a good practice, we advise to display static information that defines the task in the Display name field, and dynamic information that appears, disappears or changes over the life of the case in the Display description and Description after completion fields. Therefore:  Start date, end date, and requester’s name will be managed in the task name  Status and validator’s name will be managed in the descriptionTo configure the display options:  Select the Validate request task  Go to General pane &amp;gt; Portal tab.Display nameThe task display name will be made of the requester’s first name, last name, and the leave start date and end date.  Next to the Display name field, click the pencil icon to display the expression editor.  Select the Script expression  Give it a name: buildValidateRequestDisplayName()  Type the script. return &quot;Validate leave: ${leaveRequest.requesterName}: ${leaveRequest.startDate.format(&#39;yyyy-M-d&#39;)} / ${leaveRequest.endDate.format(&#39;yyyy-M-d&#39;)}&quot;.toString()Click OK.Display descriptionAs a dynamic information, status is addressed here:  Next to the Display description field, click the pencil icon to display the expression editor.  Select the Script expression type  Give it a name: buildValidateRequestDisplayDescription()  Type the script. return &quot;${leaveRequest.status}&quot;.toString()Click OK.Description after completionThe status of the request when it’s validated as well as the validator’s name are displayed in the Done tasks filter of the user task list. To define it:  Next to the Description after completion field, click the pencil icon to display the expression editor.  Select the Script expression type  Give it a name: buildValidateRequestDescAfterCompletion()  Type the script. import com.bonitasoft.engine.api.APIAccessor; def executedBy = BonitaUsers.getUser(apiAccessor, apiAccessor.processAPI.getHumanTaskInstance(activityInstanceId).executedBy); return &quot;${leaveRequest.status} by ${executedBy.firstName} ${executedBy.lastName}&quot;.toString()Click OKWhen reusing these features for your own projects, make sure that the result of your scripts do not exceed 255 characters.View it in the task list  Save the diagram  Run the pool. The default loggued user is Walter Bates  Fill out the default instantiation form with two dates  Click on StartOnce you are sent to the task list, you can see that the task name is contextualized.It is computed once, when the task becomes ready.Note: The following set of instructions only applies to the task list in Bonita 7.3.0 and above. In earlier versions, the Description field is displayed by default.To display the Description column and view the submitted status:  Click on the settings wheel icon on the top right of the list  Select Description  Click outside the settings boxThe table settings have changed to display the Description column. It will be stored in the local storage of the browserYou can see the description field, showing the status: “submitted”, as shown here:  Logout  Login with helen.kelly / bpm credentials (as if Helen Kelly is Walter Bates’ manager)  Perform the task  Go to the Done tasks filterThe Description column now shows the description after completion, with an edited status as well as the name of who performed the task, as shown here :If you don’t use the description after completion field, the Description column will still show the “display description” information.Unlike the “technical” name and description of a task in the Studio, which are useful for development, information for each task as display name, display description and description after completion will be unique for each case in the task list, to make the task list more efficient for the users.Search a task name based on word-based searchAnother feature you can use to improve end users efficiency and satisfaction is word-based search:To allow users to efficiently search by task name, you can configure the search option: from starts by (the beginning of the whole task name string), you can switch to word-based search (the beginning of every word in the task name).To do so, go to word-based search.Note: Setting the word-based search may result in lesser performance, with some delay experienced by users on the display of search results. Turning this feature on requires some testing on your environment.",
      "url": " /bonita/7.8/howtos/optimize-user-tasklist",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-8-howtos-rta-mail-template": {
      "title": "Use the rich textarea widget in a mail template",
      "content"     : "How to use the rich textarea widget in a mail templateUsing a leave request management process example, you will learn how to use a mail template in a form.  Out of office message processCheck email content taskSend test email service taskSend message to mail serverRun the processOut of office message processUsually, when leaving for a vacation, you set your mail account up with an out of office message to notify your senders that you are not here until a specific date.You will design a process using Bonita:First, draw the wireframe of the process in Bonita Studio.The process consists of a :  a start event  a human task asking for the user to check the email content which will be send, the dates of its vacation and whether it wants to test the mail before submitting it to the mail server.  a service task sending the mail to the user  a service task which sends the out of office mail message to the mail server  an end eventThe process will look like this:  Conditions are set on the transition out of the Check Email content task allowing to know which path to use.We create a Business Data Model to hold the user informations :  startDate: leave date start as a DATE  endDate: leave date end as a DATE  title: the mail title as a STRING  body: the mail body as a STRING with a length of 2048  A business object variable will be created at pool level, named outOfOfficeMessage. It will to be initialized via a Groovy script with the mail template of the out of office message.The template will be filled with the initiator information and its manager contact:import org.bonitasoft.engine.identity.ContactData;import org.bonitasoft.engine.identity.User;def ooom = new com.company.model.OutOfOfficeMessage();User u = BonitaUsers.getProcessInstanceInitiator(apiAccessor,processInstanceId);User manager = BonitaUsers.getProcessInstanceInitiatorManager(apiAccessor,processInstanceId);ContactData managerData = BonitaUsers.getProcessInstanceInitiatorManagerProfessionalContactInfo(apiAccessor,processInstanceId);ContactData userData = BonitaUsers.getProcessInstanceInitiatorProfessionalContactInfo(apiAccessor,processInstanceId)ooom.setTitle(&quot;Out of office&quot;);ooom.setBody(&quot;&quot;&quot;&amp;lt;p&amp;gt;Hi,&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;I&#39;m currently out of office until the ... of .... YYYY with very limited email access.&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;For any questions feel free to contact &amp;lt;a href=&quot;mailto:${managerData.email}&quot;&amp;gt;${manager.firstName} ${manager.lastName}&amp;lt;/a&amp;gt;.&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;Best Regards&amp;lt;br&amp;gt;${u.firstName} ${u.lastName}&amp;lt;/p&amp;gt;&amp;lt;div dir=&quot;ltr&quot;&amp;gt;// ...// Mail signature// ...&amp;lt;/div&amp;gt;&quot;&quot;&quot;);ooom.setStartDate(new Date());ooom.setEndDate(new Date());return ooom;This process instantiation do not hold any form (no form in the Execution &amp;gt; Instantiation form tab) and a business object will be created with a groovy script setting the mail template.Check email content taskThe Check email content human task will consists of a contract matching the Business object outOfOfficeMessage for it to be mapped with the contract output. We also will need a local variable which will allows to know if the mail needs to be tested.This variable needs to be mapped with a contract data too.The contract will looks like this :  And the operation pane will look like this:  Out transistionThis task has two possible transition :  the transition to the Send test email is condition if the local variable test is true  the transition to the Send Message to Mail Server is condition if the default flowSend test email service taskThis task allow to send a test email to the process instance initiator for him to check if the mail renderring is correct.Therefore, we will use the EMAIL (SMTP) Connector on the task out step.The connector properties will be :  The to and from properties of the connector will use groovy script to retrieve the appropriate address:BonitaUsers.getProcessInstanceInitiatorProfessionalContactInfo(apiAccessor,processInstanceId).email;The Subject will use a groovy script too to retrieve the business variable property:outOfOfficeMessage.titleThe Message will use a groovy script too to retrieve the business variable property:outOfOfficeMessage.bodyOnce this task is completed, a new Check email content human task is available.o  Send message to mail serverHere, the out of office mail message has been validated and the way the mail server handle the out of office mail configuration for a given user depends on the mail server provider and will not be detailed here.It will use a connector that will send the appropriate information via an external API.Form for ‘Check Email content’ taskOn ‘Check Email content’ task, in the Execution &amp;gt; Form pane, use the pencil  icon to generate a default form from the contract.It will look like this:  For a better usability, we can  :  rename Start Date to Start  rename End Date to End  have both date widget on the same line  change the checkbox Test to a select box :  add a select widget below the checkbox  create a nextStepChoice JSON variable defining the different choices :[{&quot;name&quot;: &quot;Receive a test email in my mailbox&quot;, &quot;value&quot;: true},{&quot;name&quot;: &quot;Send mail message to mail server&quot;, &quot;value&quot;: false}]set the following properties to the select widget:  Label hidden to true  Available values to nextStepChoices  Displayed key to name  Returned key to value  Value to formInput.testIt will look like this:  We need to retrieve the business object outOfOfficeMessage which contains the mail contents.We use an External API variable named outOfOfficeMessage which uses the context variable business object reference link: ../We bind the attributes of outOfOfficeMessage to fill the formInput variable that is already bound to inputs.Change the formInput type to Javascript Expression and set the value to:return {  &quot;outOfOfficeMessageInput&quot; : {&quot;title&quot; : $data.outOfOfficeMessage.title,&quot;body&quot; : $data.outOfOfficeMessage.body,&quot;startDate&quot; : $data.outOfOfficeMessage.startDate,&quot;endDate&quot; : $data.outOfOfficeMessage.endDate  },  &quot;test&quot; : false};The variable pane will look like this:  We will take advantage of the Rich text area widget to have a nice way to visualize the mail body.Add a Rich text area widget below the title input widget:  set the value to formInput.outOfOfficeMessageInput.body (the same as the body input widget)  set the Label property to Body  set the Required property to yes  set the Style toolbar property to p, ul, ol  set the Miscellaneous toolbar property to html, insertImage, insertLink, undo, redo, clearClick on preview. And the form will look like:  Run the processEverything is now ready and the process can be started.In the Studio, click on Run.An instance of the process is started and a task is available.Take it and you will see the following form:  ",
      "url": " /bonita/7.8/howtos/rta-mail-template",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-8-howtos-share-a-repository-on-github": {
      "title": "Share a repository on GitHub",
      "content"     : "How to share a repository on GithubNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.This page explains how to push an existing Bonita repository on GitHub to share it with teammates. For more information on Git integration in Bonita Studio, you can read the reference documentation page.Create an empty GitHub repositoryShare with GitCommitting with the Staging viewAdd, Commit and Push shortcutCreate an empty GitHub repositoryTo create new GitHub repository you will need a GitHub account.Then you will be able to create a repository.Note: Leave the new repository empty. No .gitignore, no readme. Do not commit in the new repository.Share with Git  Open a Bonita Studio, and if needed, switch to the repository you want to share.  Go to Repository &amp;gt; Team &amp;gt; Git &amp;gt; Share with Git  The repository default of Bonita Studio cannot be shared, as it is used as a backup repository when needed. If the content to share belongs to the default repository, you need to create a new repository for duplication purposes: enter the name of the new repository.  Click on “Share”.  In the case of repository content duplication, the content is duplicated and the studio switches to the new repository.   In all cases, the local Git repository is initialized, and a .gitignore file is created.  Enter a commit message for the initial commit. If it is the first time you use Git, a dialog will prompt to ask for an identity (mail and name). This identity will be stored in the Git configuration and can be updated in preferences afterward. All your commits will be authored with this identity. Note that this is your Git identity, different from your GitHub credentials.  Click on “Commit and Push”.  To push the repository on the GitHub remote:a.  On GitHub, navigate to the main page of the repository. Under the repository name, click on “Clone or download”. In the Clone with HTTPs section, click on the icon to copy the clone URL for the repository.b. In the studio, paste the URL in the URI text inputc. Do not select anything in the “Protocol” drop down list, nor write anything on the “Port” input fieldc. If needed, enter your GitHub username and password in the Authentication formd. Click on “Next”e. By convention, the default Git branch is named master, but you can change this here.f. You can also change the pulling strategy (default is merge)g. Click on “Next”h. Click on “Finish” (Push will be done in a background job, visible at the bottom right corner of the studio window)i. When the Push is done, a push confirmation dialog is displayed  To validate that the push has actually been done, you can check your repository on GitHubYou may also use the ssh authentication mechanism if you do not want to use https. You still do not need to select the protocol nor the port in this case. See GitHub documentation to configure ssh.Committing with the Staging view  Create a new diagram and save it.  A new Git Staging view is now accessible. From this view you can manage the status of your repository:  You can see the unstaged changes: the files in this section have changed but not been updated yet, which means that they are unstaged. That is, if we commit right now, nothing will happen. You have to stage a file before you can commit it.  Below are the staged changes: you can add files from the unstaged changes in the staged changes by clicking on the add button (+). Only staged changes will be part of the next commit. You can remove a staged change by clicking on the remove button (-).Add the new process to the staged changes  Type a commit message in the right panel of the Git Staging view  Click on Commit  Go to Repository &amp;gt; Team &amp;gt; Git &amp;gt; Show History  You can now view your commit in the repository history. You should have two commits at this stage.  Before pushing your commit, pull the remote changes  Go to Repository &amp;gt; Team &amp;gt; Git &amp;gt; Pull. This will fetch the remote and try to merge or rebase new commits into your local branch. A pull can put the repository in a conflicting state if the merge cannot be figured out by Git. Conlicting files can be merged using the Git Staging view: you need to double-click on the conflicting files indicated with a red icon to display the Diff Viewer.  In the Git Staging view you can see that your local master branch is ahead by 1 commit ([master ↑1])  Now that you are in synch with the remote, you can safely push your commit. To do so, go to Repository &amp;gt; Team &amp;gt; Git &amp;gt; Push. Click on Preview &amp;gt; and on PushAdd, Commit and Push shortcut  Make a change on the diagram and save it  Go to Repository &amp;gt; Team &amp;gt; Git &amp;gt; Commit…  Enter a commit message and click on Commit and Push",
      "url": " /bonita/7.8/howtos/share-a-repository-on-github",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-8-howtos-uid-case-overview-tutorial": {
      "title": "Create a case overview page using the UI Designer",
      "content"     : "How to create a case overview using the UI DesignerIf you need to modify our default case overview or build your own case overview page, you will have to manage the display ofboth Cases and Archived cases.Throughout this tutorial you will see how to build a simple page to manage the Case/Archived-case complexity.Let’s get started by creating a new page in the UI Designer.Since Bonita 7.7.0 you can export the default case overview from the portal and import it directly in the UI Designer for edition. The explanantions below may give you a good understanding on how it is built.Manage a &#39;caseId&#39; url parameterIs there an existing open case for our `caseId`Is there an existing archived case for our `caseId`Maybe the case does not existDisplay case detailsManage a ‘caseId’ url parameterCreate a new page in the UI Designer.This page will be used to display the case details related to a specific caseId.We will get this caseId using the page URL.So just add a new variable with:- Name = caseId- Type = URL parameter- URL parameter name = idIs there an existing open case for our caseIdTo know if there is an open case for our caseId,we need to get the case using a Get request on the API bpm/case.So we will create a new variable:- Name = openCase- Type = External API- API URL = ../API/bpm/case/?d=started_by&amp;amp;d=processDefinitionIdIf the case is open,the javascript variable openCase will contain a json object representation of our case.Else the object openCase will be undefined due to 404 error.Is there an existing archived case for our caseIdTo know if there is an archived case for our caseId,we need to get the case using a Get request on the API bpm/archivedCase filtered on sourceObjectId=.So we will create a new variable:- Name = archivedCase- Type = External API- API URL = ../API/bpm/archivedCase?c=1&amp;amp;d=started_by&amp;amp;d=processDefinitionId&amp;amp;f=sourceObjectId%3D&amp;amp;p=0If the case is Archived,the javascript variable archivedCase will contain a json list of one object, that is the json representationof our archived case.Else it will be an empty list.Maybe the case does not existSo using those two variables openCase and archivedCase, it will be easy to know the state of the case.But keep in mind that both openCase and archivedCase could be undefined, that mean the case does not exist.Then we will just need to display a message to say “The case  does not exist.”.Display case detailsSince we are able to define the state of the case, it is easy to display case details using the UI Designer.  Maybe we need to display different information for open cases or for Archived cases.Then we can create tow different containers that will be conditionally shown.Open case details will be shown if openCase is defined:Bind the property &#39;hidden&#39; of the container  withvalue= !openCaseArchived case details will be shown if archivedCase is not empty:Bind the property &#39;hidden&#39; of the container  withvalue= ((!archivedCase) || (archivedCase.length==0))",
      "url": " /bonita/7.8/howtos/uid-case-overview-tutorial",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-8-howtos-uid-modal-tutorial": {
      "title": "Create a modal window using CSS",
      "content"     : "How to create a modal window using CSSA nice aspect of the UI designer is the way it takes advantage of the WEB technologies letting you put the style of your page where it belong.In a CSS file.Throughout this tutorial you will see how to build a modal window using only CSS.Let’s get started by creating some content.You will need a container which will end up being our modal and some other content on top of which that modal will be displayed.  Display a container on top of all other elementsAdd an overlay to make underneath elements inaccessibleTake control over the modal The creationOk now close that modalDisplay a container on top of all other elementsCreate a CSS file with the following content. .Modal-content { position: absolute; width: 80%; left: 0; right: 0; margin: 5% auto; background-color: #fff; border-radius: 2px; box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12); padding: 2em; }Note that the name of the class used follows BEM methodology.BEM or any other structural naming convention enforces good practices such as responsibility segregation, reusability, name collision avoidance and more.To use that file in the UI Designer you need to upload it as a page asset. To do so, open your page. Go to the Assets section at the bottom of the screen and click on Add a new asset.Select CSS type, Local source then upload your CSS file.It will be added to the page and all classes will be available and accessible from the property CSS classes of any element.Now lets add Modal-content to the container property CSS classes.Check out the result by hitting the Preview button.  While working on your CSS file, one could serve its local CSS file using a local server.Then instead of uploading the file add an external CSS asset which point at your file. That would greatly speed up development.For production, that file would still need to be uploaded as a CSS asset.Add an overlay to make underneath elements inaccessibleAdd a new container and move the Modal-content container into the overlay container in order to to have it on top.Add the following code to CSS file..Modal-overlay {position: fixed;width: 100%;height: 100%;top: 0;left: 0;background-color: rgba(0, 0, 0, .4);z-index: 1;}You now need to add the Modal-overlay class to our overlay container.  Take control over the modalThere is many other approach to deal with how and when to display a that modal with the UI designer.Here is one which could scale nicely with multiple modals.The creationNow that you got a modal you need to take control over when to display it.You will start by creating a JSON variable with an array called modals.So go to the Variables section at the bottom of the screen and click on Create a new variable.Give it the name modals and JSON type. It will take for value an empty array [].  Now bind the modals variable to the Collection property of the Modal-overlay container.That would have for effect to mask the modal whenever the array is empty.Also anything which add an object to the array modals will display a new modal.For the purpose of this tutorial you will do that with a button.Lets add a button and configure the Action property with Add to collection then bind the modals variable to the Collection property.  You can test the result using the preview.Ok now close that modalA direct follow up to the modal creation is to close it. The previous method allowed us to use another action from the button widget. First add a button in the modal and configure the Action property with Remove from collection.Then bind the modals variable to the Collection property.You need to define which object will be removed and you can do that by selecting Item for the Remove property and adding the $item variable to Item to remove.Here $item is available because it is in a repeated container context.  Here is the result of that tutorial  ",
      "url": " /bonita/7.8/howtos/uid-modal-tutorial",
      "author": "",
      "categories": "Howtos"
    }
    ,
  

    "bonita-7-8-index": {
      "title": "index",
      "content"     : "Bonita DocumentationWelcome to the Bonita documentation website.Note: The 7.8 is currently work in progress (wip). The 7.8.0 GA is planned on December 2018.",
      "url": " /bonita/7.8/index",
      "author": "",
      "categories": ""
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-bonita-in-a-cluster-cluster-administration": {
      "title": "Cluster administration",
      "content"     : "Cluster administrationNote: For Enterprise and Performance editions only.This page explains how to manage a Bonita cluster.Backing up a clusterTroubleshootingMonitoring a processDeploying a process in a Bonita clusterManaging your organization in a clusterBacking up a clusterBack up your cluster in the same as you would back up a standalone Bonita system, by backing up the database. You also need to back up the load balancer (see your load balancer documentation for details of how to do this).TroubleshootingEach Bonita Engine maintains its own log file on the node at tomcat_home/logs/bonita.date.log, where date is the date the file is created.In addition, there is an incident file tomcat_home/logs/tenants/[TENANT_ID]/incident.log (where [TENANT_ID] is the ID of the tenant on which the erroroccurred) that is used as a last resort to record an error that cannot be handled, such as failure to access the database.Monitoring a processTo monitor a process in a cluster, use the Bonita Portal as usual. The information presented applies to process activity on all nodes in the cluster.Deploying a process in a Bonita clusterTo deploy a process in a cluster, configure the process in Bonita Studio, and then create a .bar file using the Build option of the Server menu. Import the process bar file into Bonita Portal on one of the nodes. The process is now available to Bonita Portal on every node in the cluster. The process must be started on one node. Subsequently, instances can be created on all nodes.This means that all nodes have the possibility of running instances of tasks of all processes.You can also deploy a process using the API, exactly as you would in a standalone system.Managing your organization in a clusterThe organization data used by Bonita is stored in the database, so only has to be configured once. It can be maintained from any Bonita Portal in the cluster.",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/bonita-in-a-cluster/cluster-administration",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Bonita in a cluster"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-bonita-in-a-cluster-install-a-bonita-bpm-cluster": {
      "title": "Install a Bonita cluster",
      "content"     : "Install a Bonita clusterNote: The cluster feature is a Subscription feature for Enterprise and Performance edition only.It is possible to manage the lifecycle of a node using the API to connect directly to the node, but this bypasses the load balancer so should be done with care and only in exceptional circumstances.You will learn here how to create a cluster in two ways:  Create a cluster from scratch  Convert a single node installation into a clusterNote when using the AWS supportIAM role configurationCreate a cluster from scratch Create and initialize the database for Bonita Platform Install a first nodeAdd a node to the clusterConvert a single node installation into a clusterUpdate the configuration in databaseConfigure nodes to run on this clusterCluster managementStop a nodeRemove a node from a clusterDismantle a clusterManaging the cluster with HazelcastFAQNote when using the AWS supportPlease read the following to ensure that Bonita Cluster works correctly on AWS.IAM role configurationIf you want to use IAM role for EC2 autodiscovery, you need to attach a role to your EC2 instances with a policy allowing “ec2:DescribeInstances” action. For details about IAM Roles for Amazon EC2 see AWS documentationCreate a cluster from scratchIn this part we will create a cluster from scratch. We will initialize the database on which the cluster will run, then we will configure nodes to run on this cluster. Create and initialize the database for Bonita PlatformIn this step you will create and initialize the database for the Bonita Platform cluster using the platform setup tool.When done you will have a database with all tables created and with a table CONFIGURATION containing all configuration required for the cluster to start.  Ensure that you meet the requirements.  Create the database.  In case you use Business data, create a database for the Business Data.  Download a Bonita Tomcat bundle or a Bonita WildFly bundle, and unzip it at some place of your choice.  Edit file setup/database.properties and modify the properties to suit your databases (Bonita internal database &amp;amp; Business Data database). Beware of backslash characters.In the following steps, you will update the configuration files that are in the setup/platform_conf/initial folder of the platform setup tool.  Edit the file setup/platform_conf/initial/platform_engine/bonita-platform-sp-custom.properties: Uncomment and set the bonita.cluster property to true, as follows: bonita.cluster=true  Edit the file setup/platform_conf/initial/platform_engine/bonita-platform-sp-custom.properties: In order to keep consistency between nodes, the Hibernate cache must be disabled:Uncomment and change the line:   #bonita.platform.persistence.use_second_level_cache=true change it to:   bonita.platform.persistence.use_second_level_cache=false  Edit the file setup/platform_conf/initial/platform_engine/bonita-platform-sp-cluster-custom.properties: uncomment and set the bonita.cluster.name property to a name of your own, e.g. myBPMCluster, This name must be unique on the local network if you are using multicast  Edit the file setup/platform_conf/initial/platform_engine/bonita-platform-sp-cluster-custom.properties: set to true one of bonita.platform.cluster.hazelcast.multicast.enabled or bonita.platform.cluster.hazelcast.tcpip.enabled or bonita.platform.cluster.hazelcast.aws.enabled, as follows:Uncomment the # properties and set only one of them to true, set the others to false depending on how you want your nodes to discover each others.Example: bonita.platform.cluster.hazelcast.multicast.enabled=false bonita.platform.cluster.hazelcast.tcpip.enabled=true bonita.platform.cluster.hazelcast.tcpip.members=ipServer01,ipServer02Important: If you don’t use bonita.platform.cluster.hazelcast.multicast.enabled, you must uncomment the # properties and set it to false to deactivate it, as follows: bonita.platform.cluster.hazelcast.multicast.enabled=false.For more information on this take a look at the Hazelcast Documentation.Copy licenses of all your nodes in setup/platform_conf/licenses.  Run setup.sh init or setup.bat init as described in the platform setup tool page.At the end of the script, you should see the following line: “Initial configuration files successfully pushed to database”.This creates the database tables needed by Bonita platform, stores the configuration into this database, and stores the licence files for all your cluster nodes into the database.If later you need to change the configuration of the node discovery or add new licenses to the Bonita Platform configuration, you can update the configuration by following this guide. Install a first node  Once you have done all the steps from section Create and initialize the database for Bonita Platform above,  run setup.sh configure or setup.bat configure as described in the Bundle configuration to have your Tomcat / WildFly bundle configured to point to the right database.  Once the bundle is configured, and to avoid unsynchronized versions of the configuration files between several nodes, you are advised to deletethe folder [TOMCAT_DIRECTORY]/setup and its entire content.Note:  if you want to keep it for future configuration changes, just move the folder [TOMCAT_DIRECTORY]/setup and its entire content outside the [TOMCAT_DIRECTORY]to use it as your main  platform setup tool.  If your Bonita installation is behind a proxy or is installed inside a Docker container (mainly in TcpIp or Awsdiscovery modes), you must declare its public address by adding the following property:-Dhazelcast.local.publicAddress=*publicaddress*, this property should be added in the [TOMCAT_DIRECTORY]/setup/tomcat-templates/setenv.sh or [TOMCAT_DIRECTORY]/setup/tomcat-templates/setenv.batWhen the installation is complete, start Tomcat on the node. This starts Bonita Platform:./start-bonita.shThen start the cluster in the load balancer.Check that the log file contains messages of the following form: March 22, 2016 5:07:07 PM INFO: com.hazelcast.cluster.ClusterService [10.0.5.3]:5701 [myBPMCluster] Members [1] { Member [10.0.5.3]:5701 this } [...] March 22, 2016 5:09:18 PM INFO: org.apache.catalina.startup.Catalina start Server startup in 30333 msThen deploy a basic process and check that it runs correctly, to validate the installation.Add a node to the clusterYou can add a new node to a cluster without interrupting service on the existing nodes.  Copy the entire Tomcat / WildFly directory to another machine.  If Hazelcast Node discovery is configured with TCP, update the configuration in database using the platform setup tool, as follows:  Run the setup.sh pull or setup.bat pull. This will retrieve the configuration of your platform under platform_conf/current folder.  Edit the file platform_conf/current/platform_engine/bonita-platform-sp-cluster-custom.properties and add the node to the list of members as follows for example: bonita.platform.cluster.hazelcast.tcpip.members=ipServer01,ipServer02,ipServer03Start the Tomcat on the new node, running ./start-bonita.sh script  Update the load balancer configuration to include the new node.The log file will contain messages of the following form: March 22, 2016 5:12:53 PM INFO: com.hazelcast.cluster.ClusterService [10.0.5.17]:5701 [myBPMCluster] Members [2] { Member [10.0.5.3]:5701 Member [10.0.5.17]:5701 this } [...] March 22, 2016 5:12:28 PM INFO: org.apache.coyote.http11.Http11Protocol start Starting Coyote HTTP/1.1 on http-7280 March 22, 2016 5:12:28 PM INFO: org.apache.catalina.startup.Catalina start Server startup in 30333 ms  In the log, you can see how many nodes are in the cluster, and their IP addresses and port number. This node that has been started is indicated by this.The new node is now available to perform work as directed by the load balancer.Convert a single node installation into a clusterIn this case you already have a Bonita Platform running as single node installation, you will change the configuration to make it able to have multiple nodes.Update the configuration in databaseSome properties of the Bonita Platform needs to be changed in order to make your installation work as a cluster node.  Use your platform setup tool previously used to setup and configure your node. If you don’t have a platform setup tool (which is unlikely), you can download the Bonita Deploy bundle and unzip it at some place of your choice.The platform setup tool is also present in the Tomcat or WildFly bundle under the `setup` directory.  If the platform setup tool is not configured already, configure it as described in the platform setup tool page. If it is, move on to next step.  Run the setup.sh pull or setup.bat pull. This will retrieve the configuration of your platform under platform_conf/current folder.In the following steps, you will update the configuration files that are in the platform_conf/current folder of the platform setup tool.Edit the file platform_conf/current/platform_engine/bonita-platform-sp-custom.properties: Uncomment and set the bonita.cluster property to true, as follows: bonita.cluster=true  Edit the file platform_conf/current/platform_engine/bonita-platform-sp-custom.properties:In order to keep consistency between nodes, the Hibernate cache must be disabled as follows: Uncomment and change the line:   #bonita.platform.persistence.use_second_level_cache=true change it to:   bonita.platform.persistence.use_second_level_cache=falseEdit the file platform_conf/current/platform_engine/bonita-platform-sp-cluster-custom.properties: uncomment and set the bonita.cluster.name property to a name of your own, e.g. myBPMCluster, This name must be unique on the local network if you are using multicast  Edit the file platform_conf/current/platform_engine/bonita-platform-sp-cluster-custom.properties:  set one of bonita.platform.cluster.hazelcast.multicast.enabled or bonita.platform.cluster.hazelcast.tcpip.enabled or bonita.platform.cluster.hazelcast.aws.enabled to true as follows: Uncomment the # properties and set only one of them to true, set the others to false depending on how you want your nodes to discover each others.Example:bonita.platform.cluster.hazelcast.multicast.enabled=falsebonita.platform.cluster.hazelcast.tcpip.enabled=truebonita.platform.cluster.hazelcast.tcpip.members=ipServer01,ipServer02,ipServer03Important: If you don’t use bonita.platform.cluster.hazelcast.multicast.enabled, you must uncomment the # properties and set it to false as follows: bonita.platform.cluster.hazelcast.multicast.enabled=false.For more information on this take a look at the Hazelcast Documentation.  Copy licenses of all your nodes in platform_conf/licenses  Run the setup.sh push or setup.bat push. This will update in database the configuration of your platform.Configure nodes to run on this clusterThe configuration of the node you were using is still valid. You should be able to run it without any issue.If your Bonita installation is behind a proxy or is installed inside a Docker container, please refer to theInstall a first node part.Cluster managementStop a nodeSimply run ./stop-bonita.sh script.Remove a node from a clusterThis section explains how to perform a planned shutdown and remove a node from the cluster.  Update the load balancer configuration so that no further work is directed to the node. All work that is already in progress on the node that will be shutdownwill continue until completion. Do not remove the node completely, because the load balancer needs to be informed when current work is finished.  Allow current activity instances to complete.  Stop the Tomcat server: run ./stop-bonita.sh  Update the load balancer to remove the node from the cluster.The node is now removed from the cluster.Dismantle a clusterTo dismantle a cluster:  Disable processes.  Allow current activity instances to complete.  When each node has finished executing, stop it.  When all nodes have been stopped, update the load balancer to remove the cluster.The individual nodes can now be used as standalone Bonita server, provided the following change in the configuration is done:Update file bonita-platform-sp-custom.properties located in the platform_engine folder of the configuration, use the platform setup tool to update it and set back the bonita.cluster property to false.See How to update a Bonita Tomcat Bundle configuration for more details on updating the configuration.Managing the cluster with HazelcastA Bonita cluster uses Hazelcast as the distributed cluster dispatcher layer. Therefore you can use the Hazelcast tools to manage the cluster topology.See the Hazelcast documentation for details.Note that a Bonita cluster uses multicast for discovery by default. You can disable this in Hazelcast.If you are using multicast, you must ensure that your production environment is insulated from any test environment that might also contain cluster nodes.This is to ensure the nodes do not discover each other on the network, if they are not supposed to run inside the same cluster.It is possible to have more than one cluster on the same network. In this case, you must configure the cluster names to be sure that it is clear which node belongs to which cluster.You can configure the cluster name through Hazelcast or by updating bonita-platform-sp-custom.properties located in the platform_engine folder of the configuration, use the platform setup tool to update it.FAQQ: I regularly get this warning message when 2 or more nodes are started in cluster:2016-06-13 11:41:22.783 +0200 WARNING: org.bonitasoft.engine.scheduler.impl.BonitaJobStoreCMT This scheduler instance (...) is still active but was recovered by another instance in the cluster.  This may cause inconsistent behavior.Symptom:The clocks of the servers are not synchronized.Resolution:The system time of all cluster nodes must be maintained in synchronization with time servers.It is a good idea to have also the db server system time synchronized too.Synchronize the system time of all nodes and restart application servers.",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/bonita-in-a-cluster/install-a-bonita-bpm-cluster",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Bonita in a cluster"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-bonita-in-a-cluster-overview-of-bonita-bpm-in-a-cluster": {
      "title": "Overview of Bonita in a cluster",
      "content"     : "Overview of Bonita in a clusterNote: For Enterprise and Performance editions only.You can use Bonita in a cluster configuration to provide increased availability: more than one node runs Bonita Engine, so if a node becomes unavailable, the remaining nodes in the cluster can take over, minimizing the interruption to the service and therefore to your business. A Bonita cluster alone does not guarantee high availability. You must also ensure that the prerequisite infrastructure is highly available.See also:Install a Bonita clusterCluster administrationIntroductionDifferences for Bonita Portal usersDifferences for process designersTechnical descriptionPrerequisite infrastructure:Cluster structure diagramDefinitions:LimitationsActive and passive nodesAdvantages and drawbacksComparison with 5.xIntroductionThe advantage of using a cluster configuration is better availability. The cost is a slightly more complicated configuration to set up and maintain. A process that already runs on Bonita will run without modification on Bonita in a cluster.Bonita cluster characteristics:  High availability: Provided you have at least two active nodes and the prerequisite infrastructure is highly available, your Bonita cluster is highly available.Differences for Bonita Portal usersThe HTTP load balancer hides the fact that you are not always using the same Bonita Portal. The exception to this is if a node fails while you are completing a form; in this case, the data you have entered might not be stored, and you will have to start filling in the form again when a new Bonita Portal takes over.Differences for process designersNo changes are needed to make a process run in a Bonita cluster. A process that runs in a non-cluster system will run unchanged in a cluster. However, depending on your process, some optimizations might be possible. For example, to minimize the impact on users of a failover while they are filling in forms, do not make forms too long. This is recommended good practise for all process forms, but is even more important when a process is running in a cluster.The Bonita Studio development environment runs on a single node; there is no advantage to installing it on a cluster.Technical descriptionThis section describes the structure of Bonita deployed in a cluster. A cluster is a collection of nodes each running Bonita Engine, Bonita Portal, and an application server.A Bonita cluster is a collection of at least two nodes that run Bonita Engine, Bonita Portal, and an application server. An HTTP load balancer directs the connection to one of the available Bonita nodes, balancing the workload of the nodes. If a node becomes unavailable, the load balancer redirects the connection to another node.The Bonita Engines exchange information to enable the redirection. This means that all automatic actions handled by the Engine (including automatic tasks, events, timers, and automatic state transitions of tasks) are automatically taken over by another node.Each Bonita Portal works with a local Bonita Engine, so when a user logs in, they are logged in to a specific node. If that node becomes unavailable, the user session is lost. This means that any transaction that is not yet committed is lost, including any data entered in a form but not submitted. The user will need to log back in to the Portal.Assumptions: We assume that Ubuntu Linux is used as the operating system for Bonita nodes in a production system. The application server used is Tomcat.Prerequisite infrastructure:  A highly available load balancer  A highly available network, with all nodes able to see all other nodes  A highly available database accessible from all nodes  All nodes including the database one should be configured with the same clock (via NTP time synchronization for example) and same timezone (UTC is recommended)Cluster structure diagramDefinitions:  Load balancer: an HTTP load balancer manages the allocation of work to nodes in the cluster. No load balancer is provided with Bonita, so you can choose the most appropriate for your system. For a production system with a high load, a hardware load balancer is recommended.  Node: a JVM running a Tomcat application server, Bonita Engine, and Bonita Portal. For high availability, separate physical nodes are required.  Engine database: a single database used by all the Bonita Engines in the cluster. It is the equivalent of the local database in a non-cluster configuration. The database needs to be highly available and to handle multiple simultaneous accesses.  Failover: if a node in the cluster fails, the work it was performing is redirected by the load balancer to another node in the cluster. This is known as failover, and can be automated or manual.  Client: a process application client. A client application connects to the cluster through the load balancer, and uses the Bonita Engine API. Even if your process users do not use Bonita Portal, it is still present in the cluster, so can be used for administration.LimitationsThe nodes must all be in the same datacenter, to keep latency of updates to shared information to an acceptable level.All nodes must run the same software configuration (same versions on Bonita and application server).The Hibernate cache must be disabled.The load balancer must be configured to use sticky sessions (this is needed to manage sessions created when users log in to the Portal).There is no automated migration from a Bonita Open Solution 5.10 cluster to a Bonita cluster, because the cluster models are completely different. You can migrate a process from 5.10, but you need to build your Bonita cluster from scratch.Active and passive nodesIf an active node fails or is stopped, the load balancer redirects work to the remaining active nodes. This keeps the downtime to a minimum, but increases the load on the active nodes.A passive node is installed with exactly the same software and has the same configuration as an active node, but the application server and Bonita Engine are not started.A passive node is a “cold standby”. It does not consume computing resources. To add a cold-standby node to the cluster, the necessary licenses must be installed, the configuration must be completed, the application server must be started,and it must it must be activated in the load balancer.A cluster needs a minimum of two active nodes for high availability. The maximum number of nodes you can have depends on the load balancer you are using.Advantages and drawbacksA Bonita cluster has the following advantages over a single-node system:  A cluster provides high availability, as long as your entire infrastructure, including the network and database are highly available. If a node is shut down, stops, or crashes, anything that was running on that node is automatically retrieved by another running node in the cluster.  A new node is discovered and added to the cluster easily because of the Hazelcast in-memory data grid.  The network connection of a node is flexible: it can be configured with or without multicast.  A cluster is easy to configure.  BPM event matching and timer execution are distributed across the cluster by Quartz.There are some drawbacks to the basic Bonita in a cluster configuration, but these can be addresses using other component in your infrastructure:  Only active-active modes is supported. There is no mechanism for starting a new node if a cluster node goes out of service. This could be provided by a third-party application.  There is no integrated load balancer, so the client application selects the node on which to make a API call. You should use an external load balancer. For high volume, a hardware load balancer is recommended.  All the nodes must use the same database, so the database itself must be highly available.Comparison with 5.xIn Bonita Open Solution 5.10, the cluster implementation had the following advantages:  Support for high availability  The possibility to add a new node at runtimeIt also had the following drawbacks:  There is no node discovery mechanism, and the cluster construction relies on the database. This means that performance is lower than an in-memory data grid.  Only one node is responsible for execution of matching events, which can be a performance bottleneck.  Only active-active modes is supported. There is no mechanism for starting a new node if a cluster node goes out of service. This could be provided by a third-party application.  There is no integrated load balancer, so the client application selects the node on which to make a API call. You should use an external load balancer. For high volume, a hardware load balancer is recommended.  All the nodes must use the same database, so the database itself must be highly available.  The Bonita Large Data Repository (Bonita LDR) folder must be shared by NFS, so to maintain high availability, you should use an HA NFS service.",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/bonita-in-a-cluster/overview-of-bonita-bpm-in-a-cluster",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Bonita in a cluster"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-configurable-archive": {
      "title": "Configurable Archive",
      "content"     : "Configurable ArchiveNote: For Enterprise and Performance editions only.The Configurable Archive feature is provided by the com.bonitasoft.engine.archive.impl.ListArchivingStrategy service implementation, which only works with a Enterprise or Performance license. It enables you to specify for each FlowNode type whether or not to archive values when the flow node is changed. This determines what information (for example archived instances of processes and executed tasks) is available to an administrator in Bonita Portal.Deactivating archives has a positive effect on overall performance of the system as it reduces the number of entries inserted in the database. It has also the benefit of reducing the disk space used by the database. However, it prevents users from keeping a history of past activity. The most visible impact of this loss of information is through the Bonita Portal. Completed tasks will not be visible.In general we recommended that you set all attributes to true or all to false. However, here are some details on some settings that you can change if users have a specific use case:  To archive the ProcessInstance comments when the process instance completes, set org.bonitasoft.engine.core.process.comment.model.SComment to true. Comments entered in a task during execution are archived in executed tasks in archived cases.  To archive a process instance each time its state changes, set org.bonitasoft.engine.core.process.instance.model.SProcessInstance to true.  To archive transition instances, set org.bonitasoft.engine.core.process.instance.model.STransitionInstance to true. This information is not available in Bonita Portal.  To archive an automatic (service) task each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SAutomaticTaskInstance to true.  To archive a manual task (e.g. sub-tasks) each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SManualTaskInstance to true.  To archive a user (human) task each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SUserTaskInstance to true.  To archive a receive task each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SReceiveTaskInstance to true. This information is not available in Bonita Portal.  To archive a loop activity each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SLoopActivityInstance to true.  To archive a multi-instances activity each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SMultiInstanceActivityInstance to true.  To archive a call activity each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SCallActivityInstance to true.  To archive a gateway each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SGatewayInstance to true. This information is not available in Bonita Portal.  To archive a sub-process activity each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SSubProcessActivityInstance to true.  To archive a connector instance each time it changes state, set org.bonitasoft.engine.core.process.instance.model.SConnectorInstance to true.To configure the archiving strategy, edit the file bonita-tenant-sp-custom.properties and specify the items that you want archived. By default, the archiving strategy is that everything is archived, so the value for each type of information is set to true. Change this setting to false for the items that you do not want to archive.",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/configurable-archive",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-multi-tenancy-and-tenant-configuration": {
      "title": "Multi-tenancy and tenant configuration",
      "content"     : "Multi-tenancy and tenant configurationNote: For Enterprise and Performance editions only.This page explains the architecture and configuration of a multi-tenant system using Bonita.Platform architecturePlatform configurationTenant creationREST APIJava PlatformAPITenant accessBonita PortalBonita APIsPause and resume a tenantPlatform architectureBy default, all installations of Bonita create a single tenant. However multi-tenancy is possible with the Enterprise or the Performance edition.Multi-tenancy involves a single software installation, called a platform, that can serve multiple independent organizations, called tenants.Each tenant is a separate, self contained configuration for a single client/company. Artifacts are deployed at tenant level, so a tenant has its own organization (users, groups, roles), processes (apps, cases, trasks), reports, and custom pages.Data within a tenant are completely isolated. A tenant cannot access data from any other tenant. A user logged in to a tenant cannot access any other tenant.After the installation of any Bonita version (Community or Subscription), a single default tenant is created and ready for use.If you are using the Enterprise or the Performance edition, you can create additional tenants, using the Platform API (through Java or REST API).These tenants are configured with a single database. This illustration shows a platform with three tenants.Platform configurationThe platform is the part of the system that is common to all tenants.Before the platform has been initialized, its configuration can be customized in setup/platform_conf/initial. However, in order to modify the configuration on aninstallation whose platform has already been initialized, you need to use the platform setup tool to retrieve the currentconfiguration and update the files in setup/platform_conf/current/. Then use the tool again to save your changes into the database.The engine platform configuration directory is located in sub-folder: current/platform_engine/.The portal platform configuration directory is located in sub-folder: current/platform_portal/.There is a separate engine configuration directory for each tenant, located in: current/tenants/&amp;lt;tenant_id&amp;gt;/tenant_engine.There is a separate portal configuration directory for each tenant, located in: current/tenants/&amp;lt;tenant_id&amp;gt;/tenant_portal.There is also a default tenant engine configuration directory, located in: current/tenant_template_engine.There is also a default tenant portal configuration directory, located in: current/tenant_template_portal.Tenant creationA tenant can be created using the Java PlatformAPI (see the Engine Javadoc) or the platform REST API.Note:If business objects will be deployed in the newly created tenant do not forget to create the business data database and configure specific data sources.This must be done for each tenant that will use the Business Data feature.ImportantOnce a tenant has been created and activated, default theme is not yet loaded.Therefore, as long as you have not logged in to the new tenant, the login page will miss the default theme.After the first login, default theme will be loaded and the login page will look as usual.REST APIThe platform REST API is a REST layer around the Java PlatformAPI to create the tenant.Walk-throughInstall curl command line toolcurl is available on Linux OS and it transfers data from or to a server with various protocols such as HTTP and HTTPS.$ sudo apt install curlNOTE: this is to be done only once.Start a tomcat  Download a BonitaSubscription-7.*-Tomcat-8.5.31.zip  Unzip it  Provide a valid license file  Start the tomcatLogin$ curl -v -c saved_cookies.txt -X POST --url &#39;http://localhost:8080/bonita/platformloginservice&#39; --header &#39;Content-Type: application/x-www-form-urlencoded; charset=utf-8&#39; -d &#39;password=platform&amp;amp;redirect=false&amp;amp;username=platformAdmin&#39; -O /dev/nullThe response to this REST API call (HTTP) generates 2 cookies, which must be transfered with each subsequent calls.One of the cookie is X-Bonita-API-Token.Note that the security against CSRF attacks is enabled by default for all fresh installations; the subsequence REST API calls using DELETE, POST, or PUT HTTP methods must define the X-Bonita-API-Token header, with the value transmitted via the associated cookie.The cookies have been saved on the disk, in the saved_cookies.txt file:$ cat saved_cookies.txt #HttpOnly_localhost	FALSE	/bonita/	FALSE	0	JSESSIONID	46EF8A05819B6C268EE700F3C3FC939Alocalhost	FALSE	/	FALSE	0	X-Bonita-API-Token	a94cbf84-6b71-409a-981f-f91b17466929Create the new tenant$ curl -b saved_cookies.txt -X POST &#39;http://localhost:8080/bonita/API/platform/tenant&#39; -H &quot;Content-Type: application/json&quot; -H &#39;X-Bonita-API-Token: a94cbf84-6b71-409a-981f-f91b17466929&#39; -d &#39;{&quot;name&quot;:&quot;MyTenant&quot;, &quot;description&quot;:&quot;My tenant&quot;, &quot;username&quot;:&quot;install&quot;, &quot;password&quot;:&quot;install&quot;}&#39;{  &quot;id&quot;: &quot;101&quot;,  &quot;creation&quot;: &quot;2017-06-09 15:11:01.191&quot;,  &quot;icon&quot;: &quot;/default.png&quot;,  &quot;username&quot;: &quot;&quot;,  &quot;description&quot;: &quot;My tenant&quot;,  &quot;name&quot;: &quot;MyTenant&quot;,  &quot;state&quot;: &quot;DEACTIVATED&quot;,  &quot;password&quot;: &quot;&quot;} The new tenant has the id `101` and its state is `DEACTIVATED`Activate the tenant with id 101$ curl -v -b saved_cookies.txt -X PUT &#39;http://localhost:8080/bonita/API/platform/tenant/101&#39; -H &quot;Content-Type: application/json&quot; -H &#39;X-Bonita-API-Token: a94cbf84-6b71-409a-981f-f91b17466929&#39; -d &#39;{&quot;state&quot;:&quot;ACTIVATED&quot;}&#39;* Connected to localhost (127.0.0.1) port 8080 (#0)&amp;lt; HTTP/1.1 200 OK$ curl -b saved_cookies.txt -X GET &#39;http://localhost:8080/bonita/API/platform/tenant/101&#39; {  &quot;password&quot;: &quot;&quot;,  &quot;name&quot;: &quot;MyTenant&quot;,  &quot;icon&quot;: &quot;/default.png&quot;,  &quot;description&quot;: &quot;My tenant&quot;,  &quot;id&quot;: &quot;101&quot;,  &quot;state&quot;: &quot;ACTIVATED&quot;,  &quot;creation&quot;: &quot;2017-06-09 15:11:01.191&quot;,  &quot;username&quot;: &quot;&quot;}Logout$ curl -v -b saved_cookies.txt -X GET --url &#39;http://localhost:8080/bonita/platformlogoutservice?redirect=false&#39;Java PlatformAPIThis solution can be used when the portal is not needed.The Java PlatformAPI creates the tenant by updating the database and creating configuration based on the tenant template files (in database too). The following example code uses the Engine Java APIs to create a tenant called “myNewTenantName”:// Get platform login API using the PlatformAPIAccessor:PlatformLoginAPI platformLoginAPI = PlatformAPIAccessor.getPlatformLoginAPI();// Log in to the platform:PlatformSession platformSession = platformLoginAPI.login(&quot;platformAdmin&quot;, &quot;platform&quot;);// Get the platform API:PlatformAPI platformAPI = PlatformAPIAccessor.getPlatformAPI(platformSession);// Create a new tenant:TenantCreator tenantCreator = new TenantCreator(&quot;myNewTenantName&quot;);tenantCreator.setUsername(&quot;install&quot;);tenantCreator.setPassword(&quot;install&quot;);long tenantId = platformAPI.createTenant(tenantCreator);platformAPI.activateTenant(tenantId);// Log out of the platform:platformLoginAPI.logout(platformSession);Tenant accessA tenant is identified by an id, which is used to log in and to retrieve the tenant. A tenant also has a name. You can use the tenant name to retrieve the tenant id.To use the newly created tenant:// use tenant-level api client:APIClient apiClient = new APIClient();// login on the new tenant with the only existing &#39;technical&#39; user, ...apiClient.login(TENANT_ID, &quot;install&quot;, &quot;install&quot;);   // here, replace TENANT_ID by the ID of the tenant you just created above// ... in order to create other users:user = apiClient.getIdentityAPI().createUser(&quot;john&quot;, &quot;bpm&quot;, &quot;John&quot;, &quot;Doe&quot;);apiClient.logout();// now login with the new user:apiClient.login(TENANT_ID, &quot;john&quot;, &quot;bpm&quot;);// retrieve an API to interact with the engine:ProcessAPI processApi = apiClient.getProcessAPI();// and use the processApi on the new tenant...[...]// Don&#39;t forget to logout finally:apiClient.logout();Bonita PortalIn order to access Bonita Portal desktop and mobile application, add the parameter tenant=TENANT_ID (where TENANT_ID is the tenant identifier) in the URL before you login.Example for Bonita Portal desktop version and tenant 2:http://localhost:8080/bonita/login.jsp?tenant=2Example for Bonita Portal mobile version and tenant 2:http://localhost:8080/bonita/mobile/?tenant=2Bonita APIsUse the PlatformAPI to perform operations on tenants.Example: retrieving a tenant from its name and log into it// Get platform login API using the PlatformAPIAccessorPlatformLoginAPI platformLoginAPI = PlatformAPIAccessor.getPlatformLoginAPI();// Log in to the platformPlatformSession platformSession = platformLoginAPI.login(&quot;platformAdmin&quot;, &quot;platform&quot;);// Get the plaform APIPlatformAPI platformAPI = PlatformAPIAccessor.getPlatformAPI(platformSession);// Retrieve your tenant by nameTenant tenant = platformAPI.getTenantByName(&quot;myTenant&quot;);// Log out of the platformplatformLoginAPI.logout(platformSession);// Log in to the tenant using the APIClientAPIClient apiClient = new APIClient();apiClient.login(tenant.getId(), &quot;install&quot;, &quot;install&quot;);// Perform some operations on the tenant...// Log out of the tenantapiClient.logout();Pause and resume a tenantTo perform certain maintenance operations (notably when updating the business data model), you must pause the BPM service of a tenant. The TenantAdministrationAPI contains the following methods related to pausing a tenant:  TenantAdministrationAPI.isPaused() returns true if the Tenant BPM service is paused.  TenantAdministrationAPI.pause() pauses the tenant BPM service.  TenantAdministrationAPI.resume() resume the tenant BPM service.For example, to resume the service in a tenant:TenantAdministrationAPI tenantAdministrationAPI = TenantAPIAccessor.getTenantAdministrationAPI(apiSession);if (tenantAdministrationAPI.isPaused()) {tenantAdministrationAPI.resume();}While service is paused in a tenant, only the following methods are valid:  IdentityAPI method calls  ProfileAPI method calls  themeAPI method calls  TenantAdministrationAPI method callsIf you attempt an operation that is not permitted while a tenant is paused, a TenantStatusException is thrown.You can also pause and resume a tenant using the REST API or Bonita Portal.",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/multi-tenancy-and-tenant-configuration",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-performance-troubleshooting": {
      "title": "Performance troubleshooting",
      "content"     : "Performance troubleshootingThis page contains information about monitoring your Bonita platform. We recommend that you monitor your system regularly, so that if you suspect a performance degradation, you can repeat these checks and identify the potential problem areas by comparing the performance to the normal level.When troubleshooting a performance problem, we recommend that you first check your system and network, and then check your Bonita platform and configuration. Follow the order of the topics in this page. This will help you identify problems that occur because the actual load on the system exceeds the expected load so the provisioning is not sufficient. They will also help you identify transient problems.SystemNetworkJVMDatabaseBonita Engine connectionsConnectorsCron jobsPerformance tuningSystemThese are the key indicators to check:  CPU: monitor CPU usage for each hardware platform, and check that it does not exceed 80%  CPU: check that all available CPUs are used on each hardware platform  Memory: monitor memory swap, and check that it is not used  Memory: monitor the amount of memory used  Disk: monitor disk I/OMany tools exist in every operating system for system monitoring. For example:  For Linux: ps, top, iotop, vmstat, iostat, sysstat  For Windows : tasklist, process monitor, process explorerThese tools can be used in conjunction with monitoring systems such as like Nagios or Zabbix.Bonita also provides a PlatformMonitoringAPI that you can use to obtain some of this information.NetworkNetwork performance has a direct impact on the duration of an instance. We recommend that you measure network performance at the following points:  Between the server hosting the Bonita Engine and the database server. Check that the servers ping time duration is less than 1ms. There are many connections between Engine and the database, so network performance between these two servers has huge impact on performance.  between the server hosting the Bonita Engine and any other servers used (typically those called by connectors). As connectors are often used to enable Bonita to communicate with outside world, network performance has impact on performance.JVMThese are the key indicators to check:  Memory: heap, memory used by objects  Threads: Number of threads, number of deadlocksA large number of deadlocks, or memory heap starvation may indicate a performance issue.Follow the JVM performance tuning recommendations and increase provisioning to get the optimum performance.Many OpenSource and proprietary tools exist for JVM monitoring. These parameters can be obtained through monitoring system like Nagios or Zabbix. You can also retrieve them using the PlatformMonitoringAPI.DatabaseAll databases provide information to monitor the following:  Connections: monitor the number of connections in parallel  Transaction: monitor the number of transactions that are committed, and the number that are rolled back  Memory : Size used by database,  Disk space used by databaseIf actual usage reaches the limit of available capacity, this can indicate a performance issue.These values can be monitored through a monitoring system like Nagios or Zabbix. You can also get the number of active transaction using the MonitoringAPI.Bonita Engine connectionsBonita Engine performance is strongly linked by the number of connections. The number of connections from the Bonita Portal directly influences the number of connections to the database through the number of workers, and the number of connector threads.To avoid overloading the Engine, check that the following connection numbers are coherent:  Bonita client  Bonita Engine  DatabasePredict and then monitor the following:  Users: the total number of users and the maximum number of parallel users  Processes: the total number of instances of all processes and the maximum number of parallel tasksAll connection numbers must be defined according to the performance tuning recommendations:  Monitor connection number managed by client (see Client Threads)  Check connection number managed by Bonitasoft Server (See Work Service, Connector service, and Scheduler Service)  Check number of database connections defined in Bonitasoft (see Database connections and Datasource settings)  Check maximum number of simultaneous connections on database  Monitor number of simultaneous connections on database  Monitor SQL request duration timeConnectorsUse the connector time tracker to check connector performance.Cron jobsThe Bonita Engine uses the Scheduler service to trigger jobs in a recurrent manner. It might be possible to improve performance by optimizing the cron settings.Performance tuningSee Performance tuning.",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/performance-troubleshooting",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-performance-tuning": {
      "title": "Performance tuning",
      "content"     : "Performance tuningNote: For Enterprise and Performance edition only.This page contains information that you can use to tune the Bonita Engine to get the best performance in your platform.It assumes that you are familiar with Java threads, concurrent execution, XML, DB connection pools, your DB instance, cache policies, scheduling, connectors, network speed, I/O, Java Virtual Machine configuration, JTA and transaction management.You need to know how to install and configure Bonita.This information applies primarily to the Enterprise and Performance edition, though some details also apply to the Teamwork and Efficiency editions.It is also possible to use gzip compression on your application server to improve performance.SummaryEngine accessConcurrent executionVolumeHardware and networkDatabase, Transaction Manager, and logsConnector time trackerTime trackerProcess design, event handlers, and cron jobsSummaryThis section is a summary of the key recommandations from the rest of the page. You can use it as a checklist of things to consider when tuning system performance.To understand these recommendations in detail, read the sections below.Two key definitions:  The maximum possible number of parallel threads that could be required at any given time is the sum of:  the number of workers  the number of scheduler threads  the number of external API callsThe processing capacity is the desired number of parallel threads, and is the sum of:  the number of workers  a percentage of the number of concurrent scheduler threads  a percentage of the number of concurrent external API calls  Performance tuning checklist of best practises:  Access Engine APIs in Local mode whenever possible.  Make sure that the network between your client and the Bonita Engine server is fast if you access the APIs remotely.  Install your Database on a powerful machine (hardware that meets to your DB vendor requirements: sufficient memory, powerful CPU, and fast I/O).  Make sure that the network between your Bonita Engine server and your database server is very fast.  Set the Work service threadpool and Connector service threadpool to the same size.  Set the maximum DB connections for the bonitaDS datasource to the desired processing capacity number of parallel threads.  Configure a suitable sequence manager range size for your typical process designs and expected volume.  Make sure that the maximum DB connections for sequenceManagerDS datasource is more than 1 and is appropriate for the SequenceManager range size configuration.  Tune the application cache to your hardware capabilities (if you have more memory available, increase the cache size).  Set the basic JVM options to make it fast and well-sized.  Optimize your database configuration for your most frequent usage (read or write) and the level of robustness that you want.  Configure your transaction manager for the level of robustness that you want.  Tune the log levels of Bonita Engine and all its dependencies.  Design your processes following the best practises.  Add a reasonable number of well-developed event handlers.  Tuned the Bonita Engine cron jobs for your needs.Engine accessThis section deals with performance impact of your choice of Engine access mode.There are various ways to access the Engine APIs provided by Bonita Engine. Choose the most suitable access mode for your deployment, requirements, and preferences.The access modes rely on different technologies and have different benefits and drawbacks. In this section, we will describe the performance characteristics of each mode.Local accessThis is undoubtedly the fastest way to access this engine, because it means a direct Java call with nothing additional between client and server.The deployment constraint is that the client of the engine must be located in the same JVM as the engine server.Remote accessThe remote access modes enable you to have an engine client connected remotely to the engine server.All remote access modes share a set of common benefits and constraints. There is a loss of performance mainly because of serialization between client and server.If your client is not located on the same machine than your server JVM, the network becomes an additional potential source of performance reductions to monitor.Tip: In some deployments, it is possible to benefit from the best of both local and remote modes.The engine server access mode is defined per client and does not need to be the same for all clients.If you have a client located in the same JVM as your server, configure it to use the local access mode.You can then configure other clients to use one of the remote modes but you do not penalize the client able to leverage the local access performance.EJB3EJB3 access is serialized data using RMI protocol.This protocol comes with a cost, and this cost is dependent of the implementation in the EJB container you are using.HTTPThe HTTP access mode is available using our natively provided bonita-client library. It can also be used from othertechnologies like PHP, .Net or Javascript (in that case, you need to develop your our client).We do not guarantee to keep the http protocol stable, so we strongly recommend that you use  the standard bonita-client library  the same version for both the client and the serverThis mode  provides remote connection to the server without requiring a JEE application server with an EJB container  can be easily used inside a web container like Tomcat or Jetty.The bonita-client library  sends data over the network using the HTTP protocol using the Apache HttpComponents.open source library  uses org.apache.http.impl.conn.PoolingClientConnectionManager as connection manager .  Currently, there is no  configuration for this pool though this might be added in the future.  See the HttpComponents documentation  for more information.Data sent is serialized using a Java library called XStream. This serialization also has a cost.RESTThis method of accessing the Bonita capabilities is not yet integrated as an engine service but exists as a web application service accessed using the Web REST API.No details are provided here as it is currently out of scope.In general, the constraints are almost the same as for the HTTP mode, but we do not provide any Java client for this access mode.Concurrent executionThis section describes some aspects of engine configuration that have a performance impact if there is a high level of concurrent execution.Before you read this, make sure you are familiar with the engine execution sequence, states, and transactions.There are two main entry points for load on the engine:  API calls coming from outside the engine  Engine-generated calls for internal processing, specifically the Work service and the Scheduler serviceThe Bonita Engine is an asynchronous BPM process engine.This means that every thread that deals with process execution applies the following rule: do the minimum that makes sense in the current transaction to get to a stable state, and then continue in another transaction inside another thread.The great benefit of this is that the caller is not locked while the engine processes something that might be long (such as a long sequence of tasks with connectors.).Client ThreadsClient threads are responsible for a large part of the load generated inside the engine.The number of client threads is related to the number of parallel users.If you are running your own application, you have one thread if your applicaiton is not multi-threaded, or you have the number of threads you decided to create explicitly in the application or using your own threadpool.If you are running Bonita Engine inside a container, the maximum number of client threads is defined by a parameter of the container. For example:  Apache Tomcat maxThreads set in Tomcat_folder/conf/server.xml. Default value 20.See the Tomcat documentation for information about the maxThreads parameter.  Red Hat WildFly : add the attributes io-threads=&quot;10&quot; and task-max-threads=&quot;20&quot; in the default worker element in the io subdomain in &amp;lt;WILDFLY_HOME&amp;gt;/setup/wildfly-templates/standalone.xml.   The WildFly administrator guide lacks some information about advanced worker configuration. Undertow (WildFly web service handler) relies on the XNIO API for creating Worker threads. See IO Worker configuration for Undertow for information about worker configuration.Work serviceThe work service is responsible for asynchronously processing execution of process instances. The work service has its own thread pool, which can be configured for each tenant.This is one of the key configurations to optimize, because even though there are many client threads, client threads are held only for a short time before being released, and then execution flow continues using work service threads.A thread from the pool of the work service is known as a worker.The work service is configured in bonita-tenant-community-custom.properties.bonita.tenant.work.terminationTimeout=30bonita.tenant.work.corePoolSize=25bonita.tenant.work.maximumPoolSize=25bonita.tenant.work.keepAliveTimeSeconds=60bonita.tenant.work.queueCapacity=10000It is very similar to the constructor provided in the default JDK ThreadPoolExecutor.For a reminder of how the threadpool behaves, see the Queuing section of the ThreadPoolExecutor documentation.In the default Bonita configuration, corePoolSize is equal to maximumPoolSize because we have observed that the default implementation of the threadpool executor allocates work to available threads using a round robin algorithm.Therefore, if the maximum is reached, the thread pool size is unlikely ever to reduce to corePoolSize, because work is always allocated to available threads.The current implementation of the RejectedExecutionHandler queues the work, and reduces the system load because it does not release the caller (normal behaviour for a BlockingQueue).After a lot of profiling, we have concluded that having an arbitrarily high number of threads in the work service does not positively impact the performance of the whole system, because it leads to a lot of contentions, mostly on the database (see Database connections).The size of the threadpool (corePoolSize in the default configuration) is key, and correlates to the number of process instances the engine can handle in parallel.In other words, if you want the engine to be capable of handling X process instances concurrently, you should set the corePoolSize value of the work service to X.You then need to ensure that your platform infrastructure can handle X concurrent instances, checking that all other engine dependencies including the network and the database are able to process all incoming requests without loss of performance.Setting a high queueCapacity limit means that more work can be queued, but can reduce throughput as work is queued rather than causing a new thread to be created.It is essential to ensure that the queue never becomes full (queueCapacity is never reached).If the queue becomes full, the application restarts in order to force the engine to generate all work from the database. This means that work is lost.Connector serviceThe connector service executes connectors. To improve tenant isolation (and to protect against denial-of-service attacks), the default implementation of the connector service has its own threadpool and requires executes connectors in a separate thread from the worker. The configuration of the threadpool of this service must be correlated to the configuration of the work service.This mapping between the configurations of the two threadpools depends on your processes. If you have processes that use a lot of connectors, then you need as many connector threads as work threads.If you are unsure, our recommendation is to configure the two threadpools with the same values.The Connector service is configured in bonita-tenant-community-custom.properties and bonita-tenant-sp-custom.properties (cf platform setup)Community:bonita.tenant.connector.queueCapacity=10bonita.tenant.connector.corePoolSize=5bonita.tenant.connector.maximumPoolSize=100bonita.tenant.connector.keepAliveTimeSeconds=100Subscription only:bonita.tenant.connector.timeout=300For details of these parameters, see Work service.Scheduler serviceThe Scheduler service is responsible for executing jobs.A job is executed inside a thread of the scheduler service.There are various kinds of jobs, some resulting from internal requirements such as API session cleaning, or batch deletion of a table row, and some related to process design such as BPMN2 events.The Bonita Engine Scheduler service uses the Quartz Scheduler. Quartz takes the size of the threadpool as an input parameter.   Quartz uses threads to execute jobs concurrently.The Scheduler service configuration is in bonita-platform-community-custom.properties.You can configure:bonita.platform.scheduler.quartz.threadpool.size=5bonita.platform.scheduler.batchsize=1000Database connectionsTwo datasources are defined:  bonitaSequenceManagerDS is used for distributing ID requests  bonitaDS is used for everything elseNote that the sum of the maximum values configured for bonitaDS and bonitaSequenceManagerDS should be less than or equal to the maximum number of simultaneous connections allowed to your database.bonitaSequenceManagerDSThis datasource needs only a few connections: between 5 or 10% of bonitaDS number should be sufficient. However, this is closely correlated to the range size.bonitaDSThis datasource requires a higher value, because Bonita Engine stores almost everything in the database.This means that every single thread from any of the entry points requires a database connection through bonitaDS.To make sure that this datasource is not a bottleneck, define the maximum number of database connections to be equivalent to the desired number of parallel processing threads.The desired number of parallel processing threads is the sum of the number of workers (see Work service) plus a percentage of the number of scheduler threads (see Scheduler Service) plus a percentage of the number of concurrently external API calls (see Client threads).Datasources settingsYou need to configure the maximum pool size for datasources (the following paths are for bundle users):For Tomcat:  For bonitaSequenceManagerDS, edit setup/tomcat-templates/bonita.xml and set maxTotal=”yourvalue”.  For bonitaDS, edit setup/tomcat-templates/bitronix-resources.properties and set resource.ds1.maxPoolSize=”yourvalue”.For WildFly:  For both bonitaDS and bonitaSequenceManagerDS, edit server/default/deploy/bonita-ds.xml and set &amp;lt;max-pool-size&amp;gt;yourvalue&amp;lt;/max-pool-size&amp;gt;.VolumeThis section deals with some aspects of engine configurations that have a performance impact in the case of high volume.Sequence managerBonita Engine manages a dedicated sequence for each table for ID generation.This implementation allows fast delivery of IDs and a single point of usage inside the application: the persistence service.The sequence manager keeps in memory a range of reserved IDs by table.This range size is configurable by sequence so that it can be adapted to the volume you have.The bigger a range is, the less frequently the sequence manager will have to query the database for a new range, because it is managed in memory for as long as possible.However, all the IDs that are reserved in memory are lost when the JVM is shut down, so the number should not be too big or you might reach Long.MAX_VALUE too quickly.The sequence manager allows you to set the range size for each sequence and a default range size value, which is applied to any sequence that does not have a specific range defined. If you want to tune these values, you have to understand the correlation between them.For example, if you have an average of 20 steps in your process, then it would be reasonable to set the ActivityInstance range size to be 20 times bigger than the ProcessInstance range.The sequence manager configuration is in bonita-platform-community-custom.properties.The sequence manager has its own database connection.This should be appropriately sized for the number of times the sequence manager will query the database, which is a consequence of the range size values. See Database connections.Persistence cacheFor the Teamwork, Efficiency, Performance and Enterprise editions, Bonita Engine has a cache providing a persistence layer using Hibernate caching.EhCache configuration for this persistence layer is defined in a file named bonita-platform-hibernate-cache.xml.notused and bonita-tenant-hibernate-cache.xml.notused.To apply the configuration of those files, remove the ‘.notused’ suffix.It is possible to modify the cache settings in those files for each kind of object.Before going into production, we encourage to finely tune the “Level-2” object cache in a pre-prod environment:  activate Hibernate cache statistics by setting to true the parameter bonita.platform.persistence.generate_statistics in file bonita-platform-community-custom.properties  activate logs at INFO level:```* run load tests to simulate a production environment* analyse the &quot;2nd Level Cache Ratio&quot; log messages generated, combined with the &quot;soft-locked cache entry was expired&quot; **warnings messages** to change the configuration in file **hibernate-cache-tenant.xml**.  For instance, if on entity **org.bonitasoft.engine.core.document.model.impl.SDocumentImpl**, the &quot;soft-locked cache entry was expired&quot; warnings message occurs, it means the size of the **maxElementsInMemory** parameter must be increased, provided it is a reasonable memory size and provided the &quot;2nd Level Cache Ratio&quot; is not low for this element. If the &quot;2nd Level Cache Ratio&quot; is low or even 0, it means the cache is never used to read several times the same entity, which means the **timeToLiveSeconds** parameter should be increased, or that the cache should be completely deactivated for this entity.Below is an example of a &quot;soft-locked cache entry was expired&quot; warning message:WARNING: Cache org.bonitasoft.engine.core.process.instance.model.impl.SFlowNodeInstanceImpl Key org.bonitasoft.engine.core.process.instance.model.impl.SFlowNodeInstanceImpl#org.bonitasoft.engine.persistence.PersistentObjectId@25505ff Lockable : nullA soft-locked cache entry was expired by the underlying Ehcache. If this happens regularly you should consider increasing the cache timeouts and/or capacity limits&amp;lt;a id=&quot;app_cache&quot;/&amp;gt;#### Application cacheBonita Engine uses an application cache to store specific objects. The default implementation of this service relies on EhCache. It is configured in these files:* `bonita-platform-community-custom.properties`* `bonita-tenant-community-custom.properties`* `bonita-platform-sp-cluster-custom.properties`* `bonita-tenant-sp-cluster-custom.properties`The following cache configurations can be defined:| Configuration | Purpose| |:-|:-|| connectorCacheConfig | stores connector implementations for a given connector definition| | processDefCacheConfig | stores process definition objects| | userFilterCacheConfig | stores user filter implementations for a given user filter definition| | migrationPlanCacheConfig | not yet used| | breakpointCacheConfig | not yet used| | groovyScriptCacheConfig | stores compiled versions of Groovy scripts| | synchroServiceCacheConfig | used by the benchmark test infrastructure (and has no meaning outside of it)| | transientDataCacheConfig | stores transient data| | platformCacheConfig | used to store platform object, which contains general platform information such as the version, or start date| | parameterCacheConfig | stores process parameters| &amp;lt;a id=&quot;jvm&quot;/&amp;gt;#### Java Virtual MachineYou can configure the JVM settings for the engine to tune performance.  Check the [JVM documentation](http://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html) for details of the available settings.Notably, we recommend you to set the initial (`-Xms`) and maximum (`-Xmx`) heap sizes to the same value.  This reduces the likelihood of the JVM garbage collector starting.  While the garbage collector is running, it prevents creation of new objects, which slows down the application server.&amp;lt;a id=&quot;network&quot;/&amp;gt;&amp;lt;a id=&quot;hardware&quot;/&amp;gt;## Hardware and network{:#hardware-and-network}This section deals with performance impact of hardware elements.Bonita performance is very correlated to the database connectivity and its behavior.Almost everything (API call, internal processing using workers, jobs scheduling, and so on) requires a database access.  Two elements are critical: network latency, as in most cases your database is located on another server, and the I/O of your hard drives.  In case of issues, you should monitor these two elements and consider improvements. For example:* locate your database in the same datacenter as the Bonita Engine, using gigabit network connections* use SSD hard drives, and RAID configuration with stripingNetwork connectivity also impacts access to the engine APIs when you are not using local access, that is, if you are using [EJB3](#ejb3), [HTTP](#http), [REST](#rest).## Database, Transaction Manager, and logs{:#database-transaction-manager-and-logs}This section is a reminder about some of the main dependencies Bonita Engine has that have a strong impact on the performance of the whole system.Bonita Engine relies on several other components that each have their own performance tuning options.Some of them are key for the system and you should pay a lot of attention to them.  In most cases, the key things to consider are the [database](#db), [transaction manager](#tm), and [logs](#logs).&amp;lt;a id=&quot;db&quot;/&amp;gt;#### DatabaseBonita Engine uses the database heavily, so in consequence a slow database makes the engine slow.It is essential that the hardware configuration of the server hosting the DB is powerful, considering resources like CPU, memory or others depending on your database instance.In addition to this, make sure that your database instance is well configured.  Most database software provides many options for tuning, and some of them are easy to set up.  Others may be more difficult and present choices between robustness and performance, fast read or fast write, etc.  Your database configuration must be correlated with the Bonita Engine usage pattern.To find the right characteristic to optimize, one good starting point is to consider whether you are creating a lot of process instances (in which case optimize database writes) or you are executing a lot of read queries like `getTaskList` (in which case optimize database reads).&amp;lt;a id=&quot;tm&quot;/&amp;gt;#### Transaction managerBonita Engine is natively compatible with the Java Transaction API. This means transaction management relies on a transaction manager.If you are using a JEE Application server, then you only have to configure Bonita Engine to use the transaction manager that is provided.Otherwise, you have to embed a transaction manager (for example, we embed Bitronix by default in the Tomcat bundle).A transaction manager manages a transaction log and also frequently has notions of internal pooling.  For example, in [Bitronix](https://github.com/bitronix/btm/wiki/JDBC-pools-configuration) you can configure some options for the transaction journal. &amp;lt;a id=&quot;logs&quot;/&amp;gt;#### LogsIn general, increasing the log level is useful for debugging but has a performance cost.  With this in mind, [define the log level for technical logs, queriable logs and archives](/bonita_doc/bonita/7.8/installation/advanced-bonita-platform-installation/set-log-and-archive-levels).Remember that Bonita Engine dependencies also have their own log and debug options that may impact strongly the system performance.Be sure to configure these appropriately.## Connector time tracker{:#connector-time-tracker}It is now possible to track the duration of actions in a connector using a new time tracker. The tracker service tracks several connector lifecycle operations.  This service can impact performance so is disabled by default.  It is configured by editing the following parameters in `bonita-tenant-community-custom.properties`.  Time tracker#bonita.tenant.timetracker.startTracking=false#bonita.tenant.timetracker.maxSize=1000#bonita.tenant.timetracker.flushIntervalInSeconds=30#bonita.tenant.timetracker.csv.activateAtStart=true#bonita.tenant.timetracker.csv.folder=$ {java.io.tmpdir}#bonita.tenant.timetracker.csv.separator=;#bonita.tenant.timetracker.memory.activateAtStart=false#bonita.tenant.timetracker.memory.maxSize=1000000```To activate connector time tracking:  Uncomment all the previous lines except ## Time tracker.  Change the value of startTracking from false to true.The other parameters can be left at their default value, left commented, or set to the desired value. What each of them does:  maxSize maximum of records that will be saved by the time tracker before a flush. If the maximum number of records is reached before the scheduled flush, the older ones are discared. To avoid the loss of information, a number sufficiently big in comparison with flushIntervalInSeconds should be chosen  flushIntervalInSeconds the interval beetween two flushes on the timetracker thread.  csv.activateAtStart wether to save the result of the timetracker into a csv file.  csv.folder the folder where to save the csv file.  csv.separator the separator character in the csv file  memory.activateAtStart wether to save the result of the timetracker in memory.  memory.maxSize maximum amount of records saved in memory. If the maximum number of records is reached before the scheduled flush, the older ones are discared. To avoid the loss of information, a number sufficiently big in comparison with flushIntervalInSeconds should be chosenThe non-relevant options will be ignored at execution. Note that memory and csv can both be activated at the same time.Process design, event handlers, and cron jobsProcess designThere are several things you can do during the process design to reduce performance overheads.This is mostly related to reducing usage of extension points when possible.Consider carefully your usage of connectors, groovy scripts, XML and serializable data.Event handlersEvents handlers are extensions of the engine configuration.You can add event handlers for several purposes and you can configure which events you want to catch.We strongly recommend that you add only appropriate handlers and carefully code the handler filters to handle only those events that you are interested in.Cron jobsBonita Engine uses the Scheduler service to trigger jobs in a recurrent manner.The Bonita Scheduler service implementation uses the Quartz Scheduler.A cron job in Quartz can run at maximum every second (you cannot set a lower value than 1 second).Three cron jobs are defined:  Event handling. This job processes BPMN2 messages. It runs every 5 seconds by default.If you want your process instances to react faster, you can reduce this value.   Property name: org.bonitasoft.engine.cron  Delete dirty objects. This job cleans objects that have been tagged as dirty.To increase performance, during process instance execution, Bonita Engine tags some frequently used objects as dirty instead of deleting them.   This is done like this to reduce contention on database.   Those dirty objects have to be cleaned periodically and this is done by default every 5 minutes.   Property name: delete.job.frequency  Delete invalid sessions. This job cleans Bonita Engine sessions kept in memory.   It iterates over engine sessions and removes any that are invalid. By default this is done every 2 hours.   If you are creating a lot of new sessions in a short time, increase this frequency to avoid allocating too much memory to those invalid sessions and to avoid out-of-memory errors.   Property name: org.bonitasoft.engine.clean.invalid.sessions.cronThese property values are configured in bonita-tenant-community-custom.properties and are used to initialize the Quartz trigger tables the first time that the Engine starts.They are not read subsequently, so changing the values in bonita-tenant-community-custom.properties after the Engine has been started has no effect on Quartz.For value definition, and information about how to update the Quartz trigger tables, see the Quartz documentation about Cron Triggers.",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/performance-tuning",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-security-and-authentication-active-directory-or-ldap-authentication": {
      "title": "Active Directory or LDAP authentication",
      "content"     : "Active Directory or LDAP authenticationNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.Important notes:  This documentation applies to an existing and working Bonita installation (see the installation instructions).  In order to have functioning Active Directory/LDAP authentication, the user login (username) must exist both in the LDAP directory and in the Bonita database (user password is checked against the LDAP server but user information is read from Bonita database).  We recommend that you use the LDAP synchronizer to create Bonita users in a Bonita database.OverviewBefore you startCreate a JAAS configuration fileConfiguration stepsJAAS configuration files examplesKnown limitationsTroubleshootingOverviewBonita can be configured to perform user authentication against an LDAP server such as Active Directory, Apache Directory Server, or OpenLDAP.This type of configuration relies on a specific implementation of the Bonita Engine authentication service that delegates the actual user name and password verification to a JAAS service configured with an LDAPspecific Login Module.Before you startIn order to configure LDAP successfully, make sure you have the following information:  LDAP server type: Active Directory (AD), Apache Directory Server, or OpenLDAP  LDAP server address  LDAP listening port (e.g. 389 by default)  Is it possible to build the user distinguished name with user name that the user specifies when logging in?For example, if the user name is: john.smith and the user DN is: CN=John	Smith,CN=Users,DC=MyDomain,DC=com, it’s not possible to build the DN dynamically.  But it’s possible to do so if the DN is: uid=john.smith,ou=people,dc=example,dc=com.If it’s not possible to build the DN using the user name you will need the following extra information:  The DN of the LDAP entry under which all users are located (e.g. CN=Users,DC=MyDomain,DC=com)  The user entry objectClass (the most restrictive one). E.g. usually user on AD, inetOrgPersonor organizationalPerson for other LDAP servers.  The user entry attribute used for authentication (e.g. userPrincipalName on AD, value: john.smith@mydomain.comor uid on other LDAP servers, value: john.smith)Does the LDAP server allow anonymous search?  Does the LDAP server allow search for all users that can possibly log in?  If search can only be performed by a limited number of “technical” accounts you will need the user name and password of such an account.Create a JAAS configuration fileThis section explains how to put together all the LDAP server information you have to create or edit a JAAS configuration file compatible with your JEE application server.Login context nameThe JAAS configuration can include one or several login contexts. The Bonita login context must be named BonitaAuthentication-&amp;lt;TENANT_ID&amp;gt; (where &amp;lt;TENANT_ID&amp;gt; is your tenant id).LdapLoginModule attributes to setIt’s important to identify which LdapLoginModule attributes you need to set.This will be at least one of authIdentity, userFilter, tryFirstPass, java.naming.security.principal or java.naming.security.credentials.Based on the information described in the “Before you start” section, you can identify which of the following cases applies:  If you can build the user DN by directly injecting the user name =&amp;gt; set only the authIdentity attribute  If you cannot build the DN and anonymous search is allowed =&amp;gt; set only the userFilter attribute  If you cannot build the DN and anonymous search is disallowed and authenticated users can search =&amp;gt; set the userFilter and authIdentity attributes  If you cannot build the DN and anonymous search is disallowed and authenticated users cannot search =&amp;gt; set the userFilter,authIdentity, tryFirstPass, java.naming.security.principal and java.naming.security.credentials attributesValues for LdapLoginModule attributesIn this section we explain how to set LdapLoginModule attributes values.userProvider: set this to ldap://&amp;lt;ldap server address&amp;gt;:&amp;lt;ldap server port&amp;gt;/&amp;lt;DN of the LDAP entry under which all users are located&amp;gt;.For example: ldap://localhost:389/CN=Users,DC=MyDomain,DC=comuserFilter (only if needed): the value must be a search request that will find your users in the LDAP server. The search request can be for example: (&amp;amp;(objectClass=user)(userPrincipalName={USERNAME}@mydomain.com)).Use an LDAP tool (such as Apache Directory Studio) to validate that the request returns the expected result if you replace {USERNAME} with an actual username.authIdentity (only if needed): there are two cases:If you can build the user DN, set the attribute value with the user DN and {USERNAME} tag. For example uid={USERNAME},ou=users,dc=example,dc=com.If you use a userFilter and users are allowed to search, set the value with {USERNAME}@mydomain.com for AD and user the DN (same as above) for other LDAP servers.tryFirstPass(only if needed): set this to true.java.naming.security.principal(only if needed): specify the username (AD) or the user DN (other LDAP servers) of a user that can perform searches on the server.java.naming.security.credentials(only if needed): specify the password of a user that can perform searches on the server.Create or edit the configuration file for your application serverNote: all configuration files are case sensitive. You can find more examples in the JAAS configuration files examples section of this page.WildFlyEdit the &amp;lt;WILDFLY_HOME&amp;gt;/setup/wildfly-templates/standalone.xml file to specify the configuration. Use HTML encoding for any strings in the configuration (for example, a space character is written as %20).Add the Bonita login context using the WildFly specific syntax just before the &amp;lt;/security-domains&amp;gt; tag. Note that security-domain-name is in fact the JAAS login context name (e.g. Bonita).The following example is for a tenant with id 1:&amp;lt;security-domain name=&quot;BonitaAuthentication-1&quot;&amp;gt;&amp;lt;authentication&amp;gt;&amp;lt;login-module code=&quot;com.sun.security.auth.module.LdapLoginModule&quot; flag=&quot;required&quot;&amp;gt;&amp;lt;module-option name=&quot;userProvider&quot; value=&quot;ldap://localhost:389/ou=all%20people,dc=example,dc=com&quot;/&amp;gt;&amp;lt;module-option name=&quot;userFilter&quot; value=&quot;(&amp;amp;amp;(objectClass=user)(userPrincipalName={USERNAME}@myExampleDomain.com))&quot;/&amp;gt;&amp;lt;module-option name=&quot;authIdentity&quot; value=&quot;{USERNAME}@myExampleDomain.com&quot;/&amp;gt;&amp;lt;module-option name=&quot;useSSL&quot; value=&quot;false&quot;/&amp;gt;&amp;lt;module-option name=&quot;debug&quot; value=&quot;true&quot;/&amp;gt;&amp;lt;/login-module&amp;gt;&amp;lt;/authentication&amp;gt;&amp;lt;/security-domain&amp;gt;TomcatOn Tomcat, the JAAS configuration file follows the default JVM syntax.Here is an example of JAAS configuration file:BonitaAuthentication-1 {  com.sun.security.auth.module.LdapLoginModule sufficient  userProvider=&quot;ldap://localhost:389/ou=people,dc=example,dc=com&quot;  authIdentity=&quot;uid={USERNAME},ou=people,dc=example,dc=com&quot;  useSSL=false;};We recommend that you name your JAAS configuration file jaas.cfg and that you add the file under &amp;lt;TOMCAT_HOME&amp;gt;/server/conf folder.Configuration stepsChanging Bonita authentication serviceThe default Bonita installation comes with an authentication service implementation based on the Bonita Engine database. Inorder to activate Active Directory/LDAP authentication the service implementation needs to be changed. To do this, edit bonita-tenant-sp-custom.properties.You will need to perform following changes:  Comment out the authenticationService line  Add this new line: authentication.service.ref.name=jaasAuthenticationServiceConfigure JAASWildFlyAs the JAAS configuration in WildFly is already done in a file that already exists, no further configuration is necessary.TomcatTo define the JAAS configuration file location you need to set a JVM property, java.security.auth.login.config. To do this for a system running Tomcat you need to edit the setenv script provided with Bonita and located in &amp;lt;TOMCAT_HOME&amp;gt;/server/bin folder.For Linux and Mac OS  Edit this file: &amp;lt;TOMCAT_HOME&amp;gt;/setup/tomcat-templates/setenv.sh  Locate the line that starts: #SECURITY_OPTS  Uncomment this line, i.e. remove the # sign and set property value to: %CATALINA_HOME%confjaas.cfg.  Locate the line that starts: CATALINA_OPTS=  Add the tag ${SECURITY_OPTS}  after the tag ${PLATFORM_SETUP}  Push into database the changes: ./setup.sh pushFor Windows  Edit this file: &amp;lt;TOMCAT_HOME&amp;gt;/setup/tomcat-templates/setenv.bat  Locate the line that starts: rem set SECURITY_OPTS  Uncomment it, i.e. remove “rem” keyword and set property value to: ${CATALINA_HOME}/conf/jaas.cfg  Locate the line that starts: set CATALINA_OPTS=  Add the tag %SECURITY_OPTS% after the tag %PLATFORM_SETUP%  Push into database the changes: .setup.bat pushJAAS configuration files examplesNote: Remember to remove the debug flag for production.Note: These examples use the JAAS standard syntax (as used by Tomcat). They can easily be adapted to the WildFly XML syntax.Active DirectorySearch allowed for all usersIn this example, the user name is john.smith:BonitaAuthentication-1 {  com.sun.security.auth.module.LdapLoginModule sufficient  userProvider=&quot;ldap://localhost:389/CN=Users,DC=MyDomain,DC=com&quot;  userFilter=&quot;(&amp;amp;(objectClass=user)(userPrincipalName={USERNAME}@mydomain.com))&quot;  authIdentity=&quot;{USERNAME}@mydomain.com&quot;  debug=true  useSSL=false;};In this example, the user name is john.smith@mydomain.com:BonitaAuthentication-1 {  com.sun.security.auth.module.LdapLoginModule sufficient  userProvider=&quot;ldap://localhost:389/CN=Users,DC=MyDomain,DC=com&quot;  userFilter=&quot;(&amp;amp;(objectClass=user)(userPrincipalName={USERNAME}))&quot;  authIdentity=&quot;{USERNAME}&quot;  debug=true  useSSL=false;};Search allowed only for a technical usersIn this example, the user name is john.smith:BonitaAuthentication-1 {  com.sun.security.auth.module.LdapLoginModule sufficient  userProvider=&quot;ldap://localhost:389/CN=Users,DC=MyDomain,DC=com&quot;  userFilter=&quot;(&amp;amp;(objectClass=user)(userPrincipalName={USERNAME}@mydomain.com))&quot;  tryFirstPass=true  java.naming.security.principal=&quot;technical.user@mydomain.com&quot;  java.naming.security.credentials=&quot;technical_user_password&quot;  debug=true  useSSL=false;};Other LDAP serversBuild the user DN using the user nameBonitaAuthentication-1 {  com.sun.security.auth.module.LdapLoginModule sufficient  userProvider=&quot;ldap://localhost:389&quot;  authIdentity=&quot;uid={USERNAME},ou=grenoble,dc=example,dc=com&quot;  debug=true  useSSL=false;};Known limitationsThe Active Directory configuration has been tested in single domain configuration. If you a running with multiple domains it’s likely that the user will have to type a username including domain name when logging in.TroubleshootingIf necessary, you can enable JAAS debug mode by editing your configuration file and adding the following line: debug=trueOn Active Directory, a common error code is:LDAP: error code 49 - 80090308: LdapErr: DSID-0C0903A9, comment: AcceptSecurityContext error, data 52e, v1db1.This error code can have several root causes:  The user doesn’t exist in AD: in the JAAS configuration, verify the user filter and validate it using a tool such asApache Directory Studio.  The username doesn’t include the domain name: in the JAAS configuration, make sure that the authIdentity valueincludes the domain name.  The user password provided is not correct.",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/security-and-authentication/active-directory-or-ldap-authentication",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-security-and-authentication-csrf-security": {
      "title": "CSRF security",
      "content"     : "CSRF securityThis page explains how Bonita REST API is secured against Cross-Site Request Forgery (CSRF) attacks.CSRF (also known as XSRF and Sea-Surf), is an example of a malicious attack on a trusted website.While the user is authenticated, by being logged on to a trusted website, malicious requests are transmitted without the user knowing, or giving their consent. For example, by clicking on a link, the user is tricked into performing actions using their ID and privileges, such as giving personal information, bank details, making purchases or payments.If the targeted end user is an administrator, the entire web application can be compromised.Default security setup in BonitaHow it worksIs there an impact on REST API calls?How do I disable it?How to secure the X-Bonita-API-Token cookie (HTTPS only)?How to Migrate your pages to 7.4.0 or greater when CSRF security is enabledDefault security setup in BonitaIn Bonita, since version 7.4.0, the CSRF protection is enabled by default.How it worksTo prevent malicious attacks a token is generated server-side when logging in and added to the HTTP session (server-side as well).A cookie named X-Bonita-API-Token is created (hence, client-side) with the value of the token if the login is successful.Then for all subsequent REST API calls this token is added to the HTTP request headers.For each call, the server is checked to verify that the value in the Header is equal to the value stocked in the HTTP session. If so, the request proceed. Otherwise, this is considered to be an unauthorized access. (HTTP Status 401).In addition of the cookie, it is also possible to retrieve the token by performing a call to the resource /API/system/session/unusedId. The token is then returned in the headers of the HTTP response.An attacker cannot retrieve the value of the token unless they can inject some JavaScript (which has been mitigated thanks to our SecurityFilter), to make a call to the resource /API/system/session/unusedId,get the header X-Bonita-API-Token, and create their own requests.Is there an impact on REST API calls?If you are using Bonita Portal there is no impact.If you have developed an external application or some custom pages using the REST API to communicate with bonita, you need to send the X-Bonita-API-Token header in all requests other that GET. There are 2 ways of doing this:  Using the X-Bonita-API-Token cookie:  Retrieve the X-Bonita-API-Token cookie value (you can retrieve it once and store it in a variable if you don’t want to read the cookie each time you perform a call).  In each API request, add a header named X-Bonita-API-Token whose value is the token.Using the session API resource  Send an initial request to the session API resource (/API/system/session/unusedId).  Retrieve the X-Bonita-API-Token from the response header and store it.  In all future API requests, add a header named X-Bonita-API-Token containing the stored token.  The X-Bonita-API-Token is valid for the whole client session.How do I disable it?Disabling the CSRF protection is not recommended as it will makes Bonita REST API unprotected from malicious attacks.But if you need to, the deactivation of the CSRF protection can be done in the file security-config.properties for the whole platform.The default version of this file is located in setup/platform_conf/initial/platform_portal. In order to change the configuration on an installation whose platform has already been initialized, use the platform setup tool to retrieve the current configuration and update the file in setup/platform_conf/current/platform_portal. Then use the tool again to save your changes into to the database.When CSRF protection is enables, this file contains this line: `security.csrf.enabled true`To disable the CSRF protection, edit the configuration file and change the security.csrf.enabled  value to false.How to secure the X-Bonita-API-Token cookie (HTTPS only)?You can set the secure flag on the X-Bonita-API-Token cookie to make sure the browser will only transmit the cookie if the page is HTTPS.Activating the addition of the secure flag can be done in the file security-config.properties for the whole platform.The default version of this file is located in setup/platform_conf/initial/platform_portal. In order to change the configuration on an installation whose platform has already been initialized, use the platform setup tool to retrieve the current configuration and update the file in setup/platform_conf/current/platform_portal. Then use the tool again to save your changes into to the database.When the secure flag is not active, this file contains this line: `security.csrf.cookie.secure false`To activate the addition of the secure flag, edit the configuration file and change the security.csrf.cookie.secure  value to true.User authentication overviewRead more about CSRF attacksHow to Migrate your pages to 7.4.0 or greater when CSRF security is enabledTo use a UI page or form that was created in lower version than 7.4, you need to re-import this old page in actual UI designer. If you don’t update your page, any API call in your outdated version will be failed because X-Bonita-API-Token will be absent in the response header. Follow this few steps to update your page or form:In UI designer:1) Import the page from 7.3.X or lower version.1) Export the page you previously imported.In the portal as Administrator:1) Go on Resources entry.1) Edit the existing page by uploading the new one.",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/security-and-authentication/csrf-security",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-security-and-authentication-enable-cors-in-tomcat-bundle": {
      "title": "Enable CORS in Tomcat bundle",
      "content"     : "Enable CORS in Tomcat bundleIf you try to call the REST API from a page hosted on another domain than the one of the tomcat bundle,you will face some issues due to the ‘same-origin policy’ enforced by web browsers.For instance you may see in your browser a message such as:  Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at XXX.This can be fixed by moving the resource to the same domain or enabling CORS.By configuring the CORS filter on the tomcat bundle, you will be able to access the Bonita REST API from a page hosted on a different domain from the one of the tomcat bundle.Tomcat configurationHTML Example test pageTomcat configurationEdit the web.xml of the bonita.war to add the CORS filter:&amp;lt;filter&amp;gt;  &amp;lt;filter-name&amp;gt;CorsFilter&amp;lt;/filter-name&amp;gt;  &amp;lt;filter-class&amp;gt;org.apache.catalina.filters.CorsFilter&amp;lt;/filter-class&amp;gt;  &amp;lt;init-param&amp;gt;&amp;lt;param-name&amp;gt;cors.allowed.origins&amp;lt;/param-name&amp;gt;&amp;lt;param-value&amp;gt;*&amp;lt;/param-value&amp;gt;  &amp;lt;/init-param&amp;gt;  &amp;lt;init-param&amp;gt;&amp;lt;param-name&amp;gt;cors.allowed.methods&amp;lt;/param-name&amp;gt;   &amp;lt;param-value&amp;gt;GET, HEAD, POST, PUT, DELETE, OPTIONS&amp;lt;/param-value&amp;gt;  &amp;lt;/init-param&amp;gt;  &amp;lt;!-- List of the response headers other than simple response headers that the browser should expose tothe author of the cross-domain request through the XMLHttpRequest.getResponseHeader() method.The CORS filter supplies this information through the Access-Control-Expose-Headers header. --&amp;gt;  &amp;lt;init-param&amp;gt;  &amp;lt;param-name&amp;gt;cors.exposed.headers&amp;lt;/param-name&amp;gt;  &amp;lt;param-value&amp;gt;Access-Control-Allow-Origin,Access-Control-Allow-Credentials,X-Bonita-API-Token&amp;lt;/param-value&amp;gt;  &amp;lt;/init-param&amp;gt;  &amp;lt;!-- The names of the supported author request headers. These are advertised through the Access-Control-Allow-Headers header.The CORS Filter implements this by simply echoing the requested value back to the browser.  --&amp;gt;  &amp;lt;init-param&amp;gt;  &amp;lt;param-name&amp;gt;cors.allowed.headers&amp;lt;/param-name&amp;gt;  &amp;lt;param-value&amp;gt;Content-Type,X-Requested-With,accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers,X-Bonita-API-Token&amp;lt;/param-value&amp;gt;  &amp;lt;/init-param&amp;gt;&amp;lt;/filter&amp;gt;...&amp;lt;filter-mapping&amp;gt;  &amp;lt;filter-name&amp;gt;CorsFilter&amp;lt;/filter-name&amp;gt;  &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;&amp;lt;/filter-mapping&amp;gt;Important Note 1: The filter must be inserted in the file webapps/bonita/WEB-INF/web.xml (not in the Tomcat conf/web.xml)Important Note 2: It must be the first filter, inserted right after the &amp;lt;/error-page&amp;gt; tagfor more information:https://tomcat.apache.org/tomcat-8.5-doc/config/filter.html#CORS_FilterHTML Example test pageHere is an example of html page that:  logs in using the loginservice,  get the current session, via the REST api resource system/session  edit a user using the REST api resource identity/userThis page can be hosted on a different domain, and thanks to the CORS filter, the requests will be successfully processed.Important Note 1: this example works on a bundle where the CSRF security filter is activated. As the header “X-Bonita-API-Token” is set with the “session apiToken”.Important Note 2: to use this page you will need to replace the BONITA_ACCESS_URL by your own tomcat bundle URL.&amp;lt;!doctype html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt; &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt; &amp;lt;title&amp;gt;Demo&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;CORS INDEX&amp;lt;/h1&amp;gt; &amp;lt;script src=&quot;http://code.jquery.com/jquery-2.1.4.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;   var formData = { username: &quot;walter.bates&quot;, password: &quot;bpm&quot;, redirect: false   };   $.ajax({ url: &quot;BONITA_ACCESS_URL/bonita/loginservice&quot;, type: &quot;POST&quot;, data: formData, xhrFields: {withCredentials: true}, success: function(data, textStatus, jqXHR) {   $.ajax({ url: &quot;BONITA_ACCESS_URL/bonita/API/system/session/1&quot;, type: &quot;GET&quot;, xhrFields: {withCredentials: true}, success: function(data, textStatus, jqXHR) {   console.log(&#39;success getting session&#39;);   var apiToken = jqXHR.getResponseHeader(&#39;X-Bonita-API-Token&#39;);   console.log(&#39;X-Bonita-API-Token: &#39; + apiToken);   var formData = {&quot;title&quot;:&quot;Mr&quot;,&quot;manager_id&quot;:&quot;0&quot;,&quot;job_title&quot;:&quot;Chief Executive Officer&quot;,&quot;lastname&quot;:&quot;Jobs&quot;,&quot;firstname&quot;:&quot;Will&quot;};   $.ajax({ url: &quot;BONITA_ACCESS_URL/bonita/API/identity/user/1&quot;, type: &quot;PUT&quot;, contentType: &quot;application/json&quot;, /*passing the X-Bonita-API-Token for the CSRF security filter*/ headers: {&#39;X-Bonita-API-Token&#39;: apiToken}, data: JSON.stringify(formData), xhrFields: {withCredentials: true}, success: function(data, textStatus, jqXHR) {   console.log(&#39;success updating user info&#39;);   console.log(data); }, error: function(jqXHR, textStatus, errorThrown) {   console.log(&#39;error updating user info&#39;); }   }); }, error: function(jqXHR, textStatus, errorThrown) {   console.log(&#39;error getting session&#39;); }   }); }, error: function(jqXHR, textStatus, errorThrown) {   console.log(&#39;error login&#39;); }   }); &amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/security-and-authentication/enable-cors-in-tomcat-bundle",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-security-and-authentication-enforce-password-policy": {
      "title": "Enforce password policy",
      "content"     : "Enforce password policyNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.OverviewHow to create a custom password policyHow to create a Java class containing your own password validation characteristicsOverviewBy default, no password policy is set for users of Bonita. It is therefore highly recommended to set a policy to protect your data.There are three options:  Leave the default setting as is: “non-protected”.  Apply our ready-to-use policy to a tenant. This requires a password to contain the following:  at least 10 characters long  at least 2 special characters  at least 2 upper case characters  at least 2 lower case characters  at least 3 digits  To apply this policy edit security-config.properties and change DefaultPasswordValidator to RobustnessPasswordValidator.  Create a custom password policy by following the tutorial below.How to create a custom password policyThis will enable the System administrator to create a custom class and define the characteristics for a particular password policy.It will be applied to all users.PrerequisitesYou should have Maven installed to create a project.Import Toolkitview into your workspace.How to create a Java class containing your own password validation characteristicsHere are the steps to add a custom password validator:  Open Maven, and create a new Maven Project. This will create a pom.xml  Add a new dependency in your pom.xml to get toolkit-view (x.y.z is the Bonita version number).```xmlorg.bonitasoft.console  console-common  x.y.z`&amp;lt;div class=&quot;alert alert-warning&quot;&amp;gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Note:&amp;lt;/strong&amp;gt; As this artifact is not available in public repositories, youhave to follow this given procedure (example given for the x.y.z version):&amp;lt;/p&amp;gt;&amp;lt;ul&amp;gt;  &amp;lt;li&amp;gt;retrieve the console-common-x.y.z.jar from a Bonita distribution or liveinstance (in the bonita.war or in the explosed war)&amp;lt;/li&amp;gt;  &amp;lt;li&amp;gt;retrieve poms from the github repository&amp;lt;ul&amp;gt;  &amp;lt;li&amp;gt;bonita-console: https://github.com/bonitasoft/bonita-web/blob/x.y.z/pom.xml&amp;lt;/li&amp;gt;  &amp;lt;li&amp;gt;console-common: https://github.com/bonitasoft/bonita-web/blob/x.y.z/common/pom.xml&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;  &amp;lt;/li&amp;gt;  &amp;lt;li&amp;gt;manually put the jars and pom in your local repository or deploy theminto your repository manager&amp;lt;ul&amp;gt;  &amp;lt;li&amp;gt;bonita-console pom.xml file in &amp;lt;M2_REPO&amp;gt;/org/bonitasoft/console/bonita-console/x.y.z&amp;lt;/M2_REPO&amp;gt;&amp;lt;/li&amp;gt;  &amp;lt;li&amp;gt;console-common pom.xml and jar files in &amp;lt;M2_REPO&amp;gt;/org/bonitasoft/console/console-common/x.y.z&amp;lt;/M2_REPO&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;  &amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;3. Create your class, eg. `PasswordLengthValidator` with a name for the package, eg. `org.bonitasoft.ext.password.validator`.```javapackage org.bonitasoft.ext.password.validator;import static org.bonitasoft.web.toolkit.client.common.i18n.AbstractI18n._;import org.bonitasoft.web.toolkit.client.common.i18n.AbstractI18n;import org.bonitasoft.web.toolkit.client.common.i18n.AbstractI18n.LOCALE;import org.bonitasoft.web.toolkit.client.data.item.attribute.validator.AbstractStringValidator;/** * @author John Doe */public class PasswordLengthValidator extends AbstractStringValidator {@Overrideprotected void _check(String password) {LOCALE Locale = AbstractI18n.stringToLocale(locale);// Check number of lengthint minimalLength = 10;if (password.length() &amp;lt; minimalLength) {addError(_(&quot;Password is not long enough&quot;, Locale));}}}  Then, you can build your project. In command-line and type mvn package  Go in the target/ folder and you have your JAR archive, eg. password-validator-0.0.1-SNAPSHOT.jar  Take a bundle and start it once. This will extract the bonita.war.  Start it by typing: cd binthen ./catalina.sh run  Copy your JAR archive in the folder webapps/bonita/WEB-INF/lib  Modify all security-config.properties files to add your new password validator. e.g.# content of the filesecurity.password.validator org.bonitasoft.ext.password.validator.PasswordLengthValidatorStart your bundle againcd bin and then ./catalina.sh run  Create a new user and check that your password policy has been set. To check that the validation is correct, you can type a password to force an error. An exception will be displayed listing all the non-filled criteria.If the password complies with the criteria in the new password policy, no exception error message will be displayed.",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/security-and-authentication/enforce-password-policy",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-security-and-authentication-rest-api-authorization": {
      "title": "REST API authorization",
      "content"     : "REST API authorizationThe Bonita Portal, or any application that uses the Web REST API, enables user to access resources.The set of resources that a user can access is determined by default by the user’s profile.This authorization mechanism ensures that users can only access the appropriate resources.This means, for example, that a user with only the User profile cannot perform actions intended for the Administrator.The authorization mechanism is a “white list” implementation.It has two phases,a dynamic phase, which uses a script to grant or deny authorization,and a static phase, which checks in the static configuration to see whether the user is authorized to access a given resource.The static configuration is fixed when the application server is started.To access a given resource, a user must have a certain permission.These permissions are defined as simple permissions, which are the smallest units of permission, or compound permissions, which are groups of simple permissions.A user is granted set of permissions. These permissions define the set of resources the user is authorized to access.SummaryStatic authorization checkingDynamic authorization checkingCasePermissionRuleInitializationUser loginRuntime behaviorAuthorizing access to a custom pageAuthorization and custom profilesGranting permissions to a given resourceRestricting access to a BDM object or its attributesActivating and deactivating authorizationPermissions and resourcesSummaryFor a new Bonita installation, a basic set of authorization checks is activated by default but you might also want to deactivate the HTTP API.Here are the key points of the authorizations configuration :  The static checks (activated by default on a fresh installation) create an authorization layer that exactly matches the standard Bonita Portal features and profiles.If you are using the standard Portal, you do not need to configure anything.  If you want to add extra authorization restrictions based on business rules, turn on the dynamic checks that you want.The configuration file defines standard rules for the most frequent cases, so all you need to do is uncomment the rules you want to apply.  If you add a custom page, include a resources=[ list ] in your page.properties to specify which resources your custom page requires the users to have access to.  If the previous points do not meet your security needs, you can still manually customize the configuration and rules as much as you want.If you have migrated your platform from a version of Bonita earlier than 6.4.0, security is deactivated by default.You need to add authorization to your custom pages before you activate authorization.Static authorization checkingThe static phase uses a set of configuration files:  resources-permissions-mapping-*.properties  compound-permissions-mapping-*.properties  custom-permissions-mapping.propertiesThese files grant permissions to sets of users based on profile or user name.You cannot remove permissions in a configuration file, so you must ensure that the default definitions grant the minimum permissions that you want to give to any user.The default versions of these files are located in setup/platform_conf/initial/tenant_template_portal.In order to change the configuration on an installation whose platform has already been initialized, use the platform setup tool toretrieve the current configuration and update the files in setup/platform_conf/current/tenants/[tenantId]/tenant_portal.Then use the tool again to save your changes into the database.Resources permissions mappingThe resources-permissions-mapping-*.properties files define the mapping of REST resources to simple permissions.This tells you what permission is needed to access a given resource.For example: GET|identity/user=[organization_visualization,organization_management]This specifies that a user with the organization_visualization, or organization_management permissions can see information about users.By default, this file contains a mapping of each Bonita resources to at least one simple permission.You can modify the file resources-permissions-mapping-custom.properties to add your own mappings.For example: GET|identity/user/3=[organization_management]This specifies that information about the user with id 3 can only be seen by users with the Organization_management permission.If there are conflicts between permissions, the more restrictive definition overrides the more general.You can see this in the example above, where the specific permission for user 3 overrides the general permission for seeing user information.Do not modify file resources-permissions-mapping.properties directly, as it is reserved for default values.Custom values should be added manually in file resources-permissions-mapping--custom.propertiesCompound permissions mappingThe compound-permissions-mapping-*.properties files define sets of simple permissions that are grouped together into a compound permission.You can use a compound permission as “shorthand” for a list of simple permissions.By default, the file resources-permissions-mapping.properties contains a compound permission that corresponds to each page of the Bonita Portal,including custom pages.For example: userlistingadmin=[profile_visualization, process_comment, organization_visualization, tenant_platform_visualization, organization_management]This specifies the REST API permissions that are granted with the Bonita Portal Administrator page that lists all the users in the tenant.By default, there is a compound permission defined for each page in the standard Bonita Portal and there is also one for each provided custom page.When you install a custom page in the portal, if the page declares its resources properly, then a new compound permission will be added in an internal versionof this file (compound-permissions-mapping-internal.properties). Then all the users being able to access this page (because it is part of a custom profile orLiving Application they have access to) will also be automatically granted the necessary permissions to call the required REST API resources.Do not modify file compound-permissions-mapping.properties directly, as it is reserved for default values.Custom values should be added manually in file compound-permissions-mapping-custom.propertiesCustom permissions mappingThe custom-permissions-mapping.properties file contains custom rules that supplement the resource permissions and compound permissions.By default, this file is empty, because the compound permissions definitions automatically manage the permissions needed for default and custom profiles, and for default and custom pages.If you want to override the default behavior, you can add a rule to this file. You can add a simple or compound permission to a profile.For example, to give users with the User profile the ability to manage the Bonita Portal look &amp;amp; feel: profile|User=[look_and_feel]You can also assign a permission to a specific user. This is useful if you want to give a named user access to a resource that is not accessible through the user’s profiles.For example, if the user John.Smith is assigned the User profile, he does not have permission to manage the portal Look &amp;amp; Feel.You can add this specific permission to custom-permissions-mapping.properties by adding this line: user|John.Smith=[look_and_feel]This means that in addition to the permissions given to him by the User profile, John.Smith can also manage the Portal Look &amp;amp; Feel. It does not modify the permissions for any other user.If you do not use Bonita Portal but still want to manage REST API authorizations, you can do this using the custom-permissions-mapping.properties file.To do this, create a custom profile and configure the relevant permissions.For example, you could create a profile called CustomProcessManager and assign the permissions needed to monitor and manage processes:profile|MyCustomProfile=[process_visualization, process_management, process_manager_management, custom_process_manager_permission]In this example, the custom_process_manager_permission can be defined in the compound-permissions-mapping-custom.properties file.Dynamic authorization checkingIf the static authorization checks are not suitable for your applications, you can override the rules as you want using dynamic checks.A user is then granted a permission only if the dynamic check authorizes it.A dynamic check is implemented as sequence of conditions, including a Groovy script.This enables you to tailor the permissions needed to access a resource using dynamic information related to processes.A dynamic authorization check for a resource is specified by a line in the file dynamic-permissions-checks-custom.properties.The line specifies the checks to be made for a request type for a method.There can be several terms in the line. Checking stops when the system returns success, indicating that the user is authorized.For example: POST|bpm/case=[user|william.jobs, user|walter.bates, profile|Administrator, profile|User, check|org.bonitasoft.permissions.CasePermissionRule]This specifies that a POST action can be done for a case resource if the user is william.jobs or walter.bates,or any user with the Administrator profile, or any user with the User profile, or if the CasePermissionRule grants authorization.A check term indicates the name of a class to be called. The class must implement org.bonitasoft.engine.api.permission.PermissionRule.This example defines a dynamic check that is made whenever a user makes a GET request for the “bpm/case” resource.If the script returns true, the user is authorized. If the script returns false or any other result (including an error), the user is not authorized.The dynamic-permissions-checks.properties file contains a placeholder line for each method and resource. For example:## CasePermissionRule{:#casepermissionrule}#GET|bpm/case=[profile|Administrator, check|org.bonitasoft.permissions.CasePermissionRule]#POST|bpm/case=[profile|Administrator, check|org.bonitasoft.permissions.CasePermissionRule]#DELETE|bpm/case=[profile|Administrator, check|org.bonitasoft.permissions.CasePermissionRule]#GET|bpm/archivedCase=[profile|Administrator, check|org.bonitasoft.permissions.CasePermissionRule]To specify a dynamic check for a method and resource, uncomment the line in the file dynamic-permissions-checks-custom.properties and add the conditions.If you specify a condition that calls a Groovy script, you must add the new script:If the platform has never been started yet:  add the script to the setup/platform_conf/initial/tenant_template_security_scripts folder  it will be pushed to database at first runIf the platform has already been started:  use the platform setup tool to retrieve the current configuration  add the script to the setup/platform_conf/current/tenants/[tenantId]/tenant_security_scripts folder  then use the platform setup tool again to push the new / modified scripts to databaseThe tenant_security_scripts folder contains a script sample that can be used to write your own.Bonita also provides default scripts that should fit common usages. They are packages internally in the binaries, but thesource code is available.These provided scripts can be used as a base for you own scripts.If you write your own scripts:  make sure you either inherit from an existing rule, or implement the PermissionRule interface, by overriding the isAllowed() method  make sure you use the default package declaration at the top of your groovy class (no package keyword used)  make sure this .groovy file is placed in the default directory, under ‘initial/tenant_template_security_scripts/’ if the platform has never been started,or under ‘current/tenants/TENANT_ID/tenant_security_scripts/’ if the platform has already been startedDo not modify file dynamic-permissions-checks.properties directly, as it is reserved for examples, and may be overwritten during migration to a newer version.Custom values should be added manually in file dynamic-permissions-checks-custom.propertiesExample dynamic check scriptThis script is an example of how to write a dynamic check. It checks two conditions, depending on the method called for a case.If the method is a POST, which would start a case of a process. the user can only start the case if they are eligible to start the process itself.If the user action triggers a GET, the user can view the case information only if they are involved in the case.The Engine API Java method isInvolvedInProcessInstance is used to check whether the user is involved. For an archived case, the only check possible is whether the user started the case.import org.bonitasoft.engine.api.*import org.bonitasoft.engine.api.permission.APICallContextimport org.bonitasoft.engine.api.permission.PermissionRuleimport org.bonitasoft.engine.bpm.process.ArchivedProcessInstanceNotFoundExceptionimport org.bonitasoft.engine.identity.Userimport org.bonitasoft.engine.identity.UserSearchDescriptorimport org.bonitasoft.engine.search.SearchOptionsBuilderimport org.bonitasoft.engine.search.SearchResultimport org.bonitasoft.engine.session.APISessionimport org.json.JSONObjectclass CasePermissionRule implements PermissionRule {@Overrideboolean isAllowed(APISession apiSession, APICallContext apiCallContext, APIAccessor apiAccessor, Logger logger) {long currentUserId = apiSession.getUserId()if (&quot;GET&quot;.equals(apiCallContext.getMethod())) {return checkGetMethod(apiCallContext, apiAccessor, currentUserId, logger)} else if (&quot;POST&quot;.equals(apiCallContext.getMethod())) {return checkPostMethod(apiCallContext, apiAccessor, currentUserId, logger)}return false}private boolean checkPostMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {def body = apiCallContext.getBodyAsJSON()def processDefinitionId = body.optLong(&quot;processDefinitionId&quot;)if (processDefinitionId &amp;lt;= 0) {return false;}def processAPI = apiAccessor.getProcessAPI()def identityAPI = apiAccessor.getIdentityAPI()User user = identityAPI.getUser(currentUserId)SearchOptionsBuilder searchOptionBuilder = new SearchOptionsBuilder(0, 10)searchOptionBuilder.filter(UserSearchDescriptor.USER_NAME, user.getUserName())SearchResult&amp;lt;User&amp;gt; listUsers = processAPI.searchUsersWhoCanStartProcessDefinition(processDefinitionId, searchOptionBuilder.done())logger.debug(&quot;RuleCase : nb Result [&quot; + listUsers.getCount() + &quot;] ?&quot;)def canStart = listUsers.getCount() == 1logger.debug(&quot;RuleCase : User allowed to start? &quot; + canStart)return canStart}private boolean checkGetMethod(APICallContext apiCallContext, APIAccessor apiAccessor, long currentUserId, Logger logger) {def processAPI = apiAccessor.getProcessAPI()def filters = apiCallContext.getFilters()if (apiCallContext.getResourceId() != null) {def processInstanceId = Long.valueOf(apiCallContext.getResourceId())if (apiCallContext.getResourceName().startsWith(&quot;archived&quot;)) {//no way to check that the were involved in an archived case, can just show started bytry {return processAPI.getArchivedProcessInstance(processInstanceId).getStartedBy() == currentUserId} catch(ArchivedProcessInstanceNotFoundException e) {logger.debug(&quot;archived process not found, &quot;+e.getMessage())return false}} else {def isInvolved = processAPI.isInvolvedInProcessInstance(currentUserId, processInstanceId)logger.debug(&quot;RuleCase : allowed because get on process that user is involved in&quot;)return isInvolved}} else {def stringUserId = String.valueOf(currentUserId)if (stringUserId.equals(filters.get(&quot;started_by&quot;)) || stringUserId.equals(filters.get(&quot;user_id&quot;)) || stringUserId.equals(filters.get(&quot;supervisor_id&quot;))) {logger.debug(&quot;RuleCase : allowed because searching filters contains user id&quot;)return true}}return false}}InitializationAfter the application server starts, the first time that one of the configuration files is accessed, the information from all the files is cached in memory for fast access.If you update a file, the changes become active the next time the application server restarts.In your development environment, you can use the debug mode to makes any changes to the configuration filesand dynamic check scripts available immediately.User loginWhen a user logs in, after the user is authenticated, a map of LoggedUserPermissions is created.LoggedUserPermissions is a combination of the information from compound-permissions-mapping.properties andCustomUserPermissionsMapping that is relevant to the user.It takes into account all the profiles assigned to the user, not only the current profile, so when you change profile the map does not need to be recreated.Runtime behaviorAt runtime, when a user requests access to a resource, the system checks to see if a dynamic check is defined for this resource. If so, it executes the check, and the result grants or denies the user access to the resource.If there is no dynamic check for the resource, the system uses the static checks: it uses the information in the ResourceRequiredPermissions to see what permissions areneeded to access the resource (or page), and checks the LoggedUserPermissions to see whether the user has the necessary permissions.If so, the user is authorized.Otherwise, access is refused.If access is not authorized, a message is written in the log so that the Administrator is aware that an unauthorized user has tried to gain access.Note that this level of logging is only available if you set the logging level to FINEST.Authorizing access to a custom pageWhen a new custom page is added, the permissions defined in the page properties are added to the permissions configuration files and the cache.It is not necessary to restart the applications server to activate security for the new custom page.Depending on the permissions that a user of the page already has, it might be necessary to log out and log in again to get access to the new custom page.If the page declares resources provided by a REST API extension (link to the REST API extention page), then the REST API extension must be deployed before the page,otherwise the compound permissions won’t be automatically created when deploying the page.Authorization and custom profilesWhen a new custom profile is created, the permissions mappings are updated in the configuration files and in the cache.It is not necessary to restart the application server to activate security for the new custom profile.Granting permissions to a given resourceIf you only develop custom pages and you declare the resources they use properly, you should never have to create custom permissions.However, you may need to do so if you need to manually grant permissions to a given REST API resource (so that it can be called programatically for example). In order to do that, you need to:  Look into the file resources-permissions-mapping.properties for the permissions that grant access to the resource.For example, in order to perform a GET on bpm/task, I can see that I need the permission flownode_visualization (syntax: GET|bpm/task=[flownode_visualization])  Edit the file custom-permissions-mapping.properties to give the permission flownode_visualization to the required profiles or users.For example, to add the permission to the user walter.bates (username), add the following line : user|walter.bates=[flownode_visualization]Restricting access to a BDM object or its attributesStarting with the Bonita efficiency subscription edition, you can use a simpler mechanism to grant or deny access to BDM objects or some of their attributes to specific profiles, using the BDM Access Control feature.It is also possible to protect instances of the BDM objects, using REST API authorizations.For more details see : BDM access controlActivating and deactivating authorizationsecurity-config.properties contains a Boolean property that specifies whether authorization is activated. To activate authorization, set this property to true: security.rest.api.authorizations.check.enabled trueTo activate authorization, edit security-config.properties and set the value of the security.rest.api.authorizations.check.enabled property to true, then restart the application server.To deactivate authorization, set the property to false, then restart the application server.If you activate authorization, you must also deactivate the HTTP API, so that is cannot be used to bypass the authorization settings.To do this, you can either filter the HTTP API in the Tomcat configuration (that is, accept only specific IP addresses), or you candeactivate the HttpAPIServlet. To deactivate the servlet, go to the webapps/bonita/WEB-INF folder of your web server,edit web.xml and comment out the following definitions:&amp;lt;!-- For engine HTTP API --&amp;gt;&amp;lt;!--&amp;lt;servlet&amp;gt;&amp;lt;servlet-name&amp;gt;HttpAPIServlet&amp;lt;/servlet-name&amp;gt;&amp;lt;servlet-class&amp;gt;org.bonitasoft.engine.api.internal.servlet.HttpAPIServlet&amp;lt;/servlet-class&amp;gt;&amp;lt;/servlet&amp;gt;--&amp;gt;&amp;lt;!-- &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;HttpAPIServlet&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;/serverAPI/*&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt; --&amp;gt;Running in debug modeIf debug mode is activated, whenever you update a configuration file or a dynamic check script, the changes take effect immediately.To activate debug mode, edit security-config.properties and set the value of the security.rest.api.authorizations.check.debug property to true, then restart the application server.To deactivate authorization, set the property to false, then restart the application server. Debug mode should be deactivated in production, so as not to impact performance.MigrationWhen you migrate from a version earlier than 6.4.0, authorization is configured to be off (security.rest.api.authorizations.check.enabled is set to false).If you have an existing custom page and want to activate authorization, you need to add permissions to the definition of the custom page.To add authorization to an existing custom page:  Export the custom page.  Update the page properties with permissions.  Activate authorization, by editing security-config.properties and setting the value of the security.rest.api.authorizations.check.enabled property to true.  Restart the application server.  Import the custom page.If you have an existing custom profile, the permissions relating to the profiles is automatically added to the permissions files, so you do not need to update the profile.However, if a custom profile use a custom page, you must update the custom page definition to add permissions before you activate authorization.Permissions and resourcesThe table below shows the default permissions and the resources to which they grant access.| Permission | Resources||:-|:-|| activity_visualization | [GET|bpm/processResolutionProblem]| | application_management | [POST|living/application, PUT|living/application, DELETE|living/application, POST|living/application-page, PUT|living/application-page, DELETE|living/application-page, POST|living/application-menu, PUT|living/application-menu, DELETE|living/application-menu]| | application_visualization | [GET|living/application, GET|living/application-page, GET|living/application-menu]| | bdm_management | [POST|tenant/bdm]| | bdm_visualization | [GET|bdm/businessData, GET|bdm/businessDataReference]| | bpm_monitoring_management | [POST|monitoring/report, DELETE|monitoring/report]| | bpm_monitoring_visualization | [GET|monitoring/report]| | case_delete | [DELETE|bpm/case, DELETE|bpm/archivedCase]| | case_management | [POST|bpm/case, PUT|bpm/caseVariable, PUT|bpm/caseDocument, POST|bpm/caseDocument, DELETE|bpm/caseDocument, DELETE|bpm/archivedCaseDocument]| | case_start | [PUT|bpm/process, POST|bpm/case]| | case_start_for | [PUT|bpm/process]| | case_visualization | [GET|bpm/case, GET|bpm/archivedCase, GET|bpm/caseVariable, GET|bpm/caseDocument, GET|bpm/archviedCaseDocument]| | command_management | [POST|bpm/command, PUT|bpm/command, DELETE|bpm/command]| | command_visualization | [GET|bpm/command]| | connector_management | [PUT|bpm/process, PUT|bpm/processConnector, PUT|bpm/connectorInstance]| | connector_visualization | [GET|bpm/process, GET|bpm/processConnector, GET|bpm/processConnectorDependency, GET|bpm/connectorInstance, GET|bpm/archivedConnectorInstance, GET|bpm/connectorFailure]| | demo_permission (since 7.0.0) | [GET|extension/demo/getExample, GET|extension/demo/headerExample, GET|extension/demo/logExample, GET|extension/demo/soapExample, GET|extension/demo/xmlExample, POST|extension/demo/postExample]| | document_management | [PUT|bpm/caseDocument, POST|bpm/caseDocument, DELETE|bpm/caseDocument, PUT|bpm/archivedCaseDocument, POST|bpm/archivedCaseDocument, DELETE|bpm/archivedCaseDocument, POST|bpm/document, PUT|bpm/document, DELETE|bpm/document]| | document_visualization | [GET|bpm/caseDocument, GET|bpm/document, GET|bpm/archiveddocument, GET|bpm/archivedCaseDocument]| | flownode_management | [PUT|bpm/flowNode, PUT|bpm/activity, PUT|bpm/task, PUT|bpm/timerEventTrigger]| | flownode_visualization | [GET|bpm/processResolutionProblem, GET|bpm/flowNode, GET|bpm/activity, GET|bpm/task, GET|bpm/activityVariable, GET|bpm/archivedFlowNode, GET|bpm/archivedActivity, GET|bpm/archivedTask, GET|bpm/timerEventTrigger]| | license | [GET|system/license]| | look_and_feel | [POST|portal/theme, PUT|portal/theme, POST|userXP/theme, PUT|userXP/theme]| | organization_management | [POST|identity/user, PUT|identity/user, DELETE|identity/user, POST|identity/personalcontactdata, PUT|identity/personalcontactdata, POST|identity/professionalcontactdata, PUT|identity/professionalcontactdata, POST|identity/role, PUT|identity/role, DELETE|identity/role, POST|identity/group, PUT|identity/group, DELETE|identity/group, POST|identity/membership, PUT|identity/membership, DELETE|identity/membership, POST|customuserinfo/definition, DELETE|customuserinfo/definition, PUT|customuserinfo/value]| | organization_visualization | [GET|identity/user, GET|identity/personalcontactdata, GET|identity/professionalcontactdata, GET|identity/role, GET|identity/group, GET|identity/membership, GET|customuserinfo/user, GET|customuserinfo/definition, GET|customuserinfo/value]| | platform_management (since 7.1.0) | [GET|platform/license]| | process_actor_mapping_management | [PUT|bpm/process]| | process_actor_mapping_visualization | [GET|bpm/process]| | process_categories | [GET|bpm/process, PUT|bpm/process, POST|bpm/processCategory, DELETE|bpm/processCategory, GET|bpm/category, POST|bpm/category, PUT|bpm/category, DELETE|bpm/category]| | process_comment | [GET|bpm/comment, POST|bpm/comment, GET|bpm/archivedComment]| | process_deploy | [POST|bpm/process, DELETE|bpm/process]| | process_management | [PUT|bpm/process, GET|bpm/processConnector, PUT|bpm/processConnector, GET|bpm/processConnectorDependency, POST|bpm/processCategory, DELETE|bpm/processCategory, GET|bpm/processParameter, PUT|bpm/processParameter, POST|bpm/actorMember, PUT|bpm/actorMember, DELETE|bpm/actorMember]| | process_manager_management | [POST|bpm/processSupervisor, DELETE|bpm/processSupervisor, POST|bpm/actorMember, PUT|bpm/actorMember, DELETE|bpm/actorMember]| | process_manager_visualization | [GET|bpm/processSupervisor, GET|bpm/actorMember]| | process_visualization | [GET|bpm/process, GET|bpm/actor, GET|bpm/actorMember, GET|bpm/diagram]| | profile_management | [POST|portal/profile, PUT|portal/profile, DELETE|portal/profile, POST|portal/page, PUT|portal/page, DELETE|portal/page, POST|portal/profileEntry, PUT|portal/profileEntry, DELETE|portal/profileEntry, POST|userXP/profile, PUT|userXP/profile, DELETE|userXP/profile, POST|userXP/profileEntry, PUT|userXP/profileEntry, DELETE|userXP/profileEntry]| | profile_visualization | [GET|portal/profile, GET|portal/bonitaPage, GET|portal/page, GET|portal/profileEntry, GET|userXP/profile, GET|userXP/profileEntry, GET|userXP/bonitaPage]| | profile_member_visualization | [GET|portal/profileMember, GET|userXP/profileMember]| | profile_member_management | [POST|portal/profileMember, DELETE|portal/profileMember, POST|userXP/profileMember, DELETE|userXP/profileMember]| | task_management | [PUT|bpm/humanTask, PUT|bpm/userTask, POST|bpm/hiddenUserTask, DELETE|bpm/hiddenUserTask, POST|bpm/manualTask, PUT|bpm/manualTask]| | task_visualization | [GET|bpm/humanTask, GET|bpm/userTask, GET|bpm/hiddenUserTask, GET|bpm/manualTask, GET|bpm/archivedHumanTask, GET|bpm/archivedUserTask, GET|bpm/archivedManualTask]| | tenant_platform_management | [PUT|system/tenant, POST|platform/platform, PUT|platform/platform, DELETE|platform/platform, POST|platform/tenant, PUT|platform/tenant, DELETE|platform/tenant]| | tenant_platform_visualization | [GET|system/session, GET|system/log, GET|system/tenant, GET|system/feature, GET|system/monitoring, GET|system/i18nlocale, GET|system/i18ntranslation, GET|platform/platform, GET|platform/jvmDynamic, GET|platform/jvmStatic, GET|platform/systemProperty, GET|platform/tenant ]",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/security-and-authentication/rest-api-authorization",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-security-and-authentication-single-sign-on-with-cas": {
      "title": "Single sign-on with CAS",
      "content"     : "Single sign-on with CASNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.This pages explains how to configure your Bonita Platform system to use CAS to provide single sign-on (SSO). It assumes you already have a working CAS service. All Bonita users must be registered in CAS.This information applies to a Bonita platform deployed from a bundle, not to the Engine launched from Bonita Studio.CAS configuration is at tenant level. Each tenant can use a different CAS service.Note: On a system using CAS to manage logins, if a user who is not already logged in tries to access a page in the Portal by clicking on a URL link, they are re-directed to the login page. After logging in, the requested page is not displayed automatically. The user must click the link again.Configure Bonita Engine and WildFly for CASConfigure Bonita Engine and Tomcat for CASTroubleshootConfigure logout behaviourManage passwordsLDAP synchronizer and CASSingle sign-on with CAS using the REST APIConfigure Bonita Engine and WildFly for CASThe deploy bundle contains the files needed to use CAS with Bonita platform and a WildFly 10 application server.They are contained in cas-3.3.1-module.You can use this folder to configure CAS for a platform deployed from the WildFly bundle or from the deploy bundle.The cas-3.3.1-module folder contains some jar files that are required.It also contains a configuration file for the module, module.xml, which defines the jar files to be loaded from the module itself and the dependencies of the module. For example:&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;module xmlns=&quot;urn:jboss:module:1.0&quot; name=&quot;org.jasig.cas&quot;&amp;gt;&amp;lt;resources&amp;gt;&amp;lt;resource-root path=&quot;cas-client-core-3.3.1.jar&quot; /&amp;gt;&amp;lt;resource-root path=&quot;slf4j-api-1.7.1.jar&quot; /&amp;gt;&amp;lt;resource-root path=&quot;slf4j-log4j12-1.7.1.jar&quot; /&amp;gt;&amp;lt;resource-root path=&quot;log4j-1.2.15.jar&quot; /&amp;gt;&amp;lt;/resources&amp;gt;&amp;lt;dependencies&amp;gt;&amp;lt;system&amp;gt;&amp;lt;paths&amp;gt;&amp;lt;path name=&quot;org/xml/sax&quot;/&amp;gt;&amp;lt;path name=&quot;org/xml/sax/helpers&quot;/&amp;gt;&amp;lt;path name=&quot;javax/net/ssl&quot;/&amp;gt;&amp;lt;path name=&quot;javax/xml/parsers&quot;/&amp;gt;&amp;lt;path name=&quot;javax/security/auth/spi&quot;/&amp;gt;&amp;lt;path name=&quot;javax/security/auth/login&quot;/&amp;gt;&amp;lt;path name=&quot;javax/security/auth/callback&quot;/&amp;gt;&amp;lt;path name=&quot;javax/security/auth&quot;/&amp;gt;&amp;lt;/paths&amp;gt;&amp;lt;/system&amp;gt;&amp;lt;/dependencies&amp;gt;&amp;lt;/module&amp;gt;For a standard installation, it is not necessary to modify this file.To configure Bonita Engine for CAS:  If you do not already have it, download the Subscription edition deploy zip from the customer portal.  Add the CAS module. To do this, copy BonitaSubscription-x.x.x-deploy/cas-x.x.x-module/org to WILDFLY_HOME/server/modules to merge the CAS module with the existing modules.  Make the CAS module global so that it can be used by any application. To do this, edit WILDFLY_HOME/setup/wildfly-templates/standalone.xml and change the definition of the ee subsystem to the following: &amp;lt;subsystem xmlns=&quot;urn:jboss:domain:ee:1.0&quot;&amp;gt;&amp;lt;global-modules&amp;gt;&amp;lt;module name=&quot;org.jasig.cas&quot; slot=&quot;main&quot;/&amp;gt; &amp;lt;/global-modules&amp;gt;&amp;lt;/subsystem&amp;gt;  Edit WILDFLY_HOME/setup/wildfly-templates/standalone.xml and add the BonitaAuthentication module. Right after the opening &amp;lt;security-domains&amp;gt; tag, insert these lines (specifying the relevant IP addresses and port numbers):&amp;lt;security-domain name=&quot;BonitaAuthentication-1&quot;&amp;gt;&amp;lt;authentication&amp;gt;&amp;lt;login-module code=&quot;org.jasig.cas.client.jaas.CasLoginModule&quot; flag=&quot;required&quot;&amp;gt;&amp;lt;module-option name=&quot;ticketValidatorClass&quot; value=&quot;org.jasig.cas.client.validation.Cas20ServiceTicketValidator&quot;/&amp;gt;&amp;lt;module-option name=&quot;casServerUrlPrefix&quot; value=&quot;http://cas_ip_address:cas_port/cas&quot;/&amp;gt;&amp;lt;module-option name=&quot;tolerance&quot; value=&quot;20000&quot;/&amp;gt;&amp;lt;module-option name=&quot;service&quot; value=&quot;http://cas_ip_address:cas_port/bonita/loginservice&quot;/&amp;gt;&amp;lt;module-option name=&quot;defaultRoles&quot; value=&quot;admin,operator&quot;/&amp;gt;&amp;lt;module-option name=&quot;roleAttributeNames&quot; value=&quot;memberOf,eduPersonAffiliation&quot;/&amp;gt;&amp;lt;module-option name=&quot;principalGroupName&quot; value=&quot;CallerPrincipal&quot;/&amp;gt;&amp;lt;module-option name=&quot;roleGroupName&quot; value=&quot;Roles&quot;/&amp;gt;&amp;lt;module-option name=&quot;cacheAssertions&quot; value=&quot;true&quot;/&amp;gt;&amp;lt;module-option name=&quot;cacheTimeout&quot; value=&quot;480&quot;/&amp;gt;&amp;lt;/login-module&amp;gt;&amp;lt;/authentication&amp;gt;&amp;lt;/security-domain&amp;gt;Warning: module names must be unique (from the example above, BonitaAuthentication-1 is the module name). Therefore, remove the unecessary ones  In the CasLoginModule configuration, check that the principalGroupName property is set to CallerPrincipal. This is required to retrieve the username from the Bonita application. Bonita uses the CAS LoginModule in the JASIG implementation, so see the CAS LoginModule section of the Jasig documentation for more information.  Update bonita-tenant-sp-custom.properties from setup/platform_conf/initial/tenant_template_engine/ if platform has not been initialized yet or setup/platform_conf/current/tenants/[TENANT_ID]/tenant_engine/ and setup/platform_conf/current/tenant_template_engine/.If the platform has already been initialized, every update to the configuration files under setup/platform_conf/current must be done using the setup tool:  setup pull  edit configuration file(s)  setup push  Remove the comment flags from these lines:authentication.service.ref.name=jaasAuthenticationService  Specify the relevant IP address and port number.  Optionally, to enable anonymous user to access a process, uncomment this lines:authenticator.delegate=casAuthenticatorDelegateauthentication.delegate.cas.server.url.prefix=http://ip_address:portauthentication.delegate.cas.service.url=http://ip_address:port/bonita/loginservice  Configure Bonita Engine and Tomcat for CAS  The CAS implementation relies on JAAS, and is defined in the BonitaAuthentication module of the JAAS configuration file.Set the Java system property java.security.auth.login.config in the Tomcat startup script to point to the JAAS configuration file, TOMCAT_HOME/server/conf/jaas-standard.cfg.For example, on Linux, edit TOMCAT_HOME/setup/tomcat-templates/setenv.sh, uncomment the line that defines SECURITY_OPTS, and insert the variable SECURITY_OPTS in the line CATALINA_OPTS=...The TOMCAT_HOME/server/conf/jaas-standard.cfg file contains the following (replace ip_address:port with the relevant IP addresses and port numbers, in two places):BonitaAuthentication-1 {  org.jasig.cas.client.jaas.CasLoginModule requiredticketValidatorClass=&quot;org.jasig.cas.client.validation.Cas20ServiceTicketValidator&quot;casServerUrlPrefix=&quot;http://ip_address:port/cas&quot;tolerance=&quot;20000&quot;service=&quot;http://ip_address:port/bonita/loginservice&quot;defaultRoles=&quot;admin,operator&quot;roleAttributeNames=&quot;memberOf,eduPersonAffiliation&quot;principalGroupName=&quot;CallerPrincipal&quot;roleGroupName=&quot;Roles&quot;cacheAssertions=&quot;true&quot;cacheTimeout=&quot;480&quot;;};  Warning: module names must be unique (from the example above, BonitaAuthentication-1 is the module name). Therefore, remove the unecessary onesThe JAAS configuration file, jaas-standard.cfg, is sorted by sets of authentication modules. For Bonita, each set matches a tenant configuration and the name is prefixed with BonitaAuthentication-&amp;lt;tenant-id&amp;gt;. Make sure there is a set of authentication modules for each tenant in your platform. For each tenant, set the CAS service to point to the application login page and set casServerUrlPrefix to point to the CAS server.  In the CasLoginModule configuration, check that the principalGroupName property is set to CallerPrincipal.This is required to retrieve the username from the Bonita application.Bonita uses the CAS LoginModule in the JASIG implementation, so see the CAS LoginModule section of the Jasig documentation for more information.  Copy cas-client-core-x.x.x.jar from BonitaSubscription-x.x.x-deploy/cas-x.x.x-module/org/jasig/cas/main into the TOMCAT_HOME/server/lib directory.  Copy commons-logging-x.x.x.jar from BonitaSubscription-x.x.x-deploy/BonitaSubscription-x.x.x-LDAP-Synchronizer/BonitaSubscription-x.x.x-LDAP-Synchronizer/lib into the TOMCAT_HOME/server/lib directory.  Update bonita-tenant-sp-custom.properties from setup/platform_conf/initial/tenant_template_engine/ if platform has not been initialized yet or setup/platform_conf/current/tenants/[TENANT_ID]/tenant_engine/ and setup/platform_conf/current/tenant_template_engine/.If the platform has already been initialized, every update to the configuration files under setup/platform_conf/current must be done using the setup tool:  setup pull  edit configuration file(s)  setup push  Remove the comment flags from these lines:authentication.service.ref.name=jaasAuthenticationService  Optionally, to enable anonymous user to access a process, uncomment this lines:authenticator.delegate=casAuthenticatorDelegateauthentication.delegate.cas.server.url.prefix=http://ip_address:portauthentication.delegate.cas.service.url=http://ip_address:port/bonita/loginserviceSpecify the relevant IP address and port number.  Configure the Bonita Portal for CAS SSO  For each tenant, edit authenticationManager-config.properties to enable the CASRemoteAuthenticationManager and its properties.Edit the authenticationManager-config.properties located in platform_conf/initial/tenant_template_portal for not initialized platform or platform_conf/current/tenant_template_portal and platform_conf/current/tenants/[TENANT_ID]/tenant_portal/.If the platform has already been initialized, every update to the configuration files under setup/platform_conf/current must be done using the setup tool:  setup pull  edit configuration file(s)  setup pushMake sure that auth.AuthenticationManager property is set to org.bonitasoft.console.common.server.auth.impl.jaas.cas.CASRemoteAuthenticationManagerImplUncomment Cas.serverUrlPrefix and Cas.bonitaServiceURL properties as shown below (specify the relevant IP addresses and ports):#auth.AuthenticationManager = org.bonitasoft.console.common.server.auth.impl.standard.StandardAuthenticationManagerImplExt#auth.AuthenticationManager = org.bonitasoft.console.common.server.auth.impl.oauth.OAuthAuthenticationManagerImplExt# OAuth.serviceProvider = LinkedIn# OAuth.consumerKey = ove2vcdjptar# OAuth.consumerSecret = vdaBrCmHvkgJoYz1# OAuth.callbackURL = http://ip_address:port/loginserviceauth.AuthenticationManager = org.bonitasoft.console.common.server.auth.impl.jaas.cas.CASRemoteAuthenticationManagerImplCas.serverUrlPrefix = http://ip_address:port/casCas.bonitaServiceURL = http://ip_address:port/bonita/portal/homepagelogout.link.hidden=trueCAS SSO and Java client applicationTo enable a Java client application to access the engine using CAS autentication, the simplest way is to enable REST authentication on CAS server and have the Java client retrieve the ticket for the bonita service URL.Then, use the LoginAPI with the java.util.Map having the ticket and service.Cluster considerations and bonita webapp for TomcatIf you are configuring Bonita and Tomcat in a cluster environment for CAS, there are some extra steps to do:  Copy commons-logging-x.x.x.jar from BonitaSubscription-x.x.x-deploy/BonitaSubscription-x.x.x-LDAP-Synchronizer/BonitaSubscription-x.x.x-LDAP-Synchronizer/lib into the TOMCAT_HOME/server/lib directory.  Remove the WEB-INF/lib/commons-logging-x.x.x.jar file from the TOMCAT_HOME/server/webapps/bonita.war.  Remove the TOMCAT_HOME/server/webapps/bonita/WEB-INF/lib/commons-logging-x.x.x.jar file (if it is present).TroubleshootTo troubleshoote SSO login issues, you need to increase the log level to ALL in order for errors to be displayed in the log files (by default, they are not).Configure logout behaviourBonita PortalIf you are using CAS, when users log out of Bonita Portal, they log out of CAS. Therefore they are logged out of all applications that are using the CAS service. To avoid this, you can hide the logout option of the portal. To do this, set the logout.link.hidden=true option in authenticationManager-config.properties located in platform_conf/initial/tenant_template_portal for not initialized platform or platform_conf/current/tenant_template_portal and platform_conf/current/tenants/[TENANT_ID]/tenant_portal/.If the platform has already been initialized, every update to the configuration files under setup/platform_conf/current must be done using the setup tool:  setup pull  edit configuration file(s)  setup pushIf this option is set, when users navigate away from the Portal, they are still logged in to CAS.Bonita EngineBy default, logging out from Bonita Engine logs the user out of CAS. You can change this behavior by implementing your own Authentication Service.Manage passwordsWhen you are using CAS, the password for a user is managed in your CAS system. However, when you create a user in Bonita Portal, specifying a password is mandatory. This password is ignored.LDAP synchronizer and CASIf you are using an LDAP service and the LDAP synchronizer to manage your user data, you can continue to do this and use CAS. The LDAP synchronizer user must be registered in CAS. Alternatively, the LDAP synchronizer could be run with the tenant technical user, because this bypasses the SSO login.We recommend that you use LDAP as your master source for information, synchronizing the relevant information with your CAS server.Single sign-on with CAS using the REST APICAS is a browser-oriented protocol (based on http automatic redirection, cookies, forms, etc…), therefore, we only have securized browser-oriented resources. This is why only a subset of pages are handled to be automatically SSO CAS-verified but not the whole web application.The default AuthenticationFilter that manages CAS authentication applies only to the following pages:  /portal  /mobile/*  /portal.js/*  /apps/*  /services/*REST API are not part of them, but if an http session already exists thanks to cookies, REST API can be used.The recommended way to authenticate to Bonita Portal to use the REST API is to use the CAS server REST API.It allows to retrieve authentication tickets to authenticate to Bonita Portal.For detailed information about the procedure to install Restful access on your CAS SSO server, see the following links:  CAS SSO RESTful API  Bonita REST APINote: All calls issued to get the TGT or ST are made to the CAS SSO server.Getting the Ticket Granting Ticket (TGT)The Ticket Granting Ticket is an exposed resource. It has a unique URL.Request for a Ticket Granting Ticket Resource| | ||:-|:-|| Request URL | http://www.your_cas_server_url/cas/v1/tickets || Request Method | POST || Form Data | Username: walter.bates   Password: bpm |Response for a Ticket Granting Ticket Resource      Response  201 created  Location: http://www.your_cas_server_url/cas/v1/tickets/{TGT}  Take the TGT response and paste it in the url of the ST request, belowGetting the Service Ticket (ST)Request for a Service Ticket      Request URL  http://www.your_cas_server_url/cas/v1/tickets/{TGT}  Request Method  POST  Form Data  service={form encoded parameter for the service url}  For instance, in a Bonita Portal deployed on Tomcat bundle on a server with IP 192.168.1.9, service url can be http://192.168.1.9:8080/bonita/portal/homepage. Its form encoded value would be http%3A%2F%2F192.168.1.9%3A8080%2Fbonita%2Fportal%2Fhomepage.Response for a Service (ST)      Response  200 OK   {ST}  Take the ST response and paste it in the url of the Bonita Engine login request, belowLogging into Bonita Engine with Rest API using the service ticketUse a Bonita Portal URL where the CAS AuthenticationFilter applies for authentication to work.Prefer GET over POST to authenticate because experience has shown that in some server configuration, POST parameters cannot be retrieved in the CAS authentication web filter.Authentication to Bonita Engine with GETThe form encoded parameter URL used as service in the previous step must be used as access point because it will be sent to the CAS server to check ticket validation.      Request URL  {service url}  Request Method  GET  HTTP Params  ticket={ST}  Authentication to Bonita Engine with POSTUse a Bonita Portal SSO protected URL for this action.      Request URL  &amp;lt;bonita portal url&amp;gt;  Request Method  POST  Form Data  service={form encoded parameter for the service url}&amp;amp;ticket={ST}  Response for a Service (ST)      Response  200 OK  You are now logged into Bonita Portal and REST API calls will succeed.Cookies must be enabled in REST client side for authentication to persist across REST API calls.Therefore, calling web application root context may not work (e.g. /bonita by default) because session cookie seems not to be set on all web server configurations.Use a protected URL to authenticate to Bonita Portal when using the ticket parameter with POST method.",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/security-and-authentication/single-sign-on-with-cas",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-security-and-authentication-single-sign-on-with-saml": {
      "title": "Single sign-on with SAML",
      "content"     : "Single sign-on with SAMLNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.This pages explains how to configure your Bonita Platform system to use the SAML protocol to provide single sign-on (SSO). It assumes you already have a SAML Identity Provider server up and running (IdP).This information applies to a Bonita platform deployed from a bundle (Tomcat or WildFly), not to the Engine launched from Bonita Studio. &amp;lt;BUNDLE_HOME&amp;gt; refers to the root directory of the bundle.SAML configuration is at tenant level. Each tenant can use a different authentication method (over SAML or not).Note: Bonita uses Keycloak as SAML Service Provider adapter.SAML overview for BonitaConfigure Bonita Bundle for SAMLConfigure the Identity ProviderConfigure logout behaviourTroubleshootManage passwordsLDAP synchronizer and SAMLSingle sign-on with SAML using the REST APISAML overview for BonitaThis is an overview that relates the steps required to integrate a bonita bundle with an SAML Identity Provider.Here some details about the Bonita SAML2 module,it is composed of:  A servlet filter that intercept all the requests to bonita portal pagesIt checks if the user is already logged in on Bonita  If already logged in =&amp;gt; Allow the access  If not logged in =&amp;gt; Redirect to IdP (with user info)One Assertion Consumer Service ACS URL (technically this is also handled by the servlet filter through a different URL mapping  /saml),This service validates and process the SAML response :  Decode SAMLResponse  Check if the answer is valid (certificate, date, origin)  Extract the username from it (NameId or subject attribute)  Connect to bonita using username  Redirect to the initial requested resource (relayState)  Bonita “username” should match the NameId or one attribute of the subject returned by the IdP in the response.  If some users need to be able to log in without having an account on the IDP, you can authorize it by activating an option in the file authenticationManager-config.properties (see 2. below). Users will then be able to log in using the portal login page (/login.jsp) provided they have a bonita account and their password is different from their username.Configure Bonita Bundle for SAMLYou need to execute the following actions in the folder of each tenant for which you want to support authentication over SAML.If you want this configuration to also apply to each tenant created later, make sure to also perform those actions in the template tenant configuration folder:&amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenant_template_* (if you have not started the Bonita bundle yet, the files are located in &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/initial/tenant_template_*)The bundle already contains the files needed to use SAML with Bonita platform.To configure Bonita for SAML:  If you do not already have one:  Download a Subscription edition bundle from the customer portal  Configure it as needed  Run it a first time, so that the first default tenant is created (TENANT_ID = 1)  Stop it before modifying the configuration files belowIn the tenant_portal folder of each existing tenant: &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_portal,edit the authenticationManager-config.properties as follows:--&amp;gt;  #auth.AuthenticationManager = org.bonitasoft.console.common.server.auth.impl.standard.StandardAuthenticationManagerImpl--&amp;gt;  auth.AuthenticationManager = org.bonitasoft.console.common.server.auth.impl.saml.SAML2AuthenticationManagerImpl--&amp;gt;  saml.filter.active = true--&amp;gt;  saml.auth.standard.allowed = false--&amp;gt;  saml.logout.global = false--&amp;gt;  auth.tenant.admin.username = install--&amp;gt;  auth.passphrase = BonitaBPM #auth.AuthenticationManager = org.bonitasoft.console.common.server.auth.impl.oauth.OAuthAuthenticationManagerImpl # OAuth.serviceProvider = LinkedIn # OAuth.consumerKey = ove2vcdjptar # OAuth.consumerSecret = vdaBrCmHvkgJoYz1 # OAuth.callbackURL = http://127.0.0.1:8888/loginservice #auth.AuthenticationManager = org.bonitasoft.console.common.server.auth.impl.jaas.cas.CASRemoteAuthenticationManagerImpl # Cas.serverUrlPrefix = http://127.0.1.1:8180/cas # Cas.bonitaServiceURL = http://127.0.1.1:8080/bonita/loginservice--&amp;gt;  logout.link.hidden=true Make sure to set the right tenant admin username. It is recommended to also replace the value of the passphrase (property auth.passphrase) which is used by the engine to verify the authentication request. The value must be the same as in the file bonita-tenant-sp-custom.properties. If you need some users to be able to log in without having an account on the IDP, you can authorize it by setting the property saml.auth.standard.allowed to true. Users will then be able to log in using the portal login page (/login.jsp) provided they have a bonita account and their password is different from their username.In the tenant_engine folder of each existing tenant: &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_engine/,  edit the file bonita-tenant-sp-custom.xml to uncomment the bean passphraseOrPasswordAuthenticationService: &amp;lt;bean id=&quot;passphraseOrPasswordAuthenticationService&quot; class=&quot;com.bonitasoft.engine.authentication.impl.PassphraseOrPasswordAuthenticationService&quot; lazy-init=&quot;true&quot;&amp;gt;&amp;lt;constructor-arg name=&quot;logger&quot; ref=&quot;tenantTechnicalLoggerService&quot; /&amp;gt;&amp;lt;constructor-arg name=&quot;identityService&quot; ref=&quot;identityService&quot; /&amp;gt;&amp;lt;constructor-arg name=&quot;configuredPassphrase&quot; value=&quot;${authentication.service.ref.passphrase}&quot; /&amp;gt;&amp;lt;/bean&amp;gt;In the tenant_engine folder of each existing tenant: &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_engine/  edit the file bonita-tenant-sp-custom.properties as follows: # Authentication service to use. Some are natively provided: # authenticationService #   * binded to bonita authentication mode #   * impl: org.bonitasoft.engine.authentication.impl.AuthenticationServiceImpl # jaasAuthenticationService #   * to use JAAS #   * impl: com.bonitasoft.engine.authentication.impl.JAASGenericAuthenticationServiceImpl #   * this is the one to configure SSO over CAS (CAS properties to be defined hereafter # noAuthenticationService #   * does no authentication on the engine side #   * impl: com.bonitasoft.engine.authentication.impl.NoAuthenticationServiceImpl # passphraseOrPasswordAuthenticationService #   * Used by SAML2 implementation, login only if a passphrase is valid, or if a username/password is valid. #   * Requires PassphraseOrPasswordAuthenticationService bean to be uncommented in bonita-tenant-sp-custom.xml #   * impl: com.bonitasoft.engine.authentication.impl.PassphraseOrPasswordAuthenticationService # you can provide your own implementation in bonita-tenant-sp-custom.xml and refer to the bean name of your choice--&amp;gt;  authentication.service.ref.name=passphraseOrPasswordAuthenticationService # If authentication.service.ref.name equals &quot;PassphraseOrPasswordAuthenticationService&quot;, # you need to configure the following passphrase --&amp;gt;  authentication.service.ref.passphrase=BonitaBPM # CAS authentication delegate : enables the user, providing login/password, # to be logged in automatically against CAS web application  # To be used in conjunction with the generic authentication service configured with CAS (jaasAuthenticationService) #authenticator.delegate=casAuthenticatorDelegate #authentication.delegate.cas.server.url.prefix=http://ip_address:port #authentication.delegate.cas.service.url=http://ip_address:port/bonita/loginserviceIt is recommended to also replace the value of the passphrase (property auth.passphrase). The value must be the same as in the file authenticationManager-config.properties updated previously.If your Identity Provider (IdP) requires requests to be signed, generate a private key.For example on linux, you can use the command ssh-keygen, then go to “cd ~/.ssh” to retrieve the key from the file id_rsa (more id_rsa, then copy the key).Note: The expected format for Keys and certificates is PEM (with or without the comment header and footer).  In the tenant_portal folder of each existing tenant: &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_portal, edit the file keycloak-saml.xml to setup Bonita webapp as a Service provider working with your IdP.  The entityID is the Service Provider given to your bonita installation. You can change it if you want but you need to provide it to your IdP.  If your IdP requires the SSO requests to be signed replace the following strings in the Keys section of the SP:  put your private key here  put your certificate herewith you current server’s private key and with the certificate provided by the IdP.If your IdP does not require the SSO requests to be signed, you can remove the Keys node from the SP and set the attribute signRequest to false.If your IdP responses are signed, replace the following strings in the Keys section of the IDP:  put your certificate herewith the certificate provided by the IdP (same certificate as in the SP section).If your IdP responses are not signed, you can remove the Keys node from the IDP and set the attribute validateResponseSignature to false.The PrincipalNameMapping policy indicates how to retrieve the subject attribute that matches a bonita user account username from the IdP response.The policy can either be FROM_NAME_ID or FROM_ATTRIBUTE (in that case you need to specify the name of the subject attribute to use).  You may also need to change the requestBinding and/or responseBinding from POST to REDIRECT depending on your IdP configuration.  The url binding to your IdP also needs to be define by replacing the following string:  http://idp.saml.binding.url.to.changeNote 1: If both the requests to the IdP and the responses are signed, this means you need to add the certificate twice: in the SP section as well as in the IDP section.Note 2: More configuration options can be found in Keycloak official documentation   &amp;lt;keycloak-saml-adapter&amp;gt;   &amp;lt;SP entityID=&quot;bonita&quot;   sslPolicy=&quot;EXTERNAL&quot;   forceAuthentication=&quot;false&quot;   isPassive=&quot;false&quot;   turnOffChangeSessionIdOnLogin=&quot;true&quot;&amp;gt;   &amp;lt;Keys&amp;gt;   &amp;lt;Key signing=&quot;true&quot;&amp;gt;--&amp;gt;&amp;lt;PrivateKeyPem&amp;gt;put your private key here&amp;lt;/PrivateKeyPem&amp;gt;--&amp;gt;&amp;lt;CertificatePem&amp;gt;put your certificate here&amp;lt;/CertificatePem&amp;gt;   &amp;lt;/Key&amp;gt;   &amp;lt;/Keys&amp;gt;   &amp;lt;PrincipalNameMapping policy=&quot;FROM_ATTRIBUTE&quot; attribute=&quot;username&quot;/&amp;gt;   &amp;lt;IDP entityID=&quot;idp&quot;&amp;gt;   &amp;lt;SingleSignOnService signRequest=&quot;true&quot;  validateResponseSignature=&quot;true&quot;  requestBinding=&quot;POST&quot;  responseBinding=&quot;POST&quot;--&amp;gt;   bindingUrl=&quot;http://idp.saml.binding.url.to.change&quot;/&amp;gt;   &amp;lt;SingleLogoutService signRequest=&quot;false&quot;  signResponse=&quot;false&quot;  validateRequestSignature=&quot;false&quot;  validateResponseSignature=&quot;false&quot;  requestBinding=&quot;POST&quot;  responseBinding=&quot;POST&quot;  postBindingUrl=&quot;http://idp.saml.binding.url.to.change&quot;  redirectBindingUrl=&quot;http://idp.saml.binding.url.to.change&quot;/&amp;gt;   &amp;lt;Keys&amp;gt;   &amp;lt;Key signing=&quot;true&quot;&amp;gt;--&amp;gt;&amp;lt;CertificatePem&amp;gt;put your certificate here&amp;lt;/CertificatePem&amp;gt;   &amp;lt;/Key&amp;gt;   &amp;lt;/Keys&amp;gt;   &amp;lt;/IDP&amp;gt;&amp;lt;/SP&amp;gt;   &amp;lt;/keycloak-saml-adapter&amp;gt;  If your Identity Provider is corectly configured (see the section Configure the Identity Provider), you are done.Then you can try to access a portal page, an app page or a form URL (or just http://&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/bonita[?tenant=&amp;lt;tenantId&amp;gt;]) and make sure that you are redirected to your Identity Provider to log in (unless you are already logged in).Note that if you try to access http://&amp;lt;bundle host&amp;gt;:&amp;lt;port&amp;gt;/bonita/login.jsp, then you won’t be redirected as this page still needs to be accessible in order for the tenant administrator (or another user if you set the property saml.auth.standard.allowed to true) to be able to log in without an account on the Identity Provider.Note: If your Bonita platform is behind a proxy server, You need to make sure the reverse proxy is configured to include the correct Host: header to the requests and the application server is configured to use this header (it is usually the case by default).This is required so that HttpServletRequest.getRequestURL returns the URL used by the user and not the internal URL used by the reverse proxy.For example, if you are running Apache &amp;gt;=2.0.31 as reverse proxy, this configuration is controlled by the property ProxyPreserveHost.If you need more fine tuning or if you cannot update the reverse proxy configuration, you can consult the official documentation for Tomcat or WildFly.Configure the Identity ProviderYour IdP should declare a Service Provider named bonita (or the value of the entityID set in the file keycloack-saml.xml of Bonita bundle if it is different) with the following configuration:  ACS URL or SAML Processing URL: http[s]://&amp;lt;bundle host&amp;gt;:&amp;lt;port&amp;gt;/bonita/saml  request binding and response binding configured with the same values as in keycloack-saml.xml (POST or REDIRECT)  Client signature required configured with the same values as the property signRequest in keycloack-saml.xml  if the IdP responses are signed, make sure the certificate of the IdP has been set in keycloack-saml.xml  the Name ID or a user attribute of the user principal sent back by the IdP should match the username of the user accounts in Bonita and the PrincipalNameMapping policy (and attribute value) in keycloack-saml.xml should reflect thatNote: If the IdP declares a redirect/target URL, it might override the target URL set by the Service Provider request, and you may always end up on the same page after logging in. In that case, try to remove the redirect URL. Bonita supports redirection to the URL initially requested after logging in on the IdP, provided the IdP doesn’t force this URL.Configure logout behaviourIf your Bonita platform is configured to manage authentication over SAML, when users log out of Bonita Portal, they do not log out of the SAML Identity Provider (IdP).Therefore they are not logged out of all applications that are using the IdP.To avoid this, you have two options :Hide the logout button of the portalThis is the most commonly used solution. Users are logged in as long as they don’t close their web browser (unless their session times out).To do this, set the logout.link.hidden option to true in authenticationManager-config.properties located in &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/initial/tenant_template_portal for not initialized platform or &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenant_template_portal and &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenants/[TENANT_ID]/tenant_portal/.Note: When a user logs out from the IdP directly, Bonita Portal’s session will remain active. The user’s session time to live will be reset to the configured session timeout value upon each user interaction with the server.Setup Bonita platform for SAML global logoutGlobal logout allows to log out from the Identity Provider as well as all the registered Service Providers when logging out from Bonita platform. This is sometimes required for example if users are on public computers.As Identity Providers do not necessarily support single logout and have different ways of handling it (there are several SAML Single Logout methods), Bonita only offers SAML global logout as an experimental feature. Meaning that this feature has only been tested with Keycloack server acting as Identity Provider.Therefore, there is no guaranty that the global logout will work with your Identity Provider. However, if your IdP supports the Service Provider initiated flow of SAML’s Web Browser Single Logout profile, single logout is likely to work.To setup Bonita for global logout:  Set the saml.logout.global option to true in authenticationManager-config.properties located in &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/initial/tenant_template_portal for not initialized platform or &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenant_template_portal and &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_portal/.  Update the SingleLogoutService section of keycloak-saml.xml located in &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/initial/tenant_template_portal for not initialized platform or &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenant_template_portal and &amp;lt;BUNDLE_HOME&amp;gt;/setup/platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_portal/ to match your Identity Provider configuration.  Update your Identity Provider configuration to setup the Logout Service POST/Redirect Binding URL to /bonita/samlLogoutNote: If the single logout flow supported by your IdP is not the same as the one supported by Bonita platform, the preferred solution to handle it anyway is to intercept the requests to /logoutService and handle the logout programmatically.TroubleshootTo troubleshoot SSO login issues, you need to add a logging handler for the package org.keycloak and increase the log level to ALL for the packages org.bonitasoft, com.bonitasoft, and org.keycloak in order for errors to be displayed in the log files bonita-*.log (by default, they are not).In order to do that in a Tomcat bundle, you need to edit the file `/server/conf/logging.properties.  Add the lines:org.keycloak.handlers = 5bonita.org.apache.juli.AsyncFileHandlerorg.keycloak.level = ALLUpdate the existing lines (to set the level to ALL):org.bonitasoft.level = ALLcom.bonitasoft.level = ALL  In a WildFly bundle, you need to edit the file &amp;lt;BUNDLE_HOME&amp;gt;/server/standalone/configuration/standalone.xml in the domain urn:jboss:domain:logging:3.0 of the subsystem tag.Edit the logger tags which category matches org.bonitasoft and com.bonitasoft packages: change the level name attribute of each logger to ALL and add a new logger with the category org.keyclock (also with a level name set to ALL).Manage passwordsWhen your Bonita platform is configured to manage authentication over SAML, the user password are managed in your SAML Identity Provider (IdP).However, when you create a user in Bonita Portal, specifying a password is mandatory. This password is ignored when logging in with the IdP.LDAP synchronizer and SAMLIf you are using an LDAP service and the LDAP synchronizer to manage your user data, you can continue to do this and manage authentication over SAML.The LDAP synchronizer user must be registered in Bonita (no need for an SAML IdP account). It is recommended though to use the tenant admin account. We recommend that you use LDAP as your master source for information, synchronizing the relevant information with your Bonita platform.Note : By default the LDAP synchronizer sets the password of the accounts created with the same value as the username. So, even if you allow standard authentication (by setting the property saml.auth.standard.allowed in authenticationManager-config.properties), users won’t be able to log in with the portal login page directly without going through the IdP.Single sign-on with SAML using the REST APISAML is a browser-oriented protocol (based on http automatic redirection, forms, etc…), therefore only resources that require a direct access from a web browser are handled by the SAML filter. Access to other resources won’t trigger an SAML authentication process. Here is the subset of pages filtered by the SAML filter:  /saml  /samlLogout  /portal/homepage  /portal/resource/*  /portal/form/*  /mobile/*  /apps/*  /logoutserviceREST API are not part of them, but if an http session already exists thanks to cookies, REST API can be used.The recommended way to authenticate to Bonita Portal to use the REST API is to use the login service..",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/security-and-authentication/single-sign-on-with-saml",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-security-and-authentication-ssl": {
      "title": "SSL",
      "content"     : "SSLConfiguring SSL for Bonita is the same as configuring it for any other application. No changes are necessary to forms or to process definitions, just configuration. This page contains examples of how to set up SSL for Bonita. This enables you to use secure HTTP (HTTPS) to access the portal.OverviewWildFly with keystoreTomcat with APR and OpenSSLTomcat with a keystoreTomcat and SSL OffloadingOverviewIf you are using an HTTP load balancer, configure it to handle SSL connections. Otherwise, configure it in the application server.To configure your system to use SSL:  Create a certificate for your system.  Update your application server configuration to enable SSL.  Update the Bonita web application to add the security definition.The details of each step depend on your application server and SSL implementation. See your application server documentation for details.There are some examples below. In these examples:  We use the default application server SSL port number, 8443, for connections. If you use this port number, it needs to be specified in the URL by users. If you use the default HTTPS port number, 443, users do not need to specify the port in the URL.  You must ensure that the SSL connector is configured with the parameter URIEncoding=&quot;UTF-8&quot;.  When the configuration is complete, the web application is only available through HTTPS. For other configuration, allowing both HTTP and HTTPS access, see your application server or SSL service documentation.  The operating system is Ubuntu.  The starting point is a bundle that has been installed and configured but not started.WildFly with keystoreFor details of how to set up SSL with WildFly 10, see the SSL Configuration on the WildFly 10 web site.Tomcat with APR and OpenSSLThis example show how to configure SSL with APR and OpenSSL for a Bonita using Tomcat.  Go to the TOMCAT_HOME/conf directory and create a directory called ssl to store certificate files.  Create the self-signed certificate and its private key using openssl:  openssl req -new -x509 -days 365 -nodes -out conf/ssl/test.bonitasoft.net.pem -keyout conf/ssl/test.bonitasoft.net.key  Provide the information about your system that openssl requires.  Edit conf/server.xml and add the following definition for the Connector:```xml5. Install the Tomcat native library, which contains APR: `sudo apt-get install libtcnative-1`6. Edit `TOMCAT_HOME/webapps/bonita/WEB-INF/web.xml` and add the following security definition:```xml&amp;lt;web-app&amp;gt;   ...   &amp;lt;security-constraint&amp;gt;  &amp;lt;web-resource-collection&amp;gt; &amp;lt;web-resource-name&amp;gt;Bonita Portal Secure URLs&amp;lt;/web-resource-name&amp;gt; &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;  &amp;lt;/web-resource-collection&amp;gt;  &amp;lt;user-data-constraint&amp;gt; &amp;lt;transport-guarantee&amp;gt;CONFIDENTIAL&amp;lt;/transport-guarantee&amp;gt;  &amp;lt;/user-data-constraint&amp;gt;   &amp;lt;/security-constraint&amp;gt;&amp;lt;/web-app&amp;gt;  Start Tomcat: ./bin/startup.sh  Check that everything is correctly configured, by opening https://127.0.0.1:8443/bonita in your browser. Your browser should warn you about the self-signed certificate used to perform the HTTPS connection. You can safely add this self-signed certificate to the exceptions allowed.Tomcat with a keystoreThis example shows how to configure SSL with a keystore for Bonita on Tomcat.  Run the Java keytool to create a certificate and store it in the keystore. (Note: if you are using Windows, you need to run keytool as administrator.)keytool -genkey -alias tomcat -keyalg RSA -keystore conf/ssl/keystore  Answer the questions that keytool asks. When asked for your first name and last name, provide the hostname of your system.  Edit conf/server.xml and include the following configuration for the Connector:```xml4. Edit `TOMCAT_HOME/webapps/bonita/WEB-INF/web.xml` and add the following security definition:```xml&amp;lt;web-app&amp;gt;   ...   &amp;lt;security-constraint&amp;gt;  &amp;lt;web-resource-collection&amp;gt; &amp;lt;web-resource-name&amp;gt;Bonita Portal Secure URLs&amp;lt;/web-resource-name&amp;gt; &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;  &amp;lt;/web-resource-collection&amp;gt;  &amp;lt;user-data-constraint&amp;gt; &amp;lt;transport-guarantee&amp;gt;CONFIDENTIAL&amp;lt;/transport-guarantee&amp;gt;  &amp;lt;/user-data-constraint&amp;gt;   &amp;lt;/security-constraint&amp;gt;&amp;lt;/web-app&amp;gt;  Start Tomcat: ./bin/startup.sh  Check that everything is correctly configured, by opening https://127.0.0.1:8443/bonita in your browser. Your browser should warn you about the certificate used to perform the HTTPS connection. You can safely add this certificate to the exceptions allowed.Tomcat and SSL OffloadingThis example shows you how to configure SSL if you run Tomcat behind a load balancer that features in SSL Accelerator or Offloading (sometimes called SSL Termination).  Make sure that your load balancer adds X-Forwarded-Proto and X-Forwarded-For headers. If you use HAProxy you can add following lines into your HAProxy configuration :option forwardforreqadd X-Forwarded-Proto: httpsEdit conf/server.xml and include the RemoteIpValve configuration for the host:```xml```Note: Make sure that the regular expression set with `internalProxies` matches your IP addresses.As explained by the [RemoteIpValve documentation](https://tomcat.apache.org/tomcat-8.5-doc/api/org/apache/catalina/valves/RemoteIpValve.html): &quot;This valve replaces the apparent client remote IP address and hostname for the request with the IP address list presented by a proxy or a load balancer via a request headers (e.g. &quot;X-Forwarded-For&quot;). Another feature of this valve is to replace the apparent scheme (http/https) and server port with the scheme presented by a proxy or a load balancer via a request header (e.g. &quot;X-Forwarded-Proto&quot;).&quot;3. If you use the AccessLogValve, edit `conf/server.xml` and set `requestAttributesEnabled=&quot;true&quot;`:```xml&amp;lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;  prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot; requestAttributesEnabled=&quot;true&quot;  pattern=&quot;%a %{X-Forwarded-Proto}i %l %u %t &quot;%r&quot; %s %b&quot; /&amp;gt;```If you omit this, %a will log your load balancer&#39;s IP address and not the client&#39;s IP address.",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/security-and-authentication/ssl",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-security-and-authentication-tenant-admin-credentials": {
      "title": "Tenant administrator credentials",
      "content"     : "Tenant administrator credentialsEach tenant has an administrator, with a tenant-specific username and password. The tenant administrator is also known as the tenant technical user.How it worksImportant notice (only for default tenant)How it worksWhen the platform is created, default values of the administrator username and password, for the default tenant, are defined in the file&amp;lt;WEBSERVER_HOME&amp;gt;/setup/platform_conf/initial/tenant_template_engine/bonita-tenant-community-custom.properties, by the following properties:  userName defines the username (default value install)  userPassword defines the password (default value install)If you modify these values before the first start of the platform, the new values will be the default values for all tenants that will becreated in the future, including the default tenant.When you create a tenant, or when the default tenant is created on the first start of the platform, the tenant administrator is createdwith the default username and password, unless you specify new values.For an already existing tenant, you can change these tenant-specific credentials by updating the userName and userPassword properties in the file&amp;lt;WEBSERVER_HOME&amp;gt;/setup/platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_engine/bonita-tenant-community-custom.propertiesImportant notice (only for default tenant)The engine and the portal can be installed on different machines / Tomcat / WildFly installations. For that reason, the portal has its own configuration filethat define the tenant technical user credentials, in order to communicate with the (potentially remote) engine.For this matter, if you change the tenant admin credentials (default tenant only) on engine side (see above), you must also update the corresponding values in the file:&amp;lt;WEBSERVER_HOME&amp;gt;/setup/platform_conf/initial/platform_portal/platform-tenant-config.properties if you have never started the platform yet, and&amp;lt;WEBSERVER_HOME&amp;gt;/setup/platform_conf/current/platform_portal/platform-tenant-config.properties if the platform has been already started.",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/security-and-authentication/tenant_admin_credentials",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-security-and-authentication-user-authentication-overview": {
      "title": "User authentication overview",
      "content"     : "User authentication overviewThis page describes how user authentication is achieved in Bonita (running with default configuration).If you want to find out how to customize authentication refer to the dedicated documentation pages:  LDAP server / Active Directory  CAS single sign-on (SSO)Bonita Portal authentication scenarioInformation about sessionsHow does the Bonita Portal know if a user is authenticated?Bonita Portal authentication scenarioTo help understand how user authentication is performed, let’s take a typical case where a user accesses the Bonita Portal for the first time. This scenario is the default (no LDAP authentication, nor CAS).  In a web browser, the user types the URL of Bonita Portal(e.g. http://localhost:8080/bonita) that will initiate aHTTP request handled by the application server that delegatesprocessing to the Bonita web application.  When asked for the Bonita root, the URL server will provide a index.html file (you can find the index.htmlin the bonita.war file). This is defined by the welcome-fileproperty in the Bonita web application deployment descriptor (a web.xmlfile located in bonita.war/WEB-INF).  Javascript in index.html will redirect the user to /portal/homepage(e.g. http://localhost:8080/bonita/portal/homepage).  AuthenticationFilterapplied to the HTTP request send to /portal/homepage.The filter will check if the user is already authenticated. To do so, it will look in the HTTP session for an apiSession attribute (see AlreadyLoggedInRule).If an apiSession attribute exists, this means a user is already authenticated.  If the attribute apiSession is not set, the user will be redirected to the login page. Note: Information about the original page the user tried to reach is included in a URL parameter named redirectURL.The login page URL is determined by the AuthenticationManagerimplementation. The implementation to use for the current tenant is configured in a file authenticationManager-config.properties(located in setup/platform_conf/initial/tenant_template_portal or setup/platform_conf/current/tenants/[tenantid]/tenant_portal and updatable using the platform setup tool).The default AuthenticationManageris StandardAuthenticationManagerImpl.Its behavior is to redirect to the login.jsp page embedded in the webapp.Supporting different implementations enables authentication on an external application (useful for SSO deployement for example).  login.jsp page will ask the user for the usernameand password (HTML form). When submitting the form, a POSTrequest is sent to /loginservice. The request includes theusername, password, tenant id (if provided in the URL, only applied tosubscription editions), locale (optional, by priority order: providedin the URL, stored in HTTP cookie) and the redirectURLinformation.  URL /loginservice is handled by LoginServlet.  LoginServletcalls login method of LoginManager  LoginManagersearches for an AuthenticationManagerimplementation based on configuration file for current tenant (authenticationManager-config.properties). The default AuthenticationManageris StandardAuthenticationManagerImpl.  authenticate method is called on the AuthenticationManager.authenticate method of StandardAuthenticationManagerImplimplementation of this method does nothing (the subsequent engine login is enough to authenticate the user)  The authentication is considered successful if no Exception is thrown by the authenticate method.  LoginManagerwill then call engine API LoginAPI.login()  At this point, operations are processed on Bonita Engine side. Engine (see LoginAPIImplclass) verifies that the username and password are not empty. A verification is also done to validate that the tenant is enabled (use provided tenant id or default one if not provided). Then LoginAPIImplwill call LoginService(one implementation available: SecuredLoginService).  SecuredLoginService calls GenericAuthenticationService.The default implementation is: AuthenticationServiceImpl.  The AuthenticationServiceImplverifies that your username and password are valid.  After call of the GenericAuthenticationService,SecuredLoginServiceImplperforms an extra check to verify that the provided username exists in the Bonita database (SecuredLoginServiceImpldoes not trust AuthenticationServiceImpl).Note: A specific behavior applies for the tenant technical user.  SecuredLoginServiceImplreturns an object that represents the session. This is a server side only object (SSession)  Call get back to LoginAPIImplthat converts SSessionto APISession.  APISessionis provided back up to the LoginManagerthat will add session information as HTTP session attribute.  Call get back to LoginServletthat will redirect the user to the requested page.Note: If you configure your Bonita platform to use CAS, the logical flow of authentication is the same as above. The difference is that at step 7 the CASRemoteLoginManager is used instead of the default loginManager and at step 12 the JAASGenericAuthenticationServiceImpl is called instead of the default authentication service, AuthenticationServiceImpl. The loginManager-config.properties file for a tenant controls which login manager and authentication service (cfg-bonita-authentication-impl.xml) are used.Information about sessionsTwo type of session are involved when using Bonita Portal:  The HTTP session  The Bonita Engine sessionThe sessoin timeout values for these two sessions should be set to the same value.The HTTP session.This session is created by the application serverand corresponds to one user.The Bonita Engine sessionSee APISessionclass. This session is created by Bonita Engine on the Bonita Portal request, when the user submits a login page.Session expirationIf the Engine session has expired and the user tries to reach one of the Bonita Portal pages,an exception will be raised. Bonita Portal will catch this exception,invalidate the HTTP session and redirect the user to the login page.Note: The Bonita Engine default session duration is one hour (default valuedefined in SessionServiceImpl). You can configure a different session duration by editing the bonita.tenant.session.duration property in bonita-tenant-community-custom.properties. Specify the duration in milliseconds.If the HTTP session has expired, Bonita Portal will redirect the user to theauthentication page. The Bonita Engine session associated with the HTTPsession that has just expired will remain active until it reaches theinactivity timeout. A cron job takes care of cleaning up inactiveEngine sessions.Note: The HTTP session default duration depends on your application server (for example, 30 minutes for Tomcat).LogoutIn Bonita Portal, if a user clicks on the logout button, both theEngine session and HTTP session will be invalidated.How does the Bonita Portal know if a user is authenticated?The Bonita Portal checks if a valid Bonita Engine session (APISessionobject) is found in theapiSessionattribute inside the HttpRequest. If the engine session is still valid, the user will have access to the required resource.",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/security-and-authentication/user-authentication-overview",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation, Security and authentication"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-set-log-and-archive-levels": {
      "title": "Set log and archive levels",
      "content"     : "Set log and archive levelsThere are three ways to record the information about a running process:  Archive: used by a business analyst or process administrator using Bonita Portal, during the production phase, to trace the running of the process instances in their life cycle. Records who did what and when.  Technical log: used by an application developer for troubleshooting, debugging and process tuning.  Queriable log: used by a database administrator extracting information related to business actions that is stored in the internal database to be retrieved by a database request.You can configure the information that is recorded in the archive and the logs.ArchiveTechnical logQueriable logArchiveIn the portal, after a process is executed, it can be viewed using the “Archived” filter.There you can find the information on the process instances (the cases). This information is also available using the Web REST API. By default, all the information is archived but in the Enterprise and Performance editions this is configurable.Recommended configuration (Enterprise and Performance only):  To keep all the user activity, set all the flowNode types to true.  To maximize the overall performance of the system and reduce the disk space used by the database, set all the values to false. Completed tasks will not be visible.Between these two extreme cases, you can customize archiving to your exact need.Technical logThe technical logger service is part of the Bonita Engine. The default implementation is based on the framework Java Util Logging.You can configure the log level. The log level can be set on several categories in the logging.properties file. Some categories are very specific to a particular issue. For example:  If you have an issue related to the database access, it might be interesting to change the level of org.hibernate.level from the default, WARNING, to FINE.  When debugging cache issues, change the level of net.sf.ehcache.level.  For the process execution, the relevant properties are org.bonitasoft.level and (for Subscription editions) com.bonitasoft.level.Queriable logYou can use the queriable logger service to log in a database the creation, deletion or update of bonita objects that are not related to a process (for instance users, groups, roles, profiles). Items that can be archived cannot be included in the queriable log.To configure what information you want to record in the quieriable log, modify the bonita-tenant-sp-custom.properties.This file contains a map of available events. By default all are logged (the value is set to true). If you do want to log a particular event, set the value to false and restart the Bonita Engine.",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/set-log-and-archive-levels",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-two-main-types-of-deployment": {
      "title": "Two main types of deployment",
      "content"     : "Two main types of deploymentNote: It is highly recommended to use the provided Tomcat or WildFly bundles or the artifacts bonita.war and bonita.ear provided in the deploy bundle, in order to carry out these deployments successfully.There are two main types of deployment.Bonita Portal + Bonita Engine on the same application serverBonita Engine on a remote application serverAccessible through HTTPAccessible through RMI (EJB3)Bonita Portal + Bonita Engine on the same application serverThis is the simplest deployment configuration. The engine used is the one embedded in the webapp bonita.war. Using the pre-packaged Tomcat bundle is the easiest way to achieve this kind of deployment, but it is also possible to retrieve the bonita.war webapp provided in the deploy.zip and deploy it on another application server/servlet container.It is fast because the Bonita Portal and the Bonita Engine run on the same JVM and so there is no serialization and network overhead every time the Bonita Portal calls the engine.Advantages  simple (single webapp and application server)  works out of the box if you use the provided Tomcat bundle  you can still access the embedded Bonita Engine API (or the Bonita Portal REST API) through HTTP if you need an external application to access it  improved performanceDrawbacks  may not be adapted to some architecture constraintsBonita Engine on a remote application serverEven if the bonita.war comes with an embedded Bonita Engine, you can choose not to use it.In this deployment you must configure the JVM containing the client Bonita Portal to use the remote connection to the engine. To do so see configuring the connection to a remote engine.Don’t forget to set in this JVM the following properties:  org.bonitasoft.platform.username must be set with the username of the platform admin  org.bonitasoft.platform.password must be set with the password of the platform adminAccessible through HTTPWith this deployment, the Bonita Engine is accessed by the portal (and possibly other applications) through HTTP. The Bonita Portal is deployed on one application server and the engine on another one.But you can still use the pre packaged Tomcat bundles or the bonita.war webapp provided in the deploy.zip, in both servers. On one of them, only the Bonita Portal part will be used and on the other one, only the engine server. Access to the portal can be de-activated by server or webapp configuration if necessary.Advantages  may be adapted to some architecture and network constraintsDrawbacks  more complex than the first deployment option (two application servers instead of one)  impact on performance (serialization + network overhead)Accessible through RMI (EJB3)With this third type of deployment, the engine is accessed by the Bonita Portal (and possibly other applications) through the EJB.The Portal is deployed on one application server and the engine on another one.However, you can still use the pre packaged Tomcat bundle for the Bonita Portal and the pre-packaged WildFly Bundle for the Bonita Engine.In this case, you will need to add the WildFly client libraries to the classpath of the Bonita Portal webapp.You can also use the bonita.war webapp provided in the deploy zip on the portal application server and use the bonita.ear application on the engine application server. On one of the application servers, only the portal part will be used and on the other one, only the engine server. Access to the Bonita Portal can be deactivated by server or app configuration, if necessary.Advantages  may fit some architecture and network constraintsDrawbacks  more complex than the first deployment option (two application servers instead of one)  impact on performance (serialization + network overhead) but it should be faster than the second option though (no HTTP protocol overhead)",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/two-main-types-of-deployment",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation"
    }
    ,
  

    "bonita-7-8-installation-advanced-bonita-platform-installation-use-gzip-compression": {
      "title": "Use gzip compression",
      "content"     : "Use gzip compressionUsing gzip compression in your application server can improve performance by reducing network load for some resources. This page describes how to activate gzip compression for a Bonita Platform with Tomcat and with WildFly.WildFlyTomcatCheck changesWildFlyTo activate compression for WildFly:  For Linux systems: edit bin/standalone.conf and uncomment this line:JAVA_OPTS=&quot;$JAVA_OPTS -Dorg.apache.coyote.http11.Http11Protocol.COMPRESSION=on&quot; For Windows systems: edit bin/standalone.conf.bat and uncomment this line:set &quot;JAVA_OPTS=%JAVA_OPTS% -Dorg.apache.coyote.http11.Http11Protocol.COMPRESSION=on&quot;  TomcatTo activate gzip compression for http requests, you need to modify the server.xml configuration.Open server.xml and find the Connector configuration that you use. Edit the section to add following parameters:compression=&quot;on&quot;compressionMinSize=&quot;X&quot;noCompressionUserAgents=&quot;Y&quot;compressableMimeType=&quot;Z&quot;| Property | Description | Example ||:-|:-|:-|| compression | Activates or deactivates gzip compression. | on || compressionMinSize | The minimum size of resources to be compressed. It is not useful to compress resources that are already small. | 2048 || noCompressionUserAgents | The User Agents for which compressions is not to be used. Some older browseers do not support compression. | gozilla, traviata || compressableMimeType | The MIME types of the resources to be compressed. We recommend that all text files be compressed. | text/html,text/xml |If you use the Tomcat bundle, the file to edit is conf/server.xml.If you use a different package, use the corresponding path; for example on Ubuntu the file is located in /etc/tomcat8/server.xml.Connector configuration:&amp;lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;   connectionTimeout=&quot;20000&quot;   redirectPort=&quot;8443&quot;   maxPostSize=&quot;-1&quot;   URIEncoding=&quot;UTF-8&quot;   compression=&quot;on&quot;   compressionMinSize=&quot;2048&quot;   noCompressionUserAgents=&quot;gozilla, traviata&quot;   compressableMimeType=&quot;text/html,text/xml,text/plain,text/javascript,text/css&quot;&amp;gt;&amp;lt;/Connector&amp;gt;Check changesAfter you modify the file, restart your application server and test with the following curl command:curl -I -H &#39;Accept-Encoding: gzip&#39; http://ip_address:port/bonita/login.jspCheck that the header returned contains the line Content-Encoding: gzip. For example, on a WildFly system the output will be similar to this:HTTP/1.1 200 OKServer: Apache-Coyote/1.1Expires: 0Cache-Control: no-store, no-cache, must-revalidate, proxy-revalidatePragma: no-cacheX-XSS-Protection: 1; mode=blockX-Frame-Options: SAMEORIGINX-Content-Type-Options: nosniffX-Powered-By: JSP/2.2Content-Type: text/html;charset=UTF-8Transfer-Encoding: chunkedContent-Encoding: gzipVary: Accept-Encoding",
      "url": " /bonita/7.8/installation/advanced-bonita-platform-installation/use-gzip-compression",
      "author": "",
      "categories": "Installation, Advanced Bonita Platform installation"
    }
    ,
  

    "bonita-7-8-installation-back-up-bonita-bpm-platform": {
      "title": "Back up Bonita Platform",
      "content"     : "Back up Bonita PlatformAny basic one node (non-clustered) installation can be backed up to be restored later. In a Bonita cluster, you need to back up the nodes, the shared database.A cold backup (total shutdown) is recommended, to avoid losing data being processed during the backup process. Note: make sure your database server is backed up. (Please refer to the specific documentation for your database concerning the backup procedure).  Stop the application server  Save the Application Server configuration files modified during Bonita setup.  Save the deployed web application (i.e. bonita.war) (for Tomcat [TOMCAT_HOME]/webapps/bonita.war), or you can redeploy all applications at startup. If you decide not to save the webapps directory, make sure that you have a copy of your Bonita application available.  Back up your database (Please refer to the specific documentation for your database concerning the backup procedure).  Start the application server.",
      "url": " /bonita/7.8/installation/back-up-bonita-bpm-platform",
      "author": "",
      "categories": "Installation"
    }
    ,
  

    "bonita-7-8-installation-basic-bonita-platform-installation-bonitabpm-platform-setup": {
      "title": "Platform configuration",
      "content"     : "Platform configurationIn this section you will learn what the Platform setup tool is and how to use it to configure the Bonita Platform, manage your licenses (for Subscription users), and more…Note: First thing to know is that for all basic installation and start scenarios, you don’t need to use the setup tool. We made it easy for you by creating start-bonita.bat(for Windows) or start-bonita.sh (for Unix), a script that initializes, configures and starts the bundle, using the Platform setup tool.Platform setup tool overview and useStructureFunctionsPre-requisitesAdvanced use of the *Platform setup tool*Database configuration using system propertiesAdvanced database configuration using file internal.propertiesTroubleshootingPlatform setup tool overview and useThe Platform setup tool handles:  The creation of the database tables  The configuration of the Tomcat or WildFly bundle with this database without the need for a fully manual configuration  The management of Bonita Platform configuration (stored in the database)  The management of licenses (also stored in the database)It is located in both Tomcat and WildFly bundles, and also in the deploy bundle. In Tomcat and WildFly bundles, you can find the tool in the setup folder.StructureIt is composed of the following items:  platform_conf/  initial/: contains the default configuration of Bonita Platform, that can be customized and will be pushed when the database is created.  current/: contains configuration files after a pull from the database is made.  licenses/: (Subscriptions only) folder to put the license file to allow Bonita Platform to start without error.  sql/: SQL scripts used to create Bonita database tablesdatabase.properties: used as a simplified entry form to get property values to connect to the database. Those values will be used by the file internal.properties.  internal.properties: used internally by the setup tool to properly configure and initialize the bundle. It is made of both data entered in database.properties as well as other data like database driver class name, connection URL, etc. This file should not be modified manually in most cases, unless for specific use-cases like adding parameters in the connection URL or using a specific database driver.  setup.sh: Unix / Mac script to run.  setup.bat: Windows script to run.FunctionsThe script setup comes with 4 commands:  init, to initialize the databaseIt creates the database tables and pushes the initial configuration in the database.This initial configuration is taken from the platform_conf/initial folder.It is run by the global script start_bonita, but you can also insert it in your own scripts.Eg. setup.sh initEg. setup.sh init -Ddb.vendor=postgres (see Advanced use for information on using -D properties)  When db.vendor and bdm.db.vendor properties are both set to h2 - which is the default configuration - the init command asks you to confirm this choice before continuing. The following message is displayed:  [WARN] Default H2 configuration detected. This is not recommended for production. If this is not the required configuration, change file &#39;database.properties&#39; and run again.  Are you sure you want to continue? (y/n):If you want to bypass this confirmation prompt you can add the h2.noconfirm property to setup or start-bonita scripts.Eg. setup.sh init -Dh2.noconfirm  Eg. start-bonita.sh -Dh2.noconfirm  configure, to configure the server of a Bonita Tomcat / WildFly bundle to use the appropriate database: If run from inside a Bonita bundle, it configures the Application Server environment, so you don’t need to configure all Tomcat / WildFly basic configuration files manually.It is run by the global script start-bonita, but you can also insert it in your own scripts.Eg. setup.sh configure  You do not need to configure Tomcat / WildFly files directly anymore. The command setup configure does it for you.If you decide to do it anyway, the tool will overwrite your custom values (after storing a restore backup into folder tomcat-backups or wildfly-backups).If you need to finely tune the configuration, modify the following template files, as they serve as a basis for configuration:For Tomcat:  tomcat-templates/bitronix-resources.properties  tomcat-templates/bonita.xml  tomcat-templates/setenv.sh  tomcat-templates/setenv.batFor WildFly:  wildfly-templates/standalone.xml  pull, to retrieve the current configurationIt gets the current configuration of Bonita Platform from the database and saves it locally in the platform_conf/current folder.Note: You must pull the configuration from the database every time you need to update your license file or edit the configuration of Bonita Platform. Since some information is inserted by the platform itself in the database, this prevents database inconsistency.Eg. setup.sh pullpush, to update the configuration of Bonita Platform, and update your licenseIt gets the platform configuration you have edited locally in the folder platform_conf/current folder and pushes it to the database.To make the platform take your changes into account, you must (re-)start Bonita Platform.Eg. setup.sh push  Note that the Platform Setup tool does not need Bonita Server to be running for the configuration to be updated. However, the server needs to be restarted for the changes to be taken into account.Type setup help or setup help &amp;lt;command&amp;gt; to get detailed help on the tool syntax or on a specific command.Eg. setup.sh help configureKeep in mind that the folder platform_conf/initial is not used anymore once the platform has been initialized for the first time. To update your configuration, only the platform_conf/current folder is taken into account.Pre-requisitesBefore running it, make sure the setup tool is configured to point to the database of the Bonita Platform.Note: If you have already run start-bonita script inside a Tomcat bundle or a WildFly bundle, those steps are already done.Here is how to do so:  Create the database  Customize it so it works with Bonita  Modify the database.properties file: Set the right db vendor and change connection url, user credentials, database name and so on.  If you are using an Oracle or Microsoft SQL Server database, add the related JDBC driver in the lib folder.Advanced use of the Platform setup toolDatabase configuration using system propertiesInstead of modifying the database.properties file, you can set the required database values through the command line (with Java-like system properties).If these latter are defined, they have prevalence on the values defined in the database.properties file.e.g. for Unix command line:./setup.sh configure -Ddb.vendor=postgres -Ddb.server.name=localhost -Ddb.server.port=5432 -Ddb.database.name=bonita -Ddb.user=bonita -Ddb.password=bpm -Dbdm.db.vendor=postgres -Dbdm.db.server.name=localhost -Dbdm.db.server.port=5432 -Dbdm.db.database.name=business_data -Dbdm.db.user=bonita -Dbdm.db.password=bpme.g. for Windows command line:setup.bat configure &quot;-Ddb.vendor=postgres&quot; &quot;-Ddb.server.name=localhost&quot; &quot;-Ddb.server.port=5432&quot; &quot;-Ddb.database.name=bonita&quot; &quot;-Ddb.user=bonita&quot; &quot;-Ddb.password=bpm&quot;For Windows users: Due to Windows Batch limitations, only 8 parameters are supported.If you need to pass more than 8 parameters, modify file database.properties instead.Advanced database configuration using file internal.propertiesThe file internal.properties is used internally by the Platform setup tool to properly configure and initialize the bundle.It is made of both data entered in file database.properties as well as other data like database driver class name, connection URL, etc.This file should not be modified manually in most cases, unless for specific use-cases like adding parameters in the connection URL or using a specific database driver.This file contains the Database configuration information that are not inside file database.properties (database driver class name, connection URL, etc).Those information are used internally by the Platform setup tool to configure properly the bundle (See configure command) and the database initialization procedure (See init command).The Platform setup tool uses the values provided in file database.properties as replacement strings to the properties defined in file internal.properties. Those new processed values are then used by the tool.Usage:You are allowed to modify these values if, in the example of Oracle RAC, you need to add parameters in the connection URL, or for mysql you need to add characterEncoding or other parameters:   oracle.url=jdbc:oracle:thin:@(description=(address_list=(address=(protocol=tcp)(port=${db.server.port})(host=${db.server.name})))(connect_data=(INSTANCE_NAME=${db.database.name}))(source_route=yes))   oracle.bdm.url=jdbc:oracle:thin:@(description=(address_list=(address=(protocol=tcp)(port=${bdm.db.server.port})(host=${bdm.db.server.name})))(connect_data=(INSTANCE_NAME=${bdm.db.database.name}))(source_route=yes))   oracle.bdm.url=jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=myrac1.us.oracle.com)(PORT=1521))(ADDRESS=(PROTOCOL=TCP)(HOST=myrac2.us.oracle.com)(PORT=1521))(LOAD_BALANCE=ON)(FAILOVER=OFF)(CONNECT_DATA=(SERVICE_NAME=myrc.us.oracle.com)(FAILOVER_MODE=(TYPE=SELECT)(METHOD=BASIC))))   mysql.url=jdbc:mysql://${db.server.name}:${db.server.port}/${db.database.name}?dontTrackOpenResources=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;profileSQL=trueOr also if you need to use a specific database Driver java class name:   sqlserver.nonXaDriver=net.sourceforge.jtds.jdbc.DriverBut in most cases, you don’t need to modify this file.TroubleshootingIssue: When I run Platform setup tool, I get the exception Cannot determine database vendor (valid values are h2, postgres, sqlserver, oracle, mysql).Potential cause: property db.vendor is not found when reading file database.propertiesSolution: Edit file database.properties and ensure there is a valid db.vendor value. Also ensure the line is not commented (no # at the beginning of the line)Issue: My database name / password / … contains a backslash () character. It seems to be ignored in file database.propertiesCause: Backslash () characters are special characters in a .properties fileSolution: Replace your backslash () characters by double-backslashes () everywhere in file database.properties (and also in file internal.properties if you have modified it)",
      "url": " /bonita/7.8/installation/basic-bonita-platform-installation/BonitaBPM_platform_setup",
      "author": "",
      "categories": "Installation, Basic Bonita Platform installation"
    }
    ,
  

    "bonita-7-8-installation-basic-bonita-platform-installation-database-configuration": {
      "title": "Database creation and customization to work with Bonita",
      "content"     : "Database creation and settings to work with BonitaDatabase usageDefault H2 databaseSteps to switch to another RDBMSProprietary Jdbc driversCreate the database(s)Customize RDBMS to make it work with BonitaBundle database configurationDatabase usageBonita uses an RDBMS (Relational DataBase Management System) for the following purposes:  One database schema is required by Bonita Engine to store information about deployed process definitions, process configurations, history of process execution, users, as well as Bonita Platform configuration information.  We recommend that you configure a different database schema if your project uses business data.Bonita supports MySQL, PostgreSQL, SQL Server, and Oracle RDBMSs.You can find the list of RDBMSs versions supported on the supported database list page.Default H2 databaseBonita Studio, the WildFly bundle, the Tomcat bundle, and the deploy bundle come by default with an embedded H2 RDBMS. The database is automatically created at first startup, and can be used for all purposes described earlier.However, H2 is only suitable for testing purposes. When building a production environment, you must switch to another RDBMS.Steps to switch to another RDBMSPlease note this procedure cannot be performed using the Bonita Studio. The Bonita Studio can run only on the H2 Database. To use Bonita on another RDBMS, please use a bundle or set up a standalone server.Here are the steps to follow. They are the same for the engine database and the business data database:  Create the database  Customize RDBMS to make it work with Bonita  Add the JDBC driver to the bundle if the database is proprietary  Configure the bundle with database informationSteps 1 and 2 are detailed further down this page, steps 3 and 4 are part of the configuration part of Tomcat bundle and WildFly bundle pages.All RDBMSs require specific customization, which must be done before you complete your installation.If you do not complete the specific configuration for your RDBMS, your installation may fail.There is a known issue between Bitronix (the Transaction Manager shipped by Bonitasoft for the Tomcat bundle &amp;amp; inside Deploy bundle for Tomcat) and Microsoft SQL Server driver (refer to: MSDN note, Bitronix note).Therefore, using Bitronix as a Transaction Manager with SQL Server is not recommended.We recommend that you use the WildFly bundle provided by Bonitasoft.Proprietary Jdbc driversBonita provides out of the box the Jdbc drivers for H2, PostgreSQL and MySQL. For other RDBMS, you have to retrieve the related Jdbc drivers.SQL Server  Download the zip package of Microsoft SQL Server JDBC Driver 6.0 and unzip it.  Get the sqljdbc42.jar file from %JDBC_DRIVER_INSTALL_ROOT%sqljdbc_6.0enujre8Oracle Database  For Oracle 11.2.0.x, download ojdbc6.jar  For Oracle 12.1.0.x, download ojdbc7.jarCreate the database(s)The first step in configuring Bonita with your RDBMS is to create the new databases (i.e. schemas): one for engine data, and another one, optionally, if you use business data.To do so, you need a RDBMS user account that has sufficient privileges (i.e. privileges to create new schema).Also, note that the owner of the new schemas must own the following privileges:  CREATE TABLE  CREATE INDEX  SELECT, INSERT, UPDATE, DELETE on created TABLECREATE TABLE and CREATE INDEX privileges are not required after first start in normal use.If the same SQL user is used with the migration tool, then this user needs such grants.To create the database(s), we recommend that you refer to your RDBMS documentation:  PostgreSQL  Oracle database  SQL Server  MySQLYour database(s) must be configured to use the UTF-8 character set. Also, you are recommended to configure the database(s) to be case-insensitive so that searches in Bonita Portal are case-insensitive.Customize RDBMS to make it work with BonitaPostgreSQLConfigure the database to use UTF-8.Edit postgresql.conf and set a non-zero value for max_prepared_transactions. The default value, 0, disables prepared transactions, which is not compatible with Bonita Engine.The value should be at least as large as the value set for max_connections (default is typically 100).See the PostgreSQL documentation for details.Oracle DatabaseMake sure your database is configured to use the AL32UTF8 character set.If your database already exists, see the Oracle documentation for details of how to migrate the character set.Bonita Engine uses datasources that handle global transactions that span resources (XADataSource), so the Oracle user used by Bonita Engine, requires some specific privileges, and there are also specific settings for XA activation.Important information for a successful connectionThe procedure below is used to create the settings to enable Bonita Engine to connect to the Oracle database.It is assumed in the procedure that:  Oracle product is already installed and running  An ‘Oracle’ OS user is already created  A database already exists  The environment is already set:  ORACLE_HOME=/u01/app/oracle/product/11.2.0/dbhome_1  ORACLE_SID=...Connect to the database as the System Administrator.oracle@ubuntu:~$ sqlplus / as sysdbaCheck that the following components exist and are valid:SQL query &amp;gt;select comp_name, version, status from dba_registry;Comp_name  Version  Status  Oracle Database Catalog Views  11.2.0.1.0  VALID  Oracle Database Packages and Types  11.2.0.1.0  VALID  JServer JAVA Virtual Machine  11.2.0.1.0  VALID  Oracle XDK  11.2.0.1.0  VALID  Oracle Database Java Packages  11.2.0.1.0  VALID  Add XA elements:SQL query &amp;gt;@/u01/app/oracle/product/11.2.0/dbhome_1/javavm/install/initxa.sqlThis only needs to be done once, after the installation of Oracle.Create the database user to be used by the Bonita Engine and grant the required rights:SQL query &amp;gt;@/u01/app/oracle/product/11.2.0/dbhome_1/rdbms/admin/xaview.sqlThe following queries must be done for each new user: i.e. one user = one database schema.SQL query &amp;gt;CREATE USER bonita IDENTIFIED BY bonita;GRANT connect, resource TO bonita IDENTIFIED BY bonita;GRANT select ON sys.dba_pending_transactions TO bonita;GRANT select ON sys.pending_trans$ TO bonita;GRANT select ON sys.dba_2pc_pending TO bonita;GRANT execute ON sys.dbms_system TO bonita;GRANT select ON sys.v$xatrans$ TO bonita;GRANT execute ON sys.dbms_xa TO bonita;GRANT FORCE ANY TRANSACTION TO bonita;  SQL ServerReminder: There is a known issue between Bitronix (the Transaction Manager shipped by Bonitasoft in the Tomcat bundle and in the Tomcat directories of the Deploy bundle) and the Microsoft SQL Server driver(refer to: MSDN note, Bitronix note).Therefore, using Bitronix as a Transaction Manager with SQL Server is not recommended. Our recommendation is to use the WildFly bundle provided by Bonitasoft.XA TransactionsTo support XA transactions, SQL Server requires a specific configuration.You can refer to MSDN for more information.Here is the list of steps to perform (as an example, the database name BONITA is used):  Download the zip package of Microsoft SQL Server JDBC Driver 6.0 and unzip it.  Copy the sqljdbc_xa.dll from %JDBC_DRIVER_INSTALL_ROOT%sqljdbc_6.0enuxax64 (x64 for 64 bit version of Windows, x86 for 32 bit version of Windows) to %SQLSERVER_INSTALL_ROOT%MSSQL13.&amp;lt;instance_name&amp;gt;MSSQLBinn.  Copy/paste the content of install.sql file (located in %JDBC_DRIVER_INSTALL_ROOT%sqljdbc6.0enuxa) to SQL Server Management Studio’s Query Editor.  Execute the query in the Query Editor.  To confirm successful execution of the script, open the “Object Explorer” and go to: Master &amp;gt; Programmability &amp;gt; Extended Stored Procedures. You should have 12 new procedures, each with a name starting with dbo.xp.sqljdbc_xa_.  Assign the new role ‘SqlJDBCXAUser’ to the user who owns the Bonita Engine database (bonitadev in our example). To do so, execute the following commands in SQL editor:USE master;GOCREATE LOGIN bonitadev WITH PASSWORD = &#39;secret_password&#39;;GOCREATE USER bonitadev FOR LOGIN bonitadev;GOEXEC sp_addrolemember [SqlJDBCXAUser], &#39;bonitadev&#39;;GOIn the Windows “Start” menu, select Administrative Tools-&amp;gt; Services.  In the “Services” window, make sure that the Distributed Transaction Coordinator service is set to start automatically. If it’s not yet started, start it.  Make sure that the other services it depends on, namely “Remote Procedure Call” and “Security Accounts Manager”, are also set to start automatically.  Run the dcomcnfg command, or go to the “Start” menu, then Administrative Tools &amp;gt; Component Services.  In the left navigation pane, navigate to Component Services &amp;gt; Computers &amp;gt; My Computer &amp;gt; Distributed Transaction Coordinator.  Select and right-click on Local DTC and then Properties.  Click on Security tab. Ensure that the checkbox for Enable XA Transactions is checked.  Click Apply, then click OK  Then stop and restart SQLServer.  Create the BONITA database: CREATE DATABASE BONITA GO.  Set bonitadev as owner of BONITA database (use, for example, ‘Microsoft SQL Management Studio’)Recommended configuration for lock managementRun the script below to avoid deadlocks:ALTER DATABASE BONITA SET SINGLE_USER WITH ROLLBACK IMMEDIATEALTER DATABASE BONITA SET ALLOW_SNAPSHOT_ISOLATION ONALTER DATABASE BONITA SET READ_COMMITTED_SNAPSHOT ONALTER DATABASE BONITA SET MULTI_USERSee MSDN.Recommended configuration for in-doubt xact resolutionRun the script below to avoid that the SQL Server changes the status of databases to SUSPECT during database server startup when in-doubt XA transactions are found.The value 2 in the block below means presume abort.To minimize the possibility of extended down time, an administrator might choose to configure this option to presume abort, as shown in the following examplesp_configure &#39;show advanced options&#39;, 1GORECONFIGUREGOsp_configure &#39;in-doubt xact resolution&#39;, 2 GORECONFIGUREGOsp_configure &#39;show advanced options&#39;, 0GORECONFIGUREGOSee in-doubt xact resolution Server Configuration Option.MySQLMaximum packet sizeMySQL defines a maximum packet size on the server side. The default value for this setting is appropriate for most standard use cases.However, you need to increase the packet size if you see the following error:Error: 1153 SQLSTATE: 08S01 (ER_NET_PACKET_TOO_LARGE) Message: Got a packet bigger than &#39;max_allowed_packet&#39; bytesYou need to update the file my.ini (for Windows) or my.cnf (for Linux) to avoid the ER_NET_PACKET_TOO_LARGE problem.Look for max_allowed_packet setting and increase the value.For more information, see the MySQL website.Surrogate characters not supportedMySQL does not support surrogate characters.If you want to use surrogate characters in your processes, you need to use another type of database.Bundle database configurationNow that your databases are created and customized to work with Bonita, you are ready to configure Bonita bundles, either the Tomcat bundle or the WildFly bundle.",
      "url": " /bonita/7.8/installation/basic-bonita-platform-installation/database-configuration",
      "author": "",
      "categories": "Installation, Basic Bonita Platform installation"
    }
    ,
  

    "bonita-7-8-installation-basic-bonita-platform-installation-deploy-bundle": {
      "title": "Deploy bundle",
      "content"     : "Deploy bundleWhat is the purpose of the Bonita Deploy bundle?Deploy bundle contentInstallationTomcat installationInstall Bonita Platform in TomcatConfigure data sourcesConfigure RDBMS vendorAdd Jdbc driverWildfly installationInstall Bonita Platform in WildflyConfigure data sourcesConfigure RDBMS vendorAdd Jdbc driverLicense installationDatabase initializationNext stepsWhat is the purpose of the Bonita Deploy bundle?  The Bonita Deploy bundle is used if you have already installed a Java EE Application Server.  The Bonita Deploy bundle is a way of setting up a Bonita Platform. You’ll be able to get a setup quite similar to WildFly or Tomcat bundle.  It’s also used to package other tools such as the LDAP synchronizer.This installation procedure only specifically targets the Java EE application Servers that have been installed under a single root folder (typically, from a .zip file).Thus, for installations using native distribution packages (that more often than not split the binaries and the configuration files into separate folder hierarchies),it would be up to you to adapt the documented steps to your very own folder layout.Deploy bundle content  Tomcat-version: a folder/file structure to be merged with an existing setup of Apache Tomcat, in order to install Bonita Portal and Bonita Engine.  Wildfly-version: a folder/file structure to be merged with an existing setup of WildFly in order to install Bonita Portal and Bonita Engine.  setup: a command-line tool that creates the Bonita Platform before it can be run. It creates the Bonita Platform internal database, and stores the runtime configuration.It is useful to update the configuration, locally or from a remote computer.  Request_key_utils-key_utils.version: include script files to generate license request keys.  BonitaSubscription-_LDAPSync.version_-LDAP-Synchronizer : LDAP synchronizer to synchronize your organization in Bonita with your LDAP  cas-cas.version-module: Module files and description to enable CAS dependency to bonita EAR.  License: license files that apply to Bonita components.  README.TXT: See this file for more details about the deploy.zip contents and structure.Installation  Download the deploy.zip file from the Bonitasoft download page for the Community edition or from the Customer Portal for Subscription editions.  Unzip the deploy.zip into a temporary folder (DEPLOY_ZIP_HOME).  Follow the Tomcat bundle steps or WildFly bundle stepsTomcat installationInstall Bonita Platform in TomcatCopy all files and directories from DEPLOY_ZIP_HOME/Tomcat-8.5.31/server to your Tomcat root directory (TOMCAT_HOME).Some configuration files from the deploy zip will overwrite some default tomcat configuration files. Proceedwith care in a tomcat where other applications are already installed.There is an issue on tomcat 8.0.32 preventing the portal Look &amp;amp; feel to be compiled. If you deploy bonita on an existing tomcat installation, make sure it is a different version of tomcat (preferably 8.5.x with x&amp;gt;=23).Configure data sourcesConfiguration of data source for Tomcat is split in two parts: because Tomcat doesn’t support JTA natively,one data source will be configured in the Bitronix configuration file and the other data source will be configuredin the standard Tomcat context configuration file.Non-transactional data source  Open the file TOMCAT_HOME/conf/Catalina/localhost/bonita.xml  For Bonita Standard data source, remove or comment out the lines regarding the h2 database.  Uncomment the lines matching your RDBMS.  Update following attributes value:  username: your RDBMS user name.  password: your RDBMS password.  url: the URL, including the RDBMS server address, RDBMS server port and database (schema) name.Repeat operations 2. to 4. for Business Data data sourceJTA data source (managed by Bitronix)  Open the file TOMCAT_HOME/conf/bitronix-resources.properties  For Bonita Standard data source, remove or comment out the lines regarding the h2 database.  Uncomment the lines matching your RDBMS and edit values for each settings (resource.ds1.*) according to your database installation.  Repeat operations 2. and 3. for Business Data data source (resources.ds2.*)Configure RDBMS vendor  Open the file TOMCAT_HOME/bin/setenv.(bat  sh)  Change the value of sysprop.bonita.db.vendor according to your RDBMS vendor  Change the value of sysprop.bonita.bdm.db.vendor according to your RDBMS vendorAdd Jdbc driverYou need to add your jdbc driver in TOMCAT_HOME/lib. MySQL and PostgreSQL drivers can be found in deploy bundle under DEPLOY_ZIP_HOME/setup/lib directory. For other RDBMS, use the jdbc driver provided by your RDBMS vendorWildfly installationInstall Bonita Platform in WildflyCopy all files and directories from DEPLOY_ZIP_HOME/wildfly-10.1.0.Final/server to your Wildfly root directory (WILDFLY_HOME).Configure data sources  Open the file WILDFLY_HOME/standalone/configuration/standalone.xml  For Bonita Standard data source, remove or comment out the default definition for h2.  Uncomment the settings matching your RDBMS vendor.  Modify the values of the following settings to your configuration: server address, server port, database name, user name and password.  Repeat operations 2. to 4. for Business Data data sourceConfigure RDBMS vendor  Open WILDFLY_HOME/standalone/configuration/standalone.xml and look for system-properties tag  Set the value for sysprop.bonita.db.vendor (Bonita Platform database vendor)  Set the value for sysprop.bonita.bdm.db.vendor (Business Data database vendor)Add Jdbc driver  Create a folder structure under WILDFLY_HOME/modules folder. Refer to the table below to identify the folders to create. The last folder is named main for all JDBC drivers.Database vendor  Module folders  Module description file  PostgreSQL  modules/org/postgresql/main  module.xml           Oracle  modules/com/oracle/main  module.xml           SQL Server  modules/com/sqlserver/main  module.xml           MySQL  modules/com/mysql/main  module.xml         Put the driver jar file in the relevant main folder.  In the same folder as the driver, add the module description file, module.xml. This file describes the dependencies the module has and the content it exports. It must describe the driver jar and the JVM packages that Wildfly does not provide automatically. The exact details of what must be included depend on the driver jar. Caution: you might need to edit the module.xml in order to match exactly the JDBC driver jar file name.License installationIf you are installing a Subscription edition, you need to request a license.When you receive your license, copy the file to the DEPLOY_ZIP_HOME/setup/platform_conf/licenses folder of your application server.Database initializationWe assume here that the database has already been created and configured for Bonita.Once created and configured you need to initialize it using the setup tool provided in the deploy bundle archive.This will create database schema and initial values.  In DEPLOY_ZIP_HOME/setup folder, edit the file database.properties with properties matching your rdbms. Beware of backslash characters.  In DEPLOY_ZIP_HOME/setup/lib add your jdbc driver if needed (only for Microsoft SQL Server or Oracle, see proprietary jdbc drivers)  In DEPLOY_ZIP_HOME/setup folder, run setup.(sh|bat) initNext stepsYou’re done with Bonita installation. You can now start your application server as usual.When you have finished installing the deploy bundle, complete the setup of your system by validating the installation, setting passwords, and creating the Administrator user.",
      "url": " /bonita/7.8/installation/basic-bonita-platform-installation/deploy-bundle",
      "author": "",
      "categories": "Installation, Basic Bonita Platform installation"
    }
    ,
  

    "bonita-7-8-installation-basic-bonita-platform-installation-first-steps-after-setup": {
      "title": "First steps after setup",
      "content"     : "First steps after setupThis page explains the post-installation setup tasks that you must carry out.Check the installationSecurity Best PracticesWhen installing BonitaWhen developping using BonitaCreate a Bonita Portal administratorCheck the installationTo verify that the installation was successful and the database is correctly configured, connect to Bonita Portal.In the URL field of your web browser, enter the local host address, e.g. http://localhost:8080/bonita.Note: If the Bonita Portal login page is not displayed, empty your browser cache and cookies and then reload the page.At this stage no organization information is loaded: only the technical user account exists.Security Best PracticesThere are a number of ways you can improve the security of your platform.When installing BonitaChange default password for Technical User and System AdministratorSystem Administrator and Technical User accounts allow corresponding user(s) to completely configure Bonita. As for demo and ease of installation purposes, Bonita is delivered with default user and password for these two accounts. Such credentials are accessible in the documentation over the Internet. It’s highly recommended to change such passwords and replace them with strong ones to better protect administration consoles. Use HTTPS for all communicationsHTTPS helps with the protection of web application data from unauthorized disclosure and modification when it is transmitted between clients (web browsers) and the web application server. Session cookies, authentication credentials and any sensitive data  are considered as application data. Bonita already supports HTTPS functionality. To better protect your deployed application, it is highly recommend to enable HTTPS for all communication towards the web server. Please refer to OWASP TLS Certificates and Bonita’s SSL Documentation to securely implement this functionality for your application.Enforce strong secure password policies to Bonita usersA key security concern when using passwords for authentication is password strength. A “strong” password policy makes it difficult or even improbable for one to guess the password through either manual or automated means. So if you are using Bonita’s default authentication mechanism, it is highly recommended that you apply the password policies and enforce the users to choose strong and secure passwords. Such functionality is already provided by Bonita (See Strong Password Policies). It is recommended to activate this option in the deployed application to better protect your application and users.Choose a strong password for your databaseThe database is at the heart of your application. It is where all entreprise data (sensitive or non-sensitive) is stored. As a result, the database username and password are of great value to the business and they need to be protected. It is highly recommended to choose strong, random and long passwords, since they make it difficult or even improbable for one to guess the password through either manual or automated means. Choose a strong password for your connectorsIn Bonita, connectors enable connections to your local information system or online services. The authentication credentials used for these connections are of great value to the business and as a result, they need to be protected. It is highly recommended to choose strong, random and long passwords, as explained above, to makes it difficult or even improbable for one to guess the password. Deactivate or limit the usage of Bonita Engine APIIf Bonita Engine API is of no use for your application, it is highly recommended to deactivate it in the configuration files in your deployment environment. Otherwise, its usage must be limited to administrators using a local connection or authorized IP addresses.Protect your web server configuration fileThe web server configuration (Tomcat, WildFly, etc) must be protected. This implies limiting access to the file so that it could be read only by the user that web server process runs as and root (or the administrator on Windows). It should be also noted that the file must be saved outside of web root directory (as an example, here are some security tips for Apache Tomcat: Ref1, Ref2)When developping using BonitaOpt for a strong authentication mechanismAuthentication is the process of verification that an individual, entity or website is who it claims to be. Today authentication shall be one of the main functionalities of modern web applications. Bonita provides you with a wide range of authentication methods. However, for ease of use and deployment purposes, Bonita can be also configured with ”No_Authentication” option. This is ONLY provided for users for whom Bonita does not support the authentication method in place. Other than this special case, ”No_Authentication” option shall be always avoided and the users shall opt for a strong authentication option, e.g. SSO.Perform input validation in your applications and extensionsInput validation is performed to ensure only properly formed data is entering the workflow in an information system, preventing malformed data from persisting in the database and triggering malfunction of various downstream components.If you use BonitaStudio for developing your forms, then define authorized min and max values, max length and type for input fields.For more information, please take look at the REST API authorization](/bonita_doc/bonita/7.8/installation/advanced-bonita-platform-installation/security-and-authentication/rest-api-authorization) and the other features relating to  that are available in Bonita and in your operating system, and update your platform as required for your production environment.Create a Bonita Portal administratorCreate a user with the “administrator” profile:Note: do not create a user or an administrator with the same login and password as the technical users (platform and tenant)  Log in to Bonita Portal as the technical user.Note: If your system is using single sign-on with CAS, you need to log in with the following URL: http://hostname:port/bonita/login.jsp?redirectUrl=portal/homepage.  Create a user with the standard profile.  Go to Organization &amp;gt; Profiles. Select “Administrator” profile.  Click on the “More” button (in the top right corner).  Under “Users mapping”, click on “Add a user”.  Select your user and click on the “Add” button. Log out as the Technical user and log back in as the newly created user with administrative rights.  Create users with the standard profile.  You can add newly created users to the “User” (standard) profile or to a custom profile.If you already have a system that stores information about end users, you can use it to create user accounts in Bonita.If you use an LDAP or Active Directory system, you can use the LDAP synchronizer tool to keep the Bonita Portal organization synchronized with it.",
      "url": " /bonita/7.8/installation/basic-bonita-platform-installation/first-steps-after-setup",
      "author": "",
      "categories": "Installation, Basic Bonita Platform installation"
    }
    ,
  

    "bonita-7-8-installation-basic-bonita-platform-installation-hardware-and-software-requirements": {
      "title": "Hardware and software requirements",
      "content"     : "Hardware and software requirementsHardwareSoftwareFixing procedureHardwareNote: The hardware recommended for Bonita Platform is strongly dependent on your environment andprocesses (number of processes instances, number of current users, operations and complexity…).Hardware required for Bonita Platform (Bonita Engine and Bonita Portal)| Type | Minimum | Recommended ||:-|:-|:-|| Processors | 4 CPU cores | 4 CPU cores or more || Memory (RAM) | 4 GB | 8 GB or more || Disk space | 10 GB | 30 GB or more, depending on usage |SoftwareSoftware required for Bonita Platform (Bonita Engine and Bonita Portal).| | Version|:-|-| Operating system || Microsoft Windows Server | 2016 64 bits and higher || Red Hat Enterprise Linux |  6.5 64 bits and higher || Ubuntu | 16.04 LTS 64 bits and higher || Java Virtual Machine || Oracle Java SE Runtime Environment | 8u112 (see note 1) || OpenJDK | 8u112 (see note 1) || Application Server || Apache Tomcat | 8.5.x (x &amp;gt; 23) || Red Hat WildFly | 10.1.x || Database | (see note 2)| MySQL | 5.5.27 and higher (see note 3) || PostgreSQL | 9.3 and higher || SQL Server | 2016 (see note 4) || Oracle  | 11gR2 (11.2.0.x) and 12c (12.1.0.x.y) || Browser || Mozilla Firefox | latest version || Google Chrome | latest version (see note 5) || Microsoft Edge | latest version || Internet Explorer | 11.0.x || Mobile || Mozilla Firefox | latest version || Google Chrome | latest version || Apple Safari | latest version |Notes:  Bonita can be executed on Java 8 and above. All development artifacts (connectors, REST API extensions, etc) must be compiled with Java 8 byte code (target version).  Your database must be configured to use the UTF-8 character set.  MySQL must be configured with innoDB storage engine.  There is a known issue between Bitronix (the transaction manager shipped by Bonitasoft for the Tomcat bundle and inside the Deploy bundle for Tomcat) and Microsoft SQL Server JDBC driver(refer to: MSDN note, Bitronix note).Therefore, using Bitronix as a transaction manager with SQL Server does not work and is not supported. To use SQL Server database requires that you use the WildFly bundle provided by Bonitasoft.  Chrome version 60.0.3112 introduced an incompatibility impacting the functionality of Bonita Portal. So from that Chrome version onwards, once Bonita Platform is installed, apply the following procedure to resolve this issue:Fixing procedureSubscription usersNote: In order to apply this procedure, you MUST use a Chrome browser version that doesn’t suffer from the incompatibility, or you can use Firefox, Internet Explorer/Edge or Safari, for example.  Log in to Bonita Portal as Administrator.  In the menu, click on ‘Portal’.  Click on ‘Export the current Look&amp;amp;Feel’.  Make a back-up copy of the exported file.  Unzip the exported file ‘portal-theme.zip’.  Edit ‘BonitaConsole.html’ file:  In the &amp;lt;head&amp;gt; section, add the code below:&amp;lt;script&amp;gt;// Monkey Patch xhr// Due to a specification change in the xhr.getAllResponseHeaders method Bonita Portal does not behave as expected // in browsers that implement this new specification (currently only Chrome &amp;gt;60).// This patch fixes xhr.getAllResponseHeaders unwanted behavior within Bonita Portal context//See https://bugs.chromium.org/p/chromium/issues/detail?id=749086//See https://github.com/whatwg/xhr/issues/146(function (xhr) {var caseSensitiveHeaders = [&#39;Content-Range&#39;, &#39;X-Bonita-API-Token&#39;];  var getAllResponseHeaders = xhr.getAllResponseHeaders;  xhr.getAllResponseHeaders = function () {var headers = getAllResponseHeaders.apply(this);for (var i = 0; i &amp;lt; caseSensitiveHeaders.length; i++) {headers = headers.replace(new RegExp(&#39;^&#39; + caseSensitiveHeaders[i].toLowerCase(), &#39;m&#39;), caseSensitiveHeaders[i]);}return headers;}})(XMLHttpRequest.prototype) &amp;lt;/script&amp;gt;  Zip all the files and folders again into ‘portal-theme.zip’. (BEWARE: make sure not to zip the ‘portal-theme’ folder, but its contents. If the ‘portal-theme.zip’ contains a ‘portal-theme’ folder at the base, Bonita Portal will not recognize it as a valid zip structure.)  In the portal, click on ‘Import and apply a new Look&amp;amp;Feel’ and choose the updated ‘portal-theme.zip’ file.  Back to the Chrome update 60 browser, empty the cache.Community users  In an installed Bonita bundle, edit file ‘server/webapps/bonita/portal/scripts/includes/common.js’:  Add the code below before or after the existing code:`  // Monkey Patch xhr// Due to a specification change in the xhr.getAllResponseHeaders method Bonita Portal does not behave as expected // in browsers that implement this new specification (currently only Chrome &amp;gt;60).// This patch fixes xhr.getAllResponseHeaders unwanted behavior within Bonita Portal context//See https://bugs.chromium.org/p/chromium/issues/detail?id=749086//See https://github.com/whatwg/xhr/issues/146(function (xhr) {var caseSensitiveHeaders = [&#39;Content-Range&#39;, &#39;X-Bonita-API-Token&#39;];var getAllResponseHeaders = xhr.getAllResponseHeaders;xhr.getAllResponseHeaders = function () {var headers = getAllResponseHeaders.apply(this);for (var i = 0; i &amp;lt; caseSensitiveHeaders.length; i++) {headers = headers.replace(new RegExp(&#39;^&#39; + caseSensitiveHeaders[i].toLowerCase(), &#39;m&#39;), caseSensitiveHeaders[i]);}return headers;}})(XMLHttpRequest.prototype)`  Back to the Chrome update 60 browser, empty the cache.",
      "url": " /bonita/7.8/installation/basic-bonita-platform-installation/hardware-and-software-requirements",
      "author": "",
      "categories": "Installation, Basic Bonita Platform installation"
    }
    ,
  

    "bonita-7-8-installation-basic-bonita-platform-installation-licenses": {
      "title": "Licenses",
      "content"     : "LicensesNote: For Enterprise, Performance, Efficiency, and Teamwork editions only.Bonita 7.1 introduces a case-counter mechanism to align with the Bonita Subscription edition licensing model. This page explains how to manage the license for your Bonita Platform.The License menu in Bonita Portal displays information about the current license. This information is available to the platform administrator only.The license for Bonita Studio is managed through a wizard when you start the studio for the first time after installation (or after the previous license expires).Case-counter licensingGet a new licenseGenerate the request keyGenerate the new licenseInstall the licenseLicense renewal schedulingCase-counter licensingA case-counter license defines the maximum number of cases (process instances) that the platform is permitted to start in the counter period.The counter period is typically one year and starts when your Subscription starts or on the anniversary.Each time a case starts, the case counter is increased by one.Case-counter licenses are available for development and for production. A development license must not be used for production, and typically has a lower case limit than a production license.The maximum number of cases is defined in your commercial contract, in discussion with your sales person.You can monitor the case counter using Bonita Portal License page in the Administrator profile, or using the REST API to create a custom monitoring / alerting tool.Those two means also allow you to check the expiration date of the license.When the case counter reaches the limit set in the license, no more cases can be started. Active cases continue to completion.If a user tries to submit an instantiation form after the case counter maximum limit is reached, the form is not submitted and an error message is displayed.Note: If the process still uses legacy, 6.x, forms, there is no error message.Get a new licenseYour contract with Bonitasoft specifies the details of the subscription you have purchased, including the edition, and case limit for case-counter licensing. A license matching the subscription details is generated on request.If this is a license renewal, you can find your request key in the Bonita Portal License menu of the Administrator profile or using the platform REST API.A request key looks like this: (CIVpYDRB8bhouXdWadLY1M9TVctwYUYuv7ou7sqeIrSUSuCqUIkjQAs0ZGgzbtqv3gguFOHlyMZkyvwdr4HLgg==).If this is the first time you generate a license, you need to generate a request key.Generate the request keyOn the server where you installed Bonita Platform:  Go to the request_key_utils folder  Run the generateRequestKey.bat script (for Windows) or the generateRequestKey.sh script (for other operating systems)Generate the new licenseCopy your request key and go to the Customer Portal license request page.Then fill in the details in the form, copy the request key in the Request Key field, and submit.Note: keep the brackets () in the key; if the key is separated by a line break, remove it and put the key on a single line.The license file will be sent to you by email.Install the licenseWhen you receive the license file (.lic file extension):  If this is the first time you start the bundle, copy the file to the&amp;lt;TOMCAT_HOME&amp;gt;/setup/platform_conf/licenses folder or &amp;lt;WILDFLY_HOME&amp;gt;/setup/platform_conf/licenses/ folder before starting the bundle.  If the bundle has already been started, you need to use the Platform setup tool.License renewal schedulingIf you are still within the Subscription period when you approach the license expiration date, request a new license that starts on the last day of your current license.Put the license you receive in the license folder alongside the existing license.When you reach the “changeover” date for the licenses, Bonita Engine switches automatically from the expired license to the valid one.Note: We recommend to regularly remove license files of expired licenses from the server.If you approach both the license expiration date and the end of the Subscription period, contact your sales person.The case counter is reset at the end of the counter period.If your license expiration date comes before the end of the counter period, get and install a new license as usual. The case counter will continue from its current value under the new license.If you approach or reach the case counter limit before the end of the license period, contact your sales person to get a new license with additional cases.",
      "url": " /bonita/7.8/installation/basic-bonita-platform-installation/licenses",
      "author": "",
      "categories": "Installation, Basic Bonita Platform installation"
    }
    ,
  

    "bonita-7-8-installation-basic-bonita-platform-installation-tomcat-bundle": {
      "title": "Tomcat bundle",
      "content"     : "Tomcat bundleYou will find here steps needed to install and configure a Tomcat bundle.The Tomcat bundle is a .zip archive that contains the Apache Tomcat Java EE application server prepackaged along with Bonita and Bonita platform setup tool.The Tomcat bundle is a regular .zip archive based on Tomcat zip distribution.There is a known issue between Bitronix (the Transaction Manager shipped by Bonitasoft in the Tomcat bundle) and the Microsoft SQL Server JDBC driver(refer to: MSDN note, Bitronix note).Therefore, using Bitronix as a Transaction Manager with SQL Server is not recommended. Our recommendation is to use the WildFly bundle provided by Bonitasoft.Installation of the Tomcat bundleDownload and unzip the Tomcat bundleGet and install a license (Subscription editions only)Change the default credentials (optional, recommended for production)Configure the Tomcat bundleStarting and shutting down TomcatAfter installationFirst steps after installationConfiguration updateLicense updateTroubleshootingInstallation of the Tomcat bundleDownload and unzip the Tomcat bundleDownloadFor the Community edition:  Go to the Bonitasoft website and get the Bonita Community edition Tomcat bundle.For a Subscription edition:  Go to the Customer Portal and download the Bonita Subscription edition Tomcat bundle.UnzipThe fully qualified folder path (including the Bonita-x.y.z-Tomcat-8.5.31 folder) to the folder where you unzip the Tomcat bundle is referred to as &amp;lt;TOMCAT_HOME&amp;gt;. We recommend the following locations:  Windows: C:Bonita.  Linux: in /opt/Bonita. Make sure that Linux user account used to execute Tomcat is the owner of the folders and files.Whatever location you choose, do not leave blank spaces in the path to the directory, nor in the folder name.Content of the Tomcat bundleThe Tomcat bundle is based on a standard Tomcat installation with the following additions:  setup/tomcat-templates/setenv.bat: script to configure JVM system properties for Windows.  setup/tomcat-templates/setenv.sh: script to configure JVM system properties for Linux.  setup/tomcat-templates/bonita.xml: Tomcat context configuration for Bonita web application. Define data sources used by Bonita Engine.  server/conf/catalina.properties: modified to include lib/bonita folder to Tomcat classpath.  server/conf/context.xml: modified to add JTA support using Bitronix library.  server/conf/logging.properties: modified to create a log file dedicated to Bonita.  server/conf/server.xml: modified to add listener for Bitronix and h2 (see below for modification needed if you want to switch to another RDBMS).  server/conf/bitronix-*.properties: configuration files for Bitronix.  server/lib/bonita: extra libraries needed by Bonita. The following libraries are included: Bitronix JTA Transaction Manager, h2, SLF4J (required by Bitronix).  server/request_key_utils: folder containing script to generate license request keys (Subscription editions only).  server/webapps/bonita.war: the Bonita web application.  setup/: a tool to manage Bonita Platform configuration, stored in database instead of filesystem. Also ships a tool to centralize all the required Tomcat bundle configuration.  start-bonita.bat: script to start the bundle on Windows.  start-bonita.sh: script to start the bundle on Linux.  stop-bonita.bat: script to stop the bundle on Windows.  stop-bonita.sh: script to stop the bundle on Linux.Note: Beginning with version 7.3.0, Bonita Platform configuration, including the license file, is stored in the same database as the Bonita Engine data, namely in the CONFIGURATION table.The initialization of this configuration happens during start-bonita.bat (for Windows) or start.bonita.sh (for Linux) execution.Once initialized, to update this configuration, use the Platform setup tool embedded in Bonita bundles.Get and install a license (Subscription editions only)First, request a license.If this is the first time you generate a license, you need to generate a request key.Generate the request keyOn the server where you installed Bonita Platform:  Go to the request_key_utils folder  Run the generateRequestKey.bat script (for Windows) or the generateRequestKey.sh script (for Linux)Request the new license  Copy your request key and go to the Customer Portal license request page.  Fill in the details in the form, copy the request key in the Request Key field, and submit.   Note: keep the brackets () in the key; if the key is separated by a line break, remove it and put the key on a single line.The license file will be sent to you by email.When you receive your license:Copy the file to the &amp;lt;TOMCAT_HOME&amp;gt;/setup/platform_conf/licenses folder before starting the bundle.Change the default credentials (optional, recommended for production)As a security precaution, we strongly recommend that before you start your application server, you change the default username and password used for the platform administrator and for the default tenant administrator.Platform administratorThe username and password are defined in a text file:  Before the very first Tomcat start: &amp;lt;TOMCAT_HOME&amp;gt;/setup/platform_conf/initial/platform_engine/bonita-platform-community-custom.properties  After the first Tomcat start: &amp;lt;TOMCAT_HOME&amp;gt;/setup/platform_conf/current/platform_engine/bonita-platform-community-custom.propertiesThe properties are listed below:  platformAdminUsername defines the username (default platformAdmin)  platformAdminPassword defines the password (default platform)This password is used for platform-level administration tasks, such as creating a tenant.Tenant administratorEach tenant has an administrator, with a tenant-specific username and password. The tenant administrator is also known as the tenant technical user.When the platform is created, default values for the tenant administrator username and password are defined in the file &amp;lt;TOMCAT_HOME&amp;gt;/setup/platform_conf/initial/tenant_template_engine/bonita-tenant-community-custom.properties, by the following properties:  userName defines the username (default install)  userPassword defines the password (default install)When you create a tenant, the tenant administrator is created with the default username and password, unless you specify new values. Change these tenant-specific credentials for an existing tenant by updating the userName and userPassword properties in &amp;lt;TOMCAT_HOME&amp;gt;/setup/platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_engine/bonita-tenant-community-custom.properties.For the default tenant, the tenant administrator username and password must also be changed in file:  Before the very first Tomcat start: &amp;lt;TOMCAT_HOME&amp;gt;/setup/platform_conf/initial/platform_portal/platform-tenant-config.properties  After the first Tomcat start: &amp;lt;TOMCAT_HOME&amp;gt;/setup/platform_conf/current/platform_portal/platform-tenant-config.properties,For further details and a better understanding, please read the section Tenant administrator credentials.Configure the Tomcat bundleIf you just want to try Bonita Platform with the embedded H2 database (only for development and testing phases of your project), you can skip the next paragraph.For production, you are recommended to use one of the supported databases, with the following steps.  Make sure your databases are created and customized to work with Bonita.  Edit file &amp;lt;TOMCAT_HOME&amp;gt;/setup/database.properties and modify the properties to suit your databases (Bonita internal database &amp;amp; Business Data database). Beware of backslash characters.  If you use Microsoft SQL Server or Oracle database, copy your jdbc driver in &amp;lt;TOMCAT_HOME&amp;gt;/setup/lib/ folder.  Run &amp;lt;TOMCAT_HOME&amp;gt;setupstart-bonita.bat (Windows system) or &amp;lt;TOMCAT_HOME&amp;gt;/setup/start-bonita.sh (Unix system) to run Bonita Tomcat bundle (see Tomcat start script)The start-bonita script does the following:  Runs the setup init command:  initializes the Bonita internal database (the one you have defined in file &amp;lt;TOMCAT_HOME&amp;gt;/setup/database.properties): creates the tables that Bonita uses internally + stores the configuration in the database.  installs the license files (Subscription editions only) in the database.Runs the setup configure command: The Setup Configure command configures the Tomcat environment to access the right databases:  updates the file setenv.sh (Unix system) or setenv.bat (Windows system) to set the database vendor values for Bonita internal database &amp;amp; Business Data database  updates the file &amp;lt;TOMCAT_HOME&amp;gt;/setup/tomcat-templates/bitronix-resources.properties with the values you set in file database.properties Bonita internal database &amp;amp; Business Data database  updates the file &amp;lt;TOMCAT_HOME&amp;gt;/setup/tomcat-templates/bonita.xml with the values you set in file database.properties  copies your database vendor-specific drivers from &amp;lt;TOMCAT_HOME&amp;gt;/setup/lib to &amp;lt;TOMCAT_HOME&amp;gt;/setup/server/lib/bonitaStarts the Tomcat bundleFor advanced server configuration needs: check out Bundle configuration to finely tune your Tomcat bundle, using templates used by Bonita.Starting and shutting down TomcatTomcat start scriptTomcat can be started by executing the following script:  Windows: &amp;lt;TOMCAT_HOME&amp;gt;start-bonita.bat  Linux: &amp;lt;TOMCAT_HOME&amp;gt;/start-bonita.shTomcat stop scriptTomcat can be shut down by executing the following script:  Windows: &amp;lt;TOMCAT_HOME&amp;gt;stop-bonita.bat  Linux: &amp;lt;TOMCAT_HOME&amp;gt;/stop-bonita.shTroubleshooting:If you see checkThreadLocalMapForLeaks errors, they probably indicate that Tomcat is shutting down before all work threads are completed.You can increase the work service termination timeout to ensure that work is complete before shutdown.After installationFirst steps after installationOnce you have your Tomcat bundle up and running, complete these few extra steps to get Bonita Platform fully operational.Configuration updateTo update Bonita configuration after the first run, take a look at the platform setup toolNote:  The file database.properties is the entry point to configure the Tomcat environment and the Bonita Platform configuration.  You can use command line arguments to specify database properties directly from the command line. Use &amp;lt;TOMCAT_HOME&amp;gt;/setup/setup.sh --help on Linux or &amp;lt;TOMCAT_HOME&amp;gt;setupsetup.bat --help on Windows to have a list of available options.License updateTo update the licenses after the first run, take a look at the platform setup toolTroubleshootingProblem:My Microsoft SQL Server or Oracle database drivers do not seem to be taken into account when I put them in &amp;lt;TOMCAT_HOME&amp;gt;/setup/lib folder.Cause:Driver file must respect some naming convention.Solution:For Microsoft SQL Server, rename it so that the name contains at least the word sqlserver or sqljdbc or mssql (case insensitive)For Oracle, rename it so that the name contains at least the word oracle or ojdbc (case insensitive)Issue: When I run start-bonita.sh or start-bonita.bat, I get the error message Invalid Java version (1.7) &amp;lt; 1.8. Please set JRE_HOME or JAVA_HOME variable to a JRE / JDK 1.8+Cause: Bonita 7.5+ requires Java 1.8 to runSolution: Ensure your running environment has a JDK or JRE 1.8 installed and set either JRE_HOME or JAVA_HOME environment variable to point to it.",
      "url": " /bonita/7.8/installation/basic-bonita-platform-installation/tomcat-bundle",
      "author": "",
      "categories": "Installation, Basic Bonita Platform installation"
    }
    ,
  

    "bonita-7-8-installation-basic-bonita-platform-installation-wildfly-bundle": {
      "title": "WildFly bundle",
      "content"     : "WildFly bundleYou will find here steps needed to install and configure a WildFly bundle.The WildFly bundle is a zip archive that contains the Red Hat WildFly Java EE application server packaged with Bonita and Bonita platform setup tool.The WildFly bundle is a regular zip archive based on the WildFly zip distribution.Installation of the WildFly bundleDownload and unzip the WildFly bundleGet and install a license (Subscription editions only)Change the default credentials (optional, recommended for production)Configure the WildFly bundleStarting and shutting down WildFlyAfter installationFirst steps after installationConfiguration updateLicense updateTroubleshootingInstallation of the WildFly bundleDownload and unzip the WildFly bundleDownloadFor the Community edition:  Go to the Bonitasoft website and get the Bonita Community edition WildFly bundle.For a Subscription edition:  Go to the Customer Portal and download the Bonita Subscription edition WildFly bundle.UnzipThe folder where you unzip the WildFly bundle is known as &amp;lt;WILDFLY_HOME&amp;gt;. We recommend the following locations:  Windows: C:Bonita.  Linux: in /opt/Bonita. Make sure that Linux user account used to execute WildFly is the owner of the folders and files.Whatever location you choose, do not leave blank spaces in the path to the directory, nor in the folder name.Content of the WildFly bundleThe WildFly bundle is based on a standard WildFly installation with the following additions:  server/bin/standalone.conf: script to configure JVM system properties on Linux systems.  server/bin/standalone.conf.bat: script to configure JVM system properties on Windows systems.  server/modules/system/layers/base/sun/jdk/main/module.xml: list of base jdk module necessary for WildFly and Bonita to execute.  server/request_key_utils: script to generate license request keys (Subscription editions only).  server/standalone/deployments/bonita-all-in-one-[version].ear: Bonita Portal (web application) and EJB3 API.  setup/: a tool to manage Bonita Platform configuration, stored in database instead of filesystem. Also ships a tool to centralize all the required WildFly bundle configuration.  setup/wildfly-templates/standalone.xml: WildFly context configuration for Bonita Portal. It defines data sources used by Bonita Engine.  start-bonita.bat: script to start the bundle on Windows.  start-bonita.sh: script to start the bundle on Linux.Note: Beginning with version 7.3.0, Bonita Platform configuration, including the license file, is stored in the same database as the Bonita Engine data, namely in the CONFIGURATION table.The initialization of this configuration happens during start-bonita.bat (for Windows) or start.bonita.sh (for Linux) execution.Once initialized, to update this configuration, use the Platform setup tool embedded in Bonita bundles.Get and install a license (Subscription editions only)First, request a license.If this is the first time you generate a license, you need to generate a request key.Generate the request keyOn the server where you installed Bonita Platform:  Go to the request_key_utils folder  Run the generateRequestKey.bat script (for Windows) or the generateRequestKey.sh script (for Linux)Request the new license  Copy your request key and go to the Customer Portal license request page.  Fill in the details in the form, copy the request key in the Request Key field, and submit.Note: keep the brackets () in the key; if the key is separated by a line break, remove it and put the key on a single line.The license file will be sent to you by email.When you receive your license:If this is your first installation, copy the file to the &amp;lt;WILDFLY_HOME&amp;gt;/setup/platform_conf/licenses folder before starting the bundle.If this is a license update, use the Platform setup tool.Change the default credentials (optional, recommended for production)As a security precaution, we strongly recommend that before you start your application server, you change the default username and password used for the platform administrator and for the default tenant administrator.Platform administratorThe username and password for the platform administrator are defined in the file &amp;lt;WILDFLY_HOME&amp;gt;/setup/platform_conf/initial/platform_engine/bonita-platform-community-custom.properties, by the following properties:  platformAdminUsername defines the username (default platformAdmin)  platformAdminPassword defines the password (default platform)This password is used for platform-level administration tasks, such as creating a tenant.Tenant administratorEach tenant has an administrator, with a tenant-specific username and password. The tenant administrator is also known as the tenant technical user.When the platform is created, default values for the tenant administrator username and password are defined in the file &amp;lt;WILDFLY_HOME&amp;gt;/setup/platform_conf/initial/tenant_template_engine/bonita-tenant-community-custom.properties, by the following properties:  userName defines the username (default install)  userPassword defines the password (default install)When you create a tenant, the tenant administrator is created with the default username and password, unless you specify new values. Change these tenant-specific credentials for an existing tenant by updating the userName and userPassword properties in &amp;lt;WILDFLY_HOME&amp;gt;/setup/platform_conf/current/tenants/&amp;lt;TENANT_ID&amp;gt;/tenant_engine/bonita-tenant-community-custom.properties.For the default tenant, the tenant administrator username and password must also be changed in file &amp;lt;WILDFLY_HOME&amp;gt;/setup/platform_conf/initial/platform_portal/platform-tenant-config.properties,with exactly the same values that you set in bonita-tenant-community-custom.properties (see above). At platform creation, this file contains the default username and password for the default tenant.For further details and a better understanding, please read the section Tenant administrator credentials.Configure the WildFly bundleIf you just want to try Bonita Platform with the embedded H2 database (only for development and testing phases of your project), you can skip this paragraph.For production, you are recommended to use one of the supported databases, with the following steps.  Make sure your databases are created and customized to work with Bonita.  Edit file &amp;lt;WILDFLY_HOME&amp;gt;/setup/database.properties and modify the properties to suit your databases (Bonita internal database &amp;amp; Business Data database). Beware of backslash characters.  If you use Microsoft SQL Server or Oracle database, copy your jdbc driver in &amp;lt;WILDFLY_HOME&amp;gt;/setup/lib folder.  Run &amp;lt;WILDFLY_HOME&amp;gt;start-bonita.bat (Windows system) or &amp;lt;WILDFLY_HOME&amp;gt;/start-bonita.sh (Unix system) to run Bonita WildFly bundle (see WildFly start script)The start-bonita script does the following:  Runs the setup init command:  initializes the Bonita internal database (the one you have defined in file &amp;lt;WILDFLY_HOME&amp;gt;/setup/database.properties): creates the tables that Bonita uses internally + stores the configuration in database.  install the license files (Subscription editions only) in the database.Runs the setup configure command: The Setup Configure command configures the WildFly environment to access the right databases:  updates the file &amp;lt;WILDFLY_HOME&amp;gt;/setup/wildfly-templates/standalone.xml with the values you set in file database.properties for Bonita internal database &amp;amp; Business Data database  creates the file(s) &amp;lt;WILDFLY_HOME&amp;gt;/server/modules/**/main/modules.xml that WildFly needs, according to your database settings  copies your database vendor-specific drivers into &amp;lt;WILDFLY_HOME&amp;gt;/server/modules/**/main/ foldersStarts the WildFly bundleFor advanced server configuration needs: check out Bundle configuration to finely tune your WildFly bundle, using templates used by Bonita.Starting and shutting down WildFlyWildFly start scriptWildFly can be started by executing the following script:  Windows &amp;lt;WILDFLY_HOME&amp;gt;start-bonita.bat  Linux &amp;lt;WILDFLY_HOME&amp;gt;/start-bonita.shWildFly stop scriptWildFly can be shut down by executing the following script:  Windows &amp;lt;WILDFLY_HOME&amp;gt;serverbinjboss-cli.bat --connect --command=:shutdown  Linux &amp;lt;WILDFLY_HOME&amp;gt;/server/bin/jboss-cli.sh --connect --command=:shutdownYou can also press Ctrl + C.After installationFirst steps after installationOnce you have your WildFly bundle up and running, complete these first steps to get Bonita Platform fully operational.Configuration updateTo update the configuration after the first run please take a look at the Platform setup toolFile database.properties is the only entry point to configure the WildFly environment and theBonita Platform configurationLicense updateTo update the licenses after the first run, take a look at the platform setup toolTroubleshootingIssue: When I restart the WildFly bundle, the Bonita application starts and then stops with message WFLYSRV0009: Undeployed &quot;bonita-all-in-one-...Potential cause: There are too many elements to restart.Solution: Increase the WildFly application deployment timeout in file standalone.xml in folder setup/wildlfy-templates. Look for &#39;&amp;lt;deployment-scanner ... deployment-timeout=&quot;600&quot; ...&#39;and change it to a higher value (in seconds).Issue:My Microsoft SQL Server or Oracle database drivers do not seem to be taken into account when I put them in &amp;lt;WILDFLY_HOME&amp;gt;/setup/lib folder.Potential cause:Driver file must respect some naming convention.Solution:For Microsoft SQL Server, rename it so that the name contains at least the word sqlserver or sqljdbc or mssql (case insensitive)For Oracle, rename it so that the name contains at least the word oracle or ojdbc (case insensitive)Issue: When I run start-bonita.sh or start-bonita.bat, I get the error message Invalid Java version (1.7) &amp;lt; 1.8. Please set JAVA or JAVA_HOME variable to a JDK / JRE 1.8+Cause: Bonita 7.4+ WildFly bundle requires Java 1.8 to runSolution: Ensure your running environment has a JDK or JRE 1.8 installed and set either JAVA or JAVA_HOME environment variable to point to it.Issue: When I start the Wildfly bundle configured to use a Microsoft SQL Server database, I get the error message java.lang.NoClassDefFoundError: javax/xml/bind/DatatypeConverterCause: The WildFly configuration has not been properly updatedSolution: In the _/server/modules/com/sqlserver/main/module.xml_ file, add `` in the list of dependencies",
      "url": " /bonita/7.8/installation/basic-bonita-platform-installation/wildfly-bundle",
      "author": "",
      "categories": "Installation, Basic Bonita Platform installation"
    }
    ,
  

    "bonita-7-8-installation-bonita-bpm-installation-overview": {
      "title": "Bonita installation overview",
      "content"     : "Bonita installation overviewBonita exists in several editions: Enterprise, Performance, Efficiency, Teamwork, and Community.For the Bonita Subscription editions: Enterprise, Performance, Efficiency, and Teamwork, you need to install a license during the installation procedure. This license depends on the edition, the deployment environment, the number of cases purchased or the number of cores.For the Bonita Community edition, no license is needed.Bonita Studio Bonita Studio contains an embedded test platform that includes an Apache Tomcat application server, an h2 database and the Bonita web application (that itself includes Bonita Engine).To install Bonita Studio you can either use:  The installer for your operating system (Windows, Mac OS, Linux).Used to install Bonita Studio (using a wizard) on your computer. No configuration necessary.  The OS independent package. Used to manually set up Bonita Studio.The package contains the individual launchers in one .zip file, and creates the same installation environment as the installers.To know more, go to Bonita Studio installation.Bonita Platform  Bonita Platform can be installed in several ways:  If you want to migrate an existing installation to the latest version follow the migration guide.  If you want to do a fresh install, get one of our prepackaged bundles that include an Application Server  Tomcat + Bonita  WildFly + BonitaIf you want to do a custom installation, use the Deploy bundle.For all options, you will need to configure Bonita Engine to work with the database of your choice (e.g. PostgreSQL or Oracle).Starting from Bonita 7.3.0, there is no more bonita home to store the configuration, all the configuration is in the database. For more information, take a look at Bonita Platform configurationFor detailed information on the Supported Environment Matrix, see the Support Guide or ask to be contacted by our commercial team.",
      "url": " /bonita/7.8/installation/bonita-bpm-installation-overview",
      "author": "",
      "categories": "Installation"
    }
    ,
  

    "bonita-7-8-installation-bonita-bpm-studio-installation": {
      "title": "Bonita Studio installation",
      "content"     : "Bonita Studio installationThis page explains how to install Bonita Studio for developing processes. There are installer wizards for Windows, Linux, and Mac systems, and an OS-independent archive that can be installed on any system.PrerequisitesDownload Bonita StudioInstall using a wizardInstall using Zip archive (Windows or Linux)Start Bonita StudioLicenseCache configuration TroubleshootingPrerequisitesCheck the hardware and software requirements.Before you download Bonita Studio, make sure that you know whether you are using a using a 32 or 64-bit system, and that you have the appropriate Java version installed:  For Linux, to find out whether you are using a 32 or 64 bit Linux, run the following command: getconf LONG_BIT, which returns either 32 or 64.  For Windows, see the 32 and 64 bit Windows FAQ.  For Mac, 32-bit Java is no longer supported, so there is no 32-bit version of Bonita for Mac systems.Both Windows and Mac have default security settings that will prevent execution of Bonita. See below for further details about what you can do to bypass those security protectionsNote for users of macOS 10.12.x and above : There is an known issue on macOS Sierra and Java about the slowness of   java.net.InetAddress getLocalHost() which results in a slowness of the Bonita Studio (find more info on thoeni or plumbr). To resolve this issue you shoud add your computer name to your /etc/hosts file : In a terminal, edit your /etc/hosts with sudo privilege, add your computer name to the local IP addresses 127.0.0.1 localhost &amp;lt;mycomputername.local&amp;gt; and ::1 localhost &amp;lt;mycomputername.local&amp;gt; (To find your macOS computer name, look at Apple support dedicated page).Note for users of OS X 10.7.5 and above: a new security feature called Gatekeeper prevents the installation of software that is not officially recognized by Apple.For more information and details of how to install Bonita Studio on a system running Gatekeeper, see the Apple support site.Not for users of Windows 10: the security feature called SmartScreen prevents execution of Bonita Studio installer.  When you get the “Windows protect your PC” pop up window, click on “More info” link and click on “Run anyway” button.Download Bonita StudioFor a Subscription edition of Bonita Studio, go to the Customer Portal and request a download.For the Community edition of Bonita Studio, go to the Bonitasoft website downloads page. On the download page you will get a download button based on your operating system auto-detection. If you want to download a different version (e.g. switch from 32 to 64-bit version), click on the Customize you download link.On this page there are buttons to download the Studio installer for your current operating system and the all in one, OS-independent version.To download the installer for a different operating system, select it from the Operating system section.Then click the Download button.When the download is complete, you have one of the following new files:LinuxCommunity edition  32 bit: BonitaStudioCommunity-x.y.z-x86.run  64 bit: BonitaStudioCommunity-x.y.z-x86_64.runSubscription editions  32 bit: BonitaSubscription-x.y.z-x86.run  64 bit: BonitaSubscription-x.y.z-x86_64.runWindowsCommunity edition  32 bit: BonitaStudioCommunity-x..zy-x86.exe  64 bit: BonitaStudioCommunity-x.y.z-x86_64.exeSubscription editions  32 bit: BonitaSubscription-x..zy-x86.exe  64 bit: BonitaSubscription-x.y.z-x86_64.exeMacCommunity edition  32 bit: Not provided  64 bit: BonitaStudioCommunity-x.y.z-x86_64.dmgSubscription editions  32 bit: Not provided  64 bit: BonitaSubscription-x.y.z-x86_64.dmgZip, no Installer (Windows or Linux)Community edition  BonitaStudioCommunity-x.y.z.zipSubscription editions  BonitaStudioSubscription-x.y.z.zipInstall using a wizardTo run the installer wizard for Linux, Windows, or Mac, double-click the downloaded file.Then follow the installation wizard through to the end of the installation procedure.For subscription editions: the installer import workspace feature applies only to local repositories.If you have shared repositories in your workspace, you will need to reconnect to these manually, and possibly migrate the processes to your new version of Bonita Studio.The default workspace is automatically initialized at the end of the installation.Install using Zip archive (Windows or Linux)To install Bonita Studio using the zip archive, unzip the downloaded .zip file to a folder on your hard drive. Avoid using a folder with a long path. Do not use a path that contains spaces.Start Bonita StudioTo start Bonita Studio, go to the directory where you installed it, and run the launcher for your operating system:Linux Community edition  32-bit: BonitaStudioCommunity-linux  64-bit: BonitaStudioCommunity64-linuxSubscription editions  32-bit: BonitaStudioSubscription-linux  64-bit: BonitaStudioSubscription64-linuxWindowsCommunity edition  32-bit: BonitaStudioCommunity.exe  64-bit: BonitaStudioCommunity64.exeSubscription editions  32-bit: BonitaStudioSubscription.exe  64-bit: BonitaStudioSubscription64.exeMac Community edition  32-bit: Not provided  64-bit: BonitaStudioCommunity64.appSubscription editions  32-bit: Not provided  64-bit: BonitaStudioSubscription64.appLicenseThis information applies to the Subscription editions. No license is needed for the Community edition.When you launch Bonita Studio for the first time, you need to install a license:  Click Copy to clipboard to copy the request key from the pop-up  Use the generated request key to request a license on the Customer portal  Check your email box (after a few minutes) and open the email from no-reply@bonitasoft.com  Download the attached file (.lic)  Go back to your Bonita Studio, click Install license…, and select your .lic file.Cache configurationBy default cache is disable for the web server embedded by Bonita studio, as it is more comfortable to realise development without cache. But you can decide to activate cache, to be closer to the production display time. To do this, you need to follow those steps.  Close your Bonita Studio if he’s up.  Go in the studio installation folder.  Open BonitaStudioSubscription.ini file if you use a 32-bits version (BonitaStudioSubscription64.ini for a 64-bits).  Change -Dtomcat.extra.params=-DnoCacheCustomPage=true to -Dtomcat.extra.params=-DnoCacheCustomPage=false.  Save file.  Start your Bonita studio. Now you have a cache for your living application and your custom page.TroubleshootingLog filesIn case of trouble when running Bonita Studio, you might want to take a look at log files.Studio log file can be displayed from Bonita Studio in “Help” -&amp;gt; “Show Bonita Studio log” menu.If Studio fails to start, you can open the log file manually. File is named .log and is located in &amp;lt;studio_folder&amp;gt;/workspace/.metadata folder. Note that folder might be hidden and file might not be displayed if you choose to hide file extensions in your file manager.OutOfMemory error in Bonita StudioAfter installation, you might see an OutOfMemory error in Bonita Studio.This error sometimes occurs when importing a large process definition.The log messages are similar to the following:!ENTRY org.bonitasoft.studio.importer 4 0 2014-04-25 09:43:49.467!ERROR Import has failed for file Autorisation Engagement Depenses-2.0.bos!ENTRY org.bonitasoft.studio.importer 4 0 2014-04-25 09:43:49.470!ERROR!STACK 0java.lang.reflect.InvocationTargetExceptionCaused by: java.lang.OutOfMemoryError: GC overhead limit exceededTo fix this issue, you need to increase the memory allocated to the JVM that runs Bonita Studio.Edit the *.ini file that corresponds to the executable you use to launch the Studio (e.g. BonitaStudioSubscription64.ini if you run BonitaStudioSubscription64.exe) and modify this line: -Xmx512m to -Xmx1024m (or higher).Then restart Bonita Studio.",
      "url": " /bonita/7.8/installation/bonita-bpm-studio-installation",
      "author": "",
      "categories": "Installation"
    }
    ,
  

    "bonita-7-8-installation-migration-migrate-from-an-earlier-version-of-bonita-bpm": {
      "title": "Migrate from an earlier version of Bonita",
      "content"     : "Migrate from an earlier version of BonitaOverviewHow it worksConstraintsEstimate time requiredMigrate your platformMigrate your clusterMigrate your client applicationsOverviewThis page explains how to migrate your platform to a newer version of Bonita.You can migrate your platform using the Bonita Migration Tool. There is 2 version of the migration tool:  The version 1.x that migrate the platform from version 6.0.2 or later to any version up to 7.0.0  the version 2.x that migrate the platform from version 7.0.0 or later to any version up to the last one.For example, if you are migrating from 6.5.3 to 7.1.0, you must migrate from 6.5.3 to 7.0.0 using version 1.x of the Bonita Migration Tool, and then migrate from 7.0.0 to 7.1.0 using version 2.x. Caution:You should always migrate to the latest version of a major version. Usually, maintenance version might contain bug fixes made after the release of subsequent major or minor release.For example, the 6.5.4 release contains fixes to certain bugs that were found in early 7.x.y versions, up to 7.1.0.When you are ready to migrate from 6.5.4 to a 7.x.y version, make sure you migrate to at least 7.1.1 to be sure that these fixes are present in your new version after migration. To migrate from 6.5.4 to 7.1.1 or later there are two phases: first you upgrade to 7.0.0 then to the latest version. You are recommended not to start 7.0.0 after you migrate to it, but to proceed immediately with the second phase of the migration.JRE requirements:Versions 7.0 to 7.4 only support JRE version 7. If you comes from older versions of Bonita supporting JRE 6, you must also upgrade your JRE to version 7.Version 7.5 only supports JRE version 8. If migrating to version 7.5, please upgrade your JRE to version 8.For more info, see Support Guide and Supported Environment Matrix for Server.The tool migrates your platform (bonita_home folder and the database). You cannot change edition while migrating. If you are running aBonita Subscription Pack edition, you need a valid license for your target version.If you are upgrading to a new maintenance version and not changing the minor version number (for example, you are migrating from 6.3.0 to 6.3.1),your current license remains valid after migration.Starting from version 7.3 there is no more bonita home folder. This means that, if your installation does not have any custom change, then you do not need to configure the bundle any further for an installation migrated in 7.3 or above.On the other hand, if you have customized your configuration, you will have to use the platform setup tool to send your customized configuration files to the database where configuration is stored, for versions 7.3 and above.How it worksThe Bonita Migration Tool contains a set of script that execute changes on the data to make it compatible with earlier version of Bonita Platform.This tool is provided as a zip archive and contains an executable script that will determine your current configuration and ask you in which version you want to migrate.The migration is step-wise by maintenance version and the script manages the sequence of steps from your current version to the target version.After each minor or maintenance version upgrade, you have the option to pause or continue to the next step.The migration script migrates the following:  Engine server  Engine database, including all data on active and archived process instances  Organization definition  Runtime data in Bonita Home, until 7.3  Configuration files in Bonita Home, which are replaced with the default configuration files for the new version  Log files from the previous version are not impacted by migrationThe following are not migrated automatically:  Configuration of the platform: Before 7.3 in the Bonita Home folder and after 7.3 in database. Reapply your customizations manually after the migration script has finished (using platform setup tool if migrated to 7.3.0+).  Deployed process definitions: The processes will continue to run using the definition created in the previous version of Bonita.  Process definition sources (.bos files): Migrate these by importing them into the new version of Bonita Studio.  Business data model, and the business data database: if the migration path include version 7.0.0,7.2.0 or 7.2.4, the Business data model must be redeployed after migration, using Define and deploy the BDM). Otherwise, no action is required.  Custom connectors, actor filers, data types: These might continue to work in the new version, but should be tested, depending on your custom code.  Custom pages: These might continue to work in the new version, but should be tested depending on your custom code.  Custom reports: These might continue to work in the new version, but should be tested depending on your custom code.  REST API Extensions: These might continue to work in the new version, but should be tested depending on your custom code.When the script has finished,you need to complete the migration by unzipping and configuring a bundle for the new version.See Migrate your platform for step-by-step instructions.ConstraintsIf you have added indexes to certain tables in the Engine database, you must remove them before migrating from 6.2.6 to a later version.If you do not remove these indexes, the migration will not complete.This applies to the following tables: arch_process_instance, arch_connector_instance, arch_flownode_instance, arch_data_instance and arch_data_mapping.There is no guarantee that the Look &amp;amp; Feel definition is compatible across maintenance versions.For example, in 6.2.2, jquery+ was renamed jqueryplus in BonitaConsole.html, for compatibility with more application servers.If you are using a custom Look &amp;amp; Feel, export it before migrating.Then after the migration is complete, export the default Look &amp;amp; Feel from the new version,modify your custom Look &amp;amp; Feel to be compatible with the new definition, and with the recommendations for form footers.Then import your updated custom Look &amp;amp; Feel into Bonita Portal.The migration script supports MySQL, Postgres, Oracle, and MS SQLServer. There is no migration for h2 databases.Important:The migration operation resets the Bonita configuration files to default version for new settings to be applied (from the $BONITA_HOME folder in &amp;lt;7.3.0 version or inside database in &amp;gt;=7.3.0).Therefore, you must do a backup of your configuration files before starting the migration.You will need to merge custom properties and configurations to the migrated environment.Furthermore, from the database point of view, as any operations on a production system, a migration is not a zero risk operation. Therefore, it is strongly recommended to do a backup of your database before starting the migration.Estimate time requiredThe platform must be shut down during migration.The time required depends on several factors including the database volume, the number of versions between the source version and thetarget version, and the system configuration,so it is not possible to be precise about the time that will be required. However, the following example can be used as a guide:|   | ||:- |:-   || Database entries: | data: 22541  flownode: 22482  process: 7493  connector: 7486  document: 7476|| Source version:   | 6.0.2   || Target version:   | 6.3.0   || Time required:| 2.5 minutes |Migrate your platformThis section explains how to migrate a platform that uses one of the Bonita bundles.  Download the target version bundle and the migration tool for your Edition from theBonitaSoft site for Bonita Community editionor from the Customer Portal for Bonita Subscription Pack editions.  Unzip the migration tool zip file into a directory. In the steps below, this directory is called bonita-migration.  If you use Oracle or Microsoft SQL Server, add the JDBC driver for your database type to bonita-migration/lib. This is the same driver as you have installed inyour web server lib directory.  Configure the database properties needed by the migration script, by editing bonita-migration/Config.properties.Specify the following information:Property  Description  Example  bonita.home  The location of the existing bonita_home. Required only until 7.3  /opt/BPMN/bonita (Linux) or C:BPMNbonita (Windows)  db.vendor  The database vendor  postgres  db.driverClass  The driver used to access the database  org.postgresql.Driver  db.url  The location of the Bonita Engine database  jdbc:postgresql://localhost:5432/bonita_migration  db.user  The username used to authenticate to the database  bonita  db.password  The password used to authenticate to the database  bpmNote: If you are using MySQL, add ?allowMultiQueries=true to the URL. For example,db.url=jdbc:mysql://localhost:3306/bonita_migration?allowMultiQueries=true.  If you use a custom Look &amp;amp; Feel, export it, and then restore the default Look &amp;amp; Feel.  If you use a Business data model that require to be redeployed (see above), you can pause the tenant so that as a tenant admin, you’ll be able to redeploy the BDM on a paused tenant once migration is done.  Stop the application server.  IMPORTANT:Back up your platform and database in case of problems during migration.  Go to the directory containing the migration tool.  Run the migration script:  For version 1.x of the migration tool, run migration.sh (or migration.bat for Windows).  For version 2.x of the migration tool, go to the bin directory and run the migration script for your edition and operating system:      Community edition  bonita-migration-distrib (Linux) or bonita-migration-distrib.bat (Windows)  Subscription editions  bonita-migration-distrib-sp (Linux) or bonita-migration-distrib-sp.bat (Windows)The script detects the current version of Bonita, and displays a list of the versions that you can migrate to. Specify theversion you require.The script starts the migration.  As the script runs, it displays messages indicating progress. After each migration step, you are asked to confirm whether toproceed to the next step. You can pause the migration by answering no.To suppress the confirmation questions, so that the migration can run unattended, set the ` (-Dauto.accept=true) systemproperty.When the migration script is finished, a message is displayed showing the new platform version, and the time taken for the migration.The bonita_home` and the database have been migrated.  Unzip the target bundle version into a directory. In the steps below, this directory is called bonita-target-version.  Configure the bundleto use the migrated database.Do not recreate the database and use the setup tool of the bonita-target-version Edit the bonita-target-version/setup/database.properties file to point to the  migrated database.Reapply configuration made to the platform, using the setup tool of the bonita-target-versionDownload the configuration from database to the local disk.There is below a Linux example: cd setup ./setup.sh pullYou must reapply the configuration that had been done on the original instance’sbonita_homein the bonita-target-version/setup/platform_conf/currentPlease refer to the guide on updating the configurationfile using the platform setup toolWhen done, push the updated configuration into the database: ./setup.sh pushIf you have done specific configuration and customization in your server original version, re-do it by configuring the application server at bonita-target-version/server (or bonita-target-version if target version is 7.3.n): customization, libs etc.   If your Bonita version is 7.4 or above before migrating, you can skip this point.In the case where deployed resources have required dedicated authorizations to use the REST API, these authorizations are not automatically migrated. Some manual operation have to be done on files that are  located in the $BONITA_HOME folder if version &amp;lt;7.3.0 or in the extracted platform_conf/current folder in version &amp;gt;=7.3.0 (see Update Bonita Platform configuration for more information ). You need to merge the previous file version and the migrated one.  tenants/[TENANT_ID]/conf/compound-permissions-mapping.properties : contains list of permissions used for each resources  tenants/[TENANT_ID]/conf/resources-permissions-mapping.properties : contains permissions for REST API extensions  tenants/[TENANT_ID]/conf/custom-permissions-mapping.properties : contains custom permissions for users and profiles  tenants/[TENANT_ID]/conf/dynamic-permissions-checks.properties : used if dynamic check on permissions is enabledConfigure License:you need to put a new license in the database: see Platform configuration for further details. There is below a Linux example: cd setup vi database.properties ./setup.sh pull ls -l ./platform_conf/licenses/If there is no valid license in the ./platform_conf/licenses/, these 2 pages will help you to request and install a new one:  Licenses  Platform configurationInstall the new license: cp BonitaSubscription-7.n-Jerome-myHosname-20171023-20180122.lic ./platform_conf/licenses/ ./setup.sh pushStart the application server. Before you start Bonita Portal, clear your browser cache. If you do not clear the cache, you might see old, cached versions of Portal pages instead of the new version.Log in to the Portal and verify that the migration has completed. If you did not set the default Look &amp;amp; Feel before migration and you cannot log in, you need to restore the default Look &amp;amp; Feel using a REST client or the Engine API.The migration is now complete. If you were using a custom Look &amp;amp; Feel before migration, test it on the new version before applying it to your migrated platform.Migrate your clusterA Bonita cluster must have the same version of Bonita on all nodes. To migrate a cluster:  Download the migration tool:  In version 1.x you need to download the tool for Performance cluster, the ordinary Performance migration tool does not support migration of a cluster.  In version 2.x there is only one kind of migration tool. It will work for both cluster and non cluster installation.Shutdown all cluster nodes.  On one node, follow the procedure above to migrate the platform.  When the migration is complete on one node, follow steps 12 to 16 on all the other nodes.The migration of the cluster is now complete, and the cluster can be restarted.Migrate your client applicationsIf you have applications that are client of Bonita, you may have to change your client code or library. Most of thetime, we guarantee backward compatibility. In any cases, please read the release notes to check ifsome changes have been introduced.In addition, if your application connect to the Bonita Engine using the HTTP access mode, see the bonita-client librarydocumentation page.",
      "url": " /bonita/7.8/installation/migration/migrate-from-an-earlier-version-of-bonita-bpm",
      "author": "",
      "categories": "Installation, Migration"
    }
    ,
  

    "bonita-7-8-installation-migration-migration-overview": {
      "title": "Migration overview",
      "content"     : "Migration overviewMigrating your platform to the new versionMigrating your Bonita StudioMigrating your process definitionsMigrating your platform to the new versionYou can automatically migrate the platform from an earlier version of Bonita. You cannot migrate your platform from a version earlier than 6.0.2. After migration, a process continues to run unchanged. You can modify the process definition later to take advantage of the new features in this version of Bonita.Migrating your Bonita StudioTo migrate to a newer version of Bonita Studio, install the new version using the Studio installer wizard for your operating system.If you want to keep the artifacts in your workspace, select the option to migrate your workspace.Warning: if you do not migrate your workspace, or if you use the OS-independent archive to install the new Bonita Studio, your workspace is not automatically migrated. In this case, you must manually export each item from the older Bonita Studio and import it into the newer version.Migrating your process definitionsA process definition created using Bonita 6.x can be run on this version after the platform migration. However, you might choose to update the process definition to take advantage of new features. To update a process definition, export it from the older version of Bonita Studio as a .bos file, then import it into the newer version and update it.Note: you cannot import a process definition .bos file into a version of Bonita Studio that is older than the version that was used to create it.You can import a .bos file containing a process definiiton from a Bonita 6.x or Bonita Open Solution 5.x. The guided migration converts the 5.x process definition to use the legacy 6.x tooling so that the process can run on a Bonita 7.x platform. You can modify the process definition later to take advantage of the new features in this version of Bonita.",
      "url": " /bonita/7.8/installation/migration/migration-overview",
      "author": "",
      "categories": "Installation, Migration"
    }
    ,
  

    "bonita-7-8-installation-platform-installation-examples-ubuntu-openjdk-tomcat-postgresql": {
      "title": "Ubuntu + OpenJDK + Tomcat + PostgreSQL",
      "content"     : "Ubuntu + OpenJDK + Tomcat + PostgreSQLThis page explains how to set up a Bonita Platform in a specific environment. This environmentincludes the following set of components:Operating SystemJava Virtual MachineDatabaseInstallCreate databases and userEnable prepared transactionsApplication ServerInstall Tomcat 8.5Add JDBC driverBonita PlatformDownload and unzip the Bonita deploy bundleJVM system variablesAdd extra libraries to TomcatConfigure Bonita to use PostgreSQLLicenseDeploymentFirst connectionOperating SystemSimply follow a standard Ubuntu installation procedure. You won’t need any specific settings here.Note: make sure you got a text editor installed such as nano. In order to install it: sudo apt-get install nanoNote: we use aptitude command line tool to install packages such as OpenJDK or PostgreSQL. You can also use different tool suchas apt-get or a graphical package manager such as synaptic.Java Virtual MachineTo install the OpenJDK JVM you need to install the openjdk-8-jre-headless package:  Run the following command line: sudo aptitude install openjdk-8-jre-headless  If needed, type your Ubuntu user password  Type Enter to confirm that you want to continue installationTo check that Java is correctly setup in a console/terminal, type: java -version.You should get a similar message to the one below:openjdk version &quot;1.8.0_111&quot;OpenJDK Runtime Environment (build 1.8.0_111-8u111-b14-2ubuntu0.16.04.2-b14)OpenJDK 64-Bit Server VM (build 25.111-b14, mixed mode)DatabaseInstallTo install the PostgreSQL 9.3 you need to install the postgres-9.3 package:  Run the following command line: sudo aptitude install postgresql-9.3  If needed, type your Ubuntu user password  Type Enter to confirm that you want to continue installationCreate databases and userYou now need to create: a new PostgreSQL user and two new databases for Bonita, and grant the user the appropriate privileges to accessthe databases. In a terminal or console, type following commands:  Switch to a shell for postgres user account: sudo -u postgres -i  To create a new database user named bonita_db_user type: createuser -P bonita_db_user  Enter (twice) the password for the newly created database user. E.g.: bonita_db_password  Create a new database (for Bonita Engine) named bonita_db and give ownership to bonita_db_user: createdb -O bonita_db_user bonita_db  Create another database (for BDM) named bonita_bdm and give ownership to bonita_db_user: createdb -O bonita_db_user bonita_bdm  Exit postgres session, type command: exitYou can now verify that user and database are correctly created. In a terminal or console type following commands:  Start PostgreSQL client program by typing: psql -d bonita_db -h 127.0.0.1 -U bonita_db_user  Type the PostgreSQL user password. E.g.: bonita_db_password  You can run test query that should return 1: SELECT 1;  Now you can quit PostgreSQL client, type: qEnable prepared transactionsPrepared transactions is disabled by default in PostgreSQL. You need to enable it:  Edit the postgresql.conf configuration file: sudo nano /etc/postgresql/9.3/main/postgresql.conf  Look for the line with max_prepared_transactions (line 117)  Uncomment the line: remove # character  Change the value from zero to 100  Save modification and quit text editor  Restart PostgreSQL server: sudo service postgresql restartApplication ServerInstall Tomcat 8.5Run the following command lines:  sudo aptitude install curl  cd /tmp/  wget http://apache.mirrors.ionfish.org/tomcat/tomcat-8/v8.5.31/bin/apache-tomcat-8.5.31.tar.gz  sudo tar xzvf apache-tomcat-8.5.31.tar.gz -C /usr/share/tomcat8 --strip-components=1Tomcat 8.5 should now be installed on your computer. Now you should enable tomcat to be run as a service  sudo nano /etc/systemd/system/tomcat.service  Copy the following code into the file```[Unit]Description=Apache Tomcat Web Application ContainerAfter=network.target[Service]Type=forkingEnvironment=JAVA_HOME=Your Java HomeEnvironment=CATALINA_PID=/usr/share/tomcat/temp/tomcat.pidEnvironment=CATALINA_HOME=/usr/share/tomcatEnvironment=CATALINA_BASE=/usr/share/tomcatEnvironment=’CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC’Environment=’JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom’ExecStart=/usr/share/tomcat/bin/startup.shExecStop=/usr/share/tomcat/bin/shutdown.shUser=yourUserGroup=yourGroupUMask=0007RestartSec=10Restart=always[Install]WantedBy=multi-user.target```  Save and close the file  Reload the systemd daemon: sudo systemctl daemon-reloadIn case of problems with this part refer to the documentations pages How to Install and Configure Apache Tomcat 8.5 on Ubuntu 16.04Add JDBC driverYou need to include JDBC driver in Tomcat classpath:  Change to Tomcat libraries directory: cd /usr/share/tomcat8/lib  Install wget tool in order to be able to download JDBC driver: sudo aptitude install wget  Download the JDBC driver: sudo wget http://jdbc.postgresql.org/download/postgresql-9.3-1102.jdbc4.jarBonita PlatformDownload and unzip the Bonita deploy bundleDownload the Bonita deploy bundle from the Customer Portal(Subscription editions) or get the Community edtion. Instructionsbelow will be given for Bonita Subscription Pack. You can easily adapt files and folder names to your edition.  Go to Bonitasoft Customer Portal  In Download menu, click on Request a download  Select your version and click on Access download page button  On the download page, go to the Deploying Server Components section  Click on Download BonitaSubscription-x.y.z-deploy.zip link. If your server only has a terminal availableyou can copy the link and use wget to download the file or use SSH with scp command to copythe file from another computer.  Make sure that the BonitaSubscription-x.y.z-deploy.zip is located in your home folder (e.g. /home/osuser).If you type cd ~ &amp;amp;&amp;amp; ls you should see the file listed.  Make sure the unzip command is installed: sudo aptitude install unzip  Unzip the deploy bundle: unzip -q BonitaSubscription-x.y.z-deploy.zipFinally, make sure that the user that runs the Tomcat server, is the owner of all Bonita “home” files:  Change folders and files ownership: sudo chown -R tomcat8:tomcat8 /opt/bonitaJVM system variablesTo define JVM system properties, you need to use a new file named setenv.sh:  Copy the file from deploy bundle to Tomcat bin folder: sudo cp ~/BonitaSubscription-x.y.z-deploy/Tomcat-8.5.z/bin/setenv.sh /usr/share/tomcat8/bin/, where “x.y.z” stands for your current product version.  Make the file executable: sudo chmod +x /usr/share/tomcat8/bin/setenv.sh  Edit setenv.sh file: sudo nano /usr/share/tomcat8/bin/setenv.sh  Change sysprop.bonita.db.vendor from h2 to postgres  Change btm.root from ${CATALINA_HOME} to /opt/bonita/btm  Change bitronix.tm.configuration from ${CATALINA_HOME}/conf/bitronix-config.properties to /opt/bonita/btm/conf/bitronix-config.propertiesAdd extra libraries to TomcatBonita needs extra libraries such as Bitronix, in order to run on Tomcat:  Change to the Deploy bundle Tomcat lib folder: cd ~/BonitaSubscription-x.y.z-deploy/Tomcat-8.5.z/lib, where “y.z” stands for the last digits of the product version  Copy the libraries (.jar files) from the Deploy bundle to your Tomcat folder: sudo cp btm-2.1.3.jar btm-tomcat55-lifecycle-2.1.3.jar jta-1.1.jar slf4j-api-1.6.1.jar slf4j-jdk14-1.6.1.jar /usr/share/tomcat8/lib/ (carefully check and replace with the product versions you currently have)Configure Bonita to use PostgreSQLYou need to configure the data source for Bonita Engine.Warning: make sure you stop Tomcat before performing following operations: sudo service tomcat8 stop  Create new folders in order to store Bitronix files: sudo mkdir -p /opt/bonita/btm/conf &amp;amp;&amp;amp; sudo mkdir /opt/bonita/btm/work  Set the ownership of the Bitronix folder: sudo chown -R tomcat8:tomcat8 /opt/bonita/btm  Copy the Bitronix configuration files to /opt/bonita/btm/conf folder: sudo cp ~/BonitaSubscription-x.y.z-deploy/Tomcat-8.5.z/conf/bitronix-* /opt/bonita/btm/conf/  Edit bitronix-resources.properties file, comment (using #) h2 section, uncomment PostgreSQL exampleand update the username, password and DB name (“bonita” in the URL property) to match your configuration (e.g.bonita_db_user, bonita_db_password and bonita_db): sudo nano /opt/bonita/btm/conf/bitronix-resources.properties  Also in bitronix-resources.properties update the section for resource.ds2 (BDM data source) and set the value for the BDM data base (e.g. bonita_db_user, bonita_db_password and bonita_bdm)  Save and quit: CTRL+X, Y, ENTER  Copy the bonita.xml file (Bonita web app context configuration): sudo cp ~/BonitaSubscription-x.y.z-deploy/Tomcat-8.5.z/conf/Catalina/localhost/bonita.xml /etc/tomcat8/Catalina/localhost/  Edit the bonita.xml file by commenting the h2 datasource configuration (using ),uncomment PostgreSQL example and update username, password and DB name (bonita in the URL property) to match yourconfiguration (e.g. bonita_db_user, bonita_db_password and bonita_db): sudo nano /etc/tomcat8/Catalina/localhost/bonita.xml  Also in bonita.xml file update data base configuration for BDM to match your configuration (e.g. bonita_db_user, bonita_db_password and bonita_bdm)  Save and quit: CTRL+X, Y, ENTER  Copy and overwrite logging.properties file: sudo cp ~/BonitaSubscription-x.y.z-deploy/Tomcat-8.5.z/conf/logging.properties /etc/tomcat8/logging.properties  Copy and overwrite context.xml file: sudo cp ~/BonitaSubscription-x.y.z-deploy/Tomcat-8.5.z/conf/context.xml /etc/tomcat8/context.xml  Copy and overwrite server.xml file: sudo cp ~/BonitaSubscription-x.y.z-deploy/Tomcat-8.5.z/conf/server.xml /etc/tomcat8/server.xml  Edit server.xml (sudo nano /etc/tomcat8/server.xml) and comment out h2 listener line  Fix ownership on the copied files: sudo chown -R root:tomcat8 /etc/tomcat8LicenseIf you run the Subscription Pack version, you will need a license:  Generate the key in order to get a license:  Change the current directory to license generation scripts folder: cd ~/BonitaSubscription-x.y.z-deploy/request_key_utils-x.y-z  Make the license generation script executable: chmod u+x generateRequestKey.sh  Run the script: ./generateRequestKey.sh  For License type: enter 1 to select 1 - Case counter license. (Note: If your subscription type is cpu based, please refer to the knowledge-base in the customer portal)  You will get a license key number that you can copy. Make sure that you keep the brackets. If the key is separated by a linebreak, remove it and put the key on a single line.Connect to Bonitasoft Customer Portal  Go to Licenses &amp;gt; Request a license  Fill in the license request forms  You should receive the license file by email  Copy the license file to the Bonita “home” folder: sudo cp BonitaSubscription-x.y-Your_Name-ServerName-YYYYMMDD-YYYYMMDD.lic /opt/bonita/bonita_home-x.y.z/server/licenses/  Change folders and files ownership: sudo chown -R tomcat8:tomcat8 /opt/bonitaDeploymentDeploy the Bonita web application:Copy bonita.war to Tomcat webapps folder: sudo cp ~/BonitaSubscription-x.y.z-deploy/Tomcat-8.5.z/webapps/bonita.war /var/lib/tomcat8/webapps/Take care to set the proper owner: sudo chown tomcat8:tomcat8 /var/lib/tomcat8/webapps/bonita.warStart Tomcat: sudo service tomcat8 startFirst connectionYou can access the Bonita Portal using your web browser, just type the following URL http://&amp;lt;your_server_hostname&amp;gt;:8080/bonita (your_server_hostname can be either an IP address or a name).You can log in using the tenant administrator login: install and password: install.The first step is to create at least one user and add it to “administrator” and “user” profiles.",
      "url": " /bonita/7.8/installation/platform-installation-examples/ubuntu-openjdk-tomcat-postgresql",
      "author": "",
      "categories": "Installation, Platform installation examples"
    }
    ,
  

    "bonita-7-8-installation-upgrade-from-community-to-a-subscription-edition": {
      "title": "Community to Subscription upgrade",
      "content"     : "Community to Subscription upgradeUpgrading means moving from a Bonita Community edition environment to any Bonita Subscription edition environment.Warnings:  An upgrade can only be performed on a single Bonita  version. You cannot migrate to a new version at the same time as you upgrade to Subscription edition.Eg. Migrate from Bonita 7.3.3 Community edition to Bonita 7.3.3 Subscription edition.  After it is applied, an upgrade cannot be undone.An upgrade is performed in two phases.Bonita Studio upgradeBonita platform upgradeBonita Studio upgradeTo upgrade a Community edition Bonita Studio and its resources (such as process diagrams, data models), follow these steps:  Install a Bonita  Studio Subscription edition.  Export your resources from the Bonita Studio Community edition to .bos files. We recommend that you keep these resource files as a backup.  Import your resource files into the Bonita Studio in Subscription edition.The upgrade is performed automatically and silently when importing resources into Bonita Studio Subscription edition.Remember that an upgrade is a non-reversible operation: after your resources are imported in the Subscription edition, you will not be able to export from the Subscription edition Studio and then import them back into the Community edition.Bonita platform upgradeUpgrading a Bonita platform allows you to keep the platform data (process definitions, cases, BDM…) while benefiting from the Subscription edition features.The upgrade procedure is quite simple and only requires a limited service downtime (less than an hour for basic configurations).A Bonita platform upgrade can only be performed on the same database type.To upgrade a Bonita platform from Community edition to a Subscription edition, follow these steps:  Install the Subscription Bundle but do not start it. We will call this installation folder bonita-subscription.  Configure the Subscription installation to use your existing database editing the file &amp;lt;bonita-subscription&amp;gt;/setup/database.properties. Beware of backslash characters.  Shut down the Community server being migrated using the stop-bonita script, we will call this installation folder bonita-community.  Run &amp;lt;bonita-community&amp;gt;/setup/setup(.sh/.bat) pull to fetch your current Community configuration in &amp;lt;bonita-community&amp;gt;/setup/platform_conf/current and copy this last in a different folder, we will call this new folder bonita-community-configuration.  Backup your Bonita platform and databases.  Update the configuration using the Platform setup tool in bonita-subscription:  Create the folder &amp;lt;bonita-subscription&amp;gt;/setup/platform_conf/current, we will call it bonita-subscription-configuration.  Copy the content of the &amp;lt;bonita-subscription&amp;gt;/setup/platform_conf/initial to bonita-subscription-configuration.  In the bonita-subscription-configuration, reapply the modifications for all the folders but the one named tenants (use bonita-community-configuration as a reference).  Create the folder &amp;lt;bonita-subscription-configuration&amp;gt;/tenants.  For each folder contained in &amp;lt;bonita-community-configuration&amp;gt;/tenants.  We will call this folder bonita-community-configuration-tenant.  Create one folder with the same name as bonita-community-configuration-tenant in &amp;lt;bonita-subscription-configuration&amp;gt;/tenants, we will call it bonita-subscription-configuration-tenant.  Copy all folders with prefix tenant_template_ from bonita-subscription-configuration to bonita-subscription-configuration-tenant and remove the prefix in their names.  In the bonita-subscription-configuration-tenant, reapply the modifications (user bonita-community-configuration-tenant as a reference).Run &amp;lt;bonita-subscription&amp;gt;/setup/setup(.sh/.bat) push to push the migrated configuration bonita-subscription-configuration in database.Start the migrated platform using the start-bonita script located in bonita-subscription.The Upgrade is now finished, you can verify that you are now running a subscription edition in the portal user interface, the dialog displayed from the top right “Settings / About” menu should indicate the correct Subscription edition.",
      "url": " /bonita/7.8/installation/upgrade-from-community-to-a-subscription-edition",
      "author": "",
      "categories": "Installation"
    }
    ,
  

    "bonita-7-8-release-notes": {
      "title": "Release notes",
      "content"     : "Release notesNote: The 7.8 is currently work in progress (WIP). The 7.8.0 GA is planned on December 2018.Technology updatesOther dependency updatesTechnology updatesOther dependency updatesSome internal libraries have been updated to newer versions:  spring framework version is now 5.0.5.RELEASE  spring-boot version is now 2.0.1.RELEASE",
      "url": " /bonita/7.8/release-notes",
      "author": "",
      "categories": ""
    }
    
  
 
    

    "ici-1-0-architecture": {
      "title": "Architecture",
      "content"     : "ArchitectureBonita Intelligent Continuous Improvement Add-on (ICI) extracts data of the Bonita Engine database, transforms it, and stores documents in an Elasticsearch storage engine. A set of REST APIs allow to query this storage. Those APIs are used in two Living Applications deployed on Bonita Platform to configure processes and render predictions.OverviewComponentsICI ServerICI StorageICI Configuration Living ApplicationICI Operation Management Living ApplicationOverviewICI connects to the Bonita Engine database, using its own connection pool to read events from the archives. Events are stored in Elasticsearch.When configuring processes using the “Configuration” Living Application, a REST API extension calls the ICI REST API to store the configuration.Data is polled from Bonita on a configurable time interval.Once configured, the developer can configure the relevant processes using ICI Configuration living application and start the creation of the prediction model based on completed cases and then applied on open cases.The “Operations Management” Living Application is a mobile first -usable on a desktop- UI which displays predictions.ComponentsICI ServerThe backend server polls data, creates process mining models, and serves the REST APIs.ICI StorageIt stores ICI data and predictive models, and it relies on Elasticsearch engine.ICI Configuration Living ApplicationThis Living Application is used to configure the processes.ICI Operation Management Living ApplicationThis Living Application is used to display case execution information and predictions to the Operation Managers.",
      "url": " /ici/1.0/architecture",
      "author": "",
      "categories": ""
    }
    ,
  

    "ici-1-0-configure": {
      "title": "Configure Operations Management Living Application",
      "content"     : "Configure Operations Management Living ApplicationA living application is provided with the ICI module to configure processes and compute prediction models.Target durationSuccess rate thresholdCreate the modelTarget durationThe target duration is a mandatory configuration to set. It allows ICI module to know what is a normal time execution for a given process. With this information compute a percentage of chances for the process to finish within this time.In the page the target duration is configurable in days.Success rate thresholdIf the success rate percentage of a case is below this success rate threshold, a case will be considered predicted late.e.g. if the success rate threshold is 80%, all cases having a success rate percentage below 80% will be displayed as predicted late the monitoring view.Create the modelA button is present to run the computation of the prediction model for a particular case.The model is then computed using all current history is present in the ICI storage. You can at any time compute again the prediction model to take in account newly finished cases.",
      "url": " /ici/1.0/configure",
      "author": "",
      "categories": ""
    }
    ,
  

    "ici-1-0-dashboard": {
      "title": "Business Process Intelligence dashboard",
      "content"     : "Business Process Intelligence dashboardBusiness Process Intelligence dashboard.KibanaOur examplesCreate your ownKibanaOur examplesCreate your own",
      "url": " /ici/1.0/dashboard",
      "author": "",
      "categories": ""
    }
    ,
  

    "ici-1-0-getting-started": {
      "title": "Getting started",
      "content"     : "Getting startedBonita Intelligent Continuous Improvement Add-on (ICI Add-on) installation and configuration instructions.This chapter covers Evaluation and Production, two different installation modes.DownloadInstallationEvaluation modeProduction modeConfigurationDownloadDownload ICI Add-on from Bonitasoft Customer Portal.The archive contains:  An installation guide: installation-guide.md  The ICI application: ici-application-&amp;lt;version&amp;gt;.zip  Two Living Applications: Case Monitoring with predictions, and Configuration of the first application  An installer: bin/bonita-iciInstallationInstallation can be done in a Evaluation or Production mode. The major difference between those modes is that in the Evaluation mode, Elasticsearch and ICI servers are provided in Docker containers, with basic settings.This mode is very easy to install, to get immediate value from the ICI add-on.However, to ensure the best performance of a system using Elasticsearch, advanced settings are needed. This means that the ICI Add-on installed in Evaluation mode may not handle a large volume of data efficiently.So, for production, we recommand to switch to a clusterized and configured Elasticsearch instance, and install ICI on Production mode.Check all pre-requisites prior to install.Evaluation mode  Ensure you have java installed, using command java -version  Ensure you have Docker installed, using command docker --version  Docker requires an active Internet connection to pull the Elasticsearch Docker image and to build the ICI application image  Follow the installation guide “evaluation mode” instructions from the archive.Production mode  Ensure you have Java installed, using the command java -version  Follow the installation guide “production mode” instructions.ConfigurationMost of the configuration is done by the installer.Once installed, you need to setup the Bonita Portal profile mapping for profiles Configuration and Process Manager.Process Manager mapping must also be configured for each process in order to display them in the Operations Management living application.",
      "url": " /ici/1.0/getting_started",
      "author": "",
      "categories": ""
    }
    ,
  

    "ici-1-0-index": {
      "title": "index",
      "content"     : "Bonita Intelligent Continuous Improvement Add-onThis add-on provides a solution to use Intelligent Continuous Improvement practice for your Bonita platform.It is composed of a application, connected to Bonita Engine database, and two living applications to configure and monitor open cases.",
      "url": " /ici/1.0/index",
      "author": "",
      "categories": ""
    }
    ,
  

    "ici-1-0-installation-guide": {
      "title": "Installation guide",
      "content"     : "Installation guideBonita ICI installation guide. It covers evaluation and production modes installation, and detailed available parameters values.Installation can be done using evaluation or production modes. Evaluation mode will start two Docker containers and deploy Living Applications. Production mode is an on-premise ICI server deployment.Hardware and software requirementsBonita platformEvaluation modeLinux / OSXInteractive installer Production mode ElasticsearchICI serverLaunchInstallation of ICI Living ApplicationsHardware and software requirementsCheck all requirements detailed in Bonitasoft offical documentationBonita platformFirst of all, you need an up and running Bonita platform 7.5.4 or greater.ICI server will connect directly to Bonita database, in a read-only manner.Evaluation modeThis mode is designed to get a fully functional ICI stack including ICI server, ICI storage and Living Applications for configuration and operations management.Due to the usage of Docker containers for ICI server and storage, this mode is not recommended for a production platform.Linux / OSXElasticsearch, even in a Docker container, requires a specific configuration of virtual memory. For more information, see elasticsearch documentation# configure runtime environnementsudo sysctl -w vm.max_map_count=262144or edit file /etc/sysctl.conf fileInteractive installerRun the Add-on using bonita-ici (bonita-ici.bat on Windows platform) script that is located inside the bin folderThis installer will do the following operations:  prompt for parameters if they are not provided in the command line  deploy an Elasticsearch server in a Docker container  configure and deploy the ICI server in a Docker container  deploy the two Living Applications configured to run on top of this installation.Example:./bonita-ici -d jdbc:postgresql://192.23.1.25:5432/bonita-u bonita -p bpm  -b https://192.23.1.24:8080/bonita -U install -P install -H 192.23.1.23Parameters are:  d: the jdbc url of the bonita datasource to use  u: the username for the datasource  p: the username for the datasource  b: the url of bonita platform  U: the username to use when deploying LAs on bonita (default ‘install’)  P: the password to use when deploying LAs on bonita (default ‘install’)  H: the host on which this current host is accessible form bonita (i.e. the external ip),  (default ‘localhost’)The ports on which Elasticsearch and ICI standalone application will be deployed can be customized  i: the port of the deployed ICI application (default ‘8082’)  e: the port of the deployed elasticsearch (default ‘9200’)use ./bonita-ici --help to display all optionsIt can be stopped using bonita-ici stopProduction modeThe deliverable is composed of one standalone application, two Bonita Living Applications, and an installer that willhelp you install the backend and deploy the two Living Applications in your current instance of the Bonita platform.bonita-ici-&amp;lt;VERSION&amp;gt;.zip|---- ici-application-&amp;lt;VERSION&amp;gt;.zip   // Standalone application for A.I.|---- la-configuration-&amp;lt;VERSION&amp;gt;.zip  // Bonita L.A. for I.C.I. configuration|---- la-operations-management-&amp;lt;VERSION&amp;gt;.zip  // Bonita L.A. for Operations Management|---- la.properties   // properties used by L.A. deployer utility|---- installation-guide.md   // this file|---- bin/bonita-ici  // an utility that start the dockers and deploy L.A.s|---- bin/bonita-ici.bat  // an utility that start the dockers and deploy L.A.s (Windows)|---- jdbc_drivers/   // the folder where to put the jdbc driver of the Bonita platform databaseElasticsearchThe ICI server requires and Elasticsearch. Supported versions are 6.2.3 or above, in cluster or single node mode.For more information, please refer to the official installation guideICI server  Copy ici-application-&amp;lt;VERSION&amp;gt;.zip to the host.  Unzip it in the directory of your choice.We will refer to the extracted directory as ICI_APPLICATION_HOME.ConfigurationEdit $ICI_APPLICATION_HOME/application.properties to configure the application.Mandatory parameters are:In Elasticsearch configurationbonita.elasticsearch.hosts  // http url(s) of the installed Elasticsearch # when Elasticsearch endpoints are protected by authentication,# rest client basic authentication can be enabled by adding properties as follow#bonita.elasticsearch.username=admin#bonita.elasticsearch.password=changemeIn Bonita database configurationbonita.datasource.url   // url of Bonita Platform databasebonita.datasource.username  // username used to connect to the Bonita database (can be a read-only user)bonita.datasource.password  // password associated to the user used to connect to Bonita databaseOracle only: copy Jdbc driver in $ICI_APPLICATION_HOME/lib (drivers for PostgreSQL, MySQL and MS SqlServer are already provided).Advanced configurationOther parameters are available in $ICI_APPLICATION_HOME/application.properties.We recommend you to read this file and change other parameters if needed.Advanced polling profile mode (Oracle only)This mode requires that the database user is allowed to create materialized views. To grant this, use GRANT CREATE MATERIALIZED VIEW TO &amp;lt;USER&amp;gt; using a SYS connection prior to start the application.To activate this mode, uncomment this property in $ICI_APPLICATION_HOME/application.properties#bonita.ici.polling.profile=advancedLaunchTo launch the application, simply run $ICI_APPLICATION_HOME/bin/bonita-ici on Linux or $ICI_APPLICATION_HOME/bin/bonita-ici.bat on Windows.This will start a web server on port 8082 by default (if not changed in $ICI_APPLICATION_HOME/application.properties)Installation of ICI Living ApplicationsUsing the deployerThis method is the recommended way. Use the command below, you will be prompted for required parameters./bonita-ici deployManuallyThis method is the not recommended way, but can be used if you want fine control of deployed Living Applications.Living Application “Configuration”  Unzip la-configuration-&amp;lt;VERSION&amp;gt;.zip :├── api-configuration-&amp;lt;VERSION&amp;gt;.zip├── application.xml├── deploy.json├── page-configuration-&amp;lt;VERSION&amp;gt;.zip└── profile.xml  In the extracted folder, unzip the REST API extension named api-configuration-&amp;lt;VERSION&amp;gt;.zip├── api-configuration-&amp;lt;VERSION&amp;gt;│   ├── com│   ├── configuration.properties│   ├── lib│   └── page.properties  Edit the file configuration.properties to configure bonita.ici.application.urlRezip api-configuration-&amp;lt;VERSION&amp;gt;.zipLogin to Bonita Portal with credentials that belong to the Administrator profile.  In Organization &amp;gt; Profiles, install profile profile.xml located in la-configuration-&amp;lt;VERSION&amp;gt;.zip  To edit the mapping of Configuration profile, click on “More” in the third panel.  Add all needed organization entities that will be able to access this Living Application.In Resources, install the REST API extension api-configuration.zip located in la-configuration-&amp;lt;VERSION&amp;gt;.zip  In Resources, install the page page-configuration.zip located in la-configuration-&amp;lt;VERSION&amp;gt;.zip  In Applications, install the Living Application application.xml located in la-configuration-&amp;lt;VERSION&amp;gt;.zip  Living Application “Monitoring”  Unzip la-operations-management-&amp;lt;VERSION&amp;gt;.zip :├── api-monitoring-&amp;lt;VERSION&amp;gt;.zip├── application.xml├── deploy.json├── page-operations-management-&amp;lt;VERSION&amp;gt;.zip└── profile.xml  In the extracted folder, unzip the REST API extension named api-monitoring-&amp;lt;VERSION&amp;gt;.zip├── api-monitoring-&amp;lt;VERSION&amp;gt;│   ├── com│   ├── configuration.properties│   ├── lib│   └── page.properties  Edit the file configuration.properties to configure bonita.ici.application.urlRezip api-monitoring-&amp;lt;VERSION&amp;gt;.zipLogin to Bonita Portal with credentials that belong to the Administrator profile.  In Organization &amp;gt; Profiles, install profile profile.xml located in la-operations-management-&amp;lt;VERSION&amp;gt;.zip  To edit the mapping of Monitoring profile, click on “More” in the third panel.  Add all needed organization entities that will be able to access this Living Application.In Resources, install the REST API extension api-monitoring.zip located in la-operations-management-&amp;lt;VERSION&amp;gt;.zip  In Resources, install the page page-operations-management.zip located in la-operations-management-&amp;lt;VERSION&amp;gt;.zip  In Applications, install the Living Application application.xml located in la-operations-management-&amp;lt;VERSION&amp;gt;.zip  ",
      "url": " /ici/1.0/installation_guide",
      "author": "",
      "categories": ""
    }
    ,
  

    "ici-1-0-monitoring": {
      "title": "Monitor cases",
      "content"     : "Monitor casesThe Operation managment living application contains pages to monitor cases given their time prediction.The UIThe UIThe view is filtered by process and optionally its version.It is composed by a pie chart that shows the ratio between cases late, predicted late and on time.It also contains a list of cases that displays the success rate percentage and the time remaining before the target duration.You can click on a particular case to display its overview.",
      "url": " /ici/1.0/monitoring",
      "author": "",
      "categories": ""
    }
    ,
  

    "ici-1-0-polling": {
      "title": "Poll data from Bonita Engine database",
      "content"     : "Poll data from Bonita platform to ICI ModuleIn order to learn from the history of all executed processes in Bonita platform, ICI backend need to access and poll data from Bonita platform database.The first time ICI backend is launched, all data regarding case and task execution is retrieved from the Bonita platform database. Then, every 15 minutes (default configuration), a job updates the module with data of newly executed tasks and cases.ConfigurationManage polling executionsTroubleshootingPolling errorsDeleted casesConfigurationAll these configuration can be set in the application.properties of the ICI backend.Bonita platform database connection informationsbonita.datasource.url=jdbc urlbonita.datasource.username=usernamebonita.datasource.password=passwordIf you use oracle you need to add your driver lib folder of the ICI backend ( or in the jdbc_driver folder of the  installer if you use it).Polling rate interval, i.e. at each rate the data in ICI backend will be updatedbonita.ici.polling.rate_minute=15The connection pool of this polling can be configured to limit or increase the polling velocity.It can be useful to decrease it when you want to limit the impact of the ICI modules on Bonita platform’s performances.spring.datasource.hikari.maximum-pool-size=20Manage polling executionsThe polling can be handled on a page served directly on the ICI backend. By default it can be accessed on http://localhost:8082/This page allows to:  activate/deactivate the polling  run it immediately  cancel any running polling  see previous polling executionsTroubleshootingPolling errorsWhen a polling execution fails, it can be seen in error on the ICI backend. By default it can be accessed on http://localhost:8082/.More information would be available in output logs on the ICI backend, either in the Standard output or in the log file logs/bonita-ici.logDeleted casesWhen a started case is already polled in ICI storage and then deleted in Bonita platform, this case is still present in ICI storage and will still be displayed in Operation Management Living app, but this overview can’t be displayed anymore since data is deleted from Bonita database .",
      "url": " /ici/1.0/polling",
      "author": "",
      "categories": ""
    }
    ,
  

    "ici-1-0-prerequisites": {
      "title": "Pre-requisites",
      "content"     : "Pre-requisitesBonita Intelligent Continuous Improvement prerequisites list all required environment to operate ICI add-on.HardwareICI serverElastic searchSoftwareSkillsDataHardwareWe recommend to use a dedicated server for ICI, and for the ICI storage.ICI serverHardware required for ICI server:Type  Minimum  Recommended  Processors  4 CPU cores  8 CPU cores or more  Memory (RAM)  4 GB  12 GB or more, depending on usage  Disk space  10 GB  10 GB  When predictive model is computed, nearly all computing is done in JVM memory. Most of computation is done in memory,while hard disk is only used for logging.Elastic searchIf you deploy elastic on premise, we recommend to follow official elastic support matrix and installation guideSoftwareSoftware required for ICI add-on:   Version  Operating system     Microsoft Windows Server  2016 64 bits and higher  Red Hat Enterprise Linux  6.5 64 bits and higher  Ubuntu  16.04 LTS 64 bits and higher  Java Virtual Machine     Oracle Java SE Runtime Environment  8u112 (see note 1)  OpenJDK  8u112 (see note 1)  Bonita platform     Bonita  7.5.4 and higher (see note 2, 3 and 4)  Storage     Elasticsearch  6.2.4 and higher (unless using evaluation mode)  Docker     Docker  18.03 and higher (only if using evaluation mode)  Browser     Mozilla Firefox  latest version  Google Chrome  latest version  Microsoft Edge  latest version  Mobile     Mozilla Firefox  latest version  Google Chrome  latest version  Apple Safari  latest version  Notes:  ICI can be executed on Java 8. Java 9 and above are not yet supported.  All subscription edition are supported.  Archive must be activated  ICI has its own connection pool to connect to Bonita engine database. Ensure database has available connections in addition to Bonita connectionsWhen installing ICI in evaluation mode, an active Internet connexion is required to download Docker images.SkillsICI is not a Data Scientist tooling, so no particular skills are required to use the add-onDataData polled from Bonita engine database use archive table to read BPM history, thus Archive mode be activated.",
      "url": " /ici/1.0/prerequisites",
      "author": "",
      "categories": ""
    }
    ,
  

    "ici-1-0-process-mining": {
      "title": "Process-mining",
      "content"     : "Process-miningProcess mining is a set of analysis made on any enterprise data log or events, in order to discover processes and compute some statistics or business analytic queries. Applied to Bonita platform, we use BPM event logs stored in Bonita engine database to compute a predictive modelGeneralWhat is used in ICI v1: Predict chances to finish on timeGeneralAs an introduction, you can see some of ours webinars formore information about process mining.What is used in ICI v1: Predict chances to finish on timeAnalysis done in ICI will replay each process instance using its history and compute the remaining time on each state it went through.Then percentiles of the remaining time for each of these state will be stored in a prediction model.The prediction model allows to predict the percentage of chance to be within a target duration.Then the state of the case is deducted from this percentage and target duration, possible states are on time, late, or predicted late.",
      "url": " /ici/1.0/process_mining",
      "author": "",
      "categories": ""
    }
    ,
  

    "ici-1-0-release-notes": {
      "title": "Release Notes",
      "content"     : "Release notesWhat&#39;s in ICI v1.0.0 Limitations and known issuesWhat’s in ICI v1.0.0  A mechanism to incrementally retrieve Data from Bonita platform database.  A process mining algorithm that predict what are the chances that a case will finish in time and how much time it will take.  A living application that allows to define the target for each of these processes.  A living application that allows to view cases along with their prediction.Limitations and known issues  The process mining algorithm does not yet take into account your business data. It will be relevant only on processes which their duration are correlated to the path that is taken in the process.  No security mechanism implemented in the ICI backend. It is up to you to secure the access to the ICI backend REST APIs.",
      "url": " /ici/1.0/release_notes",
      "author": "",
      "categories": ""
    }
    ,
  

    "ici-1-0-send-data": {
      "title": "Send us (anonymous) data!",
      "content"     : "Send us (anonymous) data !To be able to have better predictions we need to have real world data.These data can help us try out and test new version of our algorithm. It means also that in later version of the modules there is higher chances that the prediction made but the module fit your own processes.If you are willing to help us in that way follow that procedure given in this blog post.and sent it to use at rd.user@bonitasoft.com",
      "url": " /ici/1.0/send_data",
      "author": "",
      "categories": ""
    }
    
  
 
    

    "posts-2018-05-25-welcome-to-jekyll": {
      "title": "Welcome to Jekyll!",
      "content"     : "You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.Jekyll also offers powerful support for code snippets:def print_hi(name)  puts &quot;Hi, #{name}&quot;endprint_hi(&#39;Tom&#39;)#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.",
      "url": " /posts/2018-05-25-welcome-to-jekyll",
      "author": "",
      "categories": "jekyll, update"
    }
    
  
 
}